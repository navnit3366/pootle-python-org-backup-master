<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE tmx SYSTEM "tmx14.dtd">
<tmx version="1.4">
  <header creationtool="Translate Toolkit" creationtoolversion="3.1.1" segtype="sentence" o-tmf="UTF-8" adminlang="en" srclang="en" datatype="PlainText"/>
  <body>
    <tu>
      <tuv xml:lang="en">
        <seg>python setup.py build</seg>
      </tuv>
      <tuv xml:lang="fr">
        <seg>python setup.py build</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>python setup.py install</seg>
      </tuv>
      <tuv xml:lang="fr">
        <seg>python setup.py install</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>python setup.py sdist</seg>
      </tuv>
      <tuv xml:lang="fr">
        <seg>python setup.py sdist</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>See also</seg>
      </tuv>
      <tuv xml:lang="fr">
        <seg>Voir aussi</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>#include &lt;Python.h&gt;  int main(int argc, char *argv[]) {     PyObject *pName, *pModule, *pDict, *pFunc;     PyObject *pArgs, *pValue;     int i;      if (argc &lt; 3) {         fprintf(stderr,"Usage: call pythonfile funcname [args]\n");         return 1;     }      Py_Initialize();     pName = PyUnicode_FromString(argv[1]);     /* Error checking of pName left out */      pModule = PyImport_Import(pName);     Py_DECREF(pName);      if (pModule != NULL) {         pFunc = PyObject_GetAttrString(pModule, argv[2]);         /* pFunc is a new reference */          if (pFunc &amp;&amp; PyCallable_Check(pFunc)) {             pArgs = PyTuple_New(argc - 3);             for (i = 0; i &lt; argc - 3; ++i) {                 pValue = PyLong_FromLong(atoi(argv[i + 3]));                 if (!pValue) {                     Py_DECREF(pArgs);                     Py_DECREF(pModule);                     fprintf(stderr, "Cannot convert argument\n");                     return 1;                 }                 /* pValue reference stolen here: */                 PyTuple_SetItem(pArgs, i, pValue);             }             pValue = PyObject_CallObject(pFunc, pArgs);             Py_DECREF(pArgs);             if (pValue != NULL) {                 printf("Result of call: %ld\n", PyLong_AsLong(pValue));                 Py_DECREF(pValue);             }             else {                 Py_DECREF(pFunc);                 Py_DECREF(pModule);                 PyErr_Print();                 fprintf(stderr,"Call failed\n");                 return 1;             }         }         else {             if (PyErr_Occurred())                 PyErr_Print();             fprintf(stderr, "Cannot find function \"%s\"\n", argv[2]);         }         Py_XDECREF(pFunc);         Py_DECREF(pModule);     }     else {         PyErr_Print();         fprintf(stderr, "Failed to load \"%s\"\n", argv[1]);         return 1;     }     Py_Finalize();     return 0; }</seg>
      </tuv>
      <tuv xml:lang="fr">
        <seg>#include &lt;Python.h&gt;  int main(int argc, char *argv[]) { PyObject *pName, *pModule, *pDict, *pFunc; PyObject *pArgs, *pValue; int i; if (argc &lt; 3) { fprintf(stderr,"Usage: call pythonfile funcname [args]
"); return 1; } Py_Initialize(); pName = PyUnicode_FromString(argv[1]); /* Error checking of pName left out */ pModule = PyImport_Import(pName); Py_DECREF(pName); if (pModule != NULL) { pFunc = PyObject_GetAttrString(pModule, argv[2]); /* pFunc is a new reference */ if (pFunc &amp;&amp; PyCallable_Check(pFunc)) { pArgs = PyTuple_New(argc - 3); for (i = 0; i &lt;  argc - 3; ++i) { pValue = PyLong_FromLong(atoi(argv[i + 3])); if (!pValue) { Py_DECREF(pArgs); Py_DECREF(pModule); fprintf(stderr, "Cannot convert argument
"); return 1; } /* pValue reference stolen here: */ PyTuple_SetItem(pArgs, i, pValue); } pValue = PyObject_CallObject(pFunc, pArgs); Py_DECREF(pArgs); if (pValue != NULL) { printf("Result of call: %ld
", PyLong_AsLong(pValue)); Py_DECREF(pValue); } else { Py_DECREF(pFunc); Py_DECREF(pModule); PyErr_Print(); fprintf(stderr,"Call failed
"); return 1; } } else { if (PyErr_Occurred()) PyErr_Print(); fprintf(stderr, "Cannot find function \"%s\"
", argv[2]); } Py_XDECREF(pFunc); Py_DECREF(pModule); } else { PyErr_Print(); fprintf(stderr, "Failed to load \"%s\"
", argv[1]); return 1; } Py_Finalize(); return 0; }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>pValue = PyObject_CallObject(pFunc, pArgs);</seg>
      </tuv>
      <tuv xml:lang="fr">
        <seg>pValue = PyObject_CallObject(pFunc, pArgs);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>#include &lt;Python.h&gt;</seg>
      </tuv>
      <tuv xml:lang="fr">
        <seg>#include &lt;Python.h&gt;</seg>
      </tuv>
    </tu>
  </body>
</tmx>
