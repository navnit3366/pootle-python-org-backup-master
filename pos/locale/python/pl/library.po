# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2010, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2010-06-30 14:00\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 1.7.0\n"

msgid "2to3 - Automated Python 2 to 3 code translation"
msgstr ""
"2to3 Zautomatyzowany tłumacz kodu z języka pytonowskiego w wersji 2 do "
"wersji 3"

msgid "2to3 is a Python program that reads Python 2.x source code and applies a series of *fixers* to transform it into valid Python 3.x code.  The standard library contains a rich set of fixers that will handle almost all code.  2to3 supporting library :mod:`lib2to3` is, however, a flexible and generic library, so it is possible to write your own fixers for 2to3.  :mod:`lib2to3` could also be adapted to custom applications in which Python code needs to be edited automatically."
msgstr ""
"2to3 jest programem języka pytonowskiego który wczytuje kod źródłowy języka "
"pytonowskiego 2.x i zastosowuje serię *ulepszeń* aby przełożyć go do "
"poprawnej postaci kodu języka pytonowskiego 3.x. Standardowa biblioteka "
"zawiera bogaty zbiór ulepszeń które przełożą prawie cały kod. biblioteka "
"wspierająca 2to3 :mod:`lib2to3` jest jednakże elastyczną i podstawową "
"biblioteką, więc jest możliwe napisanie swoich własnych ulepszeń dla 2to3. "
":mod:`lib2to3` może być także przystosowana do szczególnych aplikacji w "
"których kod języka pytonowskiego miałby być edytowany automatycznie"

msgid "Using 2to3"
msgstr "Użycie 2to3"

msgid "2to3 will usually be installed with the Python interpreter as a script.  It is also located in the :file:`Tools/scripts` directory of the Python root."
msgstr ""
"2to3 jest zwykle instalowane z programem interpretującym polecenia języka "
"pytonowskiego jako skrypt. Jest też umieszczone w podkatalogu "
":file:`Tools/scripts` drzewa katalogowego języka pytonowskiego"

msgid "2to3's basic arguments are a list of files or directories to transform.  The directories are to recursively traversed for Python sources."
msgstr ""
"podstawowymi argumentami 2to3 jest lista plików lub katalogów to zamiany. "
"Podkatalogi są przeszukiwane rekursywnie w poszukiwaniu plików źródłowych "
"języka pytonowskiego."

msgid "Here is a sample Python 2.x source file, :file:`example.py`::"
msgstr ""
"Oto przykład pliku źródłowego napisanego w języku pytonowskim w wersji 2.x - "
" :file:`example.py`::"

msgid "def greet(name):     print \"Hello, {0}!\".format(name) print \"What's your name?\" name = raw_input() greet(name)"
msgstr ""
"def greet(name):print \"Cześć, {0}!\".format(name) print \"Jak masz na imię?\" "
"name = raw_input() greet(name)"

msgid "It can be converted to Python 3.x code via 2to3 on the command line::"
msgstr ""
"Można to zamienić na kod w języku pytonowskim w wersji 3.x przez 2to3 w "
"linii poleceń::"

msgid "$ 2to3 example.py"
msgstr "$ 2to3 example.py"

msgid "A diff against the original source file is printed.  2to3 can also write the needed modifications right back to the source file.  (A backup of the original file is made unless :option:`-n` is also given.)  Writing the changes back is enabled with the :option:`-w` flag::"
msgstr ""
"Wypisywane są różnice względem pierwotnego pliku źródłowego. 2to3 może też "
"zapisać oczekiwane modyfikacje wprost do pliku źródłowego. (Jest sporządzana "
"kopia zapasowa pliku źródłowego, chyba że wywołanie nastąpiło z opcją "
":option:`-n`.) Zapis zmian do pliku źródłowego jest możliwy z flagą "
":option:`-w`::"

msgid "$ 2to3 -w example.py"
msgstr "$ 2to3 -w example.py"

msgid "After transformation, :file:`example.py` looks like this::"
msgstr "Po transformacji, plik :file:`example.py` wygląda następująco::"

msgid "def greet(name):     print(\"Hello, {0}!\".format(name)) print(\"What's your name?\") name = input() greet(name)"
msgstr ""
"def greet(name): print(\"Cześć, {0}!\".format(name)) print(\"Jak masz na "
"imię?\") name = input() greet(name)"

msgid "Comments and exact indentation are preserved throughout the translation process."
msgstr ""
"Komentarze i dokładne wcięcia są zachowywane podczas procesu tłumaczenia"

msgid "By default, 2to3 runs a set of :ref:`predefined fixers <2to3-fixers>`.  The :option:`-l` flag lists all available fixers.  An explicit set of fixers to run can be given with :option:`-f`.  Likewise the :option:`-x` explicitly disables a fixer.  The following example runs only the ``imports`` and ``has_key`` fixers::"
msgstr ""
"Domyślnie, 2to3 wykonuje serię `predefiniowanych przekształceń "
"<2to3-fixers>`. Przełącznik :option:`-l` wypisuje wszystkie dostępne "
"przekształcenia. Precyzyjny zestaw przekształceń do wykonania może zostać "
"podany po parametrze :option:`-f`. Podobnie przełącznik :option:`-x` "
"wyraźnie wyłącza przekształcenie. Następujący przykład uruchamia tylko "
"przekształcenia ``imports`` i ``has_key``::"

msgid "$ 2to3 -f imports -f has_key example.py"
msgstr "$ 2to3 -f imports -f has_key example.py"

msgid "This command runs every fixer except the ``apply`` fixer::"
msgstr ""
"Ta komenda uruchamia każde przekształcenie oprócz przekształcenia "
"``apply``::"

msgid "$ 2to3 -x apply example.py"
msgstr "$ 2to3 -x apply example.py"

msgid "Some fixers are *explicit*, meaning they aren't run by default and must be listed on the command line to be run.  Here, in addition to the default fixers, the ``idioms`` fixer is run::"
msgstr ""
"Niektóre przekształcenia są *szczególne*, co oznacza że nie są uruchamiane "
"domyślnie i muszą być wymienione w linii poleceń aby zostać uruchomionymi. "
"Tutaj w uzupełnieniu domyślnych przekształceń, przekształcenie ``idioms`` "
"jest uruchamiane::"

msgid "$ 2to3 -f all -f idioms example.py"
msgstr "$ 2to3 -f all -f idioms example.py"

msgid "Notice how passing ``all`` enables all default fixers."
msgstr ""
"Zauważ, że przekazanie ``all`` włącza wszystkie domyślne przekształcenia."

msgid "Sometimes 2to3 will find a place in your source code that needs to be changed, but 2to3 cannot fix automatically.  In this case, 2to3 will print a warning beneath the diff for a file.  You should address the warning in order to have compliant 3.x code."
msgstr ""
"Czasami 2to3 znajduje miejsce w twoim kodzie źródłowym które potrzebuje "
"zmiany, ale 2to3 nie może go zmienić automatycznie. W takim przypadku, 2to3 "
"wypisuje ostrzeżenie poniżej różnicy dla pliku. Powinieneś odpowiedzieć na "
"ostrzeżenie w celu zapewnienia kodu zgodnego z wersją 3.x."

msgid "2to3 can also refactor doctests.  To enable this mode, use the :option:`-d` flag.  Note that *only* doctests will be refactored.  This also doesn't require the module to be valid Python.  For example, doctest like examples in a reST document could also be refactored with this option."
msgstr ""
"2to3 może także poprawiać dokumenty typu doctest. Aby umożliwić ten tryb, "
"użyj przełącznika :option:`-d`. Zauważ że *tylko* dokumenty doctest zostaną "
"poprawione. Nie jest także wymagane aby moduł był prawidłowym plikiem "
"Pythona. Na przykład, przykłady doctest w dokumencie reST mogą też być "
"poprawiane przy użyciu tej opcji."

msgid "The :option:`-v` option enables output of more information on the translation process."
msgstr ""
"opcja :option:`-v` włącza wypisywanie większej ilości informacji o procesie "
"tłumaczenia."

msgid "Since some print statements can be parsed as function calls or statements, 2to3 cannot always read files containing the print function.  When 2to3 detects the presence of the ``from __future__ import print_function`` compiler directive, it modifies its internal grammar to interpert :func:`print` as a function.  This change can also be enabled manually with the :option:`-p` flag.  Use :option:`-p` to run fixers on code that already has had its print statements converted."
msgstr ""
"Od kiedy niektóre polecenia print można wczytywać jako odwołania do zadania "
"lub polecenia, 2to3 nie zawsze może wczytać pliki zawierające zadanie print. "
"Gdy 2to3 wykryje obecność dyrektywy kompilatora``from __future__ import "
"print_function``, modyfikuje swoją wewnętrzną gramatykę aby interpretować "
":func:`print` jako zadanie. Ta zmiana może także być włączana ręcznie przy "
"użyciu przełącznika :option:`-p`. Użyj :option:`-p` aby uruchomić "
"przekształcenia na kodzie na którym uprzednio wykonano konwersję poleceń "
"print."

msgid "Fixers"
msgstr "Przekształcenia"

msgid "Each step of transforming code is encapsulated in a fixer.  The command ``2to3 -l`` lists them.  As :ref:`documented above <2to3-using>`, each can be turned on and off individually.  They are described here in more detail."
msgstr ""
"Każdy krok transformacji kodu jest zawarty w jednym przekształceniu. "
"Polecenie ``2to3 -l`` wypisuje je. Jak :ref:`udokumentowano powyżej "
"<2to3-using>`, każde przekształcenie może być włączane i wyłączane "
"indywidualnie. Są tu opisane w większych szczegółach."

msgid "Removes usage of :func:`apply`.  For example ``apply(function, *args, **kwargs)`` is converted to ``function(*args, **kwargs)``."
msgstr ""
"Wyłącza użycie zadania :func:`apply`. Na przykład ``apply(function, *args, "
"**kwargs)`` jest zamieniane na ``function(*args, **kwargs)``."

msgid "Converts :class:`basestring` to :class:`str`."
msgstr "Zamienia :class:`basestring` na :class:`str`."

msgid "Converts :class:`buffer` to :class:`memoryview`.  This fixer is optional because the :class:`memoryview` API is similar but not exactly the same as that of :class:`buffer`."
msgstr ""
"Zamienia uogólnienie :class:`buffer` na :class:`memoryview`. To "
"przekształcenie jest nieobowiązkowe ponieważ sprzęg programowwania aplikacji "
"( - z ang. - API) uogólnienia :class:`memoryview` jest podobny choć nie "
"dokładnie taki sam jak ten z uogólnienia :class:`buffer`."

msgid "Converts ``callable(x)`` to ``isinstance(x, collections.Callable)``, adding an import to :mod:`collections` if needed."
msgstr ""
"Zamienia ``callable(x)`` na ``isinstance(x,collections.Callable)``, dodając "
"import do :mod:`collections` jeśli trzeba."

msgid "Fixes dictionary iteration methods.  :meth:`dict.iteritems` is converted to :meth:`dict.items`, :meth:`dict.iterkeys` to :meth:`dict.keys`, and :meth:`dict.itervalues` to :meth:`dict.values`.  Similarly, :meth:`dict.viewitems`, :meth:`dict.viewkeys` and :meth:`dict.viewvalues` are converted respectively to :meth:`dict.items`, :meth:`dict.keys` and :meth:`dict.values`.  It also wraps existing usages of :meth:`dict.items`, :meth:`dict.keys`, and :meth:`dict.values` in a call to :class:`list`."
msgstr ""
"Naprawia metody iterujące słowniki. :meth:`dict.iteritems` jest zamieniane "
"na :meth:`dict.items`, :meth:`dict.iterkeys` na :meth:`dict.keys`, i "
":meth:`dict.itervalues` na :meth:`dict.values`. Podobnie, "
":meth:`dict.viewitems`, :meth:`dict.viewkeys` i :meth:`dict.viewvalues` są "
"konwertowane odpowienio do :meth:`dict.items`, :meth:`dict.keys` i "
":meth:`dict.values`. Opakowuje też istniejące użycia :meth:`dict.items`, "
":meth:`dict.keys`, i :meth:`dict.values` w wywołaniu :class:`list`."

msgid "Converts ``except X, T`` to ``except X as T``."
msgstr "Zamienia ``except X, T`` na ``except X as T``."

msgid "Converts the :keyword:`exec` statement to the :func:`exec` function."
msgstr "Zamienia wyrażenie :keyword:`exec` na zadanie :func:`exec`."

msgid "Removes usage of :func:`execfile`.  The argument to :func:`execfile` is wrapped in calls to :func:`open`, :func:`compile`, and :func:`exec`."
msgstr ""
"Usuwa użycie :func:`execfile`. Argument :func:`execfile` jest opakowywany w "
"wywołanie zadania :func:`open`, :func:`compile`, i :func:`exec`."

msgid "Changes assignment of :attr:`sys.exitfunc` to use of the :mod:`atexit` module."
msgstr ""
"Zmienia przypisanie właściwości :attr:`sys.exitfunc` dla użycia modułu "
":mod:`atexit`."

msgid "Wraps :func:`filter` usage in a :class:`list` call."
msgstr "Opakowuje zadanie :func:`filter` w wywołanie uogólnienia :class:`list`."

msgid "Fixes function attributes that have been renamed.  For example, ``my_function.func_closure`` is converted to ``my_function.__closure__``."
msgstr ""
"Naprawia właściwości zadania których nazwy zostały zmienione. Na przykład, "
"``my_function.func_closure`` jest zamieniana na ``my_function.__closure__``."

msgid "Removes ``from __future__ import new_feature`` statements."
msgstr "Usuwa wyrażenia ``from __future__ import new_feature`."

msgid "Renames :func:`os.getcwdu` to :func:`os.getcwd`."
msgstr "Zmienia funkcję :func:`os.getcwdu` na :func:`os.getcwd`."

msgid "Changes ``dict.has_key(key)`` to ``key in dict``."
msgstr "Zmienia ``dict.has_key(key)`` na ``key in dict``."

msgid "This optional fixer performs several transformations that make Python code more idiomatic.  Type comparisons like ``type(x) is SomeClass`` and ``type(x) == SomeClass`` are converted to ``isinstance(x, SomeClass)``. ``while 1`` becomes ``while True``.  This fixer also tries to make use of :func:`sorted` in appropriate places.  For example, this block ::"
msgstr ""
"To opcjonalne przekształcenie wykonuje kilka transformacji które czynią kod "
"języka pytonowskiego bardziej idiomatycznym. Porównania typów takie jak "
"``type(x) is PewneUogolnienie`` i ``type(x) == PewneUogolnienie`` są "
"przekształcane na ``isinstance(x, PewneUogolnienie)``. ``while 1`` staje się "
"``while True``. Ta poprawka także próbuje użyć zadania :func:`sorted` we "
"właściwych miejscach. Na przykład, ten blok::"

msgid "L = list(some_iterable) L.sort()"
msgstr "L = list(pewne_iterowalne) L.sort()"

msgid "is changed to ::"
msgstr "jest zamieniany na ::"

msgid "L = sorted(some_iterable)"
msgstr "L = sorted(pewne_iterowalne)"

msgid "Detects sibling imports and converts them to relative imports."
msgstr ""
"Wykrywa pokrewne importowania i przekształca je na względne importowania."

msgid "Handles module renames in the standard library."
msgstr "Obsługuje zmiany nazw modułów w bibliotece standardowej."

msgid "Handles other modules renames in the standard library.  It is separate from the :2to3fixer:`imports` fixer only because of technical limitations."
msgstr ""
"Zarządza zmianami nazw innych modułów w bibliotece standardowej. Jest "
"oddzielony od przekształcenia :2to3fixer:`imports` tylko z powodu ograniczeń "
"technicznych."

msgid "Converts ``input(prompt)`` to ``eval(input(prompt))``"
msgstr "Zamienia ``input(prompt)`` na ``eval(input(prompt))``"

msgid "Converts :func:`intern` to :func:`sys.intern`."
msgstr "Zamienia :func:`intern` na :func:`sys.intern`."

msgid "Fixes duplicate types in the second argument of :func:`isinstance`.  For example, ``isinstance(x, (int, int))`` is converted to ``isinstance(x, (int))``."
msgstr ""
"Poprawia zduplikowanie typu w drugim parametrze zadania :func:`isinstance`. "
"Na przykład, ``isinstance(x, (int,int))`` jest zamieniane na ``isinstance(x, "
"(int))"

msgid "Removes imports of :func:`itertools.ifilter`, :func:`itertools.izip`, and :func:`itertools.imap`.  Imports of :func:`itertools.ifilterfalse` are also changed to :func:`itertools.filterfalse`."
msgstr ""
"Usuwa przywołania :func:`itertools.ifilter`, :func:`itertools.izip`, i "
":func:`itertools.imap`. Przywołania :func:`itertools.ifilterfalse` są także "
"zamieniane na :func:`itertools.filterfalse`."

msgid "Changes usage of :func:`itertools.ifilter`, :func:`itertools.izip`, and :func:`itertools.imap` to their built-in equivalents. :func:`itertools.ifilterfalse` is changed to :func:`itertools.filterfalse`."
msgstr ""
"Zmienia użycie funkcji :func:`itertools.ifilter`, :func:`itertools.zip`, i "
":func:`itertools.imap` na równoważniki wbudowane. Zadanie "
":func:`itertools.ifilterfalse` jest zamieniane na zadanie "
":func:`itertools.filterfalse`."

msgid "Strips the ``L`` prefix on long literals and renames :class:`long` to :class:`int`."
msgstr ""
"Zabiera przedrostek ``L`` na długich literałach i zmienia nazwę uogólnienia "
":class:`long` na :class:`int`."

msgid "Wraps :func:`map` in a :class:`list` call.  It also changes ``map(None, x)`` to ``list(x)``.  Using ``from future_builtins import map`` disables this fixer."
msgstr ""
"Opakowuje zadanie :func:`map` w wywołaniu :class:`list`. Zamienia także "
"``map(None, x)`` na ``list(x)``. Użycie ``from future_builtins import map`` "
"wyłącza tą poprawkę."

msgid "Converts the old metaclass syntax (``__metaclass__ = Meta`` in the class body) to the new (``class X(metaclass=Meta)``)."
msgstr ""
"Zamienia starą składnię metaclass (``__metaclass__ = Meta`` w ciele "
"uogólnienia) na nową (``class X(metaclass=Meta)``)."

msgid "Fixes old method attribute names.  For example, ``meth.im_func`` is converted to ``meth.__func__``."
msgstr ""
"Naprawia nazwy starych właściwości sposobów postepowania. Na przykład, "
"``meth.im_func`` jest zamieniana na ``meth.__func__``."

msgid "Converts the old not-equal syntax, ``<>``, to ``!=``."
msgstr "Zamienia starą składnię nie-równości, ``<>``, na ``!=``."

msgid "Converts the use of iterator's :meth:`~iterator.next` methods to the :func:`next` function.  It also renames :meth:`next` methods to :meth:`~object.__next__`."
msgstr ""
"Zamienia użycie sposobu postępowania iteratora :meth:`~iterator.next` na "
"zadanie :func:`next`. Zamienia także nazwę :meth:`next` na "
":meth:`~object.__next__`."

msgid "Renames :meth:`~object.__nonzero__` to :meth:`~object.__bool__`."
msgstr ""
"Zamienia sposób postępowania :meth:`~object.__nonzero__` na "
":meth:`~object.__bool__`."

msgid "Converts octal literals into the new syntax."
msgstr "Zamienia literały ósemkowe na nową składnię."

msgid "Add extra parenthesis where they are required in list comprehensions.  For example, ``[x for x in 1, 2]`` becomes ``[x for x in (1, 2)]``."
msgstr ""
"Dodaje dodatkowe nawiasy, gdzie są wymagane w zrozumieniu list. Na przykład, "
"``[x for x in 1, 2]`` staje się ``[x for x in (1, 2)]``."

msgid "Converts the :keyword:`print` statement to the :func:`print` function."
msgstr "Zamienia wyrażenie :keyword:`print` na zadanie :func:`print`."

msgid "Converts ``raise E, V`` to ``raise E(V)``, and ``raise E, V, T`` to ``raise E(V).with_traceback(T)``.  If ``E`` is a tuple, the translation will be incorrect because substituting tuples for exceptions has been removed in 3.0."
msgstr ""
"Zamienia ``raise E, V`` na ``raise E(V)``, i ``raise E, V, T`` na ``raise "
"E(V).with_traceback(T)``. Jeśli ``E`` jest krotką, zamiana będzie "
"nieprawidłowa ponieważ zamiana krotek na wyjątki została usunięta w wersji "
"3.0"

msgid "Converts :func:`raw_input` to :func:`input`."
msgstr "Zamienia zadanie :func:`raw_input` na :func:`input`."

msgid "Handles the move of :func:`reduce` to :func:`functools.reduce`."
msgstr ""
"Obsługuje przesunięcie zadania :func:`reduce` do :func:`functools.reduce`."

msgid "Changes :data:`sys.maxint` to :data:`sys.maxsize`."
msgstr "Zamienia :data:`sys.maxint` na :data:`sys.maxsize`."

msgid "Replaces backtick repr with the :func:`repr` function."
msgstr "Zamienia cytowany repr na zadanie :func:`repr`"

msgid "Replaces use of the :class:`set` constructor with set literals.  This fixer is optional."
msgstr ""
"Zamienia użycie konstruktora uogólnienia :class:`set` na literały zbiorów. "
"Ta zamiana jest opcjonalna."

msgid "Renames :exc:`StandardError` to :exc:`Exception`."
msgstr "Zamienia nazwę wyjątku :exc:`StandardError` na :exc:`Exception`."

msgid "Changes the deprecated :data:`sys.exc_value`, :data:`sys.exc_type`, :data:`sys.exc_traceback` to use :func:`sys.exc_info`."
msgstr ""
"Zamienia przedawnione :data:`sys.exc_value`, :data:`sys.exc_type`, "
":data:`sys.exc_traceback` aby używać :func:`sys.exc_info`."

msgid "Fixes the API change in generator's :meth:`throw` method."
msgstr ""
"Naprawia zmianę sprzęgu API w generatorze sposobu postępowania "
":meth:`throw`."

msgid "Removes implicit tuple parameter unpacking.  This fixer inserts temporary variables."
msgstr ""
"Usuwa niejawny parametr krotki odpakowania. Ta poprawka wstawia tymczasowe "
"zmienne."

msgid "Fixes code broken from the removal of some members in the :mod:`types` module."
msgstr ""
"Naprawia kod popsuty z powodu usunięcia niektórych członków modułu "
":mod:`types`."

msgid "Renames :class:`unicode` to :class:`str`."
msgstr "Zamienia nazwę uogólnienia :class:`unicode` na :class:`str`."

msgid "Handles the rename of :mod:`urllib` and :mod:`urllib2` to the :mod:`urllib` package."
msgstr ""
"Obsługuje zmianę nazwy :mod:`urllib` i :mod:`urllib2` na pakiet "
":mod:`urllib`."

msgid "Removes excess whitespace from comma separated items.  This fixer is optional."
msgstr ""
"Usuwa nadmiarowe białe znaki z rozdzielonych przecinkiem elementów. Ta "
"poprawka jest opcjonalna."

msgid "Renames :func:`xrange` to :func:`range` and wraps existing :func:`range` calls with :class:`list`."
msgstr ""
"Zamienia :func:`xrange` na :func:`range` i opakowuje istniejące wywołania "
":func:`range` za pomocą :class:`list`."

msgid "Changes ``for x in file.xreadlines()`` to ``for x in file``."
msgstr "Zamienia ``for x in file.xreadlines()`` na ``for x in file``."

msgid "Wraps :func:`zip` usage in a :class:`list` call.  This is disabled when ``from future_builtins import zip`` appears."
msgstr ""
"Opakowuje użycie zadania :func:`zip` w wywołanie uogólnienia :class:`list`. "
"To jest wyłączone gdy pojawia się ``from future_builtins import zip``."

msgid ":mod:`lib2to3` - 2to3's library"
msgstr ":mod:`lib2to3` biblioteka 2to3"

msgid "The :mod:`lib2to3` API should be considered unstable and may change drastically in the future."
msgstr ""
"sprzęg (API) modułu :mod:`lib2to3` powinno być uważane za niestabilne i może "
"się zmienić znacząco w przyszłości."

msgid ":mod:`__future__` --- Future statement definitions"
msgstr ":mod:`__future__` ---  Definicje przyszłych wyrażeń"

msgid ":mod:`__future__` is a real module, and serves three purposes:"
msgstr ":mod:`__future__` jest prawdziwym modułem, i służy trzem celom:"

msgid "To avoid confusing existing tools that analyze import statements and expect to find the modules they're importing."
msgstr ""
"Uniknąć pomylenia istniejących narzędzi które analizują wyrażenia importu i "
"oczekiwać, że znajdzie moduł, który importuje."

msgid "To ensure that :ref:`future statements <future>` run under releases prior to 2.1 at least yield runtime exceptions (the import of :mod:`__future__` will fail, because there was no module of that name prior to 2.1)."
msgstr ""
"Zapewnić że :ref:`przyszłe wyrażenia <future>` uruchamiane pod wydaniami "
"sprzed 2.1 przynajmniej dają wyjątki czasu wykonania (import "
":mod:`__future__ zawiedzie, gdyż nie było takiego modułu przed wersją 2.1)."

msgid "To document when incompatible changes were introduced, and when they will be --- or were --- made mandatory.  This is a form of executable documentation, and can be inspected programmatically via importing :mod:`__future__` and examining its contents."
msgstr ""
"Dokumentować kiedy niezgodne zmiany zostały wprowadzone, i kiedy zostaną --- "
"lub zostały --- obowiązujące. To jest forma dokumentacji programu, i może "
"być sprawdzana programowo przez importowanie modułu :mod:`__future__` i "
"przeegzaminowanie jego zawartości."

msgid "Each statement in :file:`__future__.py` is of the form::"
msgstr "Każde wyrażenie w pliku :file:`__future__.py` jest w formie::"

msgid "FeatureName = _Feature(OptionalRelease, MandatoryRelease,                        CompilerFlag)"
msgstr ""
"NazwaWłasności = _Feature(OptionalRelease, MandatoryRelease, "
"                       CompilerFlag)"

msgid "where, normally, *OptionalRelease* is less than *MandatoryRelease*, and both are 5-tuples of the same form as ``sys.version_info``::"
msgstr ""
"Gdzie, normalnie, *OpcjonalneWydanie* jest mniej niż *ObowiązkowymWydaniem*, "
"i oba są 5-krotkami o tej samej formie jak ``sys.version_info``::"

msgid "(PY_MAJOR_VERSION, # the 2 in 2.1.0a3; an int  PY_MINOR_VERSION, # the 1; an int  PY_MICRO_VERSION, # the 0; an int  PY_RELEASE_LEVEL, # \"alpha\", \"beta\", \"candidate\" or \"final\"; string  PY_RELEASE_SERIAL # the 3; an int )"
msgstr ""
"(PY_MAJOR_VERSION, # 2 w 2.1.0a3; liczba całkowita  PY_MINOR_VERSION, # 1; "
"liczba całkowita  PY_MICRO_VERSION, # 0; liczba całkowita  PY_RELEASE_LEVEL, "
"# \"alpha\", \"beta\", \"candidate\" or \"final\"; ciąg znaków  PY_RELEASE_SERIAL # "
"3; liczba całkowita )"

msgid "*OptionalRelease* records the first release in which the feature was accepted."
msgstr ""
"*OpcjonalneWydanie* zapamiętuje pierwsze wydanie w którym własność była "
"zaakceptowana."

msgid "In the case of a *MandatoryRelease* that has not yet occurred, *MandatoryRelease* predicts the release in which the feature will become part of the language."
msgstr ""
"W przypadku gdy *ObowiązkoweWydanie* jeszcze nie nastąpiło, "
"*ObowiązkoweWydanie* przewiduje wydanie, w którym właściwość stanie się "
"częścią języka."

msgid "Else *MandatoryRelease* records when the feature became part of the language; in releases at or after that, modules no longer need a future statement to use the feature in question, but may continue to use such imports."
msgstr ""
"W przeciwnym razie *MandatoryRelease* zapisuje kiedy właściwość stała się "
"częścią języka; w wydaniach w tym lub późniejszych, moduły nie potrzebują "
"więcej określenia przyszłości aby używać własności o której jest mowa, ale "
"mogą nadal używać takich importów."

msgid "*MandatoryRelease* may also be ``None``, meaning that a planned feature got dropped."
msgstr ""
"*MandatoryRelease* może także być ``None``, w znaczeniu że planowana "
"właściwość została pominięta."

msgid "Instances of class :class:`_Feature` have two corresponding methods, :meth:`getOptionalRelease` and :meth:`getMandatoryRelease`."
msgstr ""
"Przykłady uogólnienia :class:`_Feature` mają dwa odpowiadające sposoby "
"postępowania, :meth:`getOptionalRelease` i :meth:`getMandatoryRelease`."

msgid "*CompilerFlag* is the (bitfield) flag that should be passed in the fourth argument to the built-in function :func:`compile` to enable the feature in dynamically compiled code.  This flag is stored in the :attr:`compiler_flag` attribute on :class:`_Feature` instances."
msgstr ""
"*CompilerFlag* - Flaga kompilatora (pole bitowe) która powinna być "
"przekazywana w czwartym parametrze do wbudowanego zadania :func:`compile` "
"aby włączyć właściwość w dynamicznie kompilowanym kodzie. Ta flaga jest "
"przechowywana we właściwości :attr:`compiler_flag` w przykładach "
":class:`_Feature`."

msgid "No feature description will ever be deleted from :mod:`__future__`. Since its introduction in Python 2.1 the following features have found their way into the language using this mechanism:"
msgstr ""
"Żadne opisy właściwości nie będą nigdy kasowane z :mod:`__future__`. Od "
"momentu jego wprowadzenia w języku pytonowskim w wersji 2.1 następujące "
"właściwości znalazły się jako część języka przy użyciu tego mechanizmu:"

msgid "feature"
msgstr "właściwość"

msgid "optional in"
msgstr "opcjonalna w"

msgid "mandatory in"
msgstr "obowiązuje od"

msgid "effect"
msgstr "efekt"

msgid "nested_scopes"
msgstr "zagnieżdżone_zakresy_widoczności"

msgid "2.1.0b1"
msgstr "2.1.0b1"

msgid "2.2"
msgstr "2.2"

msgid ":pep:`227`: *Statically Nested Scopes*"
msgstr ":pep:`227`: *Statycznie zagnieżdżone zakresy widoczności*"

msgid "generators"
msgstr "generatory"

msgid "2.2.0a1"
msgstr "2.2.0a1"

msgid "2.3"
msgstr "2.3"

msgid ":pep:`255`: *Simple Generators*"
msgstr ":pep:`255`: *Proste Generatory*"

msgid "division"
msgstr "dzielenie"

msgid "2.2.0a2"
msgstr "2.2.0a2"

msgid "3.0"
msgstr "3.0"

msgid ":pep:`238`: *Changing the Division Operator*"
msgstr ":pep:`238`: *Zmiana operatora dzielenia*"

msgid "absolute_import"
msgstr "absolute_import"

msgid "2.5.0a1"
msgstr "2.5.0a1"

msgid "2.7"
msgstr "2.7"

msgid ":pep:`328`: *Imports: Multi-Line and Absolute/Relative*"
msgstr ":pep:`328`: *Importy: Wielo-linijkowe i Bezwzględne/Względne*"

msgid "with_statement"
msgstr "wyrażenie_with"

msgid "2.6"
msgstr "2.6"

msgid ":pep:`343`: *The \"with\" Statement*"
msgstr ":pep:`343`: *polecenie \"with\"*"

msgid "print_function"
msgstr "zadanie_print"

msgid "2.6.0a2"
msgstr "2.6.0a2"

msgid ":pep:`3105`: *Make print a function*"
msgstr ":pep:`3105`: *Uczynić print zadaniem*"

msgid "unicode_literals"
msgstr "literały_unicode"

msgid ":pep:`3112`: *Bytes literals in Python 3000*"
msgstr ":pep:`3112`: *Kęsowe literały w języku pytonowskim 3000*"

msgid "See also"
msgstr "Zobacz też"

msgid "How the compiler treats future imports."
msgstr "Jak kompilator traktuje przyszłe importy."

msgid ":mod:`__main__` --- Top-level script environment"
msgstr ":mod:`__main__` --- środowisko skryptów nadrzędnego poziomu"

msgid "This module represents the (otherwise anonymous) scope in which the interpreter's main program executes --- commands read either from standard input, from a script file, or from an interactive prompt.  It is this environment in which the idiomatic \"conditional script\" stanza causes a script to run::"
msgstr ""
"Ten moduł reprezentuje (zazwyczaj anonimowy) zakres w którym główny program "
"interpretujący polecenia języka pytonowskiego operuje --- polecenia wczytane "
"albo ze standardowego wejścia, z pliku skryptu, lub z współpracującego z "
"użytkownikiem programu zapytań. To jest to środowisko w którym idiomatyczna "
"zwrotka \"warunkowego skryptu\" powoduje, że skrypt biegnie::"

msgid "if __name__ == \"__main__\":     main()"
msgstr "if __name__ == \"__main__\":     main()"

msgid ":mod:`_dummy_thread` --- Drop-in replacement for the :mod:`_thread` module"
msgstr ":mod:`dummy_thread` --- tymczasowy zamiennik dla modułu :mod:`_thread`"

msgid "This module provides a duplicate interface to the :mod:`_thread` module.  It is meant to be imported when the :mod:`_thread` module is not provided on a platform."
msgstr ""
"Ten moduł dostarcza zduplikowany sprzęg do modułu :mod:`_thread`. Ma on być "
"importowany gdy moduł :mod:`_thread` nie jest dostarczony dla "
"maszyny/środowiska."

msgid "Suggested usage is::"
msgstr "Sugerowane użycie jest::"

msgid "try:     import _thread except ImportError:     import dummy_thread as _thread"
msgstr ""
"try:     import _thread except ImportError:     import dummy_thread as "
"_thread"

msgid "Be careful to not use this module where deadlock might occur from a thread being created that blocks waiting for another thread to be created.  This often occurs with blocking I/O."
msgstr ""
"Uważaj aby nie używać tego modułu tam gdzie może nastąpić wyścig krytyczny z "
"wątku, który jest tworzony i który blokuje czekając na następny wątek aby "
"został utworzony. To często następuje z zablokowaniem wejścia/wyjścia."

msgid ":mod:`_thread` --- Low-level threading API"
msgstr ":mod:`_thread` --- Niskiego poziomu sprzęg wątków ( - z ang. - API)"

msgid "This module provides low-level primitives for working with multiple threads (also called :dfn:`light-weight processes` or :dfn:`tasks`) --- multiple threads of control sharing their global data space.  For synchronization, simple locks (also called :dfn:`mutexes` or :dfn:`binary semaphores`) are provided. The :mod:`threading` module provides an easier to use and higher-level threading API built on top of this module."
msgstr ""
"Ten moduł dostarcza niskiego-poziomu figury dla pracy z wieloma wątkami "
"(zwane także :dfn:`niewielkiej-wagi procesy` lub :dfn:`zadania`) --- wiele "
"wątków kontroli wspólnie-dzielących ich nadrzędną przestrzeń danych. Dla "
"synchronizacji, proste blokady (zwane także :dfn:`mutexami` lub "
":dfn:`binarnymi semaforami`) są dostarczane. Moduł :mod:`threading` "
"dostarcza łatwiejsze w użyciu i wyższego poziomu sprzęgi wątkowe (API) "
"zbudowane na wierzchu ponad tym modułem."

msgid "The module is optional.  It is supported on Windows, Linux, SGI IRIX, Solaris 2.x, as well as on systems that have a POSIX thread (a.k.a. \"pthread\") implementation.  For systems lacking the :mod:`_thread` module, the :mod:`_dummy_thread` module is available. It duplicates this module's interface and can be used as a drop-in replacement."
msgstr ""
"Ten moduł jest opcjonalny. Jest wspierany w Windows, Linux, SGI IRIX, "
"Solaris 2.x, zarówno jak też na systemach, które mają wypełnienie wątków "
"POSIX-owych (in.zn.j. \"pthread\"). Dla systemów którym brakuje "
":mod:`_thread`, moduł :mod:`_dummy_thread` jest dostępny. Duplikuje sprzęg "
"modułu i może być użyty jako tymczasowe zastępstwo."

msgid "It defines the following constants and functions:"
msgstr "Definiuje następujące stałe i zadania:"

msgid "Raised on thread-specific errors."
msgstr "Wystawiany podczas szczególnych dla wątku błędów."

msgid "This is the type of lock objects."
msgstr "To jest typ przedmiotów blokujących."

msgid "Start a new thread and return its identifier.  The thread executes the function *function* with the argument list *args* (which must be a tuple).  The optional *kwargs* argument specifies a dictionary of keyword arguments. When the function returns, the thread silently exits.  When the function terminates with an unhandled exception, a stack trace is printed and then the thread exits (but other threads continue to run)."
msgstr ""
"Zacznij nowy wątek i zwróć jego identyfikator. Wątek wykonuje zadanie "
"*function* z listą parametrów *args* (które muszą być krotką). Opcjonalny "
"parametr *kwargs* wyszczególnia słownik parametrów słów kluczowych. Gdy "
"zadanie powraca, wątek milcząco wyłącza się. Gdy zadanie kończy się z "
"nieobsłużonym wyjątkiem, wypis sterty jest drukowany i wtedy wątek kończy "
"się (ale inne wątki pracują dalej)."

msgid "Raise a :exc:`KeyboardInterrupt` exception in the main thread.  A subthread can use this function to interrupt the main thread."
msgstr ""
"Zgłoś wyjątek :exc:`KeyboardInterrupt` w głównym wątku. Wątek podrzędny może "
"używać tego zadania aby przerywać wątek główny."

msgid "Raise the :exc:`SystemExit` exception.  When not caught, this will cause the thread to exit silently."
msgstr ""
"Zgłoś wyjątek :exc:`SystemExit`. Gdy nie złapany, to spowoduje że wątek "
"wyjdzie po cichu."

msgid "Return a new lock object.  Methods of locks are described below.  The lock is initially unlocked."
msgstr ""
"Zwróć nowy przedmiot blokady. Sposoby postępowania blokad są opisane "
"poniżej. Blokada początkowo jest odblokowana."

msgid "Return the 'thread identifier' of the current thread.  This is a nonzero integer.  Its value has no direct meaning; it is intended as a magic cookie to be used e.g. to index a dictionary of thread-specific data.  Thread identifiers may be recycled when a thread exits and another thread is created."
msgstr ""
"Zwróć 'identyfikator wątku' dla obecnego wątku. To jest niezerowa liczba "
"całkowita. Jej wartość nie ma żadnego bezpośredniego znaczenia; jest ona "
"pomyślana jako magiczne ciasteczko do użycia np. aby indeksować słownik "
"szczególnych-dla-wątku danych. Identyfikatory wątku mogą być ponownie użyte "
"gdy wątek kończy a następny wątek jest tworzony."

msgid "Return the thread stack size used when creating new threads.  The optional *size* argument specifies the stack size to be used for subsequently created threads, and must be 0 (use platform or configured default) or a positive integer value of at least 32,768 (32kB). If changing the thread stack size is unsupported, a :exc:`ThreadError` is raised.  If the specified stack size is invalid, a :exc:`ValueError` is raised and the stack size is unmodified.  32kB is currently the minimum supported stack size value to guarantee sufficient stack space for the interpreter itself.  Note that some platforms may have particular restrictions on values for the stack size, such as requiring a minimum stack size > 32kB or requiring allocation in multiples of the system memory page size - platform documentation should be referred to for more information (4kB pages are common; using multiples of 4096 for the stack size is the suggested approach in the absence of more specific information). Availability: Windows, systems with POSIX threads."
msgstr ""
"Zwróć rozmiar sterty używany do tworzenia nowych wątków. Opcjonalny parametr "
"*rozmiaru* określa rozmiar sterty do użycia dla później tworzonych wątków, "
"i musi być 0 (używać wartości domyślnej wynikającej z maszyny/środowiska lub "
"konfiguracji) lub dodatniej liczby całkowitej o wartości co najmniej 32,768 "
"(32kB). Jeśli zmiana rozmiaru sterty wątku jest niewspierana, "
":exc:`ThreadError` jest zgłaszany. Jeśli określony rozmiar sterty jest "
"nieprawidłowy, :exc:`ValueError` jest zgłaszany i rozmiar sterty nie jest "
"modyfikowany. 32kB jest obecnie minimalnym wspieranym rozmiarem sterty "
"gwarantującym wystarczający rozmiar sterty dla programu interpretującego "
"polecenia języka pytonowskiego samego w sobie. Zauważ, że niektóre "
"maszyny/środowiska mogą mieć szczególne ograniczenia na wartości dla "
"rozmiaru sterty, takie jak wymaganie minimalnego rozmiaru sterty > 32kB lub "
"wymaganie umieszczenia w wielokrotności rozmiaru strony pamięci systemu - "
"dokumentacja maszyny/środowiska powinna zostać sprawdzona w celu uzyskania "
"większej ilości informacji na ten temat (strony 4kB są znane; użycie "
"wielokrotności 4096 dla rozmiaru sterty jest sugerowanym podejściem w "
"obliczu braku bardziej szczegółowych informacji). Dostępność: Windows, "
"systemy z wątkami POSIX. "

msgid "The maximum value allowed for the *timeout* parameter of :meth:`Lock.acquire`. Specifiying a timeout greater than this value will raise an :exc:`OverflowError`."
msgstr ""
"Maksymalna wartość dozwolona dla parametru *timeout* do sposobu postępowania "
":meth:`Lock.acquire`. Określenie parametru timeout większego niż ta wartość "
"będzie zgłaszać :exc:`OverflowError`."

msgid "Lock objects have the following methods:"
msgstr "Przedmioty blokad mają następujące sposoby postępowania:"

msgid "Without any optional argument, this method acquires the lock unconditionally, if necessary waiting until it is released by another thread (only one thread at a time can acquire a lock --- that's their reason for existence)."
msgstr ""
"Bez żadnych opcjonalnych argumentów, ta metoda przejmuje blokadę "
"bezwarunkowo, jeśli to konieczne czekając aż zostanie zwolniona przez inny "
"wątek (tylko jeden wątek na raz może przejąć blokadę --- to ich sens "
"istnienia)."

msgid "If the integer *waitflag* argument is present, the action depends on its value: if it is zero, the lock is only acquired if it can be acquired immediately without waiting, while if it is nonzero, the lock is acquired unconditionally as above."
msgstr ""
"Jeśli całkowita liczba parametr *waitflag* - z ang. - *flagaoczekiwania* - "
"jest obecna, akcja zależy od jej wartości: jeśli jest ona równa zero, "
"blokada jest tylko przejmowana jeśli może być przejęta natychmiast bez "
"czekania, podczas gdy jest ona niezerowa, blokada jest przejmowana "
"bezwarunkowo jak powyżej."

msgid "If the floating-point *timeout* argument is present and positive, it specifies the maximum wait time in seconds before returning.  A negative *timeout* argument specifies an unbounded wait.  You cannot specify a *timeout* if *waitflag* is zero."
msgstr ""
"Jeśli zmienno-przecinkowy *koniecczasu* - z ang. - *timeout* parametr jest "
"obecny i dodatni, określa on maksymalny czas oczekiwania w sekundach przed "
"powrotem. Ujemny parametr *końcaczasu* określa nieograniczone oczekiwanie. "
"Nie możesz określić parametru *końcaczasu* jeśli *flagaoczekiwania* jest "
"zero."

msgid "The return value is ``True`` if the lock is acquired successfully, ``False`` if not."
msgstr ""
"Wartość zwracana jest ``Prawdą`` - z ang. - ``True`` jeśli blokada jest "
"przejmowana w udany sposób, ``Fałsz`` - z ang. - ``False`` jeśli nie."

msgid "Releases the lock.  The lock must have been acquired earlier, but not necessarily by the same thread."
msgstr ""
"Zwalnia blokadę. Blokada musiała być przejęta wcześniej, ale nie koniecznie "
"przez ten sam wątek."

msgid "Return the status of the lock: ``True`` if it has been acquired by some thread, ``False`` if not."
msgstr ""
"Zwróć status blokady: ``Prawda`` - z ang. - ``True`` jeśli została przejęta "
"przez jakiś wątek, ``Fałsz`` - z ang. - ``False`` jeśli nie."

msgid "In addition to these methods, lock objects can also be used via the :keyword:`with` statement, e.g.::"
msgstr ""
"W dodatku do tych sposobów postępowania, przedmioty blokad mogą także być "
"użyte przez polecenie :keyword:`with`, np.::"

msgid "import _thread  a_lock = _thread.allocate_lock()  with a_lock:     print(\"a_lock is locked while this executes\")"
msgstr ""
"import _thread  zamek = _thread.allocate_lock()  with zamek:     "
"print(\"zamek jest zablokowany podczas gdy to się wykonuje\")"

msgid "**Caveats:**"
msgstr "**Zakawyczki:**"

msgid "Threads interact strangely with interrupts: the :exc:`KeyboardInterrupt` exception will be received by an arbitrary thread.  (When the :mod:`signal` module is available, interrupts always go to the main thread.)"
msgstr ""
"Wątki oddziałują dziwnie z przerwaniami: wyjątek :exc:`KeyboardInterrupt` "
"zostanie odebrany przez dowolny wątek. (Gdy moduł :mod:`signal` jest "
"dostępny, przerwania zawsze idą do głównego wątku.)"

msgid "Calling :func:`sys.exit` or raising the :exc:`SystemExit` exception is equivalent to calling :func:`_thread.exit`."
msgstr ""
"Wywołanie :func:`sys.exit` lub zgłoszenie wyjątku :exc:`SystemExit` jest "
"równoważne z wezwaniem zadania :func:`_thread.exit`."

msgid "Not all built-in functions that may block waiting for I/O allow other threads to run.  (The most popular ones (:func:`time.sleep`, :meth:`file.read`, :func:`select.select`) work as expected.)"
msgstr ""
"Nie wszystkie wbudowane zadania które mogą blokować oczekiwanie na "
"wejście/wyjście pozwalają innym wątkom działać. (Najpopularniejsze to "
"(:func:`time.sleep`, :meth:`file.read`, :func:`select.select`) pracują "
"zgodnie z oczekiwaniami.)"

msgid "It is not possible to interrupt the :meth:`acquire` method on a lock --- the :exc:`KeyboardInterrupt` exception will happen after the lock has been acquired."
msgstr ""
"Nie jest możliwe przerwanie wykonanie :meth:`acquire` na blokadzie --- "
"wyjątek :exc:`KeyboardInterrupt` zdarzy się po tym jak blokada zostanie "
"przejęta."

msgid "When the main thread exits, it is system defined whether the other threads survive.  On most systems, they are killed without executing :keyword:`try` ... :keyword:`finally` clauses or executing object destructors."
msgstr ""
"Gdy główny wątek wychodzi, jest zdefiniowane przez system czy inne wątki nie "
"zostaną zakończone. W większości systemów, są one kończone bez wykonywania "
"klauzul :keyword:`try` ... :keyword:`finally` lub wykonywania destrukcji "
"przedmiotów."

msgid "When the main thread exits, it does not do any of its usual cleanup (except that :keyword:`try` ... :keyword:`finally` clauses are honored), and the standard I/O files are not flushed."
msgstr ""
"Gdy główny wątek kończy się, nie wykonuje on żadnego typowego sprzątania (z "
"wyjątkiem klauzul :keyword:`try` ... :keyword:`finally` które są "
"honorowane), i standardowe pliki wejścia/wyjścia nie są czyszczone."

msgid ":mod:`abc` --- Abstract Base Classes"
msgstr "moduł :mod:`abc` --- abstrakcyjne podstawowe uogólnienia "

msgid "This module provides the infrastructure for defining an :term:`abstract base class` (ABCs) in Python, as outlined in :pep:`3119`; see the PEP for why this was added to Python. (See also :pep:`3141` and the :mod:`numbers` module regarding a type hierarchy for numbers based on ABCs.)"
msgstr ""
"Ten moduł dostarcza infrastrukturę dla definiowania :term:`abstrakcyjnych "
"podstawowych uogólnień` (ABC-ów) w języku pytonowskim, jak określono w "
"propozycji :pep:`3119`; zobacz PEP dla sprawdzenia co sprawiło że zostało to "
"dodane do języka pytonowskiego. (Zobacz także :pep:`3141` i moduł "
":mod:`numbers` w odniesieniu do hierarchii typów dla liczb opartych o "
"ABC-e.)"

msgid "The :mod:`collections` module has some concrete classes that derive from ABCs; these can, of course, be further derived. In addition the :mod:`collections` module has some ABCs that can be used to test whether a class or instance provides a particular interface, for example, is it hashable or a mapping."
msgstr ""
"Moduł :mod:`collections` posiada pewne konkretne uogólnienia które "
"dziedziczą po ABC-ach; te mogą oczywiście być dalej dziedziczone. W dodatku "
"moduł :mod:`collections` ma pewne ABC-e, które mogą być użyte aby sprawdzić "
"czy uogólnienie lub przykład uogólnienia dostarcza szczególny sprzęg dla "
"przykładu, czy jest on mieszany czy jest on mapowany etc."

msgid "This module provides the following class:"
msgstr "Ten moduł dostarcza następujące uogólnienie:"

msgid "Metaclass for defining Abstract Base Classes (ABCs)."
msgstr ""
"Pośrednie uogólnienie dla definiowania abstrakcyjnych uogólnień podstawowych "
"(w skr. z ang. - ABC - Abstract Base Class)."

msgid "Use this metaclass to create an ABC.  An ABC can be subclassed directly, and then acts as a mix-in class.  You can also register unrelated concrete classes (even built-in classes) and unrelated ABCs as \"virtual subclasses\" -- these and their descendants will be considered subclasses of the registering ABC by the built-in :func:`issubclass` function, but the registering ABC won't show up in their MRO (Method Resolution Order) nor will method implementations defined by the registering ABC be callable (not even via :func:`super`). [#]_"
msgstr ""
"Używaj tego uogólnienia pośredniego aby utworzyć abstrakcyjne uogólnienie "
"podstawowe (w skr. z ang. ABC). ABC może być wykorzystane do tworzenia "
"następnych uogólnień bezpośrednio, i wtedy działa jako uogólnienie "
"domieszki. Możesz także zarejestrować niezwiązane uogólnienia konkretne "
"(nawet wbudowane uogólnienia) i niezwiązane abstrakcyjne uogólnienia "
"podstawowe jako \"sztuczne podrzędne uogólnienia\" -- te uogólnienia i "
"pochodne po nich będą uznawane za podrzędne uogólnienia rejestrowanego "
"uogólnienia podstawowego abstrakcyjnego przez wbudowane zadanie "
":func:`issubclass`, ale rejestrowanie abstrakcyjnego uogólnienia bazowego "
"nie pokaże się w ich sposobie rozwiązywania sposobów postępowania (w skr. "
"MRO - z ang. - Method Resolution Order) ani też wypełnienia sposobów "
"postępowania określone przez rejestrowanie abstrakcyjnych bazowych uogólnień "
"nie będą wywoływalne (nawet nie przez użycie :func:`super`). [#]_"

msgid "Classes created with a metaclass of :class:`ABCMeta` have the following method:"
msgstr ""
"Uogólnienia stworzone za pomocą pośredniego uogólnienia :class:`ABCMeta` "
"mają następujący sposób postępowania:"

msgid "Register *subclass* as a \"virtual subclass\" of this ABC. For example::"
msgstr ""
"Zarejestruj *podrzędne uogólnienie* jako \"wirtualne podrzędne uogólnienie\" "
"tego uogólnienia abstrakcyjnego podstawowego. Na przykład::"

msgid "from abc import ABCMeta  class MyABC(metaclass=ABCMeta):     pass  MyABC.register(tuple)  assert issubclass(tuple, MyABC) assert isinstance((), MyABC)"
msgstr ""
"from abc import ABCMeta  class MyABC(metaclass=ABCMeta):     pass  "
"MyABC.register(tuple)  assert issubclass(tuple, MyABC) assert isinstance((), "
"MyABC)"

msgid "You can also override this method in an abstract base class:"
msgstr ""
"Możesz także obejść ten sposób postępowania w abstrakcyjnym bazowym "
"uogólnieniu:"

msgid "(Must be defined as a class method.)"
msgstr "(Musi być określona jako sposób postępowania uogólnienia.)"

msgid "Check whether *subclass* is considered a subclass of this ABC.  This means that you can customize the behavior of ``issubclass`` further without the need to call :meth:`register` on every class you want to consider a subclass of the ABC.  (This class method is called from the :meth:`__subclasscheck__` method of the ABC.)"
msgstr ""
"Sprawdzi czy *podrzędne uogólnienie* jest uważane za podrzędne względem tego "
"abstrakcyjnego uogólnienia bazowego. To oznacza, że możesz dostosować "
"zachowanie ``issubclass``, dalej bez konieczności wzywania sposobu "
"postępowania :meth:`register` w każdym uogólnieniu które chcesz uważać za "
"podrzędne uogólnienie względem tego abstrakcyjnego uogólnienia podstawowego. "
"(Ten sposób postępowania uogólnienia jest wzywany ze sposobu postępowania "
":meth:`__subclasscheck__` tego abstrakcyjnego uogólnienia podstawowego.)"

msgid "This method should return ``True``, ``False`` or ``NotImplemented``.  If it returns ``True``, the *subclass* is considered a subclass of this ABC. If it returns ``False``, the *subclass* is not considered a subclass of this ABC, even if it would normally be one.  If it returns ``NotImplemented``, the subclass check is continued with the usual mechanism."
msgstr ""
"Ten sposób postępowania powinien zwrócić ``Prawdę`` - z ang. - ``True``, "
"``Fałsz`` - z ang. - ``False`` lub ``niewypełnione`` - z ang. - "
"``NotImplemented``. Jeśli zwraca ``True``, *podrzędne uogólnienie* jest "
"uważanie za podrzędne względem tego abstrakcyjnego uogólnienia podstawowego. "
"Jeśli zwraca ``Fałsz``, *podrzędne uogólnienie* nie jest uważane za "
"podrzędne względem tego abstrakcyjnego uogólnienia podstawowego, nawet jeśli "
"zwykle byłoby takim. Jeśli zwraca ``NotImplemented``, sprawdzenie "
"podrzędnego uogólnienia jest kontynuowane z typowym mechanizmem."

msgid "For a demonstration of these concepts, look at this example ABC definition::"
msgstr ""
"Dla demonstracji tych pomysłów, popatrz na tę przykładową definicję "
"abstrakcyjnego uogólnienia podstawowego::"

msgid "class Foo:     def __getitem__(self, index):         ...     def __len__(self):         ...     def get_iterator(self):         return iter(self)  class MyIterable(metaclass=ABCMeta):      @abstractmethod     def __iter__(self):         while False:             yield None      def get_iterator(self):         return self.__iter__()      @classmethod     def __subclasshook__(cls, C):         if cls is MyIterable:             if any(\"__iter__\" in B.__dict__ for B in C.__mro__):                 return True         return NotImplemented  MyIterable.register(Foo)"
msgstr ""
"class Foo:     def __getitem__(self, index):         ...     def "
"__len__(self):         ...     def get_iterator(self):         return "
"iter(self)  class MyIterable(metaclass=ABCMeta):      @abstractmethod     "
"def __iter__(self):         while False:             yield None      def "
"get_iterator(self):         return self.__iter__()      @classmethod     def "
"__subclasshook__(cls, C):         if cls is MyIterable:             if "
"any(\"__iter__\" in B.__dict__ for B in C.__mro__):                 return "
"True         return NotImplemented  MyIterable.register(Foo)"

msgid "The ABC ``MyIterable`` defines the standard iterable method, :meth:`__iter__`, as an abstract method.  The implementation given here can still be called from subclasses.  The :meth:`get_iterator` method is also part of the ``MyIterable`` abstract base class, but it does not have to be overridden in non-abstract derived classes."
msgstr ""
"Abstrakcyjne uogólnienie podstawowe ``MyIterable`` określa standardowy "
"iterowalny sposób postępowania, :meth:`__iter__`, jako abstrakcyjny sposób "
"postępowania. Wypełnienie podane tutaj może wciąż być wzywane z podrzędnych "
"uogólnień. Sposób postępowania :meth:`get_iterator` jest także częścią "
"abstrakcyjnego podstawowego uogólnienia ``MyIterable``, ale nie musi być to "
"obchodzone w nie-abstrakcyjnym uogólnieniu pochodnym."

msgid "The :meth:`__subclasshook__` class method defined here says that any class that has an :meth:`__iter__` method in its :attr:`__dict__` (or in that of one of its base classes, accessed via the :attr:`__mro__` list) is considered a ``MyIterable`` too."
msgstr ""
"sposób postępowania uogólnienia :meth:`__subclasshook__` mówi, że każde "
"uogólnienie które ma sposób postępowania :meth:`__iter__`  w swoim słowniku "
":attr:`__dict__` (lub w jednym należącym do jego uogólnienia bazowego, "
"dostępnego przez listę :attr:`__mro__`) jest uważane także za "
"``MyIterable``."

msgid "Finally, the last line makes ``Foo`` a virtual subclass of ``MyIterable``, even though it does not define an :meth:`__iter__` method (it uses the old-style iterable protocol, defined in terms of :meth:`__len__` and :meth:`__getitem__`).  Note that this will not make ``get_iterator`` available as a method of ``Foo``, so it is provided separately."
msgstr ""
"Ostatecznie, ostatnia linia czyni ``Foo`` wirtualnym podrzędnym uogólnieniem "
"względem ``MyIterable``, nawet jeśli nie definiuje ono sposobu postępowania "
":meth:`__iter__` (używa ono protokołu iterowalności w-starym-stylu, "
"zdefiniowanej w ramach :meth:`__len__` i :meth:`__getitem__`). Zauważ, że to "
"nie uczyni sposobu postępowania ``get_iterator`` dostępnym jako sposobu "
"postępowania należącego do ``Foo``, więc jest on dostarczony oddzielnie."

msgid "It also provides the following decorators:"
msgstr "Dostarcza także następujące dekoratory:"

msgid "A decorator indicating abstract methods."
msgstr "Dekorator wskazujący abstrakcyjne sposoby postępowania."

msgid "Using this decorator requires that the class's metaclass is :class:`ABCMeta` or is derived from it. A class that has a metaclass derived from :class:`ABCMeta` cannot be instantiated unless all of its abstract methods and properties are overridden. The abstract methods can be called using any of the normal 'super' call mechanisms."
msgstr ""
"Użycie tego dekoratora wymaga, żeby pośrednim uogólnieniem (metaclass) tego "
"uogólnienia było :class:`ABCMeta` lub było po nim odziedziczone. Dla "
"uogólnienia którego pośrednie uogólnienie odziedziczone jest po "
":class:`ABCMeta` nie można dać przykładu, chyba że wszystkie jego sposoby "
"postępowania abstrakcyjne i właściwości zostaną przesłonięte. Abstrakcyjne "
"sposoby postępowania mogą być wywołane przy użyciu dowolnego ze zwykłych "
"mechanizmów odwołań 'super'. "

msgid "Dynamically adding abstract methods to a class, or attempting to modify the abstraction status of a method or class once it is created, are not supported.  The :func:`abstractmethod` only affects subclasses derived using regular inheritance; \"virtual subclasses\" registered with the ABC's :meth:`register` method are not affected."
msgstr ""
"Dynamiczne dodawanie abstrakcyjnych sposobów postępowania do uogólnienia, "
"lub próbowanie modyfikacji statusu abstrakcji sposobu postępowania lub "
"uogólnienia gdy już zostanie utworzone nie jest wspierane. Zadanie "
":func:`abstractmethod` dotyczy tylko podrzędnych uogólnień odziedziczonych "
"przy użyciu zwykłego dziedziczenia; \"sztucznego podrzędnego uogólnienia\" ( - "
"z ang. - \"virtual subclasses\") zarejestrowanego za pomocą sposobu "
"postępowania :meth:`register` należącego do abstrakcyjnego uogólnienia "
"podstawowego ten sposób postępowania nie dotyczy."

msgid "Usage::"
msgstr "Użycie::"

msgid "class C(metaclass=ABCMeta):     @abstractmethod     def my_abstract_method(self, ...):         ..."
msgstr ""
"class C(metaclass=ABCMeta):     @abstractmethod     def "
"my_abstract_method(self, ...):         ..."

msgid "Unlike Java abstract methods, these abstract methods may have an implementation. This implementation can be called via the :func:`super` mechanism from the class that overrides it.  This could be useful as an end-point for a super-call in a framework that uses cooperative multiple-inheritance."
msgstr ""
"W przeciwieństwie do abstrakcyjnych sposobów postępowania Javy, te "
"abstrakcyjne sposoby postępowania mogą mieć swoje wypełnienie. To "
"wypełnienie może być wzywane przez mechanizm odwołań do zadania "
":func:`super`, z uogólnienia które przesłania taki sposób postępowania. To "
"może być użyteczne jako punkt końcowy super-wywołania w ramach udogodnienia "
"które używa współpracującego wielokrotnego-dziedziczenia."

msgid "A subclass of the built-in :func:`property`, indicating an abstract property."
msgstr ""
"Podrzędne uogólnienie wbudowanego zadania :func:`property` wskazujące "
"abstrakcyjną właściwość."

msgid "Using this function requires that the class's metaclass is :class:`ABCMeta` or is derived from it. A class that has a metaclass derived from :class:`ABCMeta` cannot be instantiated unless all of its abstract methods and properties are overridden. The abstract properties can be called using any of the normal 'super' call mechanisms."
msgstr ""
"Używanie tego zadania wymaga aby pośrednie-uogólnienie uogólnienia było "
":class:`ABCMeta` lub pochodne po nim. Nie można dawać przykładu uogólnienia "
"którego  uogólnienie-pośrednie pochodne jest po :class:`ABCMeta`, chyba, że "
"jego wszystkie abstrakcyjne sposoby postępowania i właściwości zostaną "
"przesłonięte. Abstrakcyjne właściwości mogą być wzywane przy użyciu "
"dowolnego ze zwykłych mechanizmów wywołań 'super'."

msgid "class C(metaclass=ABCMeta):     @abstractproperty     def my_abstract_property(self):         ..."
msgstr ""
"class C(metaclass=ABCMeta):     @abstractproperty     def "
"my_abstract_property(self):         ..."

msgid "This defines a read-only property; you can also define a read-write abstract property using the 'long' form of property declaration::"
msgstr ""
"To definiuje właściwość tylko-do-odczytu; możesz też zdefiniować "
"wczytywaną-zapisywaną abstrakcyjną właściwość używając 'długiej' formy "
"deklaracji właściwości::"

msgid "class C(metaclass=ABCMeta):     def getx(self): ...     def setx(self, value): ...     x = abstractproperty(getx, setx)"
msgstr ""
"class C(metaclass=ABCMeta):     def getx(self): ...     def setx(self, "
"value): ...     x = abstractproperty(getx, setx)"

msgid "Footnotes"
msgstr "Przypisy"

msgid "C++ programmers should note that Python's virtual base class concept is not the same as C++'s."
msgstr ""
"Programiści C++ powinni zauważyć, że koncepcja wirtualnego uogólnienia "
"podstawowego z języka pytonowskiego nie jest tożsame z tym z C++'a."

msgid ":mod:`aifc` --- Read and write AIFF and AIFC files"
msgstr "Moduł :mod:`aifc` --- Wczytaj i zapisz pliki AIFF i AIFC"

msgid "This module provides support for reading and writing AIFF and AIFF-C files. AIFF is Audio Interchange File Format, a format for storing digital audio samples in a file.  AIFF-C is a newer version of the format that includes the ability to compress the audio data."
msgstr ""
"Ten moduł dostarcza wsparcie dla wczytywania i zapisywania plików AIFF i "
"AIFF-C. Pliki AIFF są formatem plików wymiany audio (Audio Interchange File "
"Format), formatem dla przechowywania cyfrowych próbek audio (dźwięku) w "
"pliku. AIFF-C jest nowszą wersją formatu która zawiera możliwość kompresji "
"danych audio."

msgid "Some operations may only work under IRIX; these will raise :exc:`ImportError` when attempting to import the :mod:`cl` module, which is only available on IRIX."
msgstr ""
"Niektóre operacje mogą działać tylko pod IRIX; te zgłoszą wyjątek "
":exc:`ImportError` gdy nastąpi próba importowania modułu :mod:`cl`, który "
"jest jedynie dostępny na IRIX."

msgid "Audio files have a number of parameters that describe the audio data. The sampling rate or frame rate is the number of times per second the sound is sampled.  The number of channels indicate if the audio is mono, stereo, or quadro.  Each frame consists of one sample per channel.  The sample size is the size in bytes of each sample.  Thus a frame consists of *nchannels*\\**samplesize* bytes, and a second's worth of audio consists of *nchannels*\\**samplesize*\\**framerate* bytes."
msgstr ""
"Pliki dźwiękowe ( - z ang. - audio files) mają pewną liczbę parametrów które "
"opisują dane audio. Częstość próbkowania ( - z ang. - sampling rate) lub "
"częstość ramek ( - z ang. - frame rate) jest liczbą chwil na sekundę w "
"których dźwięk jest próbkowany. Liczba kanałów wskazuje czy dźwięk jest "
"mono, stereo, czy quadro (jedno- dwu- lub cztero-kanałowy). Każda ramka "
"składa się z jednej próbki na kanał. Rozmiar próbki jest rozmiarem w kęsach "
"( - z ang. - bytes) każdej próbki. Dlatego też ramka składa się z "
"*nchannels*\\**samplesize* bajtów (kęsów), zaś sekunda trwania dźwięku składa "
"się z *nchannels*\\**samplesize*\\**framerate* bajtów (kęsów)."

msgid "For example, CD quality audio has a sample size of two bytes (16 bits), uses two channels (stereo) and has a frame rate of 44,100 frames/second.  This gives a frame size of 4 bytes (2\\*2), and a second's worth occupies 2\\*2\\*44100 bytes (176,400 bytes)."
msgstr ""
"Dla przykładu, dźwięk jakości CD ma rozmiar próbki dwóch bajtów (16 bitów), "
"używa dwóch kanałów (stereo) i ma rozmiar próbki 44,100 ramek/sekundę. To "
"daje rozmiar ramki 4 bajtów (2\\*2), i dźwięk długości jednej sekundy zajmuje "
"2\\*2\\*44100 bajtów (kęsów) (176,400 kęsów)."

msgid "Module :mod:`aifc` defines the following function:"
msgstr "Moduł :mod:`aifc` określa następujące zadania:"

msgid "Open an AIFF or AIFF-C file and return an object instance with methods that are described below.  The argument *file* is either a string naming a file or a file object.  *mode* must be ``'r'`` or ``'rb'`` when the file must be opened for reading, or ``'w'``  or ``'wb'`` when the file must be opened for writing.  If omitted, ``file.mode`` is used if it exists, otherwise ``'rb'`` is used.  When used for writing, the file object should be seekable, unless you know ahead of time how many samples you are going to write in total and use :meth:`writeframesraw` and :meth:`setnframes`."
msgstr ""
"Otwiera plik AIFF lub AIFF-C i zwraca przykład przedmiotu ze sposobami "
"postępowania, które są opisane poniżej. Parametr *plik* ( - z ang - *file*) "
"jest albo ciągiem znaków nazwy pliku lub przedmiotem samego pliku. *tryb* ( "
"- z ang. - *mode*) musi być ``'r'`` lub ``'rb'`` gdy plik musi być otwarty "
"do wczytania, lub ``'w'`` lub ``'wb'`` gdy plik musi być otwarty do zapisu. "
"Jeśli pominięte, ``file.mode`` jest używane jeśli istnieje, w przeciwnym "
"razie używane jest ``'rb'``. Gdy używane do zapisu, przedmiot pliku powinien "
"być możliwy do przeszukania, chyba że wiesz z wyprzedzeniem czasu ile "
"próbek masz zamiar zapisać w całości i użyjesz sposobów postępowania "
":meth:`writeframesraw` i :meth:`setnframes`."

msgid "Objects returned by :func:`.open` when a file is opened for reading have the following methods:"
msgstr ""
"Przedmioty zwrócone przez zadanie :func:`.open` gdy plik jest otwierany dla "
"wczytywania, mają następujące sposoby postępowania:"

msgid "Return the number of audio channels (1 for mono, 2 for stereo)."
msgstr "Zwróć liczbę kanałów dźwięku (1 dla mono, 2 dla stereo)."

msgid "Return the size in bytes of individual samples."
msgstr "Zwróć rozmiar w kęsach (bajtach) indywidualnych próbek."

msgid "Return the sampling rate (number of audio frames per second)."
msgstr "Zwróć częstość próbkowania (liczbę ramek dźwięku na sekundę)"

msgid "Return the number of audio frames in the file."
msgstr "Zwróć liczbę ramek dźwięku w pliku."

msgid "Return a bytes array of length 4 describing the type of compression used in the audio file.  For AIFF files, the returned value is ``b'NONE'``."
msgstr ""
"Zwróć tablicę bajtów o długości 4 określającą typ kompresji użytej w pliku "
"dźwiękowym. Dla plików AIFF zwracana wartość jest ``b'NONE'``."

msgid "Return a bytes array convertible to a human-readable description of the type of compression used in the audio file.  For AIFF files, the returned value is ``b'not compressed'``."
msgstr ""
"Zwróć tablicę bajtów do zamiany w czytelny dla człowieka opis typu kompresji "
"użytej w pliku dźwiękowym. Dla plików AIFF, zwracana wartość jest ``b'not "
"compressed'`` ( - z ang. - nie skompresowane)."

msgid "Return a tuple consisting of all of the above values in the above order."
msgstr ""
"Zwróć krotkę składającą się ze wszystkich z powyższych wartości w powyższym "
"porządku."

msgid "Return a list of markers in the audio file.  A marker consists of a tuple of three elements.  The first is the mark ID (an integer), the second is the mark position in frames from the beginning of the data (an integer), the third is the name of the mark (a string)."
msgstr ""
"Zwróć listę znaczników w pliku dźwiękowym. Znacznik składa się z krotki "
"trzech elementów. Pierwszym jest ID znacznika (liczba całkowita), drugim "
"jest pozycja znacznika w ramkach od początku danych (liczba całkowita), a "
"trzecim jest nazwa znacznika (ciąg znaków)."

msgid "Return the tuple as described in :meth:`getmarkers` for the mark with the given *id*."
msgstr ""
"Zwróć krotkę, jak opisano w sposobie postępowania :meth:`getmarkers` dla "
"znacznika o danym *id*. "

msgid "Read and return the next *nframes* frames from the audio file.  The returned data is a string containing for each frame the uncompressed samples of all channels."
msgstr ""
"Wczytaj i zwróć następne *nramek* ramek z pliku dźwiękowego. Zwrócone dane "
"są ciąg zawierający dla każdej ramki nieupakowane próbki ze wszystkich "
"kanałów."

msgid "Rewind the read pointer.  The next :meth:`readframes` will start from the beginning."
msgstr ""
"Przewiń wskaźnik wczytywania. Następne wczytanie ramek :meth:`readframes` "
"zacznie się od początku."

msgid "Seek to the specified frame number."
msgstr "Poszukaj ramki o określonym numerze."

msgid "Return the current frame number."
msgstr "Zwróć obecny numer ramki."

msgid "Close the AIFF file.  After calling this method, the object can no longer be used."
msgstr ""
"Zamknij plik AIFF. Po wezwaniu tego sposobu postępowania, przedmiot nie może "
"być już więcej użyty."

msgid "Objects returned by :func:`.open` when a file is opened for writing have all the above methods, except for :meth:`readframes` and :meth:`setpos`.  In addition the following methods exist.  The :meth:`get\\*` methods can only be called after the corresponding :meth:`set\\*` methods have been called.  Before the first :meth:`writeframes` or :meth:`writeframesraw`, all parameters except for the number of frames must be filled in."
msgstr ""
"Przedmioty, zwracane przez zadanie :func:`.open`, gdy plik jest otwierany do "
"pisania, mają wszystkie powyższe sposoby postępowania, z wyjątkiem sposobów "
"postępowania :meth:`readframes` i :meth:`setpos`. W dodatku następujące "
"sposoby postępowania istnieją. Sposób postępowania :meth:`get\\*` może być "
"wezwana tylko po tym jak zostanie wezwane odpowiadający mu sposób "
"postępowania :meth:`set\\*`. Przed pierwszym :meth:`writeframes` lub "
":meth:`writeframesraw`, wszystkie parametry oprócz liczby ramek muszą być "
"wprowadzone."

msgid "Create an AIFF file.  The default is that an AIFF-C file is created, unless the name of the file ends in ``'.aiff'`` in which case the default is an AIFF file."
msgstr ""
"Utwórz plik AIFF. Domyślnie plik AIFF-C jest tworzony, chyba że nazwa pliku "
"kończy się na ``'.aiff'`` w którym to przypadku domyślny jest plik AIFF."

msgid "Create an AIFF-C file.  The default is that an AIFF-C file is created, unless the name of the file ends in ``'.aiff'`` in which case the default is an AIFF file."
msgstr ""
"Utwórz plik AIFF-C. Domyślnie plik AIFF-C jest tworzony, chyba że nazwa "
"pliku kończy się na ``'.aiff'`` w którym to przypadku domyślny jest plik "
"AIFF."

msgid "Specify the number of channels in the audio file."
msgstr "Określ liczbę kanałów w pliku dźwiękowym."

msgid "Specify the size in bytes of audio samples."
msgstr "Określ rozmiar w kęsach (bajtach) ilości próbek dźwięku."

msgid "Specify the sampling frequency in frames per second."
msgstr "Określ częstotliwość próbkowania wyrażoną w ramkach na sekundę."

msgid "Specify the number of frames that are to be written to the audio file. If this parameter is not set, or not set correctly, the file needs to support seeking."
msgstr ""
"Określ liczbę ramek które mają zostać zapisane do pliku dźwiękowego. Jeśli "
"ten parametr nie jest ustawiony, lub ustawiony nieprawidłowo, plik powinien "
"wspierać wyszukiwanie."

msgid "Specify the compression type.  If not specified, the audio data will not be compressed.  In AIFF files, compression is not possible. The name parameter should be a human-readable description of the compression type as a bytes array, the type parameter should be a bytes array of length 4.  Currently the following compression types are supported: ``b'NONE'``, ``b'ULAW'``, ``b'ALAW'``, ``b'G722'``."
msgstr ""
"Określ typ upakowania danych. Jeśli nie określone dane dźwiękowe nie będą "
"upakowane. W plikach AIFF, upakowanie nie jest możliwe. Parametr nazwy "
"powinien być czytelnym dla człowieka opisem rodzaju upakowania jako tablica "
"kęsów (bajtów), parametr rodzaju powinien być tabelą kęsów o długości 4. "
"Obecnie następujące rodzaje kompresji są dostępne: ``b'NONE'``, ``b'ULAW'``, "
"``b'ALAW'``,``b'G722'``."

msgid "Set all the above parameters at once.  The argument is a tuple consisting of the various parameters.  This means that it is possible to use the result of a :meth:`getparams` call as argument to :meth:`setparams`."
msgstr ""
"Ustaw wszystkie powyższe parametry na raz. Parametr jest krotką składającą "
"się z różnych parametrów. To oznacza że jest możliwe użycie wyniku sposobu "
"postępowania :meth:`getparams` jako parametru dla sposobu postępowania "
":meth:`setparams`."

msgid "Add a mark with the given id (larger than 0), and the given name at the given position.  This method can be called at any time before :meth:`close`."
msgstr ""
"Dodaj znacznik o danym identyfikatorze (większym niż 0), i daną nazwą na "
"danej pozycji. Ten sposób postępowania może być wywołany w dowolnym momencie "
"przed wywołaniem :meth:`close`."

msgid "Return the current write position in the output file.  Useful in combination with :meth:`setmark`."
msgstr ""
"Zwróć obecne miejsce zapisu w pliku wynikowym. Użyteczne w kombinacji ze "
"sposobem postępowania :meth:`setmark`."

msgid "Write data to the output file.  This method can only be called after the audio file parameters have been set."
msgstr ""
"Zapisz dane do wynikowego pliku. Ten sposób postępowania może być wywoływany "
"tylko po tym jak parametry pliku dźwiękowego zostały ustawione."

msgid "Like :meth:`writeframes`, except that the header of the audio file is not updated."
msgstr ""
"Podobnie do sposobu postępowania :meth:`writeframes`, z wyjątkiem tego że "
"nagłówek pliku dźwiękowego nie jest uaktualniany."

msgid "Close the AIFF file.  The header of the file is updated to reflect the actual size of the audio data. After calling this method, the object can no longer be used."
msgstr ""
"Zapisz plik AIFF. Nagłówek pliku jest aktualizowany aby oddać aktualny "
"rozmiar pliku dźwiękowego. Po wezwaniu tego sposobu postępowania, przedmiot "
"nie może być więcej używany."

msgid "Generic Operating System Services"
msgstr "Zastępcze Usługi Systemu Operacyjnego"

msgid "The modules described in this chapter provide interfaces to operating system features that are available on (almost) all operating systems, such as files and a clock.  The interfaces are generally modeled after the Unix or C interfaces, but they are available on most other systems as well.  Here's an overview:"
msgstr ""
"Moduły opisane w tym rozdziale dostarczają sprzęgi dla własności systemu "
"operacyjnego, które są dostępne w (prawie) wszystkich systemach "
"operacyjnych, takich jak pliki i zegar. Sprzęgi są zwykle modelowane zgodnie "
"ze sprzęgami Unix-a lub C, ale są one dostępne na większości innych "
"systemów także. Tu jest przegląd:"

msgid "Data Compression and Archiving"
msgstr "Kompresja (upakowanie) Danych i Archiwizacja"

msgid "The modules described in this chapter support data compression with the zlib, gzip, and bzip2 algorithms, and  the creation of ZIP- and tar-format archives."
msgstr ""
"Moduły opisane w tym rozdziale wspierają kompresję danych z algorytmami "
"zlib, gzip, i bzip2, i kreacją archiwów w formacie ZIP- i tar-."

msgid ":mod:`argparse` -- Parser for command line options, arguments and sub-commands"
msgstr ""
"Moduł :mod:`argparse` -- Czytnik dla opcji linii poleceń, parametrów i "
"podrzędnych poleceń."

msgid "The :mod:`argparse` module makes it easy to write user friendly command line interfaces. The program defines what arguments it requires, and :mod:`argparse` will figure out how to parse those out of :data:`sys.argv`.  The :mod:`argparse` module also automatically generates help and usage messages and issues errors when users give the program invalid arguments."
msgstr ""
"Moduł :mod:`argparse` czyni łatwym pisanie przyjaznych dla użytkownika "
"sprzęgów linii poleceń. Program określa których parametrów wymaga, i "
":mod:`argparse` domyśli się jak wczytać te z :data:`sys.argv`. Moduł "
":mod:`argparse` także automatycznie generuje pomoc i wiadomości o użyciu i "
"kieruje błędami gdy użytkownicy podadzą programowi nieprawidłowe parametry."

msgid "Example"
msgstr "Przykład"

msgid "The following code is a Python program that takes a list of integers and produces either the sum or the max::"
msgstr ""
"Następujący kod jest programem języka pytonowskiego, który pobiera listę "
"liczb całkowitych i daje albo sumę albo maximum::"

msgid "import argparse  parser = argparse.ArgumentParser(description='Process some integers.') parser.add_argument('integers', metavar='N', type=int, nargs='+',                    help='an integer for the accumulator') parser.add_argument('--sum', dest='accumulate', action='store_const',                    const=sum, default=max,                    help='sum the integers (default: find the max)')  args = parser.parse_args() print(args.accumulate(args.integers))"
msgstr ""
"import argparse  parser = argparse.ArgumentParser(description='Przetwórz "
"pewne liczby.') parser.add_argument('integers', metavar='N', type=int, "
"nargs='+',                    help='liczba całkowita dla akumulatora') "
"parser.add_argument('--sum', dest='skumuluj', action='store_const', "
"                   const=sum, default=max,                    help='zsumuj "
"liczby (domyślne: znajdź maximum)')  args = parser.parse_args() "
"print(args.accumulate(args.integers))"

msgid "Assuming the Python code above is saved into a file called ``prog.py``, it can be run at the command line and provides useful help messages::"
msgstr ""
"Zakładając, że powyższy kod jest zapisany do pliku nazwanego ``prog.py``, "
"może być uruchomiony w linii poleceń i dostarcza użytecznych wiadomości "
"pomocowych"

msgid "$ prog.py -h usage: prog.py [-h] [--sum] N [N ...]  Process some integers.  positional arguments:  N           an integer for the accumulator  optional arguments:  -h, --help  show this help message and exit  --sum       sum the integers (default: find the max)"
msgstr ""
"$ prog.py -h użycie: prog.py [-h] [--sum] N [N ...] Przetwórz pewne liczby "
"całkowite. Parametry pozycyjne: N liczba dla akumulatora opcjonalne "
"parametry -h, --help pokaż tą wiadomość pomocy i wyjdź --sum sumuj liczby "
"całkowite (domyślnie: znajdź maximum)"

msgid "When run with the appropriate arguments, it prints either the sum or the max of the command-line integers::"
msgstr ""
"Gdy uruchomione z właściwymi parametrami, wypisuje albo sumę albo maksimum "
"liczb całkowitych z wiersza poleceń::"

msgid "$ prog.py 1 2 3 4 4  $ prog.py 1 2 3 4 --sum 10"
msgstr "$ prog.py 1 2 3 4 4  $ prog.py 1 2 3 4 --sum 10"

msgid "If invalid arguments are passed in, it will issue an error::"
msgstr "Jeśli nieprawidłowe parametry zostaną przekazane, wystosuje błąd::"

msgid "$ prog.py a b c usage: prog.py [-h] [--sum] N [N ...] prog.py: error: argument N: invalid int value: 'a'"
msgstr ""
"$ prog.py a b c użycie: prog.py [-h] [--sum] N [N ...] prog.py: błąd: "
"parametr N: niewłaściwa wartość liczby całkowitej: 'a'"

msgid "The following sections walk you through this example."
msgstr "Następujące sekcje przeprowadzają cię przez ten przykład."

msgid "Creating a parser"
msgstr "Tworzenie czytnika"

msgid "The first step in using the :mod:`argparse` is creating an :class:`ArgumentParser` object::"
msgstr ""
"Pierwszym krokiem w użyciu modułu :mod:`argparse` jest utworzenie przedmiotu "
":class:`ArgumentParser`::"

msgid ">>> parser = argparse.ArgumentParser(description='Process some integers.')"
msgstr ""
">>> parser = argparse.ArgumentParser(description='Przetwórz pewne liczby "
"całkowite.')"

msgid "The :class:`ArgumentParser` object will hold all the information necessary to parse the command line into python data types."
msgstr ""
"Przedmiot :class:`ArgumentParser` przetrzyma wszystkie informacje konieczne "
"do wczytania wiersza poleceń do typów danych języka pytonowskiego. "

msgid "Adding arguments"
msgstr "Dodawanie parametrów"

msgid "Filling an :class:`ArgumentParser` with information about program arguments is done by making calls to the :meth:`~ArgumentParser.add_argument` method. Generally, these calls tell the :class:`ArgumentParser` how to take the strings on the command line and turn them into objects.  This information is stored and used when :meth:`~ArgumentParser.parse_args` is called. For example::"
msgstr ""
"Wypełnienie uogólnienia :class:`ArgumentParser` za pomocą informacji o "
"parametrach programu jest wykonywane przez wykonywanie odwołań do sposobu "
"postępowania :meth:`~ArgumentParser.add_argument`. Ogólnie te wywołania "
"mówią uogólnieniu :class:`ArgumentParser` jak wziąć ciągi z linii poleceń i "
"zamienić je na przedmioty. Ta informacja jest przechowywana i używana gdy "
":meth:`~ArgumentParser.parse_args` jest wywoływane. Na przykład::"

msgid ">>> parser.add_argument('integers', metavar='N', type=int, nargs='+', ...                     help='an integer for the accumulator') >>> parser.add_argument('--sum', dest='accumulate', action='store_const', ...                     const=sum, default=max, ...                     help='sum the integers (default: find the max)')"
msgstr ""
">>> parser.add_argument('integers', metavar='N', type=int, nargs='+', ... "
"help='liczba całkowita dla akumulatora') >>> parser.add_argument('--sum', "
"dest='accumulate', action='store_const', ... const=sum, default=max, ... "
"help='zsumuj liczby całkowite (domyślne: znajdź maksimum)')"

msgid "Later, calling :meth:`parse_args` will return an object with two attributes, ``integers`` and ``accumulate``.  The ``integers`` attribute will be a list of one or more ints, and the ``accumulate`` attribute will be either the :func:`sum` function, if ``--sum`` was specified at the command line, or the :func:`max` function if it was not."
msgstr ""
"Później wywołanie :meth:`parse_args` zwróci przedmiot z dwoma "
"właściwościami, ``całkowitymi liczbami`` i ``akumulacją``. Właściwość "
"``liczb całkowitych`` będzie listą jednego lub więcej liczb całkowitych, zaś "
"właściwość ``akumulacji`` będzie albo zadaniem sumy - :func:`sum`, jeśli "
"parametr ``--sum`` był określony w wierszu poleceń lub zadaniem :func:`max` "
"jeśli nie był."

msgid "Parsing arguments"
msgstr "Wczytywanie paramterów"

msgid ":class:`ArgumentParser` parses args through the :meth:`~ArgumentParser.parse_args` method.  This will inspect the command-line, convert each arg to the appropriate type and then invoke the appropriate action. In most cases, this means a simple namespace object will be built up from attributes parsed out of the command-line::"
msgstr ""
"Uogólnienie :class:`ArgumentParser` wczytuje parametry przez sposób "
"postępowania :meth:`~ArgumentParser.parse_args`. To przejrzy wiersz poleceń, "
"zamieni każdy parametr do właściwego typu i potem sprowokuje odpowiednie "
"działanie. W większości przypadków, to oznacza że prosty przedmiot "
"przestrzeni nazw będzie zbudowany z właściwości wczytanych z wiersza "
"poleceń::"

msgid ">>> parser.parse_args(['--sum', '7', '-1', '42']) Namespace(accumulate=<built-in function sum>, integers=[7, -1, 42])"
msgstr ""
">>> parser.parse_args(['--sum', '7', '-1', '42']) "
"Namespace(accumulate=<wbudowane zadanie sumy>, integers=[7, -1, 42])"

msgid "In a script, :meth:`~ArgumentParser.parse_args` will typically be called with no arguments, and the :class:`ArgumentParser` will automatically determine the command-line args from :data:`sys.argv`."
msgstr ""
"W skrypcie, sposób postępowania :meth:`~ArgumentParser.parse_args` typowo "
"będzie wzywany bez żadnych parametrów, i uogólnienie :class:`ArgumentParser` "
"automatycznie ustali parametry wiersza-polecenia z danych :data:`sys.argv`."

msgid "ArgumentParser objects"
msgstr "Przedmioty Czytnika ArgumentParser"

msgid "Create a new :class:`ArgumentParser` object.  Each parameter has its own more detailed description below, but in short they are:"
msgstr ""
"Stwórz nowy przedmiot :class:`ArgumentParser`. Każdy parametr ma swój własny "
"bardziej szczegółowy opis poniżej, ale po krótce są one:"

msgid "description_ - Text to display before the argument help."
msgstr "description_ - Tekst do wyświetlenia przed pomocą w sprawie parametru."

msgid "epilog_ - Text to display after the argument help."
msgstr "epilog_ - Tekst do wyświetlenia po pomocy w sprawie parametru."

msgid "add_help_ - Add a -h/--help option to the parser. (default: ``True``)"
msgstr ""
"add_help_ - Dodaje opcję -h/--help do czytnika. (domyślnie ``Prawda`` - z "
"ang. - ``True``)"

msgid "argument_default_ - Set the global default value for arguments. (default: ``None``)"
msgstr ""
"argument_default_ - Ustawia nadrzędną domyślną wartość dla parametru "
"(domyślnie: ``Żadna`` - z ang. - ``None``)"

msgid "parents_ - A list of :class:`ArgumentParser` objects whose arguments should also be included."
msgstr ""
"parents_ - Lista przedmiotów :class:`ArgumentParser`, których parametry "
"powinny także być załączone."

msgid "prefix_chars_ - The set of characters that prefix optional arguments. (default: '-')"
msgstr ""
"prefix_chars_ - zestaw znaków które są przedrostkami parametrów "
"opcjonalnych. (domyślnie: '-')"

msgid "fromfile_prefix_chars_ - The set of characters that prefix files from which additional arguments should be read. (default: ``None``)"
msgstr ""
"fromfile_prefix_chars_ - Zestaw znaków które są przedrostkami nazw plików z "
"których dodatkowe parametry powinny zostać wczytane. (domyślne: ``None``)"

msgid "formatter_class_ - A class for customizing the help output."
msgstr "formatter_class_ - uogólnienie dla uszczegółowienia wypisów pomocy."

msgid "conflict_handler_ - Usually unnecessary, defines strategy for resolving conflicting optionals."
msgstr ""
"conflict_handler_ - Zwykle niepotrzebne, określa strategię dla rozwiązywania "
"konfliktujących się opcji."

msgid "prog_ - The name of the program (default: :data:`sys.argv[0]`)"
msgstr "prog_ - nazwa programu (domyślnie: dane :data:`sys.argv[0]`)"

msgid "usage_ - The string describing the program usage (default: generated)"
msgstr ""
"usage_ - z ang. - użycie_ - ciąg znaków określający użycie programu "
"(domyślnie: generowane)"

msgid "The following sections describe how each of these are used."
msgstr "Następujące sekcje opisują jak każda z tych jest użyta."

msgid "description"
msgstr "opis"

msgid "Most calls to the :class:`ArgumentParser` constructor will use the ``description=`` keyword argument.  This argument gives a brief description of what the program does and how it works.  In help messages, the description is displayed between the command-line usage string and the help messages for the various arguments::"
msgstr ""
"Większość wywołań konstruktora :class:`ArgumentParser` będzie używało słowa "
"kluczowego ``description=``. Ten parametr daje krótki opis tego co program "
"robi i jak działa. W wiadomościach pomocy, opis jest pokazany pomiędzy "
"ciągiem użycia wiersza-poleceń i wiadomości pomocy dla różnych parametrów::"

msgid ">>> parser = argparse.ArgumentParser(description='A foo that bars') >>> parser.print_help() usage: argparse.py [-h]  A foo that bars  optional arguments:  -h, --help  show this help message and exit"
msgstr ""
">>> parser = argparse.ArgumentParser(description='fuu które baruje') >>> "
"parser.print_help() użycie: argparse.py [-h] Fuu, którego baruje opcjonalne "
"parametry: -h, --help pokazuje ten napis pomocy i wychodzi"

msgid "By default, the description will be line-wrapped so that it fits within the given space.  To change this behavior, see the formatter_class_ argument."
msgstr ""
"Domyślnie, opis będzie zawiniętym wierszem, tak, że będzie mieścił się "
"wewnątrz danego miejsca. Aby zmienić to zachowanie, zobacz parametr "
"formatter_class_."

msgid "epilog"
msgstr "epilog"

msgid "Some programs like to display additional description of the program after the description of the arguments.  Such text can be specified using the ``epilog=`` argument to :class:`ArgumentParser`::"
msgstr ""
"Niektóre programy lubią wyświetlać dodatkowy opis programu po opisie "
"parametrów. Taki tekst może być specyfikowany przy użyciu parametru "
"``epilog=`` dla uogólnienia :class:`ArgumentParser`::"

msgid ">>> parser = argparse.ArgumentParser( ...     description='A foo that bars', ...     epilog=\"And that's how you'd foo a bar\") >>> parser.print_help() usage: argparse.py [-h]  A foo that bars  optional arguments:  -h, --help  show this help message and exit  And that's how you'd foo a bar"
msgstr ""
">>> parser = argparse.ArgumentParser( ... description='Foo które baruje', "
"... epilog=\"A to jest sposób w jaki foo baruje\") >>> parser.print_help() "
"użycie: argparse.py [-h] Foo, które baruje opcjonalne parametry: -h, --help "
"pokazuje tą wiadomość pomocy i wychodzi. A to jest sposób w jaki foo baruje"

msgid "As with the description_ argument, the ``epilog=`` text is by default line-wrapped, but this behavior can be adjusted with the formatter_class_ argument to :class:`ArgumentParser`."
msgstr ""
"Tak jak z parametrem opisu description_, ``epilog=`` tekst jest domyślnie "
"zawijanym wierszem, ale to zachowanie może być dostosowane za pomocą "
"parametru formatter_class_ dla uogólnienia :class:`ArgumentParser`."

msgid "add_help"
msgstr "add_help"

msgid "By default, ArgumentParser objects add a ``-h/--help`` option which simply displays the parser's help message.  For example, consider a file named ``myprogram.py`` containing the following code::"
msgstr ""
"Domyślnie, przedmioty ArgumentParser dodają opcję ``-h/--help`` która po "
"prostu wyświetla wiadomość pomocy czytnika. Na przykład, rozważ plik nazwany "
"``myprogram.py`` zawierający następujący kod::"

msgid "import argparse parser = argparse.ArgumentParser() parser.add_argument('--foo', help='foo help') args = parser.parse_args()"
msgstr ""
"import argparse parser = argparse.ArgumentParser() parser.add_argument('--"
"foo', help='pomoc foo') args = parser.parse_args()"

msgid "If ``-h`` or ``--help`` is supplied is at the command-line, the ArgumentParser help will be printed::"
msgstr ""
"Jeśli ``-h`` lub ``--help`` jest dostarczony w wierszu poleceń, pomoc "
"ArgumentParser'a będzie wypisana::"

msgid "$ python myprogram.py --help usage: myprogram.py [-h] [--foo FOO]  optional arguments:  -h, --help  show this help message and exit  --foo FOO   foo help"
msgstr ""
"$ python myprogram.py --help użycie: myprogram.py [-h] [--foo FOO] "
"opcjonalne parametry: -h, --help pokazuje tą wiadomość pomocy i wychodzi "
"--foo FOO pomoc foo"

msgid "Occasionally, it may be useful to disable the addition of this help option. This can be achieved by passing ``False`` as the ``add_help=`` argument to :class:`ArgumentParser`::"
msgstr ""
"Okazjonalnie, może być użyteczne wyłączenie dodatku tej opcji pomocy. To "
"można osiągnąć przez przekazanie ``False`` dla ``add_help=`` parametru "
":class:`ArgumentParser`::"

msgid ">>> parser = argparse.ArgumentParser(prog='PROG', add_help=False) >>> parser.add_argument('--foo', help='foo help') >>> parser.print_help() usage: PROG [--foo FOO]  optional arguments:  --foo FOO  foo help"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG', add_help=False) >>> "
"parser.add_argument('--foo', help='foo help') >>> parser.print_help() "
"użycie: PROG [--foo FOO]  opcjonalne parametry:  --foo FOO  foo help"

msgid "prefix_chars"
msgstr "znaki_przedrostka - z ang. - prefix_chars"

msgid "Most command-line options will use ``'-'`` as the prefix, e.g. ``-f/--foo``. Parsers that need to support additional prefix characters, e.g. for options like ``+f`` or ``/foo``, may specify them using the ``prefix_chars=`` argument to the ArgumentParser constructor::"
msgstr ""
"większość opcji wiersza polecenia będzie używało ``'-'`` jako przedrostka, "
"np. ``-f/--foo``. Czytniki, które wymagają wsparcia dodatkowych znaków "
"przedrostka, np. dla opcji takich, jak ``+f`` lub ``/foo``, mogą określać je "
"używając parametru ``prefix_chars=`` dla konstruktora ArgumentParser::"

msgid ">>> parser = argparse.ArgumentParser(prog='PROG', prefix_chars='-+') >>> parser.add_argument('+f') >>> parser.add_argument('++bar') >>> parser.parse_args('+f X ++bar Y'.split()) Namespace(bar='Y', f='X')"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG', prefix_chars='-+') >>> "
"parser.add_argument('+f') >>> parser.add_argument('++bar') >>> "
"parser.parse_args('+f X ++bar Y'.split()) Namespace(bar='Y', f='X')"

msgid "The ``prefix_chars=`` argument defaults to ``'-'``. Supplying a set of characters that does not include ``'-'`` will cause ``-f/--foo`` options to be disallowed."
msgstr ""
"Parametr ``prefix_chars=`` domyślnie jest równy ``'-'``. Dostarczając zbiór "
"znaków który nie zawiera ``'-'`` spowoduje że opcje ``-f/--foo`` będą "
"niedozwolone."

msgid "fromfile_prefix_chars"
msgstr "fromfile_prefix_chars - z ang. - zpliku_znaki_przedrostka"

msgid "Sometimes, for example when dealing with a particularly long argument lists, it may make sense to keep the list of arguments in a file rather than typing it out at the command line.  If the ``fromfile_prefix_chars=`` argument is given to the :class:`ArgumentParser` constructor, then arguments that start with any of the specified characters will be treated as files, and will be replaced by the arguments they contain.  For example::"
msgstr ""
"czasami, dla przykładu gdy w grę wchodzą szczególnie długie listy "
"parametrów, może mieć sens przechowywanie listy parametrów w pliku zamiast "
"wpisywać je w wierszu poleceń. Jeśli parametr ``formfile_prefix_chars=`` "
"jest dany dla konstruktora uogólnienia :class:`ArgumentParser`, wtedy "
"parametry które zaczynają się na którekolwiek z podanych znaków będą "
"traktowane jak pliki i będą zamienione przez zawartość którą posiadają. Na "
"przykład::"

msgid ">>> with open('args.txt', 'w') as fp: ...    fp.write('-f\\nbar') >>> parser = argparse.ArgumentParser(fromfile_prefix_chars='@') >>> parser.add_argument('-f') >>> parser.parse_args(['-f', 'foo', '@args.txt']) Namespace(f='bar')"
msgstr ""
">>> with open('args.txt', 'w') as fp: ...    fp.write('-f\\nbar') >>> parser "
"= argparse.ArgumentParser(fromfile_prefix_chars='@') >>> "
"parser.add_argument('-f') >>> parser.parse_args(['-f', 'foo', '@args.txt']) "
"Namespace(f='bar')"

msgid "Arguments read from a file must by default be one per line (but see also :meth:`convert_arg_line_to_args`) and are treated as if they were in the same place as the original file referencing argument on the command line.  So in the example above, the expression ``['-f', 'foo', '@args.txt']`` is considered equivalent to the expression ``['-f', 'foo', '-f', 'bar']``."
msgstr ""
"Parametry wczytywane z pliku muszą domyślnie być jeden na linię (ale zobacz "
"też sposób postępowania :meth:`convert_arg_line_to_args`) i są traktowane "
"tak jakby były w tym samym miejscu, jak oryginalny plik odnoszący się do "
"parametru w wierszu polecenia. Więc na przykład w powyższym wyrażenie "
"``['-f', 'foo', '@args.txt']`` jest uważane za równoważne wyrażeniu ``['-f', "
"'foo', '-f', 'bar']``."

msgid "The ``fromfile_prefix_chars=`` argument defaults to ``None``, meaning that arguments will never be treated as file references."
msgstr ""
"Parametr ``fromfile_prefix_chars=`` domyślnie równy jest ``None``, w "
"znaczeniu, że parametry nigdy nie będą traktowane jako odniesienia do "
"plików."

msgid "argument_default"
msgstr "parametr_domyślny - z ang. - argument_default"

msgid "Generally, argument defaults are specified either by passing a default to :meth:`add_argument` or by calling the :meth:`set_defaults` methods with a specific set of name-value pairs.  Sometimes however, it may be useful to specify a single parser-wide default for arguments.  This can be accomplished by passing the ``argument_default=`` keyword argument to :class:`ArgumentParser`. For example, to globally suppress attribute creation on :meth:`parse_args` calls, we supply ``argument_default=SUPPRESS``::"
msgstr ""
"Ogólnie, domyślne parametry są określane albo przez przekazanie domyślnej "
"wartości do sposobu postępowania :meth:`add_argument` albo przez wezwanie "
"sposobu postępowania :meth:`set_defaults` ze szczególnym zbiorem par nazwa-"
"wartość. Czasami jednakże, może być użyteczne określenie pojedynczej szeroko"
"ści-czytnika domyślnej wartości dla parametrów. To może być osiągnięte przez "
"przekazanie parametru słowa kluczowego ``argument_default=`` dla "
"uogólnienia :class:`ArgumentParser`. Dla przykładu, aby nadrzędnie wycofać "
"tworzenie właściwości w przypadku wywołania :meth:`parse_args`, dostarczamy "
"``argument_default=SUPPRESS``::"

msgid ">>> parser = argparse.ArgumentParser(argument_default=argparse.SUPPRESS) >>> parser.add_argument('--foo') >>> parser.add_argument('bar', nargs='?') >>> parser.parse_args(['--foo', '1', 'BAR']) Namespace(bar='BAR', foo='1') >>> parser.parse_args([]) Namespace()"
msgstr ""
">>> parser = argparse.ArgumentParser(argument_default=argparse.SUPPRESS) >>> "
"parser.add_argument('--foo') >>> parser.add_argument('bar', nargs='?') >>> "
"parser.parse_args(['--foo', '1', 'BAR']) Namespace(bar='BAR', foo='1') >>> "
"parser.parse_args([]) Namespace()"

msgid "parents"
msgstr "rodzice - z ang. - parents"

msgid "Sometimes, several parsers share a common set of arguments. Rather than repeating the definitions of these arguments, a single parser with all the shared arguments and passed to ``parents=`` argument to :class:`ArgumentParser` can be used.  The ``parents=`` argument takes a list of :class:`ArgumentParser` objects, collects all the positional and optional actions from them, and adds these actions to the :class:`ArgumentParser` object being constructed::"
msgstr ""
"Czasami, kilka czytników współdzieli wspólny zestaw parametrów. Zamiast "
"powtarzać definicje tych parametrów, pojedynczy czytnik ze wszystkimi "
"współdzielonymi parametrami i przekazany do parametru ``parents=`` dla "
"uogólnienia :class:`ArgumentParser` może być użyty. Parametr ``parents=`` "
"przyjmuje listę przedmiotów :class:`ArgumentParser`, zbiera wszystkie "
"pozycyjne i opcjonalne działania od nich, i dodaje te działania do "
"przedmiotu :class:`ArgumentParser` będącego konstruowanym::"

msgid ">>> parent_parser = argparse.ArgumentParser(add_help=False) >>> parent_parser.add_argument('--parent', type=int)  >>> foo_parser = argparse.ArgumentParser(parents=[parent_parser]) >>> foo_parser.add_argument('foo') >>> foo_parser.parse_args(['--parent', '2', 'XXX']) Namespace(foo='XXX', parent=2)  >>> bar_parser = argparse.ArgumentParser(parents=[parent_parser]) >>> bar_parser.add_argument('--bar') >>> bar_parser.parse_args(['--bar', 'YYY']) Namespace(bar='YYY', parent=None)"
msgstr ""
">>> parent_parser = argparse.ArgumentParser(add_help=False) >>> "
"parent_parser.add_argument('--parent', type=int)  >>> foo_parser = "
"argparse.ArgumentParser(parents=[parent_parser]) >>> "
"foo_parser.add_argument('foo') >>> foo_parser.parse_args(['--parent', '2', "
"'XXX']) Namespace(foo='XXX', parent=2)  >>> bar_parser = "
"argparse.ArgumentParser(parents=[parent_parser]) >>> "
"bar_parser.add_argument('--bar') >>> bar_parser.parse_args(['--bar', 'YYY']) "
"Namespace(bar='YYY', parent=None)"

msgid "Note that most parent parsers will specify ``add_help=False``.  Otherwise, the :class:`ArgumentParser` will see two ``-h/--help`` options (one in the parent and one in the child) and raise an error."
msgstr ""
"Zauważ że większość czytników rodziców będzie określała ``add_help=False``. "
"W przeciwnym razie przedmiot :class:`ArgumentParser` zobaczy dwie "
"``-h/--help`` opcje (jedną dla rodzica jedną dla potomka) i zgłosi błąd."

msgid "formatter_class"
msgstr "formatter_class - uogolnienie_formatujace"

msgid ":class:`ArgumentParser` objects allow the help formatting to be customized by specifying an alternate formatting class.  Currently, there are three such classes: :class:`argparse.RawDescriptionHelpFormatter`, :class:`argparse.RawTextHelpFormatter` and :class:`argparse.ArgumentDefaultsHelpFormatter`.  The first two allow more control over how textual descriptions are displayed, while the last automatically adds information about argument default values."
msgstr ""
"Przedmioty :class:`ArgumentParser` pozwalają formatowaniu pomocy aby była "
"uszczegółowiona przez określenie alternatywnego uogólnienia formatującego. "
"Obecnie istnieją trzy takie uogólnienia: "
":class:`argparse.RawDescriptionHelpFormatter` "
":class:`argparse.RawTextHelpFormatter` i "
":class:`argparse.ArgumentDefaultsHelpFormatter`. Pierwsze dwa pozwalają na "
"więcej kontroli ponad tym jak opisy tekstowe są pokazywane, podczas gdy "
"ostatni automatycznie dodaje informacje o wartościach domyślnych parametru."

msgid "By default, :class:`ArgumentParser` objects line-wrap the description_ and epilog_ texts in command-line help messages::"
msgstr ""
"Domyślnie, przedmioty :class:`ArgumentParser` zawijają wiersze opisu - z "
"ang. - description_ i epilogu - epilog_ w wiadomościach pomocy wiersza "
"polecenia::"

msgid ">>> parser = argparse.ArgumentParser( ...     prog='PROG', ...     description='''this description ...         was indented weird ...             but that is okay''', ...     epilog=''' ...             likewise for this epilog whose whitespace will ...         be cleaned up and whose words will be wrapped ...         across a couple lines''') >>> parser.print_help() usage: PROG [-h]  this description was indented weird but that is okay  optional arguments:  -h, --help  show this help message and exit  likewise for this epilog whose whitespace will be cleaned up and whose words will be wrapped across a couple lines"
msgstr ""
">>> parser = argparse.ArgumentParser( ... prog='PROG', ... "
"description='''ten opis ... był wcięty dziwnie ... ale to nie szkodzi''', "
"... epilog=''' ... podobnie dla epilogu, którego białe znaki będą ... "
"uporządkowane i którego słowa zostaną zawinięte ... na przestrzeni kilku "
"wierszy''') >>> parser.print_help() użycie: PROG [-h] ten opis był wcięty "
"dziwnie ale to nie szkodzi opcjonalne parametry: -h, --help pokaż tą "
"wiadomość pomocy i wyjdź podobnie dla epilogu, którego białe znak będą "
"uporządkowane i którego słowa zostaną zawinięte na przestrzeni kilku wierszy"

msgid "Passing :class:`argparse.RawDescriptionHelpFormatter` as ``formatter_class=`` indicates that description_ and epilog_ are already correctly formatted and should not be line-wrapped::"
msgstr ""
"Przekazanie :class:`argparse.RawDescriptionHelpFormatter jako "
"``formatter_class=`` wskazuje, że opis - z ang. - description_ i epilog - "
"epilog_ są już prawidłowo sformatowane i nie powinny być zawijane "
"wierszami::"

msgid ">>> parser = argparse.ArgumentParser( ...     prog='PROG', ...     formatter_class=argparse.RawDescriptionHelpFormatter, ...     description=textwrap.dedent('''\\ ...         Please do not mess up this text! ...         -------------------------------- ...             I have indented it ...             exactly the way ...             I want it ...         ''')) >>> parser.print_help() usage: PROG [-h]  Please do not mess up this text! --------------------------------    I have indented it    exactly the way    I want it  optional arguments:  -h, --help  show this help message and exit"
msgstr ""
">>> parser = argparse.ArgumentParser( ... prog='PROG', ... "
"formatter_class=argparse.RawDescriptionHelpFormatter, ... "
"description=textwrap.dedent('''\\ ... Proszę nie pomieszaj tego tekstu! ... "
"------------------------------------- ... Wciąłem go ... dokładnie w sposób "
"... w jaki tego pragnąłem ... ''')) >>> parser.print_help() użycie: PROG "
"[-h] Proszę nie pomieszaj tego tekstu! "
"----------------------------------------- Wciąłem go dokładnie w sposób w "
"jaki tego pragnąłem opcjonalne parametry: -h, --help pokaż tą wiadomość "
"pomocy i wyjdź"

msgid ":class:`RawTextHelpFormatter` maintains whitespace for all sorts of help text including argument descriptions."
msgstr ""
":class:`RawTextHelpFormatter` utrzymuje białe znaki dla wszystkich rodzajów "
"tekstu pomocy zawierającego opisy parametrów."

msgid "The other formatter class available, :class:`ArgumentDefaultsHelpFormatter`, will add information about the default value of each of the arguments::"
msgstr ""
"Pozostałe dostępne uogólnienie przedmiotu formatującego "
":class:`ArgumentDefaultsHelpFormatter`, będzie dodawało informacje o "
"domyślnej wartości każdego z parametrów:: "

msgid ">>> parser = argparse.ArgumentParser( ...     prog='PROG', ...     formatter_class=argparse.ArgumentDefaultsHelpFormatter) >>> parser.add_argument('--foo', type=int, default=42, help='FOO!') >>> parser.add_argument('bar', nargs='*', default=[1, 2, 3], help='BAR!') >>> parser.print_help() usage: PROG [-h] [--foo FOO] [bar [bar ...]]  positional arguments:  bar         BAR! (default: [1, 2, 3])  optional arguments:  -h, --help  show this help message and exit  --foo FOO   FOO! (default: 42)"
msgstr ""
">>> parser = argparse.ArgumentParser( ...     prog='PROG', ...     "
"formatter_class=argparse.ArgumentDefaultsHelpFormatter) >>> "
"parser.add_argument('--foo', type=int, default=42, help='FOO!') >>> "
"parser.add_argument('bar', nargs='*', default=[1, 2, 3], help='BAR!') >>> "
"parser.print_help() usage: PROG [-h] [--foo FOO] [bar [bar ...]]  pozycyjne "
"parametry:  bar         BAR! (default: [1, 2, 3])  opcjonalne parametry:  "
"-h, --help  pokaż tą wiadomość pomocy i wyjdź --foo FOO   FOO! (default: 42)"

msgid "conflict_handler"
msgstr "rozstrzyganie_konfilktow - z ang. - conflict_handler"

msgid ":class:`ArgumentParser` objects do not allow two actions with the same option string.  By default, :class:`ArgumentParser` objects raises an exception if an attempt is made to create an argument with an option string that is already in use::"
msgstr ""
"przedmioty :class:`ArgumentParser` nie pozwalają na dwa działania o tym "
"samym ciągu znaków opcji. Domyślnie, przedmioty :class:`ArgumentParser` "
"zgłaszają wyjątek, jeśli próba jest podejmowana aby utworzyć parametr z  "
"ciągiem znaków opcji który już jest używany::"

msgid ">>> parser = argparse.ArgumentParser(prog='PROG') >>> parser.add_argument('-f', '--foo', help='old foo help') >>> parser.add_argument('--foo', help='new foo help') Traceback (most recent call last):  .. ArgumentError: argument --foo: conflicting option string(s): --foo"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG') >>> "
"parser.add_argument('-f', '--foo', help='stara pomoc foo') >>> "
"parser.add_argument('--foo', help='nowa pomoc foo') Wypis (najmłodsze "
"wywołanie ostatnie):  .. ArgumentError: parametr --foo: skonfliktowane ciągi "
"znaków opcji: --foo"

msgid "Sometimes (e.g. when using parents_) it may be useful to simply override any older arguments with the same option string.  To get this behavior, the value ``'resolve'`` can be supplied to the ``conflict_handler=`` argument of :class:`ArgumentParser`::"
msgstr ""
"Czasami (np. gdy używa się rodziców - z ang. - parents_) to może być "
"użyteczne aby po prostu przesłonić wszelkie starsze parametry tym samym "
"ciągiem znaków opcji. Aby uzyskać takie zachowanie, wartość ``'resolve'`` "
"może być dostarczona do parametru ``rozstrzyganie_konfliktu`` "
"``conflict_handler`` uogólnienia :class:`ArgumentParser`::"

msgid ">>> parser = argparse.ArgumentParser(prog='PROG', conflict_handler='resolve') >>> parser.add_argument('-f', '--foo', help='old foo help') >>> parser.add_argument('--foo', help='new foo help') >>> parser.print_help() usage: PROG [-h] [-f FOO] [--foo FOO]  optional arguments:  -h, --help  show this help message and exit  -f FOO      old foo help  --foo FOO   new foo help"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG', "
"conflict_handler='resolve') >>> parser.add_argument('-f', '--foo', "
"help='stara pomoc foo') >>> parser.add_argument('--foo', help='nowa pomoc "
"foo') >>> parser.print_help() użycie: PROG [-h] [-f FOO] [--foo FOO]  "
"opcjonalne parametry:  -h, --help  pokaż ten komunikat pomocy i wyjdź  -f "
"FOO      stara pomoc foo  --foo FOO   nowa pomoc foo"

msgid "Note that :class:`ArgumentParser` objects only remove an action if all of its option strings are overridden.  So, in the example above, the old ``-f/--foo`` action is retained as the ``-f`` action, because only the ``--foo`` option string was overridden."
msgstr ""
"Zauważ, że przedmioty :class:`ArgumentParser` usuwają działanie tylko jeśli "
"wszystkie z ich ciągów znaków opcji zostaną przesłonięte. Więc w przykładzie "
"powyższym, stare działanie ``-f/--foo`` jest zachowane jako działanie "
"``-f``, gdyż tylko ciąg znaków ``--foo`` został przesłonięty."

msgid "prog"
msgstr "prog"

msgid "By default, :class:`ArgumentParser` objects uses ``sys.argv[0]`` to determine how to display the name of the program in help messages.  This default is almost always desirable because it will make the help messages match how the program was invoked on the command line.  For example, consider a file named ``myprogram.py`` with the following code::"
msgstr ""
"Domyślnie, przedmioty :class:`ArgumentParser` używają ``sys.argv[0]`` aby "
"określić jak wyświetlić nazwę programu w wiadomościach pomocy. Ta domyślna "
"wartość jest prawie zawsze oczekiwana ponieważ spowoduje że wiadomości "
"pomocy będą odpowiadały temu jak program został wywołany w wierszu poleceń. "
"Na przykład, rozważ plik nazwany ``myprogram.py`` z następującym kodem::"

msgid "The help for this program will display ``myprogram.py`` as the program name (regardless of where the program was invoked from)::"
msgstr ""
"Pomoc dla tego programu będzie wyświetlała ``myprogram.py`` jako nazwę "
"programu (niezależnie od tego skąd program został wywołany)::"

msgid "$ python myprogram.py --help usage: myprogram.py [-h] [--foo FOO]  optional arguments:  -h, --help  show this help message and exit  --foo FOO   foo help $ cd .. $ python subdir\\myprogram.py --help usage: myprogram.py [-h] [--foo FOO]  optional arguments:  -h, --help  show this help message and exit  --foo FOO   foo help"
msgstr ""
"$python myprogram.py --help użycie: myprogram.py [-h] [--foo FOO] opcjonalne "
"parametry: -h, --help pokaż ten komunikat pomocy i wyjdź -- foo FOO foo "
"help $ cd .. $ python subdir\\myprogram.py --help użycie: myprogram.py [-h] "
"[--foo FOO] opcjonalne parametry: -h --help pokaż ten komunikat pomocy i "
"wyjdź --foo FOO foo help"

msgid "To change this default behavior, another value can be supplied using the ``prog=`` argument to :class:`ArgumentParser`::"
msgstr ""
"Aby zmienić to domyślne zachowanie, inne wartość może być dostarczona "
"używając parametru ``prog=`` dla uogólnienia :class:`ArgumentParser`::"

msgid ">>> parser = argparse.ArgumentParser(prog='myprogram') >>> parser.print_help() usage: myprogram [-h]  optional arguments:  -h, --help  show this help message and exit"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='myprogram') >>> "
"parser.print_help() użycie: myprogram [-h]  opcjonalne parametry:  -h, "
"--help  pokaż tą wiadomość pomocy i wyjdź"

msgid "Note that the program name, whether determined from ``sys.argv[0]`` or from the ``prog=`` argument, is available to help messages using the ``%(prog)s`` format specifier."
msgstr ""
"Zauważ, że nazwa programu, określona przez ``sys.argv[0]`` lub przez "
"argument ``prog=`` jest dostępna dla wiadomości pomocy używając ``%(prog)s`` "
"określnika formatującego."

msgid ">>> parser = argparse.ArgumentParser(prog='myprogram') >>> parser.add_argument('--foo', help='foo of the %(prog)s program') >>> parser.print_help() usage: myprogram [-h] [--foo FOO]  optional arguments:  -h, --help  show this help message and exit  --foo FOO   foo of the myprogram program"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='myprogram') >>> "
"parser.add_argument('--foo', help='foo należący do programu %(prog)s') >>> "
"parser.print_help() użycie: myprogram [-h] [--foo FOO]  opcjonalne "
"parametry:  -h, --help  pokaż tą wiadomość pomocy i wyjdź  --foo FOO   foo "
"należący do programu myprogram"

msgid "usage"
msgstr "użycie"

msgid "By default, :class:`ArgumentParser` calculates the usage message from the arguments it contains::"
msgstr ""
"Domyślnie uogólnienie :class:`ArgumentParser` oblicza wiadomość użycia z "
"parametrów które zawiera::"

msgid ">>> parser = argparse.ArgumentParser(prog='PROG') >>> parser.add_argument('--foo', nargs='?', help='foo help') >>> parser.add_argument('bar', nargs='+', help='bar help') >>> parser.print_help() usage: PROG [-h] [--foo [FOO]] bar [bar ...]  positional arguments:  bar          bar help  optional arguments:  -h, --help   show this help message and exit  --foo [FOO]  foo help"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG') >>> parser.add_argument('"
"--foo', nargs='?', help='foo help') >>> parser.add_argument('bar', "
"nargs='+', help='bar help') >>> parser.print_help() użycie: PROG [-h] [--foo "
"[FOO]] bar [bar ...]  pozycyjne parametry:  bar          bar help  "
"opcjonalne parametry:  -h, --help   pokaż tą wiadomość pomocy i wyjdź  --foo "
"[FOO]  foo help"

msgid "The default message can be overridden with the ``usage=`` keyword argument::"
msgstr ""
"Domyślna wiadomość może być przesłonięta za pomocą parametru słowa "
"kluczowego ``usage=``::"

msgid ">>> parser = argparse.ArgumentParser(prog='PROG', usage='%(prog)s [options]') >>> parser.add_argument('--foo', nargs='?', help='foo help') >>> parser.add_argument('bar', nargs='+', help='bar help') >>> parser.print_help() usage: PROG [options]  positional arguments:  bar          bar help  optional arguments:  -h, --help   show this help message and exit  --foo [FOO]  foo help"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG', usage='%(prog)s [opcje]') "
">>> parser.add_argument('--foo', nargs='?', help='foo help') >>> "
"parser.add_argument('bar', nargs='+', help='bar help') >>> "
"parser.print_help() użycie: PROG [opcje]  pozycyjne parametry:  bar "
"         bar help  opcjonalne parametry:  -h, --help   pokaż tą wiadomość "
"pomocy i wyjdź  --foo [FOO]  foo help"

msgid "The ``%(prog)s`` format specifier is available to fill in the program name in your usage messages."
msgstr ""
"Określenie formatu ``%(prog)s`` jest dostępne do wpisania nazwy programu w "
"twojej wiadomości o użyciu."

msgid "The add_argument() method"
msgstr "Sposób postępowania add_argument()"

msgid "Define how a single command line argument should be parsed.  Each parameter has its own more detailed description below, but in short they are:"
msgstr ""
"Zdefiniuj jak pojedynczy parametr linii poleceń będzie wczytywany. Każdy "
"parametr ma swój własny bardziej szczegółowy opis poniżej, ale w skrócie są "
"to:"

msgid "`name or flags`_ - Either a name or a list of option strings, e.g. ``foo`` or ``-f, --foo``"
msgstr ""
"`name or flags`_ - nazwa lub flagi - Albo nazwa albo lista ciągów znaków "
"opcji, np. ``foo`` lub ``-f, --foo``"

msgid "action_ - The basic type of action to be taken when this argument is encountered at the command-line."
msgstr ""
"action_ - Podstawowy typ działania podejmowanego gdy ten parametr jest "
"napotykany w wierszu-polecenia."

msgid "nargs_ - The number of command-line arguments that should be consumed."
msgstr ""
"nargs_ - liczba parametrów wiersza-polecenia które powinny być skonsumowane."

msgid "const_ - A constant value required by some action_ and nargs_ selections."
msgstr ""
"const_ - stała wartość wymagana przez pewne działanie - action_ i nargs_ "
"wyborów."

msgid "default_ - The value produced if the argument is absent from the command-line."
msgstr ""
"default_ - wartość tworzona jeśli parametr jest nieobecny w wierszu-"
"polecenia."

msgid "type_ - The type to which the command-line arg should be converted."
msgstr "type_ - typ do którego wiersz-poleceń powinien zostać zamieniony."

msgid "choices_ - A container of the allowable values for the argument."
msgstr "choices_ - pojemnik dozwolonych wartości parametru."

msgid "required_ - Whether or not the command-line option may be omitted (optionals only)."
msgstr ""
"required_ - Czy opcja wiersza-polecenia może zostać pominięta (tylko dla "
"opcjonalnych)."

msgid "help_ - A brief description of what the argument does."
msgstr "help_ - krótki opis co parametr robi."

msgid "metavar_ - A name for the argument in usage messages."
msgstr "metavar_ - Nazwa parametru w wiadomościach o użyciu."

msgid "dest_ - The name of the attribute to be added to the object returned by :meth:`parse_args`."
msgstr ""
"dest_ - nazwa właściwości do dodania do przedmiotu zwróconego przez "
":meth:`parse_args`."

msgid "name or flags"
msgstr "nazwa lub flagi"

msgid "The :meth:`add_argument` method must know whether an optional argument, like ``-f`` or ``--foo``, or a positional argument, like a list of filenames, is expected.  The first arguments passed to :meth:`add_argument` must therefore be either a series of flags, or a simple argument name.  For example, an optional argument could be created like::"
msgstr ""
"Sposób postępowania :meth:`add_argument` musi wiedzieć czy opcjonalny "
"parametr, taki jak ``-f`` lub ``--foo``, lub pozycyjny parametr, jak lista "
"nazw plików, jest oczekiwana. Pierwszy parametr przekazany do "
":meth:`add_argument` musi zatem być albo szeregiem flag, albo prostą nazwą "
"parametru. Na przykład, opcjonalny parametr może być tworzony jak w::"

msgid ">>> parser.add_argument('-f', '--foo')"
msgstr ">>> parser.add_argument('-f', '--foo')"

msgid "while a positional argument could be created like::"
msgstr "podczas gdy pozycyjny parametr mógłby być utworzony, jak w::"

msgid ">>> parser.add_argument('bar')"
msgstr ">>> parser.add_argument('bar')"

msgid "When :meth:`parse_args` is called, optional arguments will be identified by the ``-`` prefix, and the remaining arguments will be assumed to be positional::"
msgstr ""
"Gdy :meth:`parse_args` jest wzywane, opcjonalne parametry będą "
"identyfikowane przez przedrostek ``-``, i pozostałe parametry będą uznawane "
"za pozycyjne::"

msgid ">>> parser = argparse.ArgumentParser(prog='PROG') >>> parser.add_argument('-f', '--foo') >>> parser.add_argument('bar') >>> parser.parse_args(['BAR']) Namespace(bar='BAR', foo=None) >>> parser.parse_args(['BAR', '--foo', 'FOO']) Namespace(bar='BAR', foo='FOO') >>> parser.parse_args(['--foo', 'FOO']) usage: PROG [-h] [-f FOO] bar PROG: error: too few arguments"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG') >>> "
"parser.add_argument('-f', '--foo') >>> parser.add_argument('bar') >>> "
"parser.parse_args(['BAR']) Namespace(bar='BAR', foo=None) >>> "
"parser.parse_args(['BAR', '--foo', 'FOO']) Namespace(bar='BAR', foo='FOO') "
">>> parser.parse_args(['--foo', 'FOO']) użycie: PROG [-h] [-f FOO] bar PROG: "
"error: za mało parametrów"

msgid "action"
msgstr "akcja"

msgid ":class:`ArgumentParser` objects associate command-line args with actions.  These actions can do just about anything with the command-line args associated with them, though most actions simply add an attribute to the object returned by :meth:`parse_args`.  The ``action`` keyword argument specifies how the command-line args should be handled. The supported actions are:"
msgstr ""
"przedmioty :class:`ArgumentParser` kojarzą parametry wiersza poleceń z "
"działaniami. Te działania mogą robić dowolne rzeczy z parametrami wiersza-"
"poleceń skojarzonymi z nimi, chociaż większość działań po prostu dodaje "
"właściwość do przedmiotu zwracanego przez :meth:`parse_args`. Parametr słowa "
"kluczowego ``akcji`` określa jak parametry wiersza poleceń powinny być "
"obsługiwane. Dostępne działania to:"

msgid "action. For example::"
msgstr "akcja. Dla przykładu::"

msgid ">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--foo') >>> parser.parse_args('--foo 1'.split()) Namespace(foo='1')"
msgstr ""
">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--foo') >>> "
"parser.parse_args('--foo 1'.split()) Namespace(foo='1')"

msgid "argument.  (Note that the const_ keyword argument defaults to the rather unhelpful ``None``.)  The ``'store_const'`` action is most commonly used with optional arguments that specify some sort of flag.  For example::"
msgstr ""
"parametr. (Zauważ, że parametr słowa kluczowego const_ domyślnie jest równy "
"raczej mało użytecznemu ``None``.) Działanie ``'store_const'`` jest "
"najczęściej używane z opcjonalnymi parametrami, które określają pewnego "
"rodzaju flagę. Na przykład::"

msgid ">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--foo', action='store_const', const=42) >>> parser.parse_args('--foo'.split()) Namespace(foo=42)"
msgstr ""
">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--foo', "
"action='store_const', const=42) >>> parser.parse_args('--foo'.split()) "
"Namespace(foo=42)"

msgid "``'store_true'`` and ``'store_false'`` - These store the values ``True`` and ``False`` respectively.  These are special cases of ``'store_const'``.  For example::"
msgstr ""
"``'store_true'`` i ``'store_false'`` - Te zachowują wartości ``True`` i "
"``False`` odpowiednio. To są szczególne przypadki ``'store_const'``. Dla "
"przykładu::"

msgid ">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--foo', action='store_true') >>> parser.add_argument('--bar', action='store_false') >>> parser.parse_args('--foo --bar'.split()) Namespace(bar=False, foo=True)"
msgstr ""
">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--foo', "
"action='store_true') >>> parser.add_argument('--bar', action='store_false') "
">>> parser.parse_args('--foo --bar'.split()) Namespace(bar=False, foo=True)"

msgid "``'append'`` - This stores a list, and appends each argument value to the list.  This is useful to allow an option to be specified multiple times. Example usage::"
msgstr ""
"``'append'`` - To zachowuje listę, i dopisuje każdą wartość parametru do "
"listy. To jest użyteczne aby pozwolić aby opcja była określona kilkukrotnie. "
"Przykładowe użycie::"

msgid ">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--foo', action='append') >>> parser.parse_args('--foo 1 --foo 2'.split()) Namespace(foo=['1', '2'])"
msgstr ""
">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--foo', "
"action='append') >>> parser.parse_args('--foo 1 --foo 2'.split()) "
"Namespace(foo=['1', '2'])"

msgid "``'append_const'`` - This stores a list, and appends the value specified by the const_ keyword argument to the list.  (Note that the const_ keyword argument defaults to ``None``.)  The ``'append_const'`` action is typically useful when multiple arguments need to store constants to the same list. For example::"
msgstr ""
"``'append_const'`` - To zachowuje listę, i dopisuje wartość określoną przez "
"parametr słowa kluczowego const_ do listy. (Zauważ, że parametr słowa "
"kluczowego const_ domyślnie równy jest ``None``.) Akcja ``'append_const'`` "
"jest typowo użyteczna gdy wielokrotne parametry potrzebują dodać stałe "
"wartości do tej samej listy. Dla przykładu::"

msgid ">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--str', dest='types', action='append_const', const=str) >>> parser.add_argument('--int', dest='types', action='append_const', const=int) >>> parser.parse_args('--str --int'.split()) Namespace(types=[<type 'str'>, <type 'int'>])"
msgstr ""
">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--str', "
"dest='types', action='append_const', const=str) >>> parser.add_argument('-- "
"int' dest='types', action='append_const', const=int) >>> parser.parse_args('"
"--str -- int'.split()) Namespace(types=[<type 'str'>, <type 'int'>])"

msgid "``'version'`` - This expects a ``version=`` keyword argument in the :meth:`add_argument` call, and prints version information and exits when invoked."
msgstr ""
"``'version'`` - To oczekuje słowa kluczowego ``version=``  w wywołaniu "
":meth:`add_argument`, i wypisuje informacje o wersji i wychodzi gdy "
"wywołane."

msgid ">>> import argparse >>> parser = argparse.ArgumentParser(prog='PROG') >>> parser.add_argument('--version', action='version', version='%(prog)s 2.0') >>> parser.parse_args(['--version']) PROG 2.0"
msgstr ""
">>> import argparse >>> parser = argparse.ArgumentParser(prog='PROG') >>> "
"parser.add_argument('--version', action='version', version='%(prog)s 2.0') "
">>> parser.parse_args(['--version']) PROG 2.0"

msgid "You can also specify an arbitrary action by passing an object that implements the Action API.  The easiest way to do this is to extend :class:`argparse.Action`, supplying an appropriate ``__call__`` method.  The ``__call__`` method should accept four parameters:"
msgstr ""
"Możesz także określić dowolne działanie przez przekazanie przedmiotu który "
"wypełnia sprzęg programowania Akcji. Najłatwiejszym sposobem aby to osiągnąć "
"jest rozszerzenie uogólnienia :class:`argparse.Action`, dostarczając "
"odpowiednie wywołanie sposobu postępowania ``__call__``. Sposób postępowania "
"``__call__`` powinien akceptować cztery parametry:"

msgid "``parser`` - The ArgumentParser object which contains this action."
msgstr "``parser`` - przedmiot ArgumentParser który zawiera to działanie. "

msgid "``namespace`` - The namespace object that will be returned by :meth:`parse_args`.  Most actions add an attribute to this object."
msgstr ""
"``namespace`` - przedmiot przestrzeni nazw który będzie zwrócony przez "
":meth:`parse_args`. Większość działań dodaje właściwość do przedmiotu."

msgid "``values`` - The associated command-line args, with any type-conversions applied.  (Type-conversions are specified with the type_ keyword argument to :meth:`add_argument`."
msgstr ""
"``values`` - Skojarzone parametry wiersza-poleceń, z wszystkimi zamianami-"
"typów zastosowanymi. (Zamiana-typu są określone za pomocą parametru słowa "
"kluczowego type_ dla sposobu postępowania :meth:`add_argument`."

msgid "``option_string`` - The option string that was used to invoke this action. The ``option_string`` argument is optional, and will be absent if the action is associated with a positional argument."
msgstr ""
"``option_string`` - ciąg znaków opcji który był użyty do wywołania "
"działania. Parametr ``option_string`` jest opcjonalny, i będzie nieobecny "
"jeśli działanie jest związane z pozycyjnym parametrem."

msgid "An example of a custom action::"
msgstr "Przykład szczególnego działania::"

msgid ">>> class FooAction(argparse.Action): ...     def __call__(self, parser, namespace, values, option_string=None): ...     print('%r %r %r' % (namespace, values, option_string)) ...     setattr(namespace, self.dest, values) ... >>> parser = argparse.ArgumentParser() >>> parser.add_argument('--foo', action=FooAction) >>> parser.add_argument('bar', action=FooAction) >>> args = parser.parse_args('1 --foo 2'.split()) Namespace(bar=None, foo=None) '1' None Namespace(bar='1', foo=None) '2' '--foo' >>> args Namespace(bar='1', foo='2')"
msgstr ""
">>> class FooAction(argparse.Action): ...     def __call__(self, parser, "
"namespace, values, option_string=None): ...     print('%r %r %r' % "
"(namespace, values, option_string)) ...     setattr(namespace, self.dest, "
"values) ... >>> parser = argparse.ArgumentParser() >>> parser.add_argument('"
"--foo', action=FooAction) >>> parser.add_argument('bar', action=FooAction) "
">>> args = parser.parse_args('1 --foo 2'.split()) Namespace(bar=None, "
"foo=None) '1' None Namespace(bar='1', foo=None) '2' '--foo' >>> args "
"Namespace(bar='1', foo='2')"

msgid "nargs"
msgstr "nargs"

msgid "ArgumentParser objects usually associate a single command-line argument with a single action to be taken.  The ``nargs`` keyword argument associates a different number of command-line arguments with a single action..  The supported values are:"
msgstr ""
"Przedmioty ArgumentParser zwykle wiąże pojedynczy parametr wiersza-poleceń z "
"pojedynczym działaniem do wykonania. Parametr słowa kluczowego ``nargs`` "
"kojarzy inną ilość parametrów wiersza-poleceń z pojedynczą akcją.. Dostępne "
"wartości to:"

msgid "N (an integer).  N args from the command-line will be gathered together into a list.  For example::"
msgstr ""
"N (liczba całkowita). N parametrów z linii poleceń będzie zebrane razem w "
"listę. Dla przykładu::"

msgid ">>> parser = argparse.ArgumentParser()  >>> parser.add_argument('--foo', nargs=2)  >>> parser.add_argument('bar', nargs=1)  >>> parser.parse_args('c --foo a b'.split())  Namespace(bar=['c'], foo=['a', 'b'])  Note that ``nargs=1`` produces a list of one item.  This is different from the default, in which the item is produced by itself."
msgstr ""
">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--foo', "
"nargs=2) >>> parser.add_argument('bar', nargs=1) >>> parser.parse_args('c "
"--foo a b'.split()) Namespace(bar=['c'], foo=['a', 'b']) Zauważ, że "
"``nargs=1`` tworzy listę jedno-elementową. To jest różne od domyślnego, "
"gdzie element jest tworzony przez samego siebie."

msgid "``'?'``. One arg will be consumed from the command-line if possible, and produced as a single item.  If no command-line arg is present, the value from default_ will be produced.  Note that for optional arguments, there is an additional case - the option string is present but not followed by a command-line arg.  In this case the value from const_ will be produced.  Some examples to illustrate this::"
msgstr ""
"``'?'``. Jeden parametr będzie skonsumowany z wiersza-poleceń jeśli możliwe, "
"i wyprodukowany jako pojedynczy element. Jeśli żaden parametr wiersza-"
"poleceń nie jest obecny, wartość z domyślnej (z ang. - default_) zostanie "
"wyprodukowany. Zauważ że dla opcjonalnych parametrów, istnieje dodatkowy "
"przypadek - ciąg znaków opcji jest obecny ale nie następuje po nich parametr "
"wiersza-poleceń. W tym przypadku wartość z const_ będzie produkowana. "
"Niektóre przykłady aby to zilustrować::"

msgid ">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--foo', nargs='?', const='c', default='d') >>> parser.add_argument('bar', nargs='?', default='d') >>> parser.parse_args('XX --foo YY'.split()) Namespace(bar='XX', foo='YY') >>> parser.parse_args('XX --foo'.split()) Namespace(bar='XX', foo='c') >>> parser.parse_args(''.split()) Namespace(bar='d', foo='d')"
msgstr ""
">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--foo', "
"nargs='?', const='c', default='d') >>> parser.add_argument('bar', nargs='?', "
"default='d') >>> parser.parse_args('XX --foo YY'.split()) "
"Namespace(bar='XX', foo='YY') >>> parser.parse_args('XX --foo'.split()) "
"Namespace(bar='XX', foo='c') >>> parser.parse_args(''.split()) "
"Namespace(bar='d', foo='d')"

msgid "One of the more common uses of ``nargs='?'`` is to allow optional input and output files::"
msgstr ""
"Jedno z częściej spotykanych użyć ``nargs='?'`` jest aby umożliwić "
"opcjonalne pliki wejściowe i wyjściowe::"

msgid ">>> parser = argparse.ArgumentParser() >>> parser.add_argument('infile', nargs='?', type=argparse.FileType('r'), default=sys.stdin) >>> parser.add_argument('outfile', nargs='?', type=argparse.FileType('w'), default=sys.stdout) >>> parser.parse_args(['input.txt', 'output.txt']) Namespace(infile=<open file 'input.txt', mode 'r' at 0x...>, outfile=<open file 'output.txt', mode 'w' at 0x...>) >>> parser.parse_args([]) Namespace(infile=<open file '<stdin>', mode 'r' at 0x...>, outfile=<open file '<stdout>', mode 'w' at 0x...>)"
msgstr ""
">>> parser = argparse.ArgumentParser() >>> parser.add_argument('infile', "
"nargs='?', type=argparse.FileType('r'), default=sys.stdin) >>> "
"parser.add_argument('outfile', nargs='?', type=argparse.FileType('w'), "
"default=sys.stdout) >>> parser.parse_args(['input.txt', 'output.txt']) "
"Namespace(infile=<open file 'input.txt', mode 'r' at 0x...>, outfile=<open "
"file 'output.txt', mode 'w' at 0x...>) >>> parser.parse_args([]) "
"Namespace(infile=<open file '<stdin>', mode 'r' at 0x...>, outfile=<open "
"file '<stdout>', mode 'w' at 0x...>)"

msgid "``'*'``.  All command-line args present are gathered into a list.  Note that it generally doesn't make much sense to have more than one positional argument with ``nargs='*'``, but multiple optional arguments with ``nargs='*'`` is possible.  For example::"
msgstr ""
"``'*'``. Wszystkie parametry wiersza-poleceń obecne są zbierane w listę. "
"Zauważ że zwykle nie ma za dużo sensu mieć więcej niż jeden pozycyjny "
"parametr ``nargs='*'``, ale wiele opcjonalnych parametrów z ``nargs='*'`` "
"jest możliwe. Dla przykładu::"

msgid ">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--foo', nargs='*') >>> parser.add_argument('--bar', nargs='*') >>> parser.add_argument('baz', nargs='*') >>> parser.parse_args('a b --foo x y --bar 1 2'.split()) Namespace(bar=['1', '2'], baz=['a', 'b'], foo=['x', 'y'])"
msgstr ""
">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--foo', "
"nargs='*') >>> parser.add_argument('--bar', nargs='*') >>> "
"parser.add_argument('baz', nargs='*') >>> parser.parse_args('a b --foo x y "
"--bar 1 2'.split()) Namespace(bar=['1', '2'], baz=['a', 'b'], foo=['x', "
"'y'])"

msgid "``'+'``. Just like ``'*'``, all command-line args present are gathered into a list.  Additionally, an error message will be generated if there wasn't at least one command-line arg present.  For example::"
msgstr ""
"``'+'``. Tak jak ``'*'``, wszystkie parametry wiersza-poleceń obecne "
"zbierane są w listę. Dodatkowo, wiadomość o błędzie będzie wytworzona jeśli "
"nie było przynajmniej jednego parametru wiersza polecenia obecnego. Dla "
"przykładu::"

msgid ">>> parser = argparse.ArgumentParser(prog='PROG') >>> parser.add_argument('foo', nargs='+') >>> parser.parse_args('a b'.split()) Namespace(foo=['a', 'b']) >>> parser.parse_args(''.split()) usage: PROG [-h] foo [foo ...] PROG: error: too few arguments"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG') >>> "
"parser.add_argument('foo', nargs='+') >>> parser.parse_args('a b'.split()) "
"Namespace(foo=['a', 'b']) >>> parser.parse_args(''.split()) użycie: PROG "
"[-h] foo [foo ...] PROG: error: za mało parametrów"

msgid "If the ``nargs`` keyword argument is not provided, the number of args consumed is determined by the action_.  Generally this means a single command-line arg will be consumed and a single item (not a list) will be produced."
msgstr ""
"Jeśli parametr słowa kluczowego ``nargs`` nie jest dostarczony, liczba "
"parametrów konsumowanych jest określona przez action_. Zwykle to oznacza że "
"pojedynczy parametr wiersza poleceń będzie skonsumowany i pojedynczy element "
"(nie lista) będzie wyprodukowany."

msgid "const"
msgstr "const"

msgid "The ``const`` argument of :meth:`add_argument` is used to hold constant values that are not read from the command line but are required for the various ArgumentParser actions.  The two most common uses of it are:"
msgstr ""
"Parametr ``const`` dla sposobu postępowania :meth:`add_argument` jest "
"używany aby przechowywać stałe wartości które nie są wczytywane z wiersza "
"poleceń ale są wymagane dla różnych działań ( - z ang - actions) "
"ArgumentParser'a. Dwa najczęstsze użycia tego są to:"

msgid "When :meth:`add_argument` is called with ``action='store_const'`` or ``action='append_const'``.  These actions add the ``const`` value to one of the attributes of the object returned by :meth:`parse_args`.  See the action_ description for examples."
msgstr ""
"Gdy sposób postępowania :meth:`add_argument` jest wywoływany z "
"``action=''store_const'`` lub ``action='append_const'``. Te działania dodają "
"stałe (z ang. - ``const``) wartości do jednej z właściwości przedmiotu "
"zwróconej przez :meth:`parse_args`. Zobacz opis action_ dla przykładów."

msgid "When :meth:`add_argument` is called with option strings (like ``-f`` or ``--foo``) and ``nargs='?'``.  This creates an optional argument that can be followed by zero or one command-line args.  When parsing the command-line, if the option string is encountered with no command-line arg following it, the value of ``const`` will be assumed instead. See the nargs_ description for examples."
msgstr ""
"Gdy sposób postępowania :meth:`add_argument` jest wywoływany z ciągami opcji "
"(takimi jak ``-f`` lub ``--foo``) i ``nargs='?'``. To tworzy dodatkowy "
"nadobowiązkowy parametr, po którym można podać zero lub jeden parametr "
"wiersza-poleceń. Gdy wczytywany jest wiersz poleceń, jeśli ciąg znaków opcji "
"jest napotkany bez parametru wiersza polecenia następującego po nim, "
"wartość ``const`` będzie przyjęta zamiast tej. Zobacz opis nargs_ dla "
"przykładów."

msgid "The ``const`` keyword argument defaults to ``None``."
msgstr "Parametr słowa kluczowego ``const`` domyślnie równy jest ``None``."

msgid "default"
msgstr "domyślnie ( - z ang. - default)"

msgid "All optional arguments and some positional arguments may be omitted at the command-line.  The ``default`` keyword argument of :meth:`add_argument`, whose value defaults to ``None``, specifies what value should be used if the command-line arg is not present.  For optional arguments, the ``default`` value is used when the option string was not present at the command line::"
msgstr ""
"Wszystkie opcjonalne parametry i niektóre parametry pozycyjne mogą być "
"pominięte w wierszu-poleceń. Domyślny - z ang. - ``default`` parametr słowa "
"kluczowego dla sposobu postępowania :meth:`add_argument` którego wartość "
"domyślnie równa jest ``None``, określa która wartość powinna być użyta jeśli "
"parametr wiersza poleceń nie jest obecny. Dla opcjonalnych parametrów "
"wartość ``domyślna`` - z ang. - ``default`` jest używana gdy ciąg znaków "
"opcji nie był obecny w wierszu polecenia::"

msgid ">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--foo', default=42) >>> parser.parse_args('--foo 2'.split()) Namespace(foo='2') >>> parser.parse_args(''.split()) Namespace(foo=42)"
msgstr ""
">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--foo', "
"default=42) >>> parser.parse_args('--foo 2'.split()) Namespace(foo='2') >>> "
"parser.parse_args(''.split()) Namespace(foo=42)"

msgid "For positional arguments with nargs_ ``='?'`` or ``'*'``, the ``default`` value is used when no command-line arg was present::"
msgstr ""
"Dla pozycyjnych parametrów z nargs_ ``='?'`` lub ``'*'``, domyślna ( - z "
"ang. - ``default`` ) wartość jest używana gdy żadne parametry wiersza-"
"poleceń nie są obecne::"

msgid ">>> parser = argparse.ArgumentParser() >>> parser.add_argument('foo', nargs='?', default=42) >>> parser.parse_args('a'.split()) Namespace(foo='a') >>> parser.parse_args(''.split()) Namespace(foo=42)"
msgstr ""
">>> parser = argparse.ArgumentParser() >>> parser.add_argument('foo', "
"nargs='?', default=42) >>> parser.parse_args('a'.split()) Namespace(foo='a') "
">>> parser.parse_args(''.split()) Namespace(foo=42)"

msgid "Providing ``default=argparse.SUPPRESS`` causes no attribute to be added if the command-line argument was not present.::"
msgstr ""
"Dostarczenie ``default=argparse.SUPPRESS`` powoduje że żadna właściwość nie "
"będzie dodana jeśli parametr wiersza polecenia nie był obecny.::"

msgid ">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--foo', default=argparse.SUPPRESS) >>> parser.parse_args([]) Namespace() >>> parser.parse_args(['--foo', '1']) Namespace(foo='1')"
msgstr ""
">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--foo', "
"default=argparse.SUPPRESS) >>> parser.parse_args([]) Namespace() >>> "
"parser.parse_args(['--foo', '1']) Namespace(foo='1')"

msgid "type"
msgstr "typ"

msgid "By default, ArgumentParser objects read command-line args in as simple strings. However, quite often the command-line string should instead be interpreted as another type, like a :class:`float`, :class:`int` or :class:`file`.  The ``type`` keyword argument of :meth:`add_argument` allows any necessary type-checking and type-conversions to be performed.  Many common built-in types can be used directly as the value of the ``type`` argument::"
msgstr ""
"Domyślnie przedmioty ArgumentParser wczytują parametry wiersza-poleceń jako "
"proste ciągi znaków. Jednakże, całkiem często ciąg znaków wiersza-poleceń "
"powinien być interpretowany jako następny typ, jako :class:`float`, "
":class:`int` lub :class:`file`. parametr słowa kluczowego ``type`` sposobu "
"postępowania :meth:`add_argument` pozwala dowolnym koniecznym sprawdzeniom "
"typu i konwersjom typu aby były przeprowadzone. Wiele wspólnych wbudowanych "
"typów może być użyte bezpośrednio jako wartości parametru ``type``::"

msgid ">>> parser = argparse.ArgumentParser() >>> parser.add_argument('foo', type=int) >>> parser.add_argument('bar', type=file) >>> parser.parse_args('2 temp.txt'.split()) Namespace(bar=<open file 'temp.txt', mode 'r' at 0x...>, foo=2)"
msgstr ""
">>> parser = argparse.ArgumentParser() >>> parser.add_argument('foo', "
"type=int) >>> parser.add_argument('bar', type=file) >>> parser.parse_args('2 "
"temp.txt'.split()) Namespace(bar=<open file 'temp.txt', mode 'r' at 0x...>, "
"foo=2)"

msgid "To ease the use of various types of files, the argparse module provides the factory FileType which takes the ``mode=`` and ``bufsize=`` arguments of the ``file`` object.  For example, ``FileType('w')`` can be used to create a writable file::"
msgstr ""
"Aby ułatwić użycie różnych typów plików, moduł argparse dostarcza fabrykę "
"FileType która pobiera parametry ``mode=`` i ``bufsize=`` przedmiotu "
"``file``. Dla przykładu ``FileType('w')`` może być użyte do utworzenia "
"zapisywalnego pliku::"

msgid ">>> parser = argparse.ArgumentParser() >>> parser.add_argument('bar', type=argparse.FileType('w')) >>> parser.parse_args(['out.txt']) Namespace(bar=<open file 'out.txt', mode 'w' at 0x...>)"
msgstr ""
">>> parser = argparse.ArgumentParser() >>> parser.add_argument('bar', "
"type=argparse.FileType('w')) >>> parser.parse_args(['out.txt']) "
"Namespace(bar=<open file 'out.txt', mode 'w' at 0x...>)"

msgid "``type=`` can take any callable that takes a single string argument and returns the type-converted value::"
msgstr ""
"``type=`` może brać dowolną wywoływalną która pobiera pojedynczy parametr "
"ciągu znaków i zwraca zamienioną według typu wartość::"

msgid ">>> def perfect_square(string): ...     value = int(string) ...     sqrt = math.sqrt(value) ...     if sqrt != int(sqrt): ...         msg = \"%r is not a perfect square\" % string ...         raise argparse.ArgumentTypeError(msg) ...     return value ... >>> parser = argparse.ArgumentParser(prog='PROG') >>> parser.add_argument('foo', type=perfect_square) >>> parser.parse_args('9'.split()) Namespace(foo=9) >>> parser.parse_args('7'.split()) usage: PROG [-h] foo PROG: error: argument foo: '7' is not a perfect square"
msgstr ""
">>> def perfect_square(string): ...     value = int(string) ...     sqrt = "
"math.sqrt(value) ...     if sqrt != int(sqrt): ...         msg = \"%r nie "
"jest idealnym kwadratem\" % string ...         raise "
"argparse.ArgumentTypeError(msg) ...     return value ... >>> parser = "
"argparse.ArgumentParser(prog='PROG') >>> parser.add_argument('foo', "
"type=perfect_square) >>> parser.parse_args('9'.split()) Namespace(foo=9) >>> "
"parser.parse_args('7'.split()) użycie: PROG [-h] foo PROG: error: parametr "
"foo: '7' nie jest idealnym kwadratem"

msgid "The choices_ keyword argument may be more convenient for type checkers that simply check against a range of values::"
msgstr ""
"Parametr słowa kluczowego choices_ może być bardziej przydatny dla "
"sprawdzenia typu które po prostu sprawdzają z zakresem wartości::"

msgid ">>> parser = argparse.ArgumentParser(prog='PROG') >>> parser.add_argument('foo', type=int, choices=xrange(5, 10)) >>> parser.parse_args('7'.split()) Namespace(foo=7) >>> parser.parse_args('11'.split()) usage: PROG [-h] {5,6,7,8,9} PROG: error: argument foo: invalid choice: 11 (choose from 5, 6, 7, 8, 9)"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG') >>> "
"parser.add_argument('foo', type=int, choices=xrange(5, 10)) >>> "
"parser.parse_args('7'.split()) Namespace(foo=7) >>> "
"parser.parse_args('11'.split()) użycie: PRG [-h] {5,6,7,8,9} PROG: błąd: "
"parametr foo: niewłaściwy wybór: 11 (wybierz z 5, 6, 7, 8, 9)"

msgid "See the choices_ section for more details."
msgstr "Zobacz rozdział choices_ po więcej szczegółów."

msgid "choices"
msgstr "choices (- z ang. - wybory)"

msgid "Some command-line args should be selected from a restricted set of values. These can be handled by passing a container object as the ``choices`` keyword argument to :meth:`add_argument`.  When the command-line is parsed, arg values will be checked, and an error message will be displayed if the arg was not one of the acceptable values::"
msgstr ""
"Niektóre parametry wiersza-poleceń powinny być wybierane z ograniczonego "
"zbioru wartości. Takie parametry mogą być obsłużone przez przekazanie "
"przedmiotu kontenera jako parametr ``choices`` dla sposobu postępowania "
":meth:`add_argument`. Gdy wiersz poleceń jest wczytywany, wartości "
"parametrów zostaną sprawdzone, i wiadomość o błędzie będzie wyświetlona, "
"jeśli parametr nie był jedną z akceptowalnych wartości::"

msgid ">>> parser = argparse.ArgumentParser(prog='PROG') >>> parser.add_argument('foo', choices='abc') >>> parser.parse_args('c'.split()) Namespace(foo='c') >>> parser.parse_args('X'.split()) usage: PROG [-h] {a,b,c} PROG: error: argument foo: invalid choice: 'X' (choose from 'a', 'b', 'c')"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG') >>> "
"parser.add_argument('foo', choices='abc') >>> parser.parse_args('c'.split()) "
"Namespace(foo='c') >>> parser.parse_args('X'.split()) użycie: PROG [-h] "
"{a,b,c} PROG: błąd: parametr foo: niewłaściwy wybór: 'X' (wybierz z 'a', "
"'b', 'c')"

msgid "Note that inclusion in the ``choices`` container is checked after any type_ conversions have been performed, so the type of the objects in the ``choices`` container should match the type_ specified::"
msgstr ""
"Zauważ że zawarcie w pojemniku ``choices`` jest sprawdzane po tym jak "
"wszelkie konwersje typu - type_ - zostały wykonane, tak że typ przedmiotów w "
"pojemniku ``choices`` powinien odpowiadać określonemu typowi - type_::"

msgid ">>> parser = argparse.ArgumentParser(prog='PROG') >>> parser.add_argument('foo', type=complex, choices=[1, 1j]) >>> parser.parse_args('1j'.split()) Namespace(foo=1j) >>> parser.parse_args('-- -4'.split()) usage: PROG [-h] {1,1j} PROG: error: argument foo: invalid choice: (-4+0j) (choose from 1, 1j)"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG') >>> "
"parser.add_argument('foo', type=complex, choices=[1, 1j]) >>> "
"parser.parse_args('1j'.split()) Namespace(foo=1j) >>> parser.parse_args('-- "
"-4'.split()) usage: PROG [-h] {1,1j} PROG: błąd: parametr foo: niewłaściwy "
"wybór: (-4+0j) (wybierz z 1, 1j)"

msgid "Any object that supports the ``in`` operator can be passed as the ``choices`` value, so :class:`dict` objects, :class:`set` objects, custom containers, etc. are all supported."
msgstr ""
"Dowolne przedmioty które wspierają operator ``in`` mogą być przekazywane "
"jako wartość ``choices``, tak że przedmioty słownika - :class:`dict`, "
"przedmioty zbiorów - :class:`set` szczególne pojemniki, itd. są wszystkie "
"wspierane."

msgid "required"
msgstr "wymagane"

msgid "In general, the argparse module assumes that flags like ``-f`` and ``--bar`` indicate *optional* arguments, which can always be omitted at the command-line. To make an option *required*, ``True`` can be specified for the ``required=`` keyword argument to :meth:`add_argument`::"
msgstr ""
"Ogólnie, moduł argparse zakłada że flagi takie, jak ``-f`` i ``--bar`` "
"wskazują parametry *opcjonalne*, które zawsze mogą być pominięte w wierszu "
"polecenia. Aby uczynić opcję *wymaganą*, ``True`` może być określne dla "
"parametru słowa kluczowego ``required=`` dla sposobu postępowania "
":meth:`add_argument`::"

msgid ">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--foo', required=True) >>> parser.parse_args(['--foo', 'BAR']) Namespace(foo='BAR') >>> parser.parse_args([]) usage: argparse.py [-h] [--foo FOO] argparse.py: error: option --foo is required"
msgstr ""
">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--foo', "
"required=True) >>> parser.parse_args(['--foo', 'BAR']) Namespace(foo='BAR') "
">>> parser.parse_args([]) użycie: argparse.py [-h] [--foo FOO] argparse.py: "
"błąd: opcja --foo jest wymagana"

msgid "As the example shows, if an option is marked as ``required``, :meth:`parse_args` will report an error if that option is not present at the command line."
msgstr ""
"Jak pokazuje powyższy przykład, jeśli opcja jest oznaczona jako ``wymagana`` "
"( - z ang. - ``required``), sposób postępowania :meth:`parse_args` zgłosi "
"błąd jeśli ta opcja nie będzie obecna w wierszu polecenia."

msgid "Required options are generally considered bad form because users expect *options* to be *optional*, and thus they should be avoided when possible."
msgstr ""
"Opcje wymagane są zwykle uważane za niewłaściwą formę ponieważ użytkownicy "
"oczekują *opcji* aby były *opcjonalne*, więc ich konieczność powinna być "
"możliwe do uniknięcia gdy tylko jest to możliwe."

msgid "help"
msgstr "pomoc"

msgid "The ``help`` value is a string containing a brief description of the argument. When a user requests help (usually by using ``-h`` or ``--help`` at the command-line), these ``help`` descriptions will be displayed with each argument::"
msgstr ""
"wartość ``help`` jest ciągiem znaków zawierającym krótki opis parametrów. "
"Gdy użytkownik zażąda pomocy (zwykle przez użycie ``-h`` lub ``--help`` w "
"wierszu polecenia), te opisy ``pomocy`` będą wyświetlone z każdym "
"parametrem::"

msgid ">>> parser = argparse.ArgumentParser(prog='frobble') >>> parser.add_argument('--foo', action='store_true', ...         help='foo the bars before frobbling') >>> parser.add_argument('bar', nargs='+', ...         help='one of the bars to be frobbled') >>> parser.parse_args('-h'.split()) usage: frobble [-h] [--foo] bar [bar ...]  positional arguments:  bar     one of the bars to be frobbled  optional arguments:  -h, --help  show this help message and exit  --foo   foo the bars before frobbling"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='frobble') >>> "
"parser.add_argument('--foo', action='store_true', ...         help='zfufaj "
"bary przed frobblaniem') >>> parser.add_argument('bar', nargs='+', ... "
"        help='jeden z barów do zfrobblania') >>> "
"parser.parse_args('-h'.split()) użycie: frobble [-h] [--foo] bar [bar ...]  "
"pozycyjne parametry:  bar     jeden z barów do zfrobblania opcjonalne "
"parametry:  -h, --help  pokaż tą wiadomość pomocy i wyjdź  --foo   zfufaj "
"bary przed frobblaniem"

msgid "The ``help`` strings can include various format specifiers to avoid repetition of things like the program name or the argument default_.  The available specifiers include the program name, ``%(prog)s`` and most keyword arguments to :meth:`add_argument`, e.g. ``%(default)s``, ``%(type)s``, etc.::"
msgstr ""
"Ciągi znaków ``pomocy`` mogą zawierać różne określenia formatu aby uniknąć "
"powtórzeń rzeczy takich jak nazwa programu lub parametru domyślnego - z ang. "
"- default_. Dostępne określenia zawierają nazwę programu, ``%(prog)s`` i "
"większość parametrów słów kluczowych dla sposobu postępowania "
":meth:`add_argument`, np. ``%(default)s``, ``%(type)s``, itp.::"

msgid ">>> parser = argparse.ArgumentParser(prog='frobble') >>> parser.add_argument('bar', nargs='?', type=int, default=42, ...         help='the bar to %(prog)s (default: %(default)s)') >>> parser.print_help() usage: frobble [-h] [bar]  positional arguments:  bar     the bar to frobble (default: 42)  optional arguments:  -h, --help  show this help message and exit"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='frobble') >>> "
"parser.add_argument('bar', nargs='?', type=int, default=42, ...         "
"help='bar dla %(prog)s (domyślnie: %(default)s)') >>> parser.print_help() "
"użycie: frobble [-h] [bar]  pozycyjne parametry:  bar     bar dla frobble "
"(domyślnie: 42)  opcjonalne parametry:  -h, --help  pokaż tą wiadomość "
"pomocy i wyjdź"

msgid "metavar"
msgstr "metavar"

msgid "When :class:`ArgumentParser` generates help messages, it need some way to refer to each expected argument.  By default, ArgumentParser objects use the dest_ value as the \"name\" of each object.  By default, for positional argument actions, the dest_ value is used directly, and for optional argument actions, the dest_ value is uppercased.  So, a single positional argument with ``dest='bar'`` will that argument will be referred to as ``bar``. A single optional argument ``--foo`` that should be followed by a single command-line arg will be referred to as ``FOO``.  An example::"
msgstr ""
"Gdy uogólnienie :class:`ArgumentParser` generuje wiadomości pomocy, "
"potrzebuje pewnego sposobu aby odnieść się do każdego oczekiwanego "
"parametru. Domyślnie, przedmioty ArgumentParser używają wartości dest_ jako "
"\"nazwy\" każdego przedmiotu. Domyślnie, dla pozycyjnych akcji parametrów "
"wartość dest_ jest używana bezpośrednio, a dla akcji opcjonalnych "
"parametrów, wartość dest_ jest pisana z dużej litery. Więc, pojedynczy "
"pozycyjny parametr z ``dest='bar'```będzie określony jako ``bar``. "
"Pojedynczy opcjonalny parametr ``--foo`` po którym powinien wystąpić "
"pojedynczy parametr wiersza-poleceń będzie określany jako ``FOO``. Na "
"przykład::"

msgid ">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--foo') >>> parser.add_argument('bar') >>> parser.parse_args('X --foo Y'.split()) Namespace(bar='X', foo='Y') >>> parser.print_help() usage:  [-h] [--foo FOO] bar  positional arguments:  bar  optional arguments:  -h, --help  show this help message and exit  --foo FOO"
msgstr ""
">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--foo') >>> "
"parser.add_argument('bar') >>> parser.parse_args('X --foo Y'.split()) "
"Namespace(bar='X', foo='Y') >>> parser.print_help() użycie: [-h] [--foo FOO] "
"bar pozycyjne parametry: bar opcjonalne parametry: -h, --help pokaż tą "
"wiadomość pomocy i wyjdź --foo FOO"

msgid "An alternative name can be specified with ``metavar``::"
msgstr "Alternatywna nazwa może być określona za pomocą ``metavar``::"

msgid ">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--foo', metavar='YYY') >>> parser.add_argument('bar', metavar='XXX') >>> parser.parse_args('X --foo Y'.split()) Namespace(bar='X', foo='Y') >>> parser.print_help() usage:  [-h] [--foo YYY] XXX  positional arguments:  XXX  optional arguments:  -h, --help  show this help message and exit  --foo YYY"
msgstr ""
">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--foo', "
"metavar='YYY') >>> parser.add_argument('bar', metavar='XXX') >>> "
"parser.parse_args('X --foo Y'.split()) Namespace(bar='X', foo='Y') "
"parser.print_help() użycie: [-h] [--foo YYY] XXX pozycyjne parametry: XXX "
"opcjonalne parametry: -h, --help pokaż tą wiadomość pomocy i wyjdź --foo YYY"

msgid "Note that ``metavar`` only changes the *displayed* name - the name of the attribute on the :meth:`parse_args` object is still determined by the dest_ value."
msgstr ""
"Zauważ, że ``metavar`` tylko zmienia *wyświetlaną* nazwę - nazwa parametru "
"przedmiotu :meth:`parse_args` jest wciąż określana przez wartość dest_."

msgid "Different values of ``nargs`` may cause the metavar to be used multiple times. Providing a tuple to ``metavar`` specifies a different display for each of the arguments::"
msgstr ""
"Różne wartości ``nargs`` mogą spowodować że metavar będzie użyte "
"kilkakrotnie. Dostarczając krotkę do ``metavar`` określa inną wyświetlaną "
"nazwę dla każdego parametru::"

msgid ">>> parser = argparse.ArgumentParser(prog='PROG') >>> parser.add_argument('-x', nargs=2) >>> parser.add_argument('--foo', nargs=2, metavar=('bar', 'baz')) >>> parser.print_help() usage: PROG [-h] [-x X X] [--foo bar baz]  optional arguments:  -h, --help     show this help message and exit  -x X X  --foo bar baz"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG') >>> "
"parser.add_argument('-x', nargs=2) >>> parser.add_argument('--foo', nargs=2, "
"metavar=('bar', 'baz')) >>> parser.print_help() użycie: PROG [-h] [-x X X] "
"[--foo bar baz] opcjonalne parametry: -h, -help pokaż tą wiadomość pomocy i "
"wyjdź -x X X --foo bar baz"

msgid "dest"
msgstr "dest"

msgid "Most :class:`ArgumentParser` actions add some value as an attribute of the object returned by :meth:`parse_args`.  The name of this attribute is determined by the ``dest`` keyword argument of :meth:`add_argument`.  For positional argument actions, ``dest`` is normally supplied as the first argument to :meth:`add_argument`::"
msgstr ""
"Większość działań uogólnienia :class:`ArgumentParser` dodaj pewną wartość "
"jako właściwość przedmiotu zwracaną przez :meth:`parse_args`. Nazwa tej "
"właściwości jest określana przez parametr słowa kluczowego ``dest`` dla "
"sposobu postępowania :meth:`add_argument`. Dla działań parametrów "
"pozycyjnych, ``dest`` jest zwykle dostarczana jako pierwszy parametr dla "
"sposobu postępowania :meth:`add_argument`::"

msgid ">>> parser = argparse.ArgumentParser() >>> parser.add_argument('bar') >>> parser.parse_args('XXX'.split()) Namespace(bar='XXX')"
msgstr ""
">>> parser = argparse.ArgumentParser() >>> parser.add_argument('bar') >>> "
"parser.parse_args('XXX'.split()) Namespace(bar='XXX')"

msgid "For optional argument actions, the value of ``dest`` is normally inferred from the option strings.  :class:`ArgumentParser` generates the value of ``dest`` by taking the first long option string and stripping away the initial ``'--'`` string.  If no long option strings were supplied, ``dest`` will be derived from the first short option string by stripping the initial ``'-'`` character.  Any internal ``'-'`` characters will be converted to ``'_'`` characters to make sure the string is a valid attribute name.  The examples below illustrate this behavior::"
msgstr ""
"Dla opcjonalnych działań parametrów, wartość ``dest`` jest zwykle "
"wnioskowana z ciągów znaków opcji. Uogólnienie :class:`ArgumentParser` "
"generuje wartość ``dest`` przez wzięcie pierwszego długiego ciągu znaków "
"opcji i odcięciu początkowego ciągu znaków ``'--'``. Jeśli żadna długa opcja "
"nie została dostarczona, ``dest`` będzie pochodną pierwszego krótkiego "
"ciągu opcji przez obcięcie początkowego znaku ``'-'``. Dowolne wewnętrzne "
"znaki ``'-'`` będą zamienione na ``'_'`` aby zapewnić że ciąg znaków jest "
"poprawną nazwą właściwości. Przykłady poniżej ilustrują to zachowanie::"

msgid ">>> parser = argparse.ArgumentParser() >>> parser.add_argument('-f', '--foo-bar', '--foo') >>> parser.add_argument('-x', '-y') >>> parser.parse_args('-f 1 -x 2'.split()) Namespace(foo_bar='1', x='2') >>> parser.parse_args('--foo 1 -y 2'.split()) Namespace(foo_bar='1', x='2')"
msgstr ""
">>> parser = argparse.ArgumentParser() >>> parser.add_argument('-f', '--foo-"
"bar', '--foo') >>> parser.add_argument('-x', '-y') >>> parser.parse_args('-f "
"1 -x 2'.split()) Namespace(foo_bar='1', x='2') >>> parser.parse_args('--foo "
"1 -y 2'.split()) Namespace(foo_bar='1', x='2')"

msgid "``dest`` allows a custom attribute name to be provided::"
msgstr "``dest`` pozwala szczególnym nazwom właściwości aby były dostarczane::"

msgid ">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--foo', dest='bar') >>> parser.parse_args('--foo XXX'.split()) Namespace(bar='XXX')"
msgstr ""
">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--foo', "
"dest='bar') >>> parser.parse_args('--foo XXX'.split()) Namespace(bar='XXX')"

msgid "The parse_args() method"
msgstr "sposób postępowania parse_args()"

msgid "Convert argument strings to objects and assign them as attributes of the namespace.  Return the populated namespace."
msgstr ""
"Zamień ciągi znaków parametrów na przedmioty i przypisz je jako właściwości "
"przestrzeni nazw. Zwróć zapełnioną przestrzeń nazw."

msgid "Previous calls to :meth:`add_argument` determine exactly what objects are created and how they are assigned. See the documentation for :meth:`add_argument` for details."
msgstr ""
"Poprzednie wywołania :meth:`add_argument` określają dokładnie, które "
"przedmioty są tworzone i jak są one przypisywane. Zobacz dokumentację dla "
"sposobu postępowania :meth:`add_argument` dla szczegółów."

msgid "By default, the arg strings are taken from :data:`sys.argv`, and a new empty :class:`Namespace` object is created for the attributes."
msgstr ""
"Domyślnie ciągi znaków arg są brane z :data:`sys.argv`, i nowa pusta "
"przestrzeń nazw :class:`Namespace` jest tworzona dla właściwości."

msgid "Option value syntax"
msgstr "składnia wartości opcji"

msgid "The :meth:`parse_args` method supports several ways of specifying the value of an option (if it takes one).  In the simplest case, the option and its value are passed as two separate arguments::"
msgstr ""
"Sposób postępowania :meth:`parse_args` wspiera kilka sposobów określania "
"wartości opcji (jeśli pobiera ona jedną). W najprostszym przypadku, opcja i "
"jej wartość są przekazywane jako dwa oddzielne parametry::"

msgid ">>> parser = argparse.ArgumentParser(prog='PROG') >>> parser.add_argument('-x') >>> parser.add_argument('--foo') >>> parser.parse_args('-x X'.split()) Namespace(foo=None, x='X') >>> parser.parse_args('--foo FOO'.split()) Namespace(foo='FOO', x=None)"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG') >>> "
"parser.add_argument('-x') >>> parser.add_argument('--foo') >>> "
"parser.parse_args('-x X'.split()) Namespace(foo=None, x='X') >>> "
"parser.parse_args('--foo FOO'.split()) Namespace(foo='FOO', x=None)"

msgid "For long options (options with names longer than a single character), the option and value can also be passed as a single command line argument, using ``=`` to separate them::"
msgstr ""
"Dla opcji długich (opcji z nazwami dłuższymi niż pojedynczy znak), opcja i "
"wartość mogą także  być przekazane jako pojedynczy parametr wiersza "
"polecenia, używając ``=`` aby je rozdzielić::"

msgid ">>> parser.parse_args('--foo=FOO'.split()) Namespace(foo='FOO', x=None)"
msgstr ">>> parser.parse_args('--foo=FOO'.split()) Namespace(foo='FOO', x=None)"

msgid "For short options (options only one character long), the option and its value can be concatenated::"
msgstr ""
"Dla opcji krótkich (opcji o długości tylko pojedynczego znaku), opcja i jej "
"wartość mogą być połączone::"

msgid ">>> parser.parse_args('-xX'.split()) Namespace(foo=None, x='X')"
msgstr ">>> parser.parse_args('-xX'.split()) Namespace(foo=None, x='X')"

msgid "Several short options can be joined together, using only a single ``-`` prefix, as long as only the last option (or none of them) requires a value::"
msgstr ""
"kilka krótkich opcji może być połączone razem, używając tylko pojedynczego "
"znaku przedrostka ``-``, tak długo jak tylko ostatnia opcja (lub żadna z "
"nich) wymaga wartości::"

msgid ">>> parser = argparse.ArgumentParser(prog='PROG') >>> parser.add_argument('-x', action='store_true') >>> parser.add_argument('-y', action='store_true') >>> parser.add_argument('-z') >>> parser.parse_args('-xyzZ'.split()) Namespace(x=True, y=True, z='Z')"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG') >>> "
"parser.add_argument('-x', action='store_true') >>> parser.add_argument('-y', "
"action='store_true') >>> parser.add_argument('-z') >>> "
"parser.parse_args('-xyzZ'.split()) Namespace(x=True, y=True, z='Z')"

msgid "Invalid arguments"
msgstr "Nieważne parametry"

msgid "While parsing the command-line, ``parse_args`` checks for a variety of errors, including ambiguous options, invalid types, invalid options, wrong number of positional arguments, etc.  When it encounters such an error, it exits and prints the error along with a usage message::"
msgstr ""
"Podczas wczytywania wiersza polecenia, ``parse_args`` sprawdza różne błędy, "
"zawierające wieloznaczne opcje, nieważne typy, nieważne opcje, niewłaściwe "
"liczby parametrów pozycyjnych, itp. Gdy napotka ona taki błąd, wychodzi ona "
"i wypisuje błąd razem z wiadomością użycia::"

msgid ">>> parser = argparse.ArgumentParser(prog='PROG') >>> parser.add_argument('--foo', type=int) >>> parser.add_argument('bar', nargs='?')  >>> # invalid type >>> parser.parse_args(['--foo', 'spam']) usage: PROG [-h] [--foo FOO] [bar] PROG: error: argument --foo: invalid int value: 'spam'  >>> # invalid option >>> parser.parse_args(['--bar']) usage: PROG [-h] [--foo FOO] [bar] PROG: error: no such option: --bar  >>> # wrong number of arguments >>> parser.parse_args(['spam', 'badger']) usage: PROG [-h] [--foo FOO] [bar] PROG: error: extra arguments found: badger"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG') >>> parser.add_argument('"
"--foo', type=int) parser.add_argument('bar', nargs='?') >>> # niewłaściwy "
"typ >>> parser.parse_args('[--foo', 'spam']) użycie: PROG [-h] [--foo FOO] "
"[bar] PROG: error: argument --foo: niewłaściwa wartość całkowita: 'spam' >>> "
"# niewłaściwa opcja >>> parser.parse_args(['--bar']) użycie: PROG [-h] "
"[--foo FOO] [bar] PROG: błąd: brak takiej opcji: --bar >>> # nieprawidłowa "
"liczba argumentów >>> parser.parse_args(['spam', 'borsuk']) użycie: PROG "
"[-h] [--foo FOO] [bar] PROG: błąd: nadmiarowe parametry napotkane: borsuk"

msgid "Arguments containing ``\"-\"``"
msgstr "Parametry zawierające ``\"-\"``"

msgid "The ``parse_args`` method attempts to give errors whenever the user has clearly made a mistake, but some situations are inherently ambiguous.  For example, the command-line arg ``'-1'`` could either be an attempt to specify an option or an attempt to provide a positional argument.  The ``parse_args`` method is cautious here: positional arguments may only begin with ``'-'`` if they look like negative numbers and there are no options in the parser that look like negative numbers::"
msgstr ""
"Sposób postępowania ``parse_args`` próbuje dawać błędy za każdym razem gdy "
"użytkownik w jasny sposób się pomylił, ale niektóre sytuacje są samoistnie "
"wieloznaczne. Dla przykładu, parametr wiersza-poleceń ``'-1'`` może być albo "
"próbą określenia opcji lub próbą dostarczenia parametru pozycyjnego. Sposób "
"postępowania ``parse_args`` jest ostrożny tutaj: pozycyjne parametry mogą "
"zaczynać się tylko od ``'-'`` jeśli wyglądają jak liczby ujemne i nie ma "
"opcji w czytniku która wyglądałaby jak liczba ujemna::"

msgid ">>> parser = argparse.ArgumentParser(prog='PROG') >>> parser.add_argument('-x') >>> parser.add_argument('foo', nargs='?')  >>> # no negative number options, so -1 is a positional argument >>> parser.parse_args(['-x', '-1']) Namespace(foo=None, x='-1')  >>> # no negative number options, so -1 and -5 are positional arguments >>> parser.parse_args(['-x', '-1', '-5']) Namespace(foo='-5', x='-1')  >>> parser = argparse.ArgumentParser(prog='PROG') >>> parser.add_argument('-1', dest='one') >>> parser.add_argument('foo', nargs='?')  >>> # negative number options present, so -1 is an option >>> parser.parse_args(['-1', 'X']) Namespace(foo=None, one='X')  >>> # negative number options present, so -2 is an option >>> parser.parse_args(['-2']) usage: PROG [-h] [-1 ONE] [foo] PROG: error: no such option: -2  >>> # negative number options present, so both -1s are options >>> parser.parse_args(['-1', '-1']) usage: PROG [-h] [-1 ONE] [foo] PROG: error: argument -1: expected one argument"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG') >>> "
"parser.add_argument('-x') >>> parser.add_argument('foo', nargs='?') >>> # "
"brak opcji liczb ujemnych, więc -1 jest pozycyjnym parametrem >>> "
"parser.parse_args(['-x', '-1'] Namespace(foo=None, x='-1') >>> # brak opcji "
"liczb ujemnych, więc -1 i -5 są parametrami pozycyjnymi >>> "
"parser.parse_args(['-x', '-1', '-5']) Namespace(foo='-5', x='-1') >>> parser "
"= argparse.ArgumentParser(prog='PROG') >>> parser.add_argument('-1', "
"dest='one') >>> parser.add_argument('foo', nargs='?') >>> # opcje ujemnych "
"liczb obecne, więc -1 jest opcją >>> parser.parse_args(['-1', 'X']) "
"Namespace(foo=None, one='X') >>> # obecne opcje liczb ujemnych wiec -2 jest "
"opcją >>> parser.parse_args['-2']) użycie: PROG [-h] [-1 ONE] [foo] PROG: "
"błąd: brak takiej opcji: -2 >>> # opcje liczb ujemnych obecne, więc oba "
"zapisy -1 są opcjami >>> parser. parse_args(['-1', '-1']) użycie: PROG [-h] "
"[-1 ONE] [foo] PROG: błąd: parametr -1: oczekiwano pojedynczego parametru"

msgid "If you have positional arguments that must begin with ``'-'`` and don't look like negative numbers, you can insert the pseudo-argument ``'--'`` which tells ``parse_args`` that everything after that is a positional argument::"
msgstr ""
"Jeśli masz pozycyjne parametry które muszą zaczynać się od ``'-'`` i nie "
"wyglądają jak liczby ujemne, możesz wstawić pseudo parametr ``'--'`` który "
"mówi ``parse_args``, że wszystko potem jest parametrem pozycyjnym::"

msgid ">>> parser.parse_args(['--', '-f']) Namespace(foo='-f', one=None)"
msgstr ">>> parser.parse_args(['--', '-f']) Namespace(foo='-f', one=None)"

msgid "Argument abbreviations"
msgstr "Skróty parametrów"

msgid "The :meth:`parse_args` method allows long options to be abbreviated if the abbreviation is unambiguous::"
msgstr ""
"Sposób postępowania :meth:`parse_args` pozwala na skracanie długich opcji "
"jeśli skrót nie jest wieloznaczny::"

msgid ">>> parser = argparse.ArgumentParser(prog='PROG') >>> parser.add_argument('-bacon') >>> parser.add_argument('-badger') >>> parser.parse_args('-bac MMM'.split()) Namespace(bacon='MMM', badger=None) >>> parser.parse_args('-bad WOOD'.split()) Namespace(bacon=None, badger='WOOD') >>> parser.parse_args('-ba BA'.split()) usage: PROG [-h] [-bacon BACON] [-badger BADGER] PROG: error: ambiguous option: -ba could match -badger, -bacon"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG') >>> "
"parser.add_argument('-bolak') >>> parser.add_argument('-borsuk') >>> "
"parser.parse_args('-bol MMM'.split()) Namespace(bolak='MMM', borsuk=None) "
">>> parser.parse_args('-bor DRZEWO'.split()) Namespace(bolak=None, "
"borsuk='DRZEWO') >>> parser.parse_args('-bo BO'.split()) użycie:PROG [-h] "
"[-bolak BOLAK] [-borsuk BORSUK] PROG: błąd: wieloznaczna opcja -bo może "
"pasować do borsuka i bolaka  "

msgid "An error is produced for arguments that could produce more than one options."
msgstr ""
"Błąd jest tworzony dla parametrów które mogłyby stworzyć więcej niż jedną "
"opcję."

msgid "Beyond ``sys.argv``"
msgstr "Poza ``sys.argv``"

msgid "Sometimes it may be useful to have an ArgumentParser parse args other than those of :data:`sys.argv`.  This can be accomplished by passing a list of strings to ``parse_args``.  This is useful for testing at the interactive prompt::"
msgstr ""
"Czasami może być użyteczne wczytanie parametrów przez uogólnienie "
"ArgumentParser innych niż te z :data:`sys.argv`. To można osiągnąć przez "
"przekazanie listy ciągów znaków dla ``parse_args``. To jest użyteczne dla "
"testowania współdziałającego wiersza zapytań::"

msgid ">>> parser = argparse.ArgumentParser() >>> parser.add_argument( ...     'integers', metavar='int', type=int, choices=xrange(10), ...  nargs='+', help='an integer in the range 0..9') >>> parser.add_argument( ...     '--sum', dest='accumulate', action='store_const', const=sum, ...   default=max, help='sum the integers (default: find the max)') >>> parser.parse_args(['1', '2', '3', '4']) Namespace(accumulate=<built-in function max>, integers=[1, 2, 3, 4]) >>> parser.parse_args('1 2 3 4 --sum'.split()) Namespace(accumulate=<built-in function sum>, integers=[1, 2, 3, 4])"
msgstr ""
">>> parser = argparse.ArgumentParser() >>> parser.add_argument( ... "
"'integers', metavar='int', type=int, choices=xrange(10), ... nargs='+', "
"help='liczba całkowita z przedziału 0..9') >>> parser.add_argument( ... '--"
"sum', dest='accumulate', action='store_const', const=sum, ... default=max, "
"help='suma liczb całkowitych (domyślnie: znajdź maksimum)') >>> "
"parser.parse_args(['1', '2', '3', '4']) Namespace(accumulate=<zadanie "
"wbudowane max>, integers=[1, 2, 3, 4]) >>> parser.parse_args('1 2 3 4 "
"--sum'.split()) Namespace(accumulate=<zadanie wbudowane sum>, integers=[1, "
"2, 3, 4])"

msgid "Custom namespaces"
msgstr "Szczególne przestrzenie nazw"

msgid "It may also be useful to have an :class:`ArgumentParser` assign attributes to an already existing object, rather than the newly-created :class:`Namespace` object that is normally used.  This can be achieved by specifying the ``namespace=`` keyword argument::"
msgstr ""
"To może być także użyteczne, aby uogólnienie :class:`ArgumentParser` "
"przypisało właściwości do już istniejącego przedmiotu, zamiast do nowo-"
"tworzonego przedmiotu :class:`Namespace`. To można osiągnąć przez użycie "
"parametru słowa kluczowego ``namespace=``::"

msgid ">>> class C(object): ...     pass ... >>> c = C() >>> parser = argparse.ArgumentParser() >>> parser.add_argument('--foo') >>> parser.parse_args(args=['--foo', 'BAR'], namespace=c) >>> c.foo 'BAR'"
msgstr ""
">>> class C(object): ... pass ... >>> c = C() >>> parser = "
"argparse.ArgumentParser() >>> parser.add_argument('--foo') >>> "
"parser.parse_args(args=['--foo', 'BAR'], namespace=c) >>> c.foo 'BAR'"

msgid "Other utilities"
msgstr "Inne użytki"

msgid "Sub-commands"
msgstr "podrzędne polecenia"

msgid "Many programs split up their functionality into a number of sub-commands, for example, the ``svn`` program can invoke sub-commands like ``svn checkout``, ``svn update``, and ``svn commit``.  Splitting up functionality this way can be a particularly good idea when a program performs several different functions which require different kinds of command-line arguments. :class:`ArgumentParser` supports the creation of such sub-commands with the :meth:`add_subparsers` method.  The :meth:`add_subparsers` method is normally called with no arguments and returns an special action object.  This object has a single method, ``add_parser``, which takes a command name and any :class:`ArgumentParser` constructor arguments, and returns an :class:`ArgumentParser` object that can be modified as usual."
msgstr ""
"Wiele programów dzieli swoje możliwości działania na pewną liczbę "
"podrzędnych poleceń, na przykład program svn może wywoływać podrzędne "
"polecenia takie jak ``svn checkout``, ``svn update``, i ``svn commit``. "
"Dzielenie możliwości działania w ten sposób może być szczególnie dobrym "
"pomysłem gdy program wykonuje kilka różnych działań które wymagają różnego "
"rodzaju parametrów wiersza-poleceń. Uogólnienie :class:`ArgumentParser` "
"wspiera tworzenie takich podrzędnych poleceń za pomocą sposobu postępowania "
":meth:`add_subparsers. Sposób postępowania :meth:`add_subparsers` jest "
"zwykle wywoływany bez parametrów i zwraca szczególny przedmiot działania. "
"Ten przedmiot ma pojedynczy sposób postępowania, ``add_parser``, który "
"pobiera nazwę polecenia i dowolne parametry konstruktora, i zwraca przedmiot "
":class:`ArgumentParser`, który może być modyfikowany w znane sposoby."

msgid "Some example usage::"
msgstr "Pewne przykładowe użycie::"

msgid ">>> # create the top-level parser >>> parser = argparse.ArgumentParser(prog='PROG') >>> parser.add_argument('--foo', action='store_true', help='foo help') >>> subparsers = parser.add_subparsers(help='sub-command help') >>> >>> # create the parser for the \"a\" command >>> parser_a = subparsers.add_parser('a', help='a help') >>> parser_a.add_argument('bar', type=int, help='bar help') >>> >>> # create the parser for the \"b\" command >>> parser_b = subparsers.add_parser('b', help='b help') >>> parser_b.add_argument('--baz', choices='XYZ', help='baz help') >>> >>> # parse some arg lists >>> parser.parse_args(['a', '12']) Namespace(bar=12, foo=False) >>> parser.parse_args(['--foo', 'b', '--baz', 'Z']) Namespace(baz='Z', foo=True)"
msgstr ""
">>> # stwórz nadrzędnego poziomu czytnik >>> parser = "
"argparse.ArgumentParser(prog='PROG') >>> parser.add_argument('--foo', "
"action='store_true', help='pomoc foo') >>> subparsers = "
"parser.add_subparsers(help='pomoc podrzędnego polecenia') >>> >>> # utwórz "
"czytnik dla polecenia \"a\" >>> parser_a = subparsers.add_parser('a', "
"help='pomoc a') >>> parser_a.add_argument('bar', type=int, help='pomoc bar') "
">>> >>> # utwórz czytnik dla polecenia \"b\" >>> parser_b = "
"subparsers.add_parser('b', help='pomoc b') >>> parser_b.add_argument('--"
"baz', choices='XYZ', help='pomoc baz') >>> >>> # wczytaj pewne listy "
"parametrów >>> parser.parse_args(['a', '12']) Namespace(bar=12, foo=False) "
">>> parser.parse_args(['--foo', 'b', '--baz', 'Z']) Namespace(baz='Z', "
"foo=True)"

msgid "Note that the object returned by :meth:`parse_args` will only contain attributes for the main parser and the subparser that was selected by the command line (and not any other subparsers).  So in the example above, when the ``\"a\"`` command is specified, only the ``foo`` and ``bar`` attributes are present, and when the ``\"b\"`` command is specified, only the ``foo`` and ``baz`` attributes are present."
msgstr ""
"Zauważ że przedmiot zwracany przez sposób postępowania :meth:`parse_args` "
"będzie zawierał tylko właściwości dla głównego czytnika i podrzędnego "
"czytnika, który został wybrany przez wiersz polecenia (i żadne inne "
"podrzędne czytniki). Więc w powyższym przykładzie gdy polecenie ``\"a\"`` jest "
"określane, tylko właściwości ``foo`` i ``bar`` są obecne, i gdy polecenie "
"``\"b\"`` jest określane, tylko właściwości ``foo`` i ``baz`` są obecne."

msgid "Similarly, when a help message is requested from a subparser, only the help for that particular parser will be printed.  The help message will not include parent parser or sibling parser messages.  (A help message for each subparser command, however, can be given by supplying the ``help=`` argument to ``add_parser`` as above.)"
msgstr ""
"Podobnie, gdy wiadomość pomocy jest oczekiwana od podrzędnego czytnika, "
"tylko pomoc dla tego konkretnego czytnika będzie wypisana. Wiadomość pomocy "
"nie będzie zawierała czytnika nadrzędnego ani wiadomości siostrzanych "
"czytników. (Wiadomość pomocy dla każdego polecenia podrzędnego czytnika, "
"może być podana przez dostarczenie parametru ``help=`` dla ``add_parser`` "
"jak powyżej.)"

msgid ">>> parser.parse_args(['--help']) usage: PROG [-h] [--foo] {a,b} ...  positional arguments:   {a,b}   sub-command help a     a help b     b help  optional arguments:   -h, --help  show this help message and exit   --foo   foo help  >>> parser.parse_args(['a', '--help']) usage: PROG a [-h] bar  positional arguments:   bar     bar help  optional arguments:   -h, --help  show this help message and exit  >>> parser.parse_args(['b', '--help']) usage: PROG b [-h] [--baz {X,Y,Z}]  optional arguments:   -h, --help     show this help message and exit   --baz {X,Y,Z}  baz help"
msgstr ""
">>> parser.parse_args(['--help']) użycie: PROG [-h] [--foo] {a,b} ... "
"pozycyjne parametry: {a,b} pomoc podrzędnych poleceń a a pomoc b b pomoc "
"opcjonalne parametry: -h, --help pokaż tą wiadomość pomocy i wyjdź --foo "
"pomoc foo >>> parser.parse_args(['a', '--help']) użycie: PROG a [-h] bar "
"pozycyjne parametry: -h, --help pokaż tą wiadomość pomocy i wyjdź >>> "
"parser.parse_args(['b', '--help']) użycie: PROG b [-h] [--baz {X,Y,Z}] "
"opcjonalne parametry: -h --help pokaż tą wiadomość pomocy i wyjdź --baz "
"{X,Y,Z} pomoc baz "

msgid "The :meth:`add_subparsers` method also supports ``title`` and ``description`` keyword arguments.  When either is present, the subparser's commands will appear in their own group in the help output.  For example::"
msgstr ""
"Sposób postępowania :meth:`add_subparsers` także wspiera parametry słów "
"kluczowych ``tytuł`` i ``opis`` - z ang - ``title`` i ``description``. Gdy "
"którykolwiek z nich jest obecny, podrzędne polecenia będą pojawiały się w "
"swoich własnych grupach w wyjściu produkowanym przez pomoc. Dla przykładu::"

msgid ">>> parser = argparse.ArgumentParser() >>> subparsers = parser.add_subparsers(title='subcommands', ...                                    description='valid subcommands', ...                                    help='additional help') >>> subparsers.add_parser('foo') >>> subparsers.add_parser('bar') >>> parser.parse_args(['-h']) usage:  [-h] {foo,bar} ...  optional arguments:   -h, --help  show this help message and exit  subcommands:   valid subcommands    {foo,bar}   additional help"
msgstr ""
">>> parser = argparse.ArgumentParser() >>> subparsers = "
"parser.add_subparsers(title='podrzędne polecenia', ... description='poprawne "
"podrzędne polecenia', ... help='dodatkowa pomoc') >>> "
"subparsers.add_parser('foo') >>> subparsers.add_parser('bar') >>> "
"parser.parse_args(['-h']) użycie: [-h] {foo,bar} ... opcjonalne parametry: "
"-h --help pokaż tą wiadomość pomocy i wyjdź podrzędne polecenia: poprawne "
"podrzędne polecenia {foo,bar} dodatkowa pomoc"

msgid "One particularly effective way of handling sub-commands is to combine the use of the :meth:`add_subparsers` method with calls to :meth:`set_defaults` so that each subparser knows which Python function it should execute.  For example::"
msgstr ""
"Jednym ze szczególnie efektywnych sposobów obsługi podrzędnych poleceń jest "
"połączenie użycia :meth:`add_subparsers` z wywołaniami :meth:`set_defaults` "
"tak że każdy podrzędny czytnik wie które zadanie powinien wykonywać. Dla "
"przykładu::"

msgid ">>> # sub-command functions >>> def foo(args): ...     print(args.x * args.y) ... >>> def bar(args): ...     print('((%s))' % args.z) ... >>> # create the top-level parser >>> parser = argparse.ArgumentParser() >>> subparsers = parser.add_subparsers() >>> >>> # create the parser for the \"foo\" command >>> parser_foo = subparsers.add_parser('foo') >>> parser_foo.add_argument('-x', type=int, default=1) >>> parser_foo.add_argument('y', type=float) >>> parser_foo.set_defaults(func=foo) >>> >>> # create the parser for the \"bar\" command >>> parser_bar = subparsers.add_parser('bar') >>> parser_bar.add_argument('z') >>> parser_bar.set_defaults(func=bar) >>> >>> # parse the args and call whatever function was selected >>> args = parser.parse_args('foo 1 -x 2'.split()) >>> args.func(args) 2.0 >>> >>> # parse the args and call whatever function was selected >>> args = parser.parse_args('bar XYZYX'.split()) >>> args.func(args) ((XYZYX))"
msgstr ""
">>> # podrzędne zadania >>> def foo(args): ... print(args.x * args.y) ... "
">>> def bar(args): ... print('((%s))' % args.z) ... >>> #utwórz nadrzędnego "
"poziomu czytnik >>> parser = argparse.ArgumentParser() >>> subparsers = "
"parser.add_subparsers() >>> # utwórz czytnik dla polecenia \"foo\" >>> "
"parser_foo = subparsers.add_parser('foo') >>> parser_foo.add_argument('-x', "
"type=int, default=1) >>> parser_foo.add_argument('y', type=float) >>> "
"parser_foo.set_defaults(func=foo) >>> >>> # utwórz czytnik dla polecenia "
"\"bar\" >>> parser_bar = subparsers.add_parser('bar') >>> "
"parser_bar.add_argument('z') >>> parser_bar.set_defaults(func=bar) >>> >>> # "
"wczytaj parametry i wywołaj to zadanie które zostało wybrane >>> args = "
"parser.parse_args('foo 1 -x 2'.split()) >>> args.func(args) 2.0 >>> >>> # "
"wczytaj parametry i wywołaj dowolne zadanie które zostało wybrane >>> args = "
"parser.parse_args('bar XYZYX'.split()) >>> args.func(args) ((XYZYX))"

msgid "This way, you can let :meth:`parse_args` does the job of calling the appropriate function after argument parsing is complete.  Associating functions with actions like this is typically the easiest way to handle the different actions for each of your subparsers.  However, if it is necessary to check the name of the subparser that was invoked, the ``dest`` keyword argument to the :meth:`add_subparsers` call will work::"
msgstr ""
"Tym sposobem możesz pozwolić aby sposób postępowania :meth:`parse_args` "
"wykona pracę wywołania odpowiedniego zadania po dokończeniu wczytywania "
"parametrów. Połączenie zadań z działaniami w ten sposób jest typowo "
"najłatwiejszym sposobem aby obsłużyć różne działania każdego z podrzędnych "
"czynników. Jednakże, jeśli jest konieczne sprawdzenie nazwy podrzędnego "
"czytnika który został wywołany, parametr słowa kluczowego ``dest`` dla "
"wywołania sposobu postępowania :meth:`add_subparsers` będzie działał::"

msgid ">>> parser = argparse.ArgumentParser() >>> subparsers = parser.add_subparsers(dest='subparser_name') >>> subparser1 = subparsers.add_parser('1') >>> subparser1.add_argument('-x') >>> subparser2 = subparsers.add_parser('2') >>> subparser2.add_argument('y') >>> parser.parse_args(['2', 'frobble']) Namespace(subparser_name='2', y='frobble')"
msgstr ""
">>> parser = argparse.ArgumentParser() >>> subparsers = "
"parser.add_subparsers(dest='subparser_name') >>> subparser1 = "
"subparsers.add_parser('1') >>> subparser1.add_argument('-x') >>> subparser2 "
"= subparsers.add_parser('2') >>> subparser2.add_argument('y') >>> "
"parser.parse_args(['2', 'frobble']) Namespace(subparser_name='2', "
"y='frobble')"

msgid "FileType objects"
msgstr "przedmioty FileType"

msgid "The :class:`FileType` factory creates objects that can be passed to the type argument of :meth:`ArgumentParser.add_argument`.  Arguments that have :class:`FileType` objects as their type will open command-line args as files with the requested modes and buffer sizes:"
msgstr ""
"Fabryka :class:`FileType` tworzy przedmioty które mogą być przekazywane dla "
"typu parametru sposobu postępowania :meth:`ArgumentParser.add_argument`. "
"Parametry które mają przedmioty uogólnienia :class:`FileType` jako ich typ "
"otwierają parametry wiersza-polecenia jako pliki z żądanymi trybami i "
"rozmiarami przestrzeni wymiany:"

msgid ">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--output', type=argparse.FileType('wb', 0)) >>> parser.parse_args(['--output', 'out']) Namespace(output=<open file 'out', mode 'wb' at 0x...>)"
msgstr ""
">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--output', "
"type=argparse.FileType('wb', 0)) >>> parser.parse_args(['--output', 'out']) "
"Namespace(output=<otwarty plik 'out', tryb 'wb' w 0x...>)"

msgid "FileType objects understand the pseudo-argument ``'-'`` and automatically convert this into ``sys.stdin`` for readable :class:`FileType` objects and ``sys.stdout`` for writable :class:`FileType` objects:"
msgstr ""
"Przedmioty FileType rozróżniają pseudo-parametr ``'-'`` i automatycznie "
"zamieniają go w ``sys.stdin`` dla czytelnych przedmiotów :class:`FileType` i "
"``sys.stdout`` dla możliwych do zapisania przedmiotów :class:`FileType`:"

msgid ">>> parser = argparse.ArgumentParser() >>> parser.add_argument('infile', type=argparse.FileType('r')) >>> parser.parse_args(['-']) Namespace(infile=<open file '<stdin>', mode 'r' at 0x...>)"
msgstr ""
">>> parser = argparse.ArgumentParser() >>> parser.add_argument('infile', "
"type=argparse.FileType('r')) >>> parser.parse_args(['-']) "
"Namespace(infile=<open file '<stdin>', mode 'r' at 0x...>)"

msgid "Argument groups"
msgstr "Grupy parametrów"

msgid "By default, :class:`ArgumentParser` groups command-line arguments into \"positional arguments\" and \"optional arguments\" when displaying help messages. When there is a better conceptual grouping of arguments than this default one, appropriate groups can be created using the :meth:`add_argument_group` method::"
msgstr ""
"Domyślnie uogólnienie :class:`ArgumentParser` grupuje parametry wiersza-"
"polecenia w \"parametry pozycyjne\" i \"parametry opcjonalne\" podczas "
"wyświetlania wiadomości pomocy. Gdy istnieje lepszy koncept zgrupowania "
"parametrów niż ten domyślny, właściwe grupy mogą być tworzone przy użyciu "
"sposobu postępowania :meth:`add_argument_group`::"

msgid ">>> parser = argparse.ArgumentParser(prog='PROG', add_help=False) >>> group = parser.add_argument_group('group') >>> group.add_argument('--foo', help='foo help') >>> group.add_argument('bar', help='bar help') >>> parser.print_help() usage: PROG [--foo FOO] bar  group:   bar    bar help   --foo FOO  foo help"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG', add_help=False) >>> grupa "
"= parser.add_argument_group('grupa') >>> group.add_argument('--foo', "
"help='foo help') >>> group.add_argument('bar', help='bar help') >>> "
"parser.print_help() użycie: PROG [--foo FOO] bar  grupa:   bar    pomoc bar "
"   --foo FOO  foo help"

msgid "The :meth:`add_argument_group` method returns an argument group object which has an :meth:`~ArgumentParser.add_argument` method just like a regular :class:`ArgumentParser`.  When an argument is added to the group, the parser treats it just like a normal argument, but displays the argument in a separate group for help messages.  The :meth:`add_argument_group` method accepts ``title`` and ``description`` arguments which can be used to customize this display::"
msgstr ""
"Sposób postępowania :meth:`add_argument_group` zwraca przedmiot grupy "
"parametrów, który ma sposób postępowania "
":meth:`~ArgumentParser.add_argument` tak jak zwykłe uogólnienie "
":class:`ArgumentParser`. Gdy parametr jest dodawany do grupy czytnik "
"traktuje go jak zwykły parametr, ale wyświetla parametr w oddzielnej grupie "
"dla wiadomości pomocy. Sposób postępowania :meth:`add_argument_group` "
"akceptuje parametry ``title i ``description`` - z ang. - ``tytuł`` i "
"``opis``, które mogą być użyte do dostosowania wyświetlania::"

msgid ">>> parser = argparse.ArgumentParser(prog='PROG', add_help=False) >>> group1 = parser.add_argument_group('group1', 'group1 description') >>> group1.add_argument('foo', help='foo help') >>> group2 = parser.add_argument_group('group2', 'group2 description') >>> group2.add_argument('--bar', help='bar help') >>> parser.print_help() usage: PROG [--bar BAR] foo  group1:   group1 description    foo    foo help  group2:   group2 description    --bar BAR  bar help"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG', add_help=False) >>> group1 "
"= parser.add_argument_group('group1', 'opis group1') >>> "
"group1.add_argument('foo', help='pomoc foo') >>> group2 = "
"parser.add_argument_group('group2', 'opis group2') >>> group2.add_argument('"
"--bar', help='pomoc bar') >>> parser.print_help() użycie: PROG [--bar BAR] "
"foo  group1:   opis group1    foo    pomoc foo  group2:   opis group2    "
"--bar BAR  pomoc bar"

msgid "Note that any arguments not your user defined groups will end up back in the usual \"positional arguments\" and \"optional arguments\" sections."
msgstr ""
"Zauważ że wszelkie parametry nie w twoich zdefiniowanych grupach skończą z "
"powrotem w dotychczasowych sekcjach \"parametrów pozycyjnych\" i \"parametrach "
"opcjonalnych\"."

msgid "Mutual exclusion"
msgstr "Wzajemne wykluczenia"

msgid "Create a mutually exclusive group. argparse will make sure that only one of the arguments in the mutually exclusive group was present on the command line::"
msgstr ""
"Stwórz wzajemnie wykluczającą się grupę. argparse będzie pilnował żeby tylko "
"pojedynczy parametr we wzajemnie wykluczających się grupach był obecny w "
"wierszu poleceń::"

msgid ">>> parser = argparse.ArgumentParser(prog='PROG') >>> group = parser.add_mutually_exclusive_group() >>> group.add_argument('--foo', action='store_true') >>> group.add_argument('--bar', action='store_false') >>> parser.parse_args(['--foo']) Namespace(bar=True, foo=True) >>> parser.parse_args(['--bar']) Namespace(bar=False, foo=False) >>> parser.parse_args(['--foo', '--bar']) usage: PROG [-h] [--foo | --bar] PROG: error: argument --bar: not allowed with argument --foo"
msgstr ""
">>> parser  = argparse.ArgumentParser(prog='PROG') >>> group = "
"parser.add_mutually_exclusive_group() >>> group.add_argument('--foo', "
"action='store_true') >>> group.add_argument('--bar', action='store_false') "
">>> parser.parse_args(['--foo']) Namespace(bar=True, foo=True) >>> "
"parser.parse_args(['--bar']) Namespace(bar=False, foo=False) >>> "
"parser.parse_args(['--foo', '--bar']) użycie: PROG [-h] [--foo | --bar] "
"PROG: błąd: parametr --bar: nie dozwolony z parametrem --foo"

msgid "The :meth:`add_mutually_exclusive_group` method also accepts a ``required`` argument, to indicate that at least one of the mutually exclusive arguments is required::"
msgstr ""
"Sposób postępowania :meth:`add_mutually_exclusive_group` przyjmuje także "
"parametr ``wymagane`` - z ang. - ``required``, aby wskazać że co najmniej "
"jeden z wzajemnie wykluczających się parametrów jest wymagany::"

msgid ">>> parser = argparse.ArgumentParser(prog='PROG') >>> group = parser.add_mutually_exclusive_group(required=True) >>> group.add_argument('--foo', action='store_true') >>> group.add_argument('--bar', action='store_false') >>> parser.parse_args([]) usage: PROG [-h] (--foo | --bar) PROG: error: one of the arguments --foo --bar is required"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG') >>> group = "
"parser.add_mutually_exclusive_group(required=True) >>> group.add_argument('"
"--foo', action='store_true') >>> group.add_argument('--bar', "
"action='store_false') >>> parser.parse_args([]) użycie: PROG [-h] (--foo | "
"--bar) PROG: błąd: jeden z parametrów --foo --bar jest wymagany"

msgid "Note that currently mutually exclusive argument groups do not support the ``title`` and ``description`` arguments of :meth:`add_argument_group`."
msgstr ""
"Zauważ że obecnie wzajemnie wykluczające się grupy parametrów nie wspierają "
"parametrów ``tytułu`` i ``opisu`` - z ang. - ``title`` i ``description`` dla "
"sposobu postępowania :meth:`add_argument_group`."

msgid "Parser defaults"
msgstr "Domyślne czytnika"

msgid "Most of the time, the attributes of the object returned by :meth:`parse_args` will be fully determined by inspecting the command-line args and the argument actions.  :meth:`ArgumentParser.set_defaults` allows some additional attributes that are determined without any inspection of the command-line to be added::"
msgstr ""
"W większości przypadków, właściwości przedmiotów zwracanych przez "
":meth:`parse_args` w pełni są określone przez sprawdzenie parametrów wiersza "
"poleceń i akcji parametrów. Sposób postępowania "
":meth:`ArgumentParser.set_defaults` pozwala na dodanie pewnych dodatkowych "
"właściwości określanych bez żadnego sprawdzenia wiersza poleceń::"

msgid ">>> parser = argparse.ArgumentParser() >>> parser.add_argument('foo', type=int) >>> parser.set_defaults(bar=42, baz='badger') >>> parser.parse_args(['736']) Namespace(bar=42, baz='badger', foo=736)"
msgstr ""
">>> parser = argparse.ArgumentParser() >>> parser.add_argument('foo', "
"type=int) >>> parser.set_defaults(bar=42, baz='borsuk') >>> "
"parser.parse_args(['736']) Namespace(bar=42, baz='borsuk', foo=736)"

msgid "Note that parser-level defaults always override argument-level defaults::"
msgstr ""
"Zauważ, że wartości domyślne na poziomie czytnika zawsze przesłaniają "
"wartości domyślne na poziomie parametrów::"

msgid ">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--foo', default='bar') >>> parser.set_defaults(foo='spam') >>> parser.parse_args([]) Namespace(foo='spam')"
msgstr ""
">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--foo', "
"default='bar') >>> parser.set_defaults(foo='spam') >>> parser.parse_args([]) "
"Namespace(foo='spam')"

msgid "Parser-level defaults can be particularly useful when working with multiple parsers.  See the :meth:`~ArgumentParser.add_subparsers` method for an example of this type."
msgstr ""
"Wartości domyślne na poziomie czytnika mogą być szczególnie użyteczne "
"podczas pracy z kilkoma czytnikami. Zobacz sposób postępowania "
":meth:`~ArgumentParser.add_subparsers` dla przykładu tego typu."

msgid "Get the default value for a namespace attribute, as set by either :meth:`~ArgumentParser.add_argument` or by :meth:`~ArgumentParser.set_defaults`::"
msgstr ""
"Weź wartość domyślną dla przestrzeni nazw, jak ustalono przez "
":meth:`~ArgumentParser.add_argument` lub przez "
":meth:`~ArgumentParser.set_defaults`::"

msgid ">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--foo', default='badger') >>> parser.get_default('foo') 'badger'"
msgstr ""
">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--foo', "
"default='borsuk') >>> parser.get_default('foo') 'borsuk'"

msgid "Printing help"
msgstr "Wypisywanie pomocy"

msgid "In most typical applications, :meth:`parse_args` will take care of formatting and printing any usage or error messages.  However, several formatting methods are available:"
msgstr ""
"W najbardziej typowych aplikacjach, :meth:`parse_args` zaopiekuje się "
"formatowaniem i wypisywaniem dowolnych wiadomości o użyciu lub błędzie. "
"Jednakże, kilka sposobów formatowania jest możliwych:"

msgid "Print a brief description of how the :class:`ArgumentParser` should be invoked on the command line.  If ``file`` is not present, ``sys.stderr`` is assumed."
msgstr ""
"Wypisz krótki opis tego jak :class:`ArgumentParser` powinien być wywoływany "
"w wierszu poleceń. Jeśli plik ``file`` nie jest obecny, ``sys.stderr`` jest "
"zakładany."

msgid "Print a help message, including the program usage and information about the arguments registered with the :class:`ArgumentParser`.  If ``file`` is not present, ``sys.stderr`` is assumed."
msgstr ""
"Wypisz wiadomość pomocy, zawierając użycie programu i informacje o "
"parametrach zarejestrowanych przez uogólnienie :class:`ArgumentParser`. "
"Jeśli parametr ``file`` nie jest obecny, ``sys.stderr`` jest podstawiany."

msgid "There are also variants of these methods that simply return a string instead of printing it:"
msgstr ""
"Istnieją także odmiany tych sposobów postępowania które po prostu zwracają "
"ciąg znaków zamiast drukować go:"

msgid "Return a string containing a brief description of how the :class:`ArgumentParser` should be invoked on the command line."
msgstr ""
"Zwróć ciąg znaków zawierający krótki opis tego, jak :class:`ArgumentParser` "
"powinien być wywoływany w wierszu poleceń."

msgid "Return a string containing a help message, including the program usage and information about the arguments registered with the :class:`ArgumentParser`."
msgstr ""
"Zwróć ciąg znaków zawierający wiadomość pomocy, zawierający użycie programu, "
"i informacje o parametrach zarejestrowanych za pomocą uogólnienia "
":class:`ArgumentParser`."

msgid "Partial parsing"
msgstr "Częściowe wczytywanie"

msgid "Sometimes a script may only parse a few of the command line arguments, passing the remaining arguments on to another script or program. In these cases, the :meth:`parse_known_args` method can be useful.  It works much like :meth:`~ArgumentParser.parse_args` except that it does not produce an error when extra arguments are present.  Instead, it returns a two item tuple containing the populated namespace and the list of remaining argument strings."
msgstr ""
"Czasami skrypt może wczytać tylko kilka parametrów wiersza polecenia, "
"przekazując pozostałe parametry dla innego skryptu lub programu. W tych "
"przypadkach, sposób postępowania :meth:`parse_known_args` może być "
"użyteczna. Pracuje ona tak jak :meth:`~ArgumentParser.parse_args` z "
"wyjątkiem tego że nie produkuje ona błędu gdy dodatkowe parametry są obecne. "
"Zamiast tego, zwraca dwuelementową krotkę zawierającą zapełnioną przestrzeń "
"nazw i listę pozostałych ciągów znaków parametrów."

msgid ">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--foo', action='store_true') >>> parser.add_argument('bar') >>> parser.parse_known_args(['--foo', '--badger', 'BAR', 'spam']) (Namespace(bar='BAR', foo=True), ['--badger', 'spam'])"
msgstr ""
">>> parser = argparse.ArgumentParser() >>> parser.add_argument('--foo', "
"action='store_true') >>> parser.add_argument('bar') >>> "
"parser.parse_known_args(['--foo', '--borsuk', 'BAR', 'spam']) "
"(Namespace(bar='BAR', foo=True), ['--borsuk', 'spam'])"

msgid "Customizing file parsing"
msgstr "Dostosowywanie wczytywania plików"

msgid "Arguments that are read from a file (see the ``fromfile_prefix_chars`` keyword argument to the :class:`ArgumentParser` constructor) are read one argument per line. :meth:`convert_arg_line_to_args` can be overriden for fancier reading."
msgstr ""
"Parametry, które są wczytywane z pliku (zobacz parametr słowa kluczowego "
"``fromfile_prefix_chars`` dla konstruktora uogólnienia "
":class:`ArgumentParser`) są wczytywane po jednym parametrze na linię. "
":meth:`convert_arg_line_to_args` może być przesłonięte dla ciekawszych "
"wczytywań."

msgid "This method takes a single argument ``arg_line`` which is a string read from the argument file.  It returns a list of arguments parsed from this string. The method is called once per line read from the argument file, in order."
msgstr ""
"Ten sposób postępowania pobiera pojedynczy parametr ``arg_line`` który jest "
"ciągiem znaków wczytywanym z parametru pliku. Zwraca listę parametrów "
"wczytanych z tego ciągu znaków. Sposób postępowania jest wywoływany jeden "
"raz na linię wczytaną z parametru pliku w porządku."

msgid "A useful override of this method is one that treats each space-separated word as an argument::"
msgstr ""
"Użytecznym przesłonięciem tego sposobu postępowania jest to które traktuje "
"każde oddzielone odstępem słowo jako parametr::"

msgid "def convert_arg_line_to_args(self, arg_line):     for arg in arg_line.split():         if not arg.strip():             continue         yield arg"
msgstr ""
"def convert_arg_line_to_args(self, arg_line):     for arg in "
"arg_line.split():         if not arg.strip():             continue         "
"yield arg"

msgid "Upgrading optparse code"
msgstr "Dostosowywanie kodu optparse"

msgid "Originally, the argparse module had attempted to maintain compatibility with optparse.  However, optparse was difficult to extend transparently, particularly with the changes required to support the new ``nargs=`` specifiers and better usage messages.  When most everything in optparse had either been copy-pasted over or monkey-patched, it no longer seemed practical to try to maintain the backwards compatibility."
msgstr ""
"Pierwotnie, moduł argparse próbował zachować zgodność z modułem optparse. "
"Jednakże, optparse był trudny do rozszerzenia w przejrzysty sposób, "
"szczególnie ze zmianami wymaganymi dla wsparcia nowych określeń ``nargs=`` i "
"lepszymi wiadomościami o użyciu. Gdy prawie wszystko z optparse zostało "
"praktycznie skopiowane lub połatane, nie wydawało się praktycznym dalej "
"utrzymywać wsteczną zgodność. "

msgid "A partial upgrade path from optparse to argparse:"
msgstr "Droga częściowego dostosowania z optparse na argparse: "

msgid "Replace all ``add_option()`` calls with :meth:`ArgumentParser.add_argument` calls."
msgstr ""
"Zamień wszystkie wywołania ``add_option()`` na wywołania "
":meth:`ArgumentParser.add_argument`."

msgid "Replace ``options, args = parser.parse_args()`` with ``args = parser.parse_args()`` and add additional :meth:`ArgumentParser.add_argument` calls for the positional arguments."
msgstr ""
"Zamień ``options, args = parser.parse_args()`` na ``args = "
"parser.parse_args()`` i dodaj dodatkowe wywołania "
":meth:`ArgumentParser.add_argument` dla parametrów pozycyjnych."

msgid "Replace callback actions and the ``callback_*`` keyword arguments with ``type`` or ``action`` arguments."
msgstr ""
"Zamień akcje wywołań wstecznych i parametry słów kluczowych ``callback_*`` "
"na parametry ``type`` lub ``action`` z ang. - ``typ`` lub ``akcja``."

msgid "Replace string names for ``type`` keyword arguments with the corresponding type objects (e.g. int, float, complex, etc)."
msgstr ""
"Zamień nazwy w ciągach znaków na parametry słów kluczowych ``type`` z "
"odpowiadającymi przedmiotami typu (np. int, float, complex, etc)."

msgid "Replace :class:`optparse.Values` with :class:`Namespace` and :exc:`optparse.OptionError` and :exc:`optparse.OptionValueError` with :exc:`ArgumentError`."
msgstr ""
"Zamień :class:`optparse.Values` na :class:`Namespace` i "
":exc:`optparse.OptionError` i :exc:`optparse.OptionValueError` na "
":exc:`ArgumentError`."

msgid "Replace strings with implicit arguments such as ``%default`` or ``%prog`` with the standard python syntax to use dictionaries to format strings, that is, ``%(default)s`` and ``%(prog)s``."
msgstr ""
"Zamień ciągi znaków z domyślnymi parametrami takimi jak ``%default`` lub ``%"
"prog`` na standardową składnię języka pytonowskiego aby użyć słowników dla "
"formatowania ciągów znaków, to jest ``%(default)s`` i ``%(prog)s``."

msgid "Replace the OptionParser constructor ``version`` argument with a call to ``parser.add_argument('--version', action='version', version='<the version>')``"
msgstr ""
"Zamień parametr konstruktora OptionParser  ``version`` na wywołanie "
"``parser.add_argument('--version', action='version', version='<the "
"version>')``"

msgid ":mod:`array` --- Efficient arrays of numeric values"
msgstr ":mod:`array` --- Efektywne tablice wartości numerycznych"

msgid "This module defines an object type which can compactly represent an array of basic values: characters, integers, floating point numbers.  Arrays are sequence types and behave very much like lists, except that the type of objects stored in them is constrained.  The type is specified at object creation time by using a :dfn:`type code`, which is a single character.  The following type codes are defined:"
msgstr ""
"Ten moduł definiuje typ przedmiotu który może w zwarty sposób reprezentować "
"tabelę podstawowych wartości: znaków, liczb całkowitych, liczb "
"zmiennoprzecinkowych. Tablice są typami sekwencyjnymi i zachowują się bardzo "
"podobnie do list, z wyjątkiem tego, że typy przedmiotów zachowanych w nich "
"są ograniczone. Typ jest określony w czasie tworzenia przedmiotu przez "
"użycie :dfn:`kodu typu` który jest pojedynczym znakiem. Następujące kody "
"typów są określone:"

msgid "Type code"
msgstr "Kod typu"

msgid "C Type"
msgstr "typ języka C "

msgid "Python Type"
msgstr "typ języka pytonowskiego"

msgid "Minimum size in bytes"
msgstr "Minimalny rozmiar w bajtach"

msgid "``'b'``"
msgstr "``'b'``"

msgid "signed char"
msgstr "typ znakowy z bitem znaku"

msgid "int"
msgstr "int"

msgid "1"
msgstr "1"

msgid "``'B'``"
msgstr "``'B'``"

msgid "unsigned char"
msgstr "nieoznaczony typ znakowy"

msgid "``'u'``"
msgstr "``'u'``"

msgid "Py_UNICODE"
msgstr "Py_UNICODE"

msgid "Unicode character"
msgstr "znak Unicode"

msgid "2 (see note)"
msgstr "2 (zobacz notatkę)"

msgid "``'h'``"
msgstr "``'h'``"

msgid "signed short"
msgstr "oznaczony typ krótki"

msgid "2"
msgstr "2"

msgid "``'H'``"
msgstr "``'H'``"

msgid "unsigned short"
msgstr "nieoznaczony typ krótki"

msgid "``'i'``"
msgstr "``'i'``"

msgid "signed int"
msgstr "oznaczony typ int"

msgid "``'I'``"
msgstr "``'I'``"

msgid "unsigned int"
msgstr "nieoznaczony typ int"

msgid "``'l'``"
msgstr "``'I'``"

msgid "signed long"
msgstr "oznaczony typ długi"

msgid "4"
msgstr "4"

msgid "``'L'``"
msgstr "``'L'``"

msgid "unsigned long"
msgstr "nieoznaczony typ długi"

msgid "``'f'``"
msgstr "``'f'``"

msgid "float"
msgstr "typ (float) zmiennoprzecinkowy pojedynczej precyzji"

msgid "``'d'``"
msgstr "``'d'``"

msgid "double"
msgstr "typ (double) zmiennoprzecinkowy podwójnej precyzji"

msgid "8"
msgstr "8"

msgid "The ``'u'`` typecode corresponds to Python's unicode character.  On narrow Unicode builds this is 2-bytes, on wide builds this is 4-bytes."
msgstr ""
"Kod typu ``'u'`` odpowiada znakowi Unicode języka pytonowskiego. Na "
"\"wąskiej\" budowie Unikodu to jest 2-bajtowe, na szerokiej budowie unikodu to "
"jest 4-bajtowe."

msgid "The actual representation of values is determined by the machine architecture (strictly speaking, by the C implementation).  The actual size can be accessed through the :attr:`itemsize` attribute."
msgstr ""
"Aktualna reprezentacja wartości jest określana przez architekturę maszyny "
"(ściśle mówiąc przez wypełnienie C). Konkretny rozmiar może być dostępny "
"przez właściwość :attr:`itemsize`"

msgid "The module defines the following type:"
msgstr "Moduł definiuje następujący typ:"

msgid "A new array whose items are restricted by *typecode*, and initialized from the optional *initializer* value, which must be a list, object supporting the buffer interface, or iterable over elements of the appropriate type."
msgstr ""
"Nowa tablica której elementy są ograniczone przez *typecode*, i zainicjowane "
"przez opcjonalną wartość *initializer*, która musi być listą, przedmiotem "
"obsługującym sprzęg przestrzeni wymiany, lub możliwa do iteracji ponad "
"elementami odpowiedniego typu."

msgid "If given a list or string, the initializer is passed to the new array's :meth:`fromlist`, :meth:`fromstring`, or :meth:`fromunicode` method (see below) to add initial items to the array.  Otherwise, the iterable initializer is passed to the :meth:`extend` method."
msgstr ""
"Jeśli podano listę lub ciąg znaków, element inicjujący jest przekazywany do "
"właściwego dla nowej tabeli sposobu postępowania :meth:`fromlist`, lub "
":meth:`fromstring`, lub :meth:`fromunicode` (zobacz poniżej) aby dodać "
"początkowe wartości dla tablicy. W przeciwnym razie, możliwy do iterowania "
"element inicjujący jest przekazywany dla sposobu postępowania "
":meth:`extend`."

msgid "Obsolete alias for :class:`array`."
msgstr "Przestarzały synonim uogólnienia :class:`array`."

msgid "A string with all available type codes."
msgstr "Ciąg ze wszystkimi dostępnymi kodami typów."

msgid "Array objects support the ordinary sequence operations of indexing, slicing, concatenation, and multiplication.  When using slice assignment, the assigned value must be an array object with the same type code; in all other cases, :exc:`TypeError` is raised. Array objects also implement the buffer interface, and may be used wherever buffer objects are supported."
msgstr ""
"Przedmioty tabeli wspierają zwykłe operacje na sekwencjach, indeksowania, "
"wycinka, łączenia i powielania. Gdy używa się przypisań wycinków, "
"przypisywana wartość musi być przedmiotem tabeli o tym samym kodzie typu; we "
"wszystkich innych przypadkach wyjątek :exc:`TypeError` jest zgłaszany. "
"Przedmioty tabeli wypełniają także sprzęg przestrzeni wymiany, i mogą być "
"używane wszędzie gdzie przedmioty przestrzeni wymiany są wspierane."

msgid "The following data items and methods are also supported:"
msgstr "Następujące elementy danych i sposobów postępowania są także wspierane:"

msgid "The typecode character used to create the array."
msgstr "Znak kodujący typ używany do tworzenia tabeli."

msgid "The length in bytes of one array item in the internal representation."
msgstr ""
"długość w bajtach (kęsach) jednego elementu tabeli w wewnętrznym "
"przedstawieniu."

msgid "Append a new item with value *x* to the end of the array."
msgstr "Dodaj nowy element o wartości *x* na koniec tabeli."

msgid "Return a tuple ``(address, length)`` giving the current memory address and the length in elements of the buffer used to hold array's contents.  The size of the memory buffer in bytes can be computed as ``array.buffer_info()[1] * array.itemsize``.  This is occasionally useful when working with low-level (and inherently unsafe) I/O interfaces that require memory addresses, such as certain :cfunc:`ioctl` operations.  The returned numbers are valid as long as the array exists and no length-changing operations are applied to it."
msgstr ""
"Zwróć krotkę ``(adres, długość)`` dającą obecny adres w pamięci i długość w "
"ilości elementów przestrzeni wymiany używanej do przechowywania zawartości "
"tabeli. Rozmiar przestrzeni wymiany w kęsach (bajtach) może być obliczony "
"jako ``array.buffer_info()[1] * array.itemsize`` To jest czasami przydatne "
"gdy pracuje się z niskopoziomowymi (i samym przez się mniej bezpiecznym) "
"sprzęgami wejścia/wyjścia które wymagają adresów pamięci, takich jak "
"niektóre operacje :cfunc:`ioctl`. Zwracane liczby są ważne dopóki tabela "
"istnieje i nie są wykonywane na niej operacje zmieniające jej długość."

msgid "When using array objects from code written in C or C++ (the only way to effectively make use of this information), it makes more sense to use the buffer interface supported by array objects.  This method is maintained for backward compatibility and should be avoided in new code.  The buffer interface is documented in :ref:`bufferobjects`."
msgstr ""
"Gdy używa się tablic z kodu napisanego w języku C lub C++ (jedyna droga aby "
"efektywnie skorzystać z tej informacji), to jest to bardziej sensowne aby "
"użyć sprzęgu przestrzeni wymiany który jest wspierany przez przedmioty "
"tablicowe. Ten sposób postępowania jest utrzymywany dla wstecznej zgodności "
"i powinien być pomijany w nowym kodzie. Sprzęg przestrzeni wymiany jest "
"opisany w :ref:`bufferobjects`."

msgid "\"Byteswap\" all items of the array.  This is only supported for values which are 1, 2, 4, or 8 bytes in size; for other types of values, :exc:`RuntimeError` is raised.  It is useful when reading data from a file written on a machine with a different byte order."
msgstr ""
"\"Zamień miejscami kęsy\" - z ang. - \"Byteswap\" wszystkie elementy tablicy. To "
"jest wspierane tylko dla wartości które są 1, 2, 4, lub 8 w rozmiarze; dla "
"innych typów wartości wyjątek :exc:`RuntimeError` jest zgłaszany. Jest to "
"użyteczne gdy wczytuje się dane z pliku zapisanym na maszynie o odmiennym "
"porządku bajtów."

msgid "Return the number of occurrences of *x* in the array."
msgstr "Zwróć liczbę wystąpień *x* w tablicy."

msgid "Append items from *iterable* to the end of the array.  If *iterable* is another array, it must have *exactly* the same type code; if not, :exc:`TypeError` will be raised.  If *iterable* is not an array, it must be iterable and its elements must be the right type to be appended to the array."
msgstr ""
"Przyklej elementy z przedmiotu *iterowalnego* na koniec tablicy. Jeśli "
"*iterowalny* jest kolejną tablicą, musi mieć *dokładnie* ten sam typ kodu; "
"Jeśli nie, wyjątek :exc:`TypeError będzie zgłoszony. Jeśli *iterowalny* nie "
"jest tablicą, musi być iterowalny i jego elementy muszą być właściwego typu "
"aby mogły być doklejone do tablicy."

msgid "Read *n* items (as machine values) from the file object *f* and append them to the end of the array.  If less than *n* items are available, :exc:`EOFError` is raised, but the items that were available are still inserted into the array. *f* must be a real built-in file object; something else with a :meth:`read` method won't do."
msgstr ""
"Wczytaj *n* elementów (jako wartości maszyny) z przedmiotu pliku *f* i "
"doklej je na koniec tablicy. Jeśli mniej niż *n* elementów jest dostępnych, "
":exc:`EOFError` jest zgłaszany, ale elementy które były dostępne są wciąż "
"wstawiane do tablicy. *f* musi być rzeczywistym wbudowanym przedmiotem "
"pliku; coś innego ze sposobem postępowania :meth:`read` nie wystarczy "
"zamiast."

msgid "Append items from the list.  This is equivalent to ``for x in list: a.append(x)`` except that if there is a type error, the array is unchanged."
msgstr ""
"Doklej elementy z listy. To jest równoważne z ``for x in list: a.append(x)`` "
"z wyjątkiem tego, że jeśli wystąpi błąd typu, tablica pozostanie "
"niezmieniona. "

msgid "Appends items from the string, interpreting the string as an array of machine values (as if it had been read from a file using the :meth:`fromfile` method)."
msgstr ""
"Dokleja elementy z ciągu znaków, interpretując ciąg jako tablicę wartości "
"maszynowych (tak jakby były one wszytane z pliku używając sposobu "
"postępowania :meth:`fromfile`)."

msgid "Extends this array with data from the given unicode string.  The array must be a type ``'u'`` array; otherwise a :exc:`ValueError` is raised.  Use ``array.fromstring(unicodestring.encode(enc))`` to append Unicode data to an array of some other type."
msgstr ""
"Rozszerza tą tablicę za pomocą danych z danego ciągu znaków Unicode. Tablica "
"musi być typu ``'u'``; w przeciwnym razie :exc:`ValueError` jest zgłaszany. "
"Użyj ``array.fromstring(unicodestring.encode(enc))`` aby dopisać dane "
"Unicode do tablicy innego typu."

msgid "Return the smallest *i* such that *i* is the index of the first occurrence of *x* in the array."
msgstr ""
"Zwróć najmniejszy *i* taki że *i* jest indeksem pierwszego wystąpienia *x* w "
"tablicy."

msgid "Insert a new item with value *x* in the array before position *i*. Negative values are treated as being relative to the end of the array."
msgstr ""
"Wstaw nowy element o wartości *x* w tabeli przed pozycją *i*. Ujemne "
"wartości są traktowane jako będące odniesieniem do pozycji od końca tabeli."

msgid "Removes the item with the index *i* from the array and returns it. The optional argument defaults to ``-1``, so that by default the last item is removed and returned."
msgstr ""
"Usuwa element o indeksie *i* z tablicy i zwraca go. Opcjonalny parametr "
"domyślnie jest ``-1``, tak aby domyślnie ostatni element był usuwany i "
"zwracany."

msgid "Remove the first occurrence of *x* from the array."
msgstr "Usuń pierwsze wystąpienie *x* w tabeli."

msgid "Reverse the order of the items in the array."
msgstr "Odwróć kolejność elementów w tabeli."

msgid "Write all items (as machine values) to the file object *f*."
msgstr ""
"Zapisz wszystkie elementy (jako wartości maszynowe) do przedmiotu pliku *f*."

msgid "Convert the array to an ordinary list with the same items."
msgstr "Zamień tabelę na zwykłą listę o tych samych elementach."

msgid "Convert the array to an array of machine values and return the string representation (the same sequence of bytes that would be written to a file by the :meth:`tofile` method.)"
msgstr ""
"Zamień tablicę na tablicę wartości maszynowych i zwróć reprezentację ciągu "
"znaków (tę samą sekwencję bajtów która byłaby zapisana do pliku przez sposób "
"postępowania :meth:`tofile`.)"

msgid "Convert the array to a unicode string.  The array must be a type ``'u'`` array; otherwise a :exc:`ValueError` is raised. Use ``array.tostring().decode(enc)`` to obtain a unicode string from an array of some other type."
msgstr ""
"Zamień tablicę na ciąg znaków Unicode. Tablica musi być tablicą typu "
"``'u'``; w przeciwnym przypadku wyjątek :exc:`ValueError` jest zgłaszany. "
"Użyj ``array.tostring().decode(enc)`` aby uzyskać ciąg znaków Unicode z "
"tablicy innego typu."

msgid "When an array object is printed or converted to a string, it is represented as ``array(typecode, initializer)``.  The *initializer* is omitted if the array is empty, otherwise it is a string if the *typecode* is ``'u'``, otherwise it is a list of numbers.  The string is guaranteed to be able to be converted back to an array with the same type and value using :func:`eval`, so long as the :func:`array` function has been imported using ``from array import array``. Examples::"
msgstr ""
"Gdy przedmiot tablicy jest wypisywany lub zamieniany na ciąg znaków, jest on "
"reprezentowany jako ``array(typecode, initializer)`` - z ang - "
"``tablica(kod typu, wartość inicjująca)`` *Wartość inicjująca* jest pomijana "
"jeśli tablica jest pusta, w przeciwnym przypadku jest to ciąg znaków jeśli "
"*kodem typu* jest ``'u'``, w przeciwnym razie jest to lista liczb. Ciąg "
"znaków ma gwarantowane że będzie możliwy do skonwertowania wstecz na tablicę "
"o tym samym typie i wartości używając zadania :func:`eval`, dopóty dopóki "
"zadanie :func:`array` ( - z ang. - tablica) zostało zaimportowane używając "
"``from array import array``. Przykłady::"

msgid "array('l') array('u', 'hello \\u2641') array('l', [1, 2, 3, 4, 5]) array('d', [1.0, 2.0, 3.14])"
msgstr ""
"array('l') array('u', 'hello \\u2641') array('l', [1, 2, 3, 4, 5]) array('d', "
"[1.0, 2.0, 3.14])"

msgid "Packing and unpacking of heterogeneous binary data."
msgstr "Pakowanie i odpakowanie jednorodnych danych binarnych."

msgid "Packing and unpacking of External Data Representation (XDR) data as used in some remote procedure call systems."
msgstr ""
"Pakowanie i odpakowanie Danych  Zewnętrznej Reprezentacji (XDR) ( - z ang. - "
"External Data Representation) jak używano w pewnych systemach zewnętrznego "
"wywoływania procedur."

msgid "The Numeric Python extension (NumPy) defines another array type; see http://numpy.sourceforge.net/ for further information about Numerical Python. (A PDF version of the NumPy manual is available at http://numpy.sourceforge.net/numdoc/numdoc.pdf)."
msgstr ""
"Rozszerzenie języka pytonowskiego numerycznego  (z ang. - NumPy) definiuje "
"inny typ tablicowy; zobacz http://numpy.sourceforge.net/ dla dalszych "
"informacji o numerycznym języku Pyton. (Wersja PDF podręcznika NumPy jest "
"dostępna pod adresem http://numpy.sourceforge.net/numdoc/numdoc.pdf)."

msgid "Abstract Syntax Trees"
msgstr "Abstrakcyjne Drzewa Składniowe - z ang. - Abstract Syntax Trees"

msgid "The :mod:`ast` module helps Python applications to process trees of the Python abstract syntax grammar.  The abstract syntax itself might change with each Python release; this module helps to find out programmatically what the current grammar looks like."
msgstr ""
"Moduł :mod:`ast` pomaga aplikacjom języka pytonowskiego przetwarzać drzewa "
"abstrakcyjnych gramatyk składni języka pytonowskiego. Abstrakcyjna składnia "
"sama w sobie może ulegać zmianom w każdym wydaniu języka pytonowskiego; ten "
"moduł pozwala dowiedzieć się programowo, jak wygląda obecna gramatyka."

msgid "An abstract syntax tree can be generated by passing :data:`ast.PyCF_ONLY_AST` as a flag to the :func:`compile` built-in function, or using the :func:`parse` helper provided in this module.  The result will be a tree of objects whose classes all inherit from :class:`ast.AST`.  An abstract syntax tree can be compiled into a Python code object using the built-in :func:`compile` function."
msgstr ""
"Abstrakcyjne drzewo składniowe może być wygenerowane przez przekazanie "
":data:`ast.PyCF_ONLY_AST` jako flagi dla zadania wbudowanego "
":func:`compile`, lub używając zadania :func:`parse` - pomocnika "
"dostarczonego z tym modułem. Wynikiem będzie drzewo przedmiotów którego "
"uogólnienia wszystkie dziedziczą po :class:`ast.AST`. Abstrakcyjne drzewo "
"składniowe może być kompilowane do przedmiotu kodu języka pytonowskiego "
"używając wbudowanego zadania :func:`compile`."

msgid "Node classes"
msgstr "Uogólnienia węzła - z ang. - node"

msgid "This is the base of all AST node classes.  The actual node classes are derived from the :file:`Parser/Python.asdl` file, which is reproduced :ref:`below <abstract-grammar>`.  They are defined in the :mod:`_ast` C module and re-exported in :mod:`ast`."
msgstr ""
"To jest podstawą wszystkich uogólnień węzła AST - z ang. - AST node classes. "
"Konkretne uogólnienia węzła dziedziczą po pliku :file:`Parser/Python.asdl` "
"który jest reprodukowany :ref:`poniżej <abstrakcyjnej-gramatyki>. Są one "
"określone w module języka C :mod:`_ast` i ponownie eksportowane w module "
":mod:`ast`."

msgid "There is one class defined for each left-hand side symbol in the abstract grammar (for example, :class:`ast.stmt` or :class:`ast.expr`).  In addition, there is one class defined for each constructor on the right-hand side; these classes inherit from the classes for the left-hand side trees.  For example, :class:`ast.BinOp` inherits from :class:`ast.expr`.  For production rules with alternatives (aka \"sums\"), the left-hand side class is abstract: only instances of specific constructor nodes are ever created."
msgstr ""
"Istnieje jedno uogólnienie określone dla każdego symbolu lewej strony w "
"abstrakcyjnej gramatyce (na przykład, :class:`ast.stmt` lub "
":class:`ast.expr`). Na dodatek, istnieje jedno uogólnienie określone dla "
"każdego konstruktora prawej-strony; te uogólnienia dziedziczą po "
"uogólnieniach drzew lewej strony. Dla przykładu, :class:`ast.BinOp` "
"dziedziczy po :class:`ast.expr`. Dla reguł produkcji z alternatywami (in. "
"\"sum\"), lewa strona jest abstrakcyjna: tylko przykłady szczególnych węzłów "
"konstruktorów są w ogóle kiedykolwiek tworzone."

msgid "Each concrete class has an attribute :attr:`_fields` which gives the names of all child nodes."
msgstr ""
"Każde konkretne uogólnienie ma właściwość :attr:`_fields` która daje nazwy "
"wszystkich węzłów potomnych."

msgid "Each instance of a concrete class has one attribute for each child node, of the type as defined in the grammar.  For example, :class:`ast.BinOp` instances have an attribute :attr:`left` of type :class:`ast.expr`."
msgstr ""
"Każdy przykład konkretnego uogólnienia ma jedną właściwość dla każdego węzła "
"potomnego, o typie zdefiniowanym w gramatyce. Dla przykładu przykłady "
":class:`ast.BinOp` mają właściwość :attr:`left` o typie :class:`ast.expr`."

msgid "If these attributes are marked as optional in the grammar (using a question mark), the value might be ``None``.  If the attributes can have zero-or-more values (marked with an asterisk), the values are represented as Python lists.  All possible attributes must be present and have valid values when compiling an AST with :func:`compile`."
msgstr ""
"Jeśli te właściwości są oznaczone jako opcjonalne w gramatyce (używając "
"znaku zapytania) wartość może być ``None``. Jeśli właściwości mogą mieć "
"zero-lub-więcej wartości (określonych za pomocą gwiazdki), wartości są "
"reprezentowane jako listy języka Pyton. Wszystkie możliwe właściwości muszą "
"być obecne i mieć właściwe wartości gdy kompiluje się AST za pomocą zadania "
":func:`compile`."

msgid "Instances of :class:`ast.expr` and :class:`ast.stmt` subclasses have :attr:`lineno` and :attr:`col_offset` attributes.  The :attr:`lineno` is the line number of source text (1-indexed so the first line is line 1) and the :attr:`col_offset` is the UTF-8 byte offset of the first token that generated the node.  The UTF-8 offset is recorded because the parser uses UTF-8 internally."
msgstr ""
"Przykłady uogólnień podrzędnych względem :class:`ast.expr` i "
":class:`ast.stmt` mają właściwości :attr:`lineno` i :attr:`col_offset`. "
"Właściwość :attr:`lineno` jest numerem wiersza w źródłowym tekście "
"(indeksowanym od jednego tak że pierwsza linia odpowiada 1) i "
":attr:`col_offset` jest przesunięciem w bajtach UTF-8 pierwszego elementu "
"składniowego który wygenerował węzeł. Przesunięcie UTF-8 jest zapisywane "
"ponieważ czytnik używa UTF-8 wewnętrznie."

msgid "The constructor of a class :class:`ast.T` parses its arguments as follows:"
msgstr ""
"Konstruktor uogólnienia :class:`ast.T` wczytuje swoje parametry jak "
"następuje:"

msgid "If there are positional arguments, there must be as many as there are items in :attr:`T._fields`; they will be assigned as attributes of these names."
msgstr ""
"Jeśli są parametry pozycyjne, musi być ich tak wiele, jak jest elementów w "
":attr:`T._fields`; będą przypisane jako właściwości o tych nazwach."

msgid "If there are keyword arguments, they will set the attributes of the same names to the given values."
msgstr ""
"Jeśli istnieją parametry słów kluczowych, ustawią one wartości tych samych "
"nazw na zadane wartości."

msgid "For example, to create and populate an :class:`ast.UnaryOp` node, you could use ::"
msgstr ""
"Dla przykładu, aby utworzyć i zapełnić węzeł :class:`ast.UnaryOp`, można "
"użyć::"

msgid "node = ast.UnaryOp() node.op = ast.USub() node.operand = ast.Num() node.operand.n = 5 node.operand.lineno = 0 node.operand.col_offset = 0 node.lineno = 0 node.col_offset = 0"
msgstr ""
"node = ast.UnaryOp() node.op = ast.USub() node.operand = ast.Num() "
"node.operand.n = 5 node.operand.lineno = 0 node.operand.col_offset = 0 "
"node.lineno = 0 node.col_offset = 0"

msgid "or the more compact ::"
msgstr "lub bardziej zwięźle ::"

msgid "node = ast.UnaryOp(ast.USub(), ast.Num(5, lineno=0, col_offset=0),                    lineno=0, col_offset=0)"
msgstr ""
"node = ast.UnaryOp(ast.USub(), ast.Num(5, lineno=0, col_offset=0), "
"                   lineno=0, col_offset=0)"

msgid "Abstract Grammar"
msgstr "Abstrakcyjna Gramatyka"

msgid "The module defines a string constant ``__version__`` which is the decimal Subversion revision number of the file shown below."
msgstr ""
"Moduł definiuje stałą ciągu znaków ``__version__`` która jest dziesiątkową "
"liczbą porządkową numerem rewizji Subversion pliku pokazanego poniżej."

msgid "The abstract grammar is currently defined as follows:"
msgstr "Abstrakcyjna gramatyka jest obecnie określona jak następuje:"

msgid ":mod:`ast` Helpers"
msgstr "Pomocnicy modułu :mod:`ast` "

msgid "Apart from the node classes, :mod:`ast` module defines these utility functions and classes for traversing abstract syntax trees:"
msgstr ""
"Poza uogólnieniami węzła, moduł :mod:`ast` definiuje następujące zadania "
"pomocnicze i uogólnienia dla przeglądania abstrakcyjnych drzew składniowych:"

msgid "Parse an expression into an AST node.  Equivalent to ``compile(expr, filename, mode, ast.PyCF_ONLY_AST)``."
msgstr ""
"Wczytaj wyrażenie do węzła AST. Równoważne z ``compile(expr, filename, mode, "
"ast.PyCF_ONLY_AST)``."

msgid "Safely evaluate an expression node or a string containing a Python expression.  The string or node provided may only consist of the following Python literal structures: strings, numbers, tuples, lists, dicts, booleans, and ``None``."
msgstr ""
"Bezpiecznie przelicz węzeł wyrażenia lub ciąg zawierający wyrażenie języka "
"Pyton. Ciąg znaków lub dostarczony węzeł mogą tylko składać się z "
"następujących struktur literałów języka Pyton: ciągów, liczb, krotek, list, "
"słowników, wartości logicznych i ``None`` - z ang. - ``Żaden``."

msgid "This can be used for safely evaluating strings containing Python expressions from untrusted sources without the need to parse the values oneself."
msgstr ""
"To może być używane dla bezpiecznego obliczania ciągów zawierających "
"wyrażenia języka Pyton z niezaufanych źródeł, bez konieczności przeliczania "
"wartości własnoręcznie."

msgid "Return the docstring of the given *node* (which must be a :class:`FunctionDef`, :class:`ClassDef` or :class:`Module` node), or ``None`` if it has no docstring.  If *clean* is true, clean up the docstring's indentation with :func:`inspect.cleandoc`."
msgstr ""
"Zwróć ciąg dokumentacji dla danego *węzła* (który musi być węzłem "
":class:`FunctionDef` lub :class:`ClassDef` lub :class:`Module`), lub "
"``None`` jeśli nie ma ciągu dokumentacji. Jeśli *clean* jest prawdziwe, "
"posprzątaj wcięcia ciągu dokumentacji za pomocą zadania "
":func:`inspect.cleandoc`."

msgid "When you compile a node tree with :func:`compile`, the compiler expects :attr:`lineno` and :attr:`col_offset` attributes for every node that supports them.  This is rather tedious to fill in for generated nodes, so this helper adds these attributes recursively where not already set, by setting them to the values of the parent node.  It works recursively starting at *node*."
msgstr ""
"Gdy kompilujesz drzewo węzła za pomocą zadania :func:`compile`, kompilator "
"oczekuje właściwości :attr:`lineno` i :attr:`col_offset` dla każdego węzła "
"które wspiera te właściwości. Jest raczej nużącym wypełnianie wygenerowanych "
"węzłów, więc ten element pomocniczy dodaje te właściwości rekursywnie tam "
"gdzie nie zostały one jeszcze ustawione, przez ustawienie ich na wartości "
"węzła nadrzędnego. Pracuje rekursywnie zaczynając od *węzła* - z ang. - "
"*node*."

msgid "Increment the line number of each node in the tree starting at *node* by *n*. This is useful to \"move code\" to a different location in a file."
msgstr ""
"Zwiększ numer linii każdego węzła w drzewie zaczynając od *węzła* o *n*. To "
"jest użyteczne aby przesunąć kod do innego położenia w pliku."

msgid "Copy source location (:attr:`lineno` and :attr:`col_offset`) from *old_node* to *new_node* if possible, and return *new_node*."
msgstr ""
"Skopiuj źródłowe położenie (właściwości :attr:`lineno` i :attr:`col_offset`) "
"ze *starego węzła* - z ang. - *old_node* do *nowego węzła* - z ang. - "
"*new_node* jeśli to możliwe, i zwróć *nowy węzeł* - z ang. - *new_node*."

msgid "Yield a tuple of ``(fieldname, value)`` for each field in ``node._fields`` that is present on *node*."
msgstr ""
"Wydaj dwójkę ``(nazwa pola, wartość)`` - z ang. - ``(fieldname, value)`` dla "
"każdego pola w ``node._fields`` które jest obecne w *węźle* - z ang. - "
"*node*."

msgid "Yield all direct child nodes of *node*, that is, all fields that are nodes and all items of fields that are lists of nodes."
msgstr ""
"Wydaj wszystkie bezpośrednie węzły potomne *węzła*, to jest, wszystkie pola "
"które są węzłami i wszystkie elementy pól które są listami węzłów. "

msgid "Recursively yield all child nodes of *node*, in no specified order.  This is useful if you only want to modify nodes in place and don't care about the context."
msgstr ""
"Rekurencyjnie wydaj wszystkie potomne węzły *węzła* - z ang. *node* bez "
"szczególnego porządku. To jest użyteczne jeśli chcesz tylko zmienić węzły w "
"miejscu i nie chcesz troszczyć się o kontekst."

msgid "A node visitor base class that walks the abstract syntax tree and calls a visitor function for every node found.  This function may return a value which is forwarded by the :meth:`visit` method."
msgstr ""
"Uogólnienie podstawowe wizytującego węzły który przegląda drzewo "
"abstrakcyjnej składni i wywołuje zadanie wizyty dla każdego znalezionego "
"węzła. To zadanie może zwrócić wartość która jest przekazywana przez sposób "
"postępowania :meth:`visit`."

msgid "This class is meant to be subclassed, with the subclass adding visitor methods."
msgstr ""
"To uogólnienie jest przeznaczone do wystawienia uogólnienia podrzędnego "
"względem niego, z uogólnieniem podrzędnym dodającym sposoby postępowania "
"wizytujące."

msgid "Visit a node.  The default implementation calls the method called :samp:`self.visit_{classname}` where *classname* is the name of the node class, or :meth:`generic_visit` if that method doesn't exist."
msgstr ""
"Odwiedź węzeł. Domyślne wypełnienie wywołuje sposób postępowania zwany "
":samp:`self.visit_{nazwauogolnienia}` gdzie *nazwauogolnienia* jest nazwą "
"uogólnienia węzła, lub :meth:`generic_visit` - zastępczych odwiedzin jeśli "
"ten sposób postępowania nie istnieje."

msgid "This visitor calls :meth:`visit` on all children of the node."
msgstr ""
"Te odwiedzający wywołuje sposób postępowania :meth:`visit` we wszystkich "
"węzłach potomnych węzła."

msgid "Note that child nodes of nodes that have a custom visitor method won't be visited unless the visitor calls :meth:`generic_visit` or visits them itself."
msgstr ""
"Zauważ że węzły potomne węzłów które mają dostosowany sposób postępowania "
"odwiedzin nie będą odwiedzane chyba że wizytujący wywoła sposób postępowania "
":meth:`generic_visit` lub odwiedzi je samodzielnie."

msgid "Don't use the :class:`NodeVisitor` if you want to apply changes to nodes during traversal.  For this a special visitor exists (:class:`NodeTransformer`) that allows modifications."
msgstr ""
"Nie używaj uogólnienia :class:`NodeVisitor` jeśli chcesz zastosować zmiany "
"dla węzłów w czasie przeglądania. Do tego celu służy specjalny odwiedzający "
"(:class:`NodeTransformer`), który pozwala na modyfikacje."

msgid "A :class:`NodeVisitor` subclass that walks the abstract syntax tree and allows modification of nodes."
msgstr ""
"Uogólnienie :class:`NodeVisitor` podrzędne które przegląda abstrakcyjne "
"drzewo składni i pozwala na modyfikację węzłów."

msgid "The :class:`NodeTransformer` will walk the AST and use the return value of the visitor methods to replace or remove the old node.  If the return value of the visitor method is ``None``, the node will be removed from its location, otherwise it is replaced with the return value.  The return value may be the original node in which case no replacement takes place."
msgstr ""
"Uogólnienie :class:`NodeTransformer` będzie przeglądało AST (abstrakcyjne "
"drzewo składniowe) i użyje wartości zwracanej sposobu postępowania "
"odwiedzającego do zamiany lub usunięcia starego węzła. Jeśli wartość "
"zwracana sposobu postępowania odwiedzającego jest ``Żadna`` - z ang. - "
"``None``, węzeł będzie usunięty z jego położenia, w przeciwnym razie "
"zostanie zamieniony na wartość zwracaną. Wartość zwracana może być "
"oryginalnym węzłem w którym to przypadku żadna podmiana nie ma miejsca."

msgid "Here is an example transformer that rewrites all occurrences of name lookups (``foo``) to ``data['foo']``::"
msgstr ""
"Tu jest przykładowy zamiennik, który przepisuje wszystkie wystąpienia "
"podejrzeń nazwy (``foo``) na ``data['foo']``::"

msgid "class RewriteName(NodeTransformer):      def visit_Name(self, node):         return copy_location(Subscript(             value=Name(id='data', ctx=Load()),             slice=Index(value=Str(s=node.id)),             ctx=node.ctx         ), node)"
msgstr ""
"class RewriteName(NodeTransformer):      def visit_Name(self, node): "
"        return copy_location(Subscript(             value=Name(id='data', "
"ctx=Load()),             slice=Index(value=Str(s=node.id)),             "
"ctx=node.ctx         ), node)"

msgid "Keep in mind that if the node you're operating on has child nodes you must either transform the child nodes yourself or call the :meth:`generic_visit` method for the node first."
msgstr ""
"Pamiętaj że jeśli węzeł na którym wykonujesz operacje ma węzły potomne "
"musisz albo transformować węzły potomne własnoręcznie albo wywołać sposób "
"postępowania :meth:`generic_visit` dla węzła najpierw."

msgid "For nodes that were part of a collection of statements (that applies to all statement nodes), the visitor may also return a list of nodes rather than just a single node."
msgstr ""
"Dla węzłów które były częścią kolekcji stwierdzeń (to dotyczy wszystkich "
"węzłów stwierdzeń), odwiedzający może także zwrócić listę węzłów zamiast "
"pojedynczego węzła."

msgid "Usually you use the transformer like this::"
msgstr "Zwykle używa się zamiennika takiego jak ten::"

msgid "node = YourTransformer().visit(node)"
msgstr "node = YourTransformer().visit(node)"

msgid "Return a formatted dump of the tree in *node*.  This is mainly useful for debugging purposes.  The returned string will show the names and the values for fields.  This makes the code impossible to evaluate, so if evaluation is wanted *annotate_fields* must be set to False.  Attributes such as line numbers and column offsets are not dumped by default.  If this is wanted, *include_attributes* can be set to ``True``."
msgstr ""
"Zwróć sformatowany zrzut drzewa w węźle. To jest głównie użyteczne dla celów "
"debugowania. Zwrócony ciąg znaków pokaże nazwy i wartości pól. To powoduje "
"że kod jest niemożliwy do obliczenia, więc jeśli obliczenie jest oczekiwane "
"*annotate_fields* musi być ustawione na Fałsz. Właściwości takie jak numery "
"linii i przesunięcia kolumn nie są zrzucane domyślnie. Jeśli jest to "
"oczekiwane, można ustawić *include_attributes* na Prawdę - z ang - ``True``."

msgid ":mod:`asynchat` --- Asynchronous socket command/response handler"
msgstr ":mod:`asynchat` --- Asynchroniczna obsługa gniazda komend/odpowiedzi."

msgid "This module builds on the :mod:`asyncore` infrastructure, simplifying asynchronous clients and servers and making it easier to handle protocols whose elements are terminated by arbitrary strings, or are of variable length. :mod:`asynchat` defines the abstract class :class:`async_chat` that you subclass, providing implementations of the :meth:`collect_incoming_data` and :meth:`found_terminator` methods. It uses the same asynchronous loop as :mod:`asyncore`, and the two types of channel, :class:`asyncore.dispatcher` and :class:`asynchat.async_chat`, can freely be mixed in the channel map. Typically an :class:`asyncore.dispatcher` server channel generates new :class:`asynchat.async_chat` channel objects as it receives incoming connection requests."
msgstr ""
"Ten moduł buduje na infrastrukturze modułu :mod:`asyncore`, upraszczając "
"klientów i serwery asynchroniczne i czyniąc łatwiejszym obsługę protokołów "
"których elementy są zakańczane przez zadane ciągi znaków, lub są zmiennej "
"długości. Moduł :mod:`asynchat` określa abstrakcyjne uogólnienie "
":class:`async_chat` które możesz dostosować tworząc własne podrzędne "
"uogólnienie, dostarczając wypełnień sposobów postępowania "
":meth:`collect_incoming_data` i :meth:`found_terminator`. Używa tej samej "
"asynchronicznej pętli co moduł :mod:`asyncore`, i dwóch rodzajów kanałów,  - "
":class:`asyncore.dispatcher` i :class:`asynchat.async_chat`, mogą być "
"dowolnie być mieszane w mapie kanałów. Typowo kanał serwera "
":class:`asyncore.dispatcher` generuje nowe przedmioty kanałów "
":class:`asynchat.async_chat` gdy otrzymuje wchodzące zapytania o połączenie."

msgid "This class is an abstract subclass of :class:`asyncore.dispatcher`. To make practical use of the code you must subclass :class:`async_chat`, providing meaningful :meth:`collect_incoming_data` and :meth:`found_terminator` methods. The :class:`asyncore.dispatcher` methods can be used, although not all make sense in a message/response context."
msgstr ""
"To uogólnienie jest abstrakcyjnym  uogólnieniem podrzędnym względem "
"uogólnienia :class:`asyncore.dispatcher`. Aby praktycznie użyć kodu musisz "
"dostosować podrzędne uogólnienie względem uogólnienia :class:`async_chat`, "
"dostarczając sensownego wypełnienia sposobu postępowania "
":meth:`collect_incoming_data` i sposobu postępowania "
":meth:`found_terminator`. Sposoby postępowania uogólnienia "
":class:`asyncore.dispatcher` mogą być używane, chociaż nie wszystkie mają "
"sens w kontekście wiadomość/odpowiedź."

msgid "Like :class:`asyncore.dispatcher`, :class:`async_chat` defines a set of events that are generated by an analysis of socket conditions after a :cfunc:`select` call. Once the polling loop has been started the :class:`async_chat` object's methods are called by the event-processing framework with no action on the part of the programmer."
msgstr ""
"Tak jak w uogólnieniu :class:`asyncore.dispatcher` :class:`async_chat` "
"określa zestaw zdarzeń które są generowane przez analizę warunków gniazda po "
"wywołaniu zadania :cfunc:`select`. Gdy pętla sprawdzenia urządzenia została "
"rozpoczęta sposoby postępowania uogólnienia :class:`async_chat` są "
"wywoływane w szkielecie przetwarzającym zdarzenia bez ingerencji "
"programisty."

msgid "Two class attributes can be modified, to improve performance, or possibly even to conserve memory."
msgstr ""
"Dwie właściwości uogólnienia mogą być modyfikowane, aby poprawić wydajność, "
"lub nawet aby możliwie oszczędzać pamięć."

msgid "The asynchronous input buffer size (default ``4096``)."
msgstr ""
"Rozmiar przestrzeni wymiany wejściowej asynchronicznej (domyślnie ``4096``)."

msgid "The asynchronous output buffer size (default ``4096``)."
msgstr ""
"Rozmiar przestrzeni wymiany wyjściowej asynchronicznej (domyślnie ``4096``)."

msgid "Unlike :class:`asyncore.dispatcher`, :class:`async_chat` allows you to define a first-in-first-out queue (fifo) of *producers*. A producer need have only one method, :meth:`more`, which should return data to be transmitted on the channel. The producer indicates exhaustion (*i.e.* that it contains no more data) by having its :meth:`more` method return the empty string. At this point the :class:`async_chat` object removes the producer from the fifo and starts using the next producer, if any. When the producer fifo is empty the :meth:`handle_write` method does nothing. You use the channel object's :meth:`set_terminator` method to describe how to recognize the end of, or an important breakpoint in, an incoming transmission from the remote endpoint."
msgstr ""
"W przeciwieństwie do uogólnienia :class:`asyncore.dispatcher`, uogólnienie "
":class:`async_chat` pozwala ci definiować kolejkę pierwszy-na-wejściu-"
"pierwszy-na-wyjściu (fifo) *producentów*. Producent potrzebuje mieć tylko "
"jeden sposób postępowania :meth:`more` - z ang. - :meth:`więcej`, który "
"powinien zwrócić dane do transmisji w kanale. Producent zaznacza wyczerpanie "
"(t.j. że nie posiada więcej danych) przez to że jego sposób postępowania "
":meth:`more` zwróci pusty ciąg znaków. W tym momencie przedmiot "
":class:`async_chat` zdejmuje producenta z kolejki fifo i zaczyna używać "
"następnego producenta jeśli taki występuje. Gdy kolejka fifo producenta jest "
"pusta sposób postępowania :meth:`handle_write` nie robi nic. Używa się "
"sposobu postępowania :meth:`set_terminator` przedmiotu kanału aby opisać jak "
"rozpoznać koniec, lub istotny przerywnik w nadchodzącym sygnale z punktu "
"widzenia odległego krańca transmisji."

msgid "To build a functioning :class:`async_chat` subclass your  input methods :meth:`collect_incoming_data` and :meth:`found_terminator` must handle the data that the channel receives asynchronously. The methods are described below."
msgstr ""
"Aby zbudować funkcjonujące podrzędne uogólnienia względem uogólnienia "
":class:`async_chat`, twoje sposoby postępowania wprowadzania "
":meth:`collect_incoming_data` i :meth:`found_terminator` muszą obsługiwać "
"dane które kanał otrzymuje asynchronicznie. Sposoby postępowania są opisane "
"poniżej."

msgid "Pushes a ``None`` on to the producer fifo. When this producer is popped off the fifo it causes the channel to be closed."
msgstr ""
"Przepycha ``Żaden`` - z ang. - ``None`` na kolejkę producenta. Gdy producent "
"jest pobierany z wierzchu kolejki fifo, powoduje, że kanał jest zamykany."

msgid "Called with *data* holding an arbitrary amount of received data.  The default method, which must be overridden, raises a :exc:`NotImplementedError` exception."
msgstr ""
"Wywoływany z *danymi* przechowując określoną ilość otrzymanych danych. "
"Domyślny sposób postępowania, który musi zostać przesłonięty, zgłasza "
"wyjątek :exc:`NotImplementedError`."

msgid "In emergencies this method will discard any data held in the input and/or output buffers and the producer fifo."
msgstr ""
"W wyjątkowych sytuacjach ten sposób postępowania odrzuci dowolne dane "
"przechowywane w przestrzeniach wymiany wejściowej i/lub wyjściowej i kolejce "
"producenta fifo."

msgid "Called when the incoming data stream  matches the termination condition set by :meth:`set_terminator`. The default method, which must be overridden, raises a :exc:`NotImplementedError` exception. The buffered input data should be available via an instance attribute."
msgstr ""
"Wywoływana gdy przychodzący strumień danych odpowiada warunkowi zakończenia "
"ustawionemu przez sposób postępowania :meth:`set_terminator`. Domyślny "
"sposób postępowania, który musi być przesłonięty, zgłasza wyjątek "
":exc:`NotImplementedError`. Dane wejściowe z przestrzeni wymiany powinny być "
"dostępne przez właściwość przykładu."

msgid "Returns the current terminator for the channel."
msgstr "Zwraca obecne zakończenie dla kanału."

msgid "Pushes data on to the channel's fifo to ensure its transmission. This is all you need to do to have the channel write the data out to the network, although it is possible to use your own producers in more complex schemes to implement encryption and chunking, for example."
msgstr ""
"Przepycha dane w kolejkę fifo kanału aby zapewnić jej przesyłanie. To jest "
"wszystkim co musisz zrobić aby kanał zapisał dane na zewnątrz w sieci, "
"chociaż jest możliwe użycie swoich własnych producentów w bardziej złożonych "
"schematach aby wypełnić szyfrowanie lub kawałkowanie, dla przykładu."

msgid "Takes a producer object and adds it to the producer fifo associated with the channel.  When all currently-pushed producers have been exhausted the channel will consume this producer's data by calling its :meth:`more` method and send the data to the remote endpoint."
msgstr ""
"Pobiera przedmiot producenta i dodaje go do kolejki fifo producenta "
"związanej z kanałem. Gdy wszyscy obecnie-przepychani producenci zostaną "
"wyczerpani kanał skonsumuje dane producenta przez wezwanie swojego sposobu "
"postępowania :meth:`more` - z ang. - :meth:`więcej` i wysłać dane do "
"odległego drugiego końca linii."

msgid "Sets the terminating condition to be recognized on the channel.  ``term`` may be any of three types of value, corresponding to three different ways to handle incoming protocol data."
msgstr ""
"Ustawia warunek zakończenia aby był rozpoznany przez kanał. ``term`` może "
"być dowolną z trzech typów wartości, odpowiadających trzem różnym sposobom "
"obsługi przychodzących danych protokołu."

msgid "term"
msgstr "term - z ang. - termin"

msgid "Description"
msgstr "Opis"

msgid "*string*"
msgstr "*ciąg znaków*"

msgid "Will call :meth:`found_terminator` when the string is found in the input stream"
msgstr ""
"Wywoła sposób postępowania :meth:`found_terminator` gdy ciąg znaków zostanie "
"znaleziony w strumieniu wejściowym"

msgid "*integer*"
msgstr "*integer* - z ang. - *liczba całkowita*"

msgid "Will call :meth:`found_terminator` when the indicated number of characters have been received"
msgstr ""
"Wywoła :meth:`found_terminator` gdy wskazana liczba znaków zostanie odebrana"

msgid "``None``"
msgstr "``None`` - z ang. - ``Żaden``"

msgid "The channel continues to collect data forever"
msgstr "Kanał nadal zbiera dane w pętli nieskończonej"

msgid "Note that any data following the terminator will be available for reading by the channel after :meth:`found_terminator` is called."
msgstr ""
"Zauważ że dowolne dane następujące po terminatorze będą dostępne dla "
"przeczytania przez kanał po tym jak sposób postępowania "
":meth:`found_terminator` zostanie wywołany."

msgid "asynchat - Auxiliary Classes"
msgstr "asynchat - dodatkowe uogólnienia"

msgid "A :class:`fifo` holding data which has been pushed by the application but not yet popped for writing to the channel.  A :class:`fifo` is a list used to hold data and/or producers until they are required.  If the *list* argument is provided then it should contain producers or data items to be written to the channel."
msgstr ""
"Kolejka :class:`fifo` trzymająca dane które zostały popchnięte przez "
"aplikację ale jeszcze nie pobrane do wpisania ich do kanału. Kolejka "
":class:`fifo` jest listą używaną do przetrzymywania danych i/lub producentów "
"dopóki są one potrzebne. Jeśli parametr *listy* jest dostarczony wtedy "
"powinien zawierać producentów lub elementy danych do wpisania do kanału."

msgid "Returns ``True`` if and only if the fifo is empty."
msgstr ""
"Zwraca ``Prawdę`` - ``True`` wtedy i tylko wtedy gdy kolejka fifo jest "
"pusta."

msgid "Returns the least-recently :meth:`push`\\ ed item from the fifo."
msgstr ""
"Zwraca najdawniej :meth:`popchnięty` - z ang - :meth:`push`\\ ed element z "
"kolejki fifo."

msgid "Adds the given data (which may be a string or a producer object) to the producer fifo."
msgstr ""
"Dodaje podane dane (które mogą być ciągiem lub przedmiotem producenta) dla "
"kolejki fifo producenta."

msgid "If the fifo is not empty, returns ``True, first()``, deleting the popped item.  Returns ``False, None`` for an empty fifo."
msgstr ""
"Jeśli kolejka fifo nie jest pusta, zwraca ``Prawda, pierwszy()`` - z ang. - "
"``True, first()``, kasując pobrany element. Zwraca ``Fałsz, Żaden`` - z ang. "
"- ``False, None`` dla pustej kolejki fifo."

msgid "asynchat Example"
msgstr "Przykład asynchat"

msgid "The following partial example shows how HTTP requests can be read with :class:`async_chat`.  A web server might create an :class:`http_request_handler` object for each incoming client connection. Notice that initially the channel terminator is set to match the blank line at the end of the HTTP headers, and a flag indicates that the headers are being read."
msgstr ""
"Następujący częściowy przykład pokazuje jak zapytania HTTP mogą być wczytane "
"za pomocą :class:`async_chat`. Serwer sieci może tworzyć przedmiot "
":class:`http_request_handler` - z ang. - :class:`obsluge_zapytania_http` dla "
"każdego przychodzącego połączenia klienckiego. Zauważ że początkowo "
"zakończenie kanału jest ustalone aby odpowiadało pustej linii na końcu "
"nagłówka HTTP, i flaga wskazująca że nagłówki są wczytywane."

msgid "Once the headers have been read, if the request is of type POST (indicating that further data are present in the input stream) then the ``Content-Length:`` header is used to set a numeric terminator to read the right amount of data from the channel."
msgstr ""
"Gdy już nagłówki zostaną wczytane, jeśli zapytanie jest typu POST (wskazując "
"na to że dalsze dane są obecne w strumieniu wejściowym) wtedy nagłówek "
"``Content-Length:`` jest używany aby ustawić numeryczny terminator do "
"wczytania właściwej ilości danych z kanału."

msgid "The :meth:`handle_request` method is called once all relevant input has been marshalled, after setting the channel terminator to ``None`` to ensure that any extraneous data sent by the web client are ignored. ::"
msgstr ""
"Sposób postępowania :meth:`handle_request` - z ang. - "
":meth:`obsloz_zapytanie` jest wywoływane gdy już całe istotne wejście "
"zostało pobrane, po ustawieniu terminatora kanału na ``None`` - z ang. - "
"``Żaden`` aby upewnić się że jakiekolwiek nadmiarowe dane przesyłane przez "
"klienta sieci są ignorowane. ::"

msgid "class http_request_handler(asynchat.async_chat):      def __init__(self, sock, addr, sessions, log):         asynchat.async_chat.__init__(self, sock=sock)         self.addr = addr         self.sessions = sessions         self.ibuffer = []         self.obuffer = b\"\"         self.set_terminator(b\"\\r\\n\\r\\n\")         self.reading_headers = True         self.handling = False         self.cgi_data = None         self.log = log      def collect_incoming_data(self, data):         \"\"\"Buffer the data\"\"\"         self.ibuffer.append(data)      def found_terminator(self):         if self.reading_headers:             self.reading_headers = False             self.parse_headers(\"\".join(self.ibuffer))             self.ibuffer = []             if self.op.upper() == b\"POST\":                 clen = self.headers.getheader(\"content-length\")                 self.set_terminator(int(clen))             else:                 self.handling = True                 self.set_terminator(None)                 self.handle_request()         elif not self.handling:             self.set_terminator(None) # browsers sometimes over-send             self.cgi_data = parse(self.headers, b\"\".join(self.ibuffer))             self.handling = True             self.ibuffer = []             self.handle_request()"
msgstr ""
"class http_request_handler(asynchat.async_chat):      def __init__(self, "
"sock, addr, sessions, log):         asynchat.async_chat.__init__(self, "
"sock=sock)         self.addr = addr         self.sessions = sessions "
"        self.ibuffer = []         self.obuffer = b\"\"         "
"self.set_terminator(b\"\\r\\n\\r\\n\")         self.reading_headers = True "
"        self.handling = False         self.cgi_data = None         self.log "
"= log      def collect_incoming_data(self, data):         \"\"\"Buforuj "
"dane\"\"\"         self.ibuffer.append(data)      def found_terminator(self): "
"        if self.reading_headers:             self.reading_headers = False "
"            self.parse_headers(\"\".join(self.ibuffer))             "
"self.ibuffer = []             if self.op.upper() == b\"POST\": "
"                clen = self.headers.getheader(\"content-length\") "
"                self.set_terminator(int(clen))             else: "
"                self.handling = True                 "
"self.set_terminator(None)                 self.handle_request()         elif "
"not self.handling:             self.set_terminator(None) # przeglądarki "
"czasami przesyłają zbyt dużo             self.cgi_data = parse(self.headers, "
"b\"\".join(self.ibuffer))             self.handling = True             "
"self.ibuffer = []             self.handle_request()"

msgid ":mod:`asyncore` --- Asynchronous socket handler"
msgstr "Moduł :mod:`asyncore` --- Asynchroniczna obsługa gniazda"

msgid "This module provides the basic infrastructure for writing asynchronous  socket service clients and servers."
msgstr ""
"Ten moduł dostarcza podstawową infrastrukturę do pisania asynchronicznych "
"klientów i serwerów usługi gniazd."

msgid "There are only two ways to have a program on a single processor do  \"more than one thing at a time.\" Multi-threaded programming is the  simplest and most popular way to do it, but there is another very different technique, that lets you have nearly all the advantages of  multi-threading, without actually using multiple threads.  It's really  only practical if your program is largely I/O bound.  If your program is processor bound, then pre-emptive scheduled threads are probably what you really need.  Network servers are rarely processor bound, however."
msgstr ""
"Istnieją tylko dwa sposoby aby program na pojedynczym procesorze robił "
"\"więcej niż jedną rzecz na raz.\" Wielo-wątkowe programowanie jest "
"najprostszą i najczęściej spotykaną drogą aby to robić, ale istnieje inna "
"bardzo odmienna technika, która pozwala mieć prawie wszystkie zalety "
"wielowątkowości, bez używania wielu wątków. Jest ona tylko pomocna jeśli "
"twój program jest w większości związany z wejściem/wyjściem. Jeśli twój "
"program jest związany z procesorem, wtedy wywłaszczające planowane wątki są "
"najczęściej tym czego potrzebujesz. Serwery sieciowe jednakże są rzadko "
"związane z procesorem."

msgid "If your operating system supports the :cfunc:`select` system call in its I/O library (and nearly all do), then you can use it to juggle multiple communication channels at once; doing other work while your I/O is taking place in the \"background.\"  Although this strategy can seem strange and complex, especially at first, it is in many ways easier to understand and control than multi-threaded programming.  The :mod:`asyncore` module solves many of the difficult problems for you, making the task of building sophisticated high-performance network servers and clients a snap.  For \"conversational\" applications and protocols the companion :mod:`asynchat` module is invaluable."
msgstr ""
"Jeśli twój system operacyjny wspiera wywołanie systemowe :cfunc:`select`w "
"swojej bibliotece wejścia/wyjścia (a prawie wszystkie wspierają), wtedy "
"możesz używać go aby żonglować wiele kanałów komunikacji na raz; wykonywanie "
"innych zadań gdy twoje wejście/wyjście ma miejsce w \"tle\". Chociaż ta "
"strategia może wyglądać dziwnie i skomplikowanie, szczególnie na pierwszy "
"rzut oka, jest ona na wiele sposobów łatwiejsza do zrozumienia i "
"kontrolowania niż wielowątkowe programowanie. Moduł :mod:`asyncore` "
"rozwiązuje wiele trudnych kłopotów za ciebie, czyniąc zadanie budowania "
"zaawansowanych wysoko-wydajnych serwerów sieciowych i klientów oka-"
"mgnieniem. Dla \"konwersujących\" aplikacji i protokołów dołączony moduł "
":mod:`asynchat` jest nieoceniony."

msgid "The basic idea behind both modules is to create one or more network *channels*, instances of class :class:`asyncore.dispatcher` and :class:`asynchat.async_chat`.  Creating the channels adds them to a global map, used by the :func:`loop` function if you do not provide it with your own *map*."
msgstr ""
"Podstawowym pomysłem stojącym za oboma modułami jest stworzenie jednego lub "
"więcej *kanałów*, przykładów uogólnienia :class:`asyncore.dispatcher` i "
":class:`asynchat.async_chat`. Utworzenie kanałów dodaje je do globalnej "
"mapy, używanej przez zadanie :func:`loop` jeśli dostarczysz jej swojej "
"własnej *mapy*."

msgid "Once the initial channel(s) is(are) created, calling the :func:`loop` function activates channel service, which continues until the last channel (including any that have been added to the map during asynchronous service) is closed."
msgstr ""
"Gdy początkowy(e) kanał(y) jest(są) tworzony(e), wywołanie zadania "
":func:`loop` aktywuje usługę kanału, która kontynuuje zanim ostatni kanał "
"(włączając w to jakiekolwiek które zostały dodane do mapy podczas "
"asynchronicznej usługi) nie zostanie zamknięty."

msgid "Enter a polling loop that terminates after count passes or all open channels have been closed.  All arguments are optional.  The *count* parameter defaults to None, resulting in the loop terminating only when all channels have been closed.  The *timeout* argument sets the timeout parameter for the appropriate :func:`select` or :func:`poll` call, measured in seconds; the default is 30 seconds.  The *use_poll* parameter, if true, indicates that :func:`poll` should be used in preference to :func:`select` (the default is ``False``)."
msgstr ""
"Wejdź w pętlę odpytywania która kończy się po przekroczeniu zliczanej liczby "
"lub gdy wszystkie otwarte kanały zostaną zamknięte. Wszystkie parametry są "
"opcjonalne. Domyślną wartością *count* jest None - z ang. - Żaden, powodując "
"że pętla kończy się tylko gdy wszystkie kanały zostaną zamknięte. Parametr "
"*timeout* ustala parametr pozostałego czasu dla wywołań zadań :func:`select` "
"lub :func:`poll` mierzonych w sekundach: domyślna wartość to 30 sekund. "
"Parametr *use_poll* jeśli prawdziwy, wskazuje że zadanie :func:`poll` "
"powinno być użyte w sposób preferowany względem :func:`select` (domyślnie "
"jest ``Fałsz``)."

msgid "The *map* parameter is a dictionary whose items are the channels to watch. As channels are closed they are deleted from their map.  If *map* is omitted, a global map is used. Channels (instances of :class:`asyncore.dispatcher`, :class:`asynchat.async_chat` and subclasses thereof) can freely be mixed in the map."
msgstr ""
"Parametr *map* jest słownikiem którego elementami są kanały do oglądania. "
"Gdy kanały są zamykane są one kasowane z ich mapy. Jeśli *mapa* jest "
"pominięta, nadrzędna mapa jest używana. Kanały (przykłady uogólnienia "
":class:`asyncore.dispatcher` i :class:`asynchat.async_chat` i podrzędne "
"uogólnienia tychże) mogą dowolnie być mieszane wewnątrz mapy."

msgid "The :class:`dispatcher` class is a thin wrapper around a low-level socket object. To make it more useful, it has a few methods for event-handling which are called from the asynchronous loop.   Otherwise, it can be treated as a normal non-blocking socket object."
msgstr ""
"Uogólnienie :class:`dispatcher` jest cienkim opakowaniem wokół "
"niskopoziomowego przedmiotu gniazda. Aby uczynić je bardziej użytecznym, ma "
"kilka sposobów postępowania dla obsługi-zdarzeń które są wzywane z "
"asynchronicznej pętli. Poza tym, może być traktowana jako zwyczajny "
"nieblokujący przedmiot gniazda."

msgid "The firing of low-level events at certain times or in certain connection states tells the asynchronous loop that certain higher-level events have taken place.  For example, if we have asked for a socket to connect to another host, we know that the connection has been made when the socket becomes writable for the first time (at this point you know that you may write to it with the expectation of success).  The implied higher-level events are:"
msgstr ""
"Odpalanie niskopoziomowych zdarzeń w konkretnych momentach lub w konkretnych "
"stanach połączeń mówi pętli asynchronicznej że konkretne wyższego poziomu "
"zdarzenia miały miejsce. Dla przykładu, jeśli żądaliśmy aby gniazdo "
"podłączone było do innego hosta, wiemy że połączenie zostało ustanowione gdy "
"gniazdo stanie się możliwe do zapisania po raz pierwszy (w tym momencie "
"wiesz że możesz zapisać do niego oczekując powodzenia). Dorozumiane "
"zdarzenia wyższego poziomu to:"

msgid "Event"
msgstr "Zdarzenie"

msgid "``handle_connect()``"
msgstr "``handle_connect()``"

msgid "Implied by the first read or write event"
msgstr "Domyślne przez pierwsze zdarzenie odczytu lub zapisu"

msgid "``handle_close()``"
msgstr "``handle_close()``"

msgid "Implied by a read event with no data available"
msgstr "Domyślne przy zdarzeniu odczytu bez dostępnych danych"

msgid "``handle_accept()``"
msgstr "``handle_accept()``"

msgid "Implied by a read event on a listening socket"
msgstr "Domyślne przy zdarzeniu czytania na nasłuchującym gnieździe"

msgid "During asynchronous processing, each mapped channel's :meth:`readable` and :meth:`writable` methods are used to determine whether the channel's socket should be added to the list of channels :cfunc:`select`\\ ed or :cfunc:`poll`\\ ed for read and write events."
msgstr ""
"Podczas asynchronicznego przetwarzania, dla każdego mapowanego kanału "
"sposoby postępowania :meth:`readable` i :meth:`writable` są używane, aby "
"stwierdzić czy gniazdo danego kanału powinno być dodane do listy kanałów "
"wybranych za pomocą zadania :cfunc:`select` lub odpytanych za pomocą zadania "
":cfunc:`poll` dla zdarzeń odczytu i zapisu. "

msgid "Thus, the set of channel events is larger than the basic socket events.  The full set of methods that can be overridden in your subclass follows:"
msgstr ""
"Dlatego, zestaw zdarzeń kanałów jest większy, niż podstawowych zdarzeń "
"gniazda. Pełny zestaw sposobów postępowania, które mogą być przesłonięte w "
"twoim podrzędnym uogólnieniu jest następujący:"

msgid "Called when the asynchronous loop detects that a :meth:`read` call on the channel's socket will succeed."
msgstr ""
"Wywoływane, gdy asynchroniczna pętla wykryje, że wywołanie sposobu "
"postępowania na gnieździe kanału odniesie sukces."

msgid "Called when the asynchronous loop detects that a writable socket can be written.  Often this method will implement the necessary buffering for performance.  For example::"
msgstr ""
"Wywoływane, gdy asynchroniczna pętla wykryje, że możliwe do zapisu gniazdo "
"może być zapisane. Często ten sposób postępowania będzie wypełniał konieczne "
"wczytywanie z wyprzedzeniem dla poprawy wydajności. Dla przykładu::"

msgid "def handle_write(self):     sent = self.send(self.buffer)     self.buffer = self.buffer[sent:]"
msgstr ""
"def handle_write(self):     sent = self.send(self.buffer)     self.buffer = "
"self.buffer[sent:]"

msgid "Called when there is out of band (OOB) data for a socket connection.  This will almost never happen, as OOB is tenuously supported and rarely used."
msgstr ""
"Wywoływane gdy są dane poza zakresem (OOB) dla połączenia z gniazdem. To "
"raczej nie wystąpi nigdy, jako że OOB jest rzadko wspierany i rzadziej "
"jeszcze używany."

msgid "Called when the active opener's socket actually makes a connection.  Might send a \"welcome\" banner, or initiate a protocol negotiation with the remote endpoint, for example."
msgstr ""
"Wywoływane gdy gniazdo aktywnego otwierającego właściwie wywoła połączenie. "
"Może wysłać \"powitalny\" banner, lub zainicjować negocjację protokołu z "
"zewnętrznym punktem końcowym, dla przykładu."

msgid "Called when the socket is closed."
msgstr "Wywoływany gdy gniazdo jest zamykane."

msgid "Called when an exception is raised and not otherwise handled.  The default version prints a condensed traceback."
msgstr ""
"Wywoływane gdy wyjątek jest zgłaszany i nie jest inaczej obsługiwany. "
"Domyślna wersja wypisuje skumulowany wypis."

msgid "Called on listening channels (passive openers) when a connection can be established with a new remote endpoint that has issued a :meth:`connect` call for the local endpoint."
msgstr ""
"Wywoływany w nasłuchujących kanałach (pasywnych otwarciach) gdy połączenie "
"może być nawiązane z nowym odległym punktem końcowym który wystosował "
"wywołanie sposobu postępowania :meth:`connect` - z ang. - :meth:`połącz` z "
"lokalnym punktem końcowym."

msgid "Called each time around the asynchronous loop to determine whether a channel's socket should be added to the list on which read events can occur.  The default method simply returns ``True``, indicating that by default, all channels will be interested in read events."
msgstr ""
"Wywoływane za każdym razem dla asynchronicznej pętli aby ustalić, czy "
"gniazdo kanału powinno być dodane do listy na której zdarzenia wczytywania "
"mogą następować. Domyślny sposób po prostu zwraca ``Prawdę`` - z ang. - "
"``True``, wskazując że domyślnie wszystkie kanały będą zainteresowane "
"zdarzeniami wczytywania."

msgid "Called each time around the asynchronous loop to determine whether a channel's socket should be added to the list on which write events can occur.  The default method simply returns ``True``, indicating that by default, all channels will be interested in write events."
msgstr ""
"Wywoływane za każdym razem dla asynchronicznej pętli aby ustalić, czy "
"gniazdo kanału powinno być dodawane do listy na której zdarzenia zapisu mogą "
"następować. Domyślny sposób postępowania po prostu zwraca ``Prawdę`` - z "
"ang. - ``True``, wskazując że domyślnie, wszystkie kanały będą "
"zainteresowane zdarzeniami zapisu."

msgid "In addition, each channel delegates or extends many of the socket methods. Most of these are nearly identical to their socket partners."
msgstr ""
"Na dodatek, każdy kanał deleguje lub rozszerza wiele ze sposobów "
"postępowania gniazd. Większość z tych jest prawie identyczna z ich "
"partnerami gniazda."

msgid "This is identical to the creation of a normal socket, and will use the same options for creation.  Refer to the :mod:`socket` documentation for information on creating sockets."
msgstr ""
"To jest identyczne z utworzeniem normalnego gniazda, i będzie używało tych "
"samych opcji dla tworzenia. Zajrzyj do dokumentacji do :mod:`socket` - z "
"ang. - :mod:`gniazda` po więcej informacji o tworzeniu gniazd."

msgid "As with the normal socket object, *address* is a tuple with the first element the host to connect to, and the second the port number."
msgstr ""
"Tak jak z normalnymi przedmiotami gniazd, *adres* - z ang. - *address* jest "
"krotką z pierwszym elementem hosta do którego się podłącza, i drugim numerem "
"portu."

msgid "Send *data* to the remote end-point of the socket."
msgstr ""
"Prześlij *dane* - z ang. - *data* do odległego punktu końcowego gniazda."

msgid "Read at most *buffer_size* bytes from the socket's remote end-point.  An empty string implies that the channel has been closed from the other end."
msgstr ""
"Wczytaj większość bajtów (kęsów) o rozmiarze *buffer_size* z odległego "
"punktu końcowego gniazda. Pusty ciąg znaków oznacza że kanał został "
"zamknięty z przeciwległego końca."

msgid "Listen for connections made to the socket.  The *backlog* argument specifies the maximum number of queued connections and should be at least 1; the maximum value is system-dependent (usually 5)."
msgstr ""
"Nasłuchuj połączeń wykonywanych do gniazda. Parametr *wstecznego logu* - z "
"ang. - *backlog* określa maksymalną liczbę kolejkowanych połączeń i powinien "
"być równy przynajmniej 1; Wartość maksymalna jest zależna od systemu "
"(zwykle jest równa 5)."

msgid "Bind the socket to *address*.  The socket must not already be bound.  (The format of *address* depends on the address family --- refer to the :mod:`socket` documentation for more information.)  To mark the socket as re-usable (setting the :const:`SO_REUSEADDR` option), call the :class:`dispatcher` object's :meth:`set_reuse_addr` method."
msgstr ""
"Połącz gniazdo z *adresem* - z ang. - *address*. Gniazdo nie może być już "
"połączone z adresem. (Format *adresu* - z ang. - *address* zależy od rodziny "
"adresów --- zajrzyj do dokumentacji :mod:`socket` - z ang. - :mod:`gniazda` "
"po więcej informacji.) Aby oznaczyć gniazdo jako możliwe do ponownego "
"użycia - z ang. - re-usable (ustawiając opcję :const:`SO_REUSEADDR`), "
"wywołaj sposób postępowania :meth:`set_reuse_addr` przedmiotu "
":class:`dispatcher`."

msgid "Accept a connection.  The socket must be bound to an address and listening for connections.  The return value is a pair ``(conn, address)`` where *conn* is a *new* socket object usable to send and receive data on the connection, and *address* is the address bound to the socket on the other end of the connection."
msgstr ""
"Akceptuj połączenie. Gniazdo musi być podłączone do adresu i nasłuchiwać "
"połączeń. Zwracana wartość jest parą ``(conn, address)`` gdzie *conn* jest "
"*nowym* przedmiotem gniazda użytecznym do wysyłania i odbierania danych na "
"połączeniu, i *adres* jest adresem złączonym z gniazdem do drugiego końca "
"połączenia."

msgid "Close the socket.  All future operations on the socket object will fail. The remote end-point will receive no more data (after queued data is flushed).  Sockets are automatically closed when they are garbage-collected."
msgstr ""
"Zamknij gniazdo. Wszystkie przyszłe operacje na gnieździe zawiodą. Odległy "
"koniec nie dostanie więcej danych (po tym jak zakolejkowane dane zostaną "
"przesłane). Gniazda są automatycznie zamykane gdy są poddawane zbieraniu "
"śmieci."

msgid "A file_dispatcher takes a file descriptor or file object along with an optional map argument and wraps it for use with the :cfunc:`poll` or :cfunc:`loop` functions.  If provided a file object or anything with a :cfunc:`fileno` method, that method will be called and passed to the :class:`file_wrapper` constructor.  Availability: UNIX."
msgstr ""
"file_dispatcher pobiera deskryptor pliku lub przedmiot pliku razem z "
"opcjonalnym parametrem mapy i opakowuje go do użycia z zadaniami "
":cfunc:`poll` lub :cfunc:`loop`. Jeśli dostarczono przedmiot pliku lub "
"cokolwiek ze sposobem postępowania :cfunc:`fileno`, ten sposób postępowania "
"będzie wywołany i przekazany do konstruktora uogólnienia "
":class:`file_wrapper`. Dostępność: UNIX."

msgid "A file_wrapper takes an integer file descriptor and calls :func:`os.dup` to duplicate the handle so that the original handle may be closed independently of the file_wrapper.  This class implements sufficient methods to emulate a socket for use by the :class:`file_dispatcher` class.  Availability: UNIX."
msgstr ""
"Opakowanie file_wrapper pobiera całkowito-liczbowy deskryptor pliku i "
"wywołuje :func:`os.dup` aby zduplikować uchwyt tak że oryginalny uchwyt może "
"być zamknięty niezależnie od opakowania file_wrapper. To uogólnienie "
"wypełnia wystarczające sposoby postępowania do emulacji gniazda dla użycia "
"przez uogólnienie :class:`file_dispatcher` Dostępność UNIX."

msgid "asyncore Example basic HTTP client"
msgstr "Podstawowy klient HTTP Przykładu asyncore"

msgid "Here is a very basic HTTP client that uses the :class:`dispatcher` class to implement its socket handling::"
msgstr ""
"Tu jest bardzo podstawowy klient HTTP który używa uogólnienia "
":class:`dispatcher` do wypełnienia jego obsługi gniazda::"

msgid "import asyncore, socket  class http_client(asyncore.dispatcher):      def __init__(self, host, path):         asyncore.dispatcher.__init__(self)         self.create_socket(socket.AF_INET, socket.SOCK_STREAM)         self.connect( (host, 80) )         self.buffer = bytes('GET %s HTTP/1.0\\r\\n\\r\\n' % path, 'ascii')      def handle_connect(self):         pass      def handle_close(self):         self.close()      def handle_read(self):         print(self.recv(8192))      def writable(self):         return (len(self.buffer) > 0)      def handle_write(self):         sent = self.send(self.buffer)         self.buffer = self.buffer[sent:]  c = http_client('www.python.org', '/')  asyncore.loop()"
msgstr ""
"import asyncore, uogólnienie gniazda http_client(asyncore.dispatcher): def "
"__init__(self, host, path): asyncore.dispatcher.__init__(self) "
"self.create_socket(socket.AF_INET, socket.SOCK_STREAM) self.connect((host, "
"80) ) self.buffer = bytes('GET %s HTTP/1.0\r\n"
"\r\n"
"' % path, 'ascii') def handle_connect(self): pass def handle_close(self): "
"self.close() def handle_read(self): print(self.recv(8192)) def "
"writable(self): return (len(self.buffer) > 0) def handle_write(self): sent = "
"self.send(self.buffer) self.buffer = self.buffer[sent:] c = "
"http_client('www.python.org', '/') asyncore.loop()"

msgid ":mod:`atexit` --- Exit handlers"
msgstr ":mod:`atexit` --- obsługa Wychodzenia"

msgid "The :mod:`atexit` module defines functions to register and unregister cleanup functions.  Functions thus registered are automatically executed upon normal interpreter termination."
msgstr ""
"moduł :mod:`atexit` definiuje zadania aby zarejestrować i wyrejestrować "
"zadania porządkujące. Zadania tak zarejestrowane są automatycznie wykonywane "
"w momencie normalnego zakończenia programu interpretującego polecenia "
"języka pytonowskiego."

msgid "Note: the functions registered via this module are not called when the program is killed by a signal, when a Python fatal internal error is detected, or when :func:`os._exit` is called."
msgstr ""
"Zauważ: zadania zarejestrowane przez ten moduł nie są wywoływane gdy program "
"jest zamykany przez sygnał, lub gdy fatalny wewnętrzny błąd Pythona jest "
"napotykany, ani gdy :func:`os._exit` jest wywoływane."

msgid "Register *func* as a function to be executed at termination.  Any optional arguments that are to be passed to *func* must be passed as arguments to :func:`register`."
msgstr ""
"Rejestruje *func* jako zadanie do wykonania w momencie zakończenia. Dowolne "
"opcjonalne parametry które mają być przekazane do *funkcji* muszą być "
"przekazywane jako parametry dla zadania :func:`register`."

msgid "At normal program termination (for instance, if :func:`sys.exit` is called or the main module's execution completes), all functions registered are called in last in, first out order.  The assumption is that lower level modules will normally be imported before higher level modules and thus must be cleaned up later."
msgstr ""
"Przy normalnym zakończeniu programu (dla przykładu, jeśli :func:`sys.exit` "
"jest wywoływana lub zakończy się główne wykonanie modułu), wszystkie zadania "
"zarejestrowane są w porządku \"ostatni na wejściu pierwszy na wyjściu\". To "
"założenie polega na tym że niższego rzędu moduły będą normalnie importowane "
"przed wyższego rzędu modułami a zatem muszą być sprzątnięte później."

msgid "If an exception is raised during execution of the exit handlers, a traceback is printed (unless :exc:`SystemExit` is raised) and the exception information is saved.  After all exit handlers have had a chance to run the last exception to be raised is re-raised."
msgstr ""
"Jeśli wyjątek jest zgłaszany w czasie wykonania obsługi wyjścia, wypis "
"wsteczny jest wypisywany (chyba, że :exc:`SystemExit` zostanie zgłoszony) i "
"informacja o wyjątku jest zapisywana. Po tym jak wszystkie obsługujące "
"elementy miały szansę uruchomienia, ostatni wyjątek do zgłoszenia jest zg"
"łaszany-ponownie."

msgid "This function returns *func* which makes it possible to use it as a decorator without binding the original name to ``None``."
msgstr ""
"To zadanie zwraca *func* co umożliwia używanie tego jako dekoratora bez "
"podłączania oryginalnej nazwy do ``None`` - z ang. - ``Żaden``."

msgid "Remove a function *func* from the list of functions to be run at interpreter- shutdown.  After calling :func:`unregister`, *func* is guaranteed not to be called when the interpreter shuts down."
msgstr ""
"Usuń zadanie *func* z listy zadań do uruchomienia w momencie zakończenia "
"działania programu interpretującego polecenia języka pytonowskiego. Po "
"wywołaniu zadania :func:`unregister`, zadanie ma gwarantowane że nie będzie "
"wywoływane gdy program interpretujący polecenia języka pytonowskiego będzie "
"zamykany."

msgid "Useful example of :mod:`atexit` to read and write :mod:`readline` history files."
msgstr ""
"Użyteczny przykład modułu :mod:`atexit` do wczytywania i zapisu plików "
"historii :mod:`readline` modułu \"czytaj wiersz\"."

msgid ":mod:`atexit` Example"
msgstr "Przykład modułu :mod:`atexit`"

msgid "The following simple example demonstrates how a module can initialize a counter from a file when it is imported and save the counter's updated value automatically when the program terminates without relying on the application making an explicit call into this module at termination. ::"
msgstr ""
"Następujący prosty przykład demonstruje jak moduł może inicjować licznik z "
"pliku gdy jest importowany i zapisywać uaktualnioną wartość licznika "
"automatycznie gdy program kończy się bez opierania się na aplikacji "
"wykonującej jawne wywołanie do tego modułu w momencie zakończenia. ::"

msgid "try:     _count = int(open(\"/tmp/counter\").read()) except IOError:     _count = 0  def incrcounter(n):     global _count     _count = _count + n  def savecounter():     open(\"/tmp/counter\", \"w\").write(\"%d\" % _count)  import atexit atexit.register(savecounter)"
msgstr ""
"try:     _count = int(open(\"/tmp/counter\").read()) except IOError:     "
"_count = 0  def incrcounter(n):     global _count     _count = _count + n  "
"def savecounter():     open(\"/tmp/counter\", \"w\").write(\"%d\" % _count)  "
"import atexit atexit.register(savecounter)"

msgid "Positional and keyword arguments may also be passed to :func:`register` to be passed along to the registered function when it is called::"
msgstr ""
"Parametry pozycyjny i słowa kluczowego mogą także być przekazane do zadania "
":func:`register` aby były przekazywane razem do zarejestrowanego zadania gdy "
"jest wywoływane::"

msgid "def goodbye(name, adjective):     print('Goodbye, %s, it was %s to meet you.' % (name, adjective))  import atexit atexit.register(goodbye, 'Donny', 'nice')  # or: atexit.register(goodbye, adjective='nice', name='Donny')"
msgstr ""
"def goodbye(name, adjective):     print('Do zobaczenia, %s, było %s cię "
"widzieć.' % (name, adjective))  import atexit atexit.register(goodbye, "
"'Danio', 'miło')  # or: atexit.register(goodbye, adjective='miło', "
"name='Danio')"

msgid "Usage as a :term:`decorator`::"
msgstr "Użycie jako :term:`decorator`::"

msgid "import atexit  @atexit.register def goodbye():     print(\"You are now leaving the Python sector.\")"
msgstr ""
"import atexit  @atexit.register def dozobacznia():     print(\"Opuszczasz "
"teraz sektor pytonowski.\")"

msgid "This obviously only works with functions that don't take arguments."
msgstr "To oczywiście działa tylko z zadaniami które nie pobierają parametrów."

msgid ":mod:`audioop` --- Manipulate raw audio data"
msgstr "Moduł :mod:`audioop` --- Obsługuj surowe dane dźwiękowe"

msgid "The :mod:`audioop` module contains some useful operations on sound fragments. It operates on sound fragments consisting of signed integer samples 8, 16 or 32 bits wide, stored in Python strings.  All scalar items are integers, unless specified otherwise."
msgstr ""
"Moduł :mod:`audioop` zawiera pewne użyteczne operacje na fragmentach "
"dźwięku. Operuje na fragmentach dźwięku składających się z próbek z liczb "
"całkowitych ze znakiem 8, 16, lub 32 bitowej długości, zapamiętanych w "
"ciągach znaków języka pytonowskiego. Wszystkie skalarne elementy są liczbami "
"całkowitymi, chyba, że określono inaczej."

msgid "This module provides support for a-LAW, u-LAW and Intel/DVI ADPCM encodings."
msgstr ""
"Ten moduł dostarcza wsparcia dla kodowania a-LAW, u-LAW i Intel/DVI ADPCM."

msgid "A few of the more complicated operations only take 16-bit samples, otherwise the sample size (in bytes) is always a parameter of the operation."
msgstr ""
"Kilka z bardziej skomplikowanych operacji pobiera tylko 16-bitowe próbki, w "
"przeciwnym razie rozmiar próbki (w bajtach - kęsach) jest zawsze parametrem "
"operacji."

msgid "The module defines the following variables and functions:"
msgstr "Moduł definiuje następujące zmienne i zadania:"

msgid "This exception is raised on all errors, such as unknown number of bytes per sample, etc."
msgstr ""
"Ten wyjątek jest zgłaszany na wszystkich błędach takich jak nieznana liczba "
"bajtów na próbkę, itp."

msgid "Return a fragment which is the addition of the two samples passed as parameters. *width* is the sample width in bytes, either ``1``, ``2`` or ``4``.  Both fragments should have the same length."
msgstr ""
"Zwróć fragment, który jest dodaniem dwóch próbek przekazanych jako "
"parametrów. *szerokość* jest szerokością próbki w bajtach, ``1``, ``2`` lub "
"``4``. Oba fragmenty powinny być tej samej długości."

msgid "Decode an Intel/DVI ADPCM coded fragment to a linear fragment.  See the description of :func:`lin2adpcm` for details on ADPCM coding. Return a tuple ``(sample, newstate)`` where the sample has the width specified in *width*."
msgstr ""
"Dekoduj fragment zakodowany w Intel/DVI ADPCM do fragmentu liniowego. Zobacz "
"opis zadania :func:`lin2adpcm` dla szczegółów o kodowaniu ADPCM. Zwróć "
"krotkę ``(sample, newstate)`` gdzie sample ma szerokość określoną przez "
"*width*."

msgid "Convert sound fragments in a-LAW encoding to linearly encoded sound fragments. a-LAW encoding always uses 8 bits samples, so *width* refers only to the sample width of the output fragment here."
msgstr ""
"Konwertuj fragmenty dźwięku w kodowaniu a-LAW do liniowo zakodowanych "
"fragmentów dźwięku. Kodowanie a-LAW zawsze używa 8-bitowych próbek, więc "
"*width* ( - z ang. - szerokość) odnosi się tylko do szerokości próbki "
"wyjściowego fragmentu tutaj."

msgid "Return the average over all samples in the fragment."
msgstr "Zwróć średnią ze wszystkich próbek w tym fragmencie."

msgid "Return the average peak-peak value over all samples in the fragment. No filtering is done, so the usefulness of this routine is questionable."
msgstr ""
"Zwróć średnią wartość między-szczytową ponad wszystkimi próbkami w tym "
"fragmencie. Żadne filtrowanie nie jest dokonywane, więc użyteczność tego "
"zadania jest do zakwestionowania."

msgid "Return a fragment that is the original fragment with a bias added to each sample."
msgstr ""
"Zwróć fragment który jest oryginalnym fragmentem ze skrzywieniem ( - z ang. "
"- bias )  dodanym do każdej próbki."

msgid "Return the number of zero crossings in the fragment passed as an argument."
msgstr "Zwróć liczbę przekroczeń zera we fragmencie przekazanym jako parametr."

msgid "Return a factor *F* such that ``rms(add(fragment, mul(reference, -F)))`` is minimal, i.e., return the factor with which you should multiply *reference* to make it match as well as possible to *fragment*.  The fragments should both contain 2-byte samples."
msgstr ""
"Zwróć współczynnik *F* taki, że ``rms(dodaj(fragment, mnozenie(odniesienie "
"-F)))`` jest najmniejszy t.j. zwróć czynnik przez który powinno się pomnożyć "
"*odniesienie* aby dopasować jak to się tylko da do *fragmentu*. Fragmenty "
"powinny oba zawierać 2-bajtowe próbki."

msgid "The time taken by this routine is proportional to ``len(fragment)``."
msgstr ""
"Czas zabierany przez to zadanie jest proporcjonalny do długości fragmentu "
"``len(fragment)``."

msgid "Try to match *reference* as well as possible to a portion of *fragment* (which should be the longer fragment).  This is (conceptually) done by taking slices out of *fragment*, using :func:`findfactor` to compute the best match, and minimizing the result.  The fragments should both contain 2-byte samples. Return a tuple ``(offset, factor)`` where *offset* is the (integer) offset into *fragment* where the optimal match started and *factor* is the (floating-point) factor as per :func:`findfactor`."
msgstr ""
"Spróbuj dopasować *odniesienie* tak jak to się tylko da najlepiej do porcji "
"*fragmentu* (która powinna być dłuższym fragmentem). To jest (w teorii) "
"wykonywane przez wyjęcie wycinków z *fragmentu*, użycie zadania "
":func:`findfactor` aby znaleźć najlepsze dopasowanie, i minimalizując wynik. "
"Fragmenty powinny oba zawierać 2-bajtowe próbki. Zwróć krotkę ``(offset, "
"factor)`` gdzie *offset* jest (całkowitym) przesunięciem wewnątrz "
"*fragmentu* gdzie zaczyna się optymalne dopasowanie, a *factor* jest "
"(zmiennoprzecinkowym) czynnikiem jako dla zadania :func:`findfactor`."

msgid "Search *fragment* for a slice of length *length* samples (not bytes!) with maximum energy, i.e., return *i* for which ``rms(fragment[i*2:(i+length)*2])`` is maximal.  The fragments should both contain 2-byte samples."
msgstr ""
"Przeszukaj *fragment* w poszukiwaniu wycinka o długości *length* próbek (nie "
"bajtów!) z maksymalną energią, t.j., zwróć *i* dla którego "
"``rms(fragment[i*2:(i+length)*2])`` jest maksymalne. Fragmenty powinny oba "
"zawierać 2-bajtowe próbki."

msgid "The routine takes time proportional to ``len(fragment)``."
msgstr ""
"Zadanie zabiera czas proporcjonalny do długości fragmentu ``len(fragment)``."

msgid "Return the value of sample *index* from the fragment."
msgstr "Zwróć wartość próbki spod *indeksu* z danego fragmentu."

msgid "Convert samples to 4 bit Intel/DVI ADPCM encoding.  ADPCM coding is an adaptive coding scheme, whereby each 4 bit number is the difference between one sample and the next, divided by a (varying) step.  The Intel/DVI ADPCM algorithm has been selected for use by the IMA, so it may well become a standard."
msgstr ""
"Zamień sample na kodowanie 4 bitowe Intel/DVI ADPCM. Kodowanie ADPCM jest "
"schematem kodowania adaptacyjnego, gdzie każda 4 bitowa liczba jest różnicą "
"pomiędzy jedną próbką a następną, podzielonym przez (różnej wielkości) krok. "
"Algorytm Intel/DVI ADPCM został wybrany do użycia przez IMA, więc może "
"całkiem prawdopodobnie zostanie on standardem. "

msgid "*state* is a tuple containing the state of the coder.  The coder returns a tuple ``(adpcmfrag, newstate)``, and the *newstate* should be passed to the next call of :func:`lin2adpcm`.  In the initial call, ``None`` can be passed as the state. *adpcmfrag* is the ADPCM coded fragment packed 2 4-bit values per byte."
msgstr ""
"*stan* - z ang. *state* - jest krotką zawierającą stan kodera. Koder zwraca "
"krotkę ``(adpcmfrag, nowystan)``, i *nowystan* powinien zostać przekazany do "
"następnego wywołania zadania :func:`lin2adpcm`. W początkowym wywołaniu "
"``None`` może być przekazane jako stan. *adpcmfrag* jest fragmentem "
"zakodowanym ADPCM zapakowanym dwoma 4-bitowymi wartościami na bajt."

msgid "Convert samples in the audio fragment to a-LAW encoding and return this as a Python string.  a-LAW is an audio encoding format whereby you get a dynamic range of about 13 bits using only 8 bit samples.  It is used by the Sun audio hardware, among others."
msgstr ""
"Zamień próbki we fragmencie dźwięku na kodowanie a-LAW i zwróć wynik jako "
"ciąg znaków języka pytonowskiego. a-LAW jest formatem kodowania dźwięku "
"gdzie dostajesz dynamiczną skalę około 13 bitów używając tylko 8-bitowych "
"próbek. Jest on używany przez sprzęt audio firmy Sun, między innymi. "

msgid "Convert samples between 1-, 2- and 4-byte formats."
msgstr "Zamień próbki pomiędzy 1-, 2- i 4- bajtowymi formatami."

msgid "In some audio formats, such as .WAV files, 16 and 32 bit samples are signed, but 8 bit samples are unsigned.  So when converting to 8 bit wide samples for these formats, you need to also add 128 to the result::"
msgstr ""
"W pewnych formatach dźwięku, takich jak plikach .WAV, 16 i 32 bitowe próbki "
"są ze znakiem ale 8 bitowe próbki są bez znaku. Więc konwertując 8 bitowe "
"próbki dla tych formatów, potrzeba także dodać 128 do wyniku::"

msgid "new_frames = audioop.lin2lin(frames, old_width, 1) new_frames = audioop.bias(new_frames, 1, 128)"
msgstr ""
"new_frames = audioop.lin2lin(frames, old_width, 1) new_frames = "
"audioop.bias(new_frames, 1, 128)"

msgid "The same, in reverse, has to be applied when converting from 8 to 16 or 32 bit width samples."
msgstr ""
"To samo, odwrócone, musi być stosowane gdy konwertuje się z 8 do 16 lub 32 "
"bitów długości próbek."

msgid "Convert samples in the audio fragment to u-LAW encoding and return this as a Python string.  u-LAW is an audio encoding format whereby you get a dynamic range of about 14 bits using only 8 bit samples.  It is used by the Sun audio hardware, among others."
msgstr ""
"Zamień próbki we fragmencie dźwięku na kodowanie u-LAW i zwróć to jako ciąg "
"znaków języka pytonowskiego. u-LAW jest formatem kodowania dźwięku gdzie "
"dostajesz dynamiczną skalę około 14 bitów używając zaledwie 8-bitowych "
"próbek. Jest używane przez sprzęt dźwiękowy firmy Sun między innymi."

msgid "Return a tuple consisting of the minimum and maximum values of all samples in the sound fragment."
msgstr ""
"Zwróć krotkę składającą się z wartości minimum i maksimum ze wszystkich "
"próbek we fragmencie dźwięku. "

msgid "Return the maximum of the *absolute value* of all samples in a fragment."
msgstr "Zwróć maksimum *wartości bezwzględnej* wszystkich próbek we fragmencie."

msgid "Return the maximum peak-peak value in the sound fragment."
msgstr "Zwróć maksimum wartości między-szczytowej we fragmencie dźwięku."

msgid "Return a fragment that has all samples in the original fragment multiplied by the floating-point value *factor*.  Overflow is silently ignored."
msgstr ""
"Zwróć fragment który ma wszystkie próbki z oryginalnego fragmentu pomnożone "
"przez wartość zmiennoprzecinkową *factor*. Przekroczenie zakresu jest po "
"cichu ignorowane."

msgid "Convert the frame rate of the input fragment."
msgstr "Zamień prędkość ramek wejściowego fragmentu."

msgid "*state* is a tuple containing the state of the converter.  The converter returns a tuple ``(newfragment, newstate)``, and *newstate* should be passed to the next call of :func:`ratecv`.  The initial call should pass ``None`` as the state."
msgstr ""
"*stan* ( z ang. - *state*) jest krotką zawierającą stan konwertera. "
"Konwerter zwraca krotkę ``(nowyfragment, nowystan)``, i *nowystan* powinien "
"być przekazany do następnego wywołania zadania :func:`ratecv`. Pierwotne "
"wywołanie powinno przekazać ``None`` jako stan."

msgid "The *weightA* and *weightB* arguments are parameters for a simple digital filter and default to ``1`` and ``0`` respectively."
msgstr ""
"*WagaA* i *wagaB* parametry dla prostego filtra cyfrowego i domyślne "
"wartości ``1`` i ``0`` odpowiednio."

msgid "Reverse the samples in a fragment and returns the modified fragment."
msgstr "Odwraca próbki we fragmencie i zwraca zmodyfikowany fragment."

msgid "Return the root-mean-square of the fragment, i.e. ``sqrt(sum(S_i^2)/n)``."
msgstr ""
"Zwraca rms wartość średnio-kwadratową fragmentu, t.j. "
"``sqrt(sum(S_i^2)/n)``."

msgid "This is a measure of the power in an audio signal."
msgstr "To jest miara mocy w sygnale dźwiękowym."

msgid "Convert a stereo fragment to a mono fragment.  The left channel is multiplied by *lfactor* and the right channel by *rfactor* before adding the two channels to give a mono signal."
msgstr ""
"Zamień fragment stereo na fragment mono. Lewy kanał jest mnożony przez "
"*lfactor* a prawy kanał przez *rfactor* przed dodaniem obu kanałów które "
"dadzą sygnał mono."

msgid "Generate a stereo fragment from a mono fragment.  Each pair of samples in the stereo fragment are computed from the mono sample, whereby left channel samples are multiplied by *lfactor* and right channel samples by *rfactor*."
msgstr ""
"Generuj fragment stereo z fragmentu mono. Każda para próbek we fragmencie "
"stereo jest obliczana z próbki mono, gdzie próbki lewego kanału są mnożone "
"przez *lfactor* a prawego kanału przez *rfactor*. "

msgid "Convert sound fragments in u-LAW encoding to linearly encoded sound fragments. u-LAW encoding always uses 8 bits samples, so *width* refers only to the sample width of the output fragment here."
msgstr ""
"Zamień fragmenty dźwięku w kodowaniu u-LAW na liniowo zakodowane fragmenty "
"dźwięku. Kodowanie u-LAW zawsze używa 8-bitowych próbek, więc *szerokość* "
"odnosi się tylko do szerokości próbki wyjściowego fragmentu tutaj."

msgid "Note that operations such as :func:`.mul` or :func:`.max` make no distinction between mono and stereo fragments, i.e. all samples are treated equal.  If this is a problem the stereo fragment should be split into two mono fragments first and recombined later.  Here is an example of how to do that::"
msgstr ""
"Zauważ, że operacje takie jak :func:`.mul` lub :func:`.max` nie czynią "
"żadnych rozróżnień pomiędzy fragmentami mono i stereo, t.j. wszystkie próbki "
"są traktowane na równi. Jeśli jest to problem fragment stereo powinien być "
"podzielony na dwa fragmenty mono wpierw i połączony ponownie później. Tu "
"jest przykład jak to zrobić::"

msgid "def mul_stereo(sample, width, lfactor, rfactor):     lsample = audioop.tomono(sample, width, 1, 0)     rsample = audioop.tomono(sample, width, 0, 1)     lsample = audioop.mul(sample, width, lfactor)     rsample = audioop.mul(sample, width, rfactor)     lsample = audioop.tostereo(lsample, width, 1, 0)     rsample = audioop.tostereo(rsample, width, 0, 1)     return audioop.add(lsample, rsample, width)"
msgstr ""
"def mul_stereo(sample, width, lfactor, rfactor):     lsample = "
"audioop.tomono(sample, width, 1, 0)     rsample = audioop.tomono(sample, "
"width, 0, 1)     lsample = audioop.mul(sample, width, lfactor)     rsample = "
"audioop.mul(sample, width, rfactor)     lsample = audioop.tostereo(lsample, "
"width, 1, 0)     rsample = audioop.tostereo(rsample, width, 0, 1)     "
"return audioop.add(lsample, rsample, width)"

msgid "If you use the ADPCM coder to build network packets and you want your protocol to be stateless (i.e. to be able to tolerate packet loss) you should not only transmit the data but also the state.  Note that you should send the *initial* state (the one you passed to :func:`lin2adpcm`) along to the decoder, not the final state (as returned by the coder).  If you want to use :func:`struct.struct` to store the state in binary you can code the first element (the predicted value) in 16 bits and the second (the delta index) in 8."
msgstr ""
"Jeśli używać kodera ADPCM aby zbudować pakiety sieciowe i chcesz aby twój "
"protokół był bezstanowy (t.j. aby mógł tolerować utratę pakietów) powinieneś "
"nie tylko przesyłać dane ale także stan. Zauważ, że powinieneś przesłać "
"stan *początkowy* (ten który przesłałeś do zadania :func:`lin2adpcm`) do "
"dekodera, nie zaś stan końcowy (jaki zwracał koder). Jeśli chcesz użyć "
"zadania :func:`struct.struct`, aby zachować stan w postaci binarnej możesz "
"zakodować pierwszy element (wartość przewidywaną) w 16 bitach i drugą "
"wartość (delta indeks) w 8."

msgid "The ADPCM coders have never been tried against other ADPCM coders, only against themselves.  It could well be that I misinterpreted the standards in which case they will not be interoperable with the respective standards."
msgstr ""
"Kodery ADPCM nigdy nie były próbowane naprzeciw innych koderów ADPCM, tylko "
"naprzeciw samym sobie. Może się tak zdarzyć, że nadinterpretowałem standard "
"w którym to przypadku nie będą współpracowały z odpowiadającymi im "
"standardami."

msgid "The :func:`find\\*` routines might look a bit funny at first sight. They are primarily meant to do echo cancellation.  A reasonably fast way to do this is to pick the most energetic piece of the output sample, locate that in the input sample and subtract the whole output sample from the input sample::"
msgstr ""
"Zadania :func:`find\\*` mogą wyglądać trochę śmiesznie na pierwszy rzut oka. "
"Są one pomyślane w pierwszej kolejności aby wykonywać anulowanie echa. "
"Rozsądnie szybką drogą aby tego dokonać jest wybrać najbardziej energetyczny "
"kawałek wyjściowych próbek, znaleźć to w próbkach wejściowych i odjąć całą "
"wyjściową próbkę od próbki wejściowej::"

msgid "def echocancel(outputdata, inputdata):     pos = audioop.findmax(outputdata, 800)    # one tenth second     out_test = outputdata[pos*2:]     in_test = inputdata[pos*2:]     ipos, factor = audioop.findfit(in_test, out_test)     # Optional (for better cancellation):     # factor = audioop.findfactor(in_test[ipos*2:ipos*2+len(out_test)],     #              out_test)     prefill = '\\0'*(pos+ipos)*2     postfill = '\\0'*(len(inputdata)-len(prefill)-len(outputdata))     outputdata = prefill + audioop.mul(outputdata,2,-factor) + postfill     return audioop.add(inputdata, outputdata, 2)"
msgstr ""
"def echocancel(outputdata, inputdata):     pos = audioop.findmax(outputdata, "
"800)    # jedna dziesiąta sekundy     out_test = outputdata[pos*2:]     "
"in_test = inputdata[pos*2:]     ipos, factor = audioop.findfit(in_test, "
"out_test)     # Optional (dla lepszego anulowania):     # factor = "
"audioop.findfactor(in_test[ipos*2:ipos*2+len(out_test)],     #              "
"out_test)     prefill = '\\0'*(pos+ipos)*2     postfill = "
"'\\0'*(len(inputdata)-len(prefill)-len(outputdata))     outputdata = prefill "
"+ audioop.mul(outputdata,2,-factor) + postfill     return "
"audioop.add(inputdata, outputdata, 2)"

msgid ":mod:`base64` --- RFC 3548: Base16, Base32, Base64 Data Encodings"
msgstr ""
"moduł :mod:`base64` --- RFC 3548: kodowania danych Base16 Base32, Base64"

msgid "This module provides data encoding and decoding as specified in :rfc:`3548`. This standard defines the Base16, Base32, and Base64 algorithms for encoding and decoding arbitrary binary strings into text strings that can be safely sent by email, used as parts of URLs, or included as part of an HTTP POST request.  The encoding algorithm is not the same as the :program:`uuencode` program."
msgstr ""
"Ten moduł dostarcza kodowanie i dekodowanie jak określono w :rfc:`3548` Ten "
"standard definiuje algorytmy kodowania i dekodowania Base16, Base32, Base64 "
"danych binarnych ciągów na tekstowe ciągi znaków które mogą być bezpiecznie "
"przesyłane przez email, użyte jako część adresu URL lub załączone jako część "
"zapytania HTTP POST. Algorytm kodowania nie jest ten sam, jak program "
":program:`uuencode`."

msgid "There are two interfaces provided by this module.  The modern interface supports encoding and decoding string objects using all three alphabets.  The legacy interface provides for encoding and decoding to and from file-like objects as well as strings, but only using the Base64 standard alphabet."
msgstr ""
"Istnieją dwa sprzęgi dostarczane przez ten moduł. Współczesny sprzęg wspiera "
"kodowanie i dekodowanie przedmiotów ciągów przy użyciu wszystkich trzech "
"alfabetów. Ubiegłe sprzęgi dostarczają kodowania i dekodowania do i z pliko-"
"podobnych przedmiotów zarówno jak ciągów znaków, ale tylko przy użyciu "
"standardowego alfabetu Base64."

msgid "The modern interface provides:"
msgstr "Nowy sprzęg dostarcza:"

msgid "Encode a string use Base64."
msgstr "Zakoduj ciąg znaków używając Base64."

msgid "*s* is the string to encode.  Optional *altchars* must be a string of at least length 2 (additional characters are ignored) which specifies an alternative alphabet for the ``+`` and ``/`` characters.  This allows an application to e.g. generate URL or filesystem safe Base64 strings.  The default is ``None``, for which the standard Base64 alphabet is used."
msgstr ""
"*s* jest ciągiem znaków do zakodowania. Opcjonalne *altchars* alternatywne "
"znaki muszą być ciągiem o długości co najmniej 2 znaków (dodatkowe znaki są "
"ignorowane) co określa alternatywny alfabet dla znaków ``+`` i ``/``. To "
"pozwala aplikacji na przykład do generowania adresów URL lub bezpiecznych "
"dla systemu plików ciągów znaków Base64. Domyślne jest ``None``, dla którego "
"standardowy alfabet Base64 jest używany."

msgid "The encoded string is returned."
msgstr "Zakodowany ciąg znaków jest zwracany."

msgid "Decode a Base64 encoded string."
msgstr "Zdekoduj zakodowany ciąg znaków."

msgid "*s* is the string to decode.  Optional *altchars* must be a string of at least length 2 (additional characters are ignored) which specifies the alternative alphabet used instead of the ``+`` and ``/`` characters."
msgstr ""
"*s* jest ciągiem do zdekodowania. Opcjonalne *altchars* muszą być ciągiem o "
"długości co najmniej 2 znaków (dodatkowe znaki są ignorowane) które "
"określają alternatywny alfabet używany zamiast znaków ``+`` i ``/``."

msgid "The decoded string is returned.  A :exc:`TypeError` is raised if *s* were incorrectly padded or if there are non-alphabet characters present in the string."
msgstr ""
"Zdekodowany ciąg znaków jest zwracany. Wyjątek :exc:`TypeError` jest "
"zgłaszany jeśli *s* zostały niewłaściwie uzupełnione lub jeśli są nie-"
"alfabetyczne znaki obecne w ciągu znaków."

msgid "Encode string *s* using the standard Base64 alphabet."
msgstr "Zakoduj ciąg *s* używając standardowego alfabetu Base64."

msgid "Decode string *s* using the standard Base64 alphabet."
msgstr "Zdekoduj ciąg znaków *s* używając standardowego alfabetu Base64."

msgid "Encode string *s* using a URL-safe alphabet, which substitutes ``-`` instead of ``+`` and ``_`` instead of ``/`` in the standard Base64 alphabet.  The result can still contain ``=``."
msgstr ""
"Zakoduj ciąg znaków *s* używając bezpieczny dla adresów URL alfabet, który "
"zamienia ``-`` zamiast ``+`` i ``_`` zamiast ``/`` w standardowym alfabecie "
"Base64. Wynik może wciąż zawierać znak ``=``."

msgid "Decode string *s* using a URL-safe alphabet, which substitutes ``-`` instead of ``+`` and ``_`` instead of ``/`` in the standard Base64 alphabet."
msgstr ""
"Zdekoduj ciąg znaków *s* używając alfabetu bezpiecznego dla adresów URL "
"który zamienia ``-`` na ``+`` i ``_`` zamiast ``/`` w standardowym alfabecie "
"Base64."

msgid "Encode a string using Base32.  *s* is the string to encode.  The encoded string is returned."
msgstr ""
"Zakoduj ciąg znaków używając Base32. *s* jest ciągiem do zakodowania. "
"Zakodowany ciąg znaków jest zwracany."

msgid "Decode a Base32 encoded string."
msgstr "Zdekoduj ciąg znaków zakodowany używając kodowania Base32. "

msgid "*s* is the string to decode.  Optional *casefold* is a flag specifying whether a lowercase alphabet is acceptable as input.  For security purposes, the default is ``False``."
msgstr ""
"*s* jest ciągiem znaków do zdekodowania. Opcjonalna *casefold* jest flagą "
"określającą czy alfabet małych liter jest akceptowalny jako wejście. Ze "
"względów bezpieczeństwa, domyślnie jest to ``Fałsz`` - z ang. - ``False``."

msgid ":rfc:`3548` allows for optional mapping of the digit 0 (zero) to the letter O (oh), and for optional mapping of the digit 1 (one) to either the letter I (eye) or letter L (el).  The optional argument *map01* when not ``None``, specifies which letter the digit 1 should be mapped to (when *map01* is not ``None``, the digit 0 is always mapped to the letter O).  For security purposes the default is ``None``, so that 0 and 1 are not allowed in the input."
msgstr ""
":rfc:`3548` zezwala na dodatkowe mapowanie cyfry 0 (zero) do litery O (o), i "
"opcjonalne mapowanie cyfry 1 (jeden) albo do litery I (i) lub litery L "
"(el). Opcjonalny parametr *map01* jeśli nie ``Żaden`` - z ang. - ``None``, "
"określa do których liter cyfra 1 powinna być zmapowana (gdy *map01* nie jest "
"``None``, cyfra 0 jest zawsze mapowana do litery O). Ze względów "
"bezpieczeństwa domyślnie jest to ``Żaden`` - z ang. - ``None``, więc 0 i 1 "
"nie są pozwalane w ciągu wejściowym. "

msgid "Encode a string using Base16."
msgstr "Zakoduj ciąg znaków używając Base16."

msgid "*s* is the string to encode.  The encoded string is returned."
msgstr ""
"*s* jest ciągiem znaków do zakodowania. Zakodowany ciąg znaków jest "
"zwracany."

msgid "Decode a Base16 encoded string."
msgstr "Zdekoduj ciąg znaków zakodowany za pomocą Base16."

msgid "The legacy interface:"
msgstr "Przestarzały sprzęg:"

msgid "Decode the contents of the binary *input* file and write the resulting binary data to the *output* file. *input* and *output* must either be file objects or objects that mimic the file object interface working with bytes objects. *input* will be read until ``input.read()`` returns an empty string."
msgstr ""
"Zdekoduj zawartość binarnego pliku *wejściowego* i zapisz wynikowe dane "
"binarne do pliku *wyjściowego*. *input* - z ang. - *wejściowy* i *output* - "
"z ang. - *wyjściowy*  muszą być przedmiotami plików lub przedmiotami "
"udającymi sprzęg przedmiotu pliku pracujący z przedmiotem bytes. *input* - z "
"ang. - *wejściowy* będzie wczytywany dopóki ``input.read()`` nie zwróci "
"pustego ciągu znaków."

msgid "Decode the bytestring *s*, which must contain one or more lines of base64 encoded data, and return a bytestring containing the resulting binary data. ``decodestring`` is a deprecated alias."
msgstr ""
"Zdekoduje ciąg-bajtów *s*, który musi zawierać jedną lub więcej linię "
"zakodowanych danych w base64, i zwraca ciąg bajtów zawierających wynikowe "
"dane binarne. ``decodestring`` jest przestarzałym synonimem."

msgid "Encode the contents of the binary *input* file and write the resulting base64 encoded data to the *output* file. *input* and *output* must either be file objects or objects that mimic the file object interface working with bytes objects. *input* will be read until ``input.read()`` returns an empty string. :func:`encode` returns the encoded data plus a trailing newline character (``b'\\n'``)."
msgstr ""
"Zakoduj zawartość binarnego pliku *wejściowego* i zapisz wynikające dane "
"zakodowane w base64 do pliku *wyjściowego*. *Wejściowe* - z ang. - *input* i "
"*wyjściowe* - z ang - *output* musi albo być przedmiotem pliku lub "
"przedmiotami które udają sprzęg przedmiotu plikowego pracujący z "
"przedmiotami bajtowymi. *wejściowy* będzie wczytywany dopóki "
"``input.read()`` nie zwróci pustego ciągu znaków. :func:`encode` zwraca "
"zakodowane dane plus kończący znak nowego wiersza (``b'\n"
"'``)."

msgid "Encode the bytestring *s*, which can contain arbitrary binary data, and return a bytestring containing one or more lines of base64-encoded data. :func:`encodebytes` returns a string containing one or more lines of base64-encoded data always including an extra trailing newline (``b'\\n'``). ``encodestring`` is a deprecated alias."
msgstr ""
"Zakoduj ciąg bajtów *s*, który może zawierać dowolne binarne dane, i zwracać "
"ciąg bajtów zawierający jedną lub więcej linii danych zakodowanych "
"kodowaniem base64. Zadanie :func:`encodebytes` zwraca ciąg zawierający jedną "
"lub więcej linii zakodowanych danych kodem base64 zawsze zawierający "
"dodatkowy znak nowej linii (``b'\n"
"'``). ``encodestring`` jest przestarzałym synonimem."

msgid "An example usage of the module:"
msgstr "Przykładowe użycie modułu:"

msgid ">>> import base64 >>> encoded = base64.b64encode('data to be encoded') >>> encoded b'ZGF0YSB0byBiZSBlbmNvZGVk' >>> data = base64.b64decode(encoded) >>> data 'data to be encoded'"
msgstr ""
">>> import base64 >>> encoded = base64.b64encode('dane do zakodowania') >>> "
"encoded 'ZGFuZSBkbyB6YWtvZG93YW5pYQ==' >>> data = base64.b64decode(encoded) "
">>> data 'dane do zakodowania'"

msgid "Support module containing ASCII-to-binary and binary-to-ASCII conversions."
msgstr ""
"Wspierający moduł zawierający konwersję ASCII-do-binarnego i binarnego-do-"
"ASCII."

msgid "Section 5.2, \"Base64 Content-Transfer-Encoding,\" provides the definition of the base64 encoding."
msgstr ""
"Sekcja 5.2, \"Base64 Treść-Transfer-Kodowanie,\" dostarcza definicji kodowania "
"base64."

msgid ":mod:`bdb` --- Debugger framework"
msgstr ":mod:`bdb` --- szkielet debugowania"

msgid "The :mod:`bdb` module handles basic debugger functions, like setting breakpoints or managing execution via the debugger."
msgstr ""
"Moduł :mod:`bdb` obsługuje podstawowe zadania debuggera, jak ustawianie "
"punktów przerywania lub zarządzenie wykonaniem przez debugger."

msgid "The following exception is defined:"
msgstr "Następujący wyjątek jest zdefiniowany:"

msgid "Exception raised by the :class:`Bdb` class for quitting the debugger."
msgstr ""
"Wyjątek zgłaszany przez uogólnienie :class:`Bdb` dla wyjścia z "
"odpluskwiania."

msgid "The :mod:`bdb` module also defines two classes:"
msgstr "Moduł :mod:`bdb` definiuje dwa uogólnienia:"

msgid "This class implements temporary breakpoints, ignore counts, disabling and (re-)enabling, and conditionals."
msgstr ""
"To uogólnienie wypełnia tymczasowe punkty przerywania, liczniki ignorowania, "
"wyłączanie i (ponowne-)włączanie i warunkowe."

msgid "Breakpoints are indexed by number through a list called :attr:`bpbynumber` and by ``(file, line)`` pairs through :attr:`bplist`.  The former points to a single instance of class :class:`Breakpoint`.  The latter points to a list of such instances since there may be more than one breakpoint per line."
msgstr ""
"Punkty przerywania są numerowane przez liczbę dla listy zwanej "
":attr:`bpbynumber` i przez pary ``(file, line)`` przez :attr:`bplist`. "
"Poprzednie wskazuje na pojedynczy przykład uogólnienia :class:`Breakpoint` - "
"z ang. - punkt przerywania. Ten drugi wskazuje na listę takich przykładów "
"gdyż może być więcej niż jeden punkt przerywania na linię."

msgid "When creating a breakpoint, its associated filename should be in canonical form.  If a *funcname* is defined, a breakpoint hit will be counted when the first line of that function is executed.  A conditional breakpoint always counts a hit."
msgstr ""
"Gdy tworzony jest punkt przerywania, związana z nim nazwa pliku powinna być "
"w kanonicznej formie. Jeśli nazwa zadania jest określona - z ang. - "
"*funcname*, uderzenie w punkt przerywania będzie się liczyła gdy pierwsza "
"linia tego zadania będzie wykonana. Warunkowy punkt przerywania zawsze liczy "
"się jako uderzenie."

msgid ":class:`Breakpoint` instances have the following methods:"
msgstr ""
"Przykłady uogólnienia :class:`Breakpoint` mają następujące sposoby "
"postępowania:"

msgid "Delete the breakpoint from the list associated to a file/line.  If it is the last breakpoint in that position, it also deletes the entry for the file/line."
msgstr ""
"Skasuj punkt przerywania wykonania z listy związanej z plikiem/linią. Jeśli "
"jest to ostatni punkt przerywania w tej pozycji, on także kasuje wpis dla "
"pliku/linii."

msgid "Mark the breakpoint as enabled."
msgstr "Oznacz punkt przerywania wykonania jako włączony."

msgid "Mark the breakpoint as disabled."
msgstr "Oznacz punkt przerywania wykonania jako wyłączony."

msgid "Print all the information about the breakpoint:"
msgstr "Wydrukuj wszystkie informacje o punkcie przerywania:"

msgid "The breakpoint number."
msgstr "Numer punktu przerywania"

msgid "If it is temporary or not."
msgstr "Czy jest tymczasowy czy nie."

msgid "Its file,line position."
msgstr "Jego pozycja plik,linia."

msgid "The condition that causes a break."
msgstr "Warunek który powoduje przerwanie wykonania."

msgid "If it must be ignored the next N times."
msgstr "To czy musi być ignorowany następnych N razy."

msgid "The breakpoint hit count."
msgstr "Liczba trafień punktu przerywania."

msgid "The :class:`Bdb` class acts as a generic Python debugger base class."
msgstr ""
"Uogólnienie :class:`Bdb` działa jako zastępcze uogólnienie odpluskwiania "
"języka pytonowskiego."

msgid "This class takes care of the details of the trace facility; a derived class should implement user interaction.  The standard debugger class (:class:`pdb.Pdb`) is an example."
msgstr ""
"To uogólnienie zajmuje się szczegółami urządzenia śledzenia; pochodne "
"uogólnienie powinno wypełniać interakcję z użytkownikiem. Standardowe "
"uogólnienie odpluskwiania (:class:`pdb.Pdb`) jest przykładem."

msgid "The *skip* argument, if given, must be an iterable of glob-style module name patterns.  The debugger will not step into frames that originate in a module that matches one of these patterns. Whether a frame is considered to originate in a certain module is determined by the ``__name__`` in the frame globals."
msgstr ""
"Parametr *skip*, jeśli dany musi być iterowalnym wzorcem nazwy modułu w "
"stylu-glob. Odpluskwianie nie wejdzie w ramki które zaczynają się w module "
"który pasuje do jednego ze wzorców. To czy ramka jest uznawana za pochodzącą "
"z konkretnego modułu jest określane przez nazwę ``__name__`` w globalnych "
"ramkach."

msgid "The following methods of :class:`Bdb` normally don't need to be overridden."
msgstr ""
"Następujące sposoby postępowania uogólnienia :class:`Bdb` zwykle nie "
"potrzebują być przesłaniane."

msgid "Auxiliary method for getting a filename in a canonical form, that is, as a case-normalized (on case-insensitive filesystems) absolute path, stripped of surrounding angle brackets."
msgstr ""
"Dodatkowy sposób postępowania dla pobierania nazwy pliku w kanonicznej "
"formie, to jest, jako znormalizowane względem wielkości liter (w systemach "
"plików niewrażliwych na rozmiar liter) bezwzględne ścieżki dostępu okrojone "
"z otaczających ostrych nawiasów."

msgid "Set the :attr:`botframe`, :attr:`stopframe`, :attr:`returnframe` and :attr:`quitting` attributes with values ready to start debugging."
msgstr ""
"Ustaw właściwości :attr:`botframe`, :attr:`stopframe`, :attr:`returnframe` i "
":attr:`quitting` z wartościami gotowymi do rozpoczęcia odpluskwiania."

msgid "This function is installed as the trace function of debugged frames.  Its return value is the new trace function (in most cases, that is, itself)."
msgstr ""
"To zadanie jest instalowane jako zadanie śledzenia odpluskwianych ramek. Jej "
"wartość zwracana jest nowym zadaniem śledzenia (w większości przypadków, to "
"jest, ono samo)."

msgid "The default implementation decides how to dispatch a frame, depending on the type of event (passed as a string) that is about to be executed. *event* can be one of the following:"
msgstr ""
"Domyślne wypełnienie decyduje jak obsłużyć ramkę, w zależności od rodzaju "
"zdarzenia (przekazanego jako ciąg znaków) które właśnie ma być wykonane. "
"*event* może być jednym z następujących:"

msgid "``\"line\"``: A new line of code is going to be executed."
msgstr "``\"line\"``: Nowa linia kodu będzie wykonywana."

msgid "``\"call\"``: A function is about to be called, or another code block entered."
msgstr ""
"``\"call\"``: Zadanie będzie za chwilę wywołane, lub nastąpi wkroczenie do "
"następnego bloku kodu."

msgid "``\"return\"``: A function or other code block is about to return."
msgstr "``\"return\"``: Zadanie lub inny blok kodu jest gotowy do powrotu."

msgid "``\"exception\"``: An exception has occurred."
msgstr "``\"wyjątek\"`` - z ang. - ``\"exception\"``: Wyjątek nastąpił."

msgid "``\"c_call\"``: A C function is about to be called."
msgstr "``\"c_call\"``: Zadanie C będzie wywoływane."

msgid "``\"c_return\"``: A C function has returned."
msgstr "``\"c_return\"``: Zadanie C wykonało powrót."

msgid "``\"c_exception\"``: A C function has thrown an exception."
msgstr ""
"``\"wyjątek_c\"`` - z ang. - ``\"c_exception\"``: zadanie C wyrzuciło wyjątek."

msgid "For the Python events, specialized functions (see below) are called.  For the C events, no action is taken."
msgstr ""
"Dla zdarzeń języka pytonowskiego, specjalizowane zadania (zobacz poniżej) są "
"wywoływane. Dla zdarzeń C, żadne działanie nie jest podejmowane."

msgid "The *arg* parameter depends on the previous event."
msgstr "Parametr *arg* zależy od poprzedniego zdarzenia."

msgid "See the documentation for :func:`sys.settrace` for more information on the trace function.  For more information on code and frame objects, refer to :ref:`types`."
msgstr ""
"Zobacz dokumentację dla :func:`sys.settrace` po więcej informacji o zadaniu "
"śledzenia. Po więcej informacji o kodzie i przedmiotach ramek, odwołaj się "
"do :ref:`types`."

msgid "If the debugger should stop on the current line, invoke the :meth:`user_line` method (which should be overridden in subclasses). Raise a :exc:`BdbQuit` exception if the :attr:`Bdb.quitting` flag is set (which can be set from :meth:`user_line`).  Return a reference to the :meth:`trace_dispatch` method for further tracing in that scope."
msgstr ""
"Jeśli odpluskwianie powinno zatrzymać się na obecnej linii, wywołaj sposób "
"postępowania :meth:`user_line` (która powinna być przesłonięta w podrzędnych "
"uogólnieniach). Zgłoś wyjątek :exc:`BdbQuit` jeśli flaga "
":attr:`Bdb.quitting` jest ustawiona (co może zostać ustawione z "
":meth:`user_line`). Zwróć odniesienie do sposobu postępowania "
":meth:`trace_dispatch` dla dalszego śledzenia w tym kontekście."

msgid "If the debugger should stop on this function call, invoke the :meth:`user_call` method (which should be overridden in subclasses). Raise a :exc:`BdbQuit` exception if the :attr:`Bdb.quitting` flag is set (which can be set from :meth:`user_call`).  Return a reference to the :meth:`trace_dispatch` method for further tracing in that scope."
msgstr ""
"Jeśli odpluskwianie powinno zakończyć się w tym wywołaniu zadania, wywołaj "
"sposób postępowania :meth:`user_call` (co powinno być przesłonięte w "
"podrzędnych uogólnieniach). Zgłoś wyjątek :exc:`BdbQuit` jeśli flaga "
":attr:`Bdb.quitting` jest ustawiona (co może być ustawione ze sposobu "
"postępowania :meth:`user_call`). Zwróć odniesienie do sposobu postępowania "
":meth:`trace_dispatch` dla dalszego śledzenia w tym zakresie."

msgid "If the debugger should stop on this function return, invoke the :meth:`user_return` method (which should be overridden in subclasses). Raise a :exc:`BdbQuit` exception if the :attr:`Bdb.quitting` flag is set (which can be set from :meth:`user_return`).  Return a reference to the :meth:`trace_dispatch` method for further tracing in that scope."
msgstr ""
"Jeśli odpluskwianie powinno zatrzymać się na tym powrocie z zadania, wywołaj "
"sposób postępowania :meth:`user_return` (która powinna być przesłonięty w "
"podrzędnych uogólnieniach). Zgłasza wyjątek :exc:`BdbQuit` jeśli flaga "
":attr:`Bdb.quitting` jest ustawiona (co może być ustawione z "
":meth:`user_return`). Zwróć odniesienie do sposobu postępowania "
":meth:`trace_dispatch` dla dalszego śledzenia w tym zakresie."

msgid "If the debugger should stop at this exception, invokes the :meth:`user_exception` method (which should be overridden in subclasses). Raise a :exc:`BdbQuit` exception if the :attr:`Bdb.quitting` flag is set (which can be set from :meth:`user_exception`).  Return a reference to the :meth:`trace_dispatch` method for further tracing in that scope."
msgstr ""
"Jeśli odpluskwianie powinno zatrzymać się na tym wyjątku, zgłasza sposób "
"postępowania :meth:`user_exception` (który powinien zostać przesłonięty w "
"podrzędnym uogólnieniu). Zgłoś wyjątek :exc:`BdbQuit` jeśli flaga "
":attr:`Bdb.quitting` jest ustawiona (co może być ustawione ze sposobu "
"postępowania :meth:`user_exception`). Zwróć odniesienie do sposobu "
"postępowania :meth:`trace_dispatch` dla dalszego śledzenia w tym zakresie."

msgid "Normally derived classes don't override the following methods, but they may if they want to redefine the definition of stopping and breakpoints."
msgstr ""
"Normalnie dziedziczone uogólnienia nie przesłaniają następujących sposobów "
"postępowania, ale mogą jeśli chcą redefiniować definicję stopowania i "
"punktów przerywania programu."

msgid "This method checks if the *frame* is somewhere below :attr:`botframe` in the call stack.  :attr:`botframe` is the frame in which debugging started."
msgstr ""
"Ten sposób postępowania sprawdza czy *ramka* - z ang. - *frame* jest "
"gdziekolwiek poniżej :attr:`botframe` na stercie wywołań. Właściwość "
":attr:`botframe` jest ramką od której odpluskwianie jest zaczynane."

msgid "This method checks if there is a breakpoint in the filename and line belonging to *frame* or, at least, in the current function.  If the breakpoint is a temporary one, this method deletes it."
msgstr ""
"Ten sposób postępowania sprawdza czy jest punkt przerywania wykonania "
"programu w nazwie programu i linii należących do *ramki* lub przynajmniej "
"obecnego zadania. Jeśli punkt przerywania jest tymczasowy, ten sposób "
"postępowania kasuje go."

msgid "This method checks if there is a breakpoint in the filename of the current frame."
msgstr ""
"Ten sposób postępowania sprawdza czy jest punkt przerywania wykonania "
"programu w nazwie pliku obecnej ramki."

msgid "Derived classes should override these methods to gain control over debugger operation."
msgstr ""
"Dziedziczone uogólnienia powinny przesłaniać te sposoby postępowania aby "
"zyskać kontrolę ponad operacją odpluskwiania."

msgid "This method is called from :meth:`dispatch_call` when there is the possibility that a break might be necessary anywhere inside the called function."
msgstr ""
"Ten sposób postępowania jest wywoływany z :meth:`dispatch_call` gdy jest "
"możliwość że przerwanie programu może być konieczne gdzieś wewnątrz "
"wywoływanego zadania."

msgid "This method is called from :meth:`dispatch_line` when either :meth:`stop_here` or :meth:`break_here` yields True."
msgstr ""
"Ten sposób postępowania jest wywoływany z :meth:`dispatch_line` gdy albo "
":meth:`stop_here` albo :meth:`break_here` zwraca Prawdę."

msgid "This method is called from :meth:`dispatch_return` when :meth:`stop_here` yields True."
msgstr ""
"Ten sposób postępowania jest wywoływany ze sposobu postępowania "
":meth:`dispatch_return` gdy :meth:stop_here` daje Prawdę - z ang. - True."

msgid "This method is called from :meth:`dispatch_exception` when :meth:`stop_here` yields True."
msgstr ""
"Ten sposób postępowania jest wywoływany z :meth:`dispatch_exception` gdy "
":meth:`stop_here` zwraca Prawdę."

msgid "Handle how a breakpoint must be removed when it is a temporary one."
msgstr "Obsługuje jak punkt zatrzymania musi być usunięty gdy jest tymczasowym."

msgid "This method must be implemented by derived classes."
msgstr ""
"Ten sposób postępowania musi być wypełniony przez odziedziczone uogólnienie."

msgid "Derived classes and clients can call the following methods to affect the stepping state."
msgstr ""
"Dziedziczące uogólnienia i klienci mogą wywoływać następujące sposoby "
"postępowania aby wpływać na stan przechodzenia krok-po-kroku."

msgid "Stop after one line of code."
msgstr "Zatrzymaj się po jednej linii kodu."

msgid "Stop on the next line in or below the given frame."
msgstr "Zatrzymaj się po następnej linii w lub poniżej danej ramki."

msgid "Stop when returning from the given frame."
msgstr "Zatrzymaj się gdy następuje powrót z danej ramki."

msgid "Stop when the line with the line no greater than the current one is reached or when returning from current frame"
msgstr ""
"Zatrzymaj się gdy linia nie większa niż obecna jest osiągana lub gdy "
"następuje powrót z obecnej ramki."

msgid "Start debugging from *frame*.  If *frame* is not specified, debugging starts from caller's frame."
msgstr ""
"Zacznij odpluskwianie z *ramki*. Jeśli *ramka* jest nieokreślona, "
"odpluskwianie zaczyna od ramki wywołującego."

msgid "Stop only at breakpoints or when finished.  If there are no breakpoints, set the system trace function to None."
msgstr ""
"Zatrzymaj się tylko na punktach przerywania wykonania programu lub gdy "
"zakończono. Jeśli nie ma punktów przerywania, ustaw zadanie śledzenia "
"systemowego na None."

msgid "Set the :attr:`quitting` attribute to True.  This raises :exc:`BdbQuit` in the next call to one of the :meth:`dispatch_\\*` methods."
msgstr ""
"Ustaw właściwość :attr:`quitting` na Prawdę. To zgłasza :exc:`BdbQuit` w "
"następnym wywołaniu na jeden ze sposobów postępowania :meth:`dispatch_\\*`"

msgid "Derived classes and clients can call the following methods to manipulate breakpoints.  These methods return a string containing an error message if something went wrong, or ``None`` if all is well."
msgstr ""
"Pochodne uogólnienia i klienci mogą wywoływać następujące sposoby "
"postępowania aby zmieniać punkty przerywania wykonania programu. Te sposoby "
"postępowania zwracają ciąg zawierający wiadomość o błędzie jeśli coś poszło "
"nie tak, lub ``None`` jeśli wszystko jest w porządku."

msgid "Set a new breakpoint.  If the *lineno* line doesn't exist for the *filename* passed as argument, return an error message.  The *filename* should be in canonical form, as described in the :meth:`canonic` method."
msgstr ""
"Ustaw nowy punkt przerywania wykonania programu. Jeśli linia *lineno* nie "
"istnieje fla pliku *filename* przekazywanego jako parametr, zwróć wiadomość "
"o błędzie. Nazwa pliku - z ang. - *filename* powinna być w kanonicznej "
"formie, jak opisano w sposobie postępowania :meth:`canonic`."

msgid "Delete the breakpoints in *filename* and *lineno*.  If none were set, an error message is returned."
msgstr ""
"Skasuj punkty przerywania programu w *nazwie pliku* i numer linii - z ang. - "
"*lineno*. Jeśli żadne nie zostały ustawione, wiadomość o błędzie jest "
"zwracana."

msgid "Delete the breakpoint which has the index *arg* in the :attr:`Breakpoint.bpbynumber`.  If *arg* is not numeric or out of range, return an error message."
msgstr ""
"Skasuj punkt przerywania programu który ma indeks *arg* w "
":attr:`Breakpoint.bpbynumber`. Jeśli *arg* jest nie numeryczny lub poza "
"zakresem, zwróć wiadomość o błędzie."

msgid "Delete all breakpoints in *filename*.  If none were set, an error message is returned."
msgstr ""
"Skasuj wszystkie punkty przerywania programu w pliku *nazwa pliku* - z ang. "
"*filename*. Jeśli żadne nie zostały ustawione, wiadomość o błędzie jest "
"zwracana."

msgid "Delete all existing breakpoints."
msgstr "Skasuj wszystkie istniejące punkty przerywania wykonania programu."

msgid "Check if there is a breakpoint for *lineno* of *filename*."
msgstr ""
"Sprawdź czy jest punkt przerywania programu dla *lineno* - z ang. - *numeru "
"linii* pliku *nazwa pliku*."

msgid "Return all breakpoints for *lineno* in *filename*, or an empty list if none are set."
msgstr ""
"Zwróć wszystkie punkty przerywania wykonania programu dla danego *lineno* w "
"pliku *nazwa pliku* - z ang. - *filename* lub pustą listę jeśli żaden nie "
"został ustawiony."

msgid "Return all breakpoints in *filename*, or an empty list if none are set."
msgstr ""
"Zwróć wszystkie punkty przerywania wykonania programu w *nazwie pliku*, lub "
"pustą listę jeśli żaden nie został ustawiony."

msgid "Return all breakpoints that are set."
msgstr ""
"Zwróć wszystkie punkty przerywania wykonania programu które są ustawione."

msgid "Derived classes and clients can call the following methods to get a data structure representing a stack trace."
msgstr ""
"Dziedziczące uogólnienia i klienci mogą wywoływać następujące sposoby "
"postępowania aby uzyskać struktury danych reprezentujące ślad wywołań ze "
"sterty wywołań."

msgid "Get a list of records for a frame and all higher (calling) and lower frames, and the size of the higher part."
msgstr ""
"Pobierz listę zapisów dla ramki i wszystkich powyżej (wywołań) i poniżej "
"ramek, i rozmiar wyższej części."

msgid "Return a string with information about a stack entry, identified by a ``(frame, lineno)`` tuple:"
msgstr ""
"Zwróć ciąg znaków z informacją o wpisie na stosie, identyfikowaną przez "
"krotkę ``(ramka, lineno)`` :"

msgid "The canonical form of the filename which contains the frame."
msgstr "Kanoniczna postać nazwy pliku, który zawiera ramkę. "

msgid "The function name, or ``\"<lambda>\"``."
msgstr "Nazwa zadania, lub ``\"<lambda>\"``."

msgid "The input arguments."
msgstr "Parametry wejściowe."

msgid "The return value."
msgstr "Wartość zwracana."

msgid "The line of code (if it exists)."
msgstr "Linia kodu (jeśli istnieje)."

msgid "The following two methods can be called by clients to use a debugger to debug a :term:`statement`, given as a string."
msgstr ""
"Następujące dwa sposoby postępowania mogą być wywoływane przez klientów aby "
"użyć odpluskwiania aby odpluskwić :term:`statement` - z ang. - "
":term:`stwierdzenie`, dane jako ciąg znaków."

msgid "Debug a statement executed via the :func:`exec` function.  *globals* defaults to :attr:`__main__.__dict__`, *locals* defaults to *globals*."
msgstr ""
"Odpluskwiaj wyrażenie wykonywane przez zadanie :func:`exec`. *globals* "
"domyślnie równa się :attr:`__main__.__dict__`, *locals* domyślnie równe jest "
"*globals*."

msgid "Debug an expression executed via the :func:`eval` function.  *globals* and *locals* have the same meaning as in :meth:`run`."
msgstr ""
"Odpluskwiaj wyrażenie wykonywane przez zadanie :func:`eval`. *globals* i "
"*locals* mają to same znaczenie jak w sposobie postępowania :meth:`run`."

msgid "For backwards compatibility.  Calls the :meth:`run` method."
msgstr "Dla zgodności wstecznej. Wywołuje sposób postępowania :meth:`run`."

msgid "Debug a single function call, and return its result."
msgstr "Odpluskwiaj pojedyncze wywołanie zadania, i zwróć jego wynik."

msgid "Finally, the module defines the following functions:"
msgstr "Ostatecznie moduł definiuje następujące zadania:"

msgid "Check whether we should break here, depending on the way the breakpoint *b* was set."
msgstr ""
"Sprawdź czy powinniśmy przerwać tutaj, w zależności od sposobu w jaki punkt "
"przerywania *b* został ustawiony."

msgid "If it was set via line number, it checks if ``b.line`` is the same as the one in the frame also passed as argument.  If the breakpoint was set via function name, we have to check we are in the right frame (the right function) and if we are in its first executable line."
msgstr ""
"Jeśli został ustawiony przez numer linii, sprawdza czy ``b.line`` jest "
"tożsame jak to w ramce także przekazywane jako parametr. Jeśli punkt "
"przerywania wykonania programu został ustawiony przez nazwę zadania musimy "
"sprawdzić czy jesteśmy we właściwej ramce (właściwym zadaniu) i czy jesteśmy "
"w jego pierwszej wykonywalnej linii."

msgid "Determine if there is an effective (active) breakpoint at this line of code. Return breakpoint number or 0 if none."
msgstr ""
"Sprawdź czy istnieje efektywny (aktywny) punkt przerywania wykonania "
"programu w tej linii kodu. Zwróć punkt przerywania wykonania programu lub 0 "
"jeśli żaden nie występuje."

msgid "Called only if we know there is a breakpoint at this location.  Returns the breakpoint that was triggered and a flag that indicates if it is ok to delete a temporary breakpoint."
msgstr ""
"Wywoływane tylko jeśli wiemy, że jest punkt przerywania wykonania programu w "
"tej lokalizacji. Zwróć punkt przerywania wykonania programu który został "
"potrącony i flagę która wskazuje czy można skasować tymczasowy punkt "
"przerywania wykonania programu."

msgid "Starts debugging with a :class:`Bdb` instance from caller's frame."
msgstr ""
"Zaczyna odpluskwianie z przykładem uogólnienia :class:`Bdb` z ramki "
"wywołującego."

msgid ":mod:`binascii` --- Convert between binary and ASCII"
msgstr ":mod:`binascii` --- Zamień pomiędzy binary a kodem ASCII"

msgid "The :mod:`binascii` module contains a number of methods to convert between binary and various ASCII-encoded binary representations. Normally, you will not use these functions directly but use wrapper modules like :mod:`uu`, :mod:`base64`, or :mod:`binhex` instead. The :mod:`binascii` module contains low-level functions written in C for greater speed that are used by the higher-level modules."
msgstr ""
"moduł :mod:`binascii` zawiera liczbę sposobów postępowania aby zamienić "
"pomiędzy reprezentacją binarną a różnymi zakodowanymi-w-ASCII. Zwykle nie "
"używasz tych zadań bezpośrednio ale używa modułów opakowania takich jak "
":mod:`uu`, :mod:`base64` lub :mod:`binhex` zamiast tego jednego. Moduł "
":mod:`binascii` zawiera nisko-poziomowe zadania napisane w C dla wyższych "
"prędkości które są używane przez wyższego-poziomu moduły."

msgid "The :mod:`binascii` module defines the following functions:"
msgstr "Moduł :mod:`binascii` definiuje następujące zadania:"

msgid "Convert a single line of uuencoded data back to binary and return the binary data. Lines normally contain 45 (binary) bytes, except for the last line. Line data may be followed by whitespace."
msgstr ""
"Zamień pojedynczą linię zakodowanych danych uu z powrotem do  postaci "
"binarnej i zwróć binarne dane. Linie zwykle zawierają 45 (binarnych) bajtów, "
"z wyjątkiem ostatniej linii. Po linii danych mogą następować białe znaki."

msgid "Convert binary data to a line of ASCII characters, the return value is the converted line, including a newline char. The length of *data* should be at most 45."
msgstr ""
"Zamień dane binarne na linię znaków ASCII, zwracana wartość jest "
"konwertowaną linią, zawierając w tym znak nowego wiersza. Długość *danych* - "
"z ang. - *data* powinna być najwięcej 45."

msgid "Convert a block of base64 data back to binary and return the binary data. More than one line may be passed at a time."
msgstr ""
"Zamień blok danych base64 na binarne i zwróć dane binarne. Więcej niż jedna "
"linia może być przekazywana na raz."

msgid "Convert binary data to a line of ASCII characters in base64 coding. The return value is the converted line, including a newline char. The length of *data* should be at most 57 to adhere to the base64 standard."
msgstr ""
"Zamień binarne dane do linii znaków ASCII w kodowaniu base64. Zwracana "
"wartość jest zamienioną linią zawierając znak nowego wiersza. Długość "
"*danych* - z ang. - *data* powinien być najdłużej 57 aby dostosować się do "
"standardu base64."

msgid "Convert a block of quoted-printable data back to binary and return the binary data. More than one line may be passed at a time. If the optional argument *header* is present and true, underscores will be decoded as spaces."
msgstr ""
"Zamień blok cytowanych-drukowalnych danych spowrotem do binarnych i zwróć "
"dane binarne. Więcej niż jedna linia może być przekazywana na raz. Jeśli "
"opcjonalny parametr *nagłówek* jest obecny i prawdziwy, podkreślenia będą "
"zdekodowane jako odstępy."

msgid "Convert binary data to a line(s) of ASCII characters in quoted-printable encoding.  The return value is the converted line(s). If the optional argument *quotetabs* is present and true, all tabs and spaces will be encoded.   If the optional argument *istext* is present and true, newlines are not encoded but trailing whitespace will be encoded. If the optional argument *header* is present and true, spaces will be encoded as underscores per RFC1522. If the optional argument *header* is present and false, newline characters will be encoded as well; otherwise linefeed conversion might corrupt the binary data stream."
msgstr ""
"Zamień dane binarne na linię znaków ASCII zakodowanych w cudzysłowach "
"drukowalnych. Wartość zwracana jest zamienioną linią(ami). Jeśli opcjonalny "
"parametr *quotetabs* jest obecny i prawdziwy, wszystkie tabulacje i odstępy "
"zostaną zakodowane. Jeśli opcjonalny parametr *istext* jest obecny i "
"prawdziwy, znaki nowego wiersza nie są kodowane ale kończące białe znaki "
"zostaną zakodowane. Jeśli opcjonalny parametr *nagłówka* jest obecny i "
"prawdziwy, odstępy będą zakodowane jako podkreślenia zgodne z RFC 1522. "
"Jeśli opcjonalny parametr *nagłówka* - z ang. - *header* jest obecny i "
"fałszywy, znaki nowego wiersza zostaną zakodowane także; w przeciwnym razie "
"zamiana znaków nowego wiersza może popsuć binarny strumień danych."

msgid "Convert binhex4 formatted ASCII data to binary, without doing RLE-decompression. The string should contain a complete number of binary bytes, or (in case of the last portion of the binhex4 data) have the remaining bits zero."
msgstr ""
"Skonwertuj sformatowane binhex4 dane  ASCII do danych binarnych bez "
"wykonywania dekompresji-RLE. Ciąg powinien zawierać pełną liczbę bajtów "
"binarnych, lub (w przypadku ostatniej porcji danych binhex4) mieć pozostałe "
"bity wyzerowane."

msgid "Perform RLE-decompression on the data, as per the binhex4 standard. The algorithm uses ``0x90`` after a byte as a repeat indicator, followed by a count. A count of ``0`` specifies a byte value of ``0x90``. The routine returns the decompressed data, unless data input data ends in an orphaned repeat indicator, in which case the :exc:`Incomplete` exception is raised."
msgstr ""
"Wykonaj dekompresję-RLE na danych, zgodnie ze standardem binhex4. Algorytm "
"używa ``0x90`` po bajcie jako wskaźnik powtórzenia, po którym następuje "
"zliczana liczba. Wartość zliczona ``0`` określa wartość bajtu ``0x90``. "
"Zadanie zwraca rozpakowane dane, chyba że dane wejściowe kończą się "
"osamotnionym wskazaniem powtórzenia, w którym to przypadku zgłaszany jest "
"wyjątek :exc:`Niekompletny` - z ang. - :exc:`Incomplete`."

msgid "Perform binhex4 style RLE-compression on *data* and return the result."
msgstr ""
"Wykonaj kompresję RLE w stylu binhex4 na *danych* - z ang. - *data* i zwróć "
"wynik."

msgid "Perform hexbin4 binary-to-ASCII translation and return the resulting string. The argument should already be RLE-coded, and have a length divisible by 3 (except possibly the last fragment)."
msgstr ""
"Wykonaj tłumaczenie hexbin4 binarne-do-ASCII i zwróć wynikły ciąg znaków. "
"Parametr powinien być już zakodowany kodem RLE, i mieć długość podzielną "
"przez 3 (z wyjątkiem możliwie ostatniego fragmentu)."

msgid "Compute the binhex4 crc value of *data*, starting with an initial *crc* and returning the result."
msgstr ""
"Oblicz wartość crc binhex4 *danych*, zaczynając z początkowym *crc* i "
"zwracając wynik"

msgid "Compute CRC-32, the 32-bit checksum of data, starting with an initial crc.  This is consistent with the ZIP file checksum.  Since the algorithm is designed for use as a checksum algorithm, it is not suitable for use as a general hash algorithm.  Use as follows::"
msgstr ""
"Oblicz CRC-32, 32-bitową sumę kontrolną danych zaczynając z początkowym crc. "
"To jest zgodne z sumą kontrolną plików ZIP. Od kiedy algorytm jest "
"zaprojektowany dla użycia jako algorytm sprawdzania sumy kontrolnej, nie "
"jest on odpowiedni dla użycia jako ogólny algorytm hash-owania. Używaj jak "
"następuje::"

msgid "print(binascii.crc32(b\"hello world\")) # Or, in two pieces: crc = binascii.crc32(b\"hello\") crc = binascii.crc32(b\" world\", crc) & 0xffffffff print('crc32 = {:#010x}'.format(crc))"
msgstr ""
"print(binascii.crc32(b\"witaj świecie)) # Lub, w dwóch kawałkach: crc = "
"binascii.crc32(b\"witaj\") crc = binascii.crc32(b\" świecie\", crc) & 0xffffffff "
"print('crc32 = {:#010x}'.format(crc))"

msgid "To generate the same numeric value across all Python versions and platforms use crc32(data) & 0xffffffff.  If you are only using the checksum in packed binary format this is not necessary as the return value is the correct 32bit binary representation regardless of sign."
msgstr ""
"Aby wygenerować tą samą wartość numeryczną we wszystkich wersjach języka "
"pytonowskiego i wszystkich maszynach/środowiskach używaj crc32(dane) & "
"0xffffffff. Jeśli tylko używasz sumy kontrolnej w spakowanej binarnej "
"postaci to nie jest konieczne jako że wartość zwracana jest poprawną "
"32bitową binarną reprezentacją niezależną od znaku."

msgid "Return the hexadecimal representation of the binary *data*.  Every byte of *data* is converted into the corresponding 2-digit hex representation.  The resulting string is therefore twice as long as the length of *data*."
msgstr ""
"Zwróć heksadecymalną reprezentację *danych* binarnych. Każdy bajt *danych* "
"jest konwertowany do odpowiadającego 2-cyfrowej reprezentacji "
"heksadecymalnej. Wynikający ciąg znaków jest z tego też powodu dwukrotnie "
"dłuższy od długości *danych*."

msgid "Return the binary data represented by the hexadecimal string *hexstr*.  This function is the inverse of :func:`b2a_hex`. *hexstr* must contain an even number of hexadecimal digits (which can be upper or lower case), otherwise a :exc:`TypeError` is raised."
msgstr ""
"Zwróć binarną reprezentację danych przez heksadecymalny ciąg znaków "
"*hexstr*. To zadanie jest przeciwnym do :func:`b2a_hex`. *hexstr* musi "
"zawierać parzystą liczbę heksadecymalnych cyfr (które mogą być dużymi lub "
"małymi literami), w przeciwnym razie wyjątek :exc:`TypeError` jest "
"zgłaszany."

msgid "Exception raised on errors. These are usually programming errors."
msgstr "Wyjątek zgłaszany przy błędach. Istnieją zwykle błędy programowania."

msgid "Exception raised on incomplete data. These are usually not programming errors, but may be handled by reading a little more data and trying again."
msgstr ""
"Wyjątek zgłaszany przy niekompletnych danych. Te nie są zwykle błędami "
"programowania, ale mogą być obsługiwane przez wczytanie odrobiny więcej "
"danych i próbując jeszcze raz."

msgid "Support for base64 encoding used in MIME email messages."
msgstr "Wsparcie dla kodowania base64 w wiadomościach email MIME."

msgid "Support for the binhex format used on the Macintosh."
msgstr "Wsparcie dla formatu binhex używanego na Macintoshu."

msgid "Support for UU encoding used on Unix."
msgstr "Wsparcie dla kodowania UU używanego na Unixie."

msgid "Support for quoted-printable encoding used in MIME email messages."
msgstr ""
"Wsparcie dla cytowanych-drukowalnych kodowań używanych w wiadomościach email "
"typu MIME."

msgid ":mod:`binhex` --- Encode and decode binhex4 files"
msgstr ":mod:`binhex` --- Koduj i dekoduj pliki binhex4"

msgid "This module encodes and decodes files in binhex4 format, a format allowing representation of Macintosh files in ASCII. Only the data fork is handled."
msgstr ""
"Ten moduł koduje i dekoduje pliki w formacie binhex4, formacie pozwalającym "
"reprezentację plików Macintosha w ASCII. Tylko rozwidlenie danych jest "
"obsługiwane."

msgid "The :mod:`binhex` module defines the following functions:"
msgstr "moduł :mod:`binhex` definiuje następujące zadania:"

msgid "Convert a binary file with filename *input* to binhex file *output*. The *output* parameter can either be a filename or a file-like object (any object supporting a :meth:`write` and :meth:`close` method)."
msgstr ""
"Zamień plik binarny z nazwą pliku *input* do pliku binhex *output*. Parametr "
"*output* może albo być nazwą pliku lub przedmiotem podobnym do pliku "
"(dowolny przedmiot wspierający sposoby postępowania :meth:`write` - z ang. - "
":meth:`zapisz` i :meth:`close` - z ang. - :meth:`zamknij`)."

msgid "Decode a binhex file *input*. *input* may be a filename or a file-like object supporting :meth:`read` and :meth:`close` methods. The resulting file is written to a file named *output*, unless the argument is ``None`` in which case the output filename is read from the binhex file."
msgstr ""
"Dekoduj plik binhex *input*. *input* może być nazwą pliku lub przedmiotem "
"podobnym do pliku wspierającym sposoby postępowania :meth:`read` i "
":meth:`close`. Wynikający plik jest zapisywany do pliku nazwanego *output*, "
"chyba, że parametr jest ``None`` - z ang. - ``Żaden`` w którym przypadku "
"nazwa pliku jest wczytywana z pliku binhex."

msgid "The following exception is also defined:"
msgstr "Następujący wyjątek jest także zdefiniowany:"

msgid "Exception raised when something can't be encoded using the binhex format (for example, a filename is too long to fit in the filename field), or when input is not properly encoded binhex data."
msgstr ""
"Wyjątek zgłaszany gdy coś nie może być zakodowane używając formatu binhex "
"(dla przykładu, nazwa pliku jest za długa aby dopasować do pola nazwy "
"pliku), lub gdy wejście nie jest poprawnie zakodowanymi danymi binhex."

msgid "Notes"
msgstr "Uwagi"

msgid "There is an alternative, more powerful interface to the coder and decoder, see the source for details."
msgstr ""
"Istnieje alternatywny, bardziej silny sprzęg kodera i dekodera, zobacz "
"źródło dla szczegółów."

msgid "If you code or decode textfiles on non-Macintosh platforms they will still use the old Macintosh newline convention (carriage-return as end of line)."
msgstr ""
"Jeśli kodujesz lub dekodujesz pliki tekstowe na maszynie/środowisku nie-"
"Macintoshu one będą wciąż używały starej konwencji znaków nowego wiersza z "
"Macintosha (powrót-karetki jako końca linii)."

msgid "As of this writing, :func:`hexbin` appears to not work in all cases."
msgstr ""
"W momencie pisania tego zadanie :func:`hexbin` sprawia wrażenie nie "
"działającej we wszystkich przypadkach."

msgid ":mod:`bisect` --- Array bisection algorithm"
msgstr ":mod:`bisect` --- algorytm bisekcji tablicy"

msgid "This module provides support for maintaining a list in sorted order without having to sort the list after each insertion.  For long lists of items with expensive comparison operations, this can be an improvement over the more common approach.  The module is called :mod:`bisect` because it uses a basic bisection algorithm to do its work.  The source code may be most useful as a working example of the algorithm (the boundary conditions are already right!)."
msgstr ""
"Ten moduł dostarcza wsparcia dla utrzymywania listy w posortowanym porządku "
"bez konieczności sortowania listy po każdym wstawieniu. Dla długich list "
"przedmiotów o kosztownych operacjach porównania, to może być polepszenie "
"względem bardziej typowego podejścia. Moduł jest zwany :mod:`bisect` "
"ponieważ używa używa podstawowego algorytmu bisekcji aby wykonać swoją "
"pracę. Kod źródłowy może być najbardziej użyteczny jako działający przykład "
"algorytmu (warunki brzegowe są już od razu poprawne!)."

msgid "The following functions are provided:"
msgstr "Następujące zadania są dostarczone:"

msgid "Locate the proper insertion point for *x* in *a* to maintain sorted order. The parameters *lo* and *hi* may be used to specify a subset of the list which should be considered; by default the entire list is used.  If *x* is already present in *a*, the insertion point will be before (to the left of) any existing entries.  The return value is suitable for use as the first parameter to ``list.insert()``.  This assumes that *a* is already sorted."
msgstr ""
"Znajdź poprawny punkt wstawienia dla *x* w *a* aby utrzymać posortowany "
"porządek. Parametry *lo* i *hi* mogą być użyte do określenia podzbioru listy "
"który powinien być brany pod uwagę; domyślnie cała lista jest używana. "
"Jeśli *x* jest już obecne w *a* punkt wstawiania będzie przed (po lewej "
"stronie) jakimikolwiek wpisami. Wartość zwracana jest dobra do użycia jako "
"pierwszy parametr ``list.insert()``. To zakłada że *a* jest już posortowana."

msgid "Similar to :func:`bisect_left`, but returns an insertion point which comes after (to the right of) any existing entries of *x* in *a*."
msgstr ""
"Podobna do zadania :func:`bisect_left` ale zwraca punkt wstawiania który "
"jest po (po prawej stronie od) jakichkolwiek wpisów *x* w *a*."

msgid "Insert *x* in *a* in sorted order.  This is equivalent to ``a.insert(bisect.bisect_left(a, x, lo, hi), x)``.  This assumes that *a* is already sorted."
msgstr ""
"Wstaw *x* w *a* w posortowany sposób. To jest równoważne do "
"``a.insert(bisect_left(a, x, lo, hi), x)``. To zakłada że *a* jest już "
"posortowane."

msgid "Similar to :func:`insort_left`, but inserting *x* in *a* after any existing entries of *x*."
msgstr ""
"podobne do zadania :func:`insort_left`, ale wstawiając *x* w *a* po "
"jakichkolwiek wpisach *x*."

msgid "Examples"
msgstr "Przykłady"

msgid "The :func:`bisect` function is generally useful for categorizing numeric data. This example uses :func:`bisect` to look up a letter grade for an exam total (say) based on a set of ordered numeric breakpoints: 85 and up is an 'A', 75..84 is a 'B', etc."
msgstr ""
"Zadanie :func:`bisect` jest ogólnie użyteczne dla kategoryzacji danych "
"numerycznych. Ten przykład używa :func:`bisect` aby podejrzeć literową ocenę "
"za sumę z egzaminu (powiedzmy) w oparciu o zbiór uporządkowanych "
"numerycznych punktów przerwań: 85 i więcej dla 'A', 75..84 dla 'B', itd."

msgid ">>> grades = \"FEDCBA\" >>> breakpoints = [30, 44, 66, 75, 85] >>> from bisect import bisect >>> def grade(total): ...           return grades[bisect(breakpoints, total)] ... >>> grade(66) 'C' >>> map(grade, [33, 99, 77, 44, 12, 88]) ['E', 'A', 'B', 'D', 'F', 'A']"
msgstr ""
">>> grades = \"FEDCBA\" >>> breakpoints = [30, 44, 66, 75, 85] >>> from bisect "
"import bisect >>> def grade(total): ...           return "
"grades[bisect(breakpoints, total)] ... >>> grade(66) 'C' >>> map(grade, [33, "
"99, 77, 44, 12, 88]) ['E', 'A', 'B', 'D', 'F', 'A']"

msgid "Unlike the :func:`sorted` function, it does not make sense for the :func:`bisect` functions to have *key* or *reversed* arguments because that would lead to an inefficent design (successive calls to bisect functions would not \"remember\" all of the previous key lookups)."
msgstr ""
"W przeciwieństwie do zadania :func:`sorted`, nie ma sensu dla zadań "
":func:`bisect` mieć *kluczowe* - z ang. - *key* lub *odwrócone* - z ang. - "
"*reversed* parametry ponieważ to mogłoby prowadzić do nieefektywnego układu "
"(kolejne wywołania zadań bisekcji nie \"pamiętałyby\" wszystkich poprzednich "
"podejrzeń klucza)."

msgid "Instead, it is better to search a list of precomputed keys to find the index of the record in question::"
msgstr ""
"Zamiast tego, lepiej jest przeszukać listę uprzednio obliczonych wartości "
"kluczowych aby odnaleźć indeks poszukiwanego zapisu:: "

msgid ">>> data = [('red', 5), ('blue', 1), ('yellow', 8), ('black', 0)] >>> data.sort(key=lambda r: r[1]) >>> keys = [r[1] for r in data]         # precomputed list of keys >>> data[bisect_left(keys, 0)] ('black', 0) >>> data[bisect_left(keys, 1)] ('blue', 1) >>> data[bisect_left(keys, 5)] ('red', 5) >>> data[bisect_left(keys, 8)] ('yellow', 8)"
msgstr ""
">>> data = [('czerwony', 5), ('niebieski', 1), ('żółty', 8), ('czarny', 0)] "
">>> data.sort(key=lambda r: r[1]) >>> keys = [r[1] for r in data]         # "
"przeliczona uprzednio lista kluczy >>> data[bisect_left(keys, 0)] ('czarny', "
"0) >>> data[bisect_left(keys, 1)] ('niebieski', 1) >>> "
"data[bisect_left(keys, 5)] ('czerwony', 5) >>> data[bisect_left(keys, 8)] "
"('żółty', 8)"

msgid ":mod:`builtins` --- Built-in objects"
msgstr ":mod:`builtins` --- przedmioty wbudowane"

msgid "This module provides direct access to all 'built-in' identifiers of Python; for example, ``builtins.open`` is the full name for the built-in function :func:`open`."
msgstr ""
"Ten moduł dostarcza bezpośredni dostęp do wszystkich 'wbudowanych' "
"identyfikatorów języka pytonowskiego; dla przykładu ``builtins.open`` jest "
"pełną nazwą dla wbudowanego zadania :func:`open`."

msgid "This module is not normally accessed explicitly by most applications, but can be useful in modules that provide objects with the same name as a built-in value, but in which the built-in of that name is also needed.  For example, in a module that wants to implement an :func:`open` function that wraps the built-in :func:`open`, this module can be used directly::"
msgstr ""
"Dostęp do tego modułu nie jest zwykle otrzymywany jawnie przy większości "
"aplikacji, ale może być użyteczny w modułach które dostarczają przedmiotów o "
"tej samej nazwie jak wartość wbudowana, ale w których wbudowany przedmiot o "
"tej nazwie jest także wymagany. Dla przykładu w module który chce wypełnić "
"zadanie :func:`open` w szczególny sposób które opakowuje wbudowane zadanie "
":func:`open`, ten moduł może być używany bezpośrednio::"

msgid "import builtins  def open(path):     f = builtins.open(path, 'r')     return UpperCaser(f)  class UpperCaser:     '''Wrapper around a file that converts output to upper-case.'''      def __init__(self, f):         self._f = f      def read(self, count=-1):         return self._f.read(count).upper()      # ..."
msgstr ""
"import builtins  def open(path):     f = builtins.open(path, 'r')     return "
"UpperCaser(f)  class UpperCaser:     '''Opakowanie wokół pliku które "
"zamienia wyjście na wielkie litery.'''      def __init__(self, f):         "
"self._f = f      def read(self, count=-1):         return "
"self._f.read(count).upper()      # ..."

msgid "As an implementation detail, most modules have the name ``__builtins__`` (note the ``'s'``) made available as part of their globals.  The value of ``__builtins__`` is normally either this module or the value of this modules's :attr:`__dict__` attribute.  Since this is an implementation detail, it may not be used by alternate implementations of Python."
msgstr ""
"Jako szczegół wypełnienia, większość modułów ma nazwę ``__builtins__`` "
"(zauważ ``'s'``) dostępną jako część ich przedmiotów globalnych - w "
"znaczeniu nadrzędnych. Wartość ``__builtins__`` jest zwykle tym modułem lub "
"wartością właściwości :attr:`__dict__` tego modułu. Ponieważ jest to "
"szczegół wypełnienia, nie może to być wykorzystane przez odmienne "
"wypełnienia języka pytonowskiego."

msgid ":mod:`bz2` --- Compression compatible with :program:`bzip2`"
msgstr ":mod:`bz2` --- Kompresja odpowiadająca programowi :program:`bzip2`"

msgid "This module provides a comprehensive interface for the bz2 compression library. It implements a complete file interface, one-shot (de)compression functions, and types for sequential (de)compression."
msgstr ""
"Ten moduł dostarcza zrozumiałego sprzęgu dla biblioteki kompresji bz2. "
"Wypełnia całkowicie sprzęg pliku, jednorazowego-uruchomienia zadania "
"(de)kompresji i typów dla (de)kompresji sekwencyjnej.  "

msgid "For other archive formats, see the :mod:`gzip`, :mod:`zipfile`, and :mod:`tarfile` modules."
msgstr ""
"Dla innych formatów archiwów, zobacz moduły :mod:`gzip`, :mod:`zipfile`, i "
":mod:`tarfile`."

msgid "Here is a summary of the features offered by the bz2 module:"
msgstr "Tu jest podsumowanie właściwości oferowanych przez moduł bz2:"

msgid ":class:`BZ2File` class implements a complete file interface, including :meth:`~BZ2File.readline`, :meth:`~BZ2File.readlines`, :meth:`~BZ2File.writelines`, :meth:`~BZ2File.seek`, etc;"
msgstr ""
"Uogólnienie :class:`BZ2File` wypełnia kompletny sprzęg pliku zawierając "
"sposoby postępowania :meth:`~BZ2File.readline`, :meth:`~BZ2File.readlines`, "
":meth:`~BZ2File.writelines`, :meth:`~BZ2File.seek`, itd;"

msgid ":class:`BZ2File` class implements emulated :meth:`~BZ2File.seek` support;"
msgstr ""
"Uogólnienie :class:`BZ2File` wypełnia emulowane wsparcie dla "
":meth:`~BZ2File.seek`"

msgid ":class:`BZ2File` class implements universal newline support;"
msgstr ""
"Uogólnienie :class:`BZ2File` wypełnia wsparcie dla uniwersalnego nowego "
"wiersza;"

msgid ":class:`BZ2File` class offers an optimized line iteration using the readahead algorithm borrowed from file objects;"
msgstr ""
"Uogólnienie :class:`BZ2File` oferuje optymalizowaną iterację linii używając "
"algorytmu wczytywania z wyprzedzeniem zapożyczonego od przedmiotów plików;"

msgid "Sequential (de)compression supported by :class:`BZ2Compressor` and :class:`BZ2Decompressor` classes;"
msgstr ""
"Sekwencyjna (de)kompresja wspierana przez uogólnienia :class:`BZ2Compressor` "
"i :class:`BZ2Decompressor`."

msgid "One-shot (de)compression supported by :func:`compress` and :func:`decompress` functions;"
msgstr ""
"\"Jednego-strzału\" (de)kompresja wspierana przez zadania :func:`compress` i "
":func:`decompress`;"

msgid "Thread safety uses individual locking mechanism."
msgstr "Bezpieczeństwo wątków używa indywidualnego mechanizmu blokowania."

msgid "(De)compression of files"
msgstr "(De)kompresja plików"

msgid "Handling of compressed files is offered by the :class:`BZ2File` class."
msgstr ""
"Obsługa skompresowanych plików jest oferowana przez uogólnienie "
":class:`BZ2File`"

msgid "Open a bz2 file. Mode can be either ``'r'`` or ``'w'``, for reading (default) or writing. When opened for writing, the file will be created if it doesn't exist, and truncated otherwise. If *buffering* is given, ``0`` means unbuffered, and larger numbers specify the buffer size; the default is ``0``. If *compresslevel* is given, it must be a number between ``1`` and ``9``; the default is ``9``. Add a ``'U'`` to mode to open the file for input with universal newline support. Any line ending in the input file will be seen as a ``'\\n'`` in Python.  Also, a file so opened gains the attribute :attr:`newlines`; the value for this attribute is one of ``None`` (no newline read yet), ``'\\r'``, ``'\\n'``, ``'\\r\\n'`` or a tuple containing all the newline types seen. Universal newlines are available only when reading. Instances support iteration in the same way as normal :class:`file` instances."
msgstr ""
"Otwórz plik bz2. Tryb może być albo ``'r'`` albo ``'w'``, dla wczytywania "
"(dmyślnego) lub zapisywania. Gdy otwarty na pisanie, plik zostanie utworzony "
"jeśli nie istnieje, i obcięty w przeciwnym wypadku. Jeśli *przestrzeń "
"wymiany* jest dana, ``0`` oznacza bez przestrzeni wymiany, zaś większe "
"liczby określają rozmiar przestrzeni wymiany; domyślna wartość jest ``0``. "
"Jeśli *compresslevel* - z ang. - poziom kompresji jest dany, musi być liczbą "
"pomiędzy ``1`` i ``9``; domyślna jest ``9``. Dodaj ``'U'`` do trybu aby "
"otworzyć plik dla wczytywania ze wsparciem dla uniwersalnego nowego wiersza. "
"Dowolne linie kończące się w pliku wejściowym będą widziane jako ``'\n"
"'`` w języku pytonowskim. Także plik tak otwarty zyskuje właściwość "
":attr:`newlines`; wartość tej właściwości jest jedną z ``None`` (- nie "
"wczytano jeszcze nowej linii), ``'\r'``, ``'\n"
"'``, ``'\r\n"
"'`` lub krotka zawierająca wszystkie typy nowego wiersza zaobserwowane. "
"Uniwersalne nowe linie są dostępne tylko przy wczytywaniu. Przykłady "
"wspierają iterację w ten sam sposób jak zwykłe przykłady :class:`file`."

msgid ":class:`BZ2File` supports the :keyword:`with` statement."
msgstr ""
"Uogólnienie :class:`BZ2File` wspiera wyrażenie :keyword:`with` - z ang. - "
":keyword:`z`."

msgid "Close the file. Sets data attribute :attr:`closed` to true. A closed file cannot be used for further I/O operations. :meth:`close` may be called more than once without error."
msgstr ""
"Zamknij plik. Ustawia właściwość danych :attr:`closed` na prawdę. Zamknięty "
"plik nie może być używany dla dalszych operacji I/O - wejścia/wyjścia. "
"Sposób postępowania :meth:`close` może być wywoływany więcej niż raz bez "
"błędu."

msgid "Read at most *size* uncompressed bytes, returned as a byte string. If the *size* argument is negative or omitted, read until EOF is reached."
msgstr ""
"Wczytaj nie więcej niż *size* nieskompresowanych bajtów zwracanych jako ciąg "
"bajtów. Jeśli parametr *size* jest ujemny bądź pominięty, wczytuj aż "
"napotkasz znak końca pliku - z ang. - EOF."

msgid "Return the next line from the file, as a byte string, retaining newline. A non-negative *size* argument limits the maximum number of bytes to return (an incomplete line may be returned then). Return an empty byte string at EOF."
msgstr ""
"Zwróć następną linię z pliku, jako ciąg bajtów zachowując znak nowego "
"wiersza. Nieujemny parametr *size* ogranicza maksymalną liczbę bajtów do "
"zwrócenia (niekompletna linia może być w ten sposób zwrócona). Zwróć pusty "
"ciąg bajtów w momencie napotkania EOF."

msgid "Return a list of lines read. The optional *size* argument, if given, is an approximate bound on the total number of bytes in the lines returned."
msgstr ""
"Zwróć listę wczytanych linii. Opcjonalny parametr *size* jeśli dany jest "
"przybliżoną granicą całkowitej liczby bajtów w zwróconych liniach."

msgid "Move to new file position. Argument *offset* is a byte count. Optional argument *whence* defaults to ``os.SEEK_SET`` or ``0`` (offset from start of file; offset should be ``>= 0``); other values are ``os.SEEK_CUR`` or ``1`` (move relative to current position; offset can be positive or negative), and ``os.SEEK_END`` or ``2`` (move relative to end of file; offset is usually negative, although many platforms allow seeking beyond the end of a file)."
msgstr ""
"Przesuń do nowej pozycji pliku. Parametr *offset* jest liczbą bajtów. "
"Opcjonalny parametr *whence* domyślnie równy jest ``os.SEEK_SET`` lub ``0`` "
"(przesunięcie względem początku pliku; przesunięcie powinno być ``>= 0``); "
"inne wartości są ``os.SEEK_CUR`` lub ``1`` (przesuń względem obecnej "
"pozycji; przesunięcie może być dodatnie lub ujemne), i ``os.SEEK_END`` lub "
"``2`` (przesuń względem końca pliku; przesunięcie jest zwykle ujemne, "
"chociaż wiele maszyn/środowisk pozwala na przeszukiwanie poza końcem pliku)."

msgid "Note that seeking of bz2 files is emulated, and depending on the parameters the operation may be extremely slow."
msgstr ""
"Zauważ że przeszukiwanie pliku bz2 jest emulowane, i w zależności od "
"parametrów operacja może być bardzo powolna."

msgid "Return the current file position, an integer."
msgstr "Zwróć pozycję w obecnym pliku, liczbę całkowitą."

msgid "Write the byte string *data* to file. Note that due to buffering, :meth:`close` may be needed before the file on disk reflects the data written."
msgstr ""
"Zapisz ciąg bajtów *data* do pliku. Zauważ, że z powodu przestrzeni wymiany, "
"sposób postępowania :meth:`close` może być konieczny zanim plik na dysku "
"będzie odzwierciedlał dane zapisane."

msgid "Write the sequence of byte strings to the file. Note that newlines are not added. The sequence can be any iterable object producing byte strings. This is equivalent to calling write() for each byte string."
msgstr ""
"Zapisz sekwencję ciągów bajtów do pliku. Zauważ, że nowe linie nie są "
"dodawane. Sekwencja może być dowolnym iterowalnym przedmiotem produkującym "
"ciągi bajtów. To jest równoważne wywołaniu zapisu write() dla każdego ciągu "
"bajtów."

msgid "Sequential (de)compression"
msgstr "Sekwencyjna (de)kompresja"

msgid "Sequential compression and decompression is done using the classes :class:`BZ2Compressor` and :class:`BZ2Decompressor`."
msgstr ""
"Sekwencyjna kompresja i dekompresja jest wykonywana używając uogólnień "
":class:`BZ2Compressor` i :class:`BZ2Decompressor`."

msgid "Create a new compressor object. This object may be used to compress data sequentially. If you want to compress data in one shot, use the :func:`compress` function instead. The *compresslevel* parameter, if given, must be a number between ``1`` and ``9``; the default is ``9``."
msgstr ""
"Stwórz nowy przedmiot kompresora. Ten przedmiot może być użyty do "
"kompresowania danych sekwencyjnie. Jeśli chcesz skompresować dane za jednym "
"zamachem, użyj zadania :func:`compress` zamiast tego. Parametr "
"*compresslevel* jeśli dany musi być liczbą pomiędzy ``1`` i ``9``; domyślnie "
"jest ``9``.  "

msgid "Provide more data to the compressor object. It will return chunks of compressed data whenever possible. When you've finished providing data to compress, call the :meth:`flush` method to finish the compression process, and return what is left in internal buffers."
msgstr ""
"Dostarcz więcej danych do przedmiotu kompresora. Zwróci kawałki "
"skompresowanych danych gdzie jest to możliwe. Gdy skończysz dostarczać dane "
"do skompresowania, wywołaj sposób postępowania :meth:`flush` do zakończenia "
"procesu kompresowania i zwróć to co zostało w wewnętrznych przestrzeniach "
"wymiany."

msgid "Finish the compression process and return what is left in internal buffers. You must not use the compressor object after calling this method."
msgstr ""
"Zakończ proces kompresji i zwróć to co zostało w wewnętrznych przestrzeniach "
"wymiany. Nie można używać więcej przedmiotu kompresora po wywołaniu tego "
"sposobu postępowania."

msgid "Create a new decompressor object. This object may be used to decompress data sequentially. If you want to decompress data in one shot, use the :func:`decompress` function instead."
msgstr ""
"Utwórz nowy przedmiot dekompresora. Ten przedmiot może być używany do "
"dekompresji danych sekwencyjnie. Jeśli chcesz dekompresować dane za jednym "
"zamachem, użyj zadania :func:`decompress` zamiast tego."

msgid "Provide more data to the decompressor object. It will return chunks of decompressed data whenever possible. If you try to decompress data after the end of stream is found, :exc:`EOFError` will be raised. If any data was found after the end of stream, it'll be ignored and saved in :attr:`unused_data` attribute."
msgstr ""
"Dostarcz więcej danych do przedmiotu dekompresora. Zwróci kawałki "
"dekompresowanych danych gdy to możliwe. Jeśli będziesz próbował "
"dekompresować dane po napotkaniu końca strumienia, wyjątek :exc:`EOFError` "
"zostanie zgłoszony. Jeśli jakiekolwiek dane zostaną napotkane po końcu "
"strumienia, zostaną zignorowane i zapisane we właściwości "
":attr:`unused_data`."

msgid "One-shot (de)compression"
msgstr "Jedno-razowa (de)kompresja"

msgid "One-shot compression and decompression is provided through the :func:`compress` and :func:`decompress` functions."
msgstr ""
"Jedno-razowa kompresja i dekompresja jest dostarczona przez zadania "
":func:`compress` i :func:`decompress`."

msgid "Compress *data* in one shot. If you want to compress data sequentially, use an instance of :class:`BZ2Compressor` instead. The *compresslevel* parameter, if given, must be a number between ``1`` and ``9``; the default is ``9``."
msgstr ""
"Zkompresuj *dane* za jednym zamachem. Jeśli chcesz kompresować dane "
"sekwencyjnie, użyj przykładu uogólnienia :class:`BZ2Compressor` zamiast "
"tego. Parametr *compresslevel*, jeśli dany musi być liczbą pomiędzy ``1`` i "
"``9``; domyślnie jest to ``9``."

msgid "Decompress *data* in one shot. If you want to decompress data sequentially, use an instance of :class:`BZ2Decompressor` instead."
msgstr ""
"Dekompresuj *dane* za jednym zamachem. Jeśli chcesz dekompresować dane "
"sekwencyjnie, użyj przykładu uogólnienia :class:`BZ2Decompressor` zamiast "
"tego."

msgid ":mod:`calendar` --- General calendar-related functions"
msgstr ":mod:`calendar` --- Ogólnie zadania związane z kalendarzem."

msgid "This module allows you to output calendars like the Unix :program:`cal` program, and provides additional useful functions related to the calendar. By default, these calendars have Monday as the first day of the week, and Sunday as the last (the European convention). Use :func:`setfirstweekday` to set the first day of the week to Sunday (6) or to any other weekday.  Parameters that specify dates are given as integers. For related functionality, see also the :mod:`datetime` and :mod:`time` modules."
msgstr ""
"Ten moduł pozwala ci produkować kalendarze tak jak program Unix-a "
":program:`cal`, i dostarcza dodatkowych użytecznych zadań związanych z "
"kalendarzem. Domyślnie te kalendarze mają poniedziałek jako pierwszy dzień "
"tygodnia, i niedzielę jako ostatni (konwencja Europejska). Użyj zadania "
":func:`setfirstweekday` aby ustawić pierwszy dzień tygodnia na niedzielę (6) "
"lub jakikolwiek inny dzień tygodnia. Parametry które określają daty podane "
"są jako liczby całkowite. Dla powiązanej funkcjonalności zobacz moduły "
":mod:`datetime` i :mod:`time`."

msgid "Most of these functions and classes rely on the :mod:`datetime` module which uses an idealized calendar, the current Gregorian calendar indefinitely extended in both directions.  This matches the definition of the \"proleptic Gregorian\" calendar in Dershowitz and Reingold's book \"Calendrical Calculations\", where it's the base calendar for all computations."
msgstr ""
"Większość z tych zadań i uogólnień opiera się na module :mod:`datetime`, "
"który używa idealizowanego kalendarza, obecnego kalendarza Gregoriańskiego "
"rozciągniętego bez ograniczeń w obu kierunkach. To odpowiada definicji "
"proleptycznego kalendarza Gregoriańskiego w książce \"Kalendarzowe "
"obliczenia\" Dershowitza i Reingold-a, gdzie jest on podstawowym kalendarzem "
"dla wszystkich obliczeń."

msgid "Creates a :class:`Calendar` object. *firstweekday* is an integer specifying the first day of the week. ``0`` is Monday (the default), ``6`` is Sunday."
msgstr ""
"Tworzy przedmiot :class:`Calendar`. *Pierwszy dzień tygodnia* - z ang. - "
"*firstweekday* jest liczbą całkowitą określającą pierwszy dzień tygodnia. "
"``0`` jest Poniedziałkiem (domyślnie), ``6`` jest Niedzielą."

msgid "A :class:`Calendar` object provides several methods that can be used for preparing the calendar data for formatting. This class doesn't do any formatting itself. This is the job of subclasses."
msgstr ""
"Przedmiot uogólnienia :class:`Calendar` dostarcza kilkanaście metod, które "
"mogą być używane dla przygotowania danych kalendarza dla formatowania. To "
"uogólnienie nie robi żadnego formatowania samodzielnie. To jest zadaniem "
"podrzędnych uogólnień."

msgid ":class:`Calendar` instances have the following methods:"
msgstr "przykłady :class:`Calendar` mają następujące sposoby postępowania:"

msgid "Return an iterator for the week day numbers that will be used for one week.  The first value from the iterator will be the same as the value of the :attr:`firstweekday` property."
msgstr ""
"Zwróć przedmiot iterujący dla numerów dni tygodnia które będą użyte w jednym "
"tygodniu. Pierwsza wartość z przedmiotu iterującego będzie taka sama jak "
"wartość właściwości :attr:`firstweekday`."

msgid "Return an iterator for the month *month* (1-12) in the year *year*. This iterator will return all days (as :class:`datetime.date` objects) for the month and all days before the start of the month or after the end of the month that are required to get a complete week."
msgstr ""
"Zwróć przedmiot iterujący dla miesiąca *month* (1-12) w roku *year*. "
"Przedmiot iterujący będzie zwracał wszystkie dni (jako przedmioty "
":class:`datetime.date`) dla miesiąca i wszystkie dni przed początkiem "
"miesiąca lub po końcu miesiąca które są wymagane aby otrzymać pełen tydzień."

msgid "Return an iterator for the month *month* in the year *year* similar to :meth:`itermonthdates`. Days returned will be tuples consisting of a day number and a week day number."
msgstr ""
"Zwróć przedmiot iterujący dla *miesiąca* - z ang. - *month* w *roku* - z "
"ang. - *year* podobnego do :meth:`itermonthdates`. Dni zwracane będą "
"krotkami składającymi się z numeru dnia i numeru dnia tygodnia."

msgid "Return an iterator for the month *month* in the year *year* similar to :meth:`itermonthdates`. Days returned will simply be day numbers."
msgstr ""
"Zwróć przedmiot iterujący dla *miesiąca* w *roku* - z ang. - *month* in the "
"*year* podobnego do :meth:`itermonthdates`. Dni zwracane będą po prostu "
"numerami dni."

msgid "Return a list of the weeks in the month *month* of the *year* as full weeks.  Weeks are lists of seven :class:`datetime.date` objects."
msgstr ""
"Zwróć listę tygodni w *miesiącach* - z ang. - *month* *roku* - z ang. - "
"*year* jako pełnych tygodni. Tygodnie są listami siedmiu przedmiotów "
":class:`datetime.date`."

msgid "Return a list of the weeks in the month *month* of the *year* as full weeks.  Weeks are lists of seven tuples of day numbers and weekday numbers."
msgstr ""
"Zwróć listę tygodni w *miesiącu*, *roku* jako pełnych tygodni. Tygodnie są "
"listami siedmiu krotek numerów dni i numerów dni tygodnia."

msgid "Return a list of the weeks in the month *month* of the *year* as full weeks.  Weeks are lists of seven day numbers."
msgstr ""
"Zwróć listę tygodni w *miesiącu*, *roku* jako pełnych tygodni. Tygodnie są "
"listami siedmio-dniowych liczb."

msgid "Return the data for the specified year ready for formatting. The return value is a list of month rows. Each month row contains up to *width* months (defaulting to 3). Each month contains between 4 and 6 weeks and each week contains 1--7 days. Days are :class:`datetime.date` objects."
msgstr ""
"Zwróć dane dla określonego roku gotowe do formatowania. Wartość zwracana "
"jest listą wierszy-miesięcy. Każdy wiersz miesięcy zawiera *szerokość* - z "
"ang. - *width* miesięcy (domyślnie 3). Każdy miesiąc zawiera pomiędzy 4 a 6 "
"tygodni a każdy tydzień zawiera między 1--7 dni. Dni są przedmiotami "
"uogólnienia :class:`datetime.date`."

msgid "Return the data for the specified year ready for formatting (similar to :meth:`yeardatescalendar`). Entries in the week lists are tuples of day numbers and weekday numbers. Day numbers outside this month are zero."
msgstr ""
"Zwróć dane dla określonego roku gotowe do formatowania (podobne do sposobu "
"postępowania :meth:`yeardatescalendar`). Wpisy na listach tygodni są "
"krotkami numerów dni i numerów dni tygodnia. Numery dni poza tym miesiącem "
"są równe zero."

msgid "Return the data for the specified year ready for formatting (similar to :meth:`yeardatescalendar`). Entries in the week lists are day numbers. Day numbers outside this month are zero."
msgstr ""
"Zwróć dane dla określonego roku gotowe do formatowania (podobne do sposobu "
"postępowania :meth:`yeardatescalendar`). Wpisy na listach tygodni są "
"numerami dni. Numery dni poza tym miesiącem są równe zero."

msgid "This class can be used to generate plain text calendars."
msgstr ""
"To uogólnienie może być używane do utworzenia kalendarzy czystym tekstem."

msgid ":class:`TextCalendar` instances have the following methods:"
msgstr ""
"Przykłady uogólnienia :class:`TextCalendar` mają następujące sposoby "
"postępowania:"

msgid "Return a month's calendar in a multi-line string. If *w* is provided, it specifies the width of the date columns, which are centered. If *l* is given, it specifies the number of lines that each week will use. Depends on the first weekday as specified in the constructor or set by the :meth:`setfirstweekday` method."
msgstr ""
"Zwróć kalendarz miesiąca w wielo-liniowym ciągu znaków. Jeśli *w* jest "
"dostarczony, określa szerokość kolumn daty, które są wycentrowane. Jeśli *l* "
"jest dane, określa liczbę linii, których każdy tydzień będzie używał. "
"Zależy od pierwszego dnia tygodnia jak określono w konstruktorze lub "
"ustawiono sposobem postępowania :meth:`setfirstweekday`."

msgid "Print a month's calendar as returned by :meth:`formatmonth`."
msgstr ""
"Wydrukuj miesięczny kalendarz jak zwrócono przez sposób postępowania "
":meth:`formatmonth`."

msgid "Return a *m*-column calendar for an entire year as a multi-line string. Optional parameters *w*, *l*, and *c* are for date column width, lines per week, and number of spaces between month columns, respectively. Depends on the first weekday as specified in the constructor or set by the :meth:`setfirstweekday` method.  The earliest year for which a calendar can be generated is platform-dependent."
msgstr ""
"Zwróć *m*-kolumnowy kalendarz dla całego roku jako wielo-liniowy ciąg "
"znaków. Opcjonalne parametry *w*, *l*, i *c* służą szerokości kolumn dat, "
"linii na tydzień i liczby odstępów pomiędzy kolumnami miesięcy, odpowiednio. "
"Zależy od pierwszego dnia tygodnia jak określono w konstruktorze lub "
"ustawiono sposobem postępowania :meth:`setfirstweekday`. Najwcześniejszy rok "
"dla którego kalendarz może być wytworzony zależy od maszyny/środowiska."

msgid "Print the calendar for an entire year as returned by :meth:`formatyear`."
msgstr ""
"Drukuj kalendarz dla całego roku jak zwrócono ze sposobu postępowania "
":meth:`formatyear`."

msgid "This class can be used to generate HTML calendars."
msgstr "To uogólnienie może być używane do wytworzenia kalendarzy HTML."

msgid ":class:`HTMLCalendar` instances have the following methods:"
msgstr ""
"Przykłady uogólnienia :class:`HTMLCalendar` mają następujące sposoby "
"postępowania:"

msgid "Return a month's calendar as an HTML table. If *withyear* is true the year will be included in the header, otherwise just the month name will be used."
msgstr ""
"Zwróć miesięczny kalendarz jako tabelę HTML. Jeśli *withyear* jest prawdziwe "
"rok zostanie załączony w nagłówku, w przeciwnym przypadku tylko nazwa "
"miesiąca będzie użyta."

msgid "Return a year's calendar as an HTML table. *width* (defaulting to 3) specifies the number of months per row."
msgstr ""
"Zwróć roczny kalendarz jako tabelę HTML. *szerokość* - z ang. - *width* "
"(domyślnie równa 3) określa liczbę miesięcy na wiersz."

msgid "Return a year's calendar as a complete HTML page. *width* (defaulting to 3) specifies the number of months per row. *css* is the name for the cascading style sheet to be used. :const:`None` can be passed if no style sheet should be used. *encoding* specifies the encoding to be used for the output (defaulting to the system default encoding)."
msgstr ""
"Zwróć kalendarz roczny jako kompletną stronę HTML. *szerokość* - z ang. - "
"*width* (domyślnie równa 3) określa liczbę miesięcy na wiersz. *css* jest "
"nazwą kaskadowego arkusza stylów do użycia. :const:`None` może być "
"przekazane jeśli żaden arkusz stylów nie ma być użyty. *kodowanie* - z ang. "
"- *encoding* określa kodowanie do użycia dla wyjścia (domyślnie domyślnego "
"kodowania systemowego)."

msgid "This subclass of :class:`TextCalendar` can be passed a locale name in the constructor and will return month and weekday names in the specified locale. If this locale includes an encoding all strings containing month and weekday names will be returned as unicode."
msgstr ""
"To podrzędne uogólnienie uogólnienia :class:`TextCalendar` może otrzymać "
"przekazaną nazwę lokalizacji w konstruktorze i zwróci miesiąc i dzień "
"tygodnia w określonej lokalizacji. Jeśli ta lokalizacja zawiera kodowanie, "
"wszystkie ciągi znaków zawierające nazwy miesiąca i dni tygodnia będą "
"zwrócone jako Unicode."

msgid "This subclass of :class:`HTMLCalendar` can be passed a locale name in the constructor and will return month and weekday names in the specified locale. If this locale includes an encoding all strings containing month and weekday names will be returned as unicode."
msgstr ""
"To podrzędne uogólnienie uogólnienia :class:`HTMLCalendar` może otrzymać "
"przekazaną nazwę lokalizacji w konstruktorze i zwróci nazwy miesiąca i dni "
"tygodnia w określonej lokalizacji. Jeśli ta lokalizacja zawiera kodowanie, "
"wszystkie ciągi znaków zawierające nazwy miesięcy i dni tygodnia będą "
"zwrócone jako Unicode."

msgid "For simple text calendars this module provides the following functions."
msgstr ""
"Dla prostych kalendarzy tekstowych ten moduł dostarcza następujące zadania."

msgid "Sets the weekday (``0`` is Monday, ``6`` is Sunday) to start each week. The values :const:`MONDAY`, :const:`TUESDAY`, :const:`WEDNESDAY`, :const:`THURSDAY`, :const:`FRIDAY`, :const:`SATURDAY`, and :const:`SUNDAY` are provided for convenience. For example, to set the first weekday to Sunday::"
msgstr ""
"Ustawia dzień tygodnia (``0`` jest poniedziałkiem, ``6`` jest niedzielą) "
"jako początek każdego tygodnia. Wartości :const:`MONDAY`, :const:`TUESDAY`, "
":const:`WEDNESDAY`, :const:`THURSDAY`, :const:`FRIDAY`, :const:`SATURDAY` i "
":const:`SUNDAY` są dostarczone dla wygody. Dla przykładu, aby ustawić "
"pierwszy dzień tygodnia na Niedzielę::"

msgid "import calendar calendar.setfirstweekday(calendar.SUNDAY)"
msgstr "import calendar calendar.setfirstweekday(calendar.SUNDAY)"

msgid "Returns the current setting for the weekday to start each week."
msgstr ""
"Zwraca obecne ustawienie dla dnia tygodnia którym zaczyna się każdy tydzień."

msgid "Returns :const:`True` if *year* is a leap year, otherwise :const:`False`."
msgstr ""
"Zwraca :const:`True` jeśli *rok* - z ang - *year* jest przestępny w "
"przeciwnym razie :const:`False`."

msgid "Returns the number of leap years in the range from *y1* to *y2* (exclusive), where *y1* and *y2* are years."
msgstr ""
"Zwraca liczbę lat przestępnych w zakresie od *y1* do *y2* (wyłączając lata "
"brzegowe) gdzie *y1* i *y2* są latami."

msgid "This function works for ranges spanning a century change."
msgstr "To zadanie pracuje dla zakresów rozpinających zmianę stulecia."

msgid "Returns the day of the week (``0`` is Monday) for *year* (``1970``--...), *month* (``1``--``12``), *day* (``1``--``31``)."
msgstr ""
"Zwraca dzień tygodnia (``0`` to poniedziałek) dla *roku* - z ang. - *year* "
"(``1970``--...), *miesiąca* - z ang. - *month* (``1``--``12``), *dnia* - z "
"ang - *day* (``1``--``31``)."

msgid "Return a header containing abbreviated weekday names. *n* specifies the width in characters for one weekday."
msgstr ""
"Zwróć nagłówek zawierający skrócone nazwy dni tygodnia. *n* określa "
"szerokość w znakach dla jednego dnia tygodnia."

msgid "Returns weekday of first day of the month and number of days in month,  for the specified *year* and *month*."
msgstr ""
"Zwraca dzień tygodnia pierwszego dnia miesiąca i liczbę dni w miesiącu, dla "
"określonego *roku* i *miesiąca*."

msgid "Returns a matrix representing a month's calendar.  Each row represents a week; days outside of the month a represented by zeros. Each week begins with Monday unless set by :func:`setfirstweekday`."
msgstr ""
"Zwraca matrycę reprezentującą kalendarz miesięczny. Każdy wiersz "
"reprezentuje tydzień; dni poza miesiącem są reprezentowane przez zera. Każdy "
"tydzień zaczyna się od poniedziałku chyba że ustawiono inaczej za pomocą "
"zadania :func:`setfirstweekday`."

msgid "Prints a month's calendar as returned by :func:`month`."
msgstr ""
"Wypisuje miesięczny kalendarz taki jak zwrócony przez zadanie :func:`month`."

msgid "Returns a month's calendar in a multi-line string using the :meth:`formatmonth` of the :class:`TextCalendar` class."
msgstr ""
"Zwraca miesięczny kalendarz w wielo-liniowym ciągu znaków używając sposobu "
"postępowania :meth:`formatmonth` uogólnienia :class:`TextCalendar`"

msgid "Prints the calendar for an entire year as returned by  :func:`calendar`."
msgstr ""
"Wypisuje kalendarz dla całego roku jak zwrócony przez zadanie "
":func:`calendar`."

msgid "Returns a 3-column calendar for an entire year as a multi-line string using the :meth:`formatyear` of the :class:`TextCalendar` class."
msgstr ""
"Zwróć 3-kolumnowy kalendarz dla całego roku jako wielo-liniowy ciąg znaków "
"używając sposobu postępowania :meth:`formatyear` uogólnienia "
":class:`TextCalendar`."

msgid "An unrelated but handy function that takes a time tuple such as returned by the :func:`gmtime` function in the :mod:`time` module, and returns the corresponding Unix timestamp value, assuming an epoch of 1970, and the POSIX encoding.  In fact, :func:`time.gmtime` and :func:`timegm` are each others' inverse."
msgstr ""
"Niezwiązane ale użyteczne zadanie, które pobiera krotkę czasu taką jak "
"zwracana przez zadanie :func:`gmtime` w module :mod:`time` i zwraca "
"odpowiadającą wartość stempla czasowego Unix-a, przyjmując epokę 1970, i "
"kodowanie POSIX. Faktycznie zadania :func:`time.gmtime` i :func:`timegm` są "
"wzajemnymi przeciwieństwami."

msgid "The :mod:`calendar` module exports the following data attributes:"
msgstr "Moduł :mod:`calendar` wystawia następujące właściwości danych:"

msgid "An array that represents the days of the week in the current locale."
msgstr "Tabela która reprezentuje dni tygodnia w obecnej lokalizacji."

msgid "An array that represents the abbreviated days of the week in the current locale."
msgstr "Tabela która reprezentuje skrócone dni tygodnia w obecnej lokalizacji."

msgid "An array that represents the months of the year in the current locale.  This follows normal convention of January being month number 1, so it has a length of 13 and  ``month_name[0]`` is the empty string."
msgstr ""
"Tabela która reprezentuje miesiące w roku w obecnej lokalizacji. To jest w "
"zgodzie z konwencją według której styczeń jest miesiącem numer 1, więc ma "
"długość 13 i ``month_name[0]`` jest pustym ciągiem znaków."

msgid "An array that represents the abbreviated months of the year in the current locale.  This follows normal convention of January being month number 1, so it has a length of 13 and  ``month_abbr[0]`` is the empty string."
msgstr ""
"Tabela, która reprezentuje skrócone miesiące w roku w obecnej lokalizacji. "
"To jest w zgodzie z konwencją, według której styczeń jest miesiącem numer 1, "
"więc tabela ma długość 13 i ``month_abbr[0]`` jest pustym ciągiem znaków."

msgid "Object-oriented interface to dates and times with similar functionality to the :mod:`time` module."
msgstr ""
"Zorientowany na przedmioty sprzęg dla dat i czasów z podobnymi "
"funkcjonalnościami dla modułu :mod:`time`."

msgid "Low-level time related functions."
msgstr "Niskiego-poziomu zadania związane z czasem."

msgid ":mod:`cgi` --- Common Gateway Interface support"
msgstr ""
":mod:`cgi` --- wsparcie dla wspólnego sprzęgu bramki - z ang. - Common "
"Gateway Interface"

msgid "Support module for Common Gateway Interface (CGI) scripts."
msgstr "Wspierający moduł dla skryptów sprzęgu wspólnej bramki (z ang. CGI)."

msgid "This module defines a number of utilities for use by CGI scripts written in Python."
msgstr ""
"Ten moduł definiuje pewną liczbę użyteczności dla użycia przez skrypty CGI "
"napisane w języku pytonowskim."

msgid "Introduction"
msgstr "Wprowadzenie"

msgid "A CGI script is invoked by an HTTP server, usually to process user input submitted through an HTML ``<FORM>`` or ``<ISINDEX>`` element."
msgstr ""
"Skrypt CGI jest wywoływany przez serwer HTTP, zwykle aby przetworzyć wejście "
"użytkownika dostarczone przez HTML ``<FORM>`` lub element ``<ISINDEX>``."

msgid "Most often, CGI scripts live in the server's special :file:`cgi-bin` directory. The HTTP server places all sorts of information about the request (such as the client's hostname, the requested URL, the query string, and lots of other goodies) in the script's shell environment, executes the script, and sends the script's output back to the client."
msgstr ""
"Najczęściej, Skrypty CGI przebywają w katalogu specjalnym serwera :file"
":`cgi-bin`. Serwer HTTP umieszcza wszelkiego rodzaju informacje o zapytaniu "
"(takie jak nazwa hosta klienta, oczekiwany adres URL, ciąg zapytania, i "
"wiele innych dobrych rzeczy) w środowisku powłoki skryptu, wykonuje skrypt i "
"wysyła wyjście skryptu z powrotem do klienta."

msgid "The script's input is connected to the client too, and sometimes the form data is read this way; at other times the form data is passed via the \"query string\" part of the URL.  This module is intended to take care of the different cases and provide a simpler interface to the Python script.  It also provides a number of utilities that help in debugging scripts, and the latest addition is support for file uploads from a form (if your browser supports it)."
msgstr ""
"Wejście skryptu jest połączone z klientem także, i czasami dane formularza "
"są wczytywane tą drogą także; innym razem dane formularza są przekazywane "
"przez \"ciąg zapytania\" jako część adresu URL. Ten moduł jest przeznaczony do "
"zajmowania się różnymi przypadkami i dostarczenia prostszego sprzęgu dla "
"skryptu języka pytonowskiego. To także dostarcza pewną liczbę użyteczności "
"które pomagają w odpluskwianiu skryptów zaś najnowszym dodatkiem jest "
"wsparcie dla załadowywania plików przez formularz (jeśli twoja przeglądarka "
"to wspomaga)."

msgid "The output of a CGI script should consist of two sections, separated by a blank line.  The first section contains a number of headers, telling the client what kind of data is following.  Python code to generate a minimal header section looks like this::"
msgstr ""
"Wyjście skryptu CGI powinno składać się z dwóch sekcji, oddzielonych pustą "
"linią. Pierwszy rozdział zawiera liczbę nagłówków, mówiąc klientowi jakiego "
"rodzaju dane nastąpią potem. Kod języka pytonowskiego aby wytworzyć "
"minimalny rozdział nagłówkowy wygląda następująco::"

msgid "print(\"Content-Type: text/html\")    # HTML is following print()                             # blank line, end of headers"
msgstr ""
"print(\"Content-Type: text/html\")    # HTML następuje print() "
"                            # pusty wiersz, koniec nagłówków"

msgid "The second section is usually HTML, which allows the client software to display nicely formatted text with header, in-line images, etc. Here's Python code that prints a simple piece of HTML::"
msgstr ""
"Drugi rozdziałem jest zwykle HTML, który pozwala oprogramowaniu klienta "
"wyświetlić ładnie sformatowany tekst z nagłówkiem, obrazkami w-jednej-linii "
"itp. Tu jest kod języka pytonowskiego który drukuje prosty kawałek HTML-a::"

msgid "print(\"<TITLE>CGI script output</TITLE>\") print(\"<H1>This is my first CGI script</H1>\") print(\"Hello, world!\")"
msgstr ""
"print(\"<TITLE>Wyjście skryptu CGI</TITLE>\") print(\"<H1>To jest mój pierwszy "
"skrypt CGI</H1>\") print(\"Witaj świecie!\")"

msgid "Using the cgi module"
msgstr "Użycie modułu cgi"

msgid "Begin by writing ``import cgi``."
msgstr "Zacznij przez napisanie ``import cgi``."

msgid "When you write a new script, consider adding these lines::"
msgstr "Gdy piszesz nowy skrypt, rozważ dodanie tych linii::"

msgid "import cgitb cgitb.enable()"
msgstr "import cgitb cgitb.enable()"

msgid "This activates a special exception handler that will display detailed reports in the Web browser if any errors occur.  If you'd rather not show the guts of your program to users of your script, you can have the reports saved to files instead, with code like this::"
msgstr ""
"To aktywuje specjalną obsługę błędów, która będzie wyświetlać szczegółowe "
"raporty o błędach w przeglądarce sieciowej jeśli nastąpią jakiekolwiek "
"błędy. Jeśli wolisz raczej nie pokazywać wnętrzności swojego programu dla "
"użytkowników twojego skryptu możesz mieć raporty zapisane do pliku zamiast "
"tego, za pomocą kodu takiego jak ten::"

msgid "import cgitb cgitb.enable(display=0, logdir=\"/tmp\")"
msgstr "import cgitb cgitb.enable(display=0, logdir=\"/tmp\")"

msgid "It's very helpful to use this feature during script development. The reports produced by :mod:`cgitb` provide information that can save you a lot of time in tracking down bugs.  You can always remove the ``cgitb`` line later when you have tested your script and are confident that it works correctly."
msgstr ""
"Jest bardzo przydatnym użycie tej właściwości w czasie rozwijania skryptu. "
"Raporty produkowane przez :mod:`cgitb` dostarczają informację która może "
"oszczędzić Ci wiele czasu w śledzeniu błędów. Możesz zawsze usunąć ``cgitb`` "
"linię później gdy przetestowałeś swój skrypt i jesteś pewien że działa on "
"prawidłowo."

msgid "To get at submitted form data, use the :class:`FieldStorage` class.  Instantiate it exactly once, without arguments.  This reads the form contents from standard input or the environment (depending on the value of various environment variables set according to the CGI standard).  Since it may consume standard input, it should be instantiated only once."
msgstr ""
"Aby dostać się do danych podanych przez formularz, użyj uogólnienia "
":class:`FieldStorage`. Daj przykład tego uogólnienia tylko raz, bez "
"parametrów. To wczyta zawartość formularza ze standardowego wejścia "
"środowiska (w zależności od wartości różnych zmiennych środowiskowych "
"ustawionych zgodnie ze standardem CGI) Ponieważ może to pochłonąć "
"standardowe wejście, powinno się dawać przykład tego uogólnienia tylko raz."

msgid "The :class:`FieldStorage` instance can be indexed like a Python dictionary. It allows membership testing with the :keyword:`in` operator, and also supports the standard dictionary method :meth:`keys` and the built-in function :func:`len`.  Form fields containing empty strings are ignored and do not appear in the dictionary; to keep such values, provide a true value for the optional *keep_blank_values* keyword parameter when creating the :class:`FieldStorage` instance."
msgstr ""
"Przykład uogólnienia :class:`FieldStorage` może być indeksowany jak słownik "
"języka pytonowskiego. Pozwala to na sprawdzanie członkostwa za pomocą "
"operatora :keyword:`in`, a także wsparcie standardowego sposobu postępowania "
"słownika :meth:`keys` i wbudowanego zadania :func:`len`. Pola formularza "
"zawierające puste ciągi znaków są ignorowane i nie pojawiają się w słowniku; "
"Aby trzymać takie wartości dostarcz prawdziwą wartość dla opcjonalnego "
"parametru słowa kluczowego *keep_blank_values* gdy tworzony jest przykład "
"uogólnienia :class:`FieldStorage`."

msgid "For instance, the following code (which assumes that the :mailheader:`Content-Type` header and blank line have already been printed) checks that the fields ``name`` and ``addr`` are both set to a non-empty string::"
msgstr ""
"Dla przykładu, następujący kod (który zakłada, że nagłówek :mailheader"
":`Content-Type` i puste linie zostały już wydrukowane) sprawdza czy pola "
"``nazwa`` i ``addr`` zostały oba ustawione na nie-pusty ciąg znaków::"

msgid "form = cgi.FieldStorage() if \"name\" not in form or \"addr\" not in form:     print(\"<H1>Error</H1>\")     print(\"Please fill in the name and addr fields.\")     return print(\"<p>name:\", form[\"name\"].value) print(\"<p>addr:\", form[\"addr\"].value) ...further form processing here..."
msgstr ""
"form = cgi.FieldStorage() if \"name\" not in form or \"addr\" not in form:     "
"print(\"<H1>Błąd</H1>\")     print(\"Proszę wprowadź pola nazwa i adres.\")     "
"return print(\"<p>name:\", form[\"name\"].value) print(\"<p>addr:\", "
"form[\"addr\"].value) ...dalsza obróbka formularza tutaj..."

msgid "Here the fields, accessed through ``form[key]``, are themselves instances of :class:`FieldStorage` (or :class:`MiniFieldStorage`, depending on the form encoding). The :attr:`value` attribute of the instance yields the string value of the field.  The :meth:`getvalue` method returns this string value directly; it also accepts an optional second argument as a default to return if the requested key is not present."
msgstr ""
"Tutaj pola, dostępne przez odwołanie ``form[key]``, są same w sobie "
"przykładami uogólnienia :class:`FieldStorage` (lub "
":class:`MiniFieldStorage`, w zależności od kodowania formularza). Właściwość "
":attr:`value` przykładu wydaje wartość ciągu znaków tego pola. Sposób "
"postępowania :meth:`getvalue` zwraca tę wartość ciągu znaków bezpośrednio; "
"akceptuje także opcjonalny drugi parametr jako domyślny do zwrócenia jeśli "
"oczekiwany klucz nie jest obecny."

msgid "If the submitted form data contains more than one field with the same name, the object retrieved by ``form[key]`` is not a :class:`FieldStorage` or :class:`MiniFieldStorage` instance but a list of such instances.  Similarly, in this situation, ``form.getvalue(key)`` would return a list of strings. If you expect this possibility (when your HTML form contains multiple fields with the same name), use the :func:`getlist` function, which always returns a list of values (so that you do not need to special-case the single item case).  For example, this code concatenates any number of username fields, separated by commas::"
msgstr ""
"Jeśli przekazane dane formularza zawierają więcej niż jedno pole o tej samej "
"nazwie, przedmiot otrzymany przez wywołanie ``form[key]`` nie jest "
"przykładem :class:`FieldStorage` lub :class:`MiniFieldStorage`  ale listą "
"takich przykładów. Podobnie w tej sytuacji, ``form.getvalue(key)`` "
"zwróciłoby listę ciągów znaków. Jeśli oczekujesz tej możliwości (kiedy twój "
"formularz HTML zawiera wiele pól o tej samej nazwie) użyj zadania "
":func:`getlist`, które zawsze zwraca listę wartości (tak że nie potrzebujesz "
"szczególnego przypadku dla przypadku pojedynczego elementu). Dla przykładu "
"ten kod łączy dowolną liczbę pól nazwy użytkownika oddzielonych przez "
"przecinki::"

msgid "value = form.getlist(\"username\") usernames = \",\".join(value)"
msgstr "value = form.getlist(\"username\") usernames = \",\".join(value)"

msgid "If a field represents an uploaded file, accessing the value via the :attr:`value` attribute or the :func:`getvalue` method reads the entire file in memory as a string.  This may not be what you want. You can test for an uploaded file by testing either the :attr:`filename` attribute or the :attr:`!file` attribute.  You can then read the data at leisure from the :attr:`!file` attribute::"
msgstr ""
"Jeśli pole reprezentuje załadowany plik, dostęp do wartości przez właściwość "
":attr:`value` lub sposób postępowania :func:`getvalue` wczytuje cały plik "
"do pamięci jako ciąg znaków. To może nie być tym czego oczekujesz. Możesz "
"sprawdzić załadowany plik przez przetestowanie albo właściwości "
":attr:`filename` albo właściwości :attr:`!file`. Możesz wtedy wczytać dane w "
"czasie wolnym z właściwości :attr:`!file`::"

msgid "fileitem = form[\"userfile\"] if fileitem.file:     # It's an uploaded file; count lines     linecount = 0     while True:         line = fileitem.file.readline()         if not line: break         linecount = linecount + 1"
msgstr ""
"fileitem = form[\"userfile\"] if fileitem.file:     # to załadowany plik; "
"zlicz linie     linecount = 0     while True:         line = "
"fileitem.file.readline()         if not line: break         linecount = "
"linecount + 1"

msgid "If an error is encountered when obtaining the contents of an uploaded file (for example, when the user interrupts the form submission by clicking on a Back or Cancel button) the :attr:`done` attribute of the object for the field will be set to the value -1."
msgstr ""
"Jeśli napotkany zostanie błąd podczas otrzymywania zawartości załadowanego "
"pliku (dla przykładu, gdy użytkownik przerwie działanie formularza przez "
"kliknięcie  przycisku Wstecz lub Anuluj) właściwość :attr:`done` przedmiotu "
"dla pola zostanie ustawiona na wartość -1."

msgid "The file upload draft standard entertains the possibility of uploading multiple files from one field (using a recursive :mimetype:`multipart/\\*` encoding). When this occurs, the item will be a dictionary-like :class:`FieldStorage` item. This can be determined by testing its :attr:`!type` attribute, which should be :mimetype:`multipart/form-data` (or perhaps another MIME type matching :mimetype:`multipart/\\*`).  In this case, it can be iterated over recursively just like the top-level form object."
msgstr ""
"Standard ładowania pliku przewiduje możliwość załadowania wielu plików z "
"jednego pola (używając rekursywnego kodowania :mimetype:`multipart/\\*`). Gdy "
"to się zdarzy, element będzie słowniko-podobnym elementem "
":class:`FieldStorage`. To może być określone przez sprawdzenie właściwości "
":attr:`!type`, która powinna być :mimetype:`multipart/form-data` (lub "
"byćmoże inny typ MIME pasujący do :mimetype:`multipart/\\*`). W tym przypadku "
"może być on iterowany rekursywnie tak, jak przedmiot formularza nadrzędnego "
"poziomu."

msgid "When a form is submitted in the \"old\" format (as the query string or as a single data part of type :mimetype:`application/x-www-form-urlencoded`), the items will actually be instances of the class :class:`MiniFieldStorage`.  In this case, the :attr:`!list`, :attr:`!file`, and :attr:`filename` attributes are always ``None``."
msgstr ""
"Gdy formularz jest podawany w \"starym\" formacie (jako ciąg zapytania lub "
"pojedyncza część danych typu :mimetype:`application/x-www-form-urlencoded`), "
"wszystkie elementy właściwie będą przykładami uogólnienia "
":class:`MiniFieldStorage`. W tym przypadku, właściwości :attr:`!list`, "
":attr:`!file`, i :attr:`filename` są zawsze ``None``."

msgid "A form submitted via POST that also has a query string will contain both :class:`FieldStorage` and :class:`MiniFieldStorage` items."
msgstr ""
"Formularz podany przez sposób postępowania POST który także zawiera ciąg "
"zapytania będzie zawierał zarówno elementy :class:`FieldStorage` jak i "
":class:`MiniFieldStorage`."

msgid "Higher Level Interface"
msgstr "Sprzęg Wyższego Poziomu (Higher Level Interface)"

msgid "The previous section explains how to read CGI form data using the :class:`FieldStorage` class.  This section describes a higher level interface which was added to this class to allow one to do it in a more readable and intuitive way.  The interface doesn't make the techniques described in previous sections obsolete --- they are still useful to process file uploads efficiently, for example."
msgstr ""
"Poprzednia sekcja wyjaśnia jak czytać dane z formularza CGI używając "
"uogólnienia :class:`FieldStorage`. Ten rozdział opisuje sprzęg wyższego "
"rzędu, który został dodany do tego uogólnienia aby pozwolić robić to w "
"bardziej czytelny i intuicyjny sposób. Sprzęg nie powoduje że techniki "
"opisane w poprzednich rozdziałach stają się zbędne --- one są wciąż "
"użyteczne aby wykonywać ładowanie plików efektywnie, dla przykładu."

msgid "The interface consists of two simple methods. Using the methods you can process form data in a generic way, without the need to worry whether only one or more values were posted under one name."
msgstr ""
"Sprzęg składa się z dwóch prostych sposobów postępowania. Używając sposobów "
"postępowania możesz przetwarzać dane w zastępczy sposób bez konieczności "
"martwienia się czy tylko jedna czy więcej danych zostało opublikowanych pod "
"daną nazwą."

msgid "In the previous section, you learned to write following code anytime you expected a user to post more than one value under one name::"
msgstr ""
"W poprzednim rozdziale, dowiedziałeś się jak pisać następujący kod za każdym "
"razem gdy spodziewałeś się że użytkownik opublikuje więcej niż jedną "
"wartość pod jedną nazwą::"

msgid "item = form.getvalue(\"item\") if isinstance(item, list):     # The user is requesting more than one item. else:     # The user is requesting only one item."
msgstr ""
"item = form.getvalue(\"item\") if isinstance(item, list): # Użytkownik "
"oczekuje więcej niż jednej rzeczy. else: # Użytkownik oczekuje tylko jednej "
"rzeczy."

msgid "This situation is common for example when a form contains a group of multiple checkboxes with the same name::"
msgstr ""
"Ta sytuacja jest obecna dla przykładu gdy formularz zawiera grupę wielu pól "
"zaznaczania o tej samej nazwie::"

msgid "<input type=\"checkbox\" name=\"item\" value=\"1\" /> <input type=\"checkbox\" name=\"item\" value=\"2\" />"
msgstr ""
"<input type=\"checkbox\" name=\"item\" value=\"1\" /> <input type=\"checkbox\" "
"name=\"item\" value=\"2\" />"

msgid "In most situations, however, there's only one form control with a particular name in a form and then you expect and need only one value associated with this name.  So you write a script containing for example this code::"
msgstr ""
"W większości przypadków, jednakże, istnieje tylko jedna urządzenie "
"formularza o określonej nazwie w formularzu i wtedy oczekujesz i "
"potrzebujesz tylko jednej wartości powiązanej z tą nazwą. Więc piszesz "
"skrypt zawierający dla przykładu ten kod::"

msgid "user = form.getvalue(\"user\").upper()"
msgstr "user = form.getvalue(\"user\").upper()"

msgid "The problem with the code is that you should never expect that a client will provide valid input to your scripts.  For example, if a curious user appends another ``user=foo`` pair to the query string, then the script would crash, because in this situation the ``getvalue(\"user\")`` method call returns a list instead of a string.  Calling the :meth:`~str.upper` method on a list is not valid (since lists do not have a method of this name) and results in an :exc:`AttributeError` exception."
msgstr ""
"Problem z kodem polega na tym, że nigdy nie powinieneś oczekiwać, że klient "
"dostarczy właściwe wpisy do twoich skryptów. Dla przykładu, jeśli ciekawy "
"użytkownik dołoży jeszcze jedną parę ``user=foo`` do ciągu zapytania, wtedy "
"skrypt ulegnie wypadkowi, ponieważ w tej sytuacji wywołanie sposobu "
"postępowania ``getvalue(\"user\")`` zwróci listę zamiast ciągu znaków. "
"Wywołanie sposobu postępowania :meth:`~str.upper` na liście nie jest "
"prawidłowe (gdyż listy nie mają sposobów postępowania o tej nazwie) i kończy "
"się wyjątkiem :exc:`AttributeError`."

msgid "Therefore, the appropriate way to read form data values was to always use the code which checks whether the obtained value is a single value or a list of values.  That's annoying and leads to less readable scripts."
msgstr ""
"Zatem, właściwym sposobem aby wczytywać dane formularza było zawsze używanie "
"kodu który sprawdza czy otrzymana wartość jest pojedynczą wartością czy "
"listą wartości. To jest irytujące i prowadzi do mniej czytelnych skryptów."

msgid "A more convenient approach is to use the methods :meth:`getfirst` and :meth:`getlist` provided by this higher level interface."
msgstr ""
"Bardziej użyteczne podejście polega na tym aby używać sposobów postępowania "
":meth:`getfirst` i :meth:`getlist` dostarczanych przez sprzęg wyższego "
"poziomu."

msgid "This method always returns only one value associated with form field *name*. The method returns only the first value in case that more values were posted under such name.  Please note that the order in which the values are received may vary from browser to browser and should not be counted on. [#]_  If no such form field or value exists then the method returns the value specified by the optional parameter *default*.  This parameter defaults to ``None`` if not specified."
msgstr ""
"Ten sposób postępowania zawsze zwraca tylko jedną wartość związaną z polem "
"formularza *name*. Sposób postępowania zwraca tylko pierwszą wartość w "
"przypadku gdy więcej wartości zostało opublikowanych pod taką nazwą. Proszę "
"zauważ że kolejność w jakiej wartości są otrzymywane może różnić się między "
"przeglądarkami i nie powinien liczyć się. [#]_ Jeśli żadne takie pole "
"formularza ani wartość nie istnieje wtedy sposób postępowania zwraca wartość "
"określoną przez opcjonalny parametr *domyślny* - z ang - *default*. Ten "
"parametr domyślnie równy jest ``None`` jeśli nie jest określony."

msgid "This method always returns a list of values associated with form field *name*. The method returns an empty list if no such form field or value exists for *name*.  It returns a list consisting of one item if only one such value exists."
msgstr ""
"Ten sposób postępowania zawsze zwraca listę wartości związaną z polem "
"formularza *name*. Ten sposób postępowania zwraca pustą listę jeśli żadne "
"pole ani wartość nie istnieje dla *nazwy* - z ang. - *name*. Zwraca listę "
"składającą się z jednego elementu jeśli tylko jedna taka wartość istnieje."

msgid "Using these methods you can write nice compact code::"
msgstr "Używając tych sposobów postępowania możesz napisać ładny zgrabny kod::"

msgid "import cgi form = cgi.FieldStorage() user = form.getfirst(\"user\", \"\").upper()    # This way it's safe. for item in form.getlist(\"item\"):     do_something(item)"
msgstr ""
"import cgi form = cgi.FieldStorage() user = form.getfirst(\"user\", "
"\"\").upper()    # Tym sposobem jest bezpiecznie. for item in "
"form.getlist(\"item\"):     do_something(item)"

msgid "Functions"
msgstr "Zadania"

msgid "These are useful if you want more control, or if you want to employ some of the algorithms implemented in this module in other circumstances."
msgstr ""
"Te są użyteczne jeśli chcesz więcej kontrolować, lub jeśli chcesz zatrudnić "
"niektóre z algorytmów wypełnionych w tym module w innych przypadkach."

msgid "Parse a query in the environment or from a file (the file defaults to ``sys.stdin``).  The *keep_blank_values* and *strict_parsing* parameters are passed to :func:`urllib.parse.parse_qs` unchanged."
msgstr ""
"Wczytaj zapytanie w środowisku lub z pliku (plik domyślnie równy jest "
"``sys.stdin``). Parametry *keep_blank_values* i *strict_parsing* są "
"przekazywane dla zadania :func:`urllib.parse.parse_qs` bez zmian."

msgid "This function is deprecated in this module. Use :func:`urllib.parse.parse_qs` instead. It is maintained here only for backward compatibility."
msgstr ""
"To zadanie jest przedawnione w tym module. Używaj zadania "
":func:`urllib.parse.parse_qs` zamiast tego. Jest ono utrzymywane tutaj tylko "
"dla wstecznej zgodności."

msgid "Parse input of type :mimetype:`multipart/form-data` (for  file uploads). Arguments are *fp* for the input file and *pdict* for a dictionary containing other parameters in the :mailheader:`Content-Type` header."
msgstr ""
"Wczytaj wejście typu :mimetype:`multipart/form-data` (dla ładowania plików). "
"Parametrami są *fp* dla wejściowego pliku i *pdict* dla słownika "
"zawierającego inne parametry w nagłówku :mailheader:`Content-Type`"

msgid "Returns a dictionary just like :func:`urllib.parse.parse_qs` keys are the field names, each value is a list of values for that field.  This is easy to use but not much good if you are expecting megabytes to be uploaded --- in that case, use the :class:`FieldStorage` class instead which is much more flexible."
msgstr ""
"Zwraca słownik taki jak wtedy, gdy klucze :func:`urllib.parse.parse_qs` są "
"nazwami pól, każda wartość jest listą wartości dla tego pola. To jest łatwe "
"w użyciu ale nie bardzo dobre jeśli spodziewasz się megabajtów do "
"załadowania --- w tym przypadku, użyj uogólnienia :class:`FieldStorage` "
"zamiast tego i uzyskasz rozwiązanie o wiele bardziej elastyczne."

msgid "Note that this does not parse nested multipart parts --- use :class:`FieldStorage` for that."
msgstr ""
"Zauważ że to nie wczytuje zagnieżdżonych wieloczęściowych części --- użyj "
"uogólnienia :class:`FieldStorage` dla tego."

msgid "Parse a MIME header (such as :mailheader:`Content-Type`) into a main value and a dictionary of parameters."
msgstr ""
"Wczytaj nagłówek MIME (taki, jak :mailheader:`Content-Type`) do głównej "
"wartości i słownika parametrów."

msgid "Robust test CGI script, usable as main program. Writes minimal HTTP headers and formats all information provided to the script in HTML form."
msgstr ""
"Wydajny testowy skrypt CGI, użyteczny jako program główny. Zapisuje "
"minimalne nagłówki HTTP i formatuje całą informację dostarczoną dla skryptu "
"w formularzu HTML."

msgid "Format the shell environment in HTML."
msgstr "Formatuje środowisko powłoki w HTML-u"

msgid "Format a form in HTML."
msgstr "Formatuje formularz w HTML-u."

msgid "Format the current directory in HTML."
msgstr "Formatuje obecny katalog w HTML-u."

msgid "Print a list of useful (used by CGI) environment variables in HTML."
msgstr ""
"Drukuje listę użytecznych (używanych przez CGI) zmiennych środowiskowych w "
"HTML-u."

msgid "Convert the characters ``'&'``, ``'<'`` and ``'>'`` in string *s* to HTML-safe sequences.  Use this if you need to display text that might contain such characters in HTML.  If the optional flag *quote* is true, the quotation mark character (``'\"'``) is also translated; this helps for inclusion in an HTML attribute value, as in ``<A HREF=\"...\">``.  If the value to be quoted might include single- or double-quote characters, or both, consider using the :func:`quoteattr` function in the :mod:`xml.sax.saxutils` module instead."
msgstr ""
"Zamienia znaki ``'&'``, ``'<'`` i ``'>'`` w ciągu *s* do sekwencji "
"bezpiecznych dla HTML-a. Użyj tego jeśli potrzebujesz wyświetlić tekst który "
"może zawierać takie znaki w HTML-u. Jeśli opcjonalna flaga *cytatu* - z "
"ang. - *quote* jest prawdziwa, wtedy znak cytowania (``'\"'``) jest także "
"tłumaczony; To pomaga w załączaniu w HTML-u wartości właściwości jak w ``<A "
"HREF=\"...\">``. Jeśli wartość do cytowania może zawierać pojedyncze lub "
"podwójne znaki cytowania, lub oba, weź pod uwagę użycie zadania "
":func:`quoteattr` z modułu :mod:`xml.sax.saxutils` zamiast tego."

msgid "Caring about security"
msgstr "Troska o bezpieczeństwo"

msgid "There's one important rule: if you invoke an external program (via the :func:`os.system` or :func:`os.popen` functions. or others with similar functionality), make very sure you don't pass arbitrary strings received from the client to the shell.  This is a well-known security hole whereby clever hackers anywhere on the Web can exploit a gullible CGI script to invoke arbitrary shell commands.  Even parts of the URL or field names cannot be trusted, since the request doesn't have to come from your form!"
msgstr ""
"Istnieje jedna istotna zasada: Jeśli wywołujesz zewnętrzny program (przez "
"zadanie :func:`os.system` lub :func:`os.popen` lub inne o podobnym "
"działaniu), upewnij się bardzo że nie przekazujesz dowolnych ciągów znaków "
"otrzymanych od klienta do powłoki. To jest bardzo znana luka bezpieczeństwa "
"gdzie sprytni hakerzy dowolnie w sieci mogą wykorzystać naiwny skrypt CGI "
"aby wywołać dowolną komendę powłoki. Nawet częściom adresu URL lub nazwom "
"pól nie można ufać, gdyż zapytanie może nie pochodzić z formularza!"

msgid "To be on the safe side, if you must pass a string gotten from a form to a shell command, you should make sure the string contains only alphanumeric characters, dashes, underscores, and periods."
msgstr ""
"Aby trzymać się bezpiecznej strony, jeśli przekazujesz ciąg znaków otrzymany "
"z formularza do polecenia powłoki, powinieneś upewnić się, że ciąg znaków "
"zawiera tylko znaki alfanumeryczne, ukośniki, podkreślenia i kropki."

msgid "Installing your CGI script on a Unix system"
msgstr "Instalowanie twojego skryptu CGI na systemie Unix-owym"

msgid "Read the documentation for your HTTP server and check with your local system administrator to find the directory where CGI scripts should be installed; usually this is in a directory :file:`cgi-bin` in the server tree."
msgstr ""
"Przeczytaj dokumentację dla twojego serwera HTTP i sprawdź u swojego "
"administratora systemu aby dowiedzieć się który katalog powinien być użyty "
"dla instalowania skryptów CGI; zwykle to jest katalog :file:`cgi-bin` w "
"drzewie serwera."

msgid "Make sure that your script is readable and executable by \"others\"; the Unix file mode should be ``0o755`` octal (use ``chmod 0755 filename``).  Make sure that the first line of the script contains ``#!`` starting in column 1 followed by the pathname of the Python interpreter, for instance::"
msgstr ""
"Upewnij się że twój skrypt jest czytelny i wykonywalny przez \"innych\"; tryb "
"pliku Unix-a powinien być ``0o755`` ósemkowo (użyj ``chmod 0755 nazwa-"
"pliku``). Upewnij się, że pierwsza linia skryptu zawiera ``#!`` zaczynając w "
"kolumnie 1 po której następuje ścieżka dostępu do pliku programu "
"interpretującego polecenia języka pytonowskiego, dla przykładu::"

msgid "#!/usr/local/bin/python"
msgstr "#!/usr/local/bin/python"

msgid "Make sure the Python interpreter exists and is executable by \"others\"."
msgstr ""
"Upewnij się że program interpretujący polecenia języka pytonowskiego "
"istnieje i jest wykonywalny przez \"innych\"."

msgid "Make sure that any files your script needs to read or write are readable or writable, respectively, by \"others\" --- their mode should be ``0o644`` for readable and ``0o666`` for writable.  This is because, for security reasons, the HTTP server executes your script as user \"nobody\", without any special privileges.  It can only read (write, execute) files that everybody can read (write, execute).  The current directory at execution time is also different (it is usually the server's cgi-bin directory) and the set of environment variables is also different from what you get when you log in.  In particular, don't count on the shell's search path for executables (:envvar:`PATH`) or the Python module search path (:envvar:`PYTHONPATH`) to be set to anything interesting."
msgstr ""
"Upewnij się, że jakiekolwiek pliki które twój skrypt chce odczytać lub "
"zapisać są czytelne i możliwe do zapisania odpowiednio, przez \"innych\" --- "
"ich tryb powinien być ``0o644`` dla czytelnych i 0o666`` dla możliwych do "
"zapisania. To jest ponieważ z powodów bezpieczeństwa, serwer HTTP wykonuje "
"twój skrypt jako użytkownik \"nikt\" - z ang. - \"nobody\" bez żadnych "
"szczególnych przywilejów. Może tylko wczytywać (zapisywać, wykonywać) pliki "
"które wszyscy mogą czytać (zapisać, wykonać). Bierzący katalog w czasie "
"wykonania jest także inny (jest to zwykle katalog serwera cgi-bin) i "
"ustawienie zmiennych środowiskowych jest także inne od tego które dostajesz "
"gdy się zalogujesz. W szczególności, nie licz na ścieżkę przeszukiwania pod "
"kątem plików wykonywalnych (:envvar:`PATH`) ani na ścieżkę przeszukiwania "
"modułów języka pytonowskiego (:envvar:`PYTHONPATH`), że będą ustawione na "
"cokolwiek interesującego."

msgid "If you need to load modules from a directory which is not on Python's default module search path, you can change the path in your script, before importing other modules.  For example::"
msgstr ""
"Jeśli potrzebujesz załadować moduły z katalogu który nie jest domyślną "
"ścieżką przeszukiwania modułów języka pytonowskiego, możesz zmienić ścieżkę "
"w twoim skrypcie, przez importowaniem innych modułów. Dla przykładu::"

msgid "import sys sys.path.insert(0, \"/usr/home/joe/lib/python\") sys.path.insert(0, \"/usr/local/lib/python\")"
msgstr ""
"import sys sys.path.insert(0, \"/usr/home/joe/lib/python\") sys.path.insert(0, "
"\"/usr/local/lib/python\")"

msgid "(This way, the directory inserted last will be searched first!)"
msgstr ""
"(W ten sposób, katalog wstawiony jako ostatni będzie przeszukiwany jako "
"pierwszy!)"

msgid "Instructions for non-Unix systems will vary; check your HTTP server's documentation (it will usually have a section on CGI scripts)."
msgstr ""
"Instrukcje dla nie-Unixowych systemów będą różne; Sprawdź dokumentację "
"serwera HTTP (będzie zwykle miała sekcję o skryptach CGI)."

msgid "Testing your CGI script"
msgstr "Sprawdzanie twoich skryptów CGI"

msgid "Unfortunately, a CGI script will generally not run when you try it from the command line, and a script that works perfectly from the command line may fail mysteriously when run from the server.  There's one reason why you should still test your script from the command line: if it contains a syntax error, the Python interpreter won't execute it at all, and the HTTP server will most likely send a cryptic error to the client."
msgstr ""
"Niestety, skrypt CGI zwykle nie uruchomi się gdy spróbujesz go uruchomić z "
"wiersza poleceń i skrypt który działa dobrze z wiersza polecenia może "
"zawieźć nieoczekiwanie gdy uruchomiony z serwera. Jest jeden powód dla "
"którego wciąż powinieneś testować swój skrypt z wiersza polecenia: jeśli "
"zawiera błąd składniowy, program interpretujący polecenia języka "
"pytonowskiego nie wykona go w ogóle, a serwer HTTP najprawdopodobniej wyśle "
"tajemniczy komunikat o błędzie do klienta."

msgid "Assuming your script has no syntax errors, yet it does not work, you have no choice but to read the next section."
msgstr ""
"Zakładając, że twój skrypt nie ma błędów składniowych, a jednak wciąż nie "
"działa, nie masz wyboru, tylko musisz czytać dalej."

msgid "Debugging CGI scripts"
msgstr "Odpluskwianie skryptów CGI"

msgid "First of all, check for trivial installation errors --- reading the section above on installing your CGI script carefully can save you a lot of time.  If you wonder whether you have understood the installation procedure correctly, try installing a copy of this module file (:file:`cgi.py`) as a CGI script.  When invoked as a script, the file will dump its environment and the contents of the form in HTML form. Give it the right mode etc, and send it a request.  If it's installed in the standard :file:`cgi-bin` directory, it should be possible to send it a request by entering a URL into your browser of the form::"
msgstr ""
"Na początek, sprawdź najprostsze błędy instalacji --- czytanie powyższej "
"sekcji o instalowaniu twojego skryptu CGI może zaoszczędzić ci wiele czasu. "
"Jeśli zastanawiasz się czy zrozumiałeś procedurę instalacyjną prawidłowo, "
"spróbuj zainstalować kopię pliku tego modułu (:file:`cgi.py`) jako skrypt "
"CGI. Gdy wywołany jako skrypt, plik upuści swoje środowisko i zawartość "
"formularza w postaci HTML. Daj mu właściwy tryb itp. i wyślij mu zapytanie. "
"Jeśli jest zainstalowany w standardowym katalogu :file:`cgi-bin`, powinno "
"być możliwe wysłanie zapytania przez wstawienie adresu URL do twojej "
"przeglądarki w postaci::"

msgid "http://yourhostname/cgi-bin/cgi.py?name=Joe+Blow&addr=At+Home"
msgstr "http://yourhostname/cgi-bin/cgi.py?name=Joe+Blow&addr=At+Home"

msgid "If this gives an error of type 404, the server cannot find the script -- perhaps you need to install it in a different directory.  If it gives another error, there's an installation problem that you should fix before trying to go any further.  If you get a nicely formatted listing of the environment and form content (in this example, the fields should be listed as \"addr\" with value \"At Home\" and \"name\" with value \"Joe Blow\"), the :file:`cgi.py` script has been installed correctly.  If you follow the same procedure for your own script, you should now be able to debug it."
msgstr ""
"Jeśli zwróci błąd typu 404, wtedy serwer nie może znaleźć skryptu -- być "
"może potrzebujesz zainstalować go w innych katalogu. Jeśli daje inny błąd, "
"istnieje problem instalacji który powinieneś naprawić zanim spróbujesz iść "
"dalej. Jeśli otrzymujesz ładnie sformatowany wypis środowiska i zawartości "
"formularza (w tym przypadku, pola powinny być wypisane jako \"addr\" z "
"wartością \"At Home\" i \"name\" z wartością \"Joe Blow\"), plik skryptu "
":file:`cgi.py` zostały zainstalowane poprawnie. Jeśli wykonasz tę samą "
"procedurę dla twojego własnego skryptu, powinieneś móc go teraz odpluskwiać."

msgid "The next step could be to call the :mod:`cgi` module's :func:`test` function from your script: replace its main code with the single statement ::"
msgstr ""
"Następnym krokiem mogłoby być wezwanie zadania :func:`test` modułu "
":mod:`cgi` z twojego skryptu: zamiana jej głównego kodu na pojedyncze "
"stwierdzenie::"

msgid "cgi.test()"
msgstr "cgi.test()"

msgid "This should produce the same results as those gotten from installing the :file:`cgi.py` file itself."
msgstr ""
"To powinno dać te same wyniki jak te otrzymane z zainstalowania samego pliku "
":file:`cgi.py`."

msgid "When an ordinary Python script raises an unhandled exception (for whatever reason: of a typo in a module name, a file that can't be opened, etc.), the Python interpreter prints a nice traceback and exits.  While the Python interpreter will still do this when your CGI script raises an exception, most likely the traceback will end up in one of the HTTP server's log files, or be discarded altogether."
msgstr ""
"Gdy zwykły skrypt języka pytonowskiego zgłasza nieobsłużony wyjątek (dla "
"jakiegokolwiek powodu: z powodu literówki w nazwie modułu, pliku który nie "
"może być otwarty, itp.), program interpretujący polecenia języka "
"pytonowskiego wypisuje ładny wypis i wychodzi. Podczas gdy program "
"interpretujący polecenia języka pytonowskiego będzie wciąż to robił gdy twój "
"skrypt CGI zgłosi wyjątek, najprawdopodobniej wypis skończy w jednym z "
"plików logów serwera HTTP, lub zostanie odrzucony całkowicie."

msgid "Fortunately, once you have managed to get your script to execute *some* code, you can easily send tracebacks to the Web browser using the :mod:`cgitb` module. If you haven't done so already, just add the lines::"
msgstr ""
"Szczęśliwie, gdy już uda ci się wykonać *jakiś* kod za pomocą skryptu, "
"możesz łatwo wysyłać wypisy do przeglądarki używając :mod:`cgitb`. Jeśli "
"jeszcze nie zrobiłeś tego, po prostu dodaj linie::"

msgid "to the top of your script.  Then try running it again; when a problem occurs, you should see a detailed report that will likely make apparent the cause of the crash."
msgstr ""
"na górę twojego skryptu. Wtedy spróbuj uruchomić go jeszcze raz; gdy problem "
"pojawi się znów, powinieneś zobaczyć szczegółowy raport, który "
"prawdopodobnie uczyni jasnym powód wypadku."

msgid "If you suspect that there may be a problem in importing the :mod:`cgitb` module, you can use an even more robust approach (which only uses built-in modules)::"
msgstr ""
"Jeśli podejrzewasz, że może być problem w importowaniu modułu :mod:`cgitb`, "
"możesz użyć nawet jeszcze bardziej wydajnego podejścia (które używa tylko "
"modułów wbudowanych)::"

msgid "import sys sys.stderr = sys.stdout print(\"Content-Type: text/plain\") print() ...your code here..."
msgstr ""
"import sys sys.stderr = sys.stdout print(\"Content-Type: text/plain\") print() "
"...twój kod tutaj..."

msgid "This relies on the Python interpreter to print the traceback.  The content type of the output is set to plain text, which disables all HTML processing.  If your script works, the raw HTML will be displayed by your client.  If it raises an exception, most likely after the first two lines have been printed, a traceback will be displayed. Because no HTML interpretation is going on, the traceback will be readable."
msgstr ""
"To opiera się na programie interpretującym polecenia języka pytonowskiego, "
"że wydrukuje swój wypis. Typ treści wyjścia jest ustawiony na zwykły tekst, "
"co wyklucza całą obsługę HTML. Jeśli twój skrypt działa, surowy HTML "
"zostanie pokazany przez twojego klienta. Jeśli zgłasza wyjątek, "
"najprawdopodobniej po tym jak pierwsze linie zostaną wypisane, wypis "
"wsteczny zostanie wyświetlony. Ponieważ żadna interpretacja HTML-a nie "
"miejsca, wypis wsteczny będzie czytelny."

msgid "Common problems and solutions"
msgstr "Typowe problemy i ich rozwiązania"

msgid "Most HTTP servers buffer the output from CGI scripts until the script is completed.  This means that it is not possible to display a progress report on the client's display while the script is running."
msgstr ""
"Większość serwerów HTTP przechowuje w przestrzeni wymiany wyjście ze "
"skryptów CGI dopóki skrypt się nie zakończy. To oznacza, że nie jest możliwe "
"wyświetlenie raportu postępu na wyświetlaczu klienta kiedy skrypt działa."

msgid "Check the installation instructions above."
msgstr "Sprawdź instrukcje instalacyjne powyżej."

msgid "Check the HTTP server's log files.  (``tail -f logfile`` in a separate window may be useful!)"
msgstr ""
"Sprawdź pliki logu serwera HTTP. (``tail -f logfile`` w oddzielnym oknie "
"może być użyteczne!)"

msgid "Always check a script for syntax errors first, by doing something like ``python script.py``."
msgstr ""
"Zawsze sprawdzaj skrypt dla błędów składniowych najpierw, przez wykonanie "
"czegoś podobnego do ``python script.py``."

msgid "If your script does not have any syntax errors, try adding ``import cgitb; cgitb.enable()`` to the top of the script."
msgstr ""
"Jeśli twój skrypt nie ma żadnych błędów składniowych, spróbuj dodać ``import "
"cgitb; cgitb.enable()`` na górze skryptu."

msgid "When invoking external programs, make sure they can be found. Usually, this means using absolute path names --- :envvar:`PATH` is usually not set to a very useful value in a CGI script."
msgstr ""
"Gdy wywoływane są zewnętrzne programy upewnij się że mogą być znalezione. "
"Zwykle to oznacza, że używanie nazw ścieżek absolutnych --- :envvar:`PATH` "
"nie jest zwykle ustawiana na użyteczną wartość skryptu CGI."

msgid "When reading or writing external files, make sure they can be read or written by the userid under which your CGI script will be running: this is typically the userid under which the web server is running, or some explicitly specified userid for a web server's ``suexec`` feature."
msgstr ""
"Gdy wczytujesz lub zapisujesz zewnętrzne pliki, upewnij się że mogą one być "
"wczytane lub zapisane przez userid pod którym twój skrypt CGI będzie "
"działał: to jest typowo userid pod którym serwer sieci działa, lub pewny "
"jawnie określony userid dla właściwości sieciowego serwera ``suexec``."

msgid "Don't try to give a CGI script a set-uid mode.  This doesn't work on most systems, and is a security liability as well."
msgstr ""
"Nie próbuj nadawać skryptowi CGI trybu set-uid. To nie działa na większości "
"systemów, i jest odpowiedzialnością za bezpieczeństwo także."

msgid "Note that some recent versions of the HTML specification do state what order the field values should be supplied in, but knowing whether a request was received from a conforming browser, or even from a browser at all, is tedious and error-prone."
msgstr ""
"Zauważ że pewne niedawne wersje specyfikacji HTML-a określają w jakiej "
"kolejności wartości pól powinny być dostarczone, ale wiedzieć czy zapytanie "
"zostało otrzymane z odpowiadającej przeglądarki, czy też w ogóle z "
"przeglądarki jest nużące i podatne na błędy."

msgid ":mod:`cgitb` --- Traceback manager for CGI scripts"
msgstr ":mod:`cgitb` --- zarządca wypisów śledzenia dla skryptów CGI."

msgid "The :mod:`cgitb` module provides a special exception handler for Python scripts. (Its name is a bit misleading.  It was originally designed to display extensive traceback information in HTML for CGI scripts.  It was later generalized to also display this information in plain text.)  After this module is activated, if an uncaught exception occurs, a detailed, formatted report will be displayed.  The report includes a traceback showing excerpts of the source code for each level, as well as the values of the arguments and local variables to currently running functions, to help you debug the problem.  Optionally, you can save this information to a file instead of sending it to the browser."
msgstr ""
"Moduł :mod:`cgitb` dostarcza specjalnej obsługi wyjątków dla skryptów języka "
"pytonowskiego. (Jego nazwa jest nieco myląca. Był on oryginalnie "
"zaprojektowany do wyświetlania szerokich informacji wypisów śledzenia w "
"HTML-u dla skryptów CGI. To zostało później uogólnione dla wyświetlania "
"także informacji w czystym tekście.) Po tym jak ten moduł zostanie "
"aktywowany, jeśli niezłapany wyjątek zdarzy się, szczegółowy sformatowany "
"raport zostanie wyświetlony. Raport zawiera wypis śledzenia pokazujący "
"fragmenty kodu źródłowego dla każdego poziomu, zarówno jak też wartości "
"argumentów i zmiennych lokalnych dla aktualnie uruchomionych zadań, aby "
"pomóc odpluskwić problem. Opcjonalnie, możesz zachować tą informację w pliku "
"zamiast wysyłać ją do przeglądarki."

msgid "To enable this feature, simply add this to the top of your CGI script::"
msgstr ""
"Aby umożliwić tą właściwość, po prostu dodaj to na górę twojego skryptu "
"CGI::"

msgid "The options to the :func:`enable` function control whether the report is displayed in the browser and whether the report is logged to a file for later analysis."
msgstr ""
"Opcje dla zadania :func:`enable` kontrolują czy raport jest wyświetlany w "
"przeglądarce i czy raport jest logowany do pliku dla dalszej analizy."

msgid "This function causes the :mod:`cgitb` module to take over the interpreter's default handling for exceptions by setting the value of :attr:`sys.excepthook`."
msgstr ""
"To zadanie powoduje że moduł :mod:`cgitb` przejmuje domyślną obsługę "
"programu interpretującego dla wyjątków przez ustawianie wartości "
":attr:`sys.excepthook`."

msgid "The optional argument *display* defaults to ``1`` and can be set to ``0`` to suppress sending the traceback to the browser. If the argument *logdir* is present, the traceback reports are written to files.  The value of *logdir* should be a directory where these files will be placed. The optional argument *context* is the number of lines of context to display around the current line of source code in the traceback; this defaults to ``5``. If the optional argument *format* is ``\"html\"``, the output is formatted as HTML.  Any other value forces plain text output.  The default value is ``\"html\"``."
msgstr ""
"Opcjonalny parametr *display* domyślnie równy jest ``1`` i może być "
"ustawiony na ``0`` aby wycofać wysyłanie wypisu wstecznego dla przeglądarki. "
"Jeśli argument *logdir* jest obecny, raporty wypisów śledzenia są "
"zapisywane do plików. Wartość *logdir* powinna być katalogiem gdzie te pliki "
"będą umieszczone. Opcjonalny parametr *context* jest liczbą linii kontekstu "
"do wyświetlenia na około obecnej linii kodu źródłowego w wypisie śledzenia; "
"to domyślnie jest ``5``. Jeśli opcjonalny parametr *format* jest "
"``\"html\"``, wyjście będzie sformatowane jako HTML. Jakiekolwiek inne "
"wartości zmuszają do wypisu czystym tekstem. Domyślna wartość jest "
"``\"html\"``."

msgid "This function handles an exception using the default settings (that is, show a report in the browser, but don't log to a file). This can be used when you've caught an exception and want to report it using :mod:`cgitb`.  The optional *info* argument should be a 3-tuple containing an exception type, exception value, and traceback object, exactly like the tuple returned by :func:`sys.exc_info`.  If the *info* argument is not supplied, the current exception is obtained from :func:`sys.exc_info`."
msgstr ""
"To zadanie obsługuje wyjątek używając domyślnych ustawień (to jest, pokazuje "
"raport w przeglądarce, ale nie loguje do pliku). To może być użyte gdy "
"złapiesz wyjątek i chcesz złożyć raport o tym używając :mod:`cgitb`. "
"Opcjonalny parametr *info* powinien być 3-krotką zawierającą typ wyjątku, "
"wartość wyjątku i przedmiot wypisu śledzenia wstecz, dokładnie jak krotka "
"zwrócona przez :func:`sys.exc_info`. Jeśli parametr *info* nie jest "
"dostarczony, obecny wyjątek jest otrzymywany z zadania :func:`sys.exc_info`."

msgid ":mod:`chunk` --- Read IFF chunked data"
msgstr ":mod:`chunk` --- Wczytaj pokawałkowane dane IFF"

msgid "This module provides an interface for reading files that use EA IFF 85 chunks. [#]_  This format is used in at least the Audio Interchange File Format (AIFF/AIFF-C) and the Real Media File Format (RMFF).  The WAVE audio file format is closely related and can also be read using this module."
msgstr ""
"Ten moduł dostarcza sprzęg dla wczytania pliku który używa kawałków EA IFF "
"85. [#]_ Ten format jest używany co najmniej w AIFF - Formacie Pliku Wymiany "
"Dźwięku (AIFF/AIFF-C) i Formacie Pliku Real Media (RMFF). Format pliku "
"dźwiękowego WAVE jest blisko związany i może także być wczytany używając "
"tego modułu."

msgid "A chunk has the following structure:"
msgstr "Kawałek ma następującą strukturę:"

msgid "Offset"
msgstr "Offset"

msgid "Length"
msgstr "Długość"

msgid "Contents"
msgstr "Zawartość"

msgid "0"
msgstr "0"

msgid "Chunk ID"
msgstr "ID kawałka"

msgid "Size of chunk in big-endian byte order, not including the header"
msgstr ""
"Rozmiar kawałka w porządku bajtów dużego-endian-u , nie zawierając nagłówka."

msgid "*n*"
msgstr "*n*"

msgid "Data bytes, where *n* is the size given in the preceding field"
msgstr "Bajty danych, gdzie *n* jest rozmiarem danym w poprzednim polu"

msgid "8 + *n*"
msgstr "8 + *n*"

msgid "0 or 1"
msgstr "0 lub 1"

msgid "Pad byte needed if *n* is odd and chunk alignment is used"
msgstr ""
"Bajt wyrównania potrzebny jeśli *n* jest nieparzysty i wyrównanie kawałka "
"jest używane."

msgid "The ID is a 4-byte string which identifies the type of chunk."
msgstr ""
"Identyfikator ID jest 4-bajtowym ciągiem znaków który identyfikuje typ "
"kawałka."

msgid "The size field (a 32-bit value, encoded using big-endian byte order) gives the size of the chunk data, not including the 8-byte header."
msgstr ""
"Pole rozmiaru (32-bitowa wartość, zakodowana używając porządku bajtów du"
"żego-endian-a) daje rozmiar danych kawałka, nie zawierając 8-bajtowego "
"nagłówka."

msgid "Usually an IFF-type file consists of one or more chunks.  The proposed usage of the :class:`Chunk` class defined here is to instantiate an instance at the start of each chunk and read from the instance until it reaches the end, after which a new instance can be instantiated. At the end of the file, creating a new instance will fail with a :exc:`EOFError` exception."
msgstr ""
"Zwykle typ pliku-IFF składa się z jednego lub więcej kawałków. Proponowane "
"użycie uogólnienia :class:`Chunk` określonego tutaj jest daniem przykładu na "
"początku każdego kawałka i wczytanie z tego przykładu zanim dotrze on do "
"końca, po którym nowy przykład może być dany. Na końcu pliku, utworzenie "
"nowego przykładu zawiedzie z wyjątkiem :exc:`EOFError`."

msgid "Class which represents a chunk.  The *file* argument is expected to be a file-like object.  An instance of this class is specifically allowed.  The only method that is needed is :meth:`read`.  If the methods :meth:`seek` and :meth:`tell` are present and don't raise an exception, they are also used. If these methods are present and raise an exception, they are expected to not have altered the object.  If the optional argument *align* is true, chunks are assumed to be aligned on 2-byte boundaries.  If *align* is false, no alignment is assumed.  The default value is true.  If the optional argument *bigendian* is false, the chunk size is assumed to be in little-endian order. This is needed for WAVE audio files. The default value is true.  If the optional argument *inclheader* is true, the size given in the chunk header includes the size of the header.  The default value is false."
msgstr ""
"Uogólnienie, które reprezentuje kawałek. Parametr *pliku* jest oczekiwany że "
"będzie podobnym do pliku przedmiotem. Przykład tego uogólnienia jest "
"szczególnie dozwolony. Jedyny sposób postępowania który jest wymagany jest "
":meth:`read`. Jeśli sposoby postępowania :meth:`seek` i :meth:`tell` są "
"obecne i nie zwracają wyjątku, także są używane. Jeśli te sposoby "
"postępowania są obecne i zgłaszają wyjątek, jest oczekiwane że nie zmienią "
"przedmiotu. Jeśli opcjonalny parametr *align* jest prawdziwy, kawałki "
"zakłada się że są ułożone na 2-bajtowych brzegach. Jeśli *align* jest "
"fałszywy, żadne ułożenie nie jest przyjmowane. Domyślną wartością jest "
"prawda. Jeśli opcjonalny parametr *bigendian* jest fałszywy rozmiar kawałka "
"jest zakładany że jest w porządku małego-endian-a. To jest wymagane dla "
"plików dźwiękowych WAVE. Domyślna wartość jest prawdziwa. Jeśli opcjonalny "
"parametr *inclheader* jest prawdziwy, rozmiar dany w nagłówku kawałka "
"zawiera rozmiar nagłówka, domyślną wartością jest fałsz. "

msgid "A :class:`Chunk` object supports the following methods:"
msgstr ""
"przedmiot uogólnienia :class:`Chunk` wspiera następujące sposoby "
"postępowania:"

msgid "Returns the name (ID) of the chunk.  This is the first 4 bytes of the chunk."
msgstr "Zwraca nazwę (IDentyfikator) kawałka. To jest pierwsze 4 bajty kawałka."

msgid "Returns the size of the chunk."
msgstr "Zwraca rozmiar kawałka."

msgid "Close and skip to the end of the chunk.  This does not close the underlying file."
msgstr ""
"Zamknij i przeskocz na koniec kawałka. To nie zamyka leżącego u podstaw "
"pliku."

msgid "The remaining methods will raise :exc:`IOError` if called after the :meth:`close` method has been called."
msgstr ""
"Pozostałe sposoby postępowania zgłoszą :exc:`IOError` jeśli wywołany po tym, "
"jak sposób postępowania :meth:`close` został wywołany."

msgid "Returns ``False``."
msgstr "Zwraca ``fałsz``."

msgid "Set the chunk's current position.  The *whence* argument is optional and defaults to ``0`` (absolute file positioning); other values are ``1`` (seek relative to the current position) and ``2`` (seek relative to the file's end).  There is no return value. If the underlying file does not allow seek, only forward seeks are allowed."
msgstr ""
"Ustaw obecną pozycję kawałka. Parametr *whence* jest opcjonalny i domyślnie "
"równy ``0`` (bezwzględna pozycja w pliku); inne wartości są ``1`` (wyszukaj "
"w odniesieniu do obecnej pozycji w pliku) i ``2`` (wyszukaj w odniesieniu do "
"końca pliku). Nie ma wartości zwracanej. Jeśli leżący u podstaw plik nie "
"pozwala na wyszukiwanie, tylko wyszukiwanie w przód jest dozwolone."

msgid "Return the current position into the chunk."
msgstr "Zwróć obecną pozycję w kawałku."

msgid "Read at most *size* bytes from the chunk (less if the read hits the end of the chunk before obtaining *size* bytes).  If the *size* argument is negative or omitted, read all data until the end of the chunk.  The bytes are returned as a string object.  An empty string is returned when the end of the chunk is encountered immediately."
msgstr ""
"Zwróć co najwyżej *size* bajtów z kawałka (mniej jeśli wczytywanie napotka "
"koniec kawałka przed otrzymaniem *size* bajtów). Jeśli parametr *size* jest "
"ujemny lub pominięty, wczytaj wszystkie dane aż do końca kawałka. Bajty są "
"zwracane jako przedmiot ciągu znaków. Pusty ciąg znaków jest zwracany gdy "
"koniec kawałka jest napotykany natychmiast."

msgid "Skip to the end of the chunk.  All further calls to :meth:`read` for the chunk will return ``''``.  If you are not interested in the contents of the chunk, this method should be called so that the file points to the start of the next chunk."
msgstr ""
"Przeskocz do końca kawałka. Wszystkie przyszłe wywołania sposobu "
"postępowania :meth:`read` dla kawałka zwrócą ``\"``. Jeśli nie jesteś "
"zainteresowany zawartością kawałka, ten sposób postępowania powinien być "
"wywoływany tak aby plik wskazywał początek następnego kawałka."

msgid "\"EA IFF 85\" Standard for Interchange Format Files, Jerry Morrison, Electronic Arts, January 1985."
msgstr ""
"\"EA IFF 85\" Standard dla formatu plików wzajemnej wymiany, Jerry Morrison, "
"Electronic Arts, styczeń 1985."

msgid ":mod:`cmath` --- Mathematical functions for complex numbers"
msgstr ":mod:`cmath` --- zadania matematyczne dla liczb zespolonych"

msgid "This module is always available.  It provides access to mathematical functions for complex numbers.  The functions in this module accept integers, floating-point numbers or complex numbers as arguments. They will also accept any Python object that has either a :meth:`__complex__` or a :meth:`__float__` method: these methods are used to convert the object to a complex or floating-point number, respectively, and the function is then applied to the result of the conversion."
msgstr ""
"Ten moduł jest zawsze dostępny. Dostarcza on dostęp do zadań matematycznych "
"dla liczb zespolonych. Zadania w tym module akceptują liczby całkowite, "
"liczby zmiennoprzecinkowe lub liczby zespolone jako parametry. Będą one "
"także akceptować dowolne przedmioty języka pytonowskiego które mają sposoby "
"postępowania albo :meth:`__complex__` lub :meth:`__float__`: te sposoby "
"postępowania są używane aby zamienić przedmiot na liczbę zespoloną lub "
"zmiennoprzecinkową, odpowiednio, i zadanie jest wtedy stosowane dla "
"rezultatu przekształcenia"

msgid "On platforms with hardware and system-level support for signed zeros, functions involving branch cuts are continuous on *both* sides of the branch cut: the sign of the zero distinguishes one side of the branch cut from the other.  On platforms that do not support signed zeros the continuity is as specified below."
msgstr ""
"Na maszynach/środowiskach ze wsparciem sprzętowym lub poziomu-systemu dla "
"oznaczonych zer, zadania biorące pod uwagę cięcia rozgałęzień są ciągłe po "
"obu stronach cięcia odgałęzienia: znak zera rozróżnia jedną stronę cięcia "
"odgałęzienia od drugiej. Na maszynach/środowiskach, które nie wspierają "
"znaczonych zer ciągłość jest określona poniżej."

msgid "Conversions to and from polar coordinates"
msgstr "Zamiany z i do współrzędnych polowych."

msgid "A Python complex number ``z`` is stored internally using *rectangular* or *Cartesian* coordinates.  It is completely determined by its *real part* ``z.real`` and its *imaginary part* ``z.imag``.  In other words::"
msgstr ""
"Liczba zespolona ``z`` jest zachowana wewnętrznie używając współrzędnych "
"*prostokątnych* lub *Kartezjańskich*. Jest to kompletnie zdeterminowane "
"przez *część rzeczywistą* - ``z.real`` i *część urojoną* ``z.imag``. Innymi "
"słowy::"

msgid "z == z.real + z.imag*1j"
msgstr "z == z.real + z.imag*1j"

msgid "*Polar coordinates* give an alternative way to represent a complex number.  In polar coordinates, a complex number *z* is defined by the modulus *r* and the phase angle *phi*. The modulus *r* is the distance from *z* to the origin, while the phase *phi* is the counterclockwise angle, measured in radians, from the positive x-axis to the line segment that joins the origin to *z*."
msgstr ""
"*Współrzędne polarne* dają alternatywny sposób aby reprezentować liczby "
"zespolone. W polarnych współrzędnych, liczba zespolona *z* jest zdefiniowana "
"przez moduł *r* i kąta fazowego *phi* - z ang. - *fi*. Moduł *r* jest "
"odległością od *z* do początku, podczas gdy faza *phi* jest kątem przeciwnym "
"dla ruchu wskazówek zegara, mierzonym w radianach, od pozytywnej osi-x do "
"segmentu linii łączącej początek układu współrzędnych z *z*."

msgid "The following functions can be used to convert from the native rectangular coordinates to polar coordinates and back."
msgstr ""
"Następujące zadania mogą być używane do skonwertowania z natywnych "
"prostokątnych współrzędnych do współrzędnych kołowych i z powrotem."

msgid "Return the phase of *x* (also known as the *argument* of *x*), as a float.  ``phase(x)`` is equivalent to ``math.atan2(x.imag, x.real)``.  The result lies in the range [-π, π], and the branch cut for this operation lies along the negative real axis, continuous from above.  On systems with support for signed zeros (which includes most systems in current use), this means that the sign of the result is the same as the sign of ``x.imag``, even when ``x.imag`` is zero::"
msgstr ""
"Zwróć fazę *x* (znaną także jako *argument* *x*), jako liczbę "
"zmiennoprzecinkową. ``phase(x)`` jest równoważne ``math.atan2(x.imag, "
"x.real)``. Wynik leży w przedziale [-π, π], i przecięcie odgałęzienia dla "
"tej operacji leży wzdłuż ujemnej rzeczywistej osi, ciągłej z góry. W "
"maszynach/środowiskach które wspierają oznaczone zera (co zawiera większość "
"maszyn/środowisk w obecnym użyciu), to oznacza że znak wyniku jest ten sam "
"jak znak ``x.imag``, nawet gdy ``x.imag`` jest zero::"

msgid ">>> phase(complex(-1.0, 0.0)) 3.141592653589793 >>> phase(complex(-1.0, -0.0)) -3.141592653589793"
msgstr ""
">>> phase(complex(-1.0, 0.0)) 3.141592653589793 >>> phase(complex(-1.0, "
"-0.0)) -3.141592653589793"

msgid "The modulus (absolute value) of a complex number *x* can be computed using the built-in :func:`abs` function.  There is no separate :mod:`cmath` module function for this operation."
msgstr ""
"Moduł (wartość bezwzględna) zespolonej liczby *x* może być obliczony "
"używając wbudowanego zadania :func:`abs`. Nie ma oddzielnego zadania modułu "
":mod:`cmath` dla tej operacji."

msgid "Return the representation of *x* in polar coordinates.  Returns a pair ``(r, phi)`` where *r* is the modulus of *x* and phi is the phase of *x*.  ``polar(x)`` is equivalent to ``(abs(x), phase(x))``."
msgstr ""
"Zwróć reprezentację *x* w kołowych współrzędnych. Zwróć parę ``(r, phi)`` "
"gdzie *r* jest modułem *x* a phi jest fazą *x*. ``polar(x)`` jest równoważne "
"``(abs(x), phase(x))``"

msgid "Return the complex number *x* with polar coordinates *r* and *phi*. Equivalent to ``r * (math.cos(phi) + math.sin(phi)*1j)``."
msgstr ""
"Zwróć liczbę zespoloną *x* z kołowymi współrzędnymi *r* i *phi*. Równoważne "
"``r * (math.cos(phi) + math.sin(phi)*1j)``."

msgid "Power and logarithmic functions"
msgstr "Zadania potęgowania i logarytmiczne"

msgid "Return the exponential value ``e**x``."
msgstr "Zwróć potęgową wartość ``e**x``."

msgid "Returns the logarithm of *x* to the given *base*. If the *base* is not specified, returns the natural logarithm of *x*. There is one branch cut, from 0 along the negative real axis to -∞, continuous from above."
msgstr ""
"Zwróć logarytm *x* dla danej *podstawy* - z ang. - *base*. Jeśli *podstawa* "
"- z ang. - *base* nie jest określona, zwróć logarytm naturalny *x*. Jest "
"jedno odgałęzienie ucięte, od 0 wzdłuż ujemnej osi rzeczywistej do -∞, "
"ciągłej od góry."

msgid "Return the base-10 logarithm of *x*. This has the same branch cut as :func:`log`."
msgstr ""
"Zwróć logarytm o podstawie dziesiętnej z *x*. To ma tą samą gałąź uciętą jak "
":func:`log`."

msgid "Return the square root of *x*. This has the same branch cut as :func:`log`."
msgstr ""
"Zwróć pierwiastek kwadratowy z *x*. To ma tą samą uciętą gałąź jak "
":func:`log`."

msgid "Trigonometric functions"
msgstr "Funkcje trygonometryczne"

msgid "Return the arc cosine of *x*. There are two branch cuts: One extends right from 1 along the real axis to ∞, continuous from below. The other extends left from -1 along the real axis to -∞, continuous from above."
msgstr ""
"Zwróć arcus cosinus *x*. Są dwa odgałęzienia ucięte: jedna biegnie od 1 "
"wzdłuż rzeczywistej osi do ∞, ciągła od dołu. Druga biegnie od -1 wzdłuż "
"rzeczywistej osi do -∞, ciągła od góry."

msgid "Return the arc sine of *x*. This has the same branch cuts as :func:`acos`."
msgstr ""
"Zwróć arcus sinus *x* To ma te same odgałęzienia cięte jak :func:`acos`."

msgid "Return the arc tangent of *x*. There are two branch cuts: One extends from ``1j`` along the imaginary axis to ``∞j``, continuous from the right. The other extends from ``-1j`` along the imaginary axis to ``-∞j``, continuous from the left."
msgstr ""
"Zwróć arcus tangens *x*. Są dwa odgałęzienia ucięte: Jedno rozciąga się od "
"``1j`` wzdłuż osi urojonej do ``∞j``, ciągłe od prawej strony. Druga "
"rozciąga się od ``-1j`` wzdłuż osi urojonej do ``-∞j``, ciągłej od lewej "
"strony."

msgid "Return the cosine of *x*."
msgstr "Zwróć cosinus *x*."

msgid "Return the sine of *x*."
msgstr "Zwróć sinus *x*."

msgid "Return the tangent of *x*."
msgstr "Zwróć tangens *x*."

msgid "Hyperbolic functions"
msgstr "Funkcje hiperboliczne"

msgid "Return the hyperbolic arc cosine of *x*. There is one branch cut, extending left from 1 along the real axis to -∞, continuous from above."
msgstr ""
"Zwróć hiperboliczny arcus cosinus *x*. Istnieje jedno odgałęzienie, "
"rozciągające się z lewej strony od 1 wzdłuż osi rzeczywistej do -∞, ciągłej "
"od góry."

msgid "Return the hyperbolic arc sine of *x*. There are two branch cuts: One extends from ``1j`` along the imaginary axis to ``∞j``, continuous from the right.  The other extends from ``-1j`` along the imaginary axis to ``-∞j``, continuous from the left."
msgstr ""
"Zwróć hiperboliczny arcus sinus *x*. Istnieją dwa odgałęzienia ucięte, jedno "
"rozciąga się od ``1j`` wzdłuż urojonej osi do ``∞j``, ciągłej od prawej "
"strony. Druga rozciąga się od ``-1j`` wzdłuż urojonej osi do ``-∞j``, "
"ciągłej od lewej strony."

msgid "Return the hyperbolic arc tangent of *x*. There are two branch cuts: One extends from ``1`` along the real axis to ``∞``, continuous from below. The other extends from ``-1`` along the real axis to ``-∞``, continuous from above."
msgstr ""
"Zwróć hiperboliczny arcus tangens *x*. Istnieją dwie gałęzie: jedna rozciąga "
"się od ``1`` wzdłuż rzeczywistej osi do ``∞``, ciągłej od dołu. Drugi "
"rozciąga się od ``-1`` wzdłuż osi rzeczywistej do ``-∞``, ciągłej od góry."

msgid "Return the hyperbolic cosine of *x*."
msgstr "Zwróć hiperboliczny cosinus *x*."

msgid "Return the hyperbolic sine of *x*."
msgstr "Zwróć hiperboliczny sinus *x*."

msgid "Return the hyperbolic tangent of *x*."
msgstr "Zwróć hiperboliczny tangens *x*."

msgid "Classification functions"
msgstr "Funkcje klasyfikacyjne"

msgid "Return *True* if the real or the imaginary part of x is positive or negative infinity."
msgstr ""
"Zwróć *prawdę* - z ang. - *True* jeśli rzeczywista lub urojona część x jest "
"dodatnią lub ujemną nieskończonością."

msgid "Return *True* if the real or imaginary part of x is not a number (NaN)."
msgstr ""
"Zwróć *prawdę* - z ang. - *True* jeśli rzeczywista lub urojona część x nie "
"jest liczbą (NaN - z ang. not a number)"

msgid "Constants"
msgstr "Stałe"

msgid "The mathematical constant *π*, as a float."
msgstr "Stała matematyczna *π* jako liczba zmiennoprzecinkowa."

msgid "The mathematical constant *e*, as a float."
msgstr "Matematyczna stała *e* jako liczba zmiennoprzecinkowa."

msgid "Note that the selection of functions is similar, but not identical, to that in module :mod:`math`.  The reason for having two modules is that some users aren't interested in complex numbers, and perhaps don't even know what they are.  They would rather have ``math.sqrt(-1)`` raise an exception than return a complex number. Also note that the functions defined in :mod:`cmath` always return a complex number, even if the answer can be expressed as a real number (in which case the complex number has an imaginary part of zero)."
msgstr ""
"Zauważ, że wybór zadań jest podobny ale nie identyczny do tej w module "
":mod:`math`. Powódem posiadania dwóch modułów jest to, że niektórzy "
"użytkownicy nie są zainteresowani liczbami zespolonymi, i być może nie "
"wiedzą nawet że istnieją. Woleliby żeby ``math.sqrt(-1)`` zgłosił wyjątek "
"niż zwróciło liczbę urojoną. Zauważ też że zadania określone w module "
":mod:`cmath` zawsze zwraca liczbę zespoloną, nawet jeśli odpowiedź może być "
"wyrażona jako liczba rzeczywista (w którym to przypadku liczba zespolona ma "
"część urojoną równą zero)."

msgid "A note on branch cuts: They are curves along which the given function fails to be continuous.  They are a necessary feature of many complex functions.  It is assumed that if you need to compute with complex functions, you will understand about branch cuts.  Consult almost any (not too elementary) book on complex variables for enlightenment.  For information of the proper choice of branch cuts for numerical purposes, a good reference should be the following:"
msgstr ""
"Uwaga o cięciach gałęzi: Są to krzywe wzdłuż których dana funkcja nie jest "
"ciągła. Są one konieczną właściwością wielu zespolonych funkcji. Jest "
"zakładane że jeśli potrzebujesz obliczeń z liczbami zespolonymi, to "
"zrozumiałe są cięcia gałęzi. Skonsultuj się prawie z każdą (nie tak "
"podstawową) książką o liczbach zespolonych dla oświecenia. Dla informacji o "
"właściwym wyborze cięć gałęzi dla potrzeb numerycznych, dobrym odniesieniem "
"powinno być następujące:"

msgid "Kahan, W:  Branch cuts for complex elementary functions; or, Much ado about nothing's sign bit.  In Iserles, A., and Powell, M. (eds.), The state of the art in numerical analysis. Clarendon Press (1987) pp165-211."
msgstr ""
"Kahan, W: \"Branch cuts for complex elementary functions\"; lub, Much ado "
"about nothing's sign bit. w Iserles, A. i Powell, M. (eds.), Stan dzieła "
"sztuki w numerycznej analizie. Clarendon Press (1987) pp165-211."

msgid ":mod:`cmd` --- Support for line-oriented command interpreters"
msgstr ""
":mod:`cmd` --- Wsparcie dla zorientowanych-na-linię interpreterów poleceń"

msgid "The :class:`Cmd` class provides a simple framework for writing line-oriented command interpreters.  These are often useful for test harnesses, administrative tools, and prototypes that will later be wrapped in a more sophisticated interface."
msgstr ""
"Uogólnienie :class:`Cmd` dostarcza prostych ram dla pisania zorientowanych-"
"na-linię interpretatorów poleceń. Te są często użyteczne dla testów, "
"narzędzi administracyjnych i prototypów, które będą później zapakowane w "
"bardziej zaawansowany sprzęg."

msgid "A :class:`Cmd` instance or subclass instance is a line-oriented interpreter framework.  There is no good reason to instantiate :class:`Cmd` itself; rather, it's useful as a superclass of an interpreter class you define yourself in order to inherit :class:`Cmd`'s methods and encapsulate action methods."
msgstr ""
"Przykład :class:`Cmd` lub przykład podrzędnego uogólnienia jest zorientowaną "
"na linię ramą programu interpretującego polecenia. Nie ma dobrego powodu "
"aby dawać przykład :class:`Cmd` sam w sobie; raczej jest użyteczne jako "
"nadrzędne uogólnienie uogólnienia programu interpretującego polecenia który "
"definiujesz sam w celu odziedziczenia sposobów postępowania :class:`Cmd` i "
"kapsułkowania sposobów postępowania akcji."

msgid "The optional argument *completekey* is the :mod:`readline` name of a completion key; it defaults to :kbd:`Tab`. If *completekey* is not :const:`None` and :mod:`readline` is available, command completion is done automatically."
msgstr ""
"Opcjonalny parametr *completekey* jest nazwą przycisku do kompletowania z "
"modułu :mod:`readline`; domyślnie jest :kbd:`Tab`. Jeśli *completekey* nie "
"jest :const:`None` i :mod:`readline` jest dostępne, kompletowanie poleceń "
"jest dokonywane automatycznie."

msgid "The optional arguments *stdin* and *stdout* specify the  input and output file objects that the Cmd instance or subclass  instance will use for input and output. If not specified, they will default to :data:`sys.stdin` and :data:`sys.stdout`."
msgstr ""
"Opcjonalne parametry *stdin* i *stdout* określa wejściowe i wyjściowe "
"przedmiotów plików których przykłady Cmd lub podrzędnych uogólnień będą "
"używane dla wejścia i wyjścia. Jeśli nie określono, będą one domyślnie równe "
":data:`sys.stdin` i :data:`sys.stdout`."

msgid "If you want a given *stdin* to be used, make sure to set the instance's :attr:`use_rawinput` attribute to ``False``, otherwise *stdin* will be ignored."
msgstr ""
"Jeśli chcesz aby dane *stdin* było używane, upewnij się że ustawisz "
"właściwość :attr:`use_rawinput` na ``False`` - z ang. - ``Fałsz`` w "
"przeciwnym razie *stdin* zostanie zignorowany."

msgid "Cmd Objects"
msgstr "Przedmioty Cmd"

msgid "A :class:`Cmd` instance has the following methods:"
msgstr "Przykłady :class:`Cmd` mają następujące sposoby postępowania:"

msgid "Repeatedly issue a prompt, accept input, parse an initial prefix off the received input, and dispatch to action methods, passing them the remainder of the line as argument."
msgstr ""
"Powtarzając wysyłaj zapytanie, akceptuj wpisy wejściowe, wczytuj początkowe "
"przedrostki otrzymanego wejścia i rozkładaj do sposobów postępowania akcji, "
"przekazując im pozostałą część linii jako parametr."

msgid "The optional argument is a banner or intro string to be issued before the first prompt (this overrides the :attr:`intro` class member)."
msgstr ""
"Opcjonalny parametr jest bannerem lub ciągiem znaków wprowadzającym do "
"wystosowania przed pierwszym zapytaniem o polecenie (to obchodzi właściwość "
":attr:`intro` - członka uogólnienia)."

msgid "If the :mod:`readline` module is loaded, input will automatically inherit :program:`bash`\\ -like history-list editing (e.g. :kbd:`Control-P` scrolls back to the last command, :kbd:`Control-N` forward to the next one, :kbd:`Control-F` moves the cursor to the right non-destructively, :kbd:`Control-B` moves the cursor to the left non-destructively, etc.)."
msgstr ""
"Jeśli moduł :mod:`readline` jest załadowany, wejście automatycznie "
"odziedziczy podobny do :program:`bash`\\-a sposób edycji list-historii (np. "
":kbd:`Control-P` przewija wstecz do ostatniej komendy, :kbd:`Control-N` "
"przejście wprzód do następnego, :kbd:`Control-F` przesunięcie kursora do "
"prawej strony nie-destrukcyjnie, :kbd:`Control-B` przesunięcie kursora do "
"lewej strony nie-destrukcyjnie, itd.)."

msgid "An end-of-file on input is passed back as the string ``'EOF'``."
msgstr "Koniec-pliku na wejściu jest przekazywany jako ciąg ``'EOF'``."

msgid "An interpreter instance will recognize a command name ``foo`` if and only if it has a method :meth:`do_foo`.  As a special case, a line beginning with the character ``'?'`` is dispatched to the method :meth:`do_help`.  As another special case, a line beginning with the character ``'!'`` is dispatched to the method :meth:`do_shell` (if such a method is defined)."
msgstr ""
"Przykład programu interpretującego będzie rozpoznawał nazwę komendy ``foo`` "
"wtedy i tylko wtedy gdy ma on sposób postępowania :meth:`do_foo`. Jako "
"szczególny przypadek, początek wiersza ze znakiem ``'?'`` jest przesyłany do "
"sposobu postępowania :meth:`do_help`. Jako następny szczególny przypadek, "
"początek linii ze znakiem ``'!'`` jest przesyłany do sposobu postępowania "
":meth:`do_shell` (jeśli taki sposób postępowania jest zdefiniowany)."

msgid "This method will return when the :meth:`postcmd` method returns a true value. The *stop* argument to :meth:`postcmd` is the return value from the command's corresponding :meth:`do_\\*` method."
msgstr ""
"Ten sposób postępowania będzie powracał gdy sposób postępowania "
":meth:`postcmd` zwróci wartość prawdy. Parametr *stop* dla sposobu "
"postępowania :meth:`postcmd` jest wartością zwracaną z odpowiadającego "
"sposobu postępowania :meth:`do_\\*`."

msgid "If completion is enabled, completing commands will be done automatically, and completing of commands args is done by calling :meth:`complete_foo` with arguments *text*, *line*, *begidx*, and *endidx*.  *text* is the string prefix we are attempting to match: all returned matches must begin with it. *line* is the current input line with leading whitespace removed, *begidx* and *endidx* are the beginning and ending indexes of the prefix text, which could be used to provide different completion depending upon which position the argument is in."
msgstr ""
"Jeśli kompletowanie jest włączone kompletowanie komend będzie wykonywane "
"automatycznie i kompletowanie parametrów komend jest dokonywane przez "
"wywołanie :meth:`complete_foo` z parametrami *text*, *line*, *begidx*, i "
"*endidx*. *text* jest ciągiem przedrostka który mamy zamiar dopasować: "
"wszystkie zwracane dopasowania muszą zaczynać się od niego. *line* jest "
"obecną linią wprowadzaną ze zdjętymi prowadzącymi białymi znakami, *begidx* "
"i *endidx* są początkowymi i końcowymi indeksami tekstu przedrostka, które "
"mogą być użyte do zapewnienia różnych uzupełnień w zależności od tego w "
"której pozycji parametr się znalazł."

msgid "All subclasses of :class:`Cmd` inherit a predefined :meth:`do_help`. This method, called with an argument ``'bar'``, invokes the corresponding method :meth:`help_bar`.  With no argument, :meth:`do_help` lists all available help topics (that is, all commands with corresponding :meth:`help_\\*` methods), and also lists any undocumented commands."
msgstr ""
"Wszystkie podrzędne uogólnienia :class:`Cmd` dziedziczą uprzednio "
"zdefiniowany sposób postępowania :meth:`do_help`. Ten sposób postępowania "
"wywołany z parametrem ``'bar'``, wywołuje odpowiadający sposób postępowania "
":meth:`help_bar`. Bez parametru :meth:`do_help` wypisuje wszystkie dostępne "
"tematy pomocy (to jest, wszystkie polecenia z odpowiadającymi sposobami "
"postępowania :meth:`help_\\*`), a także wypisuje wszystkie nieudokumentowane "
"polecenia."

msgid "Interpret the argument as though it had been typed in response to the prompt. This may be overridden, but should not normally need to be; see the :meth:`precmd` and :meth:`postcmd` methods for useful execution hooks.  The return value is a flag indicating whether interpretation of commands by the interpreter should stop.  If there is a :meth:`do_\\*` method for the command *str*, the return value of that method is returned, otherwise the return value from the :meth:`default` method is returned."
msgstr ""
"Interpretuj parametr tak jakby został wprowadzony w odpowiedzi na zapytanie. "
"To może być przesłonięte, ale nie powinno normalnie być; zobacz sposoby "
"postępowania :meth:`precmd` i :meth:`postcmd` dla użytecznych haczyków "
"wykonania. Wartość zwracana jest flagą wskazującą czy interpretacja poleceń "
"przez program interpretujący powinna się zakończyć. Jeśli istnieje sposób "
"postępowania :meth:`do_\\*` dla polecenia *str*, wartość zwracana z tego "
"sposobu postępowania jest zwracana, w przeciwnym przypadku wartość zwracana "
"ze sposobu postępowania :meth:`default` jest zwracana."

msgid "Method called when an empty line is entered in response to the prompt. If this method is not overridden, it repeats the last nonempty command entered."
msgstr ""
"Sposób postępowania wywoływany wtedy gdy pusty wiersz jest wprowadzany w "
"odpowiedzi na zapytanie. Jeśli ten sposób postępowania nie jest "
"przesłonięty, powtarza on ostatnią niepustą komendę wprowadzoną."

msgid "Method called on an input line when the command prefix is not recognized. If this method is not overridden, it prints an error message and returns."
msgstr ""
"Sposób postępowania wywoływany na linii wprowadzanej gdy przedrostek "
"polecenia jest nierozpoznany. Jeśli ten sposób postępowania nie jest "
"przesłonięty, drukuje on wiadomość o błędzie i powraca."

msgid "Method called to complete an input line when no command-specific :meth:`complete_\\*` method is available.  By default, it returns an empty list."
msgstr ""
"Sposób wywoływany w celu uzupełnienia linii wejściowej gdy żadne szczególne-"
"dla-polecenia sposoby postępowania :meth:`complete\\*` nie są dostępne. "
"Domyślnie, zwraca pustą listę. "

msgid "Hook method executed just before the command line *line* is interpreted, but after the input prompt is generated and issued.  This method is a stub in :class:`Cmd`; it exists to be overridden by subclasses.  The return value is used as the command which will be executed by the :meth:`onecmd` method; the :meth:`precmd` implementation may re-write the command or simply return *line* unchanged."
msgstr ""
"Sposób postępowania - hak - wykonywany dokładnie przed tym, jak wiersz "
"poleceń *linia* jest interpretowany, ale po tym jak zapytanie wejściowe jest "
"wygenerowane i przekazane. Ten sposób postępowania jest zrębem w "
":class:`Cmd`; istnieje po to aby być przesłanianym przez podrzędne "
"uogólnienia. Wartość zwracana jest używana jako polecenie, które będzie "
"wykonane przez sposób postępowania :meth:`onecmd`; wypełnienie sposobu "
"postępowania :meth:`precmd` może ponownie zapisywać polecenie lub po prostu "
"zwracać *linię* bez zmian."

msgid "Hook method executed just after a command dispatch is finished.  This method is a stub in :class:`Cmd`; it exists to be overridden by subclasses.  *line* is the command line which was executed, and *stop* is a flag which indicates whether execution will be terminated after the call to :meth:`postcmd`; this will be the return value of the :meth:`onecmd` method.  The return value of this method will be used as the new value for the internal flag which corresponds to *stop*; returning false will cause interpretation to continue."
msgstr ""
"Sposób postępowania - hak - wykonywany tuż po tym jak wydawanie polecenia "
"jest zakończone. Ten sposób postępowania jest zrębem w uogólnieniu "
":class:`Cmd`; istnieje aby być przesłanianym przez podrzędne uogólnienia. "
"*Linia* jest poleceniem które zostało wykonane, i *stop* jest flagą która "
"wskazuje czy wykonanie zostanie zakończone po wywołaniu sposobu postępowania "
":meth:`postcmd`; to będzie wartość zwracana sposobu postępowania "
":meth:`onecmd`. Wartość zwracana tego sposobu postępowania będzie używana "
"jako nowa wartość dla wewnętrznej flagi która odpowiada *stop*; zwracanie "
"fałszu będzie powodowało, że interpretacja pójdzie naprzód."

msgid "Hook method executed once when :meth:`cmdloop` is called.  This method is a stub in :class:`Cmd`; it exists to be overridden by subclasses."
msgstr ""
"Sposób postępowania hak wykonywany raz gdy :meth:`cmdloop` jest wywoływany. "
"Ten sposób postępowania jest zrębem w uogólnieniu :class;`Cmd`; istnieje aby "
"być przesłaniany przez podrzędne uogólnienia."

msgid "Hook method executed once when :meth:`cmdloop` is about to return. This method is a stub in :class:`Cmd`; it exists to be overridden by subclasses."
msgstr ""
"Sposób postępowania - hak - wykonywany raz gdy sposób postępowania "
":meth:`cmdloop` jest gotowa do powrotu. Ten sposób postępowania jest zrębem "
"w uogólnieniu :class:`Cmd`; istnieje aby być przesłanianym przez podrzędne "
"uogólnienia."

msgid "Instances of :class:`Cmd` subclasses have some public instance variables:"
msgstr ""
"Przykłady uogólnienia podrzędnego względem uogólnienia :class:`Cmd` mają "
"pewne publiczne zmienne przykładu:"

msgid "The prompt issued to solicit input."
msgstr "Zapytanie wypuszczone aby pobrać wejście."

msgid "The string of characters accepted for the command prefix."
msgstr "Ciąg znaków akceptowany za przedrostek polecenia."

msgid "The last nonempty command prefix seen."
msgstr "Niepusty przedrostek polecenia widziany ostatnio."

msgid "A string to issue as an intro or banner.  May be overridden by giving the :meth:`cmdloop` method an argument."
msgstr ""
"Ciąg znaków do przekazania jako ciąg wprowadzający lub banner. Może być "
"przesłonięty przez podanie parametru dla sposobu postępowania "
":meth:`cmdloop`."

msgid "The header to issue if the help output has a section for documented commands."
msgstr ""
"Nagłówek do przekazania jeśli wyjście pomocy ma rozdział dla "
"udokumentowanych poleceń."

msgid "The header to issue if the help output has a section for miscellaneous  help topics (that is, there are :meth:`help_\\*` methods without corresponding :meth:`do_\\*` methods)."
msgstr ""
"Nagłówek do przekazania jeśli wyjście pomocy ma rozdział dla szczególnych "
"treści pomocy (to jest, istnieją sposoby postępowania :meth:`help_\\*`, bez "
"odpowiadających sposobów postępowania :meth:`do_\\*`)."

msgid "The header to issue if the help output has a section for undocumented  commands (that is, there are :meth:`do_\\*` methods without corresponding :meth:`help_\\*` methods)."
msgstr ""
"Nagłówek do przekazania jeśli wyjście pomocy ma rozdział dla "
"nieudokumentowanych poleceń (to jest, istnieją sposoby postępowania "
":meth:`do_\\*` bez odpowiadających sposobów postępowania :meth:`help_\\*`)."

msgid "The character used to draw separator lines under the help-message headers.  If empty, no ruler line is drawn.  It defaults to ``'='``."
msgstr ""
"Znak używany aby rysować linie separatora pod nagłówkami wiadomości-pomocy. "
"Jeśli pusty żadna linia oddzielająca nie jest rysowana. Domyślnie równa jest "
"``'='``."

msgid "A flag, defaulting to true.  If true, :meth:`cmdloop` uses :func:`input` to display a prompt and read the next command; if false, :meth:`sys.stdout.write` and :meth:`sys.stdin.readline` are used. (This means that by importing :mod:`readline`, on systems that support it, the interpreter will automatically support :program:`Emacs`\\ -like line editing  and command-history keystrokes.)"
msgstr ""
"Flaga domyślnie równa prawdzie. Jeśli prawdziwa sposób postępowania "
":meth:`cmdloop` używa zadania :func:`input` aby wyświetlić zapytanie i "
"wczytać następne polecenie; jeśli fałszywa sposoby postępowania "
":meth:`sys.stdout.write` i :meth:`sys.stdin.readline` są używane. (To "
"oznacza że przez importowanie :mod;`readline`, na systemach które wspierają "
"go, interpreter automatycznie wspiera :program:`Emacs`\\ -o-podobne edycje "
"linii i naciśnięcia przycisków historii-poleceń.)"

msgid ":mod:`code` --- Interpreter base classes"
msgstr ":mod:`code` --- uogólnienia bazowe interpretera poleceń"

msgid "The ``code`` module provides facilities to implement read-eval-print loops in Python.  Two classes and convenience functions are included which can be used to build applications which provide an interactive interpreter prompt."
msgstr ""
"Moduł ``code`` dostarcza urządzeń do wypełnienia pętli read-eval-print - "
"wczytaj-oblicz-drukuj w języku pytonowskim. Dwa uogólnienia i zadania "
"użytkowe są zawarte, które mogą być użyte do budowania aplikacji które "
"dostarczają współdziałający z użytkownikiem program interpretujący "
"polecenia."

msgid "This class deals with parsing and interpreter state (the user's namespace); it does not deal with input buffering or prompting or input file naming (the filename is always passed in explicitly). The optional *locals* argument specifies the dictionary in which code will be executed; it defaults to a newly created dictionary with key ``'__name__'`` set to ``'__console__'`` and key ``'__doc__'`` set to ``None``."
msgstr ""
"To uogólnienie zajmuje się wczytywaniem i stanem programu interpretującego "
"(przestrzeni nazw użytkownika); nie zajmuje się ono przestrzenią wymiany "
"wejścia czy zapytywaniem czy też nazywaniem pliku wejściowego (nazwa pliku "
"zawsze przekazywana jest jawnie). Opcjonalny parametr *locals* określa "
"słownik w którym kod będzie wykonywany; Domyślnie równe jest nowo "
"utworzonemu słownikowi z kluczem ``'__name__'`` ustawionym na "
"``'__console__'`` i kluczem ``'__doc__'`` ustawionym na ``None``."

msgid "Closely emulate the behavior of the interactive Python interpreter. This class builds on :class:`InteractiveInterpreter` and adds prompting using the familiar ``sys.ps1`` and ``sys.ps2``, and input buffering."
msgstr ""
"Blisko emuluj zachowanie współdziałającego z użytkownikiem programu "
"interpretującego polecenia języka pytonowskiego. To uogólnienie buduje na "
"uogólnieniu :class:`InteractiveInterpreter` i dodaje zapytania używając "
"znajomego ``sys.ps1`` i ``sys.ps2``, i przestrzeni wymiany wejścia."

msgid "Convenience function to run a read-eval-print loop.  This creates a new instance of :class:`InteractiveConsole` and sets *readfunc* to be used as the :meth:`raw_input` method, if provided.  If *local* is provided, it is passed to the :class:`InteractiveConsole` constructor for use as the default namespace for the interpreter loop.  The :meth:`interact` method of the instance is then run with *banner* passed as the banner to use, if provided.  The console object is discarded after use."
msgstr ""
"Zadanie - udogodnienie - do uruchamiania pętli wczytaj-oblicz-drukuj. To "
"tworzy nowy przykład uogólnienia :class:`InteractiveConsole` i ustawia "
"*readfunc* aby było użyte przez sposób postępowania :meth:`raw_input`, jeśli "
"dostarczono. Jeśli *local* jest dostarczony, jest przekazywany do "
"konstruktora uogólnienia :class:`InteractiveConsole` dla użycia jako "
"domyślna przestrzeń nazw dla pętli programu interpretującego polecenia. "
"Sposób postępowania :meth:`interact` dla przykładu jest wtedy uruchamiany z "
"*bannerem* przekazywanym jako banner do użycia, jeśli dostarczono. Przedmiot "
"konsoli jest odrzucany po użyciu."

msgid "This function is useful for programs that want to emulate Python's interpreter main loop (a.k.a. the read-eval-print loop).  The tricky part is to determine when the user has entered an incomplete command that can be completed by entering more text (as opposed to a complete command or a syntax error).  This function *almost* always makes the same decision as the real interpreter main loop."
msgstr ""
"To zadanie jest użyteczne dla programów, które chcą emulować główną pętlę "
"interpretatora poleceń języka pytonowskiego (inaczej znanego jako pętla "
"wczytaj-oblicz-drukuj). Trudną częścią jest określenie gdy użytkownik "
"wprowadził niepełne polecenie, które może być uzupełnione przez wpisanie "
"większej ilości tekstu (w przeciwieństwie do kompletnego polecenia lub błędu "
"składniowego). To zadanie *prawie* zawsze wykonuje te same decyzje jako "
"pętla główna prawdziwego programu interpretującego polecenia."

msgid "*source* is the source string; *filename* is the optional filename from which source was read, defaulting to ``'<input>'``; and *symbol* is the optional grammar start symbol, which should be either ``'single'`` (the default) or ``'eval'``."
msgstr ""
"*źródło* - z ang. - *source* jest ciągiem źródła; *filename* - z ang. - "
"*nazwa pliku* jest opcjonalną nazwą pliku z którego źródło zostało wczytane, "
"domyślnie równe ``'<input>'``; i *symbol* jest opcjonalnym gramatycznym "
"symbolem początkowym, który powinien być albo ``'pojedynczym'`` - z ang. - "
"``'single'`` (domyślnie) albo ``'eval'`` - z ang. - ``'obliczonym'``."

msgid "Returns a code object (the same as ``compile(source, filename, symbol)``) if the command is complete and valid; ``None`` if the command is incomplete; raises :exc:`SyntaxError` if the command is complete and contains a syntax error, or raises :exc:`OverflowError` or :exc:`ValueError` if the command contains an invalid literal."
msgstr ""
"Zwraca przedmiot kodu (ten sam jak ``compile(source, filename, symbol)``) "
"jeśli polecenie jest kompletne i poprawne; ``None`` jeśli polecenie jest "
"niekompletne; zgłasza :exc:`SyntaxError` jeśli polecenie jest kompletne i "
"zawiera błąd składniowy, lub zgłasza :exc:`OverflowError` lub "
":exc:`ValueError` jeśli polecenie zawiera niewłaściwą wartość."

msgid "Interactive Interpreter Objects"
msgstr ""
"Przedmioty współdziałającego z użytkownikiem programu interpreteującego "
"polecenia."

msgid "Compile and run some source in the interpreter. Arguments are the same as for :func:`compile_command`; the default for *filename* is ``'<input>'``, and for *symbol* is ``'single'``.  One several things can happen:"
msgstr ""
"Skompiluj i uruchom pewne źródło w programie interpretującym. Parametry są "
"te same co dla zadania :func:`compile_command`; domyślnie dla *nazwy pliku* "
"- z ang. - *filename* jest ``'<input>'``, i dla *symbolu* jest ``'single'``. "
"Jedno z kilku rzeczy może się zdarzyć:"

msgid "The input is incorrect; :func:`compile_command` raised an exception (:exc:`SyntaxError` or :exc:`OverflowError`).  A syntax traceback will be printed by calling the :meth:`showsyntaxerror` method.  :meth:`runsource` returns ``False``."
msgstr ""
"Wejście jest nieprawidłowe; :func:`compile_command` zgłosiła wyjątek "
"(:exc:`SyntaxError` lub :exc:`OverflowError`). Składniowy wypis śledzenia "
"zostanie wydrukowany przez wywołanie sposobu postępowania "
":meth:`showsyntaxerror`. Sposób postępowania :meth:`runsource` zwraca "
"``Fałsz``."

msgid "The input is incomplete, and more input is required; :func:`compile_command` returned ``None``. :meth:`runsource` returns ``True``."
msgstr ""
"Wejście jest niekompletne, więcej wpisów wejścia jest oczekiwane; zadanie "
":func:`compile_command` zwraca ``None``. :meth:`runsource` zwraca ``Prawdę`` "
"- z ang. - ``True``."

msgid "The input is complete; :func:`compile_command` returned a code object.  The code is executed by calling the :meth:`runcode` (which also handles run-time exceptions, except for :exc:`SystemExit`). :meth:`runsource` returns ``False``."
msgstr ""
"Wejście jest kompletne; :func:`compile_command` zwróciło przedmiot kodu. Kod "
"jest wykonywany przez uruchomienie sposobu postępowania :meth:`runcode` (co "
"także obsługuje wyjątki czasu-wykonania, z wyjątkiem dla "
":exc:`SystemExit`). Sposób postępowania :meth:`runsource` zwraca ``Fałsz``."

msgid "The return value can be used to decide whether to use ``sys.ps1`` or ``sys.ps2`` to prompt the next line."
msgstr ""
"Wartość zwracana może być użyta dla zdecydowania czy używać ``sys.ps1`` lub "
"``sys.ps2`` aby zapytać o następną linię."

msgid "Execute a code object. When an exception occurs, :meth:`showtraceback` is called to display a traceback.  All exceptions are caught except :exc:`SystemExit`, which is allowed to propagate."
msgstr ""
"Wykonaj przedmiot kodu. Gdy wyjątek nastąpi, :meth:`showtraceback` jest "
"wywoływane aby wyświetlić wypis śladu. Wszystkie wyjątki są łapane z oprócz "
":exc:`SystemExit`, który ma pozwolenie na propagację."

msgid "A note about :exc:`KeyboardInterrupt`: this exception may occur elsewhere in this code, and may not always be caught.  The caller should be prepared to deal with it."
msgstr ""
"Zauważ o :exc:`KeyboardInterrupt`: ten wyjątek może nastąpić gdziekolwiek "
"indziej w tym kodzie i może nie zawsze być złapany. Wywołujący powinien być "
"przygotowany aby sobie z tym radzić."

msgid "Display the syntax error that just occurred.  This does not display a stack trace because there isn't one for syntax errors. If *filename* is given, it is stuffed into the exception instead of the default filename provided by Python's parser, because it always uses ``'<string>'`` when reading from a string. The output is written by the :meth:`write` method."
msgstr ""
"Wyświetl błąd który właśnie nastąpił. To nie wyświetla wypisu śladu ze "
"sterty ponieważ nie istnieje taki dla błędu składniowego. Jeśli *nazwa "
"pliku* jest dana, jest ona wepchnięta w wyjątek zamiast domyślnej nazwy "
"pliku dostarczonej przez czytnik języka Pytonowskiego, ponieważ to zawsze "
"używa ``'<string>'`` gdy czytane jest z ciągu znaków. Wyjście jest "
"zapisywane przez sposób postępowania :meth:`write`."

msgid "Display the exception that just occurred.  We remove the first stack item because it is within the interpreter object implementation. The output is written by the :meth:`write` method."
msgstr ""
"Wyświetl wyjątek który właśnie nastąpił. Zdejmujemy pierwszy element sterty "
"ponieważ jest on wewnątrz wypełnienia przedmiotu interpretatora. Wyjście "
"jest zapisywane przez sposób postępowania :meth:`write`."

msgid "Write a string to the standard error stream (``sys.stderr``). Derived classes should override this to provide the appropriate output handling as needed."
msgstr ""
"Zapisz ciąg znaków do standardowego strumienia błędów (``sys.stderr``). "
"Pochodne uogólnienia powinny przesłaniać to dla dostarczenia odpowiedniej "
"obsługi wyjścia, jak potrzeba."

msgid "Interactive Console Objects"
msgstr "Przedmioty współdziałającej z użytkownikiem konsoli"

msgid "The :class:`InteractiveConsole` class is a subclass of :class:`InteractiveInterpreter`, and so offers all the methods of the interpreter objects as well as the following additions."
msgstr ""
"Uogólnienie :class:`InteractiveConsole` jest podrzędnym uogólnieniem "
"względem :class:`InteractiveInterpreter`, i tak oferuje wszystkie sposoby "
"postępowania przedmiotów interpretera zarówno jak też następujące dodatki."

msgid "Closely emulate the interactive Python console. The optional banner argument specify the banner to print before the first interaction; by default it prints a banner similar to the one printed by the standard Python interpreter, followed by the class name of the console object in parentheses (so as not to confuse this with the real interpreter -- since it's so close!)."
msgstr ""
"Blisko emuluj współdziałającą z użytkownikiem  konsolę języka Pytonowskiego. "
"Opcjonalny parametr banner określa banner do wydrukowania przed pierwszym "
"współdziałaniem z użytkownikiem; domyślnie drukuje to banner podobny do "
"jednego drukowanego przez standardowy interpreter języka pytonowskiego, po "
"którym następuje nazwa przedmiotu konsoli w nawiasach (tak aby nie pomylić "
"tego z rzeczywistym interpreterem -- gdyż jest on tak bliski!)."

msgid "Push a line of source text to the interpreter. The line should not have a trailing newline; it may have internal newlines.  The line is appended to a buffer and the interpreter's :meth:`runsource` method is called with the concatenated contents of the buffer as source.  If this indicates that the command was executed or invalid, the buffer is reset; otherwise, the command is incomplete, and the buffer is left as it was after the line was appended.  The return value is ``True`` if more input is required, ``False`` if the line was dealt with in some way (this is the same as :meth:`runsource`)."
msgstr ""
"Popchnij linię tekstu źródłowego dla interpretatora. Linia nie powinna mieć "
"kończącego znaku nowego wiersza. Linia jest dopisywana do przestrzeni "
"wymiany, a sposób postępowania :meth:`runsource` programu interpretującego "
"polecenia języka pytonowskiego jest wywoływany z połączonych zawartości z "
"przestrzeni wymiany jako źródło. Jeśli to wskazuje, że komenda została "
"wykonana lub niewłaściwa, przestrzeń wymiany jest resetowana; w przeciwnym "
"razie, polecenie jest niekompletne, a przestrzeń wymiany jest pozostawiana "
"tak jak była po tym jak linia została dopisana. Wartość zwracana jest "
"``Prawdziwa`` jeśli więcej wejścia jest wymagane, ``Fałszywa`` jeśli linia "
"została obsłużona w pewien sposób (to jest tym samym jak :meth:`runsource`)."

msgid "Remove any unhandled source text from the input buffer."
msgstr ""
"Zdejmij dowolne nieobsłużone teksty źródłowe z przestrzeni wymiany "
"wprowadzania."

msgid "Write a prompt and read a line.  The returned line does not include the trailing newline.  When the user enters the EOF key sequence, :exc:`EOFError` is raised. The base implementation reads from ``sys.stdin``; a subclass may replace this with a different implementation."
msgstr ""
"Zapisz zapytanie i wczytaj linię. Zwracana linia nie zawiera kończącego "
"znaku nowej linii. Gdy użytkownik wprowadzi sekwencję znaków EOF, "
":exc:`EOFError` jest zgłaszany. Bazowe wypełnienie wczytuje z ``sys.stdin``; "
"podrzędne uogólnienie może zastąpić to innym wypełnieniem."

msgid ":mod:`codecs` --- Codec registry and base classes"
msgstr ":mod:`codecs` --- rejestr kodeków i uogólnień podstawowych"

msgid "This module defines base classes for standard Python codecs (encoders and decoders) and provides access to the internal Python codec registry which manages the codec and error handling lookup process."
msgstr ""
"Ten moduł określa uogólnienia podstawowe dla standardowych kodeków języka "
"Pytonowskiego (koderów i dekoderów) i dostarcza dostęp do wewnętrznego "
"rejestru kodeków który zarządza kodekami i procesem podglądania obsługi "
"błędów. "

msgid "It defines the following functions:"
msgstr "Definiuje to następujące zadania:"

msgid "Register a codec search function. Search functions are expected to take one argument, the encoding name in all lower case letters, and return a :class:`CodecInfo` object having the following attributes:"
msgstr ""
"Rejestruje zadanie szukania kodeków. Zadania poszukiwania kodeku oczekuje "
"się że pobiorą jeden parametr, nazwę kodowania małymi literami, i zwróci "
"przedmiot :class:`CodecInfo` posiadający następujące właściwości:"

msgid "``name`` The name of the encoding;"
msgstr "``name`` Nazwa kodowania;"

msgid "``encode`` The stateless encoding function;"
msgstr "``encode`` Bezstanowe zadanie kodowania;"

msgid "``decode`` The stateless decoding function;"
msgstr "``decode`` Bezstanowe zadanie dekodowania;"

msgid "``incrementalencoder`` An incremental encoder class or factory function;"
msgstr ""
"``incrementalencoder`` zwiększające uogólnienie kodowania lub zadanie "
"fabrykujące;"

msgid "``incrementaldecoder`` An incremental decoder class or factory function;"
msgstr ""
"``incrementaldecoder`` zwiększające uogólnienie dekodowania lub zadanie "
"fabrykujące;"

msgid "``streamwriter`` A stream writer class or factory function;"
msgstr ""
"``streamwriter`` zapisujące strumień uogólnienie lub zadanie fabrykujące;"

msgid "``streamreader`` A stream reader class or factory function."
msgstr ""
"``streamreader`` odczytujące strumień uogólnienie lub zadanie fabrykujące;"

msgid "The various functions or classes take the following arguments:"
msgstr "Różne zadania i uogólnienia pobierają następujące parametry:"

msgid "*encode* and *decode*: These must be functions or methods which have the same interface as the :meth:`encode`/:meth:`decode` methods of Codec instances (see Codec Interface). The functions/methods are expected to work in a stateless mode."
msgstr ""
"*koduj* i *dekoduj - z ang. - *encode* and *decode*: Te muszą być zadaniami "
"lub sposobami postępowania, które mają ten sam sprzęg jak sposoby "
"postępowania :meth:`encode`/:meth:`decode` przykładów kodeków (zobacz sprzęg "
"kodeków). Zadania/ sposoby postępowania oczekuje się, że będą działać w "
"trybie bezstanowym."

msgid "*incrementalencoder* and *incrementaldecoder*: These have to be factory functions providing the following interface:"
msgstr ""
"*incrementalencoder* i *incrementaldecoder*: Te muszą być zadaniami "
"fabrykującymi dostarczającymi następujący sprzęg:"

msgid "``factory(errors='strict')``"
msgstr "``factory(errors='strict')``"

msgid "The factory functions must return objects providing the interfaces defined by the base classes :class:`IncrementalEncoder` and :class:`IncrementalDecoder`, respectively. Incremental codecs can maintain state."
msgstr ""
"Zadania fabrykujące muszą zwracać przedmioty dostarczające sprzęgi określone "
"przez uogólnienia podstawowe :class:`IncrementalEncoder` i "
":class:`IncrementalDecoder`, odpowiednio. Zwiększające kodeki mogą "
"zachowywać stan."

msgid "*streamreader* and *streamwriter*: These have to be factory functions providing the following interface:"
msgstr ""
"*streamreader* i *streamwriter*: Te muszą być zadaniami fabrykującymi "
"dostarczającymi następujący sprzęg:"

msgid "``factory(stream, errors='strict')``"
msgstr "``factory(stream, errors='strict')``"

msgid "The factory functions must return objects providing the interfaces defined by the base classes :class:`StreamWriter` and :class:`StreamReader`, respectively. Stream codecs can maintain state."
msgstr ""
"Zadania fabrykujące muszą zwracać przedmioty dostarczające sprzęgi określone "
"przez uogólnienie podstawowe :class:`StreamWriter` i :class:`StreamReader` "
"odpowiednio. Kodeki strumieniowe mogą zachowywać stan."

msgid "Possible values for errors are"
msgstr "Możliwe wartości dla błędów są:"

msgid "``'strict'``: raise an exception in case of an encoding error"
msgstr "``'strict'``: zgłoś wyjątek w przypadku błędu kodowania"

msgid "``'replace'``: replace malformed data with a suitable replacement marker, such as ``'?'`` or ``'\\ufffd'``"
msgstr ""
"``'replace'``: zamień dane z odpowiednim markerem zamiany, takim jak ``'?'`` "
"lub ``'\\ufffd'``"

msgid "``'ignore'``: ignore malformed data and continue without further notice"
msgstr ""
"``'ignore'``: ignoruj źle uformowane dane i kontynuuj bez dalszych "
"powiadomień"

msgid "``'xmlcharrefreplace'``: replace with the appropriate XML character reference (for encoding only)"
msgstr ""
"``'xmlcharrefreplace'``: zamień na odpowiedni znak odniesienia XML (tylko "
"dla kodowania)"

msgid "``'backslashreplace'``: replace with backslashed escape sequences (for encoding only)"
msgstr ""
"``'backslashreplace'``: zamień na skośnikowane sekwencje ucieczkowe (jedynie "
"dla kodowania) "

msgid "``'surrogateescape'``: replace with surrogate U+DCxx, see :pep:`383`"
msgstr "``'surrogateescape'``: zamień na surogatową U+DCxx, zobacz :pep:`383`"

msgid "as well as any other error handling name defined via :func:`register_error`."
msgstr ""
"zarówno jak też dowolne inne nazwy obsługi błędów zdefiniowanych przez "
":func:`register_error`."

msgid "In case a search function cannot find a given encoding, it should return ``None``."
msgstr ""
"W przypadku gdy zadanie poszukiwania nie może znaleźć danego kodowania, "
"powinno ono zwrócić ``None``."

msgid "Looks up the codec info in the Python codec registry and returns a :class:`CodecInfo` object as defined above."
msgstr ""
"Podgląda informację o kodeku w rejestrze kodeków języka pytonowskiego i "
"zwraca przedmiot :class:`CodecInfo` jak określono powyżej."

msgid "Encodings are first looked up in the registry's cache. If not found, the list of registered search functions is scanned. If no :class:`CodecInfo` object is found, a :exc:`LookupError` is raised. Otherwise, the :class:`CodecInfo` object is stored in the cache and returned to the caller."
msgstr ""
"Kodowania są najpierw podglądane w kieszeni rejestru. Jeśli nie znaleziono, "
"lista zadań poszukiwania jest skanowana. Jeśli żadne przedmioty "
":class:`CodecInfo` nie są znajdowane, wyjątek :exc:`LookupError` jest "
"zgłaszany. W przeciwnym przypadku przedmiot :class:`CodecInfo` jest "
"przechowywany w kieszeni i zwracany do wywołującego."

msgid "To simplify access to the various codecs, the module provides these additional functions which use :func:`lookup` for the codec lookup:"
msgstr ""
"Aby uprościć dostęp do różnych kodeków, moduł dostarcza te dodatkowe zadania "
"które używają zadania :func:`lookup` dla podglądu kodeków:"

msgid "Look up the codec for the given encoding and return its encoder function."
msgstr "Podejrzyj kodek dla danego kodowania i zwróć jego zadanie kodowania."

msgid "Raises a :exc:`LookupError` in case the encoding cannot be found."
msgstr ""
"Zgłasza :exc:`LookupError` w przypadku gdy kodowanie nie może być "
"znalezione."

msgid "Look up the codec for the given encoding and return its decoder function."
msgstr "Podejrzyj kodek dla danego kodowania i zwróć jego zadanie dekodowania."

msgid "Look up the codec for the given encoding and return its incremental encoder class or factory function."
msgstr ""
"Podejrzyj kodek dla danego kodowania i zwróć jego uogólnienie zwiększające "
"koder lub zadanie fabrykujące. "

msgid "Raises a :exc:`LookupError` in case the encoding cannot be found or the codec doesn't support an incremental encoder."
msgstr ""
"Zgłoś :exc:`LookupError` w przypadku gdy kodowanie nie może być znalezione "
"lub gdy kodek nie wspiera zwiększającego się kodowania."

msgid "Look up the codec for the given encoding and return its incremental decoder class or factory function."
msgstr ""
"Podejrzyj kodek dla danego kodowania i zwróć jego uogólnienie zwiększającego "
"dekodera lub zadania fabrykującego. "

msgid "Raises a :exc:`LookupError` in case the encoding cannot be found or the codec doesn't support an incremental decoder."
msgstr ""
"Zgłasza wyjątek :exc:`LookupError` w przypadku gdy kodowanie nie może "
"znaleźć kodowania lub kodek nie wspiera zwiększającego się dekodera."

msgid "Look up the codec for the given encoding and return its StreamReader class or factory function."
msgstr ""
"Podejrzyj kodek dla danego kodowania i zwróć jego uogólnienie StreamReader "
"lub zadanie fabrykujące."

msgid "Look up the codec for the given encoding and return its StreamWriter class or factory function."
msgstr ""
"Podejrzyj kodek dla danego kodowania i zwróć jego uogólnienie StreamWriter "
"lub zadania fabrykującego."

msgid "Register the error handling function *error_handler* under the name *name*. *error_handler* will be called during encoding and decoding in case of an error, when *name* is specified as the errors parameter."
msgstr ""
"Zwróć zadanie obsługi błędu *error_handler* pod nazwą *name*. "
"*error_handler* będzie wywołany w czasie kodowania i dekodowania w przypadku "
"błędu, gdy *nazwa* - z ang. - *name* jest określone dla parametrów błędów."

msgid "For encoding *error_handler* will be called with a :exc:`UnicodeEncodeError` instance, which contains information about the location of the error. The error handler must either raise this or a different exception or return a tuple with a replacement for the unencodable part of the input and a position where encoding should continue. The encoder will encode the replacement and continue encoding the original input at the specified position. Negative position values will be treated as being relative to the end of the input string. If the resulting position is out of bound an :exc:`IndexError` will be raised."
msgstr ""
"Dla kodowania *error_handler* będzie wywołane z przykładem "
":exc:`UnicodeEncodeError` który zawiera informacje o położeniu błędu. "
"Obsługa błędu musi albo zgłosić ten lub inny wyjątek lub zwrócić krotkę z "
"zamiennikiem dla niedekodowalną część wejścia i pozycję gdzie kodowanie "
"powinno kontynuować. Kodowanie będzie kodować zamiennik i kontynuować "
"kodowanie oryginalnego wejścia w określonej pozycji. Ujemne wartości pozycji "
"zostaną potraktowane jako będące odniesieniem do końca ciągu wejściowego. "
"Jeśli powstała pozycja jest poza zakresem wyjątek :exc:`IndexError` zostanie "
"zgłoszony."

msgid "Decoding and translating works similar, except :exc:`UnicodeDecodeError` or :exc:`UnicodeTranslateError` will be passed to the handler and that the replacement from the error handler will be put into the output directly."
msgstr ""
"Dekodowanie i zamiana nazw pracują podobnie z wyjątkiem "
":exc:`UnicodeDecodeError` lub :exc:`UnicodeTranslateError` zostaną "
"przekazane do obsługi i że zamiennik dla obsługi błędu zostanie włożona do "
"wyjściowego katalogu."

msgid "Return the error handler previously registered under the name *name*."
msgstr "Zwróć obsługę błędu poprzednio zarejestrowanym pod nazwą *name*."

msgid "Raises a :exc:`LookupError` in case the handler cannot be found."
msgstr ""
"Zgłasza wyjątek :exc:`LookupError` w przypadku gdy obsługa nie może być "
"znaleziona."

msgid "Implements the ``strict`` error handling: each encoding or decoding error raises a :exc:`UnicodeError`."
msgstr ""
"Wypełnia ``strict`` - z ang - ścisłą obsługę błędu: każde błędy kodowania "
"lub dekodowania zgłaszają :exc:`UnicodeError`."

msgid "Implements the ``replace`` error handling: malformed data is replaced with a suitable replacement character such as ``'?'`` in bytestrings and ``'\\ufffd'`` in Unicode strings."
msgstr ""
"Wypełnia obsługę błędu ``replace``: nieuformowane dane są zamieniane na "
"odpowiedni znak zamienny taki jak ``'?'`` w ciągach bajtów i ``'ufffd'`` w "
"ciągu Unicode."

msgid "Implements the ``ignore`` error handling: malformed data is ignored and encoding or decoding is continued without further notice."
msgstr ""
"Wypełnia obsługę błędu ``ignoruj``: nieuformowane dane są ignorowane, a "
"kodowanie lub dekodowanie jest kontynuowane bez dalszego powiadamiania."

msgid "Implements the ``xmlcharrefreplace`` error handling (for encoding only): the unencodable character is replaced by an appropriate XML character reference."
msgstr ""
"Wypełnia ``xmlcharrefreplace`` obsługę błędu (jedynie dla kodowania): "
"niekodowalny znak jest zamieniany przez odpowiednie odniesienie znakowe XML."

msgid "Implements the ``backslashreplace`` error handling (for encoding only): the unencodable character is replaced by a backslashed escape sequence."
msgstr ""
"Wypełnia obsługę błędu ``backslashreplace`` (jedynie dla kodowania): "
"niekodowalny znak jest zamieniany przez skośnikowaną sekwencję ucieczkową."

msgid "To simplify working with encoded files or stream, the module also defines these utility functions:"
msgstr ""
"Aby uprościć pracę z zakodowanymi plikami lub strumieniami, moduł także "
"definiuje te zadania użytkowe:"

msgid "Open an encoded file using the given *mode* and return a wrapped version providing transparent encoding/decoding.  The default file mode is ``'r'`` meaning to open the file in read mode."
msgstr ""
"Otwórz zakodowany plik używając danego *trybu* i zwróć zapakowaną wersję "
"dostarczającą przezroczyste kodowanie/dekodowanie. Domyślny tryb pliku jest "
"``'r'`` w znaczeniu otwarcia pliku w trybie odczytu."

msgid "The wrapped version's methods will accept and return strings only.  Bytes arguments will be rejected."
msgstr ""
"Zapakowane sposoby postępowania wersji będą akceptować i zwracać tylko ciągi "
"znaków. Parametry bajtowe zostaną odrzucone."

msgid "Files are always opened in binary mode, even if no binary mode was specified.  This is done to avoid data loss due to encodings using 8-bit values.  This means that no automatic conversion of ``b'\\n'`` is done on reading and writing."
msgstr ""
"Pliki są zawsze otwierane w trybie binarnym, nawet jeśli żadne tryby binarne "
"nie były określone. To jest robione po to aby uniknąć utraty danych z "
"powodu kodowania 8-bitowych wartości. To oznacza że żadne automatyczne "
"konwertowanie ``b'\n"
"'`` nie jest wykonywane przy wczytywaniu i zapisywaniu."

msgid "*encoding* specifies the encoding which is to be used for the file."
msgstr "*kodowanie* określa kodowanie które będzie użyte dla pliku."

msgid "*errors* may be given to define the error handling. It defaults to ``'strict'`` which causes a :exc:`ValueError` to be raised in case an encoding error occurs."
msgstr ""
"*błędy* mogą być dane do zdefiniowania obsługi błędu. To domyślnie równe "
"jest ``'strict'`` co powoduje że :exc:`ValueError` jest zgłaszany w "
"przypadku błędu kodowania. "

msgid "*buffering* has the same meaning as for the built-in :func:`open` function.  It defaults to line buffered."
msgstr ""
"*buforowanie* ma te same znaczenie jak dla wbudowane zadanie :func:`open`. "
"Domyślnie równe jest buforowaniu."

msgid "Return a wrapped version of file which provides transparent encoding translation."
msgstr ""
"Zwróć zapakowaną wersję pliku, który dostarcza przezroczystego tłumaczenia "
"kodowania."

msgid "Bytes written to the wrapped file are interpreted according to the given *data_encoding* and then written to the original file as bytes using the *file_encoding*."
msgstr ""
"Bajty zapisane do zapakowanego pliku są interpretowane zgodnie z danym "
"kodowaniem *data_encoding* i wtedy zapisane do oryginalnego pliku jako bajty "
"używając *file_encoding*."

msgid "If *file_encoding* is not given, it defaults to *data_encoding*."
msgstr ""
"Jeśli *file_encoding* nie jest dane, domyślnie równe jest *data_encoding*."

msgid "*errors* may be given to define the error handling. It defaults to ``'strict'``, which causes :exc:`ValueError` to be raised in case an encoding error occurs."
msgstr ""
"*errors* błędy mogą być dane do zdefiniowania obsługi błędów. Domyślnie "
"równe jest ``'strict'``, co powoduje, że :exc:`ValueError` będzie zgłaszany "
"w przypadku gdy błąd kodowania nastąpi."

msgid "Uses an incremental encoder to iteratively encode the input provided by *iterator*. This function is a :term:`generator`.  *errors* (as well as any other keyword argument) is passed through to the incremental encoder."
msgstr ""
"Używa zwiększającego kodera do iteracyjnego zakodowania wejścia "
"dostarczonego przez *iterator*. To zadanie jest :term:`generatorem`. *błędy* "
"- z ang. - *errors* (zarówno jak inne parametry słów kluczowych) jest "
"przekazywane dalej do przyrostowego kodera."

msgid "Uses an incremental decoder to iteratively decode the input provided by *iterator*. This function is a :term:`generator`.  *errors* (as well as any other keyword argument) is passed through to the incremental decoder."
msgstr ""
"Używa przyrostowego dekodera do iteracyjnego dekodowania wejścia "
"dostarczonego przez *iterator*. To zadanie jest :term:`generatorem`. *błędy* "
"- z ang. - *errors* (zarówno jak inne parametry słów kluczowych) są "
"przekazywane dalej do przyrostowego dekodera."

msgid "The module also provides the following constants which are useful for reading and writing to platform dependent files:"
msgstr ""
"Ten moduł także dostarcza następujące stałe które są użyteczne dla "
"wczytywania i zapisywania plików zależnych od maszyny/środowiska:"

msgid "These constants define various encodings of the Unicode byte order mark (BOM) used in UTF-16 and UTF-32 data streams to indicate the byte order used in the stream or file and in UTF-8 as a Unicode signature. :const:`BOM_UTF16` is either :const:`BOM_UTF16_BE` or :const:`BOM_UTF16_LE` depending on the platform's native byte order, :const:`BOM` is an alias for :const:`BOM_UTF16`, :const:`BOM_LE` for :const:`BOM_UTF16_LE` and :const:`BOM_BE` for :const:`BOM_UTF16_BE`. The others represent the BOM in UTF-8 and UTF-32 encodings."
msgstr ""
"Te stałe określają różne kodowania Unikodowych znaków porządku bajtów (BOM - "
"z ang. - byte order mark) używanych w ciągach danych UTF-16 i UTF-32 do "
"wskazywania porządku bajtów używanych w strumieniu lub pliku i w UTF-8 jako "
"sygnatury Unicode. :const:`BOM_UTF16` jest albo :const:`BOM_UTF16_BE` lub "
":const:`BOM_UTF16_LE` w zależności od natywnego porządku bajtów "
"maszyny/środowiska, :const:`BOM` jest synonimem dla :const:`BOM_UTF16`, "
":const:`BOM_LE` dla :const:`BOM_UTF16_LE` i :const`BOM_BE` dla "
":const:`BOM_UTF16_BE`. Inne reprezentują BOM w kodowaniach UTF-8 i UTF-32."

msgid "Codec Base Classes"
msgstr "Uogólnienia podstawowe kodeków"

msgid "The :mod:`codecs` module defines a set of base classes which define the interface and can also be used to easily write your own codecs for use in Python."
msgstr ""
"Moduł :mod:`codecs` definiuje zestaw uogólnień podstawowych które definiują "
"sprzęg i może także być używany do łatwego pisania twoich własnych kodeków "
"dla użycia w języku pytonowskim."

msgid "Each codec has to define four interfaces to make it usable as codec in Python: stateless encoder, stateless decoder, stream reader and stream writer. The stream reader and writers typically reuse the stateless encoder/decoder to implement the file protocols."
msgstr ""
"Każdy kodek musi definiować cztery sprzęgi aby spowodować że będzie "
"użyteczny jako kodek w języku pytonowskim: bezstanowy koder, bezstanowy "
"dekoder, strumieniowy czytnik i strumieniowy zapis. Strumieniowe czytanie i "
"pisanie typowo ponownie używają bezstanowy koder/dekoder aby wypełnić "
"protokoły plikowe."

msgid "The :class:`Codec` class defines the interface for stateless encoders/decoders."
msgstr ""
"Uogólnienie :class:`Codec` definiuje sprzęg dla bezstanowego "
"kodera/dekodera."

msgid "To simplify and standardize error handling, the :meth:`encode` and :meth:`decode` methods may implement different error handling schemes by providing the *errors* string argument.  The following string values are defined and implemented by all standard Python codecs:"
msgstr ""
"Aby uprościć i standaryzować obsługę błędu, sposoby postępowania "
":meth:`encode` i :meth:`decode` mogą wypełniać inne błędne schematy obsługi "
"przez dostarczenie *błędów* - z ang. - *error* parametrów ciągów znaków. "
"Następujące ciągi znaków są definiowane i wypełniane przez wszystkie "
"standardowe kodeki języka pytonowskiego: "

msgid "Value"
msgstr "Wartość"

msgid "Meaning"
msgstr "Znaczenie"

msgid "``'strict'``"
msgstr "``'ściśle'`` - z ang. - ``'strict'``"

msgid "Raise :exc:`UnicodeError` (or a subclass); this is the default."
msgstr ""
"Zgłoś :exc:`UnicodeError` (lub podrzędne uogólnienie); to jest domyślnie."

msgid "``'ignore'``"
msgstr "``'ignoruj'``"

msgid "Ignore the character and continue with the next."
msgstr "Ignoruje znak i kontynuuj z następnym."

msgid "``'replace'``"
msgstr "``'zamień'`` - z ang. - ``'replace'``"

msgid "Replace with a suitable replacement character; Python will use the official U+FFFD REPLACEMENT CHARACTER for the built-in Unicode codecs on decoding and '?' on encoding."
msgstr ""
"Zamień na odpowiedni znak zastępczy; Język pytonowski będzie używał "
"oficjalnego ZNAKU ZASTĘPCZEGO U+FFFD dla wbudowanych kodeków Unicode na "
"dekodowanie i '?' na kodowanie."

msgid "``'xmlcharrefreplace'``"
msgstr "``'xmlcharrefreplace'``"

msgid "Replace with the appropriate XML character reference (only for encoding)."
msgstr ""
"Zamień na odpowiedni znak XML - znak odniesienia (tylko dla kodowania).  "

msgid "``'backslashreplace'``"
msgstr "``'backslashreplace'``"

msgid "Replace with backslashed escape sequences (only for encoding)."
msgstr "Zamień na sekwencję skośnikowaną ucieczkową (tylko dla kodowania)."

msgid "``'surrogateescape'``"
msgstr "``'surrogateescape'``"

msgid "Replace byte with surrogate U+DCxx, as defined in :pep:`383`."
msgstr "Zamień na surogat U+DCxx, jak opisano w :pep:`383`."

msgid "In addition, the following error handlers are specific to a single codec:"
msgstr ""
"W dodatku następujące obsługi błędów są szczególne dla pojedynczego kodeka:"

msgid "Codec"
msgstr "Kodek"

msgid "``'surrogatepass'``"
msgstr "``'surrogatepass'``"

msgid "utf-8"
msgstr "utf-8"

msgid "Allow encoding and decoding of surrogate codes in UTF-8."
msgstr "Pozwala na kodowanie i dekodowanie kodów surogatów w UTF-8."

msgid "The set of allowed values can be extended via :meth:`register_error`."
msgstr ""
"Zestaw dozwolonych wartości może być rozszerzony przez "
":meth:`register_error`."

msgid "Codec Objects"
msgstr "Przedmioty kodeków"

msgid "The :class:`Codec` class defines these methods which also define the function interfaces of the stateless encoder and decoder:"
msgstr ""
"Uogólnienie :class:`Codec` definiuje te metody które mogą także definiować "
"sprzęgi zadań bezstanowego kodera i dekodera:"

msgid "Encodes the object *input* and returns a tuple (output object, length consumed). Encoding converts a string object to a bytes object using a particular character set encoding (e.g., ``cp1252`` or ``iso-8859-1``)."
msgstr ""
"Koduje przedmiot *input* i zwraca krotkę (wyjściowy przedmiot, długość "
"skonsumowana). Kodowanie konwertuje przedmiot ciągu do przedmiotu bajtów "
"używając szczególnego zestawu znaków kodowania (np., ``cp1252`` lub "
"``iso-8859-1``)."

msgid "*errors* defines the error handling to apply. It defaults to ``'strict'`` handling."
msgstr ""
"*errors* definiuje obsługę błędów do zastosowania. Domyślnie jest to "
"``'ścisła'`` ( - z ang. ``'strict'`` ) obsługa."

msgid "The method may not store state in the :class:`Codec` instance. Use :class:`StreamCodec` for codecs which have to keep state in order to make encoding/decoding efficient."
msgstr ""
"Sposób postępowania może nie zachowywać stanu w przykładzie :class:`Codec`. "
"Użyj :class:`StreamCodec` dla kodeków które muszą utrzymywać stan w celu "
"uczynienia kodowania/dekodowania efektywnym."

msgid "The encoder must be able to handle zero length input and return an empty object of the output object type in this situation."
msgstr ""
"Koder musi być w stanie obsłużyć wejście o długości zerowej i zwrócić pusty "
"przedmiot wyjściowego typu przedmiotu w tej sytuacji."

msgid "Decodes the object *input* and returns a tuple (output object, length consumed).  Decoding converts a bytes object encoded using a particular character set encoding to a string object."
msgstr ""
"Dekoduje przedmiot wejściowy *input* i zwróć krotkę (wyjściowy przedmiot, "
"długość skonsumowana). Dekodowanie zamienia przedmiot bajtów zakodowany "
"używając szczególnego zestawu znaków kodowania do przedmiotu ciągu znaków."

msgid "*input* must be a bytes object or one which provides the read-only character buffer interface -- for example, buffer objects and memory mapped files."
msgstr ""
"*wejście* musi być przedmiotem bajtów lub takiego który dostarcza sprzęg "
"przestrzeni wymiany znaków tylko do odczytu -- dla przykładu, przedmiot "
"przestrzeni wymiany i plików mapowanych w pamięci."

msgid "The decoder must be able to handle zero length input and return an empty object of the output object type in this situation."
msgstr ""
"Dekoder musi być zdolny aby obsłużyć zerowej długości i zwrócić pusty "
"przedmiot wyjściowego rodzaju przedmiotu w tej sytuacji."

msgid "The :class:`IncrementalEncoder` and :class:`IncrementalDecoder` classes provide the basic interface for incremental encoding and decoding. Encoding/decoding the input isn't done with one call to the stateless encoder/decoder function, but with multiple calls to the :meth:`encode`/:meth:`decode` method of the incremental encoder/decoder. The incremental encoder/decoder keeps track of the encoding/decoding process during method calls."
msgstr ""
"uogólnienia :class:`IncrementalEncoder` i :class:`IncrementalDecoder` "
"dostarczają podstawowy sprzęg do zwiększającego się kodowania i dekodowania. "
"Kodowanie/dekodowanie wejścia nie jest dokonywana za pomocą jednego "
"wywołania zadania bezstanowego kodera/dekodera, ale za pomocą wielokrotnych "
"odwołań do sposobu postępowania :meth:`encode`/:meth:`decode` zwiększającego "
"się kodera/dekodera. Zwiększający koder/dekoder pilnuje procesu "
"kodowania/dekodowania w czasie wywołania sposobów postępowania."

msgid "The joined output of calls to the :meth:`encode`/:meth:`decode` method is the same as if all the single inputs were joined into one, and this input was encoded/decoded with the stateless encoder/decoder."
msgstr ""
"Połączone wyjście wywołania sposobów postępowania "
":meth:`encode`/:meth:`decode` jest to samo co jeśli wszystkie pojedyncze "
"wejścia byłyby połączone w jedno, i to wejście było zakodowane/zdekodowane "
"bezstanowym koderem/dekoderem."

msgid "IncrementalEncoder Objects"
msgstr "Przedmioty IncrementalEncodera"

msgid "The :class:`IncrementalEncoder` class is used for encoding an input in multiple steps. It defines the following methods which every incremental encoder must define in order to be compatible with the Python codec registry."
msgstr ""
"Uogólnienie :class:`IncrementalEncoder` jest używane dla kodowania wejścia w "
"wielu krokach. Określa ona następujące sposoby postępowania które każdy "
"zwiększający się koder musi definiować w celu aby być kompatybilnym z "
"rejestrem kodeków języka pytonowskiego."

msgid "Constructor for an :class:`IncrementalEncoder` instance."
msgstr "Konstruktor dla przykładu uogólnienia :class:`IncrementalEncoder`."

msgid "All incremental encoders must provide this constructor interface. They are free to add additional keyword arguments, but only the ones defined here are used by the Python codec registry."
msgstr ""
"Wszystkie zwiększające kodery muszą dostarczać ten sprzęg konstruktora. "
"Wolno im dodawać dodatkowe parametry słów kluczowych, ale tylko te "
"zdefiniowane tutaj są używane przez rejestr kodeków języka pytonowskiego."

msgid "The :class:`IncrementalEncoder` may implement different error handling schemes by providing the *errors* keyword argument. These parameters are predefined:"
msgstr ""
"Uogólnienie :class:`IncrementalEncoder` może wypełniać różne schematy "
"obsługi błędów przez dostarczanie parametru słowa kluczowego *errors*. Te "
"parametry są zdefiniowane na stałe:"

msgid "``'strict'`` Raise :exc:`ValueError` (or a subclass); this is the default."
msgstr ""
"``'strict'`` - z ang. - ``'ścisłe'`` Zgłoś :exc:`ValueError` (lub podrzędne "
"uogólnienia); to jest domyślne."

msgid "``'ignore'`` Ignore the character and continue with the next."
msgstr "``'ignore'`` Ignoruj znak i kontynuuj z następnym."

msgid "``'replace'`` Replace with a suitable replacement character"
msgstr "``'zamień'`` Zamień na odpowiedni znak zamiany"

msgid "``'xmlcharrefreplace'`` Replace with the appropriate XML character reference"
msgstr "``'xmlcharrefreplace'`` Zamień na odpowiedni XML znak odniesienia"

msgid "``'backslashreplace'`` Replace with backslashed escape sequences."
msgstr "``'backslashreplace'`` Zamień na sekwencję ucieczkową skośnikowaną."

msgid "The *errors* argument will be assigned to an attribute of the same name. Assigning to this attribute makes it possible to switch between different error handling strategies during the lifetime of the :class:`IncrementalEncoder` object."
msgstr ""
"Parametr *errors* zostanie przypisany do właściwości o tej samej nazwie. "
"Przypisywanie do tej właściwości umożliwia zamianę pomiędzy różnymi "
"strategiami obsługi w czasie życia przedmiotu :class:`IncrementalEncoder`."

msgid "The set of allowed values for the *errors* argument can be extended with :func:`register_error`."
msgstr ""
"Zbiór dozwolonych wartości parametru *errors* może być rozszerzany za pomocą "
"zadania :func:`register_error`. "

msgid "Encodes *object* (taking the current state of the encoder into account) and returns the resulting encoded object. If this is the last call to :meth:`encode` *final* must be true (the default is false)."
msgstr ""
"*Przedmiot* Koderów (wliczający obecny stan kodera) i zwraca wynikający "
"przedmiot kodowania. Jeśli to jest ostatnie wywołanie sposobu postępowania "
":meth:`encode` *final* musi być prawdziwe (domyślnie jest fałsz)."

msgid "Reset the encoder to the initial state."
msgstr "Resetuj koder do stanu początkowego."

msgid "Return the current state of the encoder which must be an integer. The implementation should make sure that ``0`` is the most common state. (States that are more complicated than integers can be converted into an integer by marshaling/pickling the state and encoding the bytes of the resulting string into an integer)."
msgstr ""
"Zwróć obecny stan kodera który musi być liczbą całkowitą. Wypełnienie "
"powinno upewnić się że ``0`` jest najczęstszym stanem. (Stany, które są "
"bardziej skomplikowane niż liczby całkowite mogą być zamienione na liczbę "
"całkowitą, przez maszerowanie/peklowanie stanu i kodowanie bajtów wynikłych "
"ciągów znaków do liczby całkowitej)."

msgid "Set the state of the encoder to *state*. *state* must be an encoder state returned by :meth:`getstate`."
msgstr ""
"Ustaw stan kodera na *stan*. *stan* musi być stanem kodera zwracanym przez "
":meth:`getstate`."

msgid "IncrementalDecoder Objects"
msgstr "Przedmioty IncrementalDecoder"

msgid "The :class:`IncrementalDecoder` class is used for decoding an input in multiple steps. It defines the following methods which every incremental decoder must define in order to be compatible with the Python codec registry."
msgstr ""
"Uogólnienie :class:`IncrementalDecoder` jest używany dla dekodowania wejścia "
"w kilku krokach. Określa on następujące sposoby postępowania, które każdy "
"przyrostowy dekoder musi określać w celu pozostania kompatybilnym z "
"rejestrem kodeków języka pytonowskiego."

msgid "Constructor for an :class:`IncrementalDecoder` instance."
msgstr ""
"Konstruktor dla przykładu uogólnienia przyrostowego dekodera "
":class:`IncrementalDecoder`."

msgid "All incremental decoders must provide this constructor interface. They are free to add additional keyword arguments, but only the ones defined here are used by the Python codec registry."
msgstr ""
"Wszystkie przyrostowe dekodery muszą dostarczać ten sprzęg konstruktora. "
"Wolno im dodawać dodatkowe parametry kluczowe, ale tylko te zdefiniowane "
"tutaj są używane przez rejestr kodeków języka pytonowskiego."

msgid "The :class:`IncrementalDecoder` may implement different error handling schemes by providing the *errors* keyword argument. These parameters are predefined:"
msgstr ""
"Uogólnienie :class:`IncrementalDecoder` może wypełniać różne schematy "
"obsługi błędów przez dostarczenie parametru słowa kluczowego *errors*. Te "
"parametry są uprzednio zdefiniowane:"

msgid "``'replace'`` Replace with a suitable replacement character."
msgstr "``'replace'`` Zamień na odpowiedni znak zastępczy."

msgid "The *errors* argument will be assigned to an attribute of the same name. Assigning to this attribute makes it possible to switch between different error handling strategies during the lifetime of the :class:`IncrementalDecoder` object."
msgstr ""
"Parametr *errors* zostanie przypisany do właściwości o tej samej nazwie. "
"Przypisanie do tej właściwości umożliwia zamianę pomiędzy różnymi "
"strategiami obsługi błędów w czasie bytności przedmiotu "
":class:`IncrementalDecoder`."

msgid "Decodes *object* (taking the current state of the decoder into account) and returns the resulting decoded object. If this is the last call to :meth:`decode` *final* must be true (the default is false). If *final* is true the decoder must decode the input completely and must flush all buffers. If this isn't possible (e.g. because of incomplete byte sequences at the end of the input) it must initiate error handling just like in the stateless case (which might raise an exception)."
msgstr ""
"Dekoduje *przedmiot* (biorąc aktualny stan dekodera pod uwagę) i zwraca "
"wynikły przedmiot dekodera. Jeśli to jest ostatnie wywołanie :meth:`decode` "
"*final* musi być prawdziwe (domyślnie jest fałszywe). Jeśli *final* jest "
"prawdziwe dekoder musi dekodować wejście kompletnie i musi opróżnić "
"wszystkie przestrzenie wymiany. Jeśli to jest niemożliwe (np. z powodu "
"niekompletnych sekwencji bajtów na koniec wejścia) to musi inicjować obsługę "
"błędów tak jak w przypadku bezstanowym (co może zgłaszać wyjątek)."

msgid "Reset the decoder to the initial state."
msgstr "Resetuj dekoder do stanu początkowego."

msgid "Return the current state of the decoder. This must be a tuple with two items, the first must be the buffer containing the still undecoded input. The second must be an integer and can be additional state info. (The implementation should make sure that ``0`` is the most common additional state info.) If this additional state info is ``0`` it must be possible to set the decoder to the state which has no input buffered and ``0`` as the additional state info, so that feeding the previously buffered input to the decoder returns it to the previous state without producing any output. (Additional state info that is more complicated than integers can be converted into an integer by marshaling/pickling the info and encoding the bytes of the resulting string into an integer.)"
msgstr ""
"Zwróć stan obecny dekodera. To musi być krotka z dwoma elementami, pierwszy "
"musi być przestrzenią wymiany zawierającą wciąż niezdekodowane wejście. "
"Drugi musi być liczbą całkowitą i może być informacją dodatkową o stanie. "
"(Wypełnienie powinno upewniać się, że ``0`` jest najczęściej spotykaną "
"dodatkową informacją o stanie.) Jeśli ten dodatkowy stan jest ``0`` musi być "
"możliwe ustawienie dekodera na stan który nie ma wejścia w przestrzeni "
"wymiany i ``0`` jako dodatkową wiadomość o stanie, tak że przekazanie "
"poprzednio buforowanego  wejścia dla dekodera zwraca go do poprzedniego "
"stanu bez wytwarzania żadnego wyjścia. (Dodatkowe informacje o stanie które "
"są bardziej skomplikowane niż liczby całkowite mogą być zamienione na liczbę "
"całkowitą przez przemaszerowanie/peklowanie informacji i kodujących bajtów "
"wynikłego ciągu znaków do liczby całkowitej.)"

msgid "Set the state of the encoder to *state*. *state* must be a decoder state returned by :meth:`getstate`."
msgstr ""
"Ustaw stan kodera na *stan* - z ang. - *state*. *stan* musi być stanem "
"dekodera zwróconym przez :meth:`getstate`."

msgid "The :class:`StreamWriter` and :class:`StreamReader` classes provide generic working interfaces which can be used to implement new encoding submodules very easily. See :mod:`encodings.utf_8` for an example of how this is done."
msgstr ""
"Uogólnienia :class:`StreamWriter` i :class:`StreamReader` dostarczają "
"zastępczych sprzęgów pracujących, które mogą być użyte do wypełnienia nowych "
"podmodułów kodowania bardzo łatwo. Zobacz moduł :mod:`encodings.uft_8` dla "
"przykładu jak to się robi."

msgid "StreamWriter Objects"
msgstr "Przedmioty StreamWriter"

msgid "The :class:`StreamWriter` class is a subclass of :class:`Codec` and defines the following methods which every stream writer must define in order to be compatible with the Python codec registry."
msgstr ""
"Uogólnienie :class:`StreamWriter jest podrzędnym uogólnieniem uogólnienia "
":class:`Codec` i definiuje następujące sposoby postępowania które każdy "
"piszący do strumienia musi definiować w celu pozostania zgodnym z rejestrem "
"kodeków języka pytonowskiego."

msgid "Constructor for a :class:`StreamWriter` instance."
msgstr "Konstruktor dla przykładu uogólnienia :class:`StreamWriter`."

msgid "All stream writers must provide this constructor interface. They are free to add additional keyword arguments, but only the ones defined here are used by the Python codec registry."
msgstr ""
"Wszystkie przedmioty piszące do strumienia muszą dostarczać ten sprzęg "
"konstruktora. Mogą dodawać dodatkowe parametry słów kluczowych, ale tylko te "
"zdefiniowane tutaj są użyte przez rejestr kodeków języka pytonowskiego."

msgid "*stream* must be a file-like object open for writing binary data."
msgstr ""
"*stream* musi być przedmiotem podobnym-do-pliku otwartym na zapis danych "
"binarnych."

msgid "The :class:`StreamWriter` may implement different error handling schemes by providing the *errors* keyword argument. These parameters are predefined:"
msgstr ""
"Uogólnienie :class:`StreamWriter` może wypełniać różne schematy obsługi "
"błędów przez dostarczanie parametru słowa kluczowego *errors*. Te parametry "
"są zdefiniowane uprzednio:"

msgid "The *errors* argument will be assigned to an attribute of the same name. Assigning to this attribute makes it possible to switch between different error handling strategies during the lifetime of the :class:`StreamWriter` object."
msgstr ""
"Parametr *errors* zostanie przypisany do właściwości o tej samej nazwie. "
"Przypisanie do tej właściwości powoduje że możliwa jest zamiana pomiędzy "
"rożnymi strategiami obsługi błędów w czasie bytowania przedmiotu "
":class:`StreamWriter`."

msgid "Writes the object's contents encoded to the stream."
msgstr "Zapisuje zawartość przedmiotu zakodowanego do strumienia."

msgid "Writes the concatenated list of strings to the stream (possibly by reusing the :meth:`write` method)."
msgstr ""
"Zapisuje połączona listę ciągów znaków do strumienia (możliwie przez ponowne "
"użycie sposobu postępowania :meth:`write`)."

msgid "Flushes and resets the codec buffers used for keeping state."
msgstr ""
"Opróżnia i resetuje przestrzenie wymiany kodeka używane dla utrzymania "
"stanu."

msgid "Calling this method should ensure that the data on the output is put into a clean state that allows appending of new fresh data without having to rescan the whole stream to recover state."
msgstr ""
"Wywołanie tego sposobu postępowania powinno pozwalać na to by dane na "
"wyjściu były włożone do czystego stanu który pozwala na dopisywanie nowych "
"świeżych danych bez konieczności ponownego skanowania całego strumienia dla "
"przywrócenia stanu."

msgid "In addition to the above methods, the :class:`StreamWriter` must also inherit all other methods and attributes from the underlying stream."
msgstr ""
"W dodatku do powyższych sposobów postępowania, uogólnienie "
":class:`StreamWriter` musi także dziedziczyć wszystkie inne sposoby "
"postępowania i właściwości z leżącego u podstaw strumienia."

msgid "StreamReader Objects"
msgstr "Przedmioty StreamReader"

msgid "The :class:`StreamReader` class is a subclass of :class:`Codec` and defines the following methods which every stream reader must define in order to be compatible with the Python codec registry."
msgstr ""
"Uogólnienie :class:`StreamReader` jest podrzędnym uogólnieniem uogólnienia "
":class:`Codec` i definiuje następujące sposoby postępowania które każdy "
"czytający ze strumienia musi określać w celu aby zachować zgodność z "
"rejestrem kodeków języka pytonowskiego."

msgid "Constructor for a :class:`StreamReader` instance."
msgstr "Konstruktor dla przykładu uogólnienia :class:`StreamReader`."

msgid "All stream readers must provide this constructor interface. They are free to add additional keyword arguments, but only the ones defined here are used by the Python codec registry."
msgstr ""
"Wszystkie czytniki strumienia muszą dostarczać ten sprzęg konstruktora. Mogą "
"dodawać dodatkowe parametry słów kluczowych, ale tylko te zdefiniowane "
"tutaj są używane przez rejestr kodeków języka pytonowskiego."

msgid "*stream* must be a file-like object open for reading (binary) data."
msgstr ""
"*stream* musi być pliko-podobnym przedmiotem otwartym dla wczytywania "
"(binarnych) danych."

msgid "The :class:`StreamReader` may implement different error handling schemes by providing the *errors* keyword argument. These parameters are defined:"
msgstr ""
"Uogólnienie :class:`StreamReader` może wypełniać różne schematy obsługi "
"błędów przez dostarczenie parametru słowa kluczowego *errors*. Te parametry "
"są określone:"

msgid "The *errors* argument will be assigned to an attribute of the same name. Assigning to this attribute makes it possible to switch between different error handling strategies during the lifetime of the :class:`StreamReader` object."
msgstr ""
"Parametr *errors* zostanie przypisany do właściwości o tej samej nazwie. "
"Przypisanie do właściwości umożliwia zamianę pomiędzy różnymi strategiami "
"obsługi błędów w czasie życia przedmiotu :class:`StreamReader`."

msgid "Decodes data from the stream and returns the resulting object."
msgstr "Dekoduje dane ze strumienia i zwraca wynikły przedmiot."

msgid "*chars* indicates the number of characters to read from the stream. :func:`read` will never return more than *chars* characters, but it might return less, if there are not enough characters available."
msgstr ""
"*chars* wskazuje liczbę znaków do wczytania ze strumienia. :func:`read` "
"nigdy nie zwróci więcej znaków niż *chars*, ale może zwrócić mniej, jeśli "
"nie ma dość znaków dostępnych."

msgid "*size* indicates the approximate maximum number of bytes to read from the stream for decoding purposes. The decoder can modify this setting as appropriate. The default value -1 indicates to read and decode as much as possible.  *size* is intended to prevent having to decode huge files in one step."
msgstr ""
"*size* wskazuje przybliżoną maksymalną ilość bajtów wczytywanych ze "
"strumienia do celów dekodowania. Dekoder może zmienić to ustawienie jak "
"uważa za stosowne. Domyślna wartość -1 wskazuje wczytywanie i dekodowanie "
"tak dużo jak to tylko możliwe. *size* jest pomyślany aby zapobiec "
"konieczności dekodowania dużych plików w jednym kroku."

msgid "*firstline* indicates that it would be sufficient to only return the first line, if there are decoding errors on later lines."
msgstr ""
"*firstline* wskazuje, że to byłoby wystarczające zwrócić tylko pierwszą "
"linię, jeśli wystąpią błędy dekodowania w późniejszych liniach."

msgid "The method should use a greedy read strategy meaning that it should read as much data as is allowed within the definition of the encoding and the given size, e.g.  if optional encoding endings or state markers are available on the stream, these should be read too."
msgstr ""
"Ten sposób postępowania powinien użyć zachłannej strategii wczytywania w "
"znaczeniu że powinien wczytać tak dużo danych jak to jest dozwolone w "
"definicji kodowania i danym rozmiarze, np. jeśli opcjonalne zakończenia "
"kodowań lub znaczniki stanu są dostępne w strumieniu, wtedy te powinny być "
"także wczytane."

msgid "Read one line from the input stream and return the decoded data."
msgstr "Wczytaj jedną linię ze strumienia wejściowego i zwróć zdekodowane dane."

msgid "*size*, if given, is passed as size argument to the stream's :meth:`readline` method."
msgstr ""
"*size*, jeśli dany jest przykazywany jako parametr rozmiaru do sposobu "
"postępowania :meth:`readline` dla strumienia."

msgid "If *keepends* is false line-endings will be stripped from the lines returned."
msgstr ""
"Jeśli *keepends* jest fałszywe zakończenia linii będą zdjęte ze zwróconych "
"linii."

msgid "Read all lines available on the input stream and return them as a list of lines."
msgstr ""
"Wczytaj wszystkie linie dostępne w strumieniu wejściowym i zwróć je jako "
"listę linii."

msgid "Line-endings are implemented using the codec's decoder method and are included in the list entries if *keepends* is true."
msgstr ""
"Zakończenia-linii są wypełnione używając sposobu postępowania dekodera "
"należącego do kodeka i są zawarte w liście wpisów jeśli *keepends* jest "
"prawdziwe."

msgid "*sizehint*, if given, is passed as the *size* argument to the stream's :meth:`read` method."
msgstr ""
"*sizehint*, jeśli dany jest przekazywany jako parametr *size* dla sposobu "
"postępowania  :meth:`read` należącego do strumienia."

msgid "Resets the codec buffers used for keeping state."
msgstr "Resetuje przestrzenie wymiany kodeków używanych dla utrzymywania stanu."

msgid "Note that no stream repositioning should take place.  This method is primarily intended to be able to recover from decoding errors."
msgstr ""
"Zauważ że żadne powtórne pozycjonowanie strumienia nie powinno mieć miejsca. "
"Ten sposób postępowania jest przede wszystkim przeznaczony do umożliwienia "
"podniesienia się z błędów dekodowania."

msgid "In addition to the above methods, the :class:`StreamReader` must also inherit all other methods and attributes from the underlying stream."
msgstr ""
"W dodatku do powyższych sposobów postępowania, uogólnienie "
":class:`StreamReader` musi także dziedziczyć wszystkie inne sposoby "
"postępowania i właściwości z leżącego u podstaw strumienia."

msgid "The next two base classes are included for convenience. They are not needed by the codec registry, but may provide useful in practice."
msgstr ""
"Następne dwa uogólnienia podstawowe są załączone dla udogodnienia. Nie są "
"konieczne dla rejestru kodeków, ale mogą okazać się użyteczne w praktyce."

msgid "StreamReaderWriter Objects"
msgstr "Przedmioty StreamReaderWriter"

msgid "The :class:`StreamReaderWriter` allows wrapping streams which work in both read and write modes."
msgstr ""
"Uogólnienie :class:`StreamReaderWriter` pozwala opakowywać strumienie które "
"pracują w trybach zarówno odczytu jak i zapisu."

msgid "The design is such that one can use the factory functions returned by the :func:`lookup` function to construct the instance."
msgstr ""
"Plan pozwala na to by użyć zadania fabrykującego zwracanego przez zadanie "
":func:`lookup` aby skonstruować przykład."

msgid "Creates a :class:`StreamReaderWriter` instance. *stream* must be a file-like object. *Reader* and *Writer* must be factory functions or classes providing the :class:`StreamReader` and :class:`StreamWriter` interface resp. Error handling is done in the same way as defined for the stream readers and writers."
msgstr ""
"Tworzy przykład uogólnienia :class:`StreamReaderWriter`. *strumień* - z ang. "
"- *stream* musi być pliko-podobnym przedmiotem. *Czytnik* i *Pisak* - z "
"ang. - *Reader* i *Writer* muszą być zadaniami fabrykującymi lub "
"uogólnieniami dostarczającymi sprzęgi :class:`StreamReader` i "
":class:`StreamWriter` odpowiednio. Obsługa błędów jest wykonywana w ten sam "
"sposób jak określono dla czytnika i piszącego z/do strumienia."

msgid ":class:`StreamReaderWriter` instances define the combined interfaces of :class:`StreamReader` and :class:`StreamWriter` classes. They inherit all other methods and attributes from the underlying stream."
msgstr ""
"przykłady :class:`StreamReaderWriter` określają połączone sprzęgi uogólnień "
":class:`StreamReader` i :class:`StreamWriter`. One dziedziczą wszystkie "
"pozostałe sposoby postępowania i właściwości z leżącego u podstaw "
"strumienia."

msgid "StreamRecoder Objects"
msgstr "Przedmioty StreamRecoder"

msgid "The :class:`StreamRecoder` provide a frontend - backend view of encoding data which is sometimes useful when dealing with different encoding environments."
msgstr ""
"Uogólnienie :class:`StreamRecorder` dostarcza widok przedni i tylni "
"zakodowania danych który jest czasami użyteczny gdy mamy do czynienia z "
"różnymi środowiskami kodowania."

msgid "Creates a :class:`StreamRecoder` instance which implements a two-way conversion: *encode* and *decode* work on the frontend (the input to :meth:`read` and output of :meth:`write`) while *Reader* and *Writer* work on the backend (reading and writing to the stream)."
msgstr ""
"Tworzy przykład :class:`StreamRecoder` który wypełnia dwu-kierunkową "
"konwersję: *encode* i *decode* pracują na przednim końcu (wejściu do "
":meth:`read` i wyjściu ze sposobu postępowania :meth:`write`) podczas gdy "
"*Reader* i *Writer* pracują z tyłu (wczytując i zapisując z/do strumienia)."

msgid "You can use these objects to do transparent direct recodings from e.g. Latin-1 to UTF-8 and back."
msgstr ""
"Możesz używać tych przedmiotów aby wykonywać przezroczyste bezpośrednie "
"powtórne kodowania z np. Latin-1 do UTF-8 i z powrotem."

msgid "*stream* must be a file-like object."
msgstr "*stream* musi być pliko-podobnym przedmiotem."

msgid "*encode*, *decode* must adhere to the :class:`Codec` interface. *Reader*, *Writer* must be factory functions or classes providing objects of the :class:`StreamReader` and :class:`StreamWriter` interface respectively."
msgstr ""
"*encode*, *decode* musi stosować się do sprzęgu :class:`Codec`. *Reader* i "
"*Writer* muszą być zdaniami fabrykującymi lub uogólnieniami dostarczającymi "
"przedmiotów sprzęgów uogólnienia :class:`StreamReader` i "
":class:`StreamWriter` odpowiednio."

msgid "*encode* and *decode* are needed for the frontend translation, *Reader* and *Writer* for the backend translation."
msgstr ""
"*encode* i *decode* - z ang. - *koduj* i *dekoduj* są potrzebne dla "
"tłumaczenia przedniego, *Reader* i *Writer* dla tłumaczenia tylniego."

msgid "Error handling is done in the same way as defined for the stream readers and writers."
msgstr ""
"Obsługa błędów jest wykonywana w ten sam sposób jak określono dla czytników "
"i piszących do i ze strumienia."

msgid ":class:`StreamRecoder` instances define the combined interfaces of :class:`StreamReader` and :class:`StreamWriter` classes. They inherit all other methods and attributes from the underlying stream."
msgstr ""
"przykłady :class:`StreamRecoder` definiują połączone sprzęgi uogólnień "
":class:`StreamReader` i :class:`StreamWriter`. One dziedziczą wszystkie inne "
"sposoby postępowania i właściwości z leżącego u podstaw strumienia."

msgid "Encodings and Unicode"
msgstr "Kodowania i kod Unicode"

msgid "Strings are stored internally as sequences of codepoints (to be precise as :ctype:`Py_UNICODE` arrays). Depending on the way Python is compiled (either via :option:`--without-wide-unicode` or :option:`--with-wide-unicode`, with the former being the default) :ctype:`Py_UNICODE` is either a 16-bit or 32-bit data type. Once a string object is used outside of CPU and memory, CPU endianness and how these arrays are stored as bytes become an issue.  Transforming a string object into a sequence of bytes is called encoding and recreating the string object from the sequence of bytes is known as decoding.  There are many different methods for how this transformation can be done (these methods are also called encodings). The simplest method is to map the codepoints 0-255 to the bytes ``0x0``-``0xff``. This means that a string object that contains codepoints above ``U+00FF`` can't be encoded with this method (which is called ``'latin-1'`` or ``'iso-8859-1'``). :func:`str.encode` will raise a :exc:`UnicodeEncodeError` that looks like this: ``UnicodeEncodeError: 'latin-1' codec can't encode character '\\u1234' in position 3: ordinal not in range(256)``."
msgstr ""
"Ciągi są zachowywane wewnętrznie jako sekwencje punktów kodowych (dla "
"ścisłości jako tablice :ctype:`Py_UNICODE`). W zależności od sposobu w jaki "
"język pytonowski jest kompilowany (albo przez :option:`--without-wide-"
"unicode` lub :option:`--with-wide-unicode`, z tym pierwszym będącym "
"domyślnym) :ctype:`Py_UNICODE` jest albo 16-bitowym albo 32-bitowym typem "
"danych. Gdy ciąg znaków jest używany poza CPU i pamiecią, endianowość CPU i "
"to jak te tabele są zachowywane jako bajty zaczyna być problemem. "
"Transformowanie przedmiotu ciągu znaków do sekwencji bajtów jest zwane "
"kodowaniem a odtwarzanie przedmiotu ciągu znaków z sekwencji bajtów jest "
"znane jako dekodowanie. Istnieje wiele różnych metod na to jak ta "
"transformacja może być dokonywana (te sposoby postępowania są także zwane "
"kodowaniami) Najprostszym sposobem postępowania jest mapowanie punktów kodu "
"0-255 na bajty ``0x0`` - ``0xff``. To oznacza, że przedmiot ciągu znaków "
"który zawiera punkty kodowe powyżej ``U+00FF`` nie może być zakodowany tą "
"metodą (która znana jest pod nazwą ``'latin-1'`` lub ``'iso-8859-1'``). "
":func:`str.encode` będzie zgłaszało wyjątek :exc:`UnicodeEncodeError` który "
"wygląda następująco: ``UnicodeEncodeError: 'latin-1' codec can't encode "
"character '\\u1234' in position 3: ordinal not in range(256)``"

msgid "There's another group of encodings (the so called charmap encodings) that choose a different subset of all Unicode code points and how these codepoints are mapped to the bytes ``0x0``-``0xff``. To see how this is done simply open e.g. :file:`encodings/cp1252.py` (which is an encoding that is used primarily on Windows). There's a string constant with 256 characters that shows you which character is mapped to which byte value."
msgstr ""
"Istnieje inna grupa kodowań (tak zwanych kodowań mapy znaków) które wybrały "
"inny podzbiór wszystkich punktów kodowych Unicode i to jak te punkty kodowe "
"są mapowane na bajty ``0x0`` - ``0xff``. Aby zobaczyć jak to się robi po "
"prostu otwórz np. :file:`encodings/cp1252.py` (które jest kodowaniem, które "
"jest używane głównie na Windows). Istnieje stała ciągu znaków z 256 znakami "
"które pokazują ci, który znak jest przyporządkowany do której wartości "
"bajtu."

msgid "All of these encodings can only encode 256 of the 65536 (or 1114111) codepoints defined in Unicode. A simple and straightforward way that can store each Unicode code point, is to store each codepoint as two consecutive bytes. There are two possibilities: Store the bytes in big endian or in little endian order. These two encodings are called UTF-16-BE and UTF-16-LE respectively. Their disadvantage is that if e.g. you use UTF-16-BE on a little endian machine you will always have to swap bytes on encoding and decoding. UTF-16 avoids this problem: Bytes will always be in natural endianness. When these bytes are read by a CPU with a different endianness, then bytes have to be swapped though. To be able to detect the endianness of a UTF-16 byte sequence, there's the so called BOM (the \"Byte Order Mark\"). This is the Unicode character ``U+FEFF``. This character will be prepended to every UTF-16 byte sequence. The byte swapped version of this character (``0xFFFE``) is an illegal character that may not appear in a Unicode text. So when the first character in an UTF-16 byte sequence appears to be a ``U+FFFE`` the bytes have to be swapped on decoding. Unfortunately upto Unicode 4.0 the character ``U+FEFF`` had a second purpose as a ``ZERO WIDTH NO-BREAK SPACE``: A character that has no width and doesn't allow a word to be split. It can e.g. be used to give hints to a ligature algorithm. With Unicode 4.0 using ``U+FEFF`` as a ``ZERO WIDTH NO-BREAK SPACE`` has been deprecated (with ``U+2060`` (``WORD JOINER``) assuming this role). Nevertheless Unicode software still must be able to handle ``U+FEFF`` in both roles: As a BOM it's a device to determine the storage layout of the encoded bytes, and vanishes once the byte sequence has been decoded into a string; as a ``ZERO WIDTH NO-BREAK SPACE`` it's a normal character that will be decoded like any other."
msgstr ""
"Wszystkie te kodowania mogą zakodować tylko 256 z 65536 (lub 1114111) "
"punktów kodowych zdefiniowanych w Unikodzie. Prosta i bezpośrednia droga, "
"która może zachować każdy punkt kodowy Unicode, polega na tym aby zachować "
"każdy punkt kodowy jak dwa następujące po sobie bajty. Istnieją dwie "
"możliwości: Zachować bajty w porządku dużego endiana lub małego endiana. Te "
"dwa kodowania są zwane UTF-16-BE i UTF-16-LE odpowiednio. Ich wadą jest to "
"że jeżeli np. użyjesz UTF-16-BE na maszynie z małym endianem będziesz zawsze "
"musiał zamieniać bajty przy kodowaniu i dekodowaniu. UTF-16 omija ten "
"problem: Bajty zawsze będą w naturalnej endianności. Gdy te bajty są "
"wczytane przez CPU z inną endiannością, wtedy bajty muszą jednak być "
"zamienione miejscami. Aby móc wykryć endianność sekwencji bajtów UTF-16, "
"istnieje tak zwany BOM(\"Byte Order Mark\" - z ang. - znak porządku bajtów). "
"To jest znak Unicode ``U+FEFF``. Ten znak doczepiony z przodu do każdej "
"sekwencji UTF-16. Wersja z zamienionymi bajtami tego znaku (``0xFFFE``) jest "
"nielegalnym znakiem który nie może pojawić się w tekście Unicode. Więc gdy "
"pierwszy znak w sekwencji UTF-16 okaże się być ``U+FFFE`` bajty muszą być "
"zamienione podczas dekodowania. Niestety aż do Unicode 4.0 znak ``U+FEFF`` "
"miał drugi sens istnienia jako ``ZEROWEJ DŁUGOŚCI NIEŁAMANA SPACJA``: Znak "
"który nie ma długości i nie pozwala słowom na rozdzielenie. Może np. być "
"używany aby dać podpowiedzi dla algorytmu ligaturowego. Wraz z Unicode-m w "
"wersji 4.0 użycie ``U+FEFF`` jako ``ZEROWEJ DŁUGOŚCI NIEŁAMANA SPACJA`` "
"stało się przestarzałe (z ``U+2060`` (``ŁĄCZNIKIEM SŁÓW``) przejmującym jego "
"rolę). Mimo to, oprogramowanie Unicode wciąż musi być w stanie obsłużyć "
"``U+FEFF`` w obu znaczeniach: Jako BOM jest to narzędzie do określania "
"układu przechowywania dla zakodowanych bajtów, i znika gdy sekwencja bajtów "
"zostanie zdekodowana w ciąg znaków; jako ``ZEROWEJ DŁUGOŚCI NIEŁAMANA SPACJA "
"jest to normalny znak który będzie dekodowany jak każdy inny."

msgid "There's another encoding that is able to encoding the full range of Unicode characters: UTF-8. UTF-8 is an 8-bit encoding, which means there are no issues with byte order in UTF-8. Each byte in a UTF-8 byte sequence consists of two parts: Marker bits (the most significant bits) and payload bits. The marker bits are a sequence of zero to six 1 bits followed by a 0 bit. Unicode characters are encoded like this (with x being payload bits, which when concatenated give the Unicode character):"
msgstr ""
"Istnieje inne kodowanie które jest w stanie zakodować pełen zakres znaków "
"Unicode: UTF-8. UTF-8 jest kodowaniem 8-bitowym co oznacza że nie ma "
"problemów z kolejnością bajtów w UTF-8. Każdy bajt w sekwencji bajtów UTF-8 "
"składa się z dwóch części: Bitów znacznika (najbardziej znaczące bity) i "
"bity ładowności. Bity znacznika są sekwencją od zera do sześciu bitów 1 po "
"których następuje bit 0. Znaki Unicode-u są zakodowane tak, jak (z x będącym "
"bitami ładowności które gdy sklejone dają znak Unicode):"

msgid "Range"
msgstr "Zakres"

msgid "Encoding"
msgstr "Kodowanie"

msgid "``U-00000000`` ... ``U-0000007F``"
msgstr "``U-00000000`` ... ``U-0000007F``"

msgid "0xxxxxxx"
msgstr "0xxxxxxx"

msgid "``U-00000080`` ... ``U-000007FF``"
msgstr "``U-00000080`` ... ``U-000007FF``"

msgid "110xxxxx 10xxxxxx"
msgstr "110xxxxx 10xxxxxx"

msgid "``U-00000800`` ... ``U-0000FFFF``"
msgstr "``U-00000800`` ... ``U-0000FFFF``"

msgid "1110xxxx 10xxxxxx 10xxxxxx"
msgstr "1110xxxx 10xxxxxx 10xxxxxx"

msgid "``U-00010000`` ... ``U-001FFFFF``"
msgstr "``U-00010000`` ... ``U-001FFFFF``"

msgid "11110xxx 10xxxxxx 10xxxxxx 10xxxxxx"
msgstr "11110xxx 10xxxxxx 10xxxxxx 10xxxxxx"

msgid "``U-00200000`` ... ``U-03FFFFFF``"
msgstr "``U-00200000`` ... ``U-03FFFFFF``"

msgid "111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx"
msgstr "111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx"

msgid "``U-04000000`` ... ``U-7FFFFFFF``"
msgstr "``U-04000000`` ... ``U-7FFFFFFF``"

msgid "1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx"
msgstr "1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx"

msgid "The least significant bit of the Unicode character is the rightmost x bit."
msgstr ""
"Najmniej ważny bit znaku Unicode jest najbardziej wysuniętym na prawo bitem "
"x."

msgid "As UTF-8 is an 8-bit encoding no BOM is required and any ``U+FEFF`` character in the decoded string (even if it's the first character) is treated as a ``ZERO WIDTH NO-BREAK SPACE``."
msgstr ""
"Jako że UTF-8 jest 8-bitowym kodowaniem żadne BOM nie jest wymagane i każdy "
"znak ``U+FEFF`` w zdekodowanym ciągu znaków (nawet gdy jest to pierwszy "
"znak) jest traktowany jako ``ZEROWEJ DŁUGOŚCI NIEŁAMANA SPACJA``."

msgid "Without external information it's impossible to reliably determine which encoding was used for encoding a string. Each charmap encoding can decode any random byte sequence. However that's not possible with UTF-8, as UTF-8 byte sequences have a structure that doesn't allow arbitrary byte sequences. To increase the reliability with which a UTF-8 encoding can be detected, Microsoft invented a variant of UTF-8 (that Python 2.5 calls ``\"utf-8-sig\"``) for its Notepad program: Before any of the Unicode characters is written to the file, a UTF-8 encoded BOM (which looks like this as a byte sequence: ``0xef``, ``0xbb``, ``0xbf``) is written. As it's rather improbable that any charmap encoded file starts with these byte values (which would e.g. map to"
msgstr ""
"Bez zewnętrznej informacji nie możliwe jest określenie które kodowanie "
"zostało użyte dla zakodowania ciągu znaków. Każde kodowanie mapy znaków może "
"dekodować dowolną przypadkową sekwencję bajtów. Jednakże to nie jest "
"możliwe z UTF-8, jako że sekwencje bajtów UTF-8 mają strukturę która nie "
"pozwala na dowolną kolejność bajtów. Aby zwiększyć wiarygodność z którą "
"kodowanie UTF-8 może być wykryte, Microsoft stworzył wartiant UTF-8 (które "
"Pyton 2.5 nazywa ``\"utf-8-sig\"``) dla swojego programu notatnika: Zanim "
"jakiekolwiek znaki unikodu są zapisywane do pliku Zakodowany w UTF-8 BOM "
"(który wygląda następująco jako sekwencja bajtów: ``0xef``, ``0xbb``, "
"``0xbf``) jest zapisywany. Jako że jest raczej mało prawdopodobne że dowolny "
"zakodowany mapą znaków plik zaczyna się od tych wartości bajtów (które "
"byłyby mapowały na przykład do:"

msgid "LATIN SMALL LETTER I WITH DIAERESIS"
msgstr "ŁACIŃSKA MAŁA LITERA I Z DIAEREZĄ"

msgid "RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK"
msgstr "W PRAWO-SKIEROWANY PODWÓJNEGO KĄTA ZNAK CYTATU"

msgid "INVERTED QUESTION MARK"
msgstr "ODWRÓCONY ZNAK ZAPYTANIA"

msgid "in iso-8859-1), this increases the probability that a utf-8-sig encoding can be correctly guessed from the byte sequence. So here the BOM is not used to be able to determine the byte order used for generating the byte sequence, but as a signature that helps in guessing the encoding. On encoding the utf-8-sig codec will write ``0xef``, ``0xbb``, ``0xbf`` as the first three bytes to the file. On decoding utf-8-sig will skip those three bytes if they appear as the first three bytes in the file."
msgstr ""
"w iso-8859-1), to zwiększa prawdopodobieństwo że kodowanie utf-8-sig może "
"być właściwie zgadnięte z sekwencji bajtów. Tutaj więc BOM nie jest użytwany "
"aby móc określić kolejność bajtów używanych do generowania sekwencji "
"bajtów, ale jako sygnatura która pomaga w zgadnięciu kodowania. Przy "
"kodowaniu utf-8-sig kodek napisze ``0xef``, ``0xbb``, ``0xbf`` jako pierwsze "
"trzy bajty pliku. Przy dekodowaniu utf-8-sig ominie te trzy bajty jeśli "
"pojawią się jako pierwsze trzy bajty w pliku."

msgid "Standard Encodings"
msgstr "Standardowe kodowania"

msgid "Python comes with a number of codecs built-in, either implemented as C functions or with dictionaries as mapping tables. The following table lists the codecs by name, together with a few common aliases, and the languages for which the encoding is likely used. Neither the list of aliases nor the list of languages is meant to be exhaustive. Notice that spelling alternatives that only differ in case or use a hyphen instead of an underscore are also valid aliases; therefore, e.g. ``'utf-8'`` is a valid alias for the ``'utf_8'`` codec."
msgstr ""
"Język pytonowski dostarczany jest z pewną liczbą kodeków wbudowanych, albo "
"wypełnianych jako zadania C albo ze słownikami jako tabelami mapowania. "
"Następująca tabela wypisuje kodeki po nazwie razem z kilkoma typowymi "
"synonimami, i językami dla których kodowanie jest prawdopodobnie używane. "
"Ani lista synonimów ani lista języków nie są przeznaczone aby były "
"wyczerpujące. Zauważ alternatywne pisownie które tylko różnią się wielkością "
"znaków lub używają myślnika zamiast podkreślenia są także poprawnymi "
"synonimami; dlatego też np. ``'utf-8'`` jest poprawnym synonimem dla kodeka "
"``'utf_8'``."

msgid "Many of the character sets support the same languages. They vary in individual characters (e.g. whether the EURO SIGN is supported or not), and in the assignment of characters to code positions. For the European languages in particular, the following variants typically exist:"
msgstr ""
"Wiele zbiorów znaków wspiera te same języki.  Różnią się pojedynczymi "
"znakami (np. czy ZNAK EURO jest wspierany czy nie), i przypisanie znaków do "
"pozycji kodów. Dla języków europejskich w szczególności, następujące "
"warianty typowo istnieją:"

msgid "an ISO 8859 codeset"
msgstr "zestaw kodów ISO 8859"

msgid "a Microsoft Windows code page, which is typically derived from a 8859 codeset, but replaces control characters with additional graphic characters"
msgstr ""
"Strona kodowa Microsoft Windows która jest typowo odziedziczona po zestawie "
"kodów 8859, ale zamienia znaki kierunków na dodatkowe znaki graficzne"

msgid "an IBM EBCDIC code page"
msgstr "Strona kodowa IBM EBCDIC"

msgid "an IBM PC code page, which is ASCII compatible"
msgstr "Strona kodowa IBM PC, która jest zgodna z ASCII"

msgid "Aliases"
msgstr "Synonimy"

msgid "Languages"
msgstr "Języki"

msgid "ascii"
msgstr "ascii"

msgid "646, us-ascii"
msgstr "646, us-ascii"

msgid "English"
msgstr "Angielski"

msgid "big5"
msgstr "big5"

msgid "big5-tw, csbig5"
msgstr "big5-tw, csbig5"

msgid "Traditional Chinese"
msgstr "Tradycyjny Chiński"

msgid "big5hkscs"
msgstr "big5hkscs"

msgid "big5-hkscs, hkscs"
msgstr "big5-hkscs, hkscs"

msgid "cp037"
msgstr "cp037"

msgid "IBM037, IBM039"
msgstr "IBM037, IBM039"

msgid "cp424"
msgstr "cp424"

msgid "EBCDIC-CP-HE, IBM424"
msgstr "EBCDIC-CP-HE, IBM424"

msgid "Hebrew"
msgstr "Hebrajski"

msgid "cp437"
msgstr "cp437"

msgid "437, IBM437"
msgstr "437, IBM437"

msgid "cp500"
msgstr "cp500"

msgid "EBCDIC-CP-BE, EBCDIC-CP-CH, IBM500"
msgstr "EBCDIC-CP-BE, EBCDIC-CP-CH, IBM500"

msgid "Western Europe"
msgstr "Zachodnio Europejski"

msgid "cp720"
msgstr "cp720"

msgid "Arabic"
msgstr "Arabski"

msgid "cp737"
msgstr "cp737"

msgid "Greek"
msgstr "Grecki"

msgid "cp775"
msgstr "cp775"

msgid "IBM775"
msgstr "IBM775"

msgid "Baltic languages"
msgstr "Języki bałtyckie"

msgid "cp850"
msgstr "cp850"

msgid "850, IBM850"
msgstr "850, IBM850"

msgid "cp852"
msgstr "cp852"

msgid "852, IBM852"
msgstr "852, IBM852"

msgid "Central and Eastern Europe"
msgstr "Europa centralna i wschodnia"

msgid "cp855"
msgstr "cp855"

msgid "855, IBM855"
msgstr "855, IBM855"

msgid "Bulgarian, Byelorussian, Macedonian, Russian, Serbian"
msgstr "Bułgarski, Białoruski, Macedoński, Rosyjski i Serbski."

msgid "cp856"
msgstr "cp856"

msgid "cp857"
msgstr "cp857"

msgid "857, IBM857"
msgstr "857, IBM857"

msgid "Turkish"
msgstr "Turecki"

msgid "cp858"
msgstr "cp858"

msgid "858, IBM858"
msgstr "858, IBM858"

msgid "cp860"
msgstr "cp860"

msgid "860, IBM860"
msgstr "860, IBM860"

msgid "Portuguese"
msgstr "Portugalski"

msgid "cp861"
msgstr "cp861"

msgid "861, CP-IS, IBM861"
msgstr "861, CP-IS, IBM861"

msgid "Icelandic"
msgstr "Islandzki"

msgid "cp862"
msgstr "cp862"

msgid "862, IBM862"
msgstr "862, IBM862"

msgid "cp863"
msgstr "cp863"

msgid "863, IBM863"
msgstr "863, IBM863"

msgid "Canadian"
msgstr "Kanadyjski"

msgid "cp864"
msgstr "cp864"

msgid "IBM864"
msgstr "IBM864"

msgid "cp865"
msgstr "cp865"

msgid "865, IBM865"
msgstr "865, IBM865"

msgid "Danish, Norwegian"
msgstr "Duński, Norweski"

msgid "cp866"
msgstr "cp866"

msgid "866, IBM866"
msgstr "866, IBM866"

msgid "Russian"
msgstr "Rosyjski"

msgid "cp869"
msgstr "cp869"

msgid "869, CP-GR, IBM869"
msgstr "869, CP-GR, IBM869"

msgid "cp874"
msgstr "cp874"

msgid "Thai"
msgstr "Tajski"

msgid "cp875"
msgstr "cp875"

msgid "cp932"
msgstr "cp932"

msgid "932, ms932, mskanji, ms-kanji"
msgstr "932, ms932, mskanji, ms-kanji"

msgid "Japanese"
msgstr "Japoński"

msgid "cp949"
msgstr "cp949"

msgid "949, ms949, uhc"
msgstr "949, ms949, uhc"

msgid "Korean"
msgstr "Koreański"

msgid "cp950"
msgstr "cp950"

msgid "950, ms950"
msgstr "950, ms950"

msgid "cp1006"
msgstr "cp1006"

msgid "Urdu"
msgstr "Urdu"

msgid "cp1026"
msgstr "cp1026"

msgid "ibm1026"
msgstr "ibm1026"

msgid "cp1140"
msgstr "cp1140"

msgid "ibm1140"
msgstr "ibm1140"

msgid "cp1250"
msgstr "cp1250"

msgid "windows-1250"
msgstr "windows-1250"

msgid "cp1251"
msgstr "cp1251"

msgid "windows-1251"
msgstr "windows-1251"

msgid "cp1252"
msgstr "cp1252"

msgid "windows-1252"
msgstr "windows-1252"

msgid "cp1253"
msgstr "cp1253"

msgid "windows-1253"
msgstr "windows-1253"

msgid "cp1254"
msgstr "cp1254"

msgid "windows-1254"
msgstr "windows-1254"

msgid "cp1255"
msgstr "cp1255"

msgid "windows-1255"
msgstr "windows-1255"

msgid "cp1256"
msgstr "cp1256"

msgid "windows-1256"
msgstr "windows-1256"

msgid "cp1257"
msgstr "cp1257"

msgid "windows-1257"
msgstr "windows-1257"

msgid "cp1258"
msgstr "cp1258"

msgid "windows-1258"
msgstr "windows-1258"

msgid "Vietnamese"
msgstr "Wietnamski"

msgid "euc_jp"
msgstr "euc_jp"

msgid "eucjp, ujis, u-jis"
msgstr "eucjp, ujis, u-jis"

msgid "euc_jis_2004"
msgstr "euc_jis_2004"

msgid "jisx0213, eucjis2004"
msgstr "jisx0213, eucjis2004"

msgid "euc_jisx0213"
msgstr "euc_jisx0213"

msgid "eucjisx0213"
msgstr "eucjisx0213"

msgid "euc_kr"
msgstr "euc_kr"

msgid "euckr, korean, ksc5601, ks_c-5601, ks_c-5601-1987, ksx1001, ks_x-1001"
msgstr ""
"euckr, koreański, ksc5601, ks_c-5601, ks_c-5601-1987, ksx1001, ks_x-1001"

msgid "gb2312"
msgstr "gb2312"

msgid "chinese, csiso58gb231280, euc- cn, euccn, eucgb2312-cn, gb2312-1980, gb2312-80, iso- ir-58"
msgstr ""
"chiński, csiso58gb231280, euc- cn, euccn, eucgb2312-cn, gb2312-1980, "
"gb2312-80, iso- ir-58"

msgid "Simplified Chinese"
msgstr "Uproszczony Chiński"

msgid "gbk"
msgstr "gbk"

msgid "936, cp936, ms936"
msgstr "936, cp936, ms936"

msgid "Unified Chinese"
msgstr "Zunifikowany Chiński"

msgid "gb18030"
msgstr "gb18030"

msgid "gb18030-2000"
msgstr "gb18030-2000"

msgid "hz"
msgstr "hz"

msgid "hzgb, hz-gb, hz-gb-2312"
msgstr "hzgb, hz-gb, hz-gb-2312"

msgid "iso2022_jp"
msgstr "iso2022_jp"

msgid "csiso2022jp, iso2022jp, iso-2022-jp"
msgstr "csiso2022jp, iso2022jp, iso-2022-jp"

msgid "iso2022_jp_1"
msgstr "iso2022_jp_1"

msgid "iso2022jp-1, iso-2022-jp-1"
msgstr "iso2022jp-1, iso-2022-jp-1"

msgid "iso2022_jp_2"
msgstr "iso2022_jp_2"

msgid "iso2022jp-2, iso-2022-jp-2"
msgstr "iso2022jp-2, iso-2022-jp-2"

msgid "Japanese, Korean, Simplified Chinese, Western Europe, Greek"
msgstr "Japoński, Koreański, Uproszczony Chiński, Zachodnio-Europejski, Grecki"

msgid "iso2022_jp_2004"
msgstr "iso2022_jp_2004"

msgid "iso2022jp-2004, iso-2022-jp-2004"
msgstr "iso2022jp-2004, iso-2022-jp-2004"

msgid "iso2022_jp_3"
msgstr "iso2022_jp_3"

msgid "iso2022jp-3, iso-2022-jp-3"
msgstr "iso2022jp-3, iso-2022-jp-3"

msgid "iso2022_jp_ext"
msgstr "iso2022_jp_ext"

msgid "iso2022jp-ext, iso-2022-jp-ext"
msgstr "iso2022jp-ext, iso-2022-jp-ext"

msgid "iso2022_kr"
msgstr "iso2022_kr"

msgid "csiso2022kr, iso2022kr, iso-2022-kr"
msgstr "csiso2022kr, iso2022kr, iso-2022-kr"

msgid "latin_1"
msgstr "latin_1"

msgid "iso-8859-1, iso8859-1, 8859, cp819, latin, latin1, L1"
msgstr "iso-8859-1, iso8859-1, 8859, cp819, łacina, latin1, L1"

msgid "West Europe"
msgstr "Zachodnio europejski"

msgid "iso8859_2"
msgstr "iso8859_2"

msgid "iso-8859-2, latin2, L2"
msgstr "iso-8859-2, latin2, L2"

msgid "iso8859_3"
msgstr "iso8859_3"

msgid "iso-8859-3, latin3, L3"
msgstr "iso-8859-3, latin3, L3"

msgid "Esperanto, Maltese"
msgstr "Esperanto, Maltański"

msgid "iso8859_4"
msgstr "iso8859_4"

msgid "iso-8859-4, latin4, L4"
msgstr "iso-8859-4, latin4, L4"

msgid "iso8859_5"
msgstr "iso8859_5"

msgid "iso-8859-5, cyrillic"
msgstr "iso-8859-5, cyrylica"

msgid "iso8859_6"
msgstr "iso8859_6"

msgid "iso-8859-6, arabic"
msgstr "iso-8859-6, arabski"

msgid "iso8859_7"
msgstr "iso8859_7"

msgid "iso-8859-7, greek, greek8"
msgstr "iso-8859-7, grecki, greek8"

msgid "iso8859_8"
msgstr "iso8859_8"

msgid "iso-8859-8, hebrew"
msgstr "iso-8859-8, hebrajski"

msgid "iso8859_9"
msgstr "iso8859_9"

msgid "iso-8859-9, latin5, L5"
msgstr "iso-8859-9, latin5, L5"

msgid "iso8859_10"
msgstr "iso8859_10"

msgid "iso-8859-10, latin6, L6"
msgstr "iso-8859-10, latin6, L6"

msgid "Nordic languages"
msgstr "Języki nordyckie"

msgid "iso8859_13"
msgstr "iso8859_13"

msgid "iso-8859-13, latin7, L7"
msgstr "iso-8859-13, latin7, L7"

msgid "iso8859_14"
msgstr "iso8859_14"

msgid "iso-8859-14, latin8, L8"
msgstr "iso-8859-14, latin8, L8"

msgid "Celtic languages"
msgstr "Języki Celtyckie"

msgid "iso8859_15"
msgstr "iso8859_15"

msgid "iso-8859-15, latin9, L9"
msgstr "iso-8859-15, latin9, L9"

msgid "iso8859_16"
msgstr "iso8859_16"

msgid "iso-8859-16, latin10, L10"
msgstr "iso-8859-16, latin10, L10"

msgid "South-Eastern Europe"
msgstr "Południowo-Wschodnia Europa"

msgid "johab"
msgstr "johab"

msgid "cp1361, ms1361"
msgstr "cp1361, ms1361"

msgid "koi8_r"
msgstr "koi8_r"

msgid "koi8_u"
msgstr "koi8_u"

msgid "Ukrainian"
msgstr "Ukraiński"

msgid "mac_cyrillic"
msgstr "mac_cyrillic"

msgid "maccyrillic"
msgstr "maccyrillic"

msgid "mac_greek"
msgstr "mac_greek"

msgid "macgreek"
msgstr "macgreek"

msgid "mac_iceland"
msgstr "mac_iceland"

msgid "maciceland"
msgstr "maciceland"

msgid "mac_latin2"
msgstr "mac_latin2"

msgid "maclatin2, maccentraleurope"
msgstr "maclatin2, maccentraleurope"

msgid "mac_roman"
msgstr "mac_roman"

msgid "macroman"
msgstr "macroman"

msgid "mac_turkish"
msgstr "mac_turkish"

msgid "macturkish"
msgstr "macturkish"

msgid "ptcp154"
msgstr "ptcp154"

msgid "csptcp154, pt154, cp154, cyrillic-asian"
msgstr "csptcp154, pt154, cp154, cyrillic-asian"

msgid "Kazakh"
msgstr "Kazachski"

msgid "shift_jis"
msgstr "shift_jis"

msgid "csshiftjis, shiftjis, sjis, s_jis"
msgstr "csshiftjis, shiftjis, sjis, s_jis"

msgid "shift_jis_2004"
msgstr "shift_jis_2004"

msgid "shiftjis2004, sjis_2004, sjis2004"
msgstr "shiftjis2004, sjis_2004, sjis2004"

msgid "shift_jisx0213"
msgstr "shift_jisx0213"

msgid "shiftjisx0213, sjisx0213, s_jisx0213"
msgstr "shiftjisx0213, sjisx0213, s_jisx0213"

msgid "utf_32"
msgstr "utf_32"

msgid "U32, utf32"
msgstr "U32, utf32"

msgid "all languages"
msgstr "wszystkie języki"

msgid "utf_32_be"
msgstr "utf_32_be"

msgid "UTF-32BE"
msgstr "UTF-32BE"

msgid "utf_32_le"
msgstr "utf_32_le"

msgid "UTF-32LE"
msgstr "UTF-32LE"

msgid "utf_16"
msgstr "utf_16"

msgid "U16, utf16"
msgstr "U16, utf16"

msgid "utf_16_be"
msgstr "utf_16_be"

msgid "UTF-16BE"
msgstr "UTF-16BE"

msgid "all languages (BMP only)"
msgstr "wszystkie języki (tylko BMP)"

msgid "utf_16_le"
msgstr "utf_16_le"

msgid "UTF-16LE"
msgstr "UTF-16LE"

msgid "utf_7"
msgstr "utf_7"

msgid "U7, unicode-1-1-utf-7"
msgstr "U7, unicode-1-1-utf-7"

msgid "utf_8"
msgstr "utf_8"

msgid "U8, UTF, utf8"
msgstr "U8, UTF, utf8"

msgid "utf_8_sig"
msgstr "utf_8_sig"

msgid "Purpose"
msgstr "Cel"

msgid "idna"
msgstr "idna"

msgid "Implements :rfc:`3490`, see also :mod:`encodings.idna`"
msgstr "Wypełnia :rfc:`3490`, zobacz także :mod:`encodings.idna`"

msgid "mbcs"
msgstr "mbcs"

msgid "dbcs"
msgstr "dbcs"

msgid "Windows only: Encode operand according to the ANSI codepage (CP_ACP)"
msgstr "Tylko Windows: Zakoduj operand zgodnie ze stroną kodową ANSI (CP_ACP)"

msgid "palmos"
msgstr "palmos"

msgid "Encoding of PalmOS 3.5"
msgstr "Kodowanie PalmOS 3.5"

msgid "punycode"
msgstr "punycode"

msgid "Implements :rfc:`3492`"
msgstr "Wypełnia :rfc:`3492`"

msgid "raw_unicode_escape"
msgstr "surowe_ucieczkowe_unicode - z ang. - raw_unicode_escape"

msgid "Produce a string that is suitable as raw Unicode literal in Python source code"
msgstr ""
"Wytwórz ciąg znaków który jest odpowiedni jako surowy literał Unicode w "
"kodzie źródłowym języka pytonowskiego"

msgid "undefined"
msgstr "nie zdefiniowane"

msgid "Raise an exception for all conversions. Can be used as the system encoding if no automatic coercion between byte and Unicode strings is desired."
msgstr ""
"Zgłoś wyjątek dla wszystkich zamian. Może być używane jako kodowanie systemu "
"jeśli nie jest oczekiwane żadne automatyczne przymuszanie pomiędzy bajtem a "
"ciągiem znaków Unicode."

msgid "unicode_escape"
msgstr "unicode_escape - ucieczkowe_unicode"

msgid "Produce a string that is suitable as Unicode literal in Python source code"
msgstr ""
"Utwórz ciąg znaków który jest odpowiedni jako literał Unicode w kodzie "
"źródłowym języka pytonowskiego."

msgid "unicode_internal"
msgstr "wewnętrzny_unicode - z ang. - unicode_internal"

msgid "Return the internal representation of the operand"
msgstr "Zwróć wewnętrzną reprezentację operandu"

msgid ":mod:`encodings.idna` --- Internationalized Domain Names in Applications"
msgstr ":mod:`encodings.idna` --- Umiędzynarodowione nazwy domen w aplikacjach"

msgid "This module implements :rfc:`3490` (Internationalized Domain Names in Applications) and :rfc:`3492` (Nameprep: A Stringprep Profile for Internationalized Domain Names (IDN)). It builds upon the ``punycode`` encoding and :mod:`stringprep`."
msgstr ""
"Ten moduł wypełnia :rfc:`3490` (umiędzynarodowione nazwy domen w "
"aplikacjach) i :rfc:`3492` (Nameprep: Profil Stringprep dla "
"umiędzynarodowionych nazw domen (IDN - internationalized Domain Names)). "
"Buduje nad kodowaniem ``punycode`` i :mod:`stringprep`."

msgid "These RFCs together define a protocol to support non-ASCII characters in domain names. A domain name containing non-ASCII characters (such as ``www.Alliancefrançaise.nu``) is converted into an ASCII-compatible encoding (ACE, such as ``www.xn--alliancefranaise-npb.nu``). The ACE form of the domain name is then used in all places where arbitrary characters are not allowed by the protocol, such as DNS queries, HTTP :mailheader:`Host` fields, and so on. This conversion is carried out in the application; if possible invisible to the user: The application should transparently convert Unicode domain labels to IDNA on the wire, and convert back ACE labels to Unicode before presenting them to the user."
msgstr ""
"Te RFC razem definiują protokół aby wspierać znaki nie-ASCII w nazwach "
"domen. Nazwy domen zawierające znaki nie-ASCII (takie jak: "
"``www.Alliancefrançaise.nu``) jest konwertowane do kodowania zgodnego z "
"ASCII: (ACE, takiego jak ``www.xn--alliancefranaise-npb.nu``). Forma ACE "
"nazwy domeny jest wtedy używana we wszystkich miejscach gdzie dowolne znaki "
"nie są dozwolone przez protokół, takie jak zapytania DNS, pola "
":mailheader:`Host` HTTP, itd. Ta zamiana jest wykonywana w aplikacji; jeśli "
"możliwe niewidoczne dla użytkownika: Aplikacja powinna w przezroczysty "
"sposób zamieniać nazwy domen Unicode do IDNA na linii, i zamieniać wstecz "
"nazwy ACE do Unicode przed zaprezentowaniem ich do użytkownika."

msgid "Python supports this conversion in several ways: The ``idna`` codec allows to convert between Unicode and the ACE. Furthermore, the :mod:`socket` module transparently converts Unicode host names to ACE, so that applications need not be concerned about converting host names themselves when they pass them to the socket module. On top of that, modules that have host names as function parameters, such as :mod:`http.client` and :mod:`ftplib`, accept Unicode host names (:mod:`http.client` then also transparently sends an IDNA hostname in the :mailheader:`Host` field if it sends that field at all)."
msgstr ""
"Język pytonowski wspiera tą zamianę w na różne sposoby: kodek ``idna`` "
"pozwala konwertować pomiędzy Unicode i ACE. Dalej moduł :mod:`socket` "
"przezroczyście zamienia nazwy hosta Unicode na ACE, tak że aplikacje nie "
"muszą się martwić o zamianę nazw hosta własnoręcznie gdy przekazują je do "
"modułu gniazda. Na domiar tego, moduły które mają nazwy hosta jako parametry "
"zadań, takie jak :mod:`http.client` i :mod:`ftplib` akceptują nazwy hosta "
"Unicode (:mod:`http.client` wtedy także przezroczyście wysyłają nazwę hosta "
"IDNA w nagłówku :mailheader:`Host` jeśli wysyła to pole w ogóle)."

msgid "When receiving host names from the wire (such as in reverse name lookup), no automatic conversion to Unicode is performed: Applications wishing to present such host names to the user should decode them to Unicode."
msgstr ""
"Gdy otrzymuje się nazwy hosta z linii (tak, jak w odwróconym podglądzie "
"nazwy), żadna automatyczna konwersja Unicode nie jest wykonywana: Aplikacje "
"które chciałyby prezentować takie nazwy hosta do użytkownika powinny "
"dekodować je do Unikodu."

msgid "The module :mod:`encodings.idna` also implements the nameprep procedure, which performs certain normalizations on host names, to achieve case-insensitivity of international domain names, and to unify similar characters. The nameprep functions can be used directly if desired."
msgstr ""
"Moduł :mod:`encodings.idna` wypełnia także procedurę nameprep, która "
"wytwarza określone normalizacje na nazwach hosta, aby osiągnąć niewrażliwość "
"na wielkość liter umiędzynarodowionych nazw domen, i aby zunifikować "
"podobne znaki. Zadania nameprep  mogą być używane bezpośrednio jeśli jest "
"taka potrzeba."

msgid "Return the nameprepped version of *label*. The implementation currently assumes query strings, so ``AllowUnassigned`` is true."
msgstr ""
"Zwróć z przygotowaną nazwą wersję *fiszki*. To wypełnienie obecnie zajmuje "
"ciągi zapytań, więc ``AllowUnassigned`` jest prawdziwe."

msgid "Convert a label to ASCII, as specified in :rfc:`3490`. ``UseSTD3ASCIIRules`` is assumed to be false."
msgstr ""
"Zamień fiszkę na ASCII, jak określono w :rfc:`3490`. ``UseSTD3ASCIIRules`` "
"jest zakładane że będzie fałszywe."

msgid "Convert a label to Unicode, as specified in :rfc:`3490`."
msgstr "Zamień nazwę na Unicode, jak określono w :rfc:`3490`."

msgid ":mod:`encodings.mbcs` --- Windows ANSI codepage"
msgstr ":mod:`encodings.mbcs` --- strona kodowa Windows ANSI"

msgid "Encode operand according to the ANSI codepage (CP_ACP). This codec only supports ``'strict'`` and ``'replace'`` error handlers to encode, and ``'strict'`` and ``'ignore'`` error handlers to decode."
msgstr ""
"Zakoduj operand w zgodzie ze stroną kodową ANSI (CP_ACP). Ten kodek wspiera "
"tylko obsługę błędów ``'strict'`` i ``'replace'`` dla kodowania i obsługę "
"błędów ``'strict'`` i ``'ignore'`` dla dekodowania."

msgid "Availability: Windows only."
msgstr "Dostępność: tylko w Windows."

msgid ":mod:`encodings.utf_8_sig` --- UTF-8 codec with BOM signature"
msgstr ":mod:`encodings.utf_8_sig` --- kodek UTF-8 z sygnaturą BOM "

msgid "This module implements a variant of the UTF-8 codec: On encoding a UTF-8 encoded BOM will be prepended to the UTF-8 encoded bytes. For the stateful encoder this is only done once (on the first write to the byte stream).  For decoding an optional UTF-8 encoded BOM at the start of the data will be skipped."
msgstr ""
"Ten moduł wypełnia wariant kodeka UTF-8: Na kodowaniu UTF-8 zakodowany BOM "
"(Znacznik Porządku Bajtów) zostanie doklejony z przodu do zakodowanych "
"bajtów w UTF-8. Dla kodera pełnego stanu to jest wykonywane tylko raz "
"(podczas pierwszego zapisu do strumienia bajtów). Dla dekodowania "
"opcjonalnie zakodowany BOM na początku danych zostanie ominięty. "

msgid ":mod:`codeop` --- Compile Python code"
msgstr ":mod:`codeop` --- Kompiluje kod języka pytonowskiego."

msgid "The :mod:`codeop` module provides utilities upon which the Python read-eval-print loop can be emulated, as is done in the :mod:`code` module.  As a result, you probably don't want to use the module directly; if you want to include such a loop in your program you probably want to use the :mod:`code` module instead."
msgstr ""
"Moduł :mod:`codeop` dostarcza użyteczności na której pętla języka "
"pytonowskiego wczytaj-oblicz-wydrukuj może być emulowana, tak jak jest to "
"dokonywane w module :mod:`code`. Jako wynik prawdopodobnie nie będziesz "
"chciał używać tego modułu bezpośrednio; jeśli chcesz zawrzeć taką pętlę w "
"swoim programie pewnie będziesz chciał użyć modułu :mod:`code` zamiast tego."

msgid "There are two parts to this job:"
msgstr "Istnieją dwie części dotyczące tej pracy:"

msgid "Being able to tell if a line of input completes a Python  statement: in short, telling whether to print '``>>>``' or '``...``' next."
msgstr ""
"Bycie w stanie powiedzieć czy linia wejściowa uzupełnia wyrażenie języka "
"pytonowskiego: w skrócie powiedzenie czy wydrukować '``>>>``' czy '``...``' "
"w następnej kolejności."

msgid "Remembering which future statements the user has entered, so  subsequent input can be compiled with these in effect."
msgstr ""
"Zapamiętanie które przyszłe wyrażenia użytkownik wpisał, więc następne "
"wejście może być skompilowane z tym w efekcie."

msgid "The :mod:`codeop` module provides a way of doing each of these things, and a way of doing them both."
msgstr ""
"Moduł :mod:`codeop` dostarcza sposób robienia każdej z tych rzeczy i sposób "
"robienia ich obojga."

msgid "To do just the former:"
msgstr "Aby wykonać tylko to pierwsze:"

msgid "Tries to compile *source*, which should be a string of Python code and return a code object if *source* is valid Python code. In that case, the filename attribute of the code object will be *filename*, which defaults to ``'<input>'``. Returns ``None`` if *source* is *not* valid Python code, but is a prefix of valid Python code."
msgstr ""
"Próbuje skompilować *źródło*, które powinno być ciągiem znaków kodu języka "
"pytonowskiego i zwrócić przedmiot kodu jeśli *źródło* jest poprawnym kodem "
"języka pytonowskiego. W tym przypadku właściwość przedmiotu kodu *nazwą "
"pliku* która domyślnie równa jest ``'<input>'``. Zwraca ``None`` jeśli "
"*źródło* nie jest właściwym kodem języka pytonowskiego, ale jest "
"przedrostkiem właściwego kodu języka Pytonowskiego."

msgid "If there is a problem with *source*, an exception will be raised. :exc:`SyntaxError` is raised if there is invalid Python syntax, and :exc:`OverflowError` or :exc:`ValueError` if there is an invalid literal."
msgstr ""
"Jeśli istnieje problem ze *źródłem* wyjątek zostanie zgłoszony. "
":exc:`SyntaxError` jest zgłaszany jeśli istnieje nieprawidłowa składnia "
"języka pytonowskiego i :exc:`OverflowError` lub :exc:`ValueError` jeśli jest "
"nieprawidłowy literał."

msgid "The *symbol* argument determines whether *source* is compiled as a statement (``'single'``, the default) or as an :term:`expression` (``'eval'``).  Any other value will cause :exc:`ValueError` to  be raised."
msgstr ""
"Parametr *symbol* określa czy *źródło* jest kompilowane jako wyrażenie "
"(``'single'``, domyślnie) lub jako wyrażenie - z ang. - :term:`expression` "
"(``'eval'``). Jakakolwiek inna wartość spowoduje, że :exc:`ValueError`  "
"zostanie zgłoszony."

msgid "It is possible (but not likely) that the parser stops parsing with a successful outcome before reaching the end of the source; in this case, trailing symbols may be ignored instead of causing an error.  For example, a backslash followed by two newlines may be followed by arbitrary garbage. This will be fixed once the API for the parser is better."
msgstr ""
"Jest możliwe (ale mało prawdopodobne) że czytnik przestanie czytać wraz z "
"udanym wynikiem przed dotarciem do końca źródła; w takim przypadku, kończące "
"symbole mogą zostać zignorowane zamiast powodować błąd. Dla przykładu "
"skośnik, po którym następują dwa znaki nowego wiersza może poprzedzać "
"dowolne śmiecie. To zostanie naprawione gdy sprzęg programowania dla "
"czytnika zostanie ulepszony."

msgid "Instances of this class have :meth:`__call__` methods identical in signature to the built-in function :func:`compile`, but with the difference that if the instance compiles program text containing a :mod:`__future__` statement, the instance 'remembers' and compiles all subsequent program texts with the statement in force."
msgstr ""
"Przykłady tego uogólnienia mają sposób postępowania :meth:`__call__` "
"identyczny z sygnaturą do wbudowanego zadania :func:`compile`, ale z tą "
"różnicą, że jeśli przykład kompiluje tekst programu zawierający wyrażenia "
":mod:`__future__`, przykład 'zapamiętuje' i kompiluje wszystkie następujące "
"potem teksty programu z tym wyrażeniem w mocy."

msgid "Instances of this class have :meth:`__call__` methods identical in signature to :func:`compile_command`; the difference is that if the instance compiles program text containing a ``__future__`` statement, the instance 'remembers' and compiles all subsequent program texts with the statement in force."
msgstr ""
"Przykłady tego uogólnienia mają sposoby postępowania :meth:`__call__` "
"identyczne z sygnaturą dla :func:`compile_command`; Różnica polega na tym, "
"że jeśli przykład kompiluje tekst programu zawierający wyrażenie "
"``__future__``, przykład 'pamięta' i kompiluje wszystkie następujące później "
"teksty programu z wyrażeniem w mocy."

msgid ":mod:`collections` --- Container datatypes"
msgstr ":mod:`collections` --- typy danych kontenerów"

msgid "This module implements high-performance container datatypes.  Currently, there are four datatypes, :class:`Counter`, :class:`deque`, :class:`OrderedDict` and :class:`defaultdict`, and one datatype factory function, :func:`namedtuple`."
msgstr ""
"Ten moduł wypełnia wysokiej-wydajności typy danych kontenerów. Obecnie są "
"cztery typy danych. :class:`Counter`, :class:`deque`, :class:`OrderedDict` i "
":class:`defaultdict`, i jeden typ danych zadania fabrykującego, "
":func:`namedtuple`."

msgid "The specialized containers provided in this module provide alternatives to Python's general purpose built-in containers, :class:`dict`, :class:`list`, :class:`set`, and :class:`tuple`."
msgstr ""
"Specjalizowane kontenery dostarczane w tym module dostarczają alternatywy "
"dla kontenerów ogólnego zastosowania języka pytonowskiego, :class:`dict`, "
":class:`list`, :class:`set` i :class:`tuple`."

msgid "In addition to containers, the collections module provides some ABCs (abstract base classes) that can be used to test whether a class provides a particular interface, for example, whether it is hashable or a mapping."
msgstr ""
"W dodatku względem kontenerów, moduł kolekcji dostarcza pewnych ABCów "
"(abstrakcyjnych uogólnień podstawowych) które mogą być użyte do "
"przetestowania czy uogólnienie dostarcza konkretny sprzęg, dla przykładu, "
"czy jest to typ haszowalny czy mapowalny."

msgid "ABCs - abstract base classes"
msgstr "ABCe - abstrakcyjne uogólnienia podstawowe"

msgid "The collections module offers the following ABCs:"
msgstr "Moduł kolekcji oferuje następujące abstrakcyjne uogólnienia podstawowe:"

msgid "ABC"
msgstr "ABC"

msgid "Inherits"
msgstr "Dziedziczy"

msgid "Abstract Methods"
msgstr "Abstrakcyjne sposoby postępowania"

msgid "Mixin Methods"
msgstr "Domieszkowe sposoby postępowania"

msgid ":class:`Container`"
msgstr ":class:`Container` - kontener"

msgid "``__contains__``"
msgstr "``__contains__``"

msgid ":class:`Hashable`"
msgstr ":class:`Hashable`"

msgid "``__hash__``"
msgstr "``__hash__``"

msgid ":class:`Iterable`"
msgstr ":class:`Iterable`"

msgid "``__iter__``"
msgstr "``__iter__``"

msgid ":class:`Iterator`"
msgstr ":class:`Iterator`"

msgid "``__next__``"
msgstr "``__next__``"

msgid ":class:`Sized`"
msgstr ":class:`Sized`"

msgid "``__len__``"
msgstr "``__len__``"

msgid ":class:`Callable`"
msgstr ":class:`Callable`"

msgid "``__call__``"
msgstr "``__call__``"

msgid ":class:`Sequence`"
msgstr ":class:`Sequence`"

msgid ":class:`Sized`, :class:`Iterable`, :class:`Container`"
msgstr ":class:`Sized`, :class:`Iterable`, :class:`Container`"

msgid "``__getitem__``"
msgstr "``__getitem__``"

msgid "``__contains__``. ``__iter__``, ``__reversed__``. ``index``, and ``count``"
msgstr ""
"``__contains__``. ``__iter__``, ``__reversed__``. ``index``, i ``count``"

msgid ":class:`MutableSequence`"
msgstr ":class:`MutableSequence`"

msgid "``__setitem__`` ``__delitem__``, and ``insert``"
msgstr "``__setitem__`` ``__delitem__``, and ``insert``"

msgid "Inherited Sequence methods and ``append``, ``reverse``, ``extend``, ``pop``, ``remove``, and ``__iadd__``"
msgstr ""
"Odziedziczone sposoby postępowania sekwencji ``append``, ``reverse``, "
"``extend``, ``pop``, ``remove``, i ``__iadd__``"

msgid ":class:`Set`"
msgstr ":class:`Set`"

msgid "``__le__``, ``__lt__``, ``__eq__``, ``__ne__``, ``__gt__``, ``__ge__``, ``__and__``, ``__or__`` ``__sub__``, ``__xor__``, and ``isdisjoint``"
msgstr ""
"``__le__``, ``__lt__``, ``__eq__``, ``__ne__``, ``__gt__``, ``__ge__``, "
"``__and__``, ``__or__`` ``__sub__``, ``__xor__``, i ``isdisjoint``"

msgid ":class:`MutableSet`"
msgstr ":class:`MutableSet` - mutowalny zbiór"

msgid "``add`` and ``discard``"
msgstr "``dodaj`` i ``odrzuć`` - z ang. - ``add`` i ``discard``"

msgid "Inherited Set methods and ``clear``, ``pop``, ``remove``, ``__ior__``, ``__iand__``, ``__ixor__``, and ``__isub__``"
msgstr ""
"Odziedziczone sposoby postępowania Zbioru i ``clear``, ``pop``, ``remove``, "
"``__ior__``, ``__iand__``,  ``__ixor__``, i ``__isub__``"

msgid ":class:`Mapping`"
msgstr ":class:`Mapping` - z ang. - Mapowanie"

msgid "``__contains__``, ``keys``, ``items``, ``values``, ``get``, ``__eq__``, and ``__ne__``"
msgstr ""
"``__contains__``, ``keys``, ``items``, ``values``, ``get``, ``__eq__``, i "
"``__ne__``"

msgid ":class:`MutableMapping`"
msgstr ":class:`MutableMapping` - mutowalne mapowanie"

msgid "``__setitem__`` and ``__delitem__``"
msgstr "``__setitem__`` i ``__delitem__``"

msgid "Inherited Mapping methods and ``pop``, ``popitem``, ``clear``, ``update``, and ``setdefault``"
msgstr ""
"Odziedziczone sposoby postępowania Mapowania i ``pop``, ``popitem``, "
"``clear``, ``update``, i ``setdefault``"

msgid ":class:`MappingView`"
msgstr ":class:`MappingView` - Widok mapowania"

msgid ":class:`KeysView`"
msgstr ":class:`KeysView`"

msgid ":class:`MappingView`, :class:`Set`"
msgstr ":class:`MappingView`, :class:`Set`"

msgid "``__contains__``, ``__iter__``"
msgstr "``__contains__``, ``__iter__``"

msgid ":class:`ItemsView`"
msgstr ":class:`ItemsView`"

msgid ":class:`ValuesView`"
msgstr ":class:`ValuesView`"

msgid "These ABCs allow us to ask classes or instances if they provide particular functionality, for example::"
msgstr ""
"Te ABC-e - abstrakcyjne uogólnienia podstawowe pozwalają nam zapytać "
"uogólnienia lub ich przykłady czy dostarczają konkretnej funkcjonalności, na "
"przykład::"

msgid "size = None if isinstance(myvar, collections.Sized):     size = len(myvar)"
msgstr ""
"size = None if isinstance(myvar, collections.Sized):     size = len(myvar)"

msgid "Several of the ABCs are also useful as mixins that make it easier to develop classes supporting container APIs.  For example, to write a class supporting the full :class:`Set` API, it only necessary to supply the three underlying abstract methods: :meth:`__contains__`, :meth:`__iter__`, and :meth:`__len__`. The ABC supplies the remaining methods such as :meth:`__and__` and :meth:`isdisjoint` ::"
msgstr ""
"Kilka z ABC-ów są także użyteczne jako domieszki które ułatwiają rozwijanie "
"uogólnień wspierających sprzęgi programowania kontenerów (z ang. - APIs). "
"Dla przykładu aby zapisać uogólnienie wspierające w pełni sprzęg "
":class:`Set` - z ang. - zbioru, jest tylko konieczne dostarczenie trzech "
"leżących u podstaw abstrakcyjnych sposobów postępowania: "
":meth:`__contains__`, :meth:`__iter__`, i :meth:`__len__`. ABCe dostarczają "
"pozostałe metody takie jak :meth:`__and__` i :meth:`isdisjoint`::"

msgid "class ListBasedSet(collections.Set):      ''' Alternate set implementation favoring space over speed          and not requiring the set elements to be hashable. '''      def __init__(self, iterable):          self.elements = lst = []          for value in iterable:              if value not in lst:                  lst.append(value)      def __iter__(self):          return iter(self.elements)      def __contains__(self, value):          return value in self.elements      def __len__(self):          return len(self.elements)  s1 = ListBasedSet('abcdef') s2 = ListBasedSet('defghi') overlap = s1 & s2            # The __and__() method is supported automatically"
msgstr ""
"class ListBasedSet(collections.Set): ''' Alternatywne wypełnienie zbiorów "
"preferujące rozmiar ponad prędkością działania i nie wymagające od elementów "
"zbioru aby były hashowalne. ''' def __init__(self, iterable): self.elements "
"= lst = [] for value in iterable: if value not in lst: lst.append(value) "
"def __iter__(self): return iter(self.elements) def __contains__(self, "
"value): return value in self.ements def __len__(self): return "
"len(self.elements) s1 = ListBasedSet('abcdef') s2 = ListBasedSet('defghi') "
"overlap = s1 & s2 # Sposób postępowania __and__() jest wspierany "
"automatycznie"

msgid "Notes on using :class:`Set` and :class:`MutableSet` as a mixin:"
msgstr "Uwagi o używaniu :class:`Set` i :class:`MutableSet` jako domieszki:"

msgid "Since some set operations create new sets, the default mixin methods need a way to create new instances from an iterable. The class constructor is assumed to have a signature in the form ``ClassName(iterable)``. That assumption is factored-out to an internal classmethod called :meth:`_from_iterable` which calls ``cls(iterable)`` to produce a new set. If the :class:`Set` mixin is being used in a class with a different constructor signature, you will need to override :meth:`from_iterable` with a classmethod that can construct new instances from an iterable argument."
msgstr ""
"Od kiedy niektóre operacje zbiorów tworzą nowe zbiory, domyślne sposoby "
"postępowania domieszek potrzebują sposobu aby tworzyć nowe przykłady z "
"iterowalnego. Konstruktor uogólnienia jest przyjmowany że ma sygnaturę w "
"postaci ``ClassName(iterable)``. To założenie jest wyciągnięte na zewnątrz "
"do wewnętrznego sposobu postępowania uogólnienia zwanego  "
":meth:`_from_iterable` które wywołuje ``cls(iterable)`` aby wytworzyć nowy "
"zbiór. Jeśli domieszka uogólnienie zbioru :class:`Set` jest używana w "
"uogólnieniu z różną sygnaturą konstruktora, będziesz potrzebował przesłonić "
":meth:`from_iterable` za pomocą sposobu postępowania uogólnienia, który może "
"skonstruować nowe przykłady z iterowalnego parametru."

msgid "To override the comparisons (presumably for speed, as the semantics are fixed), redefine :meth:`__le__` and then the other operations will automatically follow suit."
msgstr ""
"Aby przesłonić porównania (zakładając dla prędkości, jako że składnia jest "
"poprawiona), ponownie zdefiniuj :meth:`__le__` i wtedy inne operacje "
"automatycznie postąpią za nią."

msgid "The :class:`Set` mixin provides a :meth:`_hash` method to compute a hash value for the set; however, :meth:`__hash__` is not defined because not all sets are hashable or immutable.  To add set hashabilty using mixins, inherit from both :meth:`Set` and :meth:`Hashable`, then define ``__hash__ = Set._hash``."
msgstr ""
"Domieszka :class:`Set` dostarcza sposób postępowania :meth:`_hash` aby "
"obliczyć wartość hash dla zbioru; jednakże :meth:`__hash__` nie jest "
"zdefiniowana ponieważ nie wszystkie zbiory są hashowalne lub niemutowalne. "
"Aby dodać hashowalność używając domieszek, odziedzicz z obydwu :meth:`Set` i "
":meth:`Hashable`, i zdefiniuj ``__hash__ = Set._hash``."

msgid "`OrderedSet recipe <http://code.activestate.com/recipes/576694/>`_ for an example built on :class:`MutableSet`."
msgstr ""
"`OrderedSet przepis <http://code.activestate.com/recipes/576694/>`_ dla "
"przykładu zbudowany na :class:`MutableSet`."

msgid "For more about ABCs, see the :mod:`abc` module and :pep:`3119`."
msgstr "Po więcej o ABC-ach, sięgnij do modułu :mod:`abc` i :pep:`3119`."

msgid ":class:`Counter` objects"
msgstr "przedmioty :class`Counter`"

msgid "A counter tool is provided to support convenient and rapid tallies. For example::"
msgstr ""
"narzędzie licznika jest dostarczone dla wsparcia wygodnych i szybkich "
"rejestrów. Dla przykładu::"

msgid ">>> # Tally occurrences of words in a list >>> cnt = Counter() >>> for word in ['red', 'blue', 'red', 'green', 'blue', 'blue']: ...     cnt[word] += 1 >>> cnt Counter({'blue': 3, 'red': 2, 'green': 1})  >>> # Find the ten most common words in Hamlet >>> import re >>> words = re.findall('\\w+', open('hamlet.txt').read().lower()) >>> Counter(words).most_common(10) [('the', 1143), ('and', 966), ('to', 762), ('of', 669), ('i', 631),  ('you', 554),  ('a', 546), ('my', 514), ('hamlet', 471), ('in', 451)]"
msgstr ""
">>> # Rejestr wystąpień słowa w liście >>> cnt = Counter() >>> for word in "
"['red', 'blue', 'red', 'green', 'blue', 'blue']: ...     cnt[word] += 1 >>> "
"cnt Counter({'blue': 3, 'red': 2, 'green': 1})  >>> # Znajdź dziesięć "
"najpopularniejszych słów w Hamlecie >>> import re >>> words = "
"re.findall('\\w+', open('hamlet.txt').read().lower()) >>> "
"Counter(words).most_common(10) [('the', 1143), ('and', 966), ('to', 762), "
"('of', 669), ('i', 631),  ('you', 554),  ('a', 546), ('my', 514), ('hamlet', "
"471), ('in', 451)]"

msgid "A :class:`Counter` is a :class:`dict` subclass for counting hashable objects. It is an unordered collection where elements are stored as dictionary keys and their counts are stored as dictionary values.  Counts are allowed to be any integer value including zero or negative counts.  The :class:`Counter` class is similar to bags or multisets in other languages."
msgstr ""
"Uogólnienie :class:`Counter` jest podrzędnym uogólnieniem uogólnienia "
":class:`dict` do zliczania przedmiotów hashowalnych. Jest to "
"nieuporządkowana kolekcja gdzie elementy są zachowane jako klucze słownika a "
"ich liczby powtórzeń są przechowywane jako wartości słownika. Zliczone "
"wartości mogą być wartościami całkowitymi zawierającymi zero i wartości "
"ujemne. Uogólnienie :class:`Counter` jest podobne do torebek lub "
"wielozbiorów w innych językach. "

msgid "Elements are counted from an *iterable* or initialized from another *mapping* (or counter):"
msgstr ""
"Elementy są zliczane z *iterowalnego* lub inicjowane z innego *mapowania* "
"(lub zliczania):"

msgid ">>> c = Counter()                           # a new, empty counter >>> c = Counter('gallahad')                 # a new counter from an iterable >>> c = Counter({'red': 4, 'blue': 2})      # a new counter from a mapping >>> c = Counter(cats=4, dogs=8)             # a new counter from keyword args"
msgstr ""
">>> c = Counter()                           # nowy, pusty licznik >>> c = "
"Counter('gallahad')                 # nowy licznik z iterowalnego >>> c = "
"Counter({'red': 4, 'blue': 2})      # nowy licznik z mapowania >>> c = "
"Counter(cats=4, dogs=8)             # nowy licznik z parametrów słów "
"kluczowych"

msgid "Counter objects have a dictionary interface except that they return a zero count for missing items instead of raising a :exc:`KeyError`:"
msgstr ""
"Przedmioty Licznika mają sprzęg słownika z wyjątkiem że mogą zwracać liczbę "
"zero dla brakujących elementów zamiast zgłaszania błędu :exc:`KeyError`:"

msgid ">>> c = Counter(['eggs', 'ham']) >>> c['bacon']                              # count of a missing element is zero 0"
msgstr ""
">>> c = Counter(['eggs', 'ham']) >>> c['bacon'] "
"                             # liczba dla brakującego elementu jest zero 0"

msgid "Setting a count to zero does not remove an element from a counter. Use ``del`` to remove it entirely:"
msgstr ""
"Ustawienie liczby zliczonej na zero nie usuwa elementu z licznika. Użyj "
"``del`` aby usunąć je całkowicie."

msgid ">>> c['sausage'] = 0                        # counter entry with a zero count >>> del c['sausage']                        # del actually removes the entry"
msgstr ""
">>> c['sausage'] = 0 # wpis licznika z liczbą zero >>> del c['sausage'] # "
"del właściwie usuwa wpis"

msgid "Counter objects support three methods beyond those available for all dictionaries:"
msgstr ""
"Przedmioty licznika wspierają trzy sposoby postępowania poza tymi dostępnymi "
"dla wszystkich słowników:"

msgid "Return an iterator over elements repeating each as many times as its count.  Elements are returned in arbitrary order.  If an element's count is less than one, :meth:`elements` will ignore it."
msgstr ""
"Zwróć iterator ponad elementami powtarzając każdy tyle razy jak jego liczba. "
"Elementy są zwracane w dowolny sposób. Jeśli liczba elementu jest mniejsza "
"niż jeden sposób postępowania :meth:`elements` zignoruje ją."

msgid ">>> c = Counter(a=4, b=2, c=0, d=-2) >>> list(c.elements()) ['a', 'a', 'a', 'a', 'b', 'b']"
msgstr ""
">>> c = Counter(a=4, b=2, c=0, d=-2) >>> list(c.elements()) ['a', 'a', 'a', "
"'a', 'b', 'b']"

msgid "Return a list of the *n* most common elements and their counts from the most common to the least.  If *n* is not specified, :func:`most_common` returns *all* elements in the counter.  Elements with equal counts are ordered arbitrarily:"
msgstr ""
"Zwróć listę *n* najczęstszych elementów i ich liczb od najczęstszego do "
"najmniej częstego. Jeśli *n* nie jest określony, :func:`most_common` zwraca "
"*all* - z ang. - *wszystkie* elementy w liczniku. Elementy z równymi "
"liczbami są uszeregowane dowolnie:"

msgid ">>> Counter('abracadabra').most_common(3) [('a', 5), ('r', 2), ('b', 2)]"
msgstr ""
">>> Counter('abracadabra').most_common(3) [('a', 5), ('r', 2), ('b', 2)]"

msgid "Elements are subtracted from an *iterable* or from another *mapping* (or counter).  Like :meth:`dict.update` but subtracts counts instead of replacing them.  Both inputs and outputs may be zero or negative."
msgstr ""
"Elementy są odejmowane z *iterowalnego* lub z innego *mapowania* (lub "
"licznika). Jak :meth:`dict.update` ale odejmuje liczby zamiast je "
"zastępować. Zarówno wejścia jak i wyjścia mogą być zerowe lub ujemne."

msgid ">>> c = Counter(a=4, b=2, c=0, d=-2) >>> d = Counter(a=1, b=2, c=3, d=4) >>> c.subtract(d) Counter({'a': 3, 'b': 0, 'c': -3, 'd': -6})"
msgstr ""
">>> c = Counter(a=4, b=2, c=0, d=-2) >>> d = Counter(a=1, b=2, c=3, d=4) >>> "
"c.subtract(d) Counter({'a': 3, 'b': 0, 'c': -3, 'd': -6})"

msgid "The usual dictionary methods are available for :class:`Counter` objects except for two which work differently for counters."
msgstr ""
"Typowe sposoby postępowania są dostępne dla przedmiotów :class:`Counter` z "
"wyjątkiem dwóch które działają inaczej dla liczników."

msgid "This class method is not implemented for :class:`Counter` objects."
msgstr ""
"Ten sposób postępowania nie jest wypełniony dla przedmiotów "
":class:`Counter`."

msgid "Elements are counted from an *iterable* or added-in from another *mapping* (or counter).  Like :meth:`dict.update` but adds counts instead of replacing them.  Also, the *iterable* is expected to be a sequence of elements, not a sequence of ``(key, value)`` pairs."
msgstr ""
"Elementy są zliczane z *iterowalnego* lub dodanej z innego *mapowania* lub "
"licznika. Jak :meth:`dict.update` ale dodaje liczby zamiast zamieniać je. "
"Także oczekuje się, że *iterowalny* będzie sekwencją elementów, nie "
"sekwencją par ``(klucz, wartość)``"

msgid "Common patterns for working with :class:`Counter` objects::"
msgstr "Wspólne wzorce dla pracy z przedmiotami :class:`Counter`::"

msgid "sum(c.values())                 # total of all counts c.clear()                       # reset all counts list(c)                         # list unique elements set(c)                          # convert to a set dict(c)                         # convert to a regular dictionary c.items()                       # convert to a list of (elem, cnt) pairs Counter(dict(list_of_pairs))    # convert from a list of (elem, cnt) pairs c.most_common()[:-n:-1]         # n least common elements c += Counter()                  # remove zero and negative counts"
msgstr ""
"sum(c.values())                 # suma wszystkich liczb c.clear() "
"                      # resetuj wszystkie liczby list(c) "
"                        # listuj niepowtarzalne elementy set(c) "
"                         # zamień na zbiór dict(c)                         "
"# zamień na regularny słownik c.items()                       # zamień na "
"listę par (elem, cnt) Counter(dict(list_of_pairs))    # zamień z listy par "
"(elem, cnt) c.most_common()[:-n:-1]         # n najrzadszych elementów c += "
"Counter()                  # usuń zerowe i ujemne liczby"

msgid "Several mathematical operations are provided for combining :class:`Counter` objects to produce multisets (counters that have counts greater than zero). Addition and subtraction combine counters by adding or subtracting the counts of corresponding elements.  Intersection and union return the minimum and maximum of corresponding counts.  Each operation can accept inputs with signed counts, but the output will exclude results with counts of zero or less."
msgstr ""
"Kilka matematycznych operacji jest dostępnych dla łączenia przedmiotów "
":class:`Counter` aby stworzyć wielozbiory (liczniki które mają liczby "
"większe niż zero). Dodawanie i odejmowanie łączą liczniki przez dodawanie i "
"odejmowanie liczb odpowiadających elementów. Przecięcie i suma zwracają "
"minimalne i maksymalne wartości odpowiadających sobie liczb. Każda operacja "
"może akceptować wejście z liczbami ze znakiem, ale wyjście będzie odrzucało "
"wyniki z liczbami mniejszymi lub równymi zero."

msgid ">>> c = Counter(a=3, b=1) >>> d = Counter(a=1, b=2) >>> c + d                       # add two counters together:  c[x] + d[x] Counter({'a': 4, 'b': 3}) >>> c - d                       # subtract (keeping only positive counts) Counter({'a': 2}) >>> c & d                       # intersection:  min(c[x], d[x]) Counter({'a': 1, 'b': 1}) >>> c | d                       # union:  max(c[x], d[x]) Counter({'a': 3, 'b': 2})"
msgstr ""
">>> c = Counter(a=3, b=1) >>> d = Counter(a=1, b=2) >>> c + d "
"                      # dodaj dwa liczniki razem:  c[x] + d[x] "
"Counter({'a': 4, 'b': 3}) >>> c - d                       # odejmij "
"(zatrzymując tylko dodatnie liczby) Counter({'a': 2}) >>> c & d "
"                      # przecięcie:  min(c[x], d[x]) Counter({'a': 1, 'b': "
"1}) >>> c | d                       # suma:  max(c[x], d[x]) Counter({'a': "
"3, 'b': 2})"

msgid "Counters were primarily designed to work with positive integers to represent running counts; however, care was taken to not unnecessarily preclude use cases needing other types or negative values.  To help with those use cases, this section documents the minimum range and type restrictions."
msgstr ""
"Liczniki są przede wszystkim zaprojektowane do pracy z dodatnimi liczbami "
"całkowitymi aby reprezentować bieżące liczby; jednakże, zatroszczono się aby "
"bez potrzeby nie wykluczyć przypadków użycia wymagających innego typu "
"ujemnych wartości. Aby pomóc w tych przypadkach, ten rozdział dokumentuje "
"obostrzenia minimalnego zakresu i typu."

msgid "The :class:`Counter` class itself is a dictionary subclass with no restrictions on its keys and values.  The values are intended to be numbers representing counts, but you *could* store anything in the value field."
msgstr ""
"Uogólnienie :class:`Counter` samo w sobie jest podrzędnym uogólnieniem "
"słownika bez ograniczeń co do kluczy i wartości. Wartości są przeznaczone "
"aby były liczbami reprezentującymi wartości zliczane, ale *możesz* wpisać "
"cokolwiek do pola wartości."

msgid "The :meth:`most_common` method requires only that the values be orderable."
msgstr ""
"Sposób postępowania :meth:`most_common` - z ang. - 'najczęstszy' - wymaga "
"jedynie aby wartości były możliwe do uporządkowania."

msgid "For in-place operations such as ``c[key] += 1``, the value type need only support addition and subtraction.  So fractions, floats, and decimals would work and negative values are supported.  The same is also true for :meth:`update` and :meth:`subtract` which allow negative and zero values for both inputs and outputs."
msgstr ""
"Dla operacji w miejscu takich jak ``c[klucz] += 1``, typ wartości wymaga "
"tylko wsparcia dla dodawania i odejmowania. Więc ułamki, liczby "
"zmiennoprzecinkowe i dziesiątkowe będą działać i wartości ujemne są "
"wspierane. To samo jest także prawdziwe dla :meth:`update` i "
":meth:`subtract` które pozwalają na wartości ujemne i zerowe dla zarówno "
"wejść jak i wyjść."

msgid "The multiset methods are designed only for use cases with positive values. The inputs may be negative or zero, but only outputs with positive values are created.  There are no type restrictions, but the value type needs to support support addition, subtraction, and comparison."
msgstr ""
"Sposoby postępowania wielozbiorów są zaprojektowane tylko dla przypadków "
"użycia wartości dodatnich. Wejścia mogą być ujemne lub zerowe, ale tylko "
"wyjścia z dodatnimi wartościami są tworzone. Nie ma ograniczeń typu, ale "
"wartość musi wspierać dodawanie odejmowanie i porównania."

msgid "The :meth:`elements` method requires integer counts.  It ignores zero and negative counts."
msgstr ""
"Sposób postępowania :meth:`elements` wymaga liczb całkowitych do zliczania. "
"Ignoruje zerowe i ujemne liczby."

msgid "`Counter class <http://code.activestate.com/recipes/576611/>`_ adapted for Python 2.5 and an early `Bag recipe <http://code.activestate.com/recipes/259174/>`_ for Python 2.4."
msgstr ""
"`Uogólnienie licznika <http://code.activestate.com/recipes/576611/>`_  "
"zaadaptowane dla języka pytonowskiego 2.5 i wczesna recepta na `Torebki "
"<http://code.activestate.com/recipes/259174/>`_ dla języka pytonowskiego "
"2.4."

msgid "`Bag class <http://www.gnu.org/software/smalltalk/manual-base/html_node/Bag.html>`_ in Smalltalk."
msgstr ""
"`Uogólnienie Torebek <http://www.gnu.org/software/smalltalk/manual-"
"base/html_node/Bag.html>`_ w Smalltalku."

msgid "Wikipedia entry for `Multisets <http://en.wikipedia.org/wiki/Multiset>`_\\."
msgstr ""
"Wpis na Wikipedii dla `Wielozbiorów "
"<http://en.wikipedia.org/wiki/Multizbiór>`_\\."

msgid "`C++ multisets <http://www.demo2s.com/Tutorial/Cpp/0380__set-multiset/Catalog0380__set-multiset.htm>`_ tutorial with examples."
msgstr ""
"`Wielozbiory C++  <http://www.java2s.com/Tutorial/Cpp/0380__set-"
"multiset/0120__multiset.htm>`_ samouczek z przykładami."

msgid "For mathematical operations on multisets and their use cases, see *Knuth, Donald. The Art of Computer Programming Volume II, Section 4.6.3, Exercise 19*\\."
msgstr ""
"Dla matematycznych operacji na wielozbiorach i ich przypadkach użycia, "
"zobacz *Knuth, Donald. Sztuka programowania komputerów Tom II, Rozdział "
"4.6.3, Ćwiczenie 19*\\."

msgid "To enumerate all distinct multisets of a given size over a given set of elements, see :func:`itertools.combinations_with_replacement`."
msgstr ""
"Aby wyliczyć wszystkie różne wielozbiory danego rozmiaru ponad danym zbiorem "
"elementów, zobacz :func:`itertools.combinations_with_replacement`."

msgid "map(Counter, combinations_with_replacement('ABC', 2)) --> AA AB AC BB BC CC"
msgstr ""
"map(Counter, combinations_with_replacement('ABC', 2)) --> AA AB AC BB BC CC"

msgid ":class:`deque` objects"
msgstr "przedmioty :class:`deque`"

msgid "Returns a new deque object initialized left-to-right (using :meth:`append`) with data from *iterable*.  If *iterable* is not specified, the new deque is empty."
msgstr ""
"Zwraca nowy przedmiot dwukońcowej kolejki zainicjowany od lewej strony do "
"prawej (używając sposobu postępowania :meth:`append`) z danymi z przedmiotu "
"*iterowalnego*. Jeśli przedmiot *iterowalny* jest nieokreślony, nowy "
"przedmiot dwukońcowej kolejki jest pusty."

msgid "Deques are a generalization of stacks and queues (the name is pronounced \"deck\" and is short for \"double-ended queue\").  Deques support thread-safe, memory efficient appends and pops from either side of the deque with approximately the same O(1) performance in either direction."
msgstr ""
"Przedmioty dwukońcowej kolejki - deque - są uogólnieniem sterty i kolejki "
"(nazwa jest wymawiana jak \"deck\" i jest skrótem od \"dwukońcowej kolejki\"). "
"Dwukońcowe kolejki wspierają bezpieczne dla wątków, efektywne pod względem "
"wykorzystania pamięci działania dodania na koniec i pobrania z każdego z "
"dwóch końców dwukońcowej kolejki z w przybliżeniu tą samą prędkością O(1) w "
"każdym kierunku."

msgid "Though :class:`list` objects support similar operations, they are optimized for fast fixed-length operations and incur O(n) memory movement costs for ``pop(0)`` and ``insert(0, v)`` operations which change both the size and position of the underlying data representation."
msgstr ""
"Chociaż przedmioty :class:`list` wspierają podobne operacje, są "
"optymalizowane dla szybkich stałej długości operacji i ponoszą koszty "
"przenoszenia pamięci O(n) dla ``pop(0) i ``insert(0, v)`` które zmieniają "
"zarówno rozmiar jak i pozycję leżących u podstaw reprezentacji danych."

msgid "If *maxlen* is not specified or is *None*, deques may grow to an arbitrary length.  Otherwise, the deque is bounded to the specified maximum length.  Once a bounded length deque is full, when new items are added, a corresponding number of items are discarded from the opposite end.  Bounded length deques provide functionality similar to the ``tail`` filter in Unix. They are also useful for tracking transactions and other pools of data where only the most recent activity is of interest."
msgstr ""
"Jeśli *maxlen* nie jest określona lub jest *None*, podwójnie zakończone "
"kolejki mogą rozrosnąć się do dowolnej długości. W przeciwnym razie, "
"podwójnie zakończone kolejki są ograniczone do określonej maksymalnej "
"długości. Gdy określonej długości kolejka jest pełna, gdy nowe elementy są "
"dodawane, odpowiadająca liczba elementów jest odrzucana z przeciwnego końca. "
"Określonej długości kolejki dostarczają funkcjonalności podobnej do filtra "
"``ogona`` - z ang. - ``tail`` w Unix-ie. Są one także użyteczne dla "
"podążania za transakcjami i innego rodzaju danymi, gdzie tylko najświeższe "
"aktywności są przedmiotem zainteresowania."

msgid "Deque objects support the following methods:"
msgstr ""
"Przedmioty podwójnie zakończonych kolejek wspierają następujące sposoby "
"postępowania:"

msgid "Add *x* to the right side of the deque."
msgstr "Dodaj *x* do prawej strony podwójnie zakończonej kolejki."

msgid "Add *x* to the left side of the deque."
msgstr "Dodaj *x* do lewej strony podwójnie zakończonej kolejki."

msgid "Remove all elements from the deque leaving it with length 0."
msgstr ""
"Zdejmij wszystkie elementy podwójnie zakończonej kolejki zostawiając ją z "
"długością 0."

msgid "Count the number of deque elements equal to *x*."
msgstr "Policz liczbę elementów podwójnie zakończonej kolejki równych *x*."

msgid "Extend the right side of the deque by appending elements from the iterable argument."
msgstr ""
"Rozszerz prawą stronę podwójnie zakończonej kolejki przez doklejenie "
"elementów z iterowalnego parametru."

msgid "Extend the left side of the deque by appending elements from *iterable*. Note, the series of left appends results in reversing the order of elements in the iterable argument."
msgstr ""
"Rozszerz lewą stronę podwójnie zakończonej kolejki przez doklejenie "
"elementów z *iterowalnego* parametru. Zauważ, że seria lewych doklejeń "
"powoduje odwrócenie kolejności elementów w parametrze iterowalnym."

msgid "Remove and return an element from the right side of the deque. If no elements are present, raises an :exc:`IndexError`."
msgstr ""
"Zdejmij i zwróć element z prawej strony podwójnie zakończonej kolejki. Jeśli "
"żadne elementy nie są obecne, zgłoś :exc:`IndexError`."

msgid "Remove and return an element from the left side of the deque. If no elements are present, raises an :exc:`IndexError`."
msgstr ""
"Zdejmij i zwróć element z lewej strony podwójnie zakończonej kolejki. Jeśli "
"żadne elementy nie są obecne zgłoś :exc:`IndexError`."

msgid "Removed the first occurrence of *value*.  If not found, raises a :exc:`ValueError`."
msgstr ""
"Zdejmij pierwsze napotkane wystąpienie *wartości*. Jeśli nie znaleziono, "
"zgłasza :exc:`ValueError`."

msgid "Reverse the elements of the deque in-place and then return ``None``."
msgstr ""
"Odwróć elementy podwójnie zakończonej kolejki na-miejscu a potem zwróć "
"``None`` - z ang. - ``Żaden``."

msgid "Rotate the deque *n* steps to the right.  If *n* is negative, rotate to the left.  Rotating one step to the right is equivalent to: ``d.appendleft(d.pop())``."
msgstr ""
"Obróć podwójnie zakończoną kolejkę *n* razy w prawo. Jeśli *n* jest ujemne "
"obróć w lewo. Obrócenie jeden raz w prawo jest równoważne: "
"``d.appendleft(d.pop())``."

msgid "Deque objects also provide one read-only attribute:"
msgstr ""
"Przedmioty podwójnie zakończonej kolejki dostarczają także jedną właściwość "
"tylko do odczytu:"

msgid "Maximum size of a deque or *None* if unbounded."
msgstr ""
"Maksymalny rozmiar podwójnie zakończonej kolejki lub *Żaden* - z ang. - "
"*None* jeśli bez ograniczenia."

msgid "In addition to the above, deques support iteration, pickling, ``len(d)``, ``reversed(d)``, ``copy.copy(d)``, ``copy.deepcopy(d)``, membership testing with the :keyword:`in` operator, and subscript references such as ``d[-1]``.  Indexed access is O(1) at both ends but slows to O(n) in the middle.  For fast random access, use lists instead."
msgstr ""
"W dodatku do powyższego podwójnie zakończone kolejki wspierają iterację, "
"peklowanie, ``len(d)`` - długość, ``reversed(d)`` - odwróconą kolejność, "
"``copy.copy(d)`` - kopię, ``copy.deepcopy(d)`` - głęboką kopię, sprawdzanie "
"przynależności z użyciem operatora :keyword:`in` i odniesieniami w "
"podtekście takimi, jak ``d[-1]``. Indeksowany dostęp jest O(1) na obu "
"końcach ale zwalnia do O(n) w środku. Dla szybkich przypadkowych dostępów, "
"użyj list zamiast tego."

msgid "Example:"
msgstr "Przykład:"

msgid ">>> from collections import deque >>> d = deque('ghi')                 # make a new deque with three items >>> for elem in d:                   # iterate over the deque's elements ...     print(elem.upper()) G H I  >>> d.append('j')                    # add a new entry to the right side >>> d.appendleft('f')                # add a new entry to the left side >>> d                                # show the representation of the deque deque(['f', 'g', 'h', 'i', 'j'])  >>> d.pop()                          # return and remove the rightmost item 'j' >>> d.popleft()                      # return and remove the leftmost item 'f' >>> list(d)                          # list the contents of the deque ['g', 'h', 'i'] >>> d[0]                             # peek at leftmost item 'g' >>> d[-1]                            # peek at rightmost item 'i'  >>> list(reversed(d))                # list the contents of a deque in reverse ['i', 'h', 'g'] >>> 'h' in d                         # search the deque True >>> d.extend('jkl')                  # add multiple elements at once >>> d deque(['g', 'h', 'i', 'j', 'k', 'l']) >>> d.rotate(1)                      # right rotation >>> d deque(['l', 'g', 'h', 'i', 'j', 'k']) >>> d.rotate(-1)                     # left rotation >>> d deque(['g', 'h', 'i', 'j', 'k', 'l'])  >>> deque(reversed(d))               # make a new deque in reverse order deque(['l', 'k', 'j', 'i', 'h', 'g']) >>> d.clear()                        # empty the deque >>> d.pop()                          # cannot pop from an empty deque Traceback (most recent call last):   File \"<pyshell#6>\", line 1, in -toplevel-     d.pop() IndexError: pop from an empty deque  >>> d.extendleft('abc')              # extendleft() reverses the input order >>> d deque(['c', 'b', 'a'])"
msgstr ""

msgid ":class:`deque` Recipes"
msgstr ""

msgid "This section shows various approaches to working with deques."
msgstr ""

msgid "Bounded length deques provide functionality similar to the ``tail`` filter in Unix::"
msgstr ""

msgid "def tail(filename, n=10):     'Return the last n lines of a file'     return deque(open(filename), n)"
msgstr ""

msgid "Another approach to using deques is to maintain a sequence of recently added elements by appending to the right and popping to the left::"
msgstr ""

msgid "def moving_average(iterable, n=3):     # moving_average([40, 30, 50, 46, 39, 44]) --> 40.0 42.0 45.0 43.0     # http://en.wikipedia.org/wiki/Moving_average     it = iter(iterable)     d = deque(itertools.islice(it, n-1))     d.appendleft(0)     s = sum(d)     for elem in it:         s += elem - d.popleft()         d.append(elem)         yield s / n"
msgstr ""

msgid "The :meth:`rotate` method provides a way to implement :class:`deque` slicing and deletion.  For example, a pure Python implementation of ``del d[n]`` relies on the :meth:`rotate` method to position elements to be popped::"
msgstr ""

msgid "def delete_nth(d, n):     d.rotate(-n)     d.popleft()     d.rotate(n)"
msgstr ""

msgid "To implement :class:`deque` slicing, use a similar approach applying :meth:`rotate` to bring a target element to the left side of the deque. Remove old entries with :meth:`popleft`, add new entries with :meth:`extend`, and then reverse the rotation. With minor variations on that approach, it is easy to implement Forth style stack manipulations such as ``dup``, ``drop``, ``swap``, ``over``, ``pick``, ``rot``, and ``roll``."
msgstr ""

msgid ":class:`defaultdict` objects"
msgstr ""

msgid "Returns a new dictionary-like object.  :class:`defaultdict` is a subclass of the built-in :class:`dict` class.  It overrides one method and adds one writable instance variable.  The remaining functionality is the same as for the :class:`dict` class and is not documented here."
msgstr ""

msgid "The first argument provides the initial value for the :attr:`default_factory` attribute; it defaults to ``None``. All remaining arguments are treated the same as if they were passed to the :class:`dict` constructor, including keyword arguments."
msgstr ""

msgid ":class:`defaultdict` objects support the following method in addition to the standard :class:`dict` operations:"
msgstr ""

msgid "If the :attr:`default_factory` attribute is ``None``, this raises a :exc:`KeyError` exception with the *key* as argument."
msgstr ""

msgid "If :attr:`default_factory` is not ``None``, it is called without arguments to provide a default value for the given *key*, this value is inserted in the dictionary for the *key*, and returned."
msgstr ""

msgid "If calling :attr:`default_factory` raises an exception this exception is propagated unchanged."
msgstr ""

msgid "This method is called by the :meth:`__getitem__` method of the :class:`dict` class when the requested key is not found; whatever it returns or raises is then returned or raised by :meth:`__getitem__`."
msgstr ""

msgid ":class:`defaultdict` objects support the following instance variable:"
msgstr ""

msgid "This attribute is used by the :meth:`__missing__` method; it is initialized from the first argument to the constructor, if present, or to ``None``, if absent."
msgstr ""

msgid ":class:`defaultdict` Examples"
msgstr ""

msgid "Using :class:`list` as the :attr:`default_factory`, it is easy to group a sequence of key-value pairs into a dictionary of lists:"
msgstr ""

msgid ">>> s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)] >>> d = defaultdict(list) >>> for k, v in s: ...     d[k].append(v) ... >>> list(d.items()) [('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])]"
msgstr ""

msgid "When each key is encountered for the first time, it is not already in the mapping; so an entry is automatically created using the :attr:`default_factory` function which returns an empty :class:`list`.  The :meth:`list.append` operation then attaches the value to the new list.  When keys are encountered again, the look-up proceeds normally (returning the list for that key) and the :meth:`list.append` operation adds another value to the list. This technique is simpler and faster than an equivalent technique using :meth:`dict.setdefault`:"
msgstr ""

msgid ">>> d = {} >>> for k, v in s: ...     d.setdefault(k, []).append(v) ... >>> list(d.items()) [('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])]"
msgstr ""

msgid "Setting the :attr:`default_factory` to :class:`int` makes the :class:`defaultdict` useful for counting (like a bag or multiset in other languages):"
msgstr ""

msgid ">>> s = 'mississippi' >>> d = defaultdict(int) >>> for k in s: ...     d[k] += 1 ... >>> list(d.items()) [('i', 4), ('p', 2), ('s', 4), ('m', 1)]"
msgstr ""

msgid "When a letter is first encountered, it is missing from the mapping, so the :attr:`default_factory` function calls :func:`int` to supply a default count of zero.  The increment operation then builds up the count for each letter."
msgstr ""

msgid "The function :func:`int` which always returns zero is just a special case of constant functions.  A faster and more flexible way to create constant functions is to use a lambda function which can supply any constant value (not just zero):"
msgstr ""

msgid ">>> def constant_factory(value): ...     return lambda: value >>> d = defaultdict(constant_factory('<missing>')) >>> d.update(name='John', action='ran') >>> '%(name)s %(action)s to %(object)s' % d 'John ran to <missing>'"
msgstr ""

msgid "Setting the :attr:`default_factory` to :class:`set` makes the :class:`defaultdict` useful for building a dictionary of sets:"
msgstr ""

msgid ">>> s = [('red', 1), ('blue', 2), ('red', 3), ('blue', 4), ('red', 1), ('blue', 4)] >>> d = defaultdict(set) >>> for k, v in s: ...     d[k].add(v) ... >>> list(d.items()) [('blue', set([2, 4])), ('red', set([1, 3]))]"
msgstr ""

msgid ":func:`namedtuple` Factory Function for Tuples with Named Fields"
msgstr ""

msgid "Named tuples assign meaning to each position in a tuple and allow for more readable, self-documenting code.  They can be used wherever regular tuples are used, and they add the ability to access fields by name instead of position index."
msgstr ""

msgid "Returns a new tuple subclass named *typename*.  The new subclass is used to create tuple-like objects that have fields accessible by attribute lookup as well as being indexable and iterable.  Instances of the subclass also have a helpful docstring (with typename and field_names) and a helpful :meth:`__repr__` method which lists the tuple contents in a ``name=value`` format."
msgstr ""

msgid "The *field_names* are a single string with each fieldname separated by whitespace and/or commas, for example ``'x y'`` or ``'x, y'``.  Alternatively, *field_names* can be a sequence of strings such as ``['x', 'y']``."
msgstr ""

msgid "Any valid Python identifier may be used for a fieldname except for names starting with an underscore.  Valid identifiers consist of letters, digits, and underscores but do not start with a digit or underscore and cannot be a :mod:`keyword` such as *class*, *for*, *return*, *global*, *pass*, or *raise*."
msgstr ""

msgid "If *rename* is true, invalid fieldnames are automatically replaced with positional names.  For example, ``['abc', 'def', 'ghi', 'abc']`` is converted to ``['abc', '_1', 'ghi', '_3']``, eliminating the keyword ``def`` and the duplicate fieldname ``abc``."
msgstr ""

msgid "If *verbose* is true, the class definition is printed just before being built."
msgstr ""

msgid "Named tuple instances do not have per-instance dictionaries, so they are lightweight and require no more memory than regular tuples."
msgstr ""

msgid ">>> Point = namedtuple('Point', 'x y', verbose=True) class Point(tuple):         'Point(x, y)'          __slots__ = ()          _fields = ('x', 'y')          def __new__(_cls, x, y):             'Create a new instance of Point(x, y)'             return _tuple.__new__(_cls, (x, y))          @classmethod         def _make(cls, iterable, new=tuple.__new__, len=len):             'Make a new Point object from a sequence or iterable'             result = new(cls, iterable)             if len(result) != 2:                 raise TypeError('Expected 2 arguments, got %d' % len(result))             return result          def __repr__(self):             'Return a nicely formatted representation string'             return 'Point(x=%r, y=%r)' % self          def _asdict(self):             'Return a new OrderedDict which maps field names to their values'             return OrderedDict(zip(self._fields, self))          def _replace(_self, **kwds):             'Return a new Point object replacing specified fields with new values'             result = _self._make(map(kwds.pop, ('x', 'y'), _self))             if kwds:                 raise ValueError('Got unexpected field names: %r' % list(kwds.keys()))             return result          def __getnewargs__(self):             'Return self as a plain tuple.   Used by copy and pickle.'             return tuple(self)          x = _property(_itemgetter(0), doc='Alias for field number 0')         y = _property(_itemgetter(1), doc='Alias for field number 1')  >>> p = Point(11, y=22)     # instantiate with positional or keyword arguments >>> p[0] + p[1]             # indexable like the plain tuple (11, 22) 33 >>> x, y = p                # unpack like a regular tuple >>> x, y (11, 22) >>> p.x + p.y               # fields also accessible by name 33 >>> p                       # readable __repr__ with a name=value style Point(x=11, y=22)"
msgstr ""

msgid "Named tuples are especially useful for assigning field names to result tuples returned by the :mod:`csv` or :mod:`sqlite3` modules::"
msgstr ""

msgid "EmployeeRecord = namedtuple('EmployeeRecord', 'name, age, title, department, paygrade')  import csv for emp in map(EmployeeRecord._make, csv.reader(open(\"employees.csv\", \"rb\"))):     print(emp.name, emp.title)  import sqlite3 conn = sqlite3.connect('/companydata') cursor = conn.cursor() cursor.execute('SELECT name, age, title, department, paygrade FROM employees') for emp in map(EmployeeRecord._make, cursor.fetchall()):     print(emp.name, emp.title)"
msgstr ""

msgid "In addition to the methods inherited from tuples, named tuples support three additional methods and one attribute.  To prevent conflicts with field names, the method and attribute names start with an underscore."
msgstr ""

msgid "Class method that makes a new instance from an existing sequence or iterable."
msgstr ""

msgid ">>> t = [11, 22] >>> Point._make(t) Point(x=11, y=22)"
msgstr ""

msgid "Return a new :class:`OrderedDict` which maps field names to their corresponding values::"
msgstr ""

msgid ">>> p._asdict() OrderedDict([('x', 11), ('y', 22)])"
msgstr ""

msgid "Return a new instance of the named tuple replacing specified fields with new values:"
msgstr ""

msgid ">>> p = Point(x=11, y=22) >>> p._replace(x=33) Point(x=33, y=22)  >>> for partnum, record in inventory.items(): ...     inventory[partnum] = record._replace(price=newprices[partnum], timestamp=time.now())"
msgstr ""

msgid "Tuple of strings listing the field names.  Useful for introspection and for creating new named tuple types from existing named tuples."
msgstr ""

msgid ">>> p._fields            # view the field names ('x', 'y')  >>> Color = namedtuple('Color', 'red green blue') >>> Pixel = namedtuple('Pixel', Point._fields + Color._fields) >>> Pixel(11, 22, 128, 255, 0) Pixel(x=11, y=22, red=128, green=255, blue=0)"
msgstr ""

msgid "To retrieve a field whose name is stored in a string, use the :func:`getattr` function:"
msgstr ""

msgid ">>> getattr(p, 'x') 11"
msgstr ""

msgid "To convert a dictionary to a named tuple, use the double-star-operator (as described in :ref:`tut-unpacking-arguments`):"
msgstr ""

msgid ">>> d = {'x': 11, 'y': 22} >>> Point(**d) Point(x=11, y=22)"
msgstr ""

msgid "Since a named tuple is a regular Python class, it is easy to add or change functionality with a subclass.  Here is how to add a calculated field and a fixed-width print format:"
msgstr ""

msgid ">>> class Point(namedtuple('Point', 'x y')): ...     __slots__ = () ...     @property ...     def hypot(self): ...         return (self.x ** 2 + self.y ** 2) ** 0.5 ...     def __str__(self): ...         return 'Point: x=%6.3f  y=%6.3f  hypot=%6.3f' % (self.x, self.y, self.hypot)"
msgstr ""

msgid ">>> for p in Point(3, 4), Point(14, 5/7): ...     print(p) Point: x= 3.000  y= 4.000  hypot= 5.000 Point: x=14.000  y= 0.714  hypot=14.018"
msgstr ""

msgid "The subclass shown above sets ``__slots__`` to an empty tuple.  This helps keep memory requirements low by preventing the creation of instance dictionaries."
msgstr ""

msgid "Subclassing is not useful for adding new, stored fields.  Instead, simply create a new named tuple type from the :attr:`_fields` attribute:"
msgstr ""

msgid ">>> Point3D = namedtuple('Point3D', Point._fields + ('z',))"
msgstr ""

msgid "Default values can be implemented by using :meth:`_replace` to customize a prototype instance:"
msgstr ""

msgid ">>> Account = namedtuple('Account', 'owner balance transaction_count') >>> default_account = Account('<owner name>', 0.0, 0) >>> johns_account = default_account._replace(owner='John')"
msgstr ""

msgid "Enumerated constants can be implemented with named tuples, but it is simpler and more efficient to use a simple class declaration:"
msgstr ""

msgid ">>> Status = namedtuple('Status', 'open pending closed')._make(range(3)) >>> Status.open, Status.pending, Status.closed (0, 1, 2) >>> class Status: ...     open, pending, closed = range(3)"
msgstr ""

msgid "`Named tuple recipe <http://code.activestate.com/recipes/500261/>`_ adapted for Python 2.4."
msgstr ""

msgid ":class:`OrderedDict` objects"
msgstr ""

msgid "Ordered dictionaries are just like regular dictionaries but they remember the order that items were inserted.  When iterating over an ordered dictionary, the items are returned in the order their keys were first added."
msgstr ""

msgid "Return an instance of a dict subclass, supporting the usual :class:`dict` methods.  An *OrderedDict* is a dict that remembers the order that keys were first inserted. If a new entry overwrites an existing entry, the original insertion position is left unchanged.  Deleting an entry and reinserting it will move it to the end."
msgstr ""

msgid "The :meth:`popitem` method for ordered dictionaries returns and removes a (key, value) pair.  The pairs are returned in LIFO order if *last* is true or FIFO order if false."
msgstr ""

msgid "In addition to the usual mapping methods, ordered dictionaries also support reverse iteration using :func:`reversed`."
msgstr ""

msgid "Equality tests between :class:`OrderedDict` objects are order-sensitive and are implemented as ``list(od1.items())==list(od2.items())``. Equality tests between :class:`OrderedDict` objects and other :class:`Mapping` objects are order-insensitive like regular dictionaries. This allows :class:`OrderedDict` objects to be substituted anywhere a regular dictionary is used."
msgstr ""

msgid "The :class:`OrderedDict` constructor and :meth:`update` method both accept keyword arguments, but their order is lost because Python's function call semantics pass-in keyword arguments using a regular unordered dictionary."
msgstr ""

msgid "`Equivalent OrderedDict recipe <http://code.activestate.com/recipes/576693/>`_ that runs on Python 2.4 or later."
msgstr ""

msgid "Since an ordered dictionary remembers its insertion order, it can be used in conjuction with sorting to make a sorted dictionary::"
msgstr ""

msgid ">>> # regular unsorted dictionary >>> d = {'banana': 3, 'apple':4, 'pear': 1, 'orange': 2}  >>> # dictionary sorted by key >>> OrderedDict(sorted(d.items(), key=lambda t: t[0])) OrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])  >>> # dictionary sorted by value >>> OrderedDict(sorted(d.items(), key=lambda t: t[1])) OrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])  >>> # dictionary sorted by length of the key string >>> OrderedDict(sorted(d.items(), key=lambda t: len(t[0]))) OrderedDict([('pear', 1), ('apple', 4), ('orange', 2), ('banana', 3)])"
msgstr ""

msgid "The new sorted dictionaries maintain their sort order when entries are deleted.  But when new keys are added, the keys are appended to the end and the sort is not maintained."
msgstr ""

msgid ":class:`UserDict` objects"
msgstr ""

msgid "The class, :class:`UserDict` acts as a wrapper around dictionary objects. The need for this class has been partially supplanted by the ability to subclass directly from :class:`dict`; however, this class can be easier to work with because the underlying dictionary is accessible as an attribute."
msgstr ""

msgid "Class that simulates a dictionary.  The instance's contents are kept in a regular dictionary, which is accessible via the :attr:`data` attribute of :class:`UserDict` instances.  If *initialdata* is provided, :attr:`data` is initialized with its contents; note that a reference to *initialdata* will not be kept, allowing it be used for other purposes."
msgstr ""

msgid "In addition to supporting the methods and operations of mappings, :class:`UserDict` instances provide the following attribute:"
msgstr ""

msgid "A real dictionary used to store the contents of the :class:`UserDict` class."
msgstr ""

msgid ":class:`UserList` objects"
msgstr ""

msgid "This class acts as a wrapper around list objects.  It is a useful base class for your own list-like classes which can inherit from them and override existing methods or add new ones.  In this way, one can add new behaviors to lists."
msgstr ""

msgid "The need for this class has been partially supplanted by the ability to subclass directly from :class:`list`; however, this class can be easier to work with because the underlying list is accessible as an attribute."
msgstr ""

msgid "Class that simulates a list.  The instance's contents are kept in a regular list, which is accessible via the :attr:`data` attribute of :class:`UserList` instances.  The instance's contents are initially set to a copy of *list*, defaulting to the empty list ``[]``.  *list* can be any iterable, for example a real Python list or a :class:`UserList` object."
msgstr ""

msgid "In addition to supporting the methods and operations of mutable sequences, :class:`UserList` instances provide the following attribute:"
msgstr ""

msgid "A real :class:`list` object used to store the contents of the :class:`UserList` class."
msgstr ""

msgid "**Subclassing requirements:** Subclasses of :class:`UserList` are expect to offer a constructor which can be called with either no arguments or one argument.  List operations which return a new sequence attempt to create an instance of the actual implementation class.  To do so, it assumes that the constructor can be called with a single parameter, which is a sequence object used as a data source."
msgstr ""

msgid "If a derived class does not wish to comply with this requirement, all of the special methods supported by this class will need to be overridden; please consult the sources for information about the methods which need to be provided in that case."
msgstr ""

msgid ":class:`UserString` objects"
msgstr ""

msgid "The class, :class:`UserString` acts as a wrapper around string objects. The need for this class has been partially supplanted by the ability to subclass directly from :class:`str`; however, this class can be easier to work with because the underlying string is accessible as an attribute."
msgstr ""

msgid "Class that simulates a string or a Unicode string object.  The instance's content is kept in a regular string object, which is accessible via the :attr:`data` attribute of :class:`UserString` instances.  The instance's contents are initially set to a copy of *sequence*.  The *sequence* can be an instance of :class:`bytes`, :class:`str`, :class:`UserString` (or a subclass) or an arbitrary sequence which can be converted into a string using the built-in :func:`str` function."
msgstr ""

msgid ":mod:`colorsys` --- Conversions between color systems"
msgstr ""

msgid "The :mod:`colorsys` module defines bidirectional conversions of color values between colors expressed in the RGB (Red Green Blue) color space used in computer monitors and three other coordinate systems: YIQ, HLS (Hue Lightness Saturation) and HSV (Hue Saturation Value).  Coordinates in all of these color spaces are floating point values.  In the YIQ space, the Y coordinate is between 0 and 1, but the I and Q coordinates can be positive or negative.  In all other spaces, the coordinates are all between 0 and 1."
msgstr ""

msgid "More information about color spaces can be found at http://www.poynton.com/ColorFAQ.html and http://www.cambridgeincolour.com/tutorials/color-spaces.htm."
msgstr ""

msgid "The :mod:`colorsys` module defines the following functions:"
msgstr ""

msgid "Convert the color from RGB coordinates to YIQ coordinates."
msgstr ""

msgid "Convert the color from YIQ coordinates to RGB coordinates."
msgstr ""

msgid "Convert the color from RGB coordinates to HLS coordinates."
msgstr ""

msgid "Convert the color from HLS coordinates to RGB coordinates."
msgstr ""

msgid "Convert the color from RGB coordinates to HSV coordinates."
msgstr ""

msgid "Convert the color from HSV coordinates to RGB coordinates."
msgstr ""

msgid "Example::"
msgstr ""

msgid ">>> import colorsys >>> colorsys.rgb_to_hsv(.3, .4, .2) (0.25, 0.5, 0.4) >>> colorsys.hsv_to_rgb(0.25, 0.5, 0.4) (0.3, 0.4, 0.2)"
msgstr ""

msgid ":mod:`compileall` --- Byte-compile Python libraries"
msgstr ""

msgid "This module provides some utility functions to support installing Python libraries.  These functions compile Python source files in a directory tree, allowing users without permission to write to the libraries to take advantage of cached byte-code files."
msgstr ""

msgid "This module may also be used as a script (using the :option:`-m` Python flag) to compile Python sources.  Directories to recursively traverse (passing :option:`-l` stops the recursive behavior) for sources are listed on the command line.  If no arguments are given, the invocation is equivalent to ``-l sys.path``.  Printing lists of the files compiled can be disabled with the :option:`-q` flag.  In addition, the :option:`-x` option takes a regular expression argument.  All files that match the expression will be skipped. The :option:`-b` flag may be given to write legacy ``.pyc`` file path names, otherwise :pep:`3147` style byte-compiled path names are written."
msgstr ""

msgid "Recursively descend the directory tree named by *dir*, compiling all :file:`.py` files along the way.  The *maxlevels* parameter is used to limit the depth of the recursion; it defaults to ``10``.  If *ddir* is given, it is used as the base path from  which the filenames used in error messages will be generated. If *force* is true, modules are re-compiled even if the timestamps are up to date."
msgstr ""

msgid "If *rx* is given, it specifies a regular expression of file names to exclude from the search; that expression is searched for in the full path."
msgstr ""

msgid "If *quiet* is true, nothing is printed to the standard output in normal operation."
msgstr ""

msgid "If *legacy* is true, old-style ``.pyc`` file path names are written, otherwise (the default), :pep:`3147` style path names are written."
msgstr ""

msgid "Byte-compile all the :file:`.py` files found along ``sys.path``. If *skip_curdir* is true (the default), the current directory is not included in the search.  The *maxlevels* parameter defaults to ``0``, and the *force* and *legacy* parameters default to ``False``. All are passed to the :func:`compile_dir` function."
msgstr ""

msgid "To force a recompile of all the :file:`.py` files in the :file:`Lib/` subdirectory and all its subdirectories::"
msgstr ""

msgid "import compileall  compileall.compile_dir('Lib/', force=True)  # Perform same compilation, excluding files in .svn directories. import re compileall.compile_dir('Lib/', rx=re.compile('/[.]svn'), force=True)"
msgstr ""

msgid "Byte-compile a single source file."
msgstr ""

msgid ":mod:`configparser` --- Configuration file parser"
msgstr ""

msgid "This module defines the class :class:`ConfigParser`.   The :class:`ConfigParser` class implements a basic configuration file parser language which provides a structure similar to what you would find on Microsoft Windows INI files.  You can use this to write Python programs which can be customized by end users easily."
msgstr ""

msgid "This library does *not* interpret or write the value-type prefixes used in the Windows Registry extended version of INI syntax."
msgstr ""

msgid "The configuration file consists of sections, led by a ``[section]`` header and followed by ``name: value`` entries, with continuations in the style of :rfc:`822` (see section 3.1.1, \"LONG HEADER FIELDS\"); ``name=value`` is also accepted.  Note that leading whitespace is removed from values. The optional values can contain format strings which refer to other values in the same section, or values in a special ``DEFAULT`` section.  Additional defaults can be provided on initialization and retrieval.  Lines beginning with ``'#'`` or ``';'`` are ignored and may be used to provide comments."
msgstr ""

msgid "For example::"
msgstr ""

msgid "[My Section] foodir: %(dir)s/whatever dir=frob long: this value continues    in the next line"
msgstr ""

msgid "would resolve the ``%(dir)s`` to the value of ``dir`` (``frob`` in this case). All reference expansions are done on demand."
msgstr ""

msgid "Default values can be specified by passing them into the :class:`ConfigParser` constructor as a dictionary.  Additional defaults  may be passed into the :meth:`get` method which will override all others."
msgstr ""

msgid "Sections are normally stored in a built-in dictionary. An alternative dictionary type can be passed to the :class:`ConfigParser` constructor. For example, if a dictionary type is passed that sorts its keys, the sections will be sorted on write-back, as will be the keys within each section."
msgstr ""

msgid "The basic configuration object.  When *defaults* is given, it is initialized into the dictionary of intrinsic defaults.  When *dict_type* is given, it will be used to create the dictionary objects for the list of sections, for the options within a section, and for the default values.  When *allow_no_value* is true (default: ``False``), options without values are accepted; the value presented for these is ``None``."
msgstr ""

msgid "This class does not support the magical interpolation behavior."
msgstr ""

msgid "Derived class of :class:`RawConfigParser` that implements the magical interpolation feature and adds optional arguments to the :meth:`get` and :meth:`items` methods.  The values in *defaults* must be appropriate for the ``%()s`` string interpolation.  Note that *__name__* is an intrinsic default; its value is the section name, and will override any value provided in *defaults*."
msgstr ""

msgid "All option names used in interpolation will be passed through the :meth:`optionxform` method just like any other option name reference.  For example, using the default implementation of :meth:`optionxform` (which converts option names to lower case), the values ``foo %(bar)s`` and ``foo %(BAR)s`` are equivalent."
msgstr ""

msgid "Derived class of :class:`ConfigParser` that implements a more-sane variant of the magical interpolation feature.  This implementation is more predictable as well. New applications should prefer this version if they don't need to be compatible with older versions of Python."
msgstr ""

msgid "Exception raised when a specified section is not found."
msgstr ""

msgid "Exception raised if :meth:`add_section` is called with the name of a section that is already present."
msgstr ""

msgid "Exception raised when a specified option is not found in the specified  section."
msgstr ""

msgid "Base class for exceptions raised when problems occur performing string interpolation."
msgstr ""

msgid "Exception raised when string interpolation cannot be completed because the number of iterations exceeds :const:`MAX_INTERPOLATION_DEPTH`. Subclass of :exc:`InterpolationError`."
msgstr ""

msgid "Exception raised when an option referenced from a value does not exist. Subclass of :exc:`InterpolationError`."
msgstr ""

msgid "Exception raised when the source text into which substitutions are made does not conform to the required syntax. Subclass of :exc:`InterpolationError`."
msgstr ""

msgid "Exception raised when attempting to parse a file which has no section headers."
msgstr ""

msgid "Exception raised when errors occur attempting to parse a file."
msgstr ""

msgid "The maximum depth for recursive interpolation for :meth:`get` when the *raw* parameter is false.  This is relevant only for the :class:`ConfigParser` class."
msgstr ""

msgid "Support for a creating Unix shell-like mini-languages which can be used as an alternate format for application configuration files."
msgstr ""

msgid "RawConfigParser Objects"
msgstr ""

msgid ":class:`RawConfigParser` instances have the following methods:"
msgstr ""

msgid "Return a dictionary containing the instance-wide defaults."
msgstr ""

msgid "Return a list of the sections available; ``DEFAULT`` is not included in the list."
msgstr ""

msgid "Add a section named *section* to the instance.  If a section by the given name already exists, :exc:`DuplicateSectionError` is raised. If the name ``DEFAULT`` (or any of it's case-insensitive variants) is passed, :exc:`ValueError` is raised."
msgstr ""

msgid "Indicates whether the named section is present in the configuration. The ``DEFAULT`` section is not acknowledged."
msgstr ""

msgid "Returns a list of options available in the specified *section*."
msgstr ""

msgid "If the given section exists, and contains the given option, return :const:`True`; otherwise return :const:`False`."
msgstr ""

msgid "Attempt to read and parse a list of filenames, returning a list of filenames which were successfully parsed.  If *filenames* is a string, it is treated as a single filename. If a file named in *filenames* cannot be opened, that file will be ignored.  This is designed so that you can specify a list of potential configuration file locations (for example, the current directory, the user's home directory, and some system-wide directory), and all existing configuration files in the list will be read.  If none of the named files exist, the :class:`ConfigParser` instance will contain an empty dataset. An application which requires initial values to be loaded from a file should load the required file or files using :meth:`readfp` before calling :meth:`read` for any optional files::"
msgstr ""

msgid "import configparser, os  config = configparser.ConfigParser() config.readfp(open('defaults.cfg')) config.read(['site.cfg', os.path.expanduser('~/.myapp.cfg')])"
msgstr ""

msgid "Read and parse configuration data from the file or file-like object in *fp* (only the :meth:`readline` method is used).  The file-like object must operate in text mode, i.e. return strings from :meth:`readline`."
msgstr ""

msgid "If *filename* is omitted and *fp* has a :attr:`name` attribute, that is used for *filename*; the default is ``<???>``."
msgstr ""

msgid "Get an *option* value for the named *section*."
msgstr ""

msgid "A convenience method which coerces the *option* in the specified *section* to an integer."
msgstr ""

msgid "A convenience method which coerces the *option* in the specified *section* to a floating point number."
msgstr ""

msgid "A convenience method which coerces the *option* in the specified *section* to a Boolean value.  Note that the accepted values for the option are ``\"1\"``, ``\"yes\"``, ``\"true\"``, and ``\"on\"``, which cause this method to return ``True``, and ``\"0\"``, ``\"no\"``, ``\"false\"``, and ``\"off\"``, which cause it to return ``False``.  These string values are checked in a case-insensitive manner.  Any other value will cause it to raise :exc:`ValueError`."
msgstr ""

msgid "Return a list of ``(name, value)`` pairs for each option in the given *section*."
msgstr ""

msgid "If the given section exists, set the given option to the specified value; otherwise raise :exc:`NoSectionError`.  While it is possible to use :class:`RawConfigParser` (or :class:`ConfigParser` with *raw* parameters set to true) for *internal* storage of non-string values, full functionality (including interpolation and output to files) can only be achieved using string values."
msgstr ""

msgid "Write a representation of the configuration to the specified file object, which must be opened in text mode (accepting strings).  This representation can be parsed by a future :meth:`read` call."
msgstr ""

msgid "Remove the specified *option* from the specified *section*. If the section does not exist, raise :exc:`NoSectionError`.  If the option existed to be removed, return :const:`True`; otherwise return :const:`False`."
msgstr ""

msgid "Remove the specified *section* from the configuration. If the section in fact existed, return ``True``. Otherwise return ``False``."
msgstr ""

msgid "Transforms the option name *option* as found in an input file or as passed in by client code to the form that should be used in the internal structures. The default implementation returns a lower-case version of *option*; subclasses may override this or client code can set an attribute of this name on instances to affect this behavior."
msgstr ""

msgid "You don't necessarily need to subclass a ConfigParser to use this method, you can also re-set it on an instance, to a function that takes a string argument.  Setting it to ``str``, for example, would make option names case sensitive::"
msgstr ""

msgid "cfgparser = ConfigParser() ... cfgparser.optionxform = str"
msgstr ""

msgid "Note that when reading configuration files, whitespace around the option names are stripped before :meth:`optionxform` is called."
msgstr ""

msgid "ConfigParser Objects"
msgstr ""

msgid "The :class:`ConfigParser` class extends some methods of the :class:`RawConfigParser` interface, adding some optional arguments."
msgstr ""

msgid "Get an *option* value for the named *section*.  All the ``'%'`` interpolations are expanded in the return values, based on the defaults passed into the constructor, as well as the options *vars* provided, unless the *raw* argument is true."
msgstr ""

msgid "Return a list of ``(name, value)`` pairs for each option in the given *section*. Optional arguments have the same meaning as for the :meth:`get` method."
msgstr ""

msgid "SafeConfigParser Objects"
msgstr ""

msgid "The :class:`SafeConfigParser` class implements the same extended interface as :class:`ConfigParser`, with the following addition:"
msgstr ""

msgid "If the given section exists, set the given option to the specified value; otherwise raise :exc:`NoSectionError`.  *value* must be a string; if it is not, :exc:`TypeError` is raised."
msgstr ""

msgid "An example of writing to a configuration file::"
msgstr ""

msgid "import configparser  config = configparser.RawConfigParser()  # When adding sections or items, add them in the reverse order of # how you want them to be displayed in the actual file. # In addition, please note that using RawConfigParser's and the raw # mode of ConfigParser's respective set functions, you can assign # non-string values to keys internally, but will receive an error # when attempting to write to a file or when you get it in non-raw # mode. SafeConfigParser does not allow such assignments to take place. config.add_section('Section1') config.set('Section1', 'int', '15') config.set('Section1', 'bool', 'true') config.set('Section1', 'float', '3.1415') config.set('Section1', 'baz', 'fun') config.set('Section1', 'bar', 'Python') config.set('Section1', 'foo', '%(bar)s is %(baz)s!')  # Writing our configuration file to 'example.cfg' with open('example.cfg', 'w') as configfile:     config.write(configfile)"
msgstr ""

msgid "An example of reading the configuration file again::"
msgstr ""

msgid "import configparser  config = configparser.RawConfigParser() config.read('example.cfg')  # getfloat() raises an exception if the value is not a float # getint() and getboolean() also do this for their respective types float = config.getfloat('Section1', 'float') int = config.getint('Section1', 'int') print(float + int)  # Notice that the next output does not interpolate '%(bar)s' or '%(baz)s'. # This is because we are using a RawConfigParser(). if config.getboolean('Section1', 'bool'):     print(config.get('Section1', 'foo'))"
msgstr ""

msgid "To get interpolation, you will need to use a :class:`ConfigParser` or :class:`SafeConfigParser`::"
msgstr ""

msgid "import configparser  config = configparser.ConfigParser() config.read('example.cfg')  # Set the third, optional argument of get to 1 if you wish to use raw mode. print(config.get('Section1', 'foo', 0)) # -> \"Python is fun!\" print(config.get('Section1', 'foo', 1)) # -> \"%(bar)s is %(baz)s!\"  # The optional fourth argument is a dict with members that will take # precedence in interpolation. print(config.get('Section1', 'foo', 0, {'bar': 'Documentation',                                         'baz': 'evil'}))"
msgstr ""

msgid "Defaults are available in all three types of ConfigParsers. They are used in interpolation if an option used is not defined elsewhere. ::"
msgstr ""

msgid "import configparser  # New instance with 'bar' and 'baz' defaulting to 'Life' and 'hard' each config = configparser.SafeConfigParser({'bar': 'Life', 'baz': 'hard'}) config.read('example.cfg')  print(config.get('Section1', 'foo')) # -> \"Python is fun!\" config.remove_option('Section1', 'bar') config.remove_option('Section1', 'baz') print(config.get('Section1', 'foo')) # -> \"Life is hard!\""
msgstr ""

msgid "The function ``opt_move`` below can be used to move options between sections::"
msgstr ""

msgid "def opt_move(config, section1, section2, option):     try:         config.set(section2, option, config.get(section1, option, 1))     except configparser.NoSectionError:         # Create non-existent section         config.add_section(section2)         opt_move(config, section1, section2, option)     else:         config.remove_option(section1, option)"
msgstr ""

msgid "Some configuration files are known to include settings without values, but which otherwise conform to the syntax supported by :mod:`configparser`.  The *allow_no_value* parameter to the constructor can be used to indicate that such values should be accepted:"
msgstr ""

msgid ">>> import configparser >>> import io  >>> sample_config = \"\"\" ... [mysqld] ... user = mysql ... pid-file = /var/run/mysqld/mysqld.pid ... skip-external-locking ... old_passwords = 1 ... skip-bdb ... skip-innodb ... \"\"\" >>> config = configparser.RawConfigParser(allow_no_value=True) >>> config.readfp(io.BytesIO(sample_config))  >>> # Settings with values are treated as before: >>> config.get(\"mysqld\", \"user\") 'mysql'  >>> # Settings without values provide None: >>> config.get(\"mysqld\", \"skip-bdb\")  >>> # Settings which aren't specified still raise an error: >>> config.get(\"mysqld\", \"does-not-exist\") Traceback (most recent call last):   ... configparser.NoOptionError: No option 'does-not-exist' in section: 'mysqld'"
msgstr ""

msgid "Built-in Constants"
msgstr ""

msgid "A small number of constants live in the built-in namespace.  They are:"
msgstr ""

msgid ":data:`None`, :data:`False`, :data:`True` and :data:`__debug__` cannot be reassigned (assignments to them raise :exc:`SyntaxError`), so they can be considered \"true\" constants."
msgstr ""

msgid "The false value of the :class:`bool` type. Assignments to ``False`` are illegal and raise a :exc:`SyntaxError`."
msgstr ""

msgid "The true value of the :class:`bool` type. Assignments to ``True`` are illegal and raise a :exc:`SyntaxError`."
msgstr ""

msgid "The sole value of :attr:`types.NoneType`.  ``None`` is frequently used to represent the absence of a value, as when default arguments are not passed to a function. Assignments to ``None`` are illegal and raise a :exc:`SyntaxError`."
msgstr ""

msgid "Special value which can be returned by the \"rich comparison\" special methods (:meth:`__eq__`, :meth:`__lt__`, and friends), to indicate that the comparison is not implemented with respect to the other type."
msgstr ""

msgid "The same as ``...``. Special value used mostly in conjunction with extended slicing syntax for user-defined container data types, as in ::"
msgstr ""

msgid ".. XXX Someone who understands extended slicing should fill in here."
msgstr ""

msgid "This constant is true if Python was not started with an :option:`-O` option. Assignments to :const:`__debug__` are illegal and raise a :exc:`SyntaxError`. See also the :keyword:`assert` statement."
msgstr ""

msgid "Constants added by the :mod:`site` module"
msgstr ""

msgid "The :mod:`site` module (which is imported automatically during startup, except if the :option:`-S` command-line option is given) adds several constants to the built-in namespace.  They are useful for the interactive interpreter shell and should not be used in programs."
msgstr ""

msgid "Objects that when printed, print a message like \"Use quit() or Ctrl-D (i.e. EOF) to exit\", and when called, raise :exc:`SystemExit` with the specified exit code."
msgstr ""

msgid "Objects that when printed, print a message like \"Type license() to see the full license text\", and when called, display the corresponding text in a pager-like fashion (one screen at a time)."
msgstr ""

msgid ":mod:`contextlib` --- Utilities for :keyword:`with`\\ -statement contexts"
msgstr ""

msgid "This module provides utilities for common tasks involving the :keyword:`with` statement. For more information see also :ref:`typecontextmanager` and :ref:`context-managers`."
msgstr ""

msgid "Functions provided:"
msgstr ""

msgid "This function is a :term:`decorator` that can be used to define a factory function for :keyword:`with` statement context managers, without needing to create a class or separate :meth:`__enter__` and :meth:`__exit__` methods."
msgstr ""

msgid "A simple example (this is not recommended as a real way of generating HTML!)::"
msgstr ""

msgid "from contextlib import contextmanager  @contextmanager def tag(name):     print(\"<%s>\" % name)     yield     print(\"</%s>\" % name)  >>> with tag(\"h1\"): ...    print(\"foo\") ... <h1> foo </h1>"
msgstr ""

msgid "The function being decorated must return a :term:`generator`-iterator when called. This iterator must yield exactly one value, which will be bound to the targets in the :keyword:`with` statement's :keyword:`as` clause, if any."
msgstr ""

msgid "At the point where the generator yields, the block nested in the :keyword:`with` statement is executed.  The generator is then resumed after the block is exited. If an unhandled exception occurs in the block, it is reraised inside the generator at the point where the yield occurred.  Thus, you can use a :keyword:`try`...\\ :keyword:`except`...\\ :keyword:`finally` statement to trap the error (if any), or ensure that some cleanup takes place. If an exception is trapped merely in order to log it or to perform some action (rather than to suppress it entirely), the generator must reraise that exception. Otherwise the generator context manager will indicate to the :keyword:`with` statement that the exception has been handled, and execution will resume with the statement immediately following the :keyword:`with` statement."
msgstr ""

msgid "Return a context manager that closes *thing* upon completion of the block.  This is basically equivalent to::"
msgstr ""

msgid "from contextlib import contextmanager  @contextmanager def closing(thing):     try:         yield thing     finally:         thing.close()"
msgstr ""

msgid "And lets you write code like this::"
msgstr ""

msgid "from contextlib import closing from urllib.request import urlopen  with closing(urlopen('http://www.python.org')) as page:     for line in page:         print(line)"
msgstr ""

msgid "without needing to explicitly close ``page``.  Even if an error occurs, ``page.close()`` will be called when the :keyword:`with` block is exited."
msgstr ""

msgid "The specification, background, and examples for the Python :keyword:`with` statement."
msgstr ""

msgid ":mod:`copy` --- Shallow and deep copy operations"
msgstr ""

msgid "This module provides generic (shallow and deep) copying operations."
msgstr ""

msgid "Interface summary:"
msgstr ""

msgid "Return a shallow copy of *x*."
msgstr ""

msgid "Return a deep copy of *x*."
msgstr ""

msgid "Raised for module specific errors."
msgstr ""

msgid "The difference between shallow and deep copying is only relevant for compound objects (objects that contain other objects, like lists or class instances):"
msgstr ""

msgid "A *shallow copy* constructs a new compound object and then (to the extent possible) inserts *references* into it to the objects found in the original."
msgstr ""

msgid "A *deep copy* constructs a new compound object and then, recursively, inserts *copies* into it of the objects found in the original."
msgstr ""

msgid "Two problems often exist with deep copy operations that don't exist with shallow copy operations:"
msgstr ""

msgid "Recursive objects (compound objects that, directly or indirectly, contain a reference to themselves) may cause a recursive loop."
msgstr ""

msgid "Because deep copy copies *everything* it may copy too much, e.g., administrative data structures that should be shared even between copies."
msgstr ""

msgid "The :func:`deepcopy` function avoids these problems by:"
msgstr ""

msgid "keeping a \"memo\" dictionary of objects already copied during the current copying pass; and"
msgstr ""

msgid "letting user-defined classes override the copying operation or the set of components copied."
msgstr ""

msgid "This module does not copy types like module, method, stack trace, stack frame, file, socket, window, array, or any similar types.  It does \"copy\" functions and classes (shallow and deeply), by returning the original object unchanged; this is compatible with the way these are treated by the :mod:`pickle` module."
msgstr ""

msgid "Shallow copies of dictionaries can be made using :meth:`dict.copy`, and of lists by assigning a slice of the entire list, for example, ``copied_list = original_list[:]``."
msgstr ""

msgid "Classes can use the same interfaces to control copying that they use to control pickling.  See the description of module :mod:`pickle` for information on these methods.  The :mod:`copy` module does not use the :mod:`copyreg` registration module."
msgstr ""

msgid "In order for a class to define its own copy implementation, it can define special methods :meth:`__copy__` and :meth:`__deepcopy__`.  The former is called to implement the shallow copy operation; no additional arguments are passed. The latter is called to implement the deep copy operation; it is passed one argument, the memo dictionary.  If the :meth:`__deepcopy__` implementation needs to make a deep copy of a component, it should call the :func:`deepcopy` function with the component as first argument and the memo dictionary as second argument."
msgstr ""

msgid "Discussion of the special methods used to support object state retrieval and restoration."
msgstr ""

msgid ":mod:`copyreg` --- Register :mod:`pickle` support functions"
msgstr ""

msgid "The :mod:`copyreg` module provides support for the :mod:`pickle` module.  The :mod:`copy` module is likely to use this in the future as well.  It provides configuration information about object constructors which are not classes. Such constructors may be factory functions or class instances."
msgstr ""

msgid "Declares *object* to be a valid constructor.  If *object* is not callable (and hence not valid as a constructor), raises :exc:`TypeError`."
msgstr ""

msgid "Declares that *function* should be used as a \"reduction\" function for objects of type *type*.  *function* should return either a string or a tuple containing two or three elements."
msgstr ""

msgid "The optional *constructor* parameter, if provided, is a callable object which can be used to reconstruct the object when called with the tuple of arguments returned by *function* at pickling time.  :exc:`TypeError` will be raised if *object* is a class or *constructor* is not callable."
msgstr ""

msgid "See the :mod:`pickle` module for more details on the interface expected of *function* and *constructor*."
msgstr ""

msgid ":mod:`crypt` --- Function to check Unix passwords"
msgstr ""

msgid "This module implements an interface to the :manpage:`crypt(3)` routine, which is a one-way hash function based upon a modified DES algorithm; see the Unix man page for further details.  Possible uses include allowing Python scripts to accept typed passwords from the user, or attempting to crack Unix passwords with a dictionary."
msgstr ""

msgid "Notice that the behavior of this module depends on the actual implementation  of the :manpage:`crypt(3)` routine in the running system.  Therefore, any extensions available on the current implementation will also  be available on this module."
msgstr ""

msgid "*word* will usually be a user's password as typed at a prompt or  in a graphical interface.  *salt* is usually a random two-character string which will be used to perturb the DES algorithm in one of 4096 ways.  The characters in *salt* must be in the set ``[./a-zA-Z0-9]``.  Returns the hashed password as a string, which will be composed of characters from the same alphabet as the salt (the first two characters represent the salt itself)."
msgstr ""

msgid "Since a few :manpage:`crypt(3)` extensions allow different values, with different sizes in the *salt*, it is recommended to use  the full crypted password as salt when checking for a password."
msgstr ""

msgid "A simple example illustrating typical use::"
msgstr ""

msgid "import crypt, getpass, pwd  def login():     username = input('Python login:')     cryptedpasswd = pwd.getpwnam(username)[1]     if cryptedpasswd:         if cryptedpasswd == 'x' or cryptedpasswd == '*':             raise \"Sorry, currently no support for shadow passwords\"         cleartext = getpass.getpass()         return crypt.crypt(cleartext, cryptedpasswd) == cryptedpasswd     else:         return 1"
msgstr ""

msgid "Cryptographic Services"
msgstr ""

msgid "The modules described in this chapter implement various algorithms of a cryptographic nature.  They are available at the discretion of the installation. Here's an overview:"
msgstr ""

msgid "Hardcore cypherpunks will probably find the cryptographic modules written by A.M. Kuchling of further interest; the package contains modules for various encryption algorithms, most notably AES.  These modules are not distributed with Python but available separately.  See the URL http://www.amk.ca/python/code/crypto.html  for more information."
msgstr ""

msgid ":mod:`csv` --- CSV File Reading and Writing"
msgstr ""

msgid "The so-called CSV (Comma Separated Values) format is the most common import and export format for spreadsheets and databases.  There is no \"CSV standard\", so the format is operationally defined by the many applications which read and write it.  The lack of a standard means that subtle differences often exist in the data produced and consumed by different applications.  These differences can make it annoying to process CSV files from multiple sources.  Still, while the delimiters and quoting characters vary, the overall format is similar enough that it is possible to write a single module which can efficiently manipulate such data, hiding the details of reading and writing the data from the programmer."
msgstr ""

msgid "The :mod:`csv` module implements classes to read and write tabular data in CSV format.  It allows programmers to say, \"write this data in the format preferred by Excel,\" or \"read data from this file which was generated by Excel,\" without knowing the precise details of the CSV format used by Excel.  Programmers can also describe the CSV formats understood by other applications or define their own special-purpose CSV formats."
msgstr ""

msgid "The :mod:`csv` module's :class:`reader` and :class:`writer` objects read and write sequences.  Programmers can also read and write data in dictionary form using the :class:`DictReader` and :class:`DictWriter` classes."
msgstr ""

msgid "The Python Enhancement Proposal which proposed this addition to Python."
msgstr ""

msgid "Module Contents"
msgstr ""

msgid "The :mod:`csv` module defines the following functions:"
msgstr ""

msgid "Return a reader object which will iterate over lines in the given *csvfile*. *csvfile* can be any object which supports the :term:`iterator` protocol and returns a string each time its :meth:`!next` method is called --- file objects and list objects are both suitable.   If *csvfile* is a file object, it should be opened with ``newline=''``. [#]_  An optional *dialect* parameter can be given which is used to define a set of parameters specific to a particular CSV dialect.  It may be an instance of a subclass of the :class:`Dialect` class or one of the strings returned by the :func:`list_dialects` function.  The other optional *fmtparams* keyword arguments can be given to override individual formatting parameters in the current dialect.  For full details about the dialect and formatting parameters, see section :ref:`csv-fmt-params`."
msgstr ""

msgid "Each row read from the csv file is returned as a list of strings.  No automatic data type conversion is performed unless the ``QUOTE_NONNUMERIC`` format option is specified (in which case unquoted fields are transformed into floats)."
msgstr ""

msgid "A short usage example::"
msgstr ""

msgid ">>> import csv >>> spamReader = csv.reader(open('eggs.csv', newline=''), delimiter=' ', quotechar='|') >>> for row in spamReader: ...     print(', '.join(row)) Spam, Spam, Spam, Spam, Spam, Baked Beans Spam, Lovely Spam, Wonderful Spam"
msgstr ""

msgid "Return a writer object responsible for converting the user's data into delimited strings on the given file-like object.  *csvfile* can be any object with a :func:`write` method.  An optional *dialect* parameter can be given which is used to define a set of parameters specific to a particular CSV dialect.  It may be an instance of a subclass of the :class:`Dialect` class or one of the strings returned by the :func:`list_dialects` function.  The other optional *fmtparams* keyword arguments can be given to override individual formatting parameters in the current dialect.  For full details about the dialect and formatting parameters, see section :ref:`csv-fmt-params`. To make it as easy as possible to interface with modules which implement the DB API, the value :const:`None` is written as the empty string.  While this isn't a reversible transformation, it makes it easier to dump SQL NULL data values to CSV files without preprocessing the data returned from a ``cursor.fetch*`` call. All other non-string data are stringified with :func:`str` before being written."
msgstr ""

msgid ">>> import csv >>> spamWriter = csv.writer(open('eggs.csv', 'w'), delimiter=' ', ...                         quotechar='|', quoting=csv.QUOTE_MINIMAL) >>> spamWriter.writerow(['Spam'] * 5 + ['Baked Beans']) >>> spamWriter.writerow(['Spam', 'Lovely Spam', 'Wonderful Spam'])"
msgstr ""

msgid "Associate *dialect* with *name*.  *name* must be a string. The dialect can be specified either by passing a sub-class of :class:`Dialect`, or by *fmtparams* keyword arguments, or both, with keyword arguments overriding parameters of the dialect. For full details about the dialect and formatting parameters, see section :ref:`csv-fmt-params`."
msgstr ""

msgid "Delete the dialect associated with *name* from the dialect registry.  An :exc:`Error` is raised if *name* is not a registered dialect name."
msgstr ""

msgid "Return the dialect associated with *name*.  An :exc:`Error` is raised if *name* is not a registered dialect name.  This function returns an immutable :class:`Dialect`."
msgstr ""

msgid "Return the names of all registered dialects."
msgstr ""

msgid "Returns the current maximum field size allowed by the parser. If *new_limit* is given, this becomes the new limit."
msgstr ""

msgid "The :mod:`csv` module defines the following classes:"
msgstr ""

msgid "Create an object which operates like a regular reader but maps the information read into a dict whose keys are given by the optional  *fieldnames* parameter. If the *fieldnames* parameter is omitted, the values in the first row of the *csvfile* will be used as the fieldnames.  If the row read has more fields than the fieldnames sequence, the remaining data is added as a sequence keyed by the value of *restkey*.  If the row read has fewer fields than the fieldnames sequence, the remaining keys take the value of the optional *restval* parameter.  Any other optional or keyword arguments are passed to the underlying :class:`reader` instance."
msgstr ""

msgid "Create an object which operates like a regular writer but maps dictionaries onto output rows.  The *fieldnames* parameter identifies the order in which values in the dictionary passed to the :meth:`writerow` method are written to the *csvfile*.  The optional *restval* parameter specifies the value to be written if the dictionary is missing a key in *fieldnames*.  If the dictionary passed to the :meth:`writerow` method contains a key not found in *fieldnames*, the optional *extrasaction* parameter indicates what action to take.  If it is set to ``'raise'`` a :exc:`ValueError` is raised.  If it is set to ``'ignore'``, extra values in the dictionary are ignored.  Any other optional or keyword arguments are passed to the underlying :class:`writer` instance."
msgstr ""

msgid "Note that unlike the :class:`DictReader` class, the *fieldnames* parameter of the :class:`DictWriter` is not optional.  Since Python's :class:`dict` objects are not ordered, there is not enough information available to deduce the order in which the row should be written to the *csvfile*."
msgstr ""

msgid "The :class:`Dialect` class is a container class relied on primarily for its attributes, which are used to define the parameters for a specific :class:`reader` or :class:`writer` instance."
msgstr ""

msgid "The :class:`excel` class defines the usual properties of an Excel-generated CSV file.  It is registered with the dialect name ``'excel'``."
msgstr ""

msgid "The :class:`excel_tab` class defines the usual properties of an Excel-generated TAB-delimited file.  It is registered with the dialect name ``'excel-tab'``."
msgstr ""

msgid "The :class:`Sniffer` class is used to deduce the format of a CSV file."
msgstr ""

msgid "The :class:`Sniffer` class provides two methods:"
msgstr ""

msgid "Analyze the given *sample* and return a :class:`Dialect` subclass reflecting the parameters found.  If the optional *delimiters* parameter is given, it is interpreted as a string containing possible valid delimiter characters."
msgstr ""

msgid "Analyze the sample text (presumed to be in CSV format) and return :const:`True` if the first row appears to be a series of column headers."
msgstr ""

msgid "An example for :class:`Sniffer` use::"
msgstr ""

msgid "csvfile = open(\"example.csv\") dialect = csv.Sniffer().sniff(csvfile.read(1024)) csvfile.seek(0) reader = csv.reader(csvfile, dialect) # ... process CSV file contents here ..."
msgstr ""

msgid "The :mod:`csv` module defines the following constants:"
msgstr ""

msgid "Instructs :class:`writer` objects to quote all fields."
msgstr ""

msgid "Instructs :class:`writer` objects to only quote those fields which contain special characters such as *delimiter*, *quotechar* or any of the characters in *lineterminator*."
msgstr ""

msgid "Instructs :class:`writer` objects to quote all non-numeric fields."
msgstr ""

msgid "Instructs the reader to convert all non-quoted fields to type *float*."
msgstr ""

msgid "Instructs :class:`writer` objects to never quote fields.  When the current *delimiter* occurs in output data it is preceded by the current *escapechar* character.  If *escapechar* is not set, the writer will raise :exc:`Error` if any characters that require escaping are encountered."
msgstr ""

msgid "Instructs :class:`reader` to perform no special processing of quote characters."
msgstr ""

msgid "The :mod:`csv` module defines the following exception:"
msgstr ""

msgid "Raised by any of the functions when an error is detected."
msgstr ""

msgid "Dialects and Formatting Parameters"
msgstr ""

msgid "To make it easier to specify the format of input and output records, specific formatting parameters are grouped together into dialects.  A dialect is a subclass of the :class:`Dialect` class having a set of specific methods and a single :meth:`validate` method.  When creating :class:`reader` or :class:`writer` objects, the programmer can specify a string or a subclass of the :class:`Dialect` class as the dialect parameter.  In addition to, or instead of, the *dialect* parameter, the programmer can also specify individual formatting parameters, which have the same names as the attributes defined below for the :class:`Dialect` class."
msgstr ""

msgid "Dialects support the following attributes:"
msgstr ""

msgid "A one-character string used to separate fields.  It defaults to ``','``."
msgstr ""

msgid "Controls how instances of *quotechar* appearing inside a field should be themselves be quoted.  When :const:`True`, the character is doubled. When :const:`False`, the *escapechar* is used as a prefix to the *quotechar*.  It defaults to :const:`True`."
msgstr ""

msgid "On output, if *doublequote* is :const:`False` and no *escapechar* is set, :exc:`Error` is raised if a *quotechar* is found in a field."
msgstr ""

msgid "A one-character string used by the writer to escape the *delimiter* if *quoting* is set to :const:`QUOTE_NONE` and the *quotechar* if *doublequote* is :const:`False`. On reading, the *escapechar* removes any special meaning from the following character. It defaults to :const:`None`, which disables escaping."
msgstr ""

msgid "The string used to terminate lines produced by the :class:`writer`. It defaults to ``'\\r\\n'``."
msgstr ""

msgid "The :class:`reader` is hard-coded to recognise either ``'\\r'`` or ``'\\n'`` as end-of-line, and ignores *lineterminator*. This behavior may change in the future."
msgstr ""

msgid "A one-character string used to quote fields containing special characters, such as the *delimiter* or *quotechar*, or which contain new-line characters.  It defaults to ``'\"'``."
msgstr ""

msgid "Controls when quotes should be generated by the writer and recognised by the reader.  It can take on any of the :const:`QUOTE_\\*` constants (see section :ref:`csv-contents`) and defaults to :const:`QUOTE_MINIMAL`."
msgstr ""

msgid "When :const:`True`, whitespace immediately following the *delimiter* is ignored. The default is :const:`False`."
msgstr ""

msgid "Reader Objects"
msgstr ""

msgid "Reader objects (:class:`DictReader` instances and objects returned by the :func:`reader` function) have the following public methods:"
msgstr ""

msgid "Return the next row of the reader's iterable object as a list, parsed according to the current dialect.  Usually you should call this as ``next(reader)``."
msgstr ""

msgid "Reader objects have the following public attributes:"
msgstr ""

msgid "A read-only description of the dialect in use by the parser."
msgstr ""

msgid "The number of lines read from the source iterator. This is not the same as the number of records returned, as records can span multiple lines."
msgstr ""

msgid "DictReader objects have the following public attribute:"
msgstr ""

msgid "If not passed as a parameter when creating the object, this attribute is initialized upon first access or when the first record is read from the file."
msgstr ""

msgid "Writer Objects"
msgstr ""

msgid ":class:`Writer` objects (:class:`DictWriter` instances and objects returned by the :func:`writer` function) have the following public methods.  A *row* must be a sequence of strings or numbers for :class:`Writer` objects and a dictionary mapping fieldnames to strings or numbers (by passing them through :func:`str` first) for :class:`DictWriter` objects.  Note that complex numbers are written out surrounded by parens. This may cause some problems for other programs which read CSV files (assuming they support complex numbers at all)."
msgstr ""

msgid "Write the *row* parameter to the writer's file object, formatted according to the current dialect."
msgstr ""

msgid "Write all the *rows* parameters (a list of *row* objects as described above) to the writer's file object, formatted according to the current dialect."
msgstr ""

msgid "Writer objects have the following public attribute:"
msgstr ""

msgid "A read-only description of the dialect in use by the writer."
msgstr ""

msgid "DictWriter objects have the following public method:"
msgstr ""

msgid "Write a row with the field names (as specified in the constructor)."
msgstr ""

msgid "The simplest example of reading a CSV file::"
msgstr ""

msgid "import csv reader = csv.reader(open(\"some.csv\", newline='')) for row in reader:     print(row)"
msgstr ""

msgid "Reading a file with an alternate format::"
msgstr ""

msgid "import csv reader = csv.reader(open(\"passwd\"), delimiter=':', quoting=csv.QUOTE_NONE) for row in reader:     print(row)"
msgstr ""

msgid "The corresponding simplest possible writing example is::"
msgstr ""

msgid "import csv writer = csv.writer(open(\"some.csv\", \"w\")) writer.writerows(someiterable)"
msgstr ""

msgid "Since :func:`open` is used to open a CSV file for reading, the file will by default be decoded into unicode using the system default encoding (see :func:`locale.getpreferredencoding`).  To decode a file using a different encoding, use the ``encoding`` argument of open::"
msgstr ""

msgid "import csv reader = csv.reader(open(\"some.csv\", newline='', encoding='utf-8')) for row in reader:     print(row)"
msgstr ""

msgid "The same applies to writing in something other than the system default encoding: specify the encoding argument when opening the output file."
msgstr ""

msgid "Registering a new dialect::"
msgstr ""

msgid "import csv csv.register_dialect('unixpwd', delimiter=':', quoting=csv.QUOTE_NONE) reader = csv.reader(open(\"passwd\"), 'unixpwd')"
msgstr ""

msgid "A slightly more advanced use of the reader --- catching and reporting errors::"
msgstr ""

msgid "import csv, sys filename = \"some.csv\" reader = csv.reader(open(filename, newline='')) try:     for row in reader:         print(row) except csv.Error as e:     sys.exit('file {}, line {}: {}'.format(filename, reader.line_num, e))"
msgstr ""

msgid "And while the module doesn't directly support parsing strings, it can easily be done::"
msgstr ""

msgid "import csv for row in csv.reader(['one,two,three']):     print(row)"
msgstr ""

msgid "If ``newline=''`` is not specified, newlines embedded inside quoted fields will not be interpreted correctly.  It should always be safe to specify ``newline=''``, since the csv module does its own universal newline handling on input."
msgstr ""

msgid ":mod:`ctypes` --- A foreign function library for Python"
msgstr ""

msgid ":mod:`ctypes` is a foreign function library for Python.  It provides C compatible data types, and allows calling functions in DLLs or shared libraries.  It can be used to wrap these libraries in pure Python."
msgstr ""

msgid "ctypes tutorial"
msgstr ""

msgid "Note: The code samples in this tutorial use :mod:`doctest` to make sure that they actually work.  Since some code samples behave differently under Linux, Windows, or Mac OS X, they contain doctest directives in comments."
msgstr ""

msgid "Note: Some code samples reference the ctypes :class:`c_int` type. This type is an alias for the :class:`c_long` type on 32-bit systems.  So, you should not be confused if :class:`c_long` is printed if you would expect :class:`c_int` --- they are actually the same type."
msgstr ""

msgid "Loading dynamic link libraries"
msgstr ""

msgid ":mod:`ctypes` exports the *cdll*, and on Windows *windll* and *oledll* objects, for loading dynamic link libraries."
msgstr ""

msgid "You load libraries by accessing them as attributes of these objects. *cdll* loads libraries which export functions using the standard ``cdecl`` calling convention, while *windll* libraries call functions using the ``stdcall`` calling convention. *oledll* also uses the ``stdcall`` calling convention, and assumes the functions return a Windows :ctype:`HRESULT` error code. The error code is used to automatically raise a :class:`WindowsError` exception when the function call fails."
msgstr ""

msgid "Here are some examples for Windows. Note that ``msvcrt`` is the MS standard C library containing most standard C functions, and uses the cdecl calling convention::"
msgstr ""

msgid ">>> from ctypes import * >>> print(windll.kernel32) # doctest: +WINDOWS <WinDLL 'kernel32', handle ... at ...> >>> print(cdll.msvcrt) # doctest: +WINDOWS <CDLL 'msvcrt', handle ... at ...> >>> libc = cdll.msvcrt # doctest: +WINDOWS >>>"
msgstr ""

msgid "Windows appends the usual ``.dll`` file suffix automatically."
msgstr ""

msgid "On Linux, it is required to specify the filename *including* the extension to load a library, so attribute access can not be used to load libraries. Either the :meth:`LoadLibrary` method of the dll loaders should be used, or you should load the library by creating an instance of CDLL by calling the constructor::"
msgstr ""

msgid ">>> cdll.LoadLibrary(\"libc.so.6\") # doctest: +LINUX <CDLL 'libc.so.6', handle ... at ...> >>> libc = CDLL(\"libc.so.6\")     # doctest: +LINUX >>> libc                         # doctest: +LINUX <CDLL 'libc.so.6', handle ... at ...> >>>"
msgstr ""

msgid "Accessing functions from loaded dlls"
msgstr ""

msgid "Functions are accessed as attributes of dll objects::"
msgstr ""

msgid ">>> from ctypes import * >>> libc.printf <_FuncPtr object at 0x...> >>> print(windll.kernel32.GetModuleHandleA) # doctest: +WINDOWS <_FuncPtr object at 0x...> >>> print(windll.kernel32.MyOwnFunction) # doctest: +WINDOWS Traceback (most recent call last):   File \"<stdin>\", line 1, in ?   File \"ctypes.py\", line 239, in __getattr__     func = _StdcallFuncPtr(name, self) AttributeError: function 'MyOwnFunction' not found >>>"
msgstr ""

msgid "Note that win32 system dlls like ``kernel32`` and ``user32`` often export ANSI as well as UNICODE versions of a function. The UNICODE version is exported with an ``W`` appended to the name, while the ANSI version is exported with an ``A`` appended to the name. The win32 ``GetModuleHandle`` function, which returns a *module handle* for a given module name, has the following C prototype, and a macro is used to expose one of them as ``GetModuleHandle`` depending on whether UNICODE is defined or not::"
msgstr ""

msgid "/* ANSI version */ HMODULE GetModuleHandleA(LPCSTR lpModuleName); /* UNICODE version */ HMODULE GetModuleHandleW(LPCWSTR lpModuleName);"
msgstr ""

msgid "*windll* does not try to select one of them by magic, you must access the version you need by specifying ``GetModuleHandleA`` or ``GetModuleHandleW`` explicitly, and then call it with bytes or string objects respectively."
msgstr ""

msgid "Sometimes, dlls export functions with names which aren't valid Python identifiers, like ``\"??2@YAPAXI@Z\"``. In this case you have to use :func:`getattr` to retrieve the function::"
msgstr ""

msgid ">>> getattr(cdll.msvcrt, \"??2@YAPAXI@Z\") # doctest: +WINDOWS <_FuncPtr object at 0x...> >>>"
msgstr ""

msgid "On Windows, some dlls export functions not by name but by ordinal. These functions can be accessed by indexing the dll object with the ordinal number::"
msgstr ""

msgid ">>> cdll.kernel32[1] # doctest: +WINDOWS <_FuncPtr object at 0x...> >>> cdll.kernel32[0] # doctest: +WINDOWS Traceback (most recent call last):   File \"<stdin>\", line 1, in ?   File \"ctypes.py\", line 310, in __getitem__     func = _StdcallFuncPtr(name, self) AttributeError: function ordinal 0 not found >>>"
msgstr ""

msgid "Calling functions"
msgstr ""

msgid "You can call these functions like any other Python callable. This example uses the ``time()`` function, which returns system time in seconds since the Unix epoch, and the ``GetModuleHandleA()`` function, which returns a win32 module handle."
msgstr ""

msgid "This example calls both functions with a NULL pointer (``None`` should be used as the NULL pointer)::"
msgstr ""

msgid ">>> print(libc.time(None)) # doctest: +SKIP 1150640792 >>> print(hex(windll.kernel32.GetModuleHandleA(None))) # doctest: +WINDOWS 0x1d000000 >>>"
msgstr ""

msgid ":mod:`ctypes` tries to protect you from calling functions with the wrong number of arguments or the wrong calling convention.  Unfortunately this only works on Windows.  It does this by examining the stack after the function returns, so although an error is raised the function *has* been called::"
msgstr ""

msgid ">>> windll.kernel32.GetModuleHandleA() # doctest: +WINDOWS Traceback (most recent call last):   File \"<stdin>\", line 1, in ? ValueError: Procedure probably called with not enough arguments (4 bytes missing) >>> windll.kernel32.GetModuleHandleA(0, 0) # doctest: +WINDOWS Traceback (most recent call last):   File \"<stdin>\", line 1, in ? ValueError: Procedure probably called with too many arguments (4 bytes in excess) >>>"
msgstr ""

msgid "The same exception is raised when you call an ``stdcall`` function with the ``cdecl`` calling convention, or vice versa::"
msgstr ""

msgid ">>> cdll.kernel32.GetModuleHandleA(None) # doctest: +WINDOWS Traceback (most recent call last):   File \"<stdin>\", line 1, in ? ValueError: Procedure probably called with not enough arguments (4 bytes missing) >>>  >>> windll.msvcrt.printf(b\"spam\") # doctest: +WINDOWS Traceback (most recent call last):   File \"<stdin>\", line 1, in ? ValueError: Procedure probably called with too many arguments (4 bytes in excess) >>>"
msgstr ""

msgid "To find out the correct calling convention you have to look into the C header file or the documentation for the function you want to call."
msgstr ""

msgid "On Windows, :mod:`ctypes` uses win32 structured exception handling to prevent crashes from general protection faults when functions are called with invalid argument values::"
msgstr ""

msgid ">>> windll.kernel32.GetModuleHandleA(32) # doctest: +WINDOWS Traceback (most recent call last):   File \"<stdin>\", line 1, in ? WindowsError: exception: access violation reading 0x00000020 >>>"
msgstr ""

msgid "There are, however, enough ways to crash Python with :mod:`ctypes`, so you should be careful anyway."
msgstr ""

msgid "``None``, integers, bytes objects and (unicode) strings are the only native Python objects that can directly be used as parameters in these function calls. ``None`` is passed as a C ``NULL`` pointer, bytes objects and strings are passed as pointer to the memory block that contains their data (:ctype:`char *` or :ctype:`wchar_t *`).  Python integers are passed as the platforms default C :ctype:`int` type, their value is masked to fit into the C type."
msgstr ""

msgid "Before we move on calling functions with other parameter types, we have to learn more about :mod:`ctypes` data types."
msgstr ""

msgid "Fundamental data types"
msgstr ""

msgid ":mod:`ctypes` defines a number of primitive C compatible data types :"
msgstr ""

msgid "ctypes type"
msgstr ""

msgid "C type"
msgstr ""

msgid "Python type"
msgstr ""

msgid ":class:`c_char`"
msgstr ""

msgid ":ctype:`char`"
msgstr ""

msgid "1-character bytes object"
msgstr ""

msgid ":class:`c_wchar`"
msgstr ""

msgid ":ctype:`wchar_t`"
msgstr ""

msgid "1-character string"
msgstr ""

msgid ":class:`c_byte`"
msgstr ""

msgid ":class:`c_ubyte`"
msgstr ""

msgid ":ctype:`unsigned char`"
msgstr ""

msgid ":class:`c_short`"
msgstr ""

msgid ":ctype:`short`"
msgstr ""

msgid ":class:`c_ushort`"
msgstr ""

msgid ":ctype:`unsigned short`"
msgstr ""

msgid ":class:`c_int`"
msgstr ""

msgid ":ctype:`int`"
msgstr ""

msgid ":class:`c_uint`"
msgstr ""

msgid ":ctype:`unsigned int`"
msgstr ""

msgid ":class:`c_long`"
msgstr ""

msgid ":ctype:`long`"
msgstr ""

msgid ":class:`c_ulong`"
msgstr ""

msgid ":ctype:`unsigned long`"
msgstr ""

msgid ":class:`c_longlong`"
msgstr ""

msgid ":ctype:`__int64` or :ctype:`long long`"
msgstr ""

msgid ":class:`c_ulonglong`"
msgstr ""

msgid ":ctype:`unsigned __int64` or :ctype:`unsigned long long`"
msgstr ""

msgid ":class:`c_float`"
msgstr ""

msgid ":ctype:`float`"
msgstr ""

msgid ":class:`c_double`"
msgstr ""

msgid ":ctype:`double`"
msgstr ""

msgid ":class:`c_longdouble`"
msgstr ""

msgid ":ctype:`long double`"
msgstr ""

msgid ":class:`c_char_p`"
msgstr ""

msgid ":ctype:`char *` (NUL terminated)"
msgstr ""

msgid "bytes object or ``None``"
msgstr ""

msgid ":class:`c_wchar_p`"
msgstr ""

msgid ":ctype:`wchar_t *` (NUL terminated)"
msgstr ""

msgid "string or ``None``"
msgstr ""

msgid ":class:`c_void_p`"
msgstr ""

msgid ":ctype:`void *`"
msgstr ""

msgid "int or ``None``"
msgstr ""

msgid "All these types can be created by calling them with an optional initializer of the correct type and value::"
msgstr ""

msgid ">>> c_int() c_long(0) >>> c_wchar_p(\"Hello, World\") c_wchar_p('Hello, World') >>> c_ushort(-3) c_ushort(65533) >>>"
msgstr ""

msgid "Since these types are mutable, their value can also be changed afterwards::"
msgstr ""

msgid ">>> i = c_int(42) >>> print(i) c_long(42) >>> print(i.value) 42 >>> i.value = -99 >>> print(i.value) -99 >>>"
msgstr ""

msgid "Assigning a new value to instances of the pointer types :class:`c_char_p`, :class:`c_wchar_p`, and :class:`c_void_p` changes the *memory location* they point to, *not the contents* of the memory block (of course not, because Python bytes objects are immutable)::"
msgstr ""

msgid ">>> s = \"Hello, World\" >>> c_s = c_wchar_p(s) >>> print(c_s) c_wchar_p('Hello, World') >>> c_s.value = \"Hi, there\" >>> print(c_s) c_wchar_p('Hi, there') >>> print(s)                 # first object is unchanged Hello, World >>>"
msgstr ""

msgid "You should be careful, however, not to pass them to functions expecting pointers to mutable memory. If you need mutable memory blocks, ctypes has a :func:`create_string_buffer` function which creates these in various ways.  The current memory block contents can be accessed (or changed) with the ``raw`` property; if you want to access it as NUL terminated string, use the ``value`` property::"
msgstr ""

msgid ">>> from ctypes import * >>> p = create_string_buffer(3)            # create a 3 byte buffer, initialized to NUL bytes >>> print(sizeof(p), repr(p.raw)) 3 b'\\x00\\x00\\x00' >>> p = create_string_buffer(b\"Hello\")     # create a buffer containing a NUL terminated string >>> print(sizeof(p), repr(p.raw)) 6 b'Hello\\x00' >>> print(repr(p.value)) b'Hello' >>> p = create_string_buffer(b\"Hello\", 10) # create a 10 byte buffer >>> print(sizeof(p), repr(p.raw)) 10 b'Hello\\x00\\x00\\x00\\x00\\x00' >>> p.value = b\"Hi\" >>> print(sizeof(p), repr(p.raw)) 10 b'Hi\\x00lo\\x00\\x00\\x00\\x00\\x00' >>>"
msgstr ""

msgid "The :func:`create_string_buffer` function replaces the :func:`c_buffer` function (which is still available as an alias), as well as the :func:`c_string` function from earlier ctypes releases.  To create a mutable memory block containing unicode characters of the C type :ctype:`wchar_t` use the :func:`create_unicode_buffer` function."
msgstr ""

msgid "Calling functions, continued"
msgstr ""

msgid "Note that printf prints to the real standard output channel, *not* to :data:`sys.stdout`, so these examples will only work at the console prompt, not from within *IDLE* or *PythonWin*::"
msgstr ""

msgid ">>> printf = libc.printf >>> printf(b\"Hello, %s\\n\", b\"World!\") Hello, World! 14 >>> printf(b\"Hello, %S\\n\", \"World!\") Hello, World! 14 >>> printf(b\"%d bottles of beer\\n\", 42) 42 bottles of beer 19 >>> printf(b\"%f bottles of beer\\n\", 42.5) Traceback (most recent call last):   File \"<stdin>\", line 1, in ? ArgumentError: argument 2: exceptions.TypeError: Don't know how to convert parameter 2 >>>"
msgstr ""

msgid "As has been mentioned before, all Python types except integers, strings, and bytes objects have to be wrapped in their corresponding :mod:`ctypes` type, so that they can be converted to the required C data type::"
msgstr ""

msgid ">>> printf(b\"An int %d, a double %f\\n\", 1234, c_double(3.14)) An int 1234, a double 3.140000 31 >>>"
msgstr ""

msgid "Calling functions with your own custom data types"
msgstr ""

msgid "You can also customize :mod:`ctypes` argument conversion to allow instances of your own classes be used as function arguments.  :mod:`ctypes` looks for an :attr:`_as_parameter_` attribute and uses this as the function argument.  Of course, it must be one of integer, string, or bytes::"
msgstr ""

msgid ">>> class Bottles(object): ...     def __init__(self, number): ...         self._as_parameter_ = number ... >>> bottles = Bottles(42) >>> printf(b\"%d bottles of beer\\n\", bottles) 42 bottles of beer 19 >>>"
msgstr ""

msgid "If you don't want to store the instance's data in the :attr:`_as_parameter_` instance variable, you could define a :class:`property` which makes the attribute available on request."
msgstr ""

msgid "Specifying the required argument types (function prototypes)"
msgstr ""

msgid "It is possible to specify the required argument types of functions exported from DLLs by setting the :attr:`argtypes` attribute."
msgstr ""

msgid ":attr:`argtypes` must be a sequence of C data types (the ``printf`` function is probably not a good example here, because it takes a variable number and different types of parameters depending on the format string, on the other hand this is quite handy to experiment with this feature)::"
msgstr ""

msgid ">>> printf.argtypes = [c_char_p, c_char_p, c_int, c_double] >>> printf(b\"String '%s', Int %d, Double %f\\n\", b\"Hi\", 10, 2.2) String 'Hi', Int 10, Double 2.200000 37 >>>"
msgstr ""

msgid "Specifying a format protects against incompatible argument types (just as a prototype for a C function), and tries to convert the arguments to valid types::"
msgstr ""

msgid ">>> printf(b\"%d %d %d\", 1, 2, 3) Traceback (most recent call last):   File \"<stdin>\", line 1, in ? ArgumentError: argument 2: exceptions.TypeError: wrong type >>> printf(b\"%s %d %f\\n\", b\"X\", 2, 3) X 2 3.000000 13 >>>"
msgstr ""

msgid "If you have defined your own classes which you pass to function calls, you have to implement a :meth:`from_param` class method for them to be able to use them in the :attr:`argtypes` sequence. The :meth:`from_param` class method receives the Python object passed to the function call, it should do a typecheck or whatever is needed to make sure this object is acceptable, and then return the object itself, its :attr:`_as_parameter_` attribute, or whatever you want to pass as the C function argument in this case. Again, the result should be an integer, string, bytes, a :mod:`ctypes` instance, or an object with an :attr:`_as_parameter_` attribute."
msgstr ""

msgid "Return types"
msgstr ""

msgid "By default functions are assumed to return the C :ctype:`int` type.  Other return types can be specified by setting the :attr:`restype` attribute of the function object."
msgstr ""

msgid "Here is a more advanced example, it uses the ``strchr`` function, which expects a string pointer and a char, and returns a pointer to a string::"
msgstr ""

msgid ">>> strchr = libc.strchr >>> strchr(b\"abcdef\", ord(\"d\")) # doctest: +SKIP 8059983 >>> strchr.restype = c_char_p   # c_char_p is a pointer to a string >>> strchr(b\"abcdef\", ord(\"d\")) b'def' >>> print(strchr(b\"abcdef\", ord(\"x\"))) None >>>"
msgstr ""

msgid "If you want to avoid the ``ord(\"x\")`` calls above, you can set the :attr:`argtypes` attribute, and the second argument will be converted from a single character Python bytes object into a C char::"
msgstr ""

msgid ">>> strchr.restype = c_char_p >>> strchr.argtypes = [c_char_p, c_char] >>> strchr(b\"abcdef\", b\"d\") 'def' >>> strchr(b\"abcdef\", b\"def\") Traceback (most recent call last):   File \"<stdin>\", line 1, in ? ArgumentError: argument 2: exceptions.TypeError: one character string expected >>> print(strchr(b\"abcdef\", b\"x\")) None >>> strchr(b\"abcdef\", b\"d\") 'def' >>>"
msgstr ""

msgid "You can also use a callable Python object (a function or a class for example) as the :attr:`restype` attribute, if the foreign function returns an integer.  The callable will be called with the *integer* the C function returns, and the result of this call will be used as the result of your function call. This is useful to check for error return values and automatically raise an exception::"
msgstr ""

msgid ">>> GetModuleHandle = windll.kernel32.GetModuleHandleA # doctest: +WINDOWS >>> def ValidHandle(value): ...     if value == 0: ...         raise WinError() ...     return value ... >>> >>> GetModuleHandle.restype = ValidHandle # doctest: +WINDOWS >>> GetModuleHandle(None) # doctest: +WINDOWS 486539264 >>> GetModuleHandle(\"something silly\") # doctest: +WINDOWS Traceback (most recent call last):   File \"<stdin>\", line 1, in ?   File \"<stdin>\", line 3, in ValidHandle WindowsError: [Errno 126] The specified module could not be found. >>>"
msgstr ""

msgid "``WinError`` is a function which will call Windows ``FormatMessage()`` api to get the string representation of an error code, and *returns* an exception. ``WinError`` takes an optional error code parameter, if no one is used, it calls :func:`GetLastError` to retrieve it."
msgstr ""

msgid "Please note that a much more powerful error checking mechanism is available through the :attr:`errcheck` attribute; see the reference manual for details."
msgstr ""

msgid "Passing pointers (or: passing parameters by reference)"
msgstr ""

msgid "Sometimes a C api function expects a *pointer* to a data type as parameter, probably to write into the corresponding location, or if the data is too large to be passed by value. This is also known as *passing parameters by reference*."
msgstr ""

msgid ":mod:`ctypes` exports the :func:`byref` function which is used to pass parameters by reference.  The same effect can be achieved with the :func:`pointer` function, although :func:`pointer` does a lot more work since it constructs a real pointer object, so it is faster to use :func:`byref` if you don't need the pointer object in Python itself::"
msgstr ""

msgid ">>> i = c_int() >>> f = c_float() >>> s = create_string_buffer(b'\\000' * 32) >>> print(i.value, f.value, repr(s.value)) 0 0.0 b'' >>> libc.sscanf(b\"1 3.14 Hello\", b\"%d %f %s\", ...             byref(i), byref(f), s) 3 >>> print(i.value, f.value, repr(s.value)) 1 3.1400001049 b'Hello' >>>"
msgstr ""

msgid "Structures and unions"
msgstr ""

msgid "Structures and unions must derive from the :class:`Structure` and :class:`Union` base classes which are defined in the :mod:`ctypes` module. Each subclass must define a :attr:`_fields_` attribute.  :attr:`_fields_` must be a list of *2-tuples*, containing a *field name* and a *field type*."
msgstr ""

msgid "The field type must be a :mod:`ctypes` type like :class:`c_int`, or any other derived :mod:`ctypes` type: structure, union, array, pointer."
msgstr ""

msgid "Here is a simple example of a POINT structure, which contains two integers named *x* and *y*, and also shows how to initialize a structure in the constructor::"
msgstr ""

msgid ">>> from ctypes import * >>> class POINT(Structure): ...     _fields_ = [(\"x\", c_int), ...                 (\"y\", c_int)] ... >>> point = POINT(10, 20) >>> print(point.x, point.y) 10 20 >>> point = POINT(y=5) >>> print(point.x, point.y) 0 5 >>> POINT(1, 2, 3) Traceback (most recent call last):   File \"<stdin>\", line 1, in ? ValueError: too many initializers >>>"
msgstr ""

msgid "You can, however, build much more complicated structures. Structures can itself contain other structures by using a structure as a field type."
msgstr ""

msgid "Here is a RECT structure which contains two POINTs named *upperleft* and *lowerright*::"
msgstr ""

msgid ">>> class RECT(Structure): ...     _fields_ = [(\"upperleft\", POINT), ...                 (\"lowerright\", POINT)] ... >>> rc = RECT(point) >>> print(rc.upperleft.x, rc.upperleft.y) 0 5 >>> print(rc.lowerright.x, rc.lowerright.y) 0 0 >>>"
msgstr ""

msgid "Nested structures can also be initialized in the constructor in several ways::"
msgstr ""

msgid ">>> r = RECT(POINT(1, 2), POINT(3, 4)) >>> r = RECT((1, 2), (3, 4))"
msgstr ""

msgid "Field :term:`descriptor`\\s can be retrieved from the *class*, they are useful for debugging because they can provide useful information::"
msgstr ""

msgid ">>> print(POINT.x) <Field type=c_long, ofs=0, size=4> >>> print(POINT.y) <Field type=c_long, ofs=4, size=4> >>>"
msgstr ""

msgid "Structure/union alignment and byte order"
msgstr ""

msgid "By default, Structure and Union fields are aligned in the same way the C compiler does it. It is possible to override this behavior be specifying a :attr:`_pack_` class attribute in the subclass definition. This must be set to a positive integer and specifies the maximum alignment for the fields. This is what ``#pragma pack(n)`` also does in MSVC."
msgstr ""

msgid ":mod:`ctypes` uses the native byte order for Structures and Unions.  To build structures with non-native byte order, you can use one of the :class:`BigEndianStructure`, :class:`LittleEndianStructure`, :class:`BigEndianUnion`, and :class:`LittleEndianUnion` base classes.  These classes cannot contain pointer fields."
msgstr ""

msgid "Bit fields in structures and unions"
msgstr ""

msgid "It is possible to create structures and unions containing bit fields. Bit fields are only possible for integer fields, the bit width is specified as the third item in the :attr:`_fields_` tuples::"
msgstr ""

msgid ">>> class Int(Structure): ...     _fields_ = [(\"first_16\", c_int, 16), ...                 (\"second_16\", c_int, 16)] ... >>> print(Int.first_16) <Field type=c_long, ofs=0:0, bits=16> >>> print(Int.second_16) <Field type=c_long, ofs=0:16, bits=16> >>>"
msgstr ""

msgid "Arrays"
msgstr ""

msgid "Arrays are sequences, containing a fixed number of instances of the same type."
msgstr ""

msgid "The recommended way to create array types is by multiplying a data type with a positive integer::"
msgstr ""

msgid "TenPointsArrayType = POINT * 10"
msgstr ""

msgid "Here is an example of an somewhat artificial data type, a structure containing 4 POINTs among other stuff::"
msgstr ""

msgid ">>> from ctypes import * >>> class POINT(Structure): ...    _fields_ = (\"x\", c_int), (\"y\", c_int) ... >>> class MyStruct(Structure): ...    _fields_ = [(\"a\", c_int), ...                (\"b\", c_float), ...                (\"point_array\", POINT * 4)] >>> >>> print(len(MyStruct().point_array)) 4 >>>"
msgstr ""

msgid "Instances are created in the usual way, by calling the class::"
msgstr ""

msgid "arr = TenPointsArrayType() for pt in arr:     print(pt.x, pt.y)"
msgstr ""

msgid "The above code print a series of ``0 0`` lines, because the array contents is initialized to zeros."
msgstr ""

msgid "Initializers of the correct type can also be specified::"
msgstr ""

msgid ">>> from ctypes import * >>> TenIntegers = c_int * 10 >>> ii = TenIntegers(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) >>> print(ii) <c_long_Array_10 object at 0x...> >>> for i in ii: print(i, end=\" \") ... 1 2 3 4 5 6 7 8 9 10 >>>"
msgstr ""

msgid "Pointers"
msgstr ""

msgid "Pointer instances are created by calling the :func:`pointer` function on a :mod:`ctypes` type::"
msgstr ""

msgid ">>> from ctypes import * >>> i = c_int(42) >>> pi = pointer(i) >>>"
msgstr ""

msgid "Pointer instances have a :attr:`contents` attribute which returns the object to which the pointer points, the ``i`` object above::"
msgstr ""

msgid ">>> pi.contents c_long(42) >>>"
msgstr ""

msgid "Note that :mod:`ctypes` does not have OOR (original object return), it constructs a new, equivalent object each time you retrieve an attribute::"
msgstr ""

msgid ">>> pi.contents is i False >>> pi.contents is pi.contents False >>>"
msgstr ""

msgid "Assigning another :class:`c_int` instance to the pointer's contents attribute would cause the pointer to point to the memory location where this is stored::"
msgstr ""

msgid ">>> i = c_int(99) >>> pi.contents = i >>> pi.contents c_long(99) >>>"
msgstr ""

msgid "Pointer instances can also be indexed with integers::"
msgstr ""

msgid ">>> pi[0] 99 >>>"
msgstr ""

msgid "Assigning to an integer index changes the pointed to value::"
msgstr ""

msgid ">>> print(i) c_long(99) >>> pi[0] = 22 >>> print(i) c_long(22) >>>"
msgstr ""

msgid "It is also possible to use indexes different from 0, but you must know what you're doing, just as in C: You can access or change arbitrary memory locations. Generally you only use this feature if you receive a pointer from a C function, and you *know* that the pointer actually points to an array instead of a single item."
msgstr ""

msgid "Behind the scenes, the :func:`pointer` function does more than simply create pointer instances, it has to create pointer *types* first. This is done with the :func:`POINTER` function, which accepts any :mod:`ctypes` type, and returns a new type::"
msgstr ""

msgid ">>> PI = POINTER(c_int) >>> PI <class 'ctypes.LP_c_long'> >>> PI(42) Traceback (most recent call last):   File \"<stdin>\", line 1, in ? TypeError: expected c_long instead of int >>> PI(c_int(42)) <ctypes.LP_c_long object at 0x...> >>>"
msgstr ""

msgid "Calling the pointer type without an argument creates a ``NULL`` pointer. ``NULL`` pointers have a ``False`` boolean value::"
msgstr ""

msgid ">>> null_ptr = POINTER(c_int)() >>> print(bool(null_ptr)) False >>>"
msgstr ""

msgid ":mod:`ctypes` checks for ``NULL`` when dereferencing pointers (but dereferencing invalid non-\\ ``NULL`` pointers would crash Python)::"
msgstr ""

msgid ">>> null_ptr[0] Traceback (most recent call last):     .... ValueError: NULL pointer access >>>  >>> null_ptr[0] = 1234 Traceback (most recent call last):     .... ValueError: NULL pointer access >>>"
msgstr ""

msgid "Type conversions"
msgstr ""

msgid "Usually, ctypes does strict type checking.  This means, if you have ``POINTER(c_int)`` in the :attr:`argtypes` list of a function or as the type of a member field in a structure definition, only instances of exactly the same type are accepted.  There are some exceptions to this rule, where ctypes accepts other objects.  For example, you can pass compatible array instances instead of pointer types.  So, for ``POINTER(c_int)``, ctypes accepts an array of c_int::"
msgstr ""

msgid ">>> class Bar(Structure): ...     _fields_ = [(\"count\", c_int), (\"values\", POINTER(c_int))] ... >>> bar = Bar() >>> bar.values = (c_int * 3)(1, 2, 3) >>> bar.count = 3 >>> for i in range(bar.count): ...     print(bar.values[i]) ... 1 2 3 >>>"
msgstr ""

msgid "To set a POINTER type field to ``NULL``, you can assign ``None``::"
msgstr ""

msgid ">>> bar.values = None >>>"
msgstr ""

msgid "Sometimes you have instances of incompatible types.  In C, you can cast one type into another type.  :mod:`ctypes` provides a :func:`cast` function which can be used in the same way.  The ``Bar`` structure defined above accepts ``POINTER(c_int)`` pointers or :class:`c_int` arrays for its ``values`` field, but not instances of other types::"
msgstr ""

msgid ">>> bar.values = (c_byte * 4)() Traceback (most recent call last):   File \"<stdin>\", line 1, in ? TypeError: incompatible types, c_byte_Array_4 instance instead of LP_c_long instance >>>"
msgstr ""

msgid "For these cases, the :func:`cast` function is handy."
msgstr ""

msgid "The :func:`cast` function can be used to cast a ctypes instance into a pointer to a different ctypes data type.  :func:`cast` takes two parameters, a ctypes object that is or can be converted to a pointer of some kind, and a ctypes pointer type.  It returns an instance of the second argument, which references the same memory block as the first argument::"
msgstr ""

msgid ">>> a = (c_byte * 4)() >>> cast(a, POINTER(c_int)) <ctypes.LP_c_long object at ...> >>>"
msgstr ""

msgid "So, :func:`cast` can be used to assign to the ``values`` field of ``Bar`` the structure::"
msgstr ""

msgid ">>> bar = Bar() >>> bar.values = cast((c_byte * 4)(), POINTER(c_int)) >>> print(bar.values[0]) 0 >>>"
msgstr ""

msgid "Incomplete Types"
msgstr ""

msgid "*Incomplete Types* are structures, unions or arrays whose members are not yet specified. In C, they are specified by forward declarations, which are defined later::"
msgstr ""

msgid "struct cell; /* forward declaration */  struct {     char *name;     struct cell *next; } cell;"
msgstr ""

msgid "The straightforward translation into ctypes code would be this, but it does not work::"
msgstr ""

msgid ">>> class cell(Structure): ...     _fields_ = [(\"name\", c_char_p), ...                 (\"next\", POINTER(cell))] ... Traceback (most recent call last):   File \"<stdin>\", line 1, in ?   File \"<stdin>\", line 2, in cell NameError: name 'cell' is not defined >>>"
msgstr ""

msgid "because the new ``class cell`` is not available in the class statement itself. In :mod:`ctypes`, we can define the ``cell`` class and set the :attr:`_fields_` attribute later, after the class statement::"
msgstr ""

msgid ">>> from ctypes import * >>> class cell(Structure): ...     pass ... >>> cell._fields_ = [(\"name\", c_char_p), ...                  (\"next\", POINTER(cell))] >>>"
msgstr ""

msgid "Lets try it. We create two instances of ``cell``, and let them point to each other, and finally follow the pointer chain a few times::"
msgstr ""

msgid ">>> c1 = cell() >>> c1.name = \"foo\" >>> c2 = cell() >>> c2.name = \"bar\" >>> c1.next = pointer(c2) >>> c2.next = pointer(c1) >>> p = c1 >>> for i in range(8): ...     print(p.name, end=\" \") ...     p = p.next[0] ... foo bar foo bar foo bar foo bar >>>"
msgstr ""

msgid "Callback functions"
msgstr ""

msgid ":mod:`ctypes` allows to create C callable function pointers from Python callables. These are sometimes called *callback functions*."
msgstr ""

msgid "First, you must create a class for the callback function, the class knows the calling convention, the return type, and the number and types of arguments this function will receive."
msgstr ""

msgid "The CFUNCTYPE factory function creates types for callback functions using the normal cdecl calling convention, and, on Windows, the WINFUNCTYPE factory function creates types for callback functions using the stdcall calling convention."
msgstr ""

msgid "Both of these factory functions are called with the result type as first argument, and the callback functions expected argument types as the remaining arguments."
msgstr ""

msgid "I will present an example here which uses the standard C library's :cfunc:`qsort` function, this is used to sort items with the help of a callback function.  :cfunc:`qsort` will be used to sort an array of integers::"
msgstr ""

msgid ">>> IntArray5 = c_int * 5 >>> ia = IntArray5(5, 1, 7, 33, 99) >>> qsort = libc.qsort >>> qsort.restype = None >>>"
msgstr ""

msgid ":func:`qsort` must be called with a pointer to the data to sort, the number of items in the data array, the size of one item, and a pointer to the comparison function, the callback. The callback will then be called with two pointers to items, and it must return a negative integer if the first item is smaller than the second, a zero if they are equal, and a positive integer else."
msgstr ""

msgid "So our callback function receives pointers to integers, and must return an integer. First we create the ``type`` for the callback function::"
msgstr ""

msgid ">>> CMPFUNC = CFUNCTYPE(c_int, POINTER(c_int), POINTER(c_int)) >>>"
msgstr ""

msgid "For the first implementation of the callback function, we simply print the arguments we get, and return 0 (incremental development ;-)::"
msgstr ""

msgid ">>> def py_cmp_func(a, b): ...     print(\"py_cmp_func\", a, b) ...     return 0 ... >>>"
msgstr ""

msgid "Create the C callable callback::"
msgstr ""

msgid ">>> cmp_func = CMPFUNC(py_cmp_func) >>>"
msgstr ""

msgid "And we're ready to go::"
msgstr ""

msgid ">>> qsort(ia, len(ia), sizeof(c_int), cmp_func) # doctest: +WINDOWS py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...> py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...> py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...> py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...> py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...> py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...> py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...> py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...> py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...> py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...> >>>"
msgstr ""

msgid "We know how to access the contents of a pointer, so lets redefine our callback::"
msgstr ""

msgid ">>> def py_cmp_func(a, b): ...     print(\"py_cmp_func\", a[0], b[0]) ...     return 0 ... >>> cmp_func = CMPFUNC(py_cmp_func) >>>"
msgstr ""

msgid "Here is what we get on Windows::"
msgstr ""

msgid ">>> qsort(ia, len(ia), sizeof(c_int), cmp_func) # doctest: +WINDOWS py_cmp_func 7 1 py_cmp_func 33 1 py_cmp_func 99 1 py_cmp_func 5 1 py_cmp_func 7 5 py_cmp_func 33 5 py_cmp_func 99 5 py_cmp_func 7 99 py_cmp_func 33 99 py_cmp_func 7 33 >>>"
msgstr ""

msgid "It is funny to see that on linux the sort function seems to work much more efficiently, it is doing less comparisons::"
msgstr ""

msgid ">>> qsort(ia, len(ia), sizeof(c_int), cmp_func) # doctest: +LINUX py_cmp_func 5 1 py_cmp_func 33 99 py_cmp_func 7 33 py_cmp_func 5 7 py_cmp_func 1 7 >>>"
msgstr ""

msgid "Ah, we're nearly done! The last step is to actually compare the two items and return a useful result::"
msgstr ""

msgid ">>> def py_cmp_func(a, b): ...     print(\"py_cmp_func\", a[0], b[0]) ...     return a[0] - b[0] ... >>>"
msgstr ""

msgid "Final run on Windows::"
msgstr ""

msgid ">>> qsort(ia, len(ia), sizeof(c_int), CMPFUNC(py_cmp_func)) # doctest: +WINDOWS py_cmp_func 33 7 py_cmp_func 99 33 py_cmp_func 5 99 py_cmp_func 1 99 py_cmp_func 33 7 py_cmp_func 1 33 py_cmp_func 5 33 py_cmp_func 5 7 py_cmp_func 1 7 py_cmp_func 5 1 >>>"
msgstr ""

msgid "and on Linux::"
msgstr ""

msgid ">>> qsort(ia, len(ia), sizeof(c_int), CMPFUNC(py_cmp_func)) # doctest: +LINUX py_cmp_func 5 1 py_cmp_func 33 99 py_cmp_func 7 33 py_cmp_func 1 7 py_cmp_func 5 7 >>>"
msgstr ""

msgid "It is quite interesting to see that the Windows :func:`qsort` function needs more comparisons than the linux version!"
msgstr ""

msgid "As we can easily check, our array is sorted now::"
msgstr ""

msgid ">>> for i in ia: print(i, end=\" \") ... 1 5 7 33 99 >>>"
msgstr ""

msgid "**Important note for callback functions:**"
msgstr ""

msgid "Make sure you keep references to CFUNCTYPE objects as long as they are used from C code. :mod:`ctypes` doesn't, and if you don't, they may be garbage collected, crashing your program when a callback is made."
msgstr ""

msgid "Accessing values exported from dlls"
msgstr ""

msgid "Some shared libraries not only export functions, they also export variables. An example in the Python library itself is the :cdata:`Py_OptimizeFlag`, an integer set to 0, 1, or 2, depending on the :option:`-O` or :option:`-OO` flag given on startup."
msgstr ""

msgid ":mod:`ctypes` can access values like this with the :meth:`in_dll` class methods of the type.  *pythonapi* is a predefined symbol giving access to the Python C api::"
msgstr ""

msgid ">>> opt_flag = c_int.in_dll(pythonapi, \"Py_OptimizeFlag\") >>> print(opt_flag) c_long(0) >>>"
msgstr ""

msgid "If the interpreter would have been started with :option:`-O`, the sample would have printed ``c_long(1)``, or ``c_long(2)`` if :option:`-OO` would have been specified."
msgstr ""

msgid "An extended example which also demonstrates the use of pointers accesses the :cdata:`PyImport_FrozenModules` pointer exported by Python."
msgstr ""

msgid "Quoting the docs for that value:"
msgstr ""

msgid "This pointer is initialized to point to an array of :ctype:`struct _frozen` records, terminated by one whose members are all *NULL* or zero.  When a frozen module is imported, it is searched in this table.  Third-party code could play tricks with this to provide a dynamically created collection of frozen modules."
msgstr ""

msgid "So manipulating this pointer could even prove useful. To restrict the example size, we show only how this table can be read with :mod:`ctypes`::"
msgstr ""

msgid ">>> from ctypes import * >>> >>> class struct_frozen(Structure): ...     _fields_ = [(\"name\", c_char_p), ...                 (\"code\", POINTER(c_ubyte)), ...                 (\"size\", c_int)] ... >>>"
msgstr ""

msgid "We have defined the :ctype:`struct _frozen` data type, so we can get the pointer to the table::"
msgstr ""

msgid ">>> FrozenTable = POINTER(struct_frozen) >>> table = FrozenTable.in_dll(pythonapi, \"PyImport_FrozenModules\") >>>"
msgstr ""

msgid "Since ``table`` is a ``pointer`` to the array of ``struct_frozen`` records, we can iterate over it, but we just have to make sure that our loop terminates, because pointers have no size. Sooner or later it would probably crash with an access violation or whatever, so it's better to break out of the loop when we hit the NULL entry::"
msgstr ""

msgid ">>> for item in table: ...    print(item.name, item.size) ...    if item.name is None: ...        break ... __hello__ 104 __phello__ -104 __phello__.spam 104 None 0 >>>"
msgstr ""

msgid "The fact that standard Python has a frozen module and a frozen package (indicated by the negative size member) is not well known, it is only used for testing. Try it out with ``import __hello__`` for example."
msgstr ""

msgid "Surprises"
msgstr ""

msgid "There are some edges in :mod:`ctypes` where you may be expect something else than what actually happens."
msgstr ""

msgid "Consider the following example::"
msgstr ""

msgid ">>> from ctypes import * >>> class POINT(Structure): ...     _fields_ = (\"x\", c_int), (\"y\", c_int) ... >>> class RECT(Structure): ...     _fields_ = (\"a\", POINT), (\"b\", POINT) ... >>> p1 = POINT(1, 2) >>> p2 = POINT(3, 4) >>> rc = RECT(p1, p2) >>> print(rc.a.x, rc.a.y, rc.b.x, rc.b.y) 1 2 3 4 >>> # now swap the two points >>> rc.a, rc.b = rc.b, rc.a >>> print(rc.a.x, rc.a.y, rc.b.x, rc.b.y) 3 4 3 4 >>>"
msgstr ""

msgid "Hm. We certainly expected the last statement to print ``3 4 1 2``. What happened? Here are the steps of the ``rc.a, rc.b = rc.b, rc.a`` line above::"
msgstr ""

msgid ">>> temp0, temp1 = rc.b, rc.a >>> rc.a = temp0 >>> rc.b = temp1 >>>"
msgstr ""

msgid "Note that ``temp0`` and ``temp1`` are objects still using the internal buffer of the ``rc`` object above. So executing ``rc.a = temp0`` copies the buffer contents of ``temp0`` into ``rc`` 's buffer.  This, in turn, changes the contents of ``temp1``. So, the last assignment ``rc.b = temp1``, doesn't have the expected effect."
msgstr ""

msgid "Keep in mind that retrieving sub-objects from Structure, Unions, and Arrays doesn't *copy* the sub-object, instead it retrieves a wrapper object accessing the root-object's underlying buffer."
msgstr ""

msgid "Another example that may behave different from what one would expect is this::"
msgstr ""

msgid ">>> s = c_char_p() >>> s.value = \"abc def ghi\" >>> s.value 'abc def ghi' >>> s.value is s.value False >>>"
msgstr ""

msgid "Why is it printing ``False``?  ctypes instances are objects containing a memory block plus some :term:`descriptor`\\s accessing the contents of the memory. Storing a Python object in the memory block does not store the object itself, instead the ``contents`` of the object is stored.  Accessing the contents again constructs a new Python object each time!"
msgstr ""

msgid "Variable-sized data types"
msgstr ""

msgid ":mod:`ctypes` provides some support for variable-sized arrays and structures."
msgstr ""

msgid "The :func:`resize` function can be used to resize the memory buffer of an existing ctypes object.  The function takes the object as first argument, and the requested size in bytes as the second argument.  The memory block cannot be made smaller than the natural memory block specified by the objects type, a :exc:`ValueError` is raised if this is tried::"
msgstr ""

msgid ">>> short_array = (c_short * 4)() >>> print(sizeof(short_array)) 8 >>> resize(short_array, 4) Traceback (most recent call last):     ... ValueError: minimum size is 8 >>> resize(short_array, 32) >>> sizeof(short_array) 32 >>> sizeof(type(short_array)) 8 >>>"
msgstr ""

msgid "This is nice and fine, but how would one access the additional elements contained in this array?  Since the type still only knows about 4 elements, we get errors accessing other elements::"
msgstr ""

msgid ">>> short_array[:] [0, 0, 0, 0] >>> short_array[7] Traceback (most recent call last):     ... IndexError: invalid index >>>"
msgstr ""

msgid "Another way to use variable-sized data types with :mod:`ctypes` is to use the dynamic nature of Python, and (re-)define the data type after the required size is already known, on a case by case basis."
msgstr ""

msgid "ctypes reference"
msgstr ""

msgid "Finding shared libraries"
msgstr ""

msgid "When programming in a compiled language, shared libraries are accessed when compiling/linking a program, and when the program is run."
msgstr ""

msgid "The purpose of the :func:`find_library` function is to locate a library in a way similar to what the compiler does (on platforms with several versions of a shared library the most recent should be loaded), while the ctypes library loaders act like when a program is run, and call the runtime loader directly."
msgstr ""

msgid "The :mod:`ctypes.util` module provides a function which can help to determine the library to load."
msgstr ""

msgid "Try to find a library and return a pathname.  *name* is the library name without any prefix like *lib*, suffix like ``.so``, ``.dylib`` or version number (this is the form used for the posix linker option :option:`-l`).  If no library can be found, returns ``None``."
msgstr ""

msgid "The exact functionality is system dependent."
msgstr ""

msgid "On Linux, :func:`find_library` tries to run external programs (``/sbin/ldconfig``, ``gcc``, and ``objdump``) to find the library file.  It returns the filename of the library file.  Here are some examples::"
msgstr ""

msgid ">>> from ctypes.util import find_library >>> find_library(\"m\") 'libm.so.6' >>> find_library(\"c\") 'libc.so.6' >>> find_library(\"bz2\") 'libbz2.so.1.0' >>>"
msgstr ""

msgid "On OS X, :func:`find_library` tries several predefined naming schemes and paths to locate the library, and returns a full pathname if successful::"
msgstr ""

msgid ">>> from ctypes.util import find_library >>> find_library(\"c\") '/usr/lib/libc.dylib' >>> find_library(\"m\") '/usr/lib/libm.dylib' >>> find_library(\"bz2\") '/usr/lib/libbz2.dylib' >>> find_library(\"AGL\") '/System/Library/Frameworks/AGL.framework/AGL' >>>"
msgstr ""

msgid "On Windows, :func:`find_library` searches along the system search path, and returns the full pathname, but since there is no predefined naming scheme a call like ``find_library(\"c\")`` will fail and return ``None``."
msgstr ""

msgid "If wrapping a shared library with :mod:`ctypes`, it *may* be better to determine the shared library name at development type, and hardcode that into the wrapper module instead of using :func:`find_library` to locate the library at runtime."
msgstr ""

msgid "Loading shared libraries"
msgstr ""

msgid "There are several ways to loaded shared libraries into the Python process.  One way is to instantiate one of the following classes:"
msgstr ""

msgid "Instances of this class represent loaded shared libraries. Functions in these libraries use the standard C calling convention, and are assumed to return :ctype:`int`."
msgstr ""

msgid "Windows only: Instances of this class represent loaded shared libraries, functions in these libraries use the ``stdcall`` calling convention, and are assumed to return the windows specific :class:`HRESULT` code.  :class:`HRESULT` values contain information specifying whether the function call failed or succeeded, together with additional error code.  If the return value signals a failure, an :class:`WindowsError` is automatically raised."
msgstr ""

msgid "Windows only: Instances of this class represent loaded shared libraries, functions in these libraries use the ``stdcall`` calling convention, and are assumed to return :ctype:`int` by default."
msgstr ""

msgid "On Windows CE only the standard calling convention is used, for convenience the :class:`WinDLL` and :class:`OleDLL` use the standard calling convention on this platform."
msgstr ""

msgid "The Python :term:`global interpreter lock` is released before calling any function exported by these libraries, and reacquired afterwards."
msgstr ""

msgid "Instances of this class behave like :class:`CDLL` instances, except that the Python GIL is *not* released during the function call, and after the function execution the Python error flag is checked. If the error flag is set, a Python exception is raised."
msgstr ""

msgid "Thus, this is only useful to call Python C api functions directly."
msgstr ""

msgid "All these classes can be instantiated by calling them with at least one argument, the pathname of the shared library.  If you have an existing handle to an already loaded shared library, it can be passed as the ``handle`` named parameter, otherwise the underlying platforms ``dlopen`` or ``LoadLibrary`` function is used to load the library into the process, and to get a handle to it."
msgstr ""

msgid "The *mode* parameter can be used to specify how the library is loaded.  For details, consult the :manpage:`dlopen(3)` manpage, on Windows, *mode* is ignored."
msgstr ""

msgid "The *use_errno* parameter, when set to True, enables a ctypes mechanism that allows to access the system :data:`errno` error number in a safe way. :mod:`ctypes` maintains a thread-local copy of the systems :data:`errno` variable; if you call foreign functions created with ``use_errno=True`` then the :data:`errno` value before the function call is swapped with the ctypes private copy, the same happens immediately after the function call."
msgstr ""

msgid "The function :func:`ctypes.get_errno` returns the value of the ctypes private copy, and the function :func:`ctypes.set_errno` changes the ctypes private copy to a new value and returns the former value."
msgstr ""

msgid "The *use_last_error* parameter, when set to True, enables the same mechanism for the Windows error code which is managed by the :func:`GetLastError` and :func:`SetLastError` Windows API functions; :func:`ctypes.get_last_error` and :func:`ctypes.set_last_error` are used to request and change the ctypes private copy of the windows error code."
msgstr ""

msgid "Flag to use as *mode* parameter.  On platforms where this flag is not available, it is defined as the integer zero."
msgstr ""

msgid "Flag to use as *mode* parameter.  On platforms where this is not available, it is the same as *RTLD_GLOBAL*."
msgstr ""

msgid "The default mode which is used to load shared libraries.  On OSX 10.3, this is *RTLD_GLOBAL*, otherwise it is the same as *RTLD_LOCAL*."
msgstr ""

msgid "Instances of these classes have no public methods, however :meth:`__getattr__` and :meth:`__getitem__` have special behavior: functions exported by the shared library can be accessed as attributes of by index.  Please note that both :meth:`__getattr__` and :meth:`__getitem__` cache their result, so calling them repeatedly returns the same object each time."
msgstr ""

msgid "The following public attributes are available, their name starts with an underscore to not clash with exported function names:"
msgstr ""

msgid "The system handle used to access the library."
msgstr ""

msgid "The name of the library passed in the constructor."
msgstr ""

msgid "Shared libraries can also be loaded by using one of the prefabricated objects, which are instances of the :class:`LibraryLoader` class, either by calling the :meth:`LoadLibrary` method, or by retrieving the library as attribute of the loader instance."
msgstr ""

msgid "Class which loads shared libraries.  *dlltype* should be one of the :class:`CDLL`, :class:`PyDLL`, :class:`WinDLL`, or :class:`OleDLL` types."
msgstr ""

msgid ":meth:`__getattr__` has special behavior: It allows to load a shared library by accessing it as attribute of a library loader instance.  The result is cached, so repeated attribute accesses return the same library each time."
msgstr ""

msgid "Load a shared library into the process and return it.  This method always returns a new instance of the library."
msgstr ""

msgid "These prefabricated library loaders are available:"
msgstr ""

msgid "Creates :class:`CDLL` instances."
msgstr ""

msgid "Windows only: Creates :class:`WinDLL` instances."
msgstr ""

msgid "Windows only: Creates :class:`OleDLL` instances."
msgstr ""

msgid "Creates :class:`PyDLL` instances."
msgstr ""

msgid "For accessing the C Python api directly, a ready-to-use Python shared library object is available:"
msgstr ""

msgid "An instance of :class:`PyDLL` that exposes Python C API functions as attributes.  Note that all these functions are assumed to return C :ctype:`int`, which is of course not always the truth, so you have to assign the correct :attr:`restype` attribute to use these functions."
msgstr ""

msgid "Foreign functions"
msgstr ""

msgid "As explained in the previous section, foreign functions can be accessed as attributes of loaded shared libraries.  The function objects created in this way by default accept any number of arguments, accept any ctypes data instances as arguments, and return the default result type specified by the library loader. They are instances of a private class:"
msgstr ""

msgid "Base class for C callable foreign functions."
msgstr ""

msgid "Instances of foreign functions are also C compatible data types; they represent C function pointers."
msgstr ""

msgid "This behavior can be customized by assigning to special attributes of the foreign function object."
msgstr ""

msgid "Assign a ctypes type to specify the result type of the foreign function. Use ``None`` for :ctype:`void`, a function not returning anything."
msgstr ""

msgid "It is possible to assign a callable Python object that is not a ctypes type, in this case the function is assumed to return a C :ctype:`int`, and the callable will be called with this integer, allowing to do further processing or error checking.  Using this is deprecated, for more flexible post processing or error checking use a ctypes data type as :attr:`restype` and assign a callable to the :attr:`errcheck` attribute."
msgstr ""

msgid "Assign a tuple of ctypes types to specify the argument types that the function accepts.  Functions using the ``stdcall`` calling convention can only be called with the same number of arguments as the length of this tuple; functions using the C calling convention accept additional, unspecified arguments as well."
msgstr ""

msgid "When a foreign function is called, each actual argument is passed to the :meth:`from_param` class method of the items in the :attr:`argtypes` tuple, this method allows to adapt the actual argument to an object that the foreign function accepts.  For example, a :class:`c_char_p` item in the :attr:`argtypes` tuple will convert a string passed as argument into a bytes object using ctypes conversion rules."
msgstr ""

msgid "New: It is now possible to put items in argtypes which are not ctypes types, but each item must have a :meth:`from_param` method which returns a value usable as argument (integer, string, ctypes instance).  This allows to define adapters that can adapt custom objects as function parameters."
msgstr ""

msgid "Assign a Python function or another callable to this attribute. The callable will be called with three or more arguments:"
msgstr ""

msgid "*result* is what the foreign function returns, as specified by the :attr:`restype` attribute."
msgstr ""

msgid "*func* is the foreign function object itself, this allows to reuse the same callable object to check or post process the results of several functions."
msgstr ""

msgid "*arguments* is a tuple containing the parameters originally passed to the function call, this allows to specialize the behavior on the arguments used."
msgstr ""

msgid "The object that this function returns will be returned from the foreign function call, but it can also check the result value and raise an exception if the foreign function call failed."
msgstr ""

msgid "This exception is raised when a foreign function call cannot convert one of the passed arguments."
msgstr ""

msgid "Function prototypes"
msgstr ""

msgid "Foreign functions can also be created by instantiating function prototypes. Function prototypes are similar to function prototypes in C; they describe a function (return type, argument types, calling convention) without defining an implementation.  The factory functions must be called with the desired result type and the argument types of the function."
msgstr ""

msgid "The returned function prototype creates functions that use the standard C calling convention.  The function will release the GIL during the call.  If *use_errno* is set to True, the ctypes private copy of the system :data:`errno` variable is exchanged with the real :data:`errno` value before and after the call; *use_last_error* does the same for the Windows error code."
msgstr ""

msgid "Windows only: The returned function prototype creates functions that use the ``stdcall`` calling convention, except on Windows CE where :func:`WINFUNCTYPE` is the same as :func:`CFUNCTYPE`.  The function will release the GIL during the call.  *use_errno* and *use_last_error* have the same meaning as above."
msgstr ""

msgid "The returned function prototype creates functions that use the Python calling convention.  The function will *not* release the GIL during the call."
msgstr ""

msgid "Function prototypes created by these factory functions can be instantiated in different ways, depending on the type and number of the parameters in the call:"
msgstr ""

msgid "Returns a foreign function at the specified address which must be an integer."
msgstr ""

msgid "Create a C callable function (a callback function) from a Python *callable*."
msgstr ""

msgid "Returns a foreign function exported by a shared library. *func_spec* must be a 2-tuple ``(name_or_ordinal, library)``. The first item is the name of the exported function as string, or the ordinal of the exported function as small integer.  The second item is the shared library instance."
msgstr ""

msgid "Returns a foreign function that will call a COM method. *vtbl_index* is the index into the virtual function table, a small non-negative integer. *name* is name of the COM method. *iid* is an optional pointer to the interface identifier which is used in extended error reporting."
msgstr ""

msgid "COM methods use a special calling convention: They require a pointer to the COM interface as first argument, in addition to those parameters that are specified in the :attr:`argtypes` tuple."
msgstr ""

msgid "The optional *paramflags* parameter creates foreign function wrappers with much more functionality than the features described above."
msgstr ""

msgid "*paramflags* must be a tuple of the same length as :attr:`argtypes`."
msgstr ""

msgid "Each item in this tuple contains further information about a parameter, it must be a tuple containing one, two, or three items."
msgstr ""

msgid "The first item is an integer containing a combination of direction flags for the parameter:"
msgstr ""

msgid "Specifies an input parameter to the function."
msgstr ""

msgid "Output parameter.  The foreign function fills in a value."
msgstr ""

msgid "Input parameter which defaults to the integer zero."
msgstr ""

msgid "The optional second item is the parameter name as string.  If this is specified, the foreign function can be called with named parameters."
msgstr ""

msgid "The optional third item is the default value for this parameter."
msgstr ""

msgid "This example demonstrates how to wrap the Windows ``MessageBoxA`` function so that it supports default parameters and named arguments. The C declaration from the windows header file is this::"
msgstr ""

msgid "WINUSERAPI int WINAPI MessageBoxA(     HWND hWnd ,     LPCSTR lpText,     LPCSTR lpCaption,     UINT uType);"
msgstr ""

msgid "Here is the wrapping with :mod:`ctypes`::"
msgstr ""

msgid ">>> from ctypes import c_int, WINFUNCTYPE, windll >>> from ctypes.wintypes import HWND, LPCSTR, UINT >>> prototype = WINFUNCTYPE(c_int, HWND, LPCSTR, LPCSTR, UINT) >>> paramflags = (1, \"hwnd\", 0), (1, \"text\", \"Hi\"), (1, \"caption\", None), (1, \"flags\", 0) >>> MessageBox = prototype((\"MessageBoxA\", windll.user32), paramflags) >>>"
msgstr ""

msgid "The MessageBox foreign function can now be called in these ways::"
msgstr ""

msgid ">>> MessageBox() >>> MessageBox(text=\"Spam, spam, spam\") >>> MessageBox(flags=2, text=\"foo bar\") >>>"
msgstr ""

msgid "A second example demonstrates output parameters.  The win32 ``GetWindowRect`` function retrieves the dimensions of a specified window by copying them into ``RECT`` structure that the caller has to supply.  Here is the C declaration::"
msgstr ""

msgid "WINUSERAPI BOOL WINAPI GetWindowRect(      HWND hWnd,      LPRECT lpRect);"
msgstr ""

msgid ">>> from ctypes import POINTER, WINFUNCTYPE, windll, WinError >>> from ctypes.wintypes import BOOL, HWND, RECT >>> prototype = WINFUNCTYPE(BOOL, HWND, POINTER(RECT)) >>> paramflags = (1, \"hwnd\"), (2, \"lprect\") >>> GetWindowRect = prototype((\"GetWindowRect\", windll.user32), paramflags) >>>"
msgstr ""

msgid "Functions with output parameters will automatically return the output parameter value if there is a single one, or a tuple containing the output parameter values when there are more than one, so the GetWindowRect function now returns a RECT instance, when called."
msgstr ""

msgid "Output parameters can be combined with the :attr:`errcheck` protocol to do further output processing and error checking.  The win32 ``GetWindowRect`` api function returns a ``BOOL`` to signal success or failure, so this function could do the error checking, and raises an exception when the api call failed::"
msgstr ""

msgid ">>> def errcheck(result, func, args): ...     if not result: ...         raise WinError() ...     return args ... >>> GetWindowRect.errcheck = errcheck >>>"
msgstr ""

msgid "If the :attr:`errcheck` function returns the argument tuple it receives unchanged, :mod:`ctypes` continues the normal processing it does on the output parameters.  If you want to return a tuple of window coordinates instead of a ``RECT`` instance, you can retrieve the fields in the function and return them instead, the normal processing will no longer take place::"
msgstr ""

msgid ">>> def errcheck(result, func, args): ...     if not result: ...         raise WinError() ...     rc = args[1] ...     return rc.left, rc.top, rc.bottom, rc.right ... >>> GetWindowRect.errcheck = errcheck >>>"
msgstr ""

msgid "Utility functions"
msgstr ""

msgid "Returns the address of the memory buffer as integer.  *obj* must be an instance of a ctypes type."
msgstr ""

msgid "Returns the alignment requirements of a ctypes type. *obj_or_type* must be a ctypes type or instance."
msgstr ""

msgid "Returns a light-weight pointer to *obj*, which must be an instance of a ctypes type.  *offset* defaults to zero, and must be an integer that will be added to the internal pointer value."
msgstr ""

msgid "``byref(obj, offset)`` corresponds to this C code::"
msgstr ""

msgid "(((char *)&obj) + offset)"
msgstr ""

msgid "The returned object can only be used as a foreign function call parameter. It behaves similar to ``pointer(obj)``, but the construction is a lot faster."
msgstr ""

msgid "This function is similar to the cast operator in C. It returns a new instance of *type* which points to the same memory block as *obj*.  *type* must be a pointer type, and *obj* must be an object that can be interpreted as a pointer."
msgstr ""

msgid "This function creates a mutable character buffer. The returned object is a ctypes array of :class:`c_char`."
msgstr ""

msgid "*init_or_size* must be an integer which specifies the size of the array, or a bytes object which will be used to initialize the array items."
msgstr ""

msgid "If a bytes object is specified as first argument, the buffer is made one item larger than its length so that the last element in the array is a NUL termination character. An integer can be passed as second argument which allows to specify the size of the array if the length of the bytes should not be used."
msgstr ""

msgid "If the first parameter is a string, it is converted into a bytes object according to ctypes conversion rules."
msgstr ""

msgid "This function creates a mutable unicode character buffer. The returned object is a ctypes array of :class:`c_wchar`."
msgstr ""

msgid "*init_or_size* must be an integer which specifies the size of the array, or a string which will be used to initialize the array items."
msgstr ""

msgid "If a string is specified as first argument, the buffer is made one item larger than the length of the string so that the last element in the array is a NUL termination character. An integer can be passed as second argument which allows to specify the size of the array if the length of the string should not be used."
msgstr ""

msgid "If the first parameter is a bytes object, it is converted into an unicode string according to ctypes conversion rules."
msgstr ""

msgid "Windows only: This function is a hook which allows to implement in-process COM servers with ctypes.  It is called from the DllCanUnloadNow function that the _ctypes extension dll exports."
msgstr ""

msgid "Windows only: This function is a hook which allows to implement in-process COM servers with ctypes.  It is called from the DllGetClassObject function that the ``_ctypes`` extension dll exports."
msgstr ""

msgid "Try to find a library and return a pathname.  *name* is the library name without any prefix like ``lib``, suffix like ``.so``, ``.dylib`` or version number (this is the form used for the posix linker option :option:`-l`).  If no library can be found, returns ``None``."
msgstr ""

msgid "Windows only: return the filename of the VC runtype library used by Python, and by the extension modules.  If the name of the library cannot be determined, ``None`` is returned."
msgstr ""

msgid "If you need to free memory, for example, allocated by an extension module with a call to the ``free(void *)``, it is important that you use the function in the same library that allocated the memory."
msgstr ""

msgid "Windows only: Returns a textual description of the error code *code*.  If no error code is specified, the last error code is used by calling the Windows api function GetLastError."
msgstr ""

msgid "Windows only: Returns the last error code set by Windows in the calling thread. This function calls the Windows `GetLastError()` function directly, it does not return the ctypes-private copy of the error code."
msgstr ""

msgid "Returns the current value of the ctypes-private copy of the system :data:`errno` variable in the calling thread."
msgstr ""

msgid "Windows only: returns the current value of the ctypes-private copy of the system :data:`LastError` variable in the calling thread."
msgstr ""

msgid "Same as the standard C memmove library function: copies *count* bytes from *src* to *dst*. *dst* and *src* must be integers or ctypes instances that can be converted to pointers."
msgstr ""

msgid "Same as the standard C memset library function: fills the memory block at address *dst* with *count* bytes of value *c*. *dst* must be an integer specifying an address, or a ctypes instance."
msgstr ""

msgid "This factory function creates and returns a new ctypes pointer type. Pointer types are cached an reused internally, so calling this function repeatedly is cheap. *type* must be a ctypes type."
msgstr ""

msgid "This function creates a new pointer instance, pointing to *obj*. The returned object is of the type ``POINTER(type(obj))``."
msgstr ""

msgid "Note: If you just want to pass a pointer to an object to a foreign function call, you should use ``byref(obj)`` which is much faster."
msgstr ""

msgid "This function resizes the internal memory buffer of *obj*, which must be an instance of a ctypes type.  It is not possible to make the buffer smaller than the native size of the objects type, as given by ``sizeof(type(obj))``, but it is possible to enlarge the buffer."
msgstr ""

msgid "This function sets the rules that ctypes objects use when converting between bytes objects and (unicode) strings. *encoding* must be a string specifying an encoding, like ``'utf-8'`` or ``'mbcs'``, *errors* must be a string specifying the error handling on encoding/decoding errors. Examples of possible values are ``'strict'``, ``'replace'``, or ``'ignore'``."
msgstr ""

msgid ":func:`set_conversion_mode` returns a 2-tuple containing the previous conversion rules. On windows, the initial conversion rules are ``('mbcs', 'ignore')``, on other systems ``('ascii', 'strict')``."
msgstr ""

msgid "You can set the *encoding* to ``'undefined'`` to completely disable automatic conversions."
msgstr ""

msgid "Set the current value of the ctypes-private copy of the system :data:`errno` variable in the calling thread to *value* and return the previous value."
msgstr ""

msgid "Windows only: set the current value of the ctypes-private copy of the system :data:`LastError` variable in the calling thread to *value* and return the previous value."
msgstr ""

msgid "Returns the size in bytes of a ctypes type or instance memory buffer. Does the same as the C ``sizeof()`` function."
msgstr ""

msgid "This function returns the C string starting at memory address address as a bytes object. If size is specified, it is used as size, otherwise the string is assumed to be zero-terminated."
msgstr ""

msgid "Windows only: this function is probably the worst-named thing in ctypes. It creates an instance of WindowsError.  If *code* is not specified, ``GetLastError`` is called to determine the error code. If *descr* is not specified, :func:`FormatError` is called to get a textual description of the error."
msgstr ""

msgid "This function returns the wide character string starting at memory address *address* as a string.  If *size* is specified, it is used as the number of characters of the string, otherwise the string is assumed to be zero-terminated."
msgstr ""

msgid "Data types"
msgstr ""

msgid "This non-public class is the common base class of all ctypes data types. Among other things, all ctypes type instances contain a memory block that hold C compatible data; the address of the memory block is returned by the :func:`addressof` helper function. Another instance variable is exposed as :attr:`_objects`; this contains other Python objects that need to be kept alive in case the memory block contains pointers."
msgstr ""

msgid "Common methods of ctypes data types, these are all class methods (to be exact, they are methods of the :term:`metaclass`):"
msgstr ""

msgid "This method returns a ctypes instance that shares the buffer of the *source* object.  The *source* object must support the writeable buffer interface.  The optional *offset* parameter specifies an offset into the source buffer in bytes; the default is zero.  If the source buffer is not large enough a :exc:`ValueError` is raised."
msgstr ""

msgid "This method creates a ctypes instance, copying the buffer from the *source* object buffer which must be readable.  The optional *offset* parameter specifies an offset into the source buffer in bytes; the default is zero.  If the source buffer is not large enough a :exc:`ValueError` is raised."
msgstr ""

msgid "This method returns a ctypes type instance using the memory specified by *address* which must be an integer."
msgstr ""

msgid "This method adapts *obj* to a ctypes type.  It is called with the actual object used in a foreign function call when the type is present in the foreign function's :attr:`argtypes` tuple; it must return an object that can be used as a function call parameter."
msgstr ""

msgid "All ctypes data types have a default implementation of this classmethod that normally returns *obj* if that is an instance of the type.  Some types accept other objects as well."
msgstr ""

msgid "This method returns a ctypes type instance exported by a shared library. *name* is the name of the symbol that exports the data, *library* is the loaded shared library."
msgstr ""

msgid "Common instance variables of ctypes data types:"
msgstr ""

msgid "Sometimes ctypes data instances do not own the memory block they contain, instead they share part of the memory block of a base object.  The :attr:`_b_base_` read-only member is the root ctypes object that owns the memory block."
msgstr ""

msgid "This read-only variable is true when the ctypes data instance has allocated the memory block itself, false otherwise."
msgstr ""

msgid "This member is either ``None`` or a dictionary containing Python objects that need to be kept alive so that the memory block contents is kept valid.  This object is only exposed for debugging; never modify the contents of this dictionary."
msgstr ""

msgid "This non-public class is the base class of all fundamental ctypes data types. It is mentioned here because it contains the common attributes of the fundamental ctypes data types.  :class:`_SimpleCData` is a subclass of :class:`_CData`, so it inherits their methods and attributes. ctypes data types that are not and do not contain pointers can now be pickled."
msgstr ""

msgid "Instances have a single attribute:"
msgstr ""

msgid "This attribute contains the actual value of the instance. For integer and pointer types, it is an integer, for character types, it is a single character bytes object or string, for character pointer types it is a Python bytes object or string."
msgstr ""

msgid "When the ``value`` attribute is retrieved from a ctypes instance, usually a new object is returned each time.  :mod:`ctypes` does *not* implement original object return, always a new object is constructed.  The same is true for all other ctypes object instances."
msgstr ""

msgid "Fundamental data types, when returned as foreign function call results, or, for example, by retrieving structure field members or array items, are transparently converted to native Python types.  In other words, if a foreign function has a :attr:`restype` of :class:`c_char_p`, you will always receive a Python bytes object, *not* a :class:`c_char_p` instance."
msgstr ""

msgid "Subclasses of fundamental data types do *not* inherit this behavior. So, if a foreign functions :attr:`restype` is a subclass of :class:`c_void_p`, you will receive an instance of this subclass from the function call. Of course, you can get the value of the pointer by accessing the ``value`` attribute."
msgstr ""

msgid "These are the fundamental ctypes data types:"
msgstr ""

msgid "Represents the C :ctype:`signed char` datatype, and interprets the value as small integer.  The constructor accepts an optional integer initializer; no overflow checking is done."
msgstr ""

msgid "Represents the C :ctype:`char` datatype, and interprets the value as a single character.  The constructor accepts an optional string initializer, the length of the string must be exactly one character."
msgstr ""

msgid "Represents the C :ctype:`char *` datatype when it points to a zero-terminated string.  For a general character pointer that may also point to binary data, ``POINTER(c_char)`` must be used.  The constructor accepts an integer address, or a bytes object."
msgstr ""

msgid "Represents the C :ctype:`double` datatype.  The constructor accepts an optional float initializer."
msgstr ""

msgid "Represents the C :ctype:`long double` datatype.  The constructor accepts an optional float initializer.  On platforms where ``sizeof(long double) == sizeof(double)`` it is an alias to :class:`c_double`."
msgstr ""

msgid "Represents the C :ctype:`float` datatype.  The constructor accepts an optional float initializer."
msgstr ""

msgid "Represents the C :ctype:`signed int` datatype.  The constructor accepts an optional integer initializer; no overflow checking is done.  On platforms where ``sizeof(int) == sizeof(long)`` it is an alias to :class:`c_long`."
msgstr ""

msgid "Represents the C 8-bit :ctype:`signed int` datatype.  Usually an alias for :class:`c_byte`."
msgstr ""

msgid "Represents the C 16-bit :ctype:`signed int` datatype.  Usually an alias for :class:`c_short`."
msgstr ""

msgid "Represents the C 32-bit :ctype:`signed int` datatype.  Usually an alias for :class:`c_int`."
msgstr ""

msgid "Represents the C 64-bit :ctype:`signed int` datatype.  Usually an alias for :class:`c_longlong`."
msgstr ""

msgid "Represents the C :ctype:`signed long` datatype.  The constructor accepts an optional integer initializer; no overflow checking is done."
msgstr ""

msgid "Represents the C :ctype:`signed long long` datatype.  The constructor accepts an optional integer initializer; no overflow checking is done."
msgstr ""

msgid "Represents the C :ctype:`signed short` datatype.  The constructor accepts an optional integer initializer; no overflow checking is done."
msgstr ""

msgid "Represents the C :ctype:`size_t` datatype."
msgstr ""

msgid "Represents the C :ctype:`ssize_t` datatype."
msgstr ""

msgid "Represents the C :ctype:`unsigned char` datatype, it interprets the value as small integer.  The constructor accepts an optional integer initializer; no overflow checking is done."
msgstr ""

msgid "Represents the C :ctype:`unsigned int` datatype.  The constructor accepts an optional integer initializer; no overflow checking is done.  On platforms where ``sizeof(int) == sizeof(long)`` it is an alias for :class:`c_ulong`."
msgstr ""

msgid "Represents the C 8-bit :ctype:`unsigned int` datatype.  Usually an alias for :class:`c_ubyte`."
msgstr ""

msgid "Represents the C 16-bit :ctype:`unsigned int` datatype.  Usually an alias for :class:`c_ushort`."
msgstr ""

msgid "Represents the C 32-bit :ctype:`unsigned int` datatype.  Usually an alias for :class:`c_uint`."
msgstr ""

msgid "Represents the C 64-bit :ctype:`unsigned int` datatype.  Usually an alias for :class:`c_ulonglong`."
msgstr ""

msgid "Represents the C :ctype:`unsigned long` datatype.  The constructor accepts an optional integer initializer; no overflow checking is done."
msgstr ""

msgid "Represents the C :ctype:`unsigned long long` datatype.  The constructor accepts an optional integer initializer; no overflow checking is done."
msgstr ""

msgid "Represents the C :ctype:`unsigned short` datatype.  The constructor accepts an optional integer initializer; no overflow checking is done."
msgstr ""

msgid "Represents the C :ctype:`void *` type.  The value is represented as integer. The constructor accepts an optional integer initializer."
msgstr ""

msgid "Represents the C :ctype:`wchar_t` datatype, and interprets the value as a single character unicode string.  The constructor accepts an optional string initializer, the length of the string must be exactly one character."
msgstr ""

msgid "Represents the C :ctype:`wchar_t *` datatype, which must be a pointer to a zero-terminated wide character string.  The constructor accepts an integer address, or a string."
msgstr ""

msgid "Represent the C :ctype:`bool` datatype (more accurately, :ctype:`_Bool` from C99).  Its value can be True or False, and the constructor accepts any object that has a truth value."
msgstr ""

msgid "Windows only: Represents a :ctype:`HRESULT` value, which contains success or error information for a function or method call."
msgstr ""

msgid "Represents the C :ctype:`PyObject *` datatype.  Calling this without an argument creates a ``NULL`` :ctype:`PyObject *` pointer."
msgstr ""

msgid "The :mod:`ctypes.wintypes` module provides quite some other Windows specific data types, for example :ctype:`HWND`, :ctype:`WPARAM`, or :ctype:`DWORD`.  Some useful structures like :ctype:`MSG` or :ctype:`RECT` are also defined."
msgstr ""

msgid "Structured data types"
msgstr ""

msgid "Abstract base class for unions in native byte order."
msgstr ""

msgid "Abstract base class for structures in *big endian* byte order."
msgstr ""

msgid "Abstract base class for structures in *little endian* byte order."
msgstr ""

msgid "Structures with non-native byte order cannot contain pointer type fields, or any other data types containing pointer type fields."
msgstr ""

msgid "Abstract base class for structures in *native* byte order."
msgstr ""

msgid "Concrete structure and union types must be created by subclassing one of these types, and at least define a :attr:`_fields_` class variable. :mod:`ctypes` will create :term:`descriptor`\\s which allow reading and writing the fields by direct attribute accesses.  These are the"
msgstr ""

msgid "A sequence defining the structure fields.  The items must be 2-tuples or 3-tuples.  The first item is the name of the field, the second item specifies the type of the field; it can be any ctypes data type."
msgstr ""

msgid "For integer type fields like :class:`c_int`, a third optional item can be given.  It must be a small positive integer defining the bit width of the field."
msgstr ""

msgid "Field names must be unique within one structure or union.  This is not checked, only one field can be accessed when names are repeated."
msgstr ""

msgid "It is possible to define the :attr:`_fields_` class variable *after* the class statement that defines the Structure subclass, this allows to create data types that directly or indirectly reference themselves::"
msgstr ""

msgid "class List(Structure):     pass List._fields_ = [(\"pnext\", POINTER(List)),                  ...                 ]"
msgstr ""

msgid "The :attr:`_fields_` class variable must, however, be defined before the type is first used (an instance is created, :func:`sizeof` is called on it, and so on).  Later assignments to the :attr:`_fields_` class variable will raise an AttributeError."
msgstr ""

msgid "Structure and union subclass constructors accept both positional and named arguments.  Positional arguments are used to initialize the fields in the same order as they appear in the :attr:`_fields_` definition, named arguments are used to initialize the fields with the corresponding name."
msgstr ""

msgid "It is possible to defined sub-subclasses of structure types, they inherit the fields of the base class plus the :attr:`_fields_` defined in the sub-subclass, if any."
msgstr ""

msgid "An optional small integer that allows to override the alignment of structure fields in the instance.  :attr:`_pack_` must already be defined when :attr:`_fields_` is assigned, otherwise it will have no effect."
msgstr ""

msgid "An optional sequence that lists the names of unnamed (anonymous) fields. :attr:`_anonymous_` must be already defined when :attr:`_fields_` is assigned, otherwise it will have no effect."
msgstr ""

msgid "The fields listed in this variable must be structure or union type fields. :mod:`ctypes` will create descriptors in the structure type that allows to access the nested fields directly, without the need to create the structure or union field."
msgstr ""

msgid "Here is an example type (Windows)::"
msgstr ""

msgid "class _U(Union):     _fields_ = [(\"lptdesc\", POINTER(TYPEDESC)),                 (\"lpadesc\", POINTER(ARRAYDESC)),                 (\"hreftype\", HREFTYPE)]  class TYPEDESC(Structure):     _anonymous_ = (\"u\",)     _fields_ = [(\"u\", _U),                 (\"vt\", VARTYPE)]"
msgstr ""

msgid "The ``TYPEDESC`` structure describes a COM data type, the ``vt`` field specifies which one of the union fields is valid.  Since the ``u`` field is defined as anonymous field, it is now possible to access the members directly off the TYPEDESC instance. ``td.lptdesc`` and ``td.u.lptdesc`` are equivalent, but the former is faster since it does not need to create a temporary union instance::"
msgstr ""

msgid "td = TYPEDESC() td.vt = VT_PTR td.lptdesc = POINTER(some_type) td.u.lptdesc = POINTER(some_type)"
msgstr ""

msgid "It is possible to defined sub-subclasses of structures, they inherit the fields of the base class.  If the subclass definition has a separate :attr:`_fields_` variable, the fields specified in this are appended to the fields of the base class."
msgstr ""

msgid "Structure and union constructors accept both positional and keyword arguments.  Positional arguments are used to initialize member fields in the same order as they are appear in :attr:`_fields_`.  Keyword arguments in the constructor are interpreted as attribute assignments, so they will initialize :attr:`_fields_` with the same name, or create new attributes for names not present in :attr:`_fields_`."
msgstr ""

msgid "Arrays and pointers"
msgstr ""

msgid "Not yet written - please see the sections :ref:`ctypes-pointers` and section :ref:`ctypes-arrays` in the tutorial."
msgstr ""

msgid ":mod:`curses` --- Terminal handling for character-cell displays"
msgstr ""

msgid "The :mod:`curses` module provides an interface to the curses library, the de-facto standard for portable advanced terminal handling."
msgstr ""

msgid "While curses is most widely used in the Unix environment, versions are available for DOS, OS/2, and possibly other systems as well.  This extension module is designed to match the API of ncurses, an open-source curses library hosted on Linux and the BSD variants of Unix."
msgstr ""

msgid "Since version 5.4, the ncurses library decides how to interpret non-ASCII data using the ``nl_langinfo`` function.  That means that you have to call :func:`locale.setlocale` in the application and encode Unicode strings using one of the system's available encodings.  This example uses the system's default encoding::"
msgstr ""

msgid "import locale locale.setlocale(locale.LC_ALL, '') code = locale.getpreferredencoding()"
msgstr ""

msgid "Then use *code* as the encoding for :meth:`str.encode` calls."
msgstr ""

msgid "Utilities for working with ASCII characters, regardless of your locale settings."
msgstr ""

msgid "A panel stack extension that adds depth to  curses windows."
msgstr ""

msgid "Editable text widget for curses supporting  :program:`Emacs`\\ -like bindings."
msgstr ""

msgid "Convenience function to ensure proper terminal setup and resetting on application entry and exit."
msgstr ""

msgid "Tutorial material on using curses with Python, by Andrew Kuchling and Eric Raymond."
msgstr ""

msgid "The :file:`Demo/curses/` directory in the Python source distribution contains some example programs using the curses bindings provided by this module."
msgstr ""

msgid "The module :mod:`curses` defines the following exception:"
msgstr ""

msgid "Exception raised when a curses library function returns an error."
msgstr ""

msgid "Whenever *x* or *y* arguments to a function or a method are optional, they default to the current cursor location. Whenever *attr* is optional, it defaults to :const:`A_NORMAL`."
msgstr ""

msgid "The module :mod:`curses` defines the following functions:"
msgstr ""

msgid "Returns the output speed of the terminal in bits per second.  On software terminal emulators it will have a fixed high value. Included for historical reasons; in former times, it was used to  write output loops for time delays and occasionally to change interfaces depending on the line speed."
msgstr ""

msgid "Emit a short attention sound."
msgstr ""

msgid "Returns true or false, depending on whether the programmer can change the colors displayed by the terminal."
msgstr ""

msgid "Enter cbreak mode.  In cbreak mode (sometimes called \"rare\" mode) normal tty line buffering is turned off and characters are available to be read one by one. However, unlike raw mode, special characters (interrupt, quit, suspend, and flow control) retain their effects on the tty driver and calling program.  Calling first :func:`raw` then :func:`cbreak` leaves the terminal in cbreak mode."
msgstr ""

msgid "Returns the intensity of the red, green, and blue (RGB) components in the color *color_number*, which must be between ``0`` and :const:`COLORS`.  A 3-tuple is returned, containing the R,G,B values for the given color, which will be between ``0`` (no component) and ``1000`` (maximum amount of component)."
msgstr ""

msgid "Returns the attribute value for displaying text in the specified color.  This attribute value can be combined with :const:`A_STANDOUT`, :const:`A_REVERSE`, and the other :const:`A_\\*` attributes.  :func:`pair_number` is the counterpart to this function."
msgstr ""

msgid "Sets the cursor state.  *visibility* can be set to 0, 1, or 2, for invisible, normal, or very visible.  If the terminal supports the visibility requested, the previous cursor state is returned; otherwise, an exception is raised.  On many terminals, the \"visible\" mode is an underline cursor and the \"very visible\" mode is a block cursor."
msgstr ""

msgid "Saves the current terminal mode as the \"program\" mode, the mode when the running program is using curses.  (Its counterpart is the \"shell\" mode, for when the program is not in curses.)  Subsequent calls to :func:`reset_prog_mode` will restore this mode."
msgstr ""

msgid "Saves the current terminal mode as the \"shell\" mode, the mode when the running program is not using curses.  (Its counterpart is the \"program\" mode, when the program is using curses capabilities.) Subsequent calls to :func:`reset_shell_mode` will restore this mode."
msgstr ""

msgid "Inserts an *ms* millisecond pause in output."
msgstr ""

msgid "Update the physical screen.  The curses library keeps two data structures, one representing the current physical screen contents and a virtual screen representing the desired next state.  The :func:`doupdate` ground updates the physical screen to match the virtual screen."
msgstr ""

msgid "The virtual screen may be updated by a :meth:`noutrefresh` call after write operations such as :meth:`addstr` have been performed on a window.  The normal :meth:`refresh` call is simply :meth:`noutrefresh` followed by :func:`doupdate`; if you have to update multiple windows, you can speed performance and perhaps reduce screen flicker by issuing :meth:`noutrefresh` calls on all windows, followed by a single :func:`doupdate`."
msgstr ""

msgid "Enter echo mode.  In echo mode, each character input is echoed to the screen as it is entered."
msgstr ""

msgid "De-initialize the library, and return terminal to normal status."
msgstr ""

msgid "Returns the user's current erase character.  Under Unix operating systems this is a property of the controlling tty of the curses program, and is not set by the curses library itself."
msgstr ""

msgid "The :func:`.filter` routine, if used, must be called before :func:`initscr` is called.  The effect is that, during those calls, LINES is set to 1; the capabilities clear, cup, cud, cud1, cuu1, cuu, vpa are disabled; and the home string is set to the value of cr. The effect is that the cursor is confined to the current line, and so are screen updates.  This may be used for enabling character-at-a-time  line editing without touching the rest of the screen."
msgstr ""

msgid "Flash the screen.  That is, change it to reverse-video and then change it back in a short interval.  Some people prefer such as 'visible bell' to the audible attention signal produced by :func:`beep`."
msgstr ""

msgid "Flush all input buffers.  This throws away any  typeahead  that  has been typed by the user and has not yet been processed by the program."
msgstr ""

msgid "After :meth:`getch` returns :const:`KEY_MOUSE` to signal a mouse event, this method should be call to retrieve the queued mouse event, represented as a 5-tuple ``(id, x, y, z, bstate)``. *id* is an ID value used to distinguish multiple devices, and *x*, *y*, *z* are the event's coordinates.  (*z* is currently unused.).  *bstate* is an integer value whose bits will be set to indicate the type of event, and will be the bitwise OR of one or more of the following constants, where *n* is the button number from 1 to 4: :const:`BUTTONn_PRESSED`, :const:`BUTTONn_RELEASED`, :const:`BUTTONn_CLICKED`, :const:`BUTTONn_DOUBLE_CLICKED`, :const:`BUTTONn_TRIPLE_CLICKED`, :const:`BUTTON_SHIFT`, :const:`BUTTON_CTRL`, :const:`BUTTON_ALT`."
msgstr ""

msgid "Returns the current coordinates of the virtual screen cursor in y and x.  If leaveok is currently true, then -1,-1 is returned."
msgstr ""

msgid "Reads window related data stored in the file by an earlier :func:`putwin` call. The routine then creates and initializes a new window using that data, returning the new window object."
msgstr ""

msgid "Returns true if the terminal can display colors; otherwise, it returns false."
msgstr ""

msgid "Returns true if the terminal has insert- and delete- character capabilities. This function is included for historical reasons only, as all modern software terminal emulators have such capabilities."
msgstr ""

msgid "Returns true if the terminal has insert- and delete-line  capabilities,  or  can simulate  them  using scrolling regions. This function is included for historical reasons only, as all modern software terminal emulators have such capabilities."
msgstr ""

msgid "Takes a key value *ch*, and returns true if the current terminal type recognizes a key with that value."
msgstr ""

msgid "Used for half-delay mode, which is similar to cbreak mode in that characters typed by the user are immediately available to the program. However, after blocking for *tenths* tenths of seconds, an exception is raised if nothing has been typed.  The value of *tenths* must be a number between 1 and 255.  Use :func:`nocbreak` to leave half-delay mode."
msgstr ""

msgid "Changes the definition of a color, taking the number of the color to be changed followed by three RGB values (for the amounts of red, green, and blue components).  The value of *color_number* must be between ``0`` and :const:`COLORS`.  Each of *r*, *g*, *b*, must be a value between ``0`` and ``1000``.  When :func:`init_color` is used, all occurrences of that color on the screen immediately change to the new definition.  This function is a no-op on most terminals; it is active only if :func:`can_change_color` returns ``1``."
msgstr ""

msgid "Changes the definition of a color-pair.  It takes three arguments: the number of the color-pair to be changed, the foreground color number, and the background color number.  The value of *pair_number* must be between ``1`` and ``COLOR_PAIRS - 1`` (the ``0`` color pair is wired to white on black and cannot be changed).  The value of *fg* and *bg* arguments must be between ``0`` and :const:`COLORS`.  If the color-pair was previously initialized, the screen is refreshed and all occurrences of that color-pair are changed to the new definition."
msgstr ""

msgid "Initialize the library. Returns a :class:`WindowObject` which represents the whole screen."
msgstr ""

msgid "If there is an error opening the terminal, the underlying curses library may cause the interpreter to exit."
msgstr ""

msgid "Returns true if :func:`endwin` has been called (that is, the  curses library has been deinitialized)."
msgstr ""

msgid "Return the name of the key numbered *k*.  The name of a key generating printable ASCII character is the key's character.  The name of a control-key combination is a two-character string consisting of a caret followed by the corresponding printable ASCII character.  The name of an alt-key combination (128-255) is a string consisting of the prefix 'M-' followed by the name of the corresponding ASCII character."
msgstr ""

msgid "Returns the user's current line kill character. Under Unix operating systems this is a property of the controlling tty of the curses program, and is not set by the curses library itself."
msgstr ""

msgid "Returns a string containing the terminfo long name field describing the current terminal.  The maximum length of a verbose description is 128 characters.  It is defined only after the call to :func:`initscr`."
msgstr ""

msgid "If *yes* is 1, allow 8-bit characters to be input. If *yes* is 0,  allow only 7-bit chars."
msgstr ""

msgid "Sets the maximum time in milliseconds that can elapse between press and release events in order for them to be recognized as a click, and returns the previous interval value.  The default value is 200 msec, or one fifth of a second."
msgstr ""

msgid "Sets the mouse events to be reported, and returns a tuple ``(availmask, oldmask)``.   *availmask* indicates which of the specified mouse events can be reported; on complete failure it returns 0.  *oldmask* is the previous value of the given window's mouse event mask.  If this function is never called, no mouse events are ever reported."
msgstr ""

msgid "Sleep for *ms* milliseconds."
msgstr ""

msgid "Creates and returns a pointer to a new pad data structure with the given number of lines and columns.  A pad is returned as a window object."
msgstr ""

msgid "A pad is like a window, except that it is not restricted by the screen size, and is not necessarily associated with a particular part of the screen.  Pads can be used when a large window is needed, and only a part of the window will be on the screen at one time.  Automatic refreshes of pads (such as from scrolling or echoing of input) do not occur.  The :meth:`refresh` and :meth:`noutrefresh` methods of a pad require 6 arguments to specify the part of the pad to be displayed and the location on the screen to be used for the display. The arguments are pminrow, pmincol, sminrow, smincol, smaxrow, smaxcol; the p arguments refer to the upper left corner of the pad region to be displayed and the s arguments define a clipping box on the screen within which the pad region is to be displayed."
msgstr ""

msgid "Return a new window, whose left-upper corner is at  ``(begin_y, begin_x)``, and whose height/width is  *nlines*/*ncols*."
msgstr ""

msgid "By default, the window will extend from the  specified position to the lower right corner of the screen."
msgstr ""

msgid "Enter newline mode.  This mode translates the return key into newline on input, and translates newline into return and line-feed on output. Newline mode is initially on."
msgstr ""

msgid "Leave cbreak mode.  Return to normal \"cooked\" mode with line buffering."
msgstr ""

msgid "Leave echo mode.  Echoing of input characters is turned off."
msgstr ""

msgid "Leave newline mode.  Disable translation of return into newline on input, and disable low-level translation of newline into newline/return on output (but this does not change the behavior of ``addch('\\n')``, which always does the equivalent of return and line feed on the virtual screen).  With translation off, curses can sometimes speed up vertical motion a little; also, it will be able to detect the return key on input."
msgstr ""

msgid "When the noqiflush routine is used, normal flush of input and output queues associated with the INTR, QUIT and SUSP characters will not be done.  You may want to call :func:`noqiflush` in a signal handler if you want output to continue as though the interrupt had not occurred, after the handler exits."
msgstr ""

msgid "Leave raw mode. Return to normal \"cooked\" mode with line buffering."
msgstr ""

msgid "Returns a tuple ``(fg, bg)`` containing the colors for the requested color pair. The value of *pair_number* must be between ``1`` and ``COLOR_PAIRS - 1``."
msgstr ""

msgid "Returns the number of the color-pair set by the attribute value *attr*. :func:`color_pair` is the counterpart to this function."
msgstr ""

msgid "Equivalent to ``tputs(str, 1, putchar)``; emits the value of a specified terminfo capability for the current terminal.  Note that the output of putp always goes to standard output."
msgstr ""

msgid "If *flag* is false, the effect is the same as calling :func:`noqiflush`. If *flag* is true, or no argument is provided, the queues will be flushed when these control characters are read."
msgstr ""

msgid "Enter raw mode.  In raw mode, normal line buffering and  processing of interrupt, quit, suspend, and flow control keys are turned off; characters are presented to curses input functions one by one."
msgstr ""

msgid "Restores the  terminal  to \"program\" mode, as previously saved  by :func:`def_prog_mode`."
msgstr ""

msgid "Restores the  terminal  to \"shell\" mode, as previously saved  by :func:`def_shell_mode`."
msgstr ""

msgid "Sets the virtual screen cursor to *y*, *x*. If *y* and *x* are both -1, then leaveok is set."
msgstr ""

msgid "Initializes the terminal.  *termstr* is a string giving the terminal name; if omitted, the value of the TERM environment variable will be used.  *fd* is the file descriptor to which any initialization sequences will be sent; if not supplied, the file descriptor for ``sys.stdout`` will be used."
msgstr ""

msgid "Must be called if the programmer wants to use colors, and before any other color manipulation routine is called.  It is good practice to call this routine right after :func:`initscr`."
msgstr ""

msgid ":func:`start_color` initializes eight basic colors (black, red,  green, yellow, blue, magenta, cyan, and white), and two global variables in the :mod:`curses` module, :const:`COLORS` and :const:`COLOR_PAIRS`, containing the maximum number of colors and color-pairs the terminal can support.  It also restores the colors on the terminal to the values they had when the terminal was just turned on."
msgstr ""

msgid "Returns a logical OR of all video attributes supported by the terminal.  This information is useful when a curses program needs complete control over the appearance of the screen."
msgstr ""

msgid "Returns the value of the environment variable TERM, truncated to 14 characters."
msgstr ""

msgid "Returns the value of the Boolean capability corresponding to the terminfo capability name *capname*.  The value ``-1`` is returned if *capname* is not a Boolean capability, or ``0`` if it is canceled or absent from the terminal description."
msgstr ""

msgid "Returns the value of the numeric capability corresponding to the terminfo capability name *capname*.  The value ``-2`` is returned if *capname* is not a numeric capability, or ``-1`` if it is canceled or absent from the terminal description."
msgstr ""

msgid "Returns the value of the string capability corresponding to the terminfo capability name *capname*.  ``None`` is returned if *capname* is not a string capability, or is canceled or absent from the terminal description."
msgstr ""

msgid "Instantiates the string *str* with the supplied parameters, where  *str* should be a parameterized string obtained from the terminfo  database.  E.g. ``tparm(tigetstr(\"cup\"), 5, 3)`` could result in  ``'\\033[6;4H'``, the exact result depending on terminal type."
msgstr ""

msgid "Specifies that the file descriptor *fd* be used for typeahead checking.  If *fd* is ``-1``, then no typeahead checking is done."
msgstr ""

msgid "The curses library does \"line-breakout optimization\" by looking for typeahead periodically while updating the screen.  If input is found, and it is coming from a tty, the current update is postponed until refresh or doupdate is called again, allowing faster response to commands typed in advance. This function allows specifying a different file descriptor for typeahead checking."
msgstr ""

msgid "Returns a string which is a printable representation of the character *ch*. Control characters are displayed as a caret followed by the character, for example as ``^C``. Printing characters are left as they are."
msgstr ""

msgid "Push *ch* so the next :meth:`getch` will return it."
msgstr ""

msgid "Only one *ch* can be pushed before :meth:`getch` is called."
msgstr ""

msgid "Push a :const:`KEY_MOUSE` event onto the input queue, associating the given state data with it."
msgstr ""

msgid "If used, this function should be called before :func:`initscr` or newterm are called.  When *flag* is false, the values of lines and columns specified in the terminfo database will be used, even if environment variables :envvar:`LINES` and :envvar:`COLUMNS` (used by default) are set, or if curses is running in a window (in which case default behavior would be to use the window size if :envvar:`LINES` and :envvar:`COLUMNS` are not set)."
msgstr ""

msgid "Allow use of default values for colors on terminals supporting this feature. Use this to support transparency in your application.  The default color is assigned to the color number -1. After calling this function,  ``init_pair(x, curses.COLOR_RED, -1)`` initializes, for instance, color pair *x* to a red foreground color on the default background."
msgstr ""

msgid "Window Objects"
msgstr ""

msgid "Window objects, as returned by :func:`initscr` and :func:`newwin` above, have the following methods:"
msgstr ""

msgid "A *character* means a C character (an ASCII code), rather then a Python character (a string of length 1). (This note is true whenever the documentation mentions a character.) The built-in :func:`ord` is handy for conveying strings to codes."
msgstr ""

msgid "Paint character *ch* at ``(y, x)`` with attributes *attr*, overwriting any character previously painter at that location.  By default, the character position and attributes are the current settings for the window object."
msgstr ""

msgid "Paint at most *n* characters of the  string *str* at ``(y, x)`` with attributes *attr*, overwriting anything previously on the display."
msgstr ""

msgid "Paint the string *str* at ``(y, x)`` with attributes *attr*, overwriting anything previously on the display."
msgstr ""

msgid "Remove attribute *attr* from the \"background\" set applied to all writes to the current window."
msgstr ""

msgid "Add attribute *attr* from the \"background\" set applied to all writes to the current window."
msgstr ""

msgid "Set the \"background\" set of attributes to *attr*.  This set is initially 0 (no attributes)."
msgstr ""

msgid "Sets the background property of the window to the character *ch*, with attributes *attr*.  The change is then applied to every character position in that window:"
msgstr ""

msgid "The attribute of every character in the window  is changed to the new background attribute."
msgstr ""

msgid "Wherever  the  former background character appears, it is changed to the new background character."
msgstr ""

msgid "Sets the window's background.  A window's background consists of a character and any combination of attributes.  The attribute part of the background is combined (OR'ed) with all non-blank characters that are written into the window.  Both the character and attribute parts of the background are combined with the blank characters.  The background becomes a property of the character and moves with the character through any scrolling and insert/delete line/character operations."
msgstr ""

msgid "Draw a border around the edges of the window. Each parameter specifies  the character to use for a specific part of the border; see the table below for more details.  The characters can be specified as integers or as one-character strings."
msgstr ""

msgid "A ``0`` value for any parameter will cause the default character to be used for that parameter.  Keyword parameters can *not* be used.  The defaults are listed in this table:"
msgstr ""

msgid "Parameter"
msgstr ""

msgid "Default value"
msgstr ""

msgid "*ls*"
msgstr ""

msgid "Left side"
msgstr ""

msgid ":const:`ACS_VLINE`"
msgstr ""

msgid "*rs*"
msgstr ""

msgid "Right side"
msgstr ""

msgid "*ts*"
msgstr ""

msgid "Top"
msgstr ""

msgid ":const:`ACS_HLINE`"
msgstr ""

msgid "*bs*"
msgstr ""

msgid "Bottom"
msgstr ""

msgid "*tl*"
msgstr ""

msgid "Upper-left corner"
msgstr ""

msgid ":const:`ACS_ULCORNER`"
msgstr ""

msgid "*tr*"
msgstr ""

msgid "Upper-right corner"
msgstr ""

msgid ":const:`ACS_URCORNER`"
msgstr ""

msgid "*bl*"
msgstr ""

msgid "Bottom-left corner"
msgstr ""

msgid ":const:`ACS_LLCORNER`"
msgstr ""

msgid "*br*"
msgstr ""

msgid "Bottom-right corner"
msgstr ""

msgid ":const:`ACS_LRCORNER`"
msgstr ""

msgid "Similar to :meth:`border`, but both *ls* and *rs* are *vertch* and both *ts* and bs are *horch*.  The default corner characters are always used by this function."
msgstr ""

msgid "Sets the attributes of *num* characters at the current cursor position, or at position ``(y, x)`` if supplied. If no value of *num* is given or *num* = -1, the attribute will  be set on all the characters to the end of the line.  This function does not move the cursor. The changed line will be touched using the :meth:`touchline` method so that the contents will be redisplayed by the next window refresh."
msgstr ""

msgid "Like :meth:`erase`, but also causes the whole window to be repainted upon next call to :meth:`refresh`."
msgstr ""

msgid "If *yes* is 1, the next call to :meth:`refresh` will clear the window completely."
msgstr ""

msgid "Erase from cursor to the end of the window: all lines below the cursor are deleted, and then the equivalent of :meth:`clrtoeol` is performed."
msgstr ""

msgid "Erase from cursor to the end of the line."
msgstr ""

msgid "Updates the current cursor position of all the ancestors of the window to reflect the current cursor position of the window."
msgstr ""

msgid "Delete any character at ``(y, x)``."
msgstr ""

msgid "Delete the line under the cursor. All following lines are moved up by 1 line."
msgstr ""

msgid "An abbreviation for \"derive window\", :meth:`derwin` is the same as calling :meth:`subwin`, except that *begin_y* and *begin_x* are relative to the origin of the window, rather than relative to the entire screen.  Returns a window object for the derived window."
msgstr ""

msgid "Add character *ch* with attribute *attr*, and immediately  call :meth:`refresh` on the window."
msgstr ""

msgid "Tests whether the given pair of screen-relative character-cell coordinates are enclosed by the given window, returning true or false.  It is useful for determining what subset of the screen windows enclose the location of a mouse event."
msgstr ""

msgid "Clear the window."
msgstr ""

msgid "Return a tuple ``(y, x)`` of co-ordinates of upper-left corner."
msgstr ""

msgid "Get a character. Note that the integer returned does *not* have to be in ASCII range: function keys, keypad keys and so on return numbers higher than 256. In no-delay mode, -1 is returned if there is no input, else :func:`getch` waits until a key is pressed."
msgstr ""

msgid "Get a character, returning a string instead of an integer, as :meth:`getch` does. Function keys, keypad keys and so on return a multibyte string containing the key name.  In no-delay mode, an exception is raised if there is no input."
msgstr ""

msgid "Return a tuple ``(y, x)`` of the height and width of the window."
msgstr ""

msgid "Returns the beginning coordinates of this window relative to its parent window into two integer variables y and x.  Returns ``-1,-1`` if this window has no parent."
msgstr ""

msgid "Read a string from the user, with primitive line editing capacity."
msgstr ""

msgid "Return a tuple ``(y, x)`` of current cursor position  relative to the window's upper-left corner."
msgstr ""

msgid "Display a horizontal line starting at ``(y, x)`` with length *n* consisting of the character *ch*."
msgstr ""

msgid "If *flag* is false, curses no longer considers using the hardware insert/delete character feature of the terminal; if *flag* is true, use of character insertion and deletion is enabled.  When curses is first initialized, use of character insert/delete is enabled by default."
msgstr ""

msgid "If called with *yes* equal to 1, :mod:`curses` will try and use hardware line editing facilities. Otherwise, line insertion/deletion are disabled."
msgstr ""

msgid "If *flag* is true, any change in the window image automatically causes the window to be refreshed; you no longer have to call :meth:`refresh` yourself. However, it may degrade performance considerably, due to repeated calls to wrefresh.  This option is disabled by default."
msgstr ""

msgid "Return the character at the given position in the window. The bottom 8 bits are the character proper, and upper bits are the attributes."
msgstr ""

msgid "Paint character *ch* at ``(y, x)`` with attributes *attr*, moving the line from position *x* right by one character."
msgstr ""

msgid "Inserts *nlines* lines into the specified window above the current line.  The *nlines* bottom lines are lost.  For negative *nlines*, delete *nlines* lines starting with the one under the cursor, and move the remaining lines up.  The bottom *nlines* lines are cleared.  The current cursor position remains the same."
msgstr ""

msgid "Insert a blank line under the cursor. All following lines are moved down by 1 line."
msgstr ""

msgid "Insert a character string (as many characters as will fit on the line) before the character under the cursor, up to *n* characters.   If *n* is zero or negative, the entire string is inserted. All characters to the right of the cursor are shifted right, with the rightmost characters on the line being lost. The cursor position does not change (after moving to *y*, *x*, if specified)."
msgstr ""

msgid "Insert a character string (as many characters as will fit on the line) before the character under the cursor.  All characters to the right of the cursor are shifted right, with the rightmost characters on the line being lost.  The cursor position does not change (after moving to *y*, *x*, if specified)."
msgstr ""

msgid "Returns a string of characters, extracted from the window starting at the current cursor position, or at *y*, *x* if specified. Attributes are stripped from the characters.  If *n* is specified, :meth:`instr` returns return a string at most *n* characters long (exclusive of the trailing NUL)."
msgstr ""

msgid "Returns true if the specified line was modified since the last call to :meth:`refresh`; otherwise returns false.  Raises a :exc:`curses.error` exception if *line* is not valid for the given window."
msgstr ""

msgid "Returns true if the specified window was modified since the last call to :meth:`refresh`; otherwise returns false."
msgstr ""

msgid "If *yes* is 1, escape sequences generated by some keys (keypad,  function keys) will be interpreted by :mod:`curses`. If *yes* is 0, escape sequences will be left as is in the input stream."
msgstr ""

msgid "If *yes* is 1, cursor is left where it is on update, instead of being at \"cursor position.\"  This reduces cursor movement where possible. If possible the cursor will be made invisible."
msgstr ""

msgid "If *yes* is 0, cursor will always be at \"cursor position\" after an update."
msgstr ""

msgid "Move cursor to ``(new_y, new_x)``."
msgstr ""

msgid "Moves the window inside its parent window.  The screen-relative parameters of the window are not changed.  This routine is used to display different parts of the parent window at the same physical position on the screen."
msgstr ""

msgid "Move the window so its upper-left corner is at ``(new_y, new_x)``."
msgstr ""

msgid "If *yes* is ``1``, :meth:`getch` will be non-blocking."
msgstr ""

msgid "If *yes* is ``1``, escape sequences will not be timed out."
msgstr ""

msgid "If *yes* is ``0``, after a few milliseconds, an escape sequence will not be interpreted, and will be left in the input stream as is."
msgstr ""

msgid "Mark for refresh but wait.  This function updates the data structure representing the desired state of the window, but does not force an update of the physical screen.  To accomplish that, call  :func:`doupdate`."
msgstr ""

msgid "Overlay the window on top of *destwin*. The windows need not be the same size, only the overlapping region is copied. This copy is non-destructive, which means that the current background character does not overwrite the old contents of *destwin*."
msgstr ""

msgid "To get fine-grained control over the copied region, the second form of :meth:`overlay` can be used. *sminrow* and *smincol* are the upper-left coordinates of the source window, and the other variables mark a rectangle in the destination window."
msgstr ""

msgid "Overwrite the window on top of *destwin*. The windows need not be the same size, in which case only the overlapping region is copied. This copy is destructive, which means that the current background character overwrites the old contents of *destwin*."
msgstr ""

msgid "To get fine-grained control over the copied region, the second form of :meth:`overwrite` can be used. *sminrow* and *smincol* are the upper-left coordinates of the source window, the other variables mark a rectangle in the destination window."
msgstr ""

msgid "Writes all data associated with the window into the provided file object.  This information can be later retrieved using the :func:`getwin` function."
msgstr ""

msgid "Indicates that the *num* screen lines, starting at line *beg*, are corrupted and should be completely redrawn on the next :meth:`refresh` call."
msgstr ""

msgid "Touches the entire window, causing it to be completely redrawn on the next :meth:`refresh` call."
msgstr ""

msgid "Update the display immediately (sync actual screen with previous drawing/deleting methods)."
msgstr ""

msgid "The 6 optional arguments can only be specified when the window is a pad created with :func:`newpad`.  The additional parameters are needed to indicate what part of the pad and screen are involved. *pminrow* and *pmincol* specify the upper left-hand corner of the rectangle to be displayed in the pad.  *sminrow*, *smincol*, *smaxrow*, and *smaxcol* specify the edges of the rectangle to be displayed on the screen.  The lower right-hand corner of the rectangle to be displayed in the pad is calculated from the screen coordinates, since the rectangles must be the same size.  Both rectangles must be entirely contained within their respective structures.  Negative values of *pminrow*, *pmincol*, *sminrow*, or *smincol* are treated as if they were zero."
msgstr ""

msgid "Scroll the screen or scrolling region upward by *lines* lines."
msgstr ""

msgid "Controls what happens when the cursor of a window is moved off the edge of the window or scrolling region, either as a result of a newline action on the bottom line, or typing the last character of the last line.  If *flag* is false, the cursor is left on the bottom line.  If *flag* is true, the window is scrolled up one line.  Note that in order to get the physical scrolling effect on the terminal, it is also necessary to call :meth:`idlok`."
msgstr ""

msgid "Set the scrolling region from line *top* to line *bottom*. All scrolling actions will take place in this region."
msgstr ""

msgid "Turn off the standout attribute.  On some terminals this has the side effect of turning off all attributes."
msgstr ""

msgid "Turn on attribute *A_STANDOUT*."
msgstr ""

msgid "Return a sub-window, whose upper-left corner is at ``(begin_y, begin_x)``, and whose width/height is *ncols*/*nlines*."
msgstr ""

msgid "By default, the sub-window will extend from the specified position to the lower right corner of the window."
msgstr ""

msgid "Touches each location in the window that has been touched in any of its ancestor windows.  This routine is called by :meth:`refresh`, so it should almost never be necessary to call it manually."
msgstr ""

msgid "If called with *flag* set to true, then :meth:`syncup` is called automatically whenever there is a change in the window."
msgstr ""

msgid "Touches all locations in ancestors of the window that have been changed in  the window."
msgstr ""

msgid "Sets blocking or non-blocking read behavior for the window.  If *delay* is negative, blocking read is used (which will wait indefinitely for input).  If *delay* is zero, then non-blocking read is used, and -1 will be returned by :meth:`getch` if no input is waiting.  If *delay* is positive, then :meth:`getch` will block for *delay* milliseconds, and return -1 if there is still no input at the end of that time."
msgstr ""

msgid "Pretend *count* lines have been changed, starting with line *start*.  If *changed* is supplied, it specifies whether the affected lines are marked as having been changed (*changed*\\ =1) or unchanged (*changed*\\ =0)."
msgstr ""

msgid "Pretend the whole window has been changed, for purposes of drawing optimizations."
msgstr ""

msgid "Marks all lines in  the  window  as unchanged since the last call to :meth:`refresh`."
msgstr ""

msgid "Display a vertical line starting at ``(y, x)`` with length *n* consisting of the character *ch*."
msgstr ""

msgid "The :mod:`curses` module defines the following data members:"
msgstr ""

msgid "Some curses routines  that  return  an integer, such as  :func:`getch`, return :const:`ERR` upon failure."
msgstr ""

msgid "Some curses routines  that  return  an integer, such as  :func:`napms`, return :const:`OK` upon success."
msgstr ""

msgid "A string representing the current version of the module.  Also available as :const:`__version__`."
msgstr ""

msgid "Several constants are available to specify character cell attributes:"
msgstr ""

msgid "Attribute"
msgstr ""

msgid "``A_ALTCHARSET``"
msgstr ""

msgid "Alternate character set mode."
msgstr ""

msgid "``A_BLINK``"
msgstr ""

msgid "Blink mode."
msgstr ""

msgid "``A_BOLD``"
msgstr ""

msgid "Bold mode."
msgstr ""

msgid "``A_DIM``"
msgstr ""

msgid "Dim mode."
msgstr ""

msgid "``A_NORMAL``"
msgstr ""

msgid "Normal attribute."
msgstr ""

msgid "``A_STANDOUT``"
msgstr ""

msgid "Standout mode."
msgstr ""

msgid "``A_UNDERLINE``"
msgstr ""

msgid "Underline mode."
msgstr ""

msgid "Keys are referred to by integer constants with names starting with  ``KEY_``. The exact keycaps available are system dependent."
msgstr ""

msgid "Key constant"
msgstr ""

msgid "Key"
msgstr ""

msgid "``KEY_MIN``"
msgstr ""

msgid "Minimum key value"
msgstr ""

msgid "``KEY_BREAK``"
msgstr ""

msgid "Break key (unreliable)"
msgstr ""

msgid "``KEY_DOWN``"
msgstr ""

msgid "Down-arrow"
msgstr ""

msgid "``KEY_UP``"
msgstr ""

msgid "Up-arrow"
msgstr ""

msgid "``KEY_LEFT``"
msgstr ""

msgid "Left-arrow"
msgstr ""

msgid "``KEY_RIGHT``"
msgstr ""

msgid "Right-arrow"
msgstr ""

msgid "``KEY_HOME``"
msgstr ""

msgid "Home key (upward+left arrow)"
msgstr ""

msgid "``KEY_BACKSPACE``"
msgstr ""

msgid "Backspace (unreliable)"
msgstr ""

msgid "``KEY_F0``"
msgstr ""

msgid "Function keys.  Up to 64 function keys are supported."
msgstr ""

msgid "``KEY_Fn``"
msgstr ""

msgid "Value of function key *n*"
msgstr ""

msgid "``KEY_DL``"
msgstr ""

msgid "Delete line"
msgstr ""

msgid "``KEY_IL``"
msgstr ""

msgid "Insert line"
msgstr ""

msgid "``KEY_DC``"
msgstr ""

msgid "Delete character"
msgstr ""

msgid "``KEY_IC``"
msgstr ""

msgid "Insert char or enter insert mode"
msgstr ""

msgid "``KEY_EIC``"
msgstr ""

msgid "Exit insert char mode"
msgstr ""

msgid "``KEY_CLEAR``"
msgstr ""

msgid "Clear screen"
msgstr ""

msgid "``KEY_EOS``"
msgstr ""

msgid "Clear to end of screen"
msgstr ""

msgid "``KEY_EOL``"
msgstr ""

msgid "Clear to end of line"
msgstr ""

msgid "``KEY_SF``"
msgstr ""

msgid "Scroll 1 line forward"
msgstr ""

msgid "``KEY_SR``"
msgstr ""

msgid "Scroll 1 line backward (reverse)"
msgstr ""

msgid "``KEY_NPAGE``"
msgstr ""

msgid "Next page"
msgstr ""

msgid "``KEY_PPAGE``"
msgstr ""

msgid "Previous page"
msgstr ""

msgid "``KEY_STAB``"
msgstr ""

msgid "Set tab"
msgstr ""

msgid "``KEY_CTAB``"
msgstr ""

msgid "Clear tab"
msgstr ""

msgid "``KEY_CATAB``"
msgstr ""

msgid "Clear all tabs"
msgstr ""

msgid "``KEY_ENTER``"
msgstr ""

msgid "Enter or send (unreliable)"
msgstr ""

msgid "``KEY_SRESET``"
msgstr ""

msgid "Soft (partial) reset (unreliable)"
msgstr ""

msgid "``KEY_RESET``"
msgstr ""

msgid "Reset or hard reset (unreliable)"
msgstr ""

msgid "``KEY_PRINT``"
msgstr ""

msgid "Print"
msgstr ""

msgid "``KEY_LL``"
msgstr ""

msgid "Home down or bottom (lower left)"
msgstr ""

msgid "``KEY_A1``"
msgstr ""

msgid "Upper left of keypad"
msgstr ""

msgid "``KEY_A3``"
msgstr ""

msgid "Upper right of keypad"
msgstr ""

msgid "``KEY_B2``"
msgstr ""

msgid "Center of keypad"
msgstr ""

msgid "``KEY_C1``"
msgstr ""

msgid "Lower left of keypad"
msgstr ""

msgid "``KEY_C3``"
msgstr ""

msgid "Lower right of keypad"
msgstr ""

msgid "``KEY_BTAB``"
msgstr ""

msgid "Back tab"
msgstr ""

msgid "``KEY_BEG``"
msgstr ""

msgid "Beg (beginning)"
msgstr ""

msgid "``KEY_CANCEL``"
msgstr ""

msgid "Cancel"
msgstr ""

msgid "``KEY_CLOSE``"
msgstr ""

msgid "Close"
msgstr ""

msgid "``KEY_COMMAND``"
msgstr ""

msgid "Cmd (command)"
msgstr ""

msgid "``KEY_COPY``"
msgstr ""

msgid "Copy"
msgstr ""

msgid "``KEY_CREATE``"
msgstr ""

msgid "Create"
msgstr ""

msgid "``KEY_END``"
msgstr ""

msgid "End"
msgstr ""

msgid "``KEY_EXIT``"
msgstr ""

msgid "Exit"
msgstr ""

msgid "``KEY_FIND``"
msgstr ""

msgid "Find"
msgstr ""

msgid "``KEY_HELP``"
msgstr ""

msgid "Help"
msgstr ""

msgid "``KEY_MARK``"
msgstr ""

msgid "Mark"
msgstr ""

msgid "``KEY_MESSAGE``"
msgstr ""

msgid "Message"
msgstr ""

msgid "``KEY_MOVE``"
msgstr ""

msgid "Move"
msgstr ""

msgid "``KEY_NEXT``"
msgstr ""

msgid "Next"
msgstr ""

msgid "``KEY_OPEN``"
msgstr ""

msgid "Open"
msgstr ""

msgid "``KEY_OPTIONS``"
msgstr ""

msgid "Options"
msgstr ""

msgid "``KEY_PREVIOUS``"
msgstr ""

msgid "Prev (previous)"
msgstr ""

msgid "``KEY_REDO``"
msgstr ""

msgid "Redo"
msgstr ""

msgid "``KEY_REFERENCE``"
msgstr ""

msgid "Ref (reference)"
msgstr ""

msgid "``KEY_REFRESH``"
msgstr ""

msgid "Refresh"
msgstr ""

msgid "``KEY_REPLACE``"
msgstr ""

msgid "Replace"
msgstr ""

msgid "``KEY_RESTART``"
msgstr ""

msgid "Restart"
msgstr ""

msgid "``KEY_RESUME``"
msgstr ""

msgid "Resume"
msgstr ""

msgid "``KEY_SAVE``"
msgstr ""

msgid "Save"
msgstr ""

msgid "``KEY_SBEG``"
msgstr ""

msgid "Shifted Beg (beginning)"
msgstr ""

msgid "``KEY_SCANCEL``"
msgstr ""

msgid "Shifted Cancel"
msgstr ""

msgid "``KEY_SCOMMAND``"
msgstr ""

msgid "Shifted Command"
msgstr ""

msgid "``KEY_SCOPY``"
msgstr ""

msgid "Shifted Copy"
msgstr ""

msgid "``KEY_SCREATE``"
msgstr ""

msgid "Shifted Create"
msgstr ""

msgid "``KEY_SDC``"
msgstr ""

msgid "Shifted Delete char"
msgstr ""

msgid "``KEY_SDL``"
msgstr ""

msgid "Shifted Delete line"
msgstr ""

msgid "``KEY_SELECT``"
msgstr ""

msgid "Select"
msgstr ""

msgid "``KEY_SEND``"
msgstr ""

msgid "Shifted End"
msgstr ""

msgid "``KEY_SEOL``"
msgstr ""

msgid "Shifted Clear line"
msgstr ""

msgid "``KEY_SEXIT``"
msgstr ""

msgid "Shifted Dxit"
msgstr ""

msgid "``KEY_SFIND``"
msgstr ""

msgid "Shifted Find"
msgstr ""

msgid "``KEY_SHELP``"
msgstr ""

msgid "Shifted Help"
msgstr ""

msgid "``KEY_SHOME``"
msgstr ""

msgid "Shifted Home"
msgstr ""

msgid "``KEY_SIC``"
msgstr ""

msgid "Shifted Input"
msgstr ""

msgid "``KEY_SLEFT``"
msgstr ""

msgid "Shifted Left arrow"
msgstr ""

msgid "``KEY_SMESSAGE``"
msgstr ""

msgid "Shifted Message"
msgstr ""

msgid "``KEY_SMOVE``"
msgstr ""

msgid "Shifted Move"
msgstr ""

msgid "``KEY_SNEXT``"
msgstr ""

msgid "Shifted Next"
msgstr ""

msgid "``KEY_SOPTIONS``"
msgstr ""

msgid "Shifted Options"
msgstr ""

msgid "``KEY_SPREVIOUS``"
msgstr ""

msgid "Shifted Prev"
msgstr ""

msgid "``KEY_SPRINT``"
msgstr ""

msgid "Shifted Print"
msgstr ""

msgid "``KEY_SREDO``"
msgstr ""

msgid "Shifted Redo"
msgstr ""

msgid "``KEY_SREPLACE``"
msgstr ""

msgid "Shifted Replace"
msgstr ""

msgid "``KEY_SRIGHT``"
msgstr ""

msgid "Shifted Right arrow"
msgstr ""

msgid "``KEY_SRSUME``"
msgstr ""

msgid "Shifted Resume"
msgstr ""

msgid "``KEY_SSAVE``"
msgstr ""

msgid "Shifted Save"
msgstr ""

msgid "``KEY_SSUSPEND``"
msgstr ""

msgid "Shifted Suspend"
msgstr ""

msgid "``KEY_SUNDO``"
msgstr ""

msgid "Shifted Undo"
msgstr ""

msgid "``KEY_SUSPEND``"
msgstr ""

msgid "Suspend"
msgstr ""

msgid "``KEY_UNDO``"
msgstr ""

msgid "Undo"
msgstr ""

msgid "``KEY_MOUSE``"
msgstr ""

msgid "Mouse event has occurred"
msgstr ""

msgid "``KEY_RESIZE``"
msgstr ""

msgid "Terminal resize event"
msgstr ""

msgid "``KEY_MAX``"
msgstr ""

msgid "Maximum key value"
msgstr ""

msgid "On VT100s and their software emulations, such as X terminal emulators, there are normally at least four function keys (:const:`KEY_F1`, :const:`KEY_F2`, :const:`KEY_F3`, :const:`KEY_F4`) available, and the arrow keys mapped to :const:`KEY_UP`, :const:`KEY_DOWN`, :const:`KEY_LEFT` and :const:`KEY_RIGHT` in the obvious way.  If your machine has a PC keyboard, it is safe to expect arrow keys and twelve function keys (older PC keyboards may have only ten function keys); also, the following keypad mappings are standard:"
msgstr ""

msgid "Keycap"
msgstr ""

msgid "Constant"
msgstr ""

msgid ":kbd:`Insert`"
msgstr ""

msgid "KEY_IC"
msgstr ""

msgid ":kbd:`Delete`"
msgstr ""

msgid "KEY_DC"
msgstr ""

msgid ":kbd:`Home`"
msgstr ""

msgid "KEY_HOME"
msgstr ""

msgid ":kbd:`End`"
msgstr ""

msgid "KEY_END"
msgstr ""

msgid ":kbd:`Page Up`"
msgstr ""

msgid "KEY_NPAGE"
msgstr ""

msgid ":kbd:`Page Down`"
msgstr ""

msgid "KEY_PPAGE"
msgstr ""

msgid "The following table lists characters from the alternate character set. These are inherited from the VT100 terminal, and will generally be  available on software emulations such as X terminals.  When there is no graphic available, curses falls back on a crude printable ASCII approximation."
msgstr ""

msgid "These are available only after :func:`initscr` has  been called."
msgstr ""

msgid "ACS code"
msgstr ""

msgid "``ACS_BBSS``"
msgstr ""

msgid "alternate name for upper right corner"
msgstr ""

msgid "``ACS_BLOCK``"
msgstr ""

msgid "solid square block"
msgstr ""

msgid "``ACS_BOARD``"
msgstr ""

msgid "board of squares"
msgstr ""

msgid "``ACS_BSBS``"
msgstr ""

msgid "alternate name for horizontal line"
msgstr ""

msgid "``ACS_BSSB``"
msgstr ""

msgid "alternate name for upper left corner"
msgstr ""

msgid "``ACS_BSSS``"
msgstr ""

msgid "alternate name for top tee"
msgstr ""

msgid "``ACS_BTEE``"
msgstr ""

msgid "bottom tee"
msgstr ""

msgid "``ACS_BULLET``"
msgstr ""

msgid "bullet"
msgstr ""

msgid "``ACS_CKBOARD``"
msgstr ""

msgid "checker board (stipple)"
msgstr ""

msgid "``ACS_DARROW``"
msgstr ""

msgid "arrow pointing down"
msgstr ""

msgid "``ACS_DEGREE``"
msgstr ""

msgid "degree symbol"
msgstr ""

msgid "``ACS_DIAMOND``"
msgstr ""

msgid "diamond"
msgstr ""

msgid "``ACS_GEQUAL``"
msgstr ""

msgid "greater-than-or-equal-to"
msgstr ""

msgid "``ACS_HLINE``"
msgstr ""

msgid "horizontal line"
msgstr ""

msgid "``ACS_LANTERN``"
msgstr ""

msgid "lantern symbol"
msgstr ""

msgid "``ACS_LARROW``"
msgstr ""

msgid "left arrow"
msgstr ""

msgid "``ACS_LEQUAL``"
msgstr ""

msgid "less-than-or-equal-to"
msgstr ""

msgid "``ACS_LLCORNER``"
msgstr ""

msgid "lower left-hand corner"
msgstr ""

msgid "``ACS_LRCORNER``"
msgstr ""

msgid "lower right-hand corner"
msgstr ""

msgid "``ACS_LTEE``"
msgstr ""

msgid "left tee"
msgstr ""

msgid "``ACS_NEQUAL``"
msgstr ""

msgid "not-equal sign"
msgstr ""

msgid "``ACS_PI``"
msgstr ""

msgid "letter pi"
msgstr ""

msgid "``ACS_PLMINUS``"
msgstr ""

msgid "plus-or-minus sign"
msgstr ""

msgid "``ACS_PLUS``"
msgstr ""

msgid "big plus sign"
msgstr ""

msgid "``ACS_RARROW``"
msgstr ""

msgid "right arrow"
msgstr ""

msgid "``ACS_RTEE``"
msgstr ""

msgid "right tee"
msgstr ""

msgid "``ACS_S1``"
msgstr ""

msgid "scan line 1"
msgstr ""

msgid "``ACS_S3``"
msgstr ""

msgid "scan line 3"
msgstr ""

msgid "``ACS_S7``"
msgstr ""

msgid "scan line 7"
msgstr ""

msgid "``ACS_S9``"
msgstr ""

msgid "scan line 9"
msgstr ""

msgid "``ACS_SBBS``"
msgstr ""

msgid "alternate name for lower right corner"
msgstr ""

msgid "``ACS_SBSB``"
msgstr ""

msgid "alternate name for vertical line"
msgstr ""

msgid "``ACS_SBSS``"
msgstr ""

msgid "alternate name for right tee"
msgstr ""

msgid "``ACS_SSBB``"
msgstr ""

msgid "alternate name for lower left corner"
msgstr ""

msgid "``ACS_SSBS``"
msgstr ""

msgid "alternate name for bottom tee"
msgstr ""

msgid "``ACS_SSSB``"
msgstr ""

msgid "alternate name for left tee"
msgstr ""

msgid "``ACS_SSSS``"
msgstr ""

msgid "alternate name for crossover or big plus"
msgstr ""

msgid "``ACS_STERLING``"
msgstr ""

msgid "pound sterling"
msgstr ""

msgid "``ACS_TTEE``"
msgstr ""

msgid "top tee"
msgstr ""

msgid "``ACS_UARROW``"
msgstr ""

msgid "up arrow"
msgstr ""

msgid "``ACS_ULCORNER``"
msgstr ""

msgid "upper left corner"
msgstr ""

msgid "``ACS_URCORNER``"
msgstr ""

msgid "upper right corner"
msgstr ""

msgid "``ACS_VLINE``"
msgstr ""

msgid "vertical line"
msgstr ""

msgid "The following table lists the predefined colors:"
msgstr ""

msgid "Color"
msgstr ""

msgid "``COLOR_BLACK``"
msgstr ""

msgid "Black"
msgstr ""

msgid "``COLOR_BLUE``"
msgstr ""

msgid "Blue"
msgstr ""

msgid "``COLOR_CYAN``"
msgstr ""

msgid "Cyan (light greenish blue)"
msgstr ""

msgid "``COLOR_GREEN``"
msgstr ""

msgid "Green"
msgstr ""

msgid "``COLOR_MAGENTA``"
msgstr ""

msgid "Magenta (purplish red)"
msgstr ""

msgid "``COLOR_RED``"
msgstr ""

msgid "Red"
msgstr ""

msgid "``COLOR_WHITE``"
msgstr ""

msgid "White"
msgstr ""

msgid "``COLOR_YELLOW``"
msgstr ""

msgid "Yellow"
msgstr ""

msgid ":mod:`curses.textpad` --- Text input widget for curses programs"
msgstr ""

msgid "The :mod:`curses.textpad` module provides a :class:`Textbox` class that handles elementary text editing in a curses window, supporting a set of keybindings resembling those of Emacs (thus, also of Netscape Navigator, BBedit 6.x, FrameMaker, and many other programs).  The module also provides a rectangle-drawing function useful for framing text boxes or for other purposes."
msgstr ""

msgid "The module :mod:`curses.textpad` defines the following function:"
msgstr ""

msgid "Draw a rectangle.  The first argument must be a window object; the remaining arguments are coordinates relative to that window.  The second and third arguments are the y and x coordinates of the upper left hand corner of the rectangle to be drawn; the fourth and fifth arguments are the y and x coordinates of the lower right hand corner. The rectangle will be drawn using VT100/IBM PC forms characters on terminals that make this possible (including xterm and most other software terminal emulators).  Otherwise it will be drawn with ASCII  dashes, vertical bars, and plus signs."
msgstr ""

msgid "Textbox objects"
msgstr ""

msgid "You can instantiate a :class:`Textbox` object as follows:"
msgstr ""

msgid "Return a textbox widget object.  The *win* argument should be a curses :class:`WindowObject` in which the textbox is to be contained. The edit cursor of the textbox is initially located at the upper left hand corner of the containing window, with coordinates ``(0, 0)``. The instance's :attr:`stripspaces` flag is initially on."
msgstr ""

msgid ":class:`Textbox` objects have the following methods:"
msgstr ""

msgid "This is the entry point you will normally use.  It accepts editing keystrokes until one of the termination keystrokes is entered.  If *validator* is supplied, it must be a function.  It will be called for each keystroke entered with the keystroke as a parameter; command dispatch is done on the result. This method returns the window contents as a string; whether blanks in the window are included is affected by the :attr:`stripspaces` member."
msgstr ""

msgid "Process a single command keystroke.  Here are the supported special keystrokes:"
msgstr ""

msgid "Keystroke"
msgstr ""

msgid "Action"
msgstr ""

msgid ":kbd:`Control-A`"
msgstr ""

msgid "Go to left edge of window."
msgstr ""

msgid ":kbd:`Control-B`"
msgstr ""

msgid "Cursor left, wrapping to previous line if appropriate."
msgstr ""

msgid ":kbd:`Control-D`"
msgstr ""

msgid "Delete character under cursor."
msgstr ""

msgid ":kbd:`Control-E`"
msgstr ""

msgid "Go to right edge (stripspaces off) or end of line (stripspaces on)."
msgstr ""

msgid ":kbd:`Control-F`"
msgstr ""

msgid "Cursor right, wrapping to next line when appropriate."
msgstr ""

msgid ":kbd:`Control-G`"
msgstr ""

msgid "Terminate, returning the window contents."
msgstr ""

msgid ":kbd:`Control-H`"
msgstr ""

msgid "Delete character backward."
msgstr ""

msgid ":kbd:`Control-J`"
msgstr ""

msgid "Terminate if the window is 1 line, otherwise insert newline."
msgstr ""

msgid ":kbd:`Control-K`"
msgstr ""

msgid "If line is blank, delete it, otherwise clear to end of line."
msgstr ""

msgid ":kbd:`Control-L`"
msgstr ""

msgid "Refresh screen."
msgstr ""

msgid ":kbd:`Control-N`"
msgstr ""

msgid "Cursor down; move down one line."
msgstr ""

msgid ":kbd:`Control-O`"
msgstr ""

msgid "Insert a blank line at cursor location."
msgstr ""

msgid ":kbd:`Control-P`"
msgstr ""

msgid "Cursor up; move up one line."
msgstr ""

msgid "Move operations do nothing if the cursor is at an edge where the movement is not possible.  The following synonyms are supported where possible:"
msgstr ""

msgid ":const:`KEY_LEFT`"
msgstr ""

msgid ":const:`KEY_RIGHT`"
msgstr ""

msgid ":const:`KEY_UP`"
msgstr ""

msgid ":const:`KEY_DOWN`"
msgstr ""

msgid ":const:`KEY_BACKSPACE`"
msgstr ""

msgid ":kbd:`Control-h`"
msgstr ""

msgid "All other keystrokes are treated as a command to insert the given character and move right (with line wrapping)."
msgstr ""

msgid "This method returns the window contents as a string; whether blanks in the window are included is affected by the :attr:`stripspaces` member."
msgstr ""

msgid "This data member is a flag which controls the interpretation of blanks in the window.  When it is on, trailing blanks on each line are ignored; any cursor motion that would land the cursor on a trailing blank goes to the end of that line instead, and trailing blanks are stripped when the window contents are gathered."
msgstr ""

msgid ":mod:`curses.wrapper` --- Terminal handler for curses programs"
msgstr ""

msgid "This module supplies one function, :func:`wrapper`, which runs another function which should be the rest of your curses-using application.  If the application raises an exception, :func:`wrapper` will restore the terminal to a sane state before re-raising the exception and generating a traceback."
msgstr ""

msgid "Wrapper function that initializes curses and calls another function, *func*, restoring normal keyboard/screen behavior on error. The callable object *func* is then passed the main window 'stdscr' as its first argument, followed by any other arguments passed to :func:`wrapper`."
msgstr ""

msgid "Before calling the hook function, :func:`wrapper` turns on cbreak mode, turns off echo, enables the terminal keypad, and initializes colors if the terminal has color support.  On exit (whether normally or by exception) it restores cooked mode, turns on echo, and disables the terminal keypad."
msgstr ""

msgid ":mod:`curses.ascii` --- Utilities for ASCII characters"
msgstr ""

msgid "The :mod:`curses.ascii` module supplies name constants for ASCII characters and functions to test membership in various ASCII character classes.  The constants supplied are names for control characters as follows:"
msgstr ""

msgid "Name"
msgstr ""

msgid ":const:`NUL`"
msgstr ""

msgid ":const:`SOH`"
msgstr ""

msgid "Start of heading, console interrupt"
msgstr ""

msgid ":const:`STX`"
msgstr ""

msgid "Start of text"
msgstr ""

msgid ":const:`ETX`"
msgstr ""

msgid "End of text"
msgstr ""

msgid ":const:`EOT`"
msgstr ""

msgid "End of transmission"
msgstr ""

msgid ":const:`ENQ`"
msgstr ""

msgid "Enquiry, goes with :const:`ACK` flow control"
msgstr ""

msgid ":const:`ACK`"
msgstr ""

msgid "Acknowledgement"
msgstr ""

msgid ":const:`BEL`"
msgstr ""

msgid "Bell"
msgstr ""

msgid ":const:`BS`"
msgstr ""

msgid "Backspace"
msgstr ""

msgid ":const:`TAB`"
msgstr ""

msgid "Tab"
msgstr ""

msgid ":const:`HT`"
msgstr ""

msgid "Alias for :const:`TAB`: \"Horizontal tab\""
msgstr ""

msgid ":const:`LF`"
msgstr ""

msgid "Line feed"
msgstr ""

msgid ":const:`NL`"
msgstr ""

msgid "Alias for :const:`LF`: \"New line\""
msgstr ""

msgid ":const:`VT`"
msgstr ""

msgid "Vertical tab"
msgstr ""

msgid ":const:`FF`"
msgstr ""

msgid "Form feed"
msgstr ""

msgid ":const:`CR`"
msgstr ""

msgid "Carriage return"
msgstr ""

msgid ":const:`SO`"
msgstr ""

msgid "Shift-out, begin alternate character set"
msgstr ""

msgid ":const:`SI`"
msgstr ""

msgid "Shift-in, resume default character set"
msgstr ""

msgid ":const:`DLE`"
msgstr ""

msgid "Data-link escape"
msgstr ""

msgid ":const:`DC1`"
msgstr ""

msgid "XON, for flow control"
msgstr ""

msgid ":const:`DC2`"
msgstr ""

msgid "Device control 2, block-mode flow control"
msgstr ""

msgid ":const:`DC3`"
msgstr ""

msgid "XOFF, for flow control"
msgstr ""

msgid ":const:`DC4`"
msgstr ""

msgid "Device control 4"
msgstr ""

msgid ":const:`NAK`"
msgstr ""

msgid "Negative acknowledgement"
msgstr ""

msgid ":const:`SYN`"
msgstr ""

msgid "Synchronous idle"
msgstr ""

msgid ":const:`ETB`"
msgstr ""

msgid "End transmission block"
msgstr ""

msgid ":const:`CAN`"
msgstr ""

msgid ":const:`EM`"
msgstr ""

msgid "End of medium"
msgstr ""

msgid ":const:`SUB`"
msgstr ""

msgid "Substitute"
msgstr ""

msgid ":const:`ESC`"
msgstr ""

msgid "Escape"
msgstr ""

msgid ":const:`FS`"
msgstr ""

msgid "File separator"
msgstr ""

msgid ":const:`GS`"
msgstr ""

msgid "Group separator"
msgstr ""

msgid ":const:`RS`"
msgstr ""

msgid "Record separator, block-mode terminator"
msgstr ""

msgid ":const:`US`"
msgstr ""

msgid "Unit separator"
msgstr ""

msgid ":const:`SP`"
msgstr ""

msgid "Space"
msgstr ""

msgid ":const:`DEL`"
msgstr ""

msgid "Delete"
msgstr ""

msgid "Note that many of these have little practical significance in modern usage.  The mnemonics derive from teleprinter conventions that predate digital computers."
msgstr ""

msgid "The module supplies the following functions, patterned on those in the standard C library:"
msgstr ""

msgid "Checks for an ASCII alphanumeric character; it is equivalent to ``isalpha(c) or isdigit(c)``."
msgstr ""

msgid "Checks for an ASCII alphabetic character; it is equivalent to ``isupper(c) or islower(c)``."
msgstr ""

msgid "Checks for a character value that fits in the 7-bit ASCII set."
msgstr ""

msgid "Checks for an ASCII whitespace character."
msgstr ""

msgid "Checks for an ASCII control character (in the range 0x00 to 0x1f)."
msgstr ""

msgid "Checks for an ASCII decimal digit, ``'0'`` through ``'9'``.  This is equivalent to ``c in string.digits``."
msgstr ""

msgid "Checks for ASCII any printable character except space."
msgstr ""

msgid "Checks for an ASCII lower-case character."
msgstr ""

msgid "Checks for any ASCII printable character including space."
msgstr ""

msgid "Checks for any printable ASCII character which is not a space or an alphanumeric character."
msgstr ""

msgid "Checks for ASCII white-space characters; space, line feed, carriage return, form feed, horizontal tab, vertical tab."
msgstr ""

msgid "Checks for an ASCII uppercase letter."
msgstr ""

msgid "Checks for an ASCII hexadecimal digit.  This is equivalent to ``c in string.hexdigits``."
msgstr ""

msgid "Checks for an ASCII control character (ordinal values 0 to 31)."
msgstr ""

msgid "Checks for a non-ASCII character (ordinal values 0x80 and above)."
msgstr ""

msgid "These functions accept either integers or strings; when the argument is a string, it is first converted using the built-in function :func:`ord`."
msgstr ""

msgid "Note that all these functions check ordinal bit values derived from the  first character of the string you pass in; they do not actually know anything about the host machine's character encoding.  For functions  that know about the character encoding (and handle internationalization properly) see the :mod:`string` module."
msgstr ""

msgid "The following two functions take either a single-character string or integer byte value; they return a value of the same type."
msgstr ""

msgid "Return the ASCII value corresponding to the low 7 bits of *c*."
msgstr ""

msgid "Return the control character corresponding to the given character (the character bit value is bitwise-anded with 0x1f)."
msgstr ""

msgid "Return the 8-bit character corresponding to the given ASCII character (the character bit value is bitwise-ored with 0x80)."
msgstr ""

msgid "The following function takes either a single-character string or integer value; it returns a string."
msgstr ""

msgid "Return a string representation of the ASCII character *c*.  If *c* is printable, this string is the character itself.  If the character is a control character (0x00-0x1f) the string consists of a caret (``'^'``) followed by the corresponding uppercase letter. If the character is an ASCII delete (0x7f) the string is ``'^?'``.  If the character has its meta bit (0x80) set, the meta bit is stripped, the preceding rules applied, and ``'!'`` prepended to the result."
msgstr ""

msgid "A 33-element string array that contains the ASCII mnemonics for the thirty-two ASCII control characters from 0 (NUL) to 0x1f (US), in order, plus the mnemonic ``SP`` for the space character."
msgstr ""

msgid ":mod:`curses.panel` --- A panel stack extension for curses"
msgstr ""

msgid "Panels are windows with the added feature of depth, so they can be stacked on top of each other, and only the visible portions of each window will be displayed.  Panels can be added, moved up or down in the stack, and removed."
msgstr ""

msgid "The module :mod:`curses.panel` defines the following functions:"
msgstr ""

msgid "Returns the bottom panel in the panel stack."
msgstr ""

msgid "Returns a panel object, associating it with the given window *win*. Be aware that you need to keep the returned panel object referenced explicitly.  If you don't, the panel object is garbage collected and removed from the panel stack."
msgstr ""

msgid "Returns the top panel in the panel stack."
msgstr ""

msgid "Updates the virtual screen after changes in the panel stack. This does not call :func:`curses.doupdate`, so you'll have to do this yourself."
msgstr ""

msgid "Panel Objects"
msgstr ""

msgid "Panel objects, as returned by :func:`new_panel` above, are windows with a stacking order. There's always a window associated with a panel which determines the content, while the panel methods are responsible for the window's depth in the panel stack."
msgstr ""

msgid "Panel objects have the following methods:"
msgstr ""

msgid "Returns the panel above the current panel."
msgstr ""

msgid "Returns the panel below the current panel."
msgstr ""

msgid "Push the panel to the bottom of the stack."
msgstr ""

msgid "Returns true if the panel is hidden (not visible), false otherwise."
msgstr ""

msgid "Hide the panel. This does not delete the object, it just makes the window on screen invisible."
msgstr ""

msgid "Move the panel to the screen coordinates ``(y, x)``."
msgstr ""

msgid "Change the window associated with the panel to the window *win*."
msgstr ""

msgid "Set the panel's user pointer to *obj*. This is used to associate an arbitrary piece of data with the panel, and can be any Python object."
msgstr ""

msgid "Display the panel (which might have been hidden)."
msgstr ""

msgid "Push panel to the top of the stack."
msgstr ""

msgid "Returns the user pointer for the panel.  This might be any Python object."
msgstr ""

msgid "Returns the window object associated with the panel."
msgstr ""

msgid "Custom Python Interpreters"
msgstr ""

msgid "The modules described in this chapter allow writing interfaces similar to Python's interactive interpreter.  If you want a Python interpreter that supports some special feature in addition to the Python language, you should look at the :mod:`code` module.  (The :mod:`codeop` module is lower-level, used to support compiling a possibly-incomplete chunk of Python code.)"
msgstr ""

msgid "The full list of modules described in this chapter is:"
msgstr ""

msgid "Data Types"
msgstr ""

msgid "The modules described in this chapter provide a variety of specialized data types such as dates and times, fixed-type arrays, heap queues, synchronized queues, and sets."
msgstr ""

msgid "Python also provides some built-in data types, in particular, :class:`dict`, :class:`list`, :class:`set` and :class:`frozenset`, and :class:`tuple`.  The :class:`str` class is used to hold Unicode strings, and the :class:`bytes` class is used to hold binary data."
msgstr ""

msgid "The following modules are documented in this chapter:"
msgstr ""

msgid ":mod:`datetime` --- Basic date and time types"
msgstr ""

msgid "The :mod:`datetime` module supplies classes for manipulating dates and times in both simple and complex ways.  While date and time arithmetic is supported, the focus of the implementation is on efficient member extraction for output formatting and manipulation. For related functionality, see also the :mod:`time` and :mod:`calendar` modules."
msgstr ""

msgid "There are two kinds of date and time objects: \"naive\" and \"aware\". This distinction refers to whether the object has any notion of time zone, daylight saving time, or other kind of algorithmic or political time adjustment.  Whether a naive :class:`datetime` object represents Coordinated Universal Time (UTC), local time, or time in some other timezone is purely up to the program, just like it's up to the program whether a particular number represents metres, miles, or mass.  Naive :class:`datetime` objects are easy to understand and to work with, at the cost of ignoring some aspects of reality."
msgstr ""

msgid "For applications requiring more, :class:`datetime` and :class:`time` objects have an optional time zone information member, :attr:`tzinfo`, that can contain an instance of a subclass of the abstract :class:`tzinfo` class.  These :class:`tzinfo` objects capture information about the offset from UTC time, the time zone name, and whether Daylight Saving Time is in effect.  Note that only one concrete :class:`tzinfo` class, the :class:`timezone` class, is supplied by the :mod:`datetime` module.  The :class:`timezone` class can reprsent simple timezones with fixed offset from UTC such as UTC itself or North American EST and EDT timezones.  Supporting timezones at whatever level of detail is required is up to the application.  The rules for time adjustment across the world are more political than rational, change frequently, and there is no standard suitable for every application aside from UTC."
msgstr ""

msgid "The :mod:`datetime` module exports the following constants:"
msgstr ""

msgid "The smallest year number allowed in a :class:`date` or :class:`datetime` object. :const:`MINYEAR` is ``1``."
msgstr ""

msgid "The largest year number allowed in a :class:`date` or :class:`datetime` object. :const:`MAXYEAR` is ``9999``."
msgstr ""

msgid "General calendar related functions."
msgstr ""

msgid "Time access and conversions."
msgstr ""

msgid "Available Types"
msgstr ""

msgid "An idealized naive date, assuming the current Gregorian calendar always was, and always will be, in effect. Attributes: :attr:`year`, :attr:`month`, and :attr:`day`."
msgstr ""

msgid "An idealized time, independent of any particular day, assuming that every day has exactly 24\\*60\\*60 seconds (there is no notion of \"leap seconds\" here). Attributes: :attr:`hour`, :attr:`minute`, :attr:`second`, :attr:`microsecond`, and :attr:`tzinfo`."
msgstr ""

msgid "A combination of a date and a time. Attributes: :attr:`year`, :attr:`month`, :attr:`day`, :attr:`hour`, :attr:`minute`, :attr:`second`, :attr:`microsecond`, and :attr:`tzinfo`."
msgstr ""

msgid "A duration expressing the difference between two :class:`date`, :class:`time`, or :class:`datetime` instances to microsecond resolution."
msgstr ""

msgid "An abstract base class for time zone information objects.  These are used by the :class:`datetime` and :class:`time` classes to provide a customizable notion of time adjustment (for example, to account for time zone and/or daylight saving time)."
msgstr ""

msgid "A class that implements the :class:`tzinfo` abstract base class as a fixed offset from the UTC."
msgstr ""

msgid "Objects of these types are immutable."
msgstr ""

msgid "Objects of the :class:`date` type are always naive."
msgstr ""

msgid "An object *d* of type :class:`time` or :class:`datetime` may be naive or aware. *d* is aware if ``d.tzinfo`` is not ``None`` and ``d.tzinfo.utcoffset(d)`` does not return ``None``.  If ``d.tzinfo`` is ``None``, or if ``d.tzinfo`` is not ``None`` but ``d.tzinfo.utcoffset(d)`` returns ``None``, *d* is naive."
msgstr ""

msgid "The distinction between naive and aware doesn't apply to :class:`timedelta` objects."
msgstr ""

msgid "Subclass relationships::"
msgstr ""

msgid "object     timedelta     tzinfo         timezone     time     date         datetime"
msgstr ""

msgid ":class:`timedelta` Objects"
msgstr ""

msgid "A :class:`timedelta` object represents a duration, the difference between two dates or times."
msgstr ""

msgid "All arguments are optional and default to ``0``.  Arguments may be integers or floats, and may be positive or negative."
msgstr ""

msgid "Only *days*, *seconds* and *microseconds* are stored internally.  Arguments are converted to those units:"
msgstr ""

msgid "A millisecond is converted to 1000 microseconds."
msgstr ""

msgid "A minute is converted to 60 seconds."
msgstr ""

msgid "An hour is converted to 3600 seconds."
msgstr ""

msgid "A week is converted to 7 days."
msgstr ""

msgid "and days, seconds and microseconds are then normalized so that the representation is unique, with"
msgstr ""

msgid "``0 <= microseconds < 1000000``"
msgstr ""

msgid "``0 <= seconds < 3600*24`` (the number of seconds in one day)"
msgstr ""

msgid "``-999999999 <= days <= 999999999``"
msgstr ""

msgid "If any argument is a float and there are fractional microseconds, the fractional microseconds left over from all arguments are combined and their sum is rounded to the nearest microsecond.  If no argument is a float, the conversion and normalization processes are exact (no information is lost)."
msgstr ""

msgid "If the normalized value of days lies outside the indicated range, :exc:`OverflowError` is raised."
msgstr ""

msgid "Note that normalization of negative values may be surprising at first. For example,"
msgstr ""

msgid ">>> from datetime import timedelta >>> d = timedelta(microseconds=-1) >>> (d.days, d.seconds, d.microseconds) (-1, 86399, 999999)"
msgstr ""

msgid "Class attributes are:"
msgstr ""

msgid "The most negative :class:`timedelta` object, ``timedelta(-999999999)``."
msgstr ""

msgid "The most positive :class:`timedelta` object, ``timedelta(days=999999999, hours=23, minutes=59, seconds=59, microseconds=999999)``."
msgstr ""

msgid "The smallest possible difference between non-equal :class:`timedelta` objects, ``timedelta(microseconds=1)``."
msgstr ""

msgid "Note that, because of normalization, ``timedelta.max`` > ``-timedelta.min``. ``-timedelta.max`` is not representable as a :class:`timedelta` object."
msgstr ""

msgid "Instance attributes (read-only):"
msgstr ""

msgid "``days``"
msgstr ""

msgid "Between -999999999 and 999999999 inclusive"
msgstr ""

msgid "``seconds``"
msgstr ""

msgid "Between 0 and 86399 inclusive"
msgstr ""

msgid "``microseconds``"
msgstr ""

msgid "Between 0 and 999999 inclusive"
msgstr ""

msgid "Supported operations:"
msgstr ""

msgid "Operation"
msgstr ""

msgid "Result"
msgstr ""

msgid "``t1 = t2 + t3``"
msgstr ""

msgid "Sum of *t2* and *t3*. Afterwards *t1*-*t2* == *t3* and *t1*-*t3* == *t2* are true. (1)"
msgstr ""

msgid "``t1 = t2 - t3``"
msgstr ""

msgid "Difference of *t2* and *t3*. Afterwards *t1* == *t2* - *t3* and *t2* == *t1* + *t3* are true. (1)"
msgstr ""

msgid "``t1 = t2 * i or t1 = i * t2``"
msgstr ""

msgid "Delta multiplied by an integer. Afterwards *t1* // i == *t2* is true, provided ``i != 0``."
msgstr ""

msgid "In general, *t1* \\* i == *t1* \\* (i-1) + *t1* is true. (1)"
msgstr ""

msgid "``t1 = t2 * f or t1 = f * t2``"
msgstr ""

msgid "Delta multiplied by a float. The result is rounded to the nearest multiple of timedelta.resolution using round-half-to-even."
msgstr ""

msgid "``f = t2 / t3``"
msgstr ""

msgid "Division (3) of *t2* by *t3*.  Returns a :class:`float` object."
msgstr ""

msgid "``t1 = t2 / f or t1 = t2 / i``"
msgstr ""

msgid "Delta divided by a float or an int. The result is rounded to the nearest multiple of timedelta.resolution using round-half-to-even."
msgstr ""

msgid "``t1 = t2 // i`` or ``t1 = t2 // t3``"
msgstr ""

msgid "The floor is computed and the remainder (if any) is thrown away.  In the second case, an integer is returned. (3)"
msgstr ""

msgid "``t1 = t2 % t3``"
msgstr ""

msgid "The remainder is computed as a :class:`timedelta` object. (3)"
msgstr ""

msgid "``q, r = divmod(t1, t2)``"
msgstr ""

msgid "Computes the quotient and the remainder: ``q = t1 // t2`` (3) and ``r = t1 % t2``. q is an integer and r is a :class:`timedelta` object."
msgstr ""

msgid "``+t1``"
msgstr ""

msgid "Returns a :class:`timedelta` object with the same value. (2)"
msgstr ""

msgid "``-t1``"
msgstr ""

msgid "equivalent to :class:`timedelta`\\ (-*t1.days*, -*t1.seconds*, -*t1.microseconds*), and to *t1*\\* -1. (1)(4)"
msgstr ""

msgid "``abs(t)``"
msgstr ""

msgid "equivalent to +\\ *t* when ``t.days >= 0``, and to -*t* when ``t.days < 0``. (2)"
msgstr ""

msgid "Notes:"
msgstr ""

msgid "This is exact, but may overflow."
msgstr ""

msgid "This is exact, and cannot overflow."
msgstr ""

msgid "Division by 0 raises :exc:`ZeroDivisionError`."
msgstr ""

msgid "-*timedelta.max* is not representable as a :class:`timedelta` object."
msgstr ""

msgid "In addition to the operations listed above :class:`timedelta` objects support certain additions and subtractions with :class:`date` and :class:`datetime` objects (see below)."
msgstr ""

msgid "Comparisons of :class:`timedelta` objects are supported with the :class:`timedelta` object representing the smaller duration considered to be the smaller timedelta. In order to stop mixed-type comparisons from falling back to the default comparison by object address, when a :class:`timedelta` object is compared to an object of a different type, :exc:`TypeError` is raised unless the comparison is ``==`` or ``!=``.  The latter cases return :const:`False` or :const:`True`, respectively."
msgstr ""

msgid ":class:`timedelta` objects are :term:`hashable` (usable as dictionary keys), support efficient pickling, and in Boolean contexts, a :class:`timedelta` object is considered to be true if and only if it isn't equal to ``timedelta(0)``."
msgstr ""

msgid "Instance methods:"
msgstr ""

msgid "Return the total number of seconds contained in the duration. Equivalent to ``td / timedelta(seconds=1)``."
msgstr ""

msgid "Note that for very large time intervals (greater than 270 years on most platforms) this method will lose microsecond accuracy."
msgstr ""

msgid "Example usage:"
msgstr ""

msgid ">>> from datetime import timedelta >>> year = timedelta(days=365) >>> another_year = timedelta(weeks=40, days=84, hours=23, ...                          minutes=50, seconds=600)  # adds up to 365 days >>> year.total_seconds() 31536000.0 >>> year == another_year True >>> ten_years = 10 * year >>> ten_years, ten_years.days // 365 (datetime.timedelta(3650), 10) >>> nine_years = ten_years - year >>> nine_years, nine_years.days // 365 (datetime.timedelta(3285), 9) >>> three_years = nine_years // 3; >>> three_years, three_years.days // 365 (datetime.timedelta(1095), 3) >>> abs(three_years - ten_years) == 2 * three_years + year True"
msgstr ""

msgid ":class:`date` Objects"
msgstr ""

msgid "A :class:`date` object represents a date (year, month and day) in an idealized calendar, the current Gregorian calendar indefinitely extended in both directions.  January 1 of year 1 is called day number 1, January 2 of year 1 is called day number 2, and so on.  This matches the definition of the \"proleptic Gregorian\" calendar in Dershowitz and Reingold's book Calendrical Calculations, where it's the base calendar for all computations.  See the book for algorithms for converting between proleptic Gregorian ordinals and many other calendar systems."
msgstr ""

msgid "All arguments are required.  Arguments may be integers, in the following ranges:"
msgstr ""

msgid "``MINYEAR <= year <= MAXYEAR``"
msgstr ""

msgid "``1 <= month <= 12``"
msgstr ""

msgid "``1 <= day <= number of days in the given month and year``"
msgstr ""

msgid "If an argument outside those ranges is given, :exc:`ValueError` is raised."
msgstr ""

msgid "Other constructors, all class methods:"
msgstr ""

msgid "Return the current local date.  This is equivalent to ``date.fromtimestamp(time.time())``."
msgstr ""

msgid "Return the local date corresponding to the POSIX timestamp, such as is returned by :func:`time.time`.  This may raise :exc:`ValueError`, if the timestamp is out of the range of values supported by the platform C :cfunc:`localtime` function. It's common for this to be restricted to years from 1970 through 2038.  Note that on non-POSIX systems that include leap seconds in their notion of a timestamp, leap seconds are ignored by :meth:`fromtimestamp`."
msgstr ""

msgid "Return the date corresponding to the proleptic Gregorian ordinal, where January 1 of year 1 has ordinal 1.  :exc:`ValueError` is raised unless ``1 <= ordinal <= date.max.toordinal()``. For any date *d*, ``date.fromordinal(d.toordinal()) == d``."
msgstr ""

msgid "Class attributes:"
msgstr ""

msgid "The earliest representable date, ``date(MINYEAR, 1, 1)``."
msgstr ""

msgid "The latest representable date, ``date(MAXYEAR, 12, 31)``."
msgstr ""

msgid "The smallest possible difference between non-equal date objects, ``timedelta(days=1)``."
msgstr ""

msgid "Between :const:`MINYEAR` and :const:`MAXYEAR` inclusive."
msgstr ""

msgid "Between 1 and 12 inclusive."
msgstr ""

msgid "Between 1 and the number of days in the given month of the given year."
msgstr ""

msgid "``date2 = date1 + timedelta``"
msgstr ""

msgid "*date2* is ``timedelta.days`` days removed from *date1*.  (1)"
msgstr ""

msgid "``date2 = date1 - timedelta``"
msgstr ""

msgid "Computes *date2* such that ``date2 + timedelta == date1``. (2)"
msgstr ""

msgid "``timedelta = date1 - date2``"
msgstr ""

msgid "\\(3)"
msgstr ""

msgid "``date1 < date2``"
msgstr ""

msgid "*date1* is considered less than *date2* when *date1* precedes *date2* in time. (4)"
msgstr ""

msgid "*date2* is moved forward in time if ``timedelta.days > 0``, or backward if ``timedelta.days < 0``.  Afterward ``date2 - date1 == timedelta.days``. ``timedelta.seconds`` and ``timedelta.microseconds`` are ignored. :exc:`OverflowError` is raised if ``date2.year`` would be smaller than :const:`MINYEAR` or larger than :const:`MAXYEAR`."
msgstr ""

msgid "This isn't quite equivalent to date1 + (-timedelta), because -timedelta in isolation can overflow in cases where date1 - timedelta does not. ``timedelta.seconds`` and ``timedelta.microseconds`` are ignored."
msgstr ""

msgid "This is exact, and cannot overflow.  timedelta.seconds and timedelta.microseconds are 0, and date2 + timedelta == date1 after."
msgstr ""

msgid "In other words, ``date1 < date2`` if and only if ``date1.toordinal() < date2.toordinal()``. In order to stop comparison from falling back to the default scheme of comparing object addresses, date comparison normally raises :exc:`TypeError` if the other comparand isn't also a :class:`date` object. However, ``NotImplemented`` is returned instead if the other comparand has a :meth:`timetuple` attribute.  This hook gives other kinds of date objects a chance at implementing mixed-type comparison. If not, when a :class:`date` object is compared to an object of a different type, :exc:`TypeError` is raised unless the comparison is ``==`` or ``!=``.  The latter cases return :const:`False` or :const:`True`, respectively."
msgstr ""

msgid "Dates can be used as dictionary keys. In Boolean contexts, all :class:`date` objects are considered to be true."
msgstr ""

msgid "Return a date with the same value, except for those members given new values by whichever keyword arguments are specified.  For example, if ``d == date(2002, 12, 31)``, then ``d.replace(day=26) == date(2002, 12, 26)``."
msgstr ""

msgid "Return a :class:`time.struct_time` such as returned by :func:`time.localtime`. The hours, minutes and seconds are 0, and the DST flag is -1. ``d.timetuple()`` is equivalent to ``time.struct_time((d.year, d.month, d.day, 0, 0, 0, d.weekday(), yday, -1))``, where ``yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1`` is the day number within the current year starting with ``1`` for January 1st."
msgstr ""

msgid "Return the proleptic Gregorian ordinal of the date, where January 1 of year 1 has ordinal 1.  For any :class:`date` object *d*, ``date.fromordinal(d.toordinal()) == d``."
msgstr ""

msgid "Return the day of the week as an integer, where Monday is 0 and Sunday is 6. For example, ``date(2002, 12, 4).weekday() == 2``, a Wednesday. See also :meth:`isoweekday`."
msgstr ""

msgid "Return the day of the week as an integer, where Monday is 1 and Sunday is 7. For example, ``date(2002, 12, 4).isoweekday() == 3``, a Wednesday. See also :meth:`weekday`, :meth:`isocalendar`."
msgstr ""

msgid "Return a 3-tuple, (ISO year, ISO week number, ISO weekday)."
msgstr ""

msgid "The ISO calendar is a widely used variant of the Gregorian calendar. See http://www.phys.uu.nl/~vgent/calendar/isocalendar.htm for a good explanation."
msgstr ""

msgid "The ISO year consists of 52 or 53 full weeks, and where a week starts on a Monday and ends on a Sunday.  The first week of an ISO year is the first (Gregorian) calendar week of a year containing a Thursday. This is called week number 1, and the ISO year of that Thursday is the same as its Gregorian year."
msgstr ""

msgid "For example, 2004 begins on a Thursday, so the first week of ISO year 2004 begins on Monday, 29 Dec 2003 and ends on Sunday, 4 Jan 2004, so that ``date(2003, 12, 29).isocalendar() == (2004, 1, 1)`` and ``date(2004, 1, 4).isocalendar() == (2004, 1, 7)``."
msgstr ""

msgid "Return a string representing the date in ISO 8601 format, 'YYYY-MM-DD'.  For example, ``date(2002, 12, 4).isoformat() == '2002-12-04'``."
msgstr ""

msgid "For a date *d*, ``str(d)`` is equivalent to ``d.isoformat()``."
msgstr ""

msgid "Return a string representing the date, for example ``date(2002, 12, 4).ctime() == 'Wed Dec 4 00:00:00 2002'``. ``d.ctime()`` is equivalent to ``time.ctime(time.mktime(d.timetuple()))`` on platforms where the native C :cfunc:`ctime` function (which :func:`time.ctime` invokes, but which :meth:`date.ctime` does not invoke) conforms to the C standard."
msgstr ""

msgid "Return a string representing the date, controlled by an explicit format string. Format codes referring to hours, minutes or seconds will see 0 values. See section :ref:`strftime-strptime-behavior`."
msgstr ""

msgid "Example of counting days to an event::"
msgstr ""

msgid ">>> import time >>> from datetime import date >>> today = date.today() >>> today datetime.date(2007, 12, 5) >>> today == date.fromtimestamp(time.time()) True >>> my_birthday = date(today.year, 6, 24) >>> if my_birthday < today: ...     my_birthday = my_birthday.replace(year=today.year + 1) >>> my_birthday datetime.date(2008, 6, 24) >>> time_to_birthday = abs(my_birthday - today) >>> time_to_birthday.days 202"
msgstr ""

msgid "Example of working with :class:`date`:"
msgstr ""

msgid ">>> from datetime import date >>> d = date.fromordinal(730920) # 730920th day after 1. 1. 0001 >>> d datetime.date(2002, 3, 11) >>> t = d.timetuple() >>> for i in t:      ...     print(i) 2002                # year 3                   # month 11                  # day 0 0 0 0                   # weekday (0 = Monday) 70                  # 70th day in the year -1 >>> ic = d.isocalendar() >>> for i in ic:     ...     print(i) 2002                # ISO year 11                  # ISO week number 1                   # ISO day number ( 1 = Monday ) >>> d.isoformat() '2002-03-11' >>> d.strftime(\"%d/%m/%y\") '11/03/02' >>> d.strftime(\"%A %d. %B %Y\") 'Monday 11. March 2002'"
msgstr ""

msgid ":class:`datetime` Objects"
msgstr ""

msgid "A :class:`datetime` object is a single object containing all the information from a :class:`date` object and a :class:`time` object.  Like a :class:`date` object, :class:`datetime` assumes the current Gregorian calendar extended in both directions; like a time object, :class:`datetime` assumes there are exactly 3600\\*24 seconds in every day."
msgstr ""

msgid "Constructor:"
msgstr ""

msgid "The year, month and day arguments are required.  *tzinfo* may be ``None``, or an instance of a :class:`tzinfo` subclass.  The remaining arguments may be integers, in the following ranges:"
msgstr ""

msgid "``0 <= hour < 24``"
msgstr ""

msgid "``0 <= minute < 60``"
msgstr ""

msgid "``0 <= second < 60``"
msgstr ""

msgid "``0 <= microsecond < 1000000``"
msgstr ""

msgid "Return the current local datetime, with :attr:`tzinfo` ``None``. This is equivalent to ``datetime.fromtimestamp(time.time())``. See also :meth:`now`, :meth:`fromtimestamp`."
msgstr ""

msgid "Return the current local date and time.  If optional argument *tz* is ``None`` or not specified, this is like :meth:`today`, but, if possible, supplies more precision than can be gotten from going through a :func:`time.time` timestamp (for example, this may be possible on platforms supplying the C :cfunc:`gettimeofday` function)."
msgstr ""

msgid "Else *tz* must be an instance of a class :class:`tzinfo` subclass, and the current date and time are converted to *tz*'s time zone.  In this case the result is equivalent to ``tz.fromutc(datetime.utcnow().replace(tzinfo=tz))``. See also :meth:`today`, :meth:`utcnow`."
msgstr ""

msgid "Return the current UTC date and time, with :attr:`tzinfo` ``None``. This is like :meth:`now`, but returns the current UTC date and time, as a naive :class:`datetime` object.  An aware current UTC datetime can be obtained by calling ``datetime.now(timezone.utc)``.  See also :meth:`now`."
msgstr ""

msgid "Return the local date and time corresponding to the POSIX timestamp, such as is returned by :func:`time.time`. If optional argument *tz* is ``None`` or not specified, the timestamp is converted to the platform's local date and time, and the returned :class:`datetime` object is naive."
msgstr ""

msgid "Else *tz* must be an instance of a class :class:`tzinfo` subclass, and the timestamp is converted to *tz*'s time zone.  In this case the result is equivalent to ``tz.fromutc(datetime.utcfromtimestamp(timestamp).replace(tzinfo=tz))``."
msgstr ""

msgid ":meth:`fromtimestamp` may raise :exc:`ValueError`, if the timestamp is out of the range of values supported by the platform C :cfunc:`localtime` or :cfunc:`gmtime` functions.  It's common for this to be restricted to years in 1970 through 2038. Note that on non-POSIX systems that include leap seconds in their notion of a timestamp, leap seconds are ignored by :meth:`fromtimestamp`, and then it's possible to have two timestamps differing by a second that yield identical :class:`datetime` objects. See also :meth:`utcfromtimestamp`."
msgstr ""

msgid "Return the UTC :class:`datetime` corresponding to the POSIX timestamp, with :attr:`tzinfo` ``None``. This may raise :exc:`ValueError`, if the timestamp is out of the range of values supported by the platform C :cfunc:`gmtime` function. It's common for this to be restricted to years in 1970 through 2038. See also :meth:`fromtimestamp`."
msgstr ""

msgid "Return the :class:`datetime` corresponding to the proleptic Gregorian ordinal, where January 1 of year 1 has ordinal 1. :exc:`ValueError` is raised unless ``1 <= ordinal <= datetime.max.toordinal()``.  The hour, minute, second and microsecond of the result are all 0, and :attr:`tzinfo` is ``None``."
msgstr ""

msgid "Return a new :class:`datetime` object whose date members are equal to the given :class:`date` object's, and whose time and :attr:`tzinfo` members are equal to the given :class:`time` object's. For any :class:`datetime` object *d*, ``d == datetime.combine(d.date(), d.timetz())``.  If date is a :class:`datetime` object, its time and :attr:`tzinfo` members are ignored."
msgstr ""

msgid "Return a :class:`datetime` corresponding to *date_string*, parsed according to *format*.  This is equivalent to ``datetime(*(time.strptime(date_string, format)[0:6]))``. :exc:`ValueError` is raised if the date_string and format can't be parsed by :func:`time.strptime` or if it returns a value which isn't a time tuple. See section :ref:`strftime-strptime-behavior`."
msgstr ""

msgid "The earliest representable :class:`datetime`, ``datetime(MINYEAR, 1, 1, tzinfo=None)``."
msgstr ""

msgid "The latest representable :class:`datetime`, ``datetime(MAXYEAR, 12, 31, 23, 59, 59, 999999, tzinfo=None)``."
msgstr ""

msgid "The smallest possible difference between non-equal :class:`datetime` objects, ``timedelta(microseconds=1)``."
msgstr ""

msgid "In ``range(24)``."
msgstr ""

msgid "In ``range(60)``."
msgstr ""

msgid "In ``range(1000000)``."
msgstr ""

msgid "The object passed as the *tzinfo* argument to the :class:`datetime` constructor, or ``None`` if none was passed."
msgstr ""

msgid "``datetime2 = datetime1 + timedelta``"
msgstr ""

msgid "\\(1)"
msgstr ""

msgid "``datetime2 = datetime1 - timedelta``"
msgstr ""

msgid "\\(2)"
msgstr ""

msgid "``timedelta = datetime1 - datetime2``"
msgstr ""

msgid "``datetime1 < datetime2``"
msgstr ""

msgid "Compares :class:`datetime` to :class:`datetime`. (4)"
msgstr ""

msgid "datetime2 is a duration of timedelta removed from datetime1, moving forward in time if ``timedelta.days`` > 0, or backward if ``timedelta.days`` < 0.  The result has the same :attr:`tzinfo` member as the input datetime, and datetime2 - datetime1 == timedelta after. :exc:`OverflowError` is raised if datetime2.year would be smaller than :const:`MINYEAR` or larger than :const:`MAXYEAR`. Note that no time zone adjustments are done even if the input is an aware object."
msgstr ""

msgid "Computes the datetime2 such that datetime2 + timedelta == datetime1. As for addition, the result has the same :attr:`tzinfo` member as the input datetime, and no time zone adjustments are done even if the input is aware. This isn't quite equivalent to datetime1 + (-timedelta), because -timedelta in isolation can overflow in cases where datetime1 - timedelta does not."
msgstr ""

msgid "Subtraction of a :class:`datetime` from a :class:`datetime` is defined only if both operands are naive, or if both are aware.  If one is aware and the other is naive, :exc:`TypeError` is raised."
msgstr ""

msgid "If both are naive, or both are aware and have the same :attr:`tzinfo` member, the :attr:`tzinfo` members are ignored, and the result is a :class:`timedelta` object *t* such that ``datetime2 + t == datetime1``.  No time zone adjustments are done in this case."
msgstr ""

msgid "If both are aware and have different :attr:`tzinfo` members, ``a-b`` acts as if *a* and *b* were first converted to naive UTC datetimes first.  The result is ``(a.replace(tzinfo=None) - a.utcoffset()) - (b.replace(tzinfo=None) - b.utcoffset())`` except that the implementation never overflows."
msgstr ""

msgid "*datetime1* is considered less than *datetime2* when *datetime1* precedes *datetime2* in time."
msgstr ""

msgid "If one comparand is naive and the other is aware, :exc:`TypeError` is raised. If both comparands are aware, and have the same :attr:`tzinfo` member, the common :attr:`tzinfo` member is ignored and the base datetimes are compared.  If both comparands are aware and have different :attr:`tzinfo` members, the comparands are first adjusted by subtracting their UTC offsets (obtained from ``self.utcoffset()``)."
msgstr ""

msgid "In order to stop comparison from falling back to the default scheme of comparing object addresses, datetime comparison normally raises :exc:`TypeError` if the other comparand isn't also a :class:`datetime` object.  However, ``NotImplemented`` is returned instead if the other comparand has a :meth:`timetuple` attribute.  This hook gives other kinds of date objects a chance at implementing mixed-type comparison.  If not, when a :class:`datetime` object is compared to an object of a different type, :exc:`TypeError` is raised unless the comparison is ``==`` or ``!=``.  The latter cases return :const:`False` or :const:`True`, respectively."
msgstr ""

msgid ":class:`datetime` objects can be used as dictionary keys. In Boolean contexts, all :class:`datetime` objects are considered to be true."
msgstr ""

msgid "Return :class:`date` object with same year, month and day."
msgstr ""

msgid "Return :class:`time` object with same hour, minute, second and microsecond. :attr:`tzinfo` is ``None``.  See also method :meth:`timetz`."
msgstr ""

msgid "Return :class:`time` object with same hour, minute, second, microsecond, and tzinfo members.  See also method :meth:`time`."
msgstr ""

msgid "Return a datetime with the same members, except for those members given new values by whichever keyword arguments are specified.  Note that ``tzinfo=None`` can be specified to create a naive datetime from an aware datetime with no conversion of date and time members."
msgstr ""

msgid "Return a :class:`datetime` object with new :attr:`tzinfo` member *tz*, adjusting the date and time members so the result is the same UTC time as *self*, but in *tz*'s local time."
msgstr ""

msgid "*tz* must be an instance of a :class:`tzinfo` subclass, and its :meth:`utcoffset` and :meth:`dst` methods must not return ``None``.  *self* must be aware (``self.tzinfo`` must not be ``None``, and ``self.utcoffset()`` must not return ``None``)."
msgstr ""

msgid "If ``self.tzinfo`` is *tz*, ``self.astimezone(tz)`` is equal to *self*:  no adjustment of date or time members is performed. Else the result is local time in time zone *tz*, representing the same UTC time as *self*:  after ``astz = dt.astimezone(tz)``, ``astz - astz.utcoffset()`` will usually have the same date and time members as ``dt - dt.utcoffset()``. The discussion of class :class:`tzinfo` explains the cases at Daylight Saving Time transition boundaries where this cannot be achieved (an issue only if *tz* models both standard and daylight time)."
msgstr ""

msgid "If you merely want to attach a time zone object *tz* to a datetime *dt* without adjustment of date and time members, use ``dt.replace(tzinfo=tz)``.  If you merely want to remove the time zone object from an aware datetime *dt* without conversion of date and time members, use ``dt.replace(tzinfo=None)``."
msgstr ""

msgid "Note that the default :meth:`tzinfo.fromutc` method can be overridden in a :class:`tzinfo` subclass to affect the result returned by :meth:`astimezone`. Ignoring error cases, :meth:`astimezone` acts like::"
msgstr ""

msgid "def astimezone(self, tz):     if self.tzinfo is tz:         return self     # Convert self to UTC, and attach the new time zone object.     utc = (self - self.utcoffset()).replace(tzinfo=tz)     # Convert from UTC to tz's local time.     return tz.fromutc(utc)"
msgstr ""

msgid "If :attr:`tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo.utcoffset(self)``, and raises an exception if the latter doesn't return ``None``, or a :class:`timedelta` object representing a whole number of minutes with magnitude less than one day."
msgstr ""

msgid "If :attr:`tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo.dst(self)``, and raises an exception if the latter doesn't return ``None``, or a :class:`timedelta` object representing a whole number of minutes with magnitude less than one day."
msgstr ""

msgid "If :attr:`tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo.tzname(self)``, raises an exception if the latter doesn't return ``None`` or a string object,"
msgstr ""

msgid "Return a :class:`time.struct_time` such as returned by :func:`time.localtime`. ``d.timetuple()`` is equivalent to ``time.struct_time((d.year, d.month, d.day, d.hour, d.minute, d.second, d.weekday(), yday, dst))``, where ``yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1`` is the day number within the current year starting with ``1`` for January 1st. The :attr:`tm_isdst` flag of the result is set according to the :meth:`dst` method: :attr:`tzinfo` is ``None`` or :meth:`dst`` returns ``None``, :attr:`tm_isdst` is set to ``-1``; else if :meth:`dst` returns a non-zero value, :attr:`tm_isdst` is set to ``1``; else :attr:`tm_isdst` is set to ``0``."
msgstr ""

msgid "If :class:`datetime` instance *d* is naive, this is the same as ``d.timetuple()`` except that :attr:`tm_isdst` is forced to 0 regardless of what ``d.dst()`` returns.  DST is never in effect for a UTC time."
msgstr ""

msgid "If *d* is aware, *d* is normalized to UTC time, by subtracting ``d.utcoffset()``, and a :class:`time.struct_time` for the normalized time is returned.  :attr:`tm_isdst` is forced to 0. Note that an :exc:`OverflowError` may be raised if *d*.year was ``MINYEAR`` or ``MAXYEAR`` and UTC adjustment spills over a year boundary."
msgstr ""

msgid "Return the proleptic Gregorian ordinal of the date.  The same as ``self.date().toordinal()``."
msgstr ""

msgid "Return the day of the week as an integer, where Monday is 0 and Sunday is 6. The same as ``self.date().weekday()``. See also :meth:`isoweekday`."
msgstr ""

msgid "Return the day of the week as an integer, where Monday is 1 and Sunday is 7. The same as ``self.date().isoweekday()``. See also :meth:`weekday`, :meth:`isocalendar`."
msgstr ""

msgid "Return a 3-tuple, (ISO year, ISO week number, ISO weekday).  The same as ``self.date().isocalendar()``."
msgstr ""

msgid "Return a string representing the date and time in ISO 8601 format, YYYY-MM-DDTHH:MM:SS.mmmmmm or, if :attr:`microsecond` is 0, YYYY-MM-DDTHH:MM:SS"
msgstr ""

msgid "If :meth:`utcoffset` does not return ``None``, a 6-character string is appended, giving the UTC offset in (signed) hours and minutes: YYYY-MM-DDTHH:MM:SS.mmmmmm+HH:MM or, if :attr:`microsecond` is 0 YYYY-MM-DDTHH:MM:SS+HH:MM"
msgstr ""

msgid "The optional argument *sep* (default ``'T'``) is a one-character separator, placed between the date and time portions of the result.  For example,"
msgstr ""

msgid ">>> from datetime import tzinfo, timedelta, datetime >>> class TZ(tzinfo): ...     def utcoffset(self, dt): return timedelta(minutes=-399) ... >>> datetime(2002, 12, 25, tzinfo=TZ()).isoformat(' ') '2002-12-25 00:00:00-06:39'"
msgstr ""

msgid "For a :class:`datetime` instance *d*, ``str(d)`` is equivalent to ``d.isoformat(' ')``."
msgstr ""

msgid "Return a string representing the date and time, for example ``datetime(2002, 12, 4, 20, 30, 40).ctime() == 'Wed Dec  4 20:30:40 2002'``. ``d.ctime()`` is equivalent to ``time.ctime(time.mktime(d.timetuple()))`` on platforms where the native C :cfunc:`ctime` function (which :func:`time.ctime` invokes, but which :meth:`datetime.ctime` does not invoke) conforms to the C standard."
msgstr ""

msgid "Return a string representing the date and time, controlled by an explicit format string.  See section :ref:`strftime-strptime-behavior`."
msgstr ""

msgid "Examples of working with datetime objects:"
msgstr ""

msgid ">>> from datetime import datetime, date, time >>> # Using datetime.combine() >>> d = date(2005, 7, 14) >>> t = time(12, 30) >>> datetime.combine(d, t) datetime.datetime(2005, 7, 14, 12, 30) >>> # Using datetime.now() or datetime.utcnow() >>> datetime.now()    datetime.datetime(2007, 12, 6, 16, 29, 43, 79043)   # GMT +1 >>> datetime.utcnow()    datetime.datetime(2007, 12, 6, 15, 29, 43, 79060) >>> # Using datetime.strptime() >>> dt = datetime.strptime(\"21/11/06 16:30\", \"%d/%m/%y %H:%M\") >>> dt datetime.datetime(2006, 11, 21, 16, 30) >>> # Using datetime.timetuple() to get tuple of all attributes >>> tt = dt.timetuple() >>> for it in tt:    ...     print(it) ... 2006    # year 11      # month 21      # day 16      # hour 30      # minute 0       # second 1       # weekday (0 = Monday) 325     # number of days since 1st January -1      # dst - method tzinfo.dst() returned None >>> # Date in ISO format >>> ic = dt.isocalendar() >>> for it in ic:    ...     print(it) ... 2006    # ISO year 47      # ISO week 2       # ISO weekday >>> # Formatting datetime >>> dt.strftime(\"%A, %d. %B %Y %I:%M%p\") 'Tuesday, 21. November 2006 04:30PM'"
msgstr ""

msgid "Using datetime with tzinfo:"
msgstr ""

msgid ">>> from datetime import timedelta, datetime, tzinfo >>> class GMT1(tzinfo): ...     def __init__(self):         # DST starts last Sunday in March ...         d = datetime(dt.year, 4, 1)   # ends last Sunday in October ...         self.dston = d - timedelta(days=d.weekday() + 1) ...         d = datetime(dt.year, 11, 1) ...         self.dstoff = d - timedelta(days=d.weekday() + 1) ...     def utcoffset(self, dt): ...         return timedelta(hours=1) + self.dst(dt) ...     def dst(self, dt): ...         if self.dston <=  dt.replace(tzinfo=None) < self.dstoff: ...             return timedelta(hours=1) ...         else: ...             return timedelta(0) ...     def tzname(self,dt): ...          return \"GMT +1\" ... >>> class GMT2(tzinfo): ...     def __init__(self): ...         d = datetime(dt.year, 4, 1) ...         self.dston = d - timedelta(days=d.weekday() + 1) ...         d = datetime(dt.year, 11, 1) ...         self.dstoff = d - timedelta(days=d.weekday() + 1) ...     def utcoffset(self, dt): ...         return timedelta(hours=1) + self.dst(dt) ...     def dst(self, dt): ...         if self.dston <=  dt.replace(tzinfo=None) < self.dstoff: ...             return timedelta(hours=2) ...         else: ...             return timedelta(0) ...     def tzname(self,dt): ...         return \"GMT +2\" ... >>> gmt1 = GMT1() >>> # Daylight Saving Time >>> dt1 = datetime(2006, 11, 21, 16, 30, tzinfo=gmt1) >>> dt1.dst() datetime.timedelta(0) >>> dt1.utcoffset() datetime.timedelta(0, 3600) >>> dt2 = datetime(2006, 6, 14, 13, 0, tzinfo=gmt1) >>> dt2.dst() datetime.timedelta(0, 3600) >>> dt2.utcoffset() datetime.timedelta(0, 7200) >>> # Convert datetime to another time zone >>> dt3 = dt2.astimezone(GMT2()) >>> dt3     # doctest: +ELLIPSIS datetime.datetime(2006, 6, 14, 14, 0, tzinfo=<GMT2 object at 0x...>) >>> dt2     # doctest: +ELLIPSIS datetime.datetime(2006, 6, 14, 13, 0, tzinfo=<GMT1 object at 0x...>) >>> dt2.utctimetuple() == dt3.utctimetuple() True"
msgstr ""

msgid ":class:`time` Objects"
msgstr ""

msgid "A time object represents a (local) time of day, independent of any particular day, and subject to adjustment via a :class:`tzinfo` object."
msgstr ""

msgid "All arguments are optional.  *tzinfo* may be ``None``, or an instance of a :class:`tzinfo` subclass.  The remaining arguments may be integers, in the following ranges:"
msgstr ""

msgid "``0 <= microsecond < 1000000``."
msgstr ""

msgid "If an argument outside those ranges is given, :exc:`ValueError` is raised.  All default to ``0`` except *tzinfo*, which defaults to :const:`None`."
msgstr ""

msgid "The earliest representable :class:`time`, ``time(0, 0, 0, 0)``."
msgstr ""

msgid "The latest representable :class:`time`, ``time(23, 59, 59, 999999)``."
msgstr ""

msgid "The smallest possible difference between non-equal :class:`time` objects, ``timedelta(microseconds=1)``, although note that arithmetic on :class:`time` objects is not supported."
msgstr ""

msgid "The object passed as the tzinfo argument to the :class:`time` constructor, or ``None`` if none was passed."
msgstr ""

msgid "comparison of :class:`time` to :class:`time`, where *a* is considered less than *b* when *a* precedes *b* in time.  If one comparand is naive and the other is aware, :exc:`TypeError` is raised.  If both comparands are aware, and have the same :attr:`tzinfo` member, the common :attr:`tzinfo` member is ignored and the base times are compared.  If both comparands are aware and have different :attr:`tzinfo` members, the comparands are first adjusted by subtracting their UTC offsets (obtained from ``self.utcoffset()``). In order to stop mixed-type comparisons from falling back to the default comparison by object address, when a :class:`time` object is compared to an object of a different type, :exc:`TypeError` is raised unless the comparison is ``==`` or ``!=``.  The latter cases return :const:`False` or :const:`True`, respectively."
msgstr ""

msgid "hash, use as dict key"
msgstr ""

msgid "efficient pickling"
msgstr ""

msgid "in Boolean contexts, a :class:`time` object is considered to be true if and only if, after converting it to minutes and subtracting :meth:`utcoffset` (or ``0`` if that's ``None``), the result is non-zero."
msgstr ""

msgid "Return a :class:`time` with the same value, except for those members given new values by whichever keyword arguments are specified.  Note that ``tzinfo=None`` can be specified to create a naive :class:`time` from an aware :class:`time`, without conversion of the time members."
msgstr ""

msgid "Return a string representing the time in ISO 8601 format, HH:MM:SS.mmmmmm or, if self.microsecond is 0, HH:MM:SS If :meth:`utcoffset` does not return ``None``, a 6-character string is appended, giving the UTC offset in (signed) hours and minutes: HH:MM:SS.mmmmmm+HH:MM or, if self.microsecond is 0, HH:MM:SS+HH:MM"
msgstr ""

msgid "For a time *t*, ``str(t)`` is equivalent to ``t.isoformat()``."
msgstr ""

msgid "Return a string representing the time, controlled by an explicit format string. See section :ref:`strftime-strptime-behavior`."
msgstr ""

msgid "If :attr:`tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo.utcoffset(None)``, and raises an exception if the latter doesn't return ``None`` or a :class:`timedelta` object representing a whole number of minutes with magnitude less than one day."
msgstr ""

msgid "If :attr:`tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo.dst(None)``, and raises an exception if the latter doesn't return ``None``, or a :class:`timedelta` object representing a whole number of minutes with magnitude less than one day."
msgstr ""

msgid "If :attr:`tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo.tzname(None)``, or raises an exception if the latter doesn't return ``None`` or a string object."
msgstr ""

msgid ">>> from datetime import time, tzinfo >>> class GMT1(tzinfo): ...     def utcoffset(self, dt): ...         return timedelta(hours=1) ...     def dst(self, dt): ...         return timedelta(0) ...     def tzname(self,dt): ...         return \"Europe/Prague\" ... >>> t = time(12, 10, 30, tzinfo=GMT1()) >>> t                               # doctest: +ELLIPSIS datetime.time(12, 10, 30, tzinfo=<GMT1 object at 0x...>) >>> gmt = GMT1() >>> t.isoformat() '12:10:30+01:00' >>> t.dst() datetime.timedelta(0) >>> t.tzname() 'Europe/Prague' >>> t.strftime(\"%H:%M:%S %Z\") '12:10:30 Europe/Prague'"
msgstr ""

msgid ":class:`tzinfo` Objects"
msgstr ""

msgid ":class:`tzinfo` is an abstract base class, meaning that this class should not be instantiated directly.  You need to derive a concrete subclass, and (at least) supply implementations of the standard :class:`tzinfo` methods needed by the :class:`datetime` methods you use.  The :mod:`datetime` module supplies a simple concrete subclass of :class:`tzinfo` :class:`timezone` which can reprsent timezones with fixed offset from UTC such as UTC itself or North American EST and EDT."
msgstr ""

msgid "An instance of (a concrete subclass of) :class:`tzinfo` can be passed to the constructors for :class:`datetime` and :class:`time` objects. The latter objects view their members as being in local time, and the :class:`tzinfo` object supports methods revealing offset of local time from UTC, the name of the time zone, and DST offset, all relative to a date or time object passed to them."
msgstr ""

msgid "Special requirement for pickling:  A :class:`tzinfo` subclass must have an :meth:`__init__` method that can be called with no arguments, else it can be pickled but possibly not unpickled again.  This is a technical requirement that may be relaxed in the future."
msgstr ""

msgid "A concrete subclass of :class:`tzinfo` may need to implement the following methods.  Exactly which methods are needed depends on the uses made of aware :mod:`datetime` objects.  If in doubt, simply implement all of them."
msgstr ""

msgid "Return offset of local time from UTC, in minutes east of UTC.  If local time is west of UTC, this should be negative.  Note that this is intended to be the total offset from UTC; for example, if a :class:`tzinfo` object represents both time zone and DST adjustments, :meth:`utcoffset` should return their sum.  If the UTC offset isn't known, return ``None``.  Else the value returned must be a :class:`timedelta` object specifying a whole number of minutes in the range -1439 to 1439 inclusive (1440 = 24\\*60; the magnitude of the offset must be less than one day).  Most implementations of :meth:`utcoffset` will probably look like one of these two::"
msgstr ""

msgid "return CONSTANT                 # fixed-offset class return CONSTANT + self.dst(dt)  # daylight-aware class"
msgstr ""

msgid "If :meth:`utcoffset` does not return ``None``, :meth:`dst` should not return ``None`` either."
msgstr ""

msgid "The default implementation of :meth:`utcoffset` raises :exc:`NotImplementedError`."
msgstr ""

msgid "Return the daylight saving time (DST) adjustment, in minutes east of UTC, or ``None`` if DST information isn't known.  Return ``timedelta(0)`` if DST is not in effect. If DST is in effect, return the offset as a :class:`timedelta` object (see :meth:`utcoffset` for details). Note that DST offset, if applicable, has already been added to the UTC offset returned by :meth:`utcoffset`, so there's no need to consult :meth:`dst` unless you're interested in obtaining DST info separately.  For example, :meth:`datetime.timetuple` calls its :attr:`tzinfo` member's :meth:`dst` method to determine how the :attr:`tm_isdst` flag should be set, and :meth:`tzinfo.fromutc` calls :meth:`dst` to account for DST changes when crossing time zones."
msgstr ""

msgid "An instance *tz* of a :class:`tzinfo` subclass that models both standard and daylight times must be consistent in this sense:"
msgstr ""

msgid "``tz.utcoffset(dt) - tz.dst(dt)``"
msgstr ""

msgid "must return the same result for every :class:`datetime` *dt* with ``dt.tzinfo == tz``  For sane :class:`tzinfo` subclasses, this expression yields the time zone's \"standard offset\", which should not depend on the date or the time, but only on geographic location.  The implementation of :meth:`datetime.astimezone` relies on this, but cannot detect violations; it's the programmer's responsibility to ensure it.  If a :class:`tzinfo` subclass cannot guarantee this, it may be able to override the default implementation of :meth:`tzinfo.fromutc` to work correctly with :meth:`astimezone` regardless."
msgstr ""

msgid "Most implementations of :meth:`dst` will probably look like one of these two::"
msgstr ""

msgid "def dst(self):     # a fixed-offset class:  doesn't account for DST     return timedelta(0)"
msgstr ""

msgid "or ::"
msgstr ""

msgid "def dst(self):     # Code to set dston and dstoff to the time zone's DST     # transition times based on the input dt.year, and expressed     # in standard local time.  Then      if dston <= dt.replace(tzinfo=None) < dstoff:         return timedelta(hours=1)     else:         return timedelta(0)"
msgstr ""

msgid "The default implementation of :meth:`dst` raises :exc:`NotImplementedError`."
msgstr ""

msgid "Return the time zone name corresponding to the :class:`datetime` object *dt*, as a string. Nothing about string names is defined by the :mod:`datetime` module, and there's no requirement that it mean anything in particular.  For example, \"GMT\", \"UTC\", \"-500\", \"-5:00\", \"EDT\", \"US/Eastern\", \"America/New York\" are all valid replies.  Return ``None`` if a string name isn't known.  Note that this is a method rather than a fixed string primarily because some :class:`tzinfo` subclasses will wish to return different names depending on the specific value of *dt* passed, especially if the :class:`tzinfo` class is accounting for daylight time."
msgstr ""

msgid "The default implementation of :meth:`tzname` raises :exc:`NotImplementedError`."
msgstr ""

msgid "These methods are called by a :class:`datetime` or :class:`time` object, in response to their methods of the same names.  A :class:`datetime` object passes itself as the argument, and a :class:`time` object passes ``None`` as the argument.  A :class:`tzinfo` subclass's methods should therefore be prepared to accept a *dt* argument of ``None``, or of class :class:`datetime`."
msgstr ""

msgid "When ``None`` is passed, it's up to the class designer to decide the best response.  For example, returning ``None`` is appropriate if the class wishes to say that time objects don't participate in the :class:`tzinfo` protocols.  It may be more useful for ``utcoffset(None)`` to return the standard UTC offset, as there is no other convention for discovering the standard offset."
msgstr ""

msgid "When a :class:`datetime` object is passed in response to a :class:`datetime` method, ``dt.tzinfo`` is the same object as *self*.  :class:`tzinfo` methods can rely on this, unless user code calls :class:`tzinfo` methods directly.  The intent is that the :class:`tzinfo` methods interpret *dt* as being in local time, and not need worry about objects in other timezones."
msgstr ""

msgid "There is one more :class:`tzinfo` method that a subclass may wish to override:"
msgstr ""

msgid "This is called from the default :class:`datetime.astimezone()` implementation. When called from that, ``dt.tzinfo`` is *self*, and *dt*'s date and time members are to be viewed as expressing a UTC time.  The purpose of :meth:`fromutc` is to adjust the date and time members, returning an equivalent datetime in *self*'s local time."
msgstr ""

msgid "Most :class:`tzinfo` subclasses should be able to inherit the default :meth:`fromutc` implementation without problems.  It's strong enough to handle fixed-offset time zones, and time zones accounting for both standard and daylight time, and the latter even if the DST transition times differ in different years.  An example of a time zone the default :meth:`fromutc` implementation may not handle correctly in all cases is one where the standard offset (from UTC) depends on the specific date and time passed, which can happen for political reasons. The default implementations of :meth:`astimezone` and :meth:`fromutc` may not produce the result you want if the result is one of the hours straddling the moment the standard offset changes."
msgstr ""

msgid "Skipping code for error cases, the default :meth:`fromutc` implementation acts like::"
msgstr ""

msgid "def fromutc(self, dt):     # raise ValueError error if dt.tzinfo is not self     dtoff = dt.utcoffset()     dtdst = dt.dst()     # raise ValueError if dtoff is None or dtdst is None     delta = dtoff - dtdst  # this is self's standard offset     if delta:         dt += delta   # convert to standard local time         dtdst = dt.dst()         # raise ValueError if dtdst is None     if dtdst:         return dt + dtdst     else:         return dt"
msgstr ""

msgid "Example :class:`tzinfo` classes:"
msgstr ""

msgid "from datetime import tzinfo, timedelta, datetime  ZERO = timedelta(0) HOUR = timedelta(hours=1)  # A UTC class.  class UTC(tzinfo):     \"\"\"UTC\"\"\"      def utcoffset(self, dt):         return ZERO      def tzname(self, dt):         return \"UTC\"      def dst(self, dt):         return ZERO  utc = UTC()  # A class building tzinfo objects for fixed-offset time zones. # Note that FixedOffset(0, \"UTC\") is a different way to build a # UTC tzinfo object.  class FixedOffset(tzinfo):     \"\"\"Fixed offset in minutes east from UTC.\"\"\"      def __init__(self, offset, name):         self.__offset = timedelta(minutes = offset)         self.__name = name      def utcoffset(self, dt):         return self.__offset      def tzname(self, dt):         return self.__name      def dst(self, dt):         return ZERO  # A class capturing the platform's idea of local time.  import time as _time  STDOFFSET = timedelta(seconds = -_time.timezone) if _time.daylight:     DSTOFFSET = timedelta(seconds = -_time.altzone) else:     DSTOFFSET = STDOFFSET  DSTDIFF = DSTOFFSET - STDOFFSET  class LocalTimezone(tzinfo):      def utcoffset(self, dt):         if self._isdst(dt):             return DSTOFFSET         else:             return STDOFFSET      def dst(self, dt):         if self._isdst(dt):             return DSTDIFF         else:             return ZERO      def tzname(self, dt):         return _time.tzname[self._isdst(dt)]      def _isdst(self, dt):         tt = (dt.year, dt.month, dt.day,               dt.hour, dt.minute, dt.second,               dt.weekday(), 0, -1)         stamp = _time.mktime(tt)         tt = _time.localtime(stamp)         return tt.tm_isdst > 0  Local = LocalTimezone()   # A complete implementation of current DST rules for major US time zones.  def first_sunday_on_or_after(dt):     days_to_go = 6 - dt.weekday()     if days_to_go:         dt += timedelta(days_to_go)     return dt   # US DST Rules # # This is a simplified (i.e., wrong for a few cases) set of rules for US # DST start and end times. For a complete and up-to-date set of DST rules # and timezone definitions, visit the Olson Database (or try pytz): # http://www.twinsun.com/tz/tz-link.htm # http://sourceforge.net/projects/pytz/ (might not be up-to-date) # # In the US, since 2007, DST starts at 2am (standard time) on the second # Sunday in March, which is the first Sunday on or after Mar 8. DSTSTART_2007 = datetime(1, 3, 8, 2) # and ends at 2am (DST time; 1am standard time) on the first Sunday of Nov. DSTEND_2007 = datetime(1, 11, 1, 1) # From 1987 to 2006, DST used to start at 2am (standard time) on the first # Sunday in April and to end at 2am (DST time; 1am standard time) on the last # Sunday of October, which is the first Sunday on or after Oct 25. DSTSTART_1987_2006 = datetime(1, 4, 1, 2) DSTEND_1987_2006 = datetime(1, 10, 25, 1) # From 1967 to 1986, DST used to start at 2am (standard time) on the last # Sunday in April (the one on or after April 24) and to end at 2am (DST time; # 1am standard time) on the last Sunday of October, which is the first Sunday # on or after Oct 25. DSTSTART_1967_1986 = datetime(1, 4, 24, 2) DSTEND_1967_1986 = DSTEND_1987_2006  class USTimeZone(tzinfo):      def __init__(self, hours, reprname, stdname, dstname):         self.stdoffset = timedelta(hours=hours)         self.reprname = reprname         self.stdname = stdname         self.dstname = dstname      def __repr__(self):         return self.reprname      def tzname(self, dt):         if self.dst(dt):             return self.dstname         else:             return self.stdname      def utcoffset(self, dt):         return self.stdoffset + self.dst(dt)      def dst(self, dt):         if dt is None or dt.tzinfo is None:             # An exception may be sensible here, in one or both cases.             # It depends on how you want to treat them.  The default             # fromutc() implementation (called by the default astimezone()             # implementation) passes a datetime with dt.tzinfo is self.             return ZERO         assert dt.tzinfo is self          # Find start and end times for US DST. For years before 1967, return         # ZERO for no DST.         if 2006 < dt.year:             dststart, dstend = DSTSTART_2007, DSTEND_2007         elif 1986 < dt.year < 2007:             dststart, dstend = DSTSTART_1987_2006, DSTEND_1987_2006         elif 1966 < dt.year < 1987:             dststart, dstend = DSTSTART_1967_1986, DSTEND_1967_1986         else:             return ZERO          start = first_sunday_on_or_after(dststart.replace(year=dt.year))         end = first_sunday_on_or_after(dstend.replace(year=dt.year))          # Can't compare naive to aware objects, so strip the timezone from         # dt first.         if start <= dt.replace(tzinfo=None) < end:             return HOUR         else:             return ZERO  Eastern  = USTimeZone(-5, \"Eastern\",  \"EST\", \"EDT\") Central  = USTimeZone(-6, \"Central\",  \"CST\", \"CDT\") Mountain = USTimeZone(-7, \"Mountain\", \"MST\", \"MDT\") Pacific  = USTimeZone(-8, \"Pacific\",  \"PST\", \"PDT\")"
msgstr ""

msgid "Note that there are unavoidable subtleties twice per year in a :class:`tzinfo` subclass accounting for both standard and daylight time, at the DST transition points.  For concreteness, consider US Eastern (UTC -0500), where EDT begins the minute after 1:59 (EST) on the second Sunday in March, and ends the minute after 1:59 (EDT) on the first Sunday in November::"
msgstr ""

msgid "UTC   3:MM  4:MM  5:MM  6:MM  7:MM  8:MM   EST  22:MM 23:MM  0:MM  1:MM  2:MM  3:MM   EDT  23:MM  0:MM  1:MM  2:MM  3:MM  4:MM  start  22:MM 23:MM  0:MM  1:MM  3:MM  4:MM    end  23:MM  0:MM  1:MM  1:MM  2:MM  3:MM"
msgstr ""

msgid "When DST starts (the \"start\" line), the local wall clock leaps from 1:59 to 3:00.  A wall time of the form 2:MM doesn't really make sense on that day, so ``astimezone(Eastern)`` won't deliver a result with ``hour == 2`` on the day DST begins.  In order for :meth:`astimezone` to make this guarantee, the :meth:`rzinfo.dst` method must consider times in the \"missing hour\" (2:MM for Eastern) to be in daylight time."
msgstr ""

msgid "When DST ends (the \"end\" line), there's a potentially worse problem: there's an hour that can't be spelled unambiguously in local wall time: the last hour of daylight time.  In Eastern, that's times of the form 5:MM UTC on the day daylight time ends.  The local wall clock leaps from 1:59 (daylight time) back to 1:00 (standard time) again. Local times of the form 1:MM are ambiguous. :meth:`astimezone` mimics the local clock's behavior by mapping two adjacent UTC hours into the same local hour then.  In the Eastern example, UTC times of the form 5:MM and 6:MM both map to 1:MM when converted to Eastern.  In order for :meth:`astimezone` to make this guarantee, the :meth:`tzinfo.dst` method must consider times in the \"repeated hour\" to be in standard time.  This is easily arranged, as in the example, by expressing DST switch times in the time zone's standard local time."
msgstr ""

msgid "Applications that can't bear such ambiguities should avoid using hybrid :class:`tzinfo` subclasses; there are no ambiguities when using :class:`timezone`, or any other fixed-offset :class:`tzinfo` subclass (such as a class representing only EST (fixed offset -5 hours), or only EDT (fixed offset -4 hours))."
msgstr ""

msgid ":class:`timezone` Objects"
msgstr ""

msgid "A :class:`timezone` object represents a timezone that is defined by a fixed offset from UTC.  Note that objects of this class cannot be used to represent timezone information in the locations where different offsets are used in different days of the year or where historical changes have been made to civil time."
msgstr ""

msgid "The *offset* argument must be specified as a :class:`timedelta` object representing the difference between the local time and UTC.  It must be strictly between ``-timedelta(hours=24)`` and ``timedelta(hours=24)`` and represent a whole number of minutes, otherwise :exc:`ValueError` is raised."
msgstr ""

msgid "The *name* argument is optional.  If specified it must be a string that is used as the value returned by the ``tzname(dt)`` method.  Otherwise, ``tzname(dt)`` returns a string 'UTCsHH:MM', where s is the sign of *offset*, HH and MM are two digits of ``offset.hours`` and ``offset.minutes`` respectively."
msgstr ""

msgid "Return the fixed value specified when the :class:`timezone` instance is constructed.  The *dt* argument is ignored.  The return value is a :class:`timedelta` instance equal to the difference between the local time and UTC."
msgstr ""

msgid "Return the fixed value specified when the :class:`timezone` instance is constructed or a string 'UTCsHH:MM', where s is the sign of *offset*, HH and MM are two digits of ``offset.hours`` and ``offset.minutes`` respectively."
msgstr ""

msgid "Always returns ``None``."
msgstr ""

msgid "Return ``dt + offset``.  The *dt* argument must be an aware :class:`datetime` instance, with ``tzinfo`` set to ``self``."
msgstr ""

msgid "The UTC timezone, ``timezone(timedelta(0))``."
msgstr ""

msgid ":meth:`strftime` and :meth:`strptime` Behavior"
msgstr ""

msgid ":class:`date`, :class:`datetime`, and :class:`time` objects all support a ``strftime(format)`` method, to create a string representing the time under the control of an explicit format string.  Broadly speaking, ``d.strftime(fmt)`` acts like the :mod:`time` module's ``time.strftime(fmt, d.timetuple())`` although not all objects support a :meth:`timetuple` method."
msgstr ""

msgid "Conversely, the :meth:`datetime.strptime` class method creates a :class:`datetime` object from a string representing a date and time and a corresponding format string. ``datetime.strptime(date_string, format)`` is equivalent to ``datetime(*(time.strptime(date_string, format)[0:6]))``."
msgstr ""

msgid "For :class:`time` objects, the format codes for year, month, and day should not be used, as time objects have no such values.  If they're used anyway, ``1900`` is substituted for the year, and ``1`` for the month and day."
msgstr ""

msgid "For :class:`date` objects, the format codes for hours, minutes, seconds, and microseconds should not be used, as :class:`date` objects have no such values.  If they're used anyway, ``0`` is substituted for them."
msgstr ""

msgid "For a naive object, the ``%z`` and ``%Z`` format codes are replaced by empty strings."
msgstr ""

msgid "For an aware object:"
msgstr ""

msgid ":meth:`utcoffset` is transformed into a 5-character string of the form +HHMM or -HHMM, where HH is a 2-digit string giving the number of UTC offset hours, and MM is a 2-digit string giving the number of UTC offset minutes.  For example, if :meth:`utcoffset` returns ``timedelta(hours=-3, minutes=-30)``, ``%z`` is replaced with the string ``'-0330'``."
msgstr ""

msgid "If :meth:`tzname` returns ``None``, ``%Z`` is replaced by an empty string. Otherwise ``%Z`` is replaced by the returned value, which must be a string."
msgstr ""

msgid "The full set of format codes supported varies across platforms, because Python calls the platform C library's :func:`strftime` function, and platform variations are common."
msgstr ""

msgid "The following is a list of all the format codes that the C standard (1989 version) requires, and these work on all platforms with a standard C implementation.  Note that the 1999 version of the C standard added additional format codes."
msgstr ""

msgid "The exact range of years for which :meth:`strftime` works also varies across platforms.  Regardless of platform, years before 1900 cannot be used."
msgstr ""

msgid "Directive"
msgstr ""

msgid "``%a``"
msgstr ""

msgid "Locale's abbreviated weekday name."
msgstr ""

msgid "``%A``"
msgstr ""

msgid "Locale's full weekday name."
msgstr ""

msgid "``%b``"
msgstr ""

msgid "Locale's abbreviated month name."
msgstr ""

msgid "``%B``"
msgstr ""

msgid "Locale's full month name."
msgstr ""

msgid "``%c``"
msgstr ""

msgid "Locale's appropriate date and time representation."
msgstr ""

msgid "``%d``"
msgstr ""

msgid "Day of the month as a decimal number [01,31]."
msgstr ""

msgid "``%f``"
msgstr ""

msgid "Microsecond as a decimal number [0,999999], zero-padded on the left"
msgstr ""

msgid "``%H``"
msgstr ""

msgid "Hour (24-hour clock) as a decimal number [00,23]."
msgstr ""

msgid "``%I``"
msgstr ""

msgid "Hour (12-hour clock) as a decimal number [01,12]."
msgstr ""

msgid "``%j``"
msgstr ""

msgid "Day of the year as a decimal number [001,366]."
msgstr ""

msgid "``%m``"
msgstr ""

msgid "Month as a decimal number [01,12]."
msgstr ""

msgid "``%M``"
msgstr ""

msgid "Minute as a decimal number [00,59]."
msgstr ""

msgid "``%p``"
msgstr ""

msgid "Locale's equivalent of either AM or PM."
msgstr ""

msgid "``%S``"
msgstr ""

msgid "Second as a decimal number [00,61]."
msgstr ""

msgid "``%U``"
msgstr ""

msgid "Week number of the year (Sunday as the first day of the week) as a decimal number [00,53].  All days in a new year preceding the first Sunday are considered to be in week 0."
msgstr ""

msgid "\\(4)"
msgstr ""

msgid "``%w``"
msgstr ""

msgid "Weekday as a decimal number [0(Sunday),6]."
msgstr ""

msgid "``%W``"
msgstr ""

msgid "Week number of the year (Monday as the first day of the week) as a decimal number [00,53].  All days in a new year preceding the first Monday are considered to be in week 0."
msgstr ""

msgid "``%x``"
msgstr ""

msgid "Locale's appropriate date representation."
msgstr ""

msgid "``%X``"
msgstr ""

msgid "Locale's appropriate time representation."
msgstr ""

msgid "``%y``"
msgstr ""

msgid "Year without century as a decimal number [00,99]."
msgstr ""

msgid "``%Y``"
msgstr ""

msgid "Year with century as a decimal number."
msgstr ""

msgid "``%z``"
msgstr ""

msgid "UTC offset in the form +HHMM or -HHMM (empty string if the the object is naive)."
msgstr ""

msgid "\\(5)"
msgstr ""

msgid "``%Z``"
msgstr ""

msgid "Time zone name (empty string if the object is naive)."
msgstr ""

msgid "``%%``"
msgstr ""

msgid "A literal ``'%'`` character."
msgstr ""

msgid "When used with the :meth:`strptime` method, the ``%f`` directive accepts from one to six digits and zero pads on the right.  ``%f`` is an extension to the set of format characters in the C standard (but implemented separately in datetime objects, and therefore always available)."
msgstr ""

msgid "When used with the :meth:`strptime` method, the ``%p`` directive only affects the output hour field if the ``%I`` directive is used to parse the hour."
msgstr ""

msgid "The range really is ``0`` to ``61``; according to the Posix standard this accounts for leap seconds and the (very rare) double leap seconds. The :mod:`time` module may produce and does accept leap seconds since it is based on the Posix standard, but the :mod:`datetime` module does not accept leap seconds in :meth:`strptime` input nor will it produce them in :func:`strftime` output."
msgstr ""

msgid "When used with the :meth:`strptime` method, ``%U`` and ``%W`` are only used in calculations when the day of the week and the year are specified."
msgstr ""

msgid "For example, if :meth:`utcoffset` returns ``timedelta(hours=-3, minutes=-30)``, ``%z`` is replaced with the string ``'-0330'``."
msgstr ""

msgid ":mod:`dbm` --- Interfaces to Unix \"databases\""
msgstr ""

msgid ":mod:`dbm.gnu` or :mod:`dbm.ndbm`.  If none of these modules is installed, the slow-but-simple implementation in module :mod:`dbm.dumb` will be used.  There is a `third party interface <http://www.jcea.es/programacion/pybsddb.htm>`_ to the Oracle Berkely DB."
msgstr ""

msgid "A tuple containing the exceptions that can be raised by each of the supported modules, with a unique exception also named :exc:`dbm.error` as the first item --- the latter is used when :exc:`dbm.error` is raised."
msgstr ""

msgid "This functionattempts to guess which of the several simple database modules available --- :mod:`dbm.bsd`, :mod:`dbm.gnu`, :mod:`dbm.ndbm` or :mod:`dbm.dumb` --- should be used to open a given file."
msgstr ""

msgid "Returns one of the following values: ``None`` if the file can't be opened because it's unreadable or doesn't exist; the empty string (``''``) if the file's format can't be guessed; or a string containing the required module name, such as ``'dbm.ndbm'`` or ``'dbm.gnu'``."
msgstr ""

msgid "Open the database file *filename* and return a corresponding object."
msgstr ""

msgid "If the database file already exists, the :func:`whichdb` function is used to determine its type and the appropriate module is used; if it does not exist, the first module listed above that can be imported is used."
msgstr ""

msgid "The optional *flag* argument can be:"
msgstr ""

msgid "``'r'``"
msgstr ""

msgid "Open existing database for reading only (default)"
msgstr ""

msgid "``'w'``"
msgstr ""

msgid "Open existing database for reading and writing"
msgstr ""

msgid "``'c'``"
msgstr ""

msgid "Open database for reading and writing, creating it if it doesn't exist"
msgstr ""

msgid "``'n'``"
msgstr ""

msgid "Always create a new, empty database, open for reading and writing"
msgstr ""

msgid "The optional *mode* argument is the Unix mode of the file, used only when the database has to be created.  It defaults to octal ``0o666`` (and will be modified by the prevailing umask)."
msgstr ""

msgid "The object returned by :func:`.open` supports most of the same functionality as dictionaries; keys and their corresponding values can be stored, retrieved, and deleted, and the :keyword:`in` operator and the :meth:`keys` method are available. Key and values are always stored as bytes. This means that when strings are used they are implicitly converted to the default encoding before being stored."
msgstr ""

msgid "The following example records some hostnames and a corresponding title,  and then prints out the contents of the database::"
msgstr ""

msgid "import dbm  # Open database, creating it if necessary. db = dbm.open('cache', 'c')  # Record some values db[b'hello'] = b'there' db['www.python.org'] = 'Python Website' db['www.cnn.com'] = 'Cable News Network'  # Note that the keys are considered bytes now. assert db[b'www.python.org'] == b'Python Website' # Notice how the value is now in bytes. assert db['www.cnn.com'] == b'Cable News Network'  # Loop through contents.  Other dictionary methods # such as .keys(), .values() also work. for k, v in db.iteritems():     print(k, '\\t', v)  # Storing a non-string key or value will raise an exception (most # likely a TypeError). db['www.yahoo.com'] = 4  # Close when done. db.close()"
msgstr ""

msgid "Persistence module which stores non-string data."
msgstr ""

msgid "The individual submodules are described in the following sections."
msgstr ""

msgid ":mod:`dbm.gnu` --- GNU's reinterpretation of dbm"
msgstr ""

msgid "This module is quite similar to the :mod:`dbm` module, but uses the GNU library ``gdbm`` instead to provide some additional functionality.  Please note that the file formats created by :mod:`dbm.gnu` and :mod:`dbm.ndbm` are incompatible."
msgstr ""

msgid "The :mod:`dbm.gnu` module provides an interface to the GNU DBM library. ``dbm.gnu.gdbm`` objects behave like mappings (dictionaries), except that keys and values are always converted to bytes before storing.  Printing a ``gdbm`` object doesn't print the keys and values, and the :meth:`items` and :meth:`values` methods are not supported."
msgstr ""

msgid "Raised on :mod:`dbm.gnu`-specific errors, such as I/O errors. :exc:`KeyError` is raised for general mapping errors like specifying an incorrect key."
msgstr ""

msgid "Open a ``gdbm`` database and return a :class:`gdbm` object.  The *filename* argument is the name of the database file."
msgstr ""

msgid "The following additional characters may be appended to the flag to control how the database is opened:"
msgstr ""

msgid "Open the database in fast mode.  Writes to the database will not be synchronized."
msgstr ""

msgid "``'s'``"
msgstr ""

msgid "Synchronized mode. This will cause changes to the database to be immediately written to the file."
msgstr ""

msgid "Do not lock database."
msgstr ""

msgid "Not all flags are valid for all versions of ``gdbm``.  The module constant :const:`open_flags` is a string of supported flag characters.  The exception :exc:`error` is raised if an invalid flag is specified."
msgstr ""

msgid "The optional *mode* argument is the Unix mode of the file, used only when the database has to be created.  It defaults to octal ``0o666``."
msgstr ""

msgid "In addition to the dictionary-like methods, ``gdbm`` objects have the following methods:"
msgstr ""

msgid "It's possible to loop over every key in the database using this method  and the :meth:`nextkey` method.  The traversal is ordered by ``gdbm``'s internal hash values, and won't be sorted by the key values.  This method returns the starting key."
msgstr ""

msgid "Returns the key that follows *key* in the traversal.  The following code prints every key in the database ``db``, without having to create a list in memory that contains them all::"
msgstr ""

msgid "k = db.firstkey() while k != None:     print(k)     k = db.nextkey(k)"
msgstr ""

msgid "If you have carried out a lot of deletions and would like to shrink the space used by the ``gdbm`` file, this routine will reorganize the database.  ``gdbm`` objects will not shorten the length of a database file except by using this reorganization; otherwise, deleted file space will be kept and reused as new (key, value) pairs are added."
msgstr ""

msgid "When the database has been opened in fast mode, this method forces any unwritten data to be written to the disk."
msgstr ""

msgid ":mod:`dbm.ndbm` --- Interface based on ndbm"
msgstr ""

msgid "The :mod:`dbm.ndbm` module provides an interface to the Unix \"(n)dbm\" library. Dbm objects behave like mappings (dictionaries), except that keys and values are always stored as bytes. Printing a ``dbm`` object doesn't print the keys and values, and the :meth:`items` and :meth:`values` methods are not supported."
msgstr ""

msgid "This module can be used with the \"classic\" ndbm interface, the BSD DB compatibility interface, or the GNU GDBM compatibility interface. On Unix, the :program:`configure` script will attempt to locate the appropriate header file to simplify building this module."
msgstr ""

msgid "Raised on :mod:`dbm.ndbm`-specific errors, such as I/O errors. :exc:`KeyError` is raised for general mapping errors like specifying an incorrect key."
msgstr ""

msgid "Name of the ``ndbm`` implementation library used."
msgstr ""

msgid "Open a dbm database and return a ``dbm`` object.  The *filename* argument is the name of the database file (without the :file:`.dir` or :file:`.pag` extensions; note that the BSD DB implementation of the interface will append the extension :file:`.db` and only create one file)."
msgstr ""

msgid "The optional *flag* argument must be one of these values:"
msgstr ""

msgid ":mod:`dbm.dumb` --- Portable DBM implementation"
msgstr ""

msgid "The :mod:`dbm.dumb` module is intended as a last resort fallback for the :mod:`dbm` module when a more robust module is not available. The :mod:`dbm.dumb` module is not written for speed and is not nearly as heavily used as the other database modules."
msgstr ""

msgid "The :mod:`dbm.dumb` module provides a persistent dictionary-like interface which is written entirely in Python.  Unlike other modules such as :mod:`dbm.gnu` no external library is required.  As with other persistent mappings, the keys and values are always stored as bytes."
msgstr ""

msgid "The module defines the following:"
msgstr ""

msgid "Raised on :mod:`dbm.dumb`-specific errors, such as I/O errors.  :exc:`KeyError` is raised for general mapping errors like specifying an incorrect key."
msgstr ""

msgid "Open a ``dumbdbm`` database and return a dumbdbm object.  The *filename* argument is the basename of the database file (without any specific extensions).  When a dumbdbm database is created, files with :file:`.dat` and :file:`.dir` extensions are created."
msgstr ""

msgid "The optional *flag* argument is currently ignored; the database is always opened for update, and will be created if it does not exist."
msgstr ""

msgid "In addition to the methods provided by the :class:`collections.MutableMapping` class, :class:`dumbdbm` objects provide the following method:"
msgstr ""

msgid "Synchronize the on-disk directory and data files.  This method is called by the :meth:`Shelve.sync` method."
msgstr ""

msgid "Debugging and Profiling"
msgstr ""

msgid "These libraries help you with Python development: the debugger enables you to step through code, analyze stack frames and set breakpoints etc., and the profilers run code and give you a detailed breakdown of execution times, allowing you to identify bottlenecks in your programs."
msgstr ""

msgid ":mod:`decimal` --- Decimal fixed point and floating point arithmetic"
msgstr ""

msgid "The :mod:`decimal` module provides support for decimal floating point arithmetic.  It offers several advantages over the :class:`float` datatype:"
msgstr ""

msgid "Decimal \"is based on a floating-point model which was designed with people in mind, and necessarily has a paramount guiding principle -- computers must provide an arithmetic that works in the same way as the arithmetic that people learn at school.\" -- excerpt from the decimal arithmetic specification."
msgstr ""

msgid "Decimal numbers can be represented exactly.  In contrast, numbers like :const:`1.1` and :const:`2.2` do not have an exact representations in binary floating point. End users typically would not expect ``1.1 + 2.2`` to display as :const:`3.3000000000000003` as it does with binary floating point."
msgstr ""

msgid "The exactness carries over into arithmetic.  In decimal floating point, ``0.1 + 0.1 + 0.1 - 0.3`` is exactly equal to zero.  In binary floating point, the result is :const:`5.5511151231257827e-017`.  While near to zero, the differences prevent reliable equality testing and differences can accumulate. For this reason, decimal is preferred in accounting applications which have strict equality invariants."
msgstr ""

msgid "The decimal module incorporates a notion of significant places so that ``1.30 + 1.20`` is :const:`2.50`.  The trailing zero is kept to indicate significance. This is the customary presentation for monetary applications. For multiplication, the \"schoolbook\" approach uses all the figures in the multiplicands.  For instance, ``1.3 * 1.2`` gives :const:`1.56` while ``1.30 * 1.20`` gives :const:`1.5600`."
msgstr ""

msgid "Unlike hardware based binary floating point, the decimal module has a user alterable precision (defaulting to 28 places) which can be as large as needed for a given problem:"
msgstr ""

msgid ">>> getcontext().prec = 6 >>> Decimal(1) / Decimal(7) Decimal('0.142857') >>> getcontext().prec = 28 >>> Decimal(1) / Decimal(7) Decimal('0.1428571428571428571428571429')"
msgstr ""

msgid "Both binary and decimal floating point are implemented in terms of published standards.  While the built-in float type exposes only a modest portion of its capabilities, the decimal module exposes all required parts of the standard. When needed, the programmer has full control over rounding and signal handling. This includes an option to enforce exact arithmetic by using exceptions to block any inexact operations."
msgstr ""

msgid "The decimal module was designed to support \"without prejudice, both exact unrounded decimal arithmetic (sometimes called fixed-point arithmetic) and rounded floating-point arithmetic.\"  -- excerpt from the decimal arithmetic specification."
msgstr ""

msgid "The module design is centered around three concepts:  the decimal number, the context for arithmetic, and signals."
msgstr ""

msgid "A decimal number is immutable.  It has a sign, coefficient digits, and an exponent.  To preserve significance, the coefficient digits do not truncate trailing zeros.  Decimals also include special values such as :const:`Infinity`, :const:`-Infinity`, and :const:`NaN`.  The standard also differentiates :const:`-0` from :const:`+0`."
msgstr ""

msgid "The context for arithmetic is an environment specifying precision, rounding rules, limits on exponents, flags indicating the results of operations, and trap enablers which determine whether signals are treated as exceptions.  Rounding options include :const:`ROUND_CEILING`, :const:`ROUND_DOWN`, :const:`ROUND_FLOOR`, :const:`ROUND_HALF_DOWN`, :const:`ROUND_HALF_EVEN`, :const:`ROUND_HALF_UP`, :const:`ROUND_UP`, and :const:`ROUND_05UP`."
msgstr ""

msgid "Signals are groups of exceptional conditions arising during the course of computation.  Depending on the needs of the application, signals may be ignored, considered as informational, or treated as exceptions. The signals in the decimal module are: :const:`Clamped`, :const:`InvalidOperation`, :const:`DivisionByZero`, :const:`Inexact`, :const:`Rounded`, :const:`Subnormal`, :const:`Overflow`, and :const:`Underflow`."
msgstr ""

msgid "For each signal there is a flag and a trap enabler.  When a signal is encountered, its flag is set to one, then, if the trap enabler is set to one, an exception is raised.  Flags are sticky, so the user needs to reset them before monitoring a calculation."
msgstr ""

msgid "IBM's General Decimal Arithmetic Specification, `The General Decimal Arithmetic Specification <http://speleotrove.com/decimal/decarith.html>`_."
msgstr ""

msgid "IEEE standard 854-1987, `Unofficial IEEE 854 Text <http://754r.ucbtest.org/standards/854.pdf>`_."
msgstr ""

msgid "Quick-start Tutorial"
msgstr ""

msgid "The usual start to using decimals is importing the module, viewing the current context with :func:`getcontext` and, if necessary, setting new values for precision, rounding, or enabled traps::"
msgstr ""

msgid ">>> from decimal import * >>> getcontext() Context(prec=28, rounding=ROUND_HALF_EVEN, Emin=-999999999, Emax=999999999,         capitals=1, clamp=0, flags=[], traps=[Overflow, DivisionByZero,         InvalidOperation])  >>> getcontext().prec = 7       # Set a new precision"
msgstr ""

msgid "Decimal instances can be constructed from integers, strings, floats, or tuples. Construction from an integer or a float performs an exact conversion of the value of that integer or float.  Decimal numbers include special values such as :const:`NaN` which stands for \"Not a number\", positive and negative :const:`Infinity`, and :const:`-0`."
msgstr ""

msgid ">>> getcontext().prec = 28 >>> Decimal(10) Decimal('10') >>> Decimal('3.14') Decimal('3.14') >>> Decimal(3.14) Decimal('3.140000000000000124344978758017532527446746826171875') >>> Decimal((0, (3, 1, 4), -2)) Decimal('3.14') >>> Decimal(str(2.0 ** 0.5)) Decimal('1.41421356237') >>> Decimal(2) ** Decimal('0.5') Decimal('1.414213562373095048801688724') >>> Decimal('NaN') Decimal('NaN') >>> Decimal('-Infinity') Decimal('-Infinity')"
msgstr ""

msgid "The significance of a new Decimal is determined solely by the number of digits input.  Context precision and rounding only come into play during arithmetic operations."
msgstr ""

msgid ">>> getcontext().prec = 6 >>> Decimal('3.0') Decimal('3.0') >>> Decimal('3.1415926535') Decimal('3.1415926535') >>> Decimal('3.1415926535') + Decimal('2.7182818285') Decimal('5.85987') >>> getcontext().rounding = ROUND_UP >>> Decimal('3.1415926535') + Decimal('2.7182818285') Decimal('5.85988')"
msgstr ""

msgid "Decimals interact well with much of the rest of Python.  Here is a small decimal floating point flying circus:"
msgstr ""

msgid ">>> data = list(map(Decimal, '1.34 1.87 3.45 2.35 1.00 0.03 9.25'.split())) >>> max(data) Decimal('9.25') >>> min(data) Decimal('0.03') >>> sorted(data) [Decimal('0.03'), Decimal('1.00'), Decimal('1.34'), Decimal('1.87'),  Decimal('2.35'), Decimal('3.45'), Decimal('9.25')] >>> sum(data) Decimal('19.29') >>> a,b,c = data[:3] >>> str(a) '1.34' >>> float(a) 1.34 >>> round(a, 1) Decimal('1.3') >>> int(a) 1 >>> a * 5 Decimal('6.70') >>> a * b Decimal('2.5058') >>> c % a Decimal('0.77')"
msgstr ""

msgid "And some mathematical functions are also available to Decimal:"
msgstr ""

msgid ">>> getcontext().prec = 28 >>> Decimal(2).sqrt() Decimal('1.414213562373095048801688724') >>> Decimal(1).exp() Decimal('2.718281828459045235360287471') >>> Decimal('10').ln() Decimal('2.302585092994045684017991455') >>> Decimal('10').log10() Decimal('1')"
msgstr ""

msgid "The :meth:`quantize` method rounds a number to a fixed exponent.  This method is useful for monetary applications that often round results to a fixed number of places:"
msgstr ""

msgid ">>> Decimal('7.325').quantize(Decimal('.01'), rounding=ROUND_DOWN) Decimal('7.32') >>> Decimal('7.325').quantize(Decimal('1.'), rounding=ROUND_UP) Decimal('8')"
msgstr ""

msgid "As shown above, the :func:`getcontext` function accesses the current context and allows the settings to be changed.  This approach meets the needs of most applications."
msgstr ""

msgid "For more advanced work, it may be useful to create alternate contexts using the Context() constructor.  To make an alternate active, use the :func:`setcontext` function."
msgstr ""

msgid "In accordance with the standard, the :mod:`Decimal` module provides two ready to use standard contexts, :const:`BasicContext` and :const:`ExtendedContext`. The former is especially useful for debugging because many of the traps are enabled:"
msgstr ""

msgid ">>> myothercontext = Context(prec=60, rounding=ROUND_HALF_DOWN) >>> setcontext(myothercontext) >>> Decimal(1) / Decimal(7) Decimal('0.142857142857142857142857142857142857142857142857142857142857')  >>> ExtendedContext Context(prec=9, rounding=ROUND_HALF_EVEN, Emin=-999999999, Emax=999999999,         capitals=1, clamp=0, flags=[], traps=[]) >>> setcontext(ExtendedContext) >>> Decimal(1) / Decimal(7) Decimal('0.142857143') >>> Decimal(42) / Decimal(0) Decimal('Infinity')  >>> setcontext(BasicContext) >>> Decimal(42) / Decimal(0) Traceback (most recent call last):   File \"<pyshell#143>\", line 1, in -toplevel-     Decimal(42) / Decimal(0) DivisionByZero: x / 0"
msgstr ""

msgid "Contexts also have signal flags for monitoring exceptional conditions encountered during computations.  The flags remain set until explicitly cleared, so it is best to clear the flags before each set of monitored computations by using the :meth:`clear_flags` method. ::"
msgstr ""

msgid ">>> setcontext(ExtendedContext) >>> getcontext().clear_flags() >>> Decimal(355) / Decimal(113) Decimal('3.14159292') >>> getcontext() Context(prec=9, rounding=ROUND_HALF_EVEN, Emin=-999999999, Emax=999999999,         capitals=1, clamp=0, flags=[Inexact, Rounded], traps=[])"
msgstr ""

msgid "The *flags* entry shows that the rational approximation to :const:`Pi` was rounded (digits beyond the context precision were thrown away) and that the result is inexact (some of the discarded digits were non-zero)."
msgstr ""

msgid "Individual traps are set using the dictionary in the :attr:`traps` field of a context:"
msgstr ""

msgid ">>> setcontext(ExtendedContext) >>> Decimal(1) / Decimal(0) Decimal('Infinity') >>> getcontext().traps[DivisionByZero] = 1 >>> Decimal(1) / Decimal(0) Traceback (most recent call last):   File \"<pyshell#112>\", line 1, in -toplevel-     Decimal(1) / Decimal(0) DivisionByZero: x / 0"
msgstr ""

msgid "Most programs adjust the current context only once, at the beginning of the program.  And, in many applications, data is converted to :class:`Decimal` with a single cast inside a loop.  With context set and decimals created, the bulk of the program manipulates the data no differently than with other Python numeric types."
msgstr ""

msgid "Decimal objects"
msgstr ""

msgid "Construct a new :class:`Decimal` object based from *value*."
msgstr ""

msgid "*value* can be an integer, string, tuple, :class:`float`, or another :class:`Decimal` object. If no *value* is given, returns ``Decimal('0')``.  If *value* is a string, it should conform to the decimal numeric string syntax after leading and trailing whitespace characters are removed::"
msgstr ""

msgid "sign           ::=  '+' | '-' digit          ::=  '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' indicator      ::=  'e' | 'E' digits         ::=  digit [digit]... decimal-part   ::=  digits '.' [digits] | ['.'] digits exponent-part  ::=  indicator [sign] digits infinity       ::=  'Infinity' | 'Inf' nan            ::=  'NaN' [digits] | 'sNaN' [digits] numeric-value  ::=  decimal-part [exponent-part] | infinity numeric-string ::=  [sign] numeric-value | [sign] nan"
msgstr ""

msgid "Other Unicode decimal digits are also permitted where ``digit`` appears above.  These include decimal digits from various other alphabets (for example, Arabic-Indic and Devanāgarī digits) along with the fullwidth digits ``'\\uff10'`` through ``'\\uff19'``."
msgstr ""

msgid "If *value* is a :class:`tuple`, it should have three components, a sign (:const:`0` for positive or :const:`1` for negative), a :class:`tuple` of digits, and an integer exponent. For example, ``Decimal((0, (1, 4, 1, 4), -3))`` returns ``Decimal('1.414')``."
msgstr ""

msgid "If *value* is a :class:`float`, the binary floating point value is losslessly converted to its exact decimal equivalent.  This conversion can often require 53 or more digits of precision.  For example, ``Decimal(float('1.1'))`` converts to ``Decimal('1.100000000000000088817841970012523233890533447265625')``."
msgstr ""

msgid "The *context* precision does not affect how many digits are stored. That is determined exclusively by the number of digits in *value*. For example, ``Decimal('3.00000')`` records all five zeros even if the context precision is only three."
msgstr ""

msgid "The purpose of the *context* argument is determining what to do if *value* is a malformed string.  If the context traps :const:`InvalidOperation`, an exception is raised; otherwise, the constructor returns a new Decimal with the value of :const:`NaN`."
msgstr ""

msgid "Once constructed, :class:`Decimal` objects are immutable."
msgstr ""

msgid "Decimal floating point objects share many properties with the other built-in numeric types such as :class:`float` and :class:`int`.  All of the usual math operations and special methods apply.  Likewise, decimal objects can be copied, pickled, printed, used as dictionary keys, used as set elements, compared, sorted, and coerced to another type (such as :class:`float` or :class:`int`)."
msgstr ""

msgid "Decimal objects cannot generally be combined with floats or instances of :class:`fractions.Fraction` in arithmetic operations: an attempt to add a :class:`Decimal` to a :class:`float`, for example, will raise a :exc:`TypeError`.  However, it is possible to use Python's comparison operators to compare a :class:`Decimal` instance ``x`` with another number ``y``.  This avoids confusing results when doing equality comparisons between numbers of different types."
msgstr ""

msgid "In addition to the standard numeric properties, decimal floating point objects also have a number of specialized methods:"
msgstr ""

msgid "Return the adjusted exponent after shifting out the coefficient's rightmost digits until only the lead digit remains: ``Decimal('321e+5').adjusted()`` returns seven.  Used for determining the position of the most significant digit with respect to the decimal point."
msgstr ""

msgid "Return a :term:`named tuple` representation of the number: ``DecimalTuple(sign, digits, exponent)``."
msgstr ""

msgid "Return the canonical encoding of the argument.  Currently, the encoding of a :class:`Decimal` instance is always canonical, so this operation returns its argument unchanged."
msgstr ""

msgid "Compare the values of two Decimal instances.  :meth:`compare` returns a Decimal instance, and if either operand is a NaN then the result is a NaN::"
msgstr ""

msgid "a or b is a NaN  ==> Decimal('NaN') a < b            ==> Decimal('-1') a == b           ==> Decimal('0') a > b            ==> Decimal('1')"
msgstr ""

msgid "This operation is identical to the :meth:`compare` method, except that all NaNs signal.  That is, if neither operand is a signaling NaN then any quiet NaN operand is treated as though it were a signaling NaN."
msgstr ""

msgid "Compare two operands using their abstract representation rather than their numerical value.  Similar to the :meth:`compare` method, but the result gives a total ordering on :class:`Decimal` instances.  Two :class:`Decimal` instances with the same numeric value but different representations compare unequal in this ordering:"
msgstr ""

msgid ">>> Decimal('12.0').compare_total(Decimal('12')) Decimal('-1')"
msgstr ""

msgid "Quiet and signaling NaNs are also included in the total ordering.  The result of this function is ``Decimal('0')`` if both operands have the same representation, ``Decimal('-1')`` if the first operand is lower in the total order than the second, and ``Decimal('1')`` if the first operand is higher in the total order than the second operand.  See the specification for details of the total order."
msgstr ""

msgid "Compare two operands using their abstract representation rather than their value as in :meth:`compare_total`, but ignoring the sign of each operand. ``x.compare_total_mag(y)`` is equivalent to ``x.copy_abs().compare_total(y.copy_abs())``."
msgstr ""

msgid "Just returns self, this method is only to comply with the Decimal Specification."
msgstr ""

msgid "Return the absolute value of the argument.  This operation is unaffected by the context and is quiet: no flags are changed and no rounding is performed."
msgstr ""

msgid "Return the negation of the argument.  This operation is unaffected by the context and is quiet: no flags are changed and no rounding is performed."
msgstr ""

msgid "Return a copy of the first operand with the sign set to be the same as the sign of the second operand.  For example:"
msgstr ""

msgid ">>> Decimal('2.3').copy_sign(Decimal('-1.5')) Decimal('-2.3')"
msgstr ""

msgid "This operation is unaffected by the context and is quiet: no flags are changed and no rounding is performed."
msgstr ""

msgid "Return the value of the (natural) exponential function ``e**x`` at the given number.  The result is correctly rounded using the :const:`ROUND_HALF_EVEN` rounding mode."
msgstr ""

msgid ">>> Decimal(1).exp() Decimal('2.718281828459045235360287471') >>> Decimal(321).exp() Decimal('2.561702493119680037517373933E+139')"
msgstr ""

msgid "Classmethod that converts a float to a decimal number, exactly."
msgstr ""

msgid "Note `Decimal.from_float(0.1)` is not the same as `Decimal('0.1')`. Since 0.1 is not exactly representable in binary floating point, the value is stored as the nearest representable value which is `0x1.999999999999ap-4`.  That equivalent value in decimal is `0.1000000000000000055511151231257827021181583404541015625`."
msgstr ""

msgid "From Python 3.2 onwards, a :class:`Decimal` instance can also be constructed directly from a :class:`float`."
msgstr ""

msgid ">>> Decimal.from_float(0.1) Decimal('0.1000000000000000055511151231257827021181583404541015625') >>> Decimal.from_float(float('nan')) Decimal('NaN') >>> Decimal.from_float(float('inf')) Decimal('Infinity') >>> Decimal.from_float(float('-inf')) Decimal('-Infinity')"
msgstr ""

msgid "Fused multiply-add.  Return self*other+third with no rounding of the intermediate product self*other."
msgstr ""

msgid ">>> Decimal(2).fma(3, 5) Decimal('11')"
msgstr ""

msgid "Return :const:`True` if the argument is canonical and :const:`False` otherwise.  Currently, a :class:`Decimal` instance is always canonical, so this operation always returns :const:`True`."
msgstr ""

msgid "Return :const:`True` if the argument is a finite number, and :const:`False` if the argument is an infinity or a NaN."
msgstr ""

msgid "Return :const:`True` if the argument is either positive or negative infinity and :const:`False` otherwise."
msgstr ""

msgid "Return :const:`True` if the argument is a (quiet or signaling) NaN and :const:`False` otherwise."
msgstr ""

msgid "Return :const:`True` if the argument is a *normal* finite number.  Return :const:`False` if the argument is zero, subnormal, infinite or a NaN."
msgstr ""

msgid "Return :const:`True` if the argument is a quiet NaN, and :const:`False` otherwise."
msgstr ""

msgid "Return :const:`True` if the argument has a negative sign and :const:`False` otherwise.  Note that zeros and NaNs can both carry signs."
msgstr ""

msgid "Return :const:`True` if the argument is a signaling NaN and :const:`False` otherwise."
msgstr ""

msgid "Return :const:`True` if the argument is subnormal, and :const:`False` otherwise."
msgstr ""

msgid "Return :const:`True` if the argument is a (positive or negative) zero and :const:`False` otherwise."
msgstr ""

msgid "Return the natural (base e) logarithm of the operand.  The result is correctly rounded using the :const:`ROUND_HALF_EVEN` rounding mode."
msgstr ""

msgid "Return the base ten logarithm of the operand.  The result is correctly rounded using the :const:`ROUND_HALF_EVEN` rounding mode."
msgstr ""

msgid "For a nonzero number, return the adjusted exponent of its operand as a :class:`Decimal` instance.  If the operand is a zero then ``Decimal('-Infinity')`` is returned and the :const:`DivisionByZero` flag is raised.  If the operand is an infinity then ``Decimal('Infinity')`` is returned."
msgstr ""

msgid ":meth:`logical_and` is a logical operation which takes two *logical operands* (see :ref:`logical_operands_label`).  The result is the digit-wise ``and`` of the two operands."
msgstr ""

msgid ":meth:`logical_invert` is a logical operation.  The result is the digit-wise inversion of the operand."
msgstr ""

msgid ":meth:`logical_or` is a logical operation which takes two *logical operands* (see :ref:`logical_operands_label`).  The result is the digit-wise ``or`` of the two operands."
msgstr ""

msgid ":meth:`logical_xor` is a logical operation which takes two *logical operands* (see :ref:`logical_operands_label`).  The result is the digit-wise exclusive or of the two operands."
msgstr ""

msgid "Like ``max(self, other)`` except that the context rounding rule is applied before returning and that :const:`NaN` values are either signaled or ignored (depending on the context and whether they are signaling or quiet)."
msgstr ""

msgid "Similar to the :meth:`.max` method, but the comparison is done using the absolute values of the operands."
msgstr ""

msgid "Like ``min(self, other)`` except that the context rounding rule is applied before returning and that :const:`NaN` values are either signaled or ignored (depending on the context and whether they are signaling or quiet)."
msgstr ""

msgid "Similar to the :meth:`.min` method, but the comparison is done using the absolute values of the operands."
msgstr ""

msgid "Return the largest number representable in the given context (or in the current thread's context if no context is given) that is smaller than the given operand."
msgstr ""

msgid "Return the smallest number representable in the given context (or in the current thread's context if no context is given) that is larger than the given operand."
msgstr ""

msgid "If the two operands are unequal, return the number closest to the first operand in the direction of the second operand.  If both operands are numerically equal, return a copy of the first operand with the sign set to be the same as the sign of the second operand."
msgstr ""

msgid "Normalize the number by stripping the rightmost trailing zeros and converting any result equal to :const:`Decimal('0')` to :const:`Decimal('0e0')`. Used for producing canonical values for members of an equivalence class. For example, ``Decimal('32.100')`` and ``Decimal('0.321000e+2')`` both normalize to the equivalent value ``Decimal('32.1')``."
msgstr ""

msgid "Return a string describing the *class* of the operand.  The returned value is one of the following ten strings."
msgstr ""

msgid "``\"-Infinity\"``, indicating that the operand is negative infinity."
msgstr ""

msgid "``\"-Normal\"``, indicating that the operand is a negative normal number."
msgstr ""

msgid "``\"-Subnormal\"``, indicating that the operand is negative and subnormal."
msgstr ""

msgid "``\"-Zero\"``, indicating that the operand is a negative zero."
msgstr ""

msgid "``\"+Zero\"``, indicating that the operand is a positive zero."
msgstr ""

msgid "``\"+Subnormal\"``, indicating that the operand is positive and subnormal."
msgstr ""

msgid "``\"+Normal\"``, indicating that the operand is a positive normal number."
msgstr ""

msgid "``\"+Infinity\"``, indicating that the operand is positive infinity."
msgstr ""

msgid "``\"NaN\"``, indicating that the operand is a quiet NaN (Not a Number)."
msgstr ""

msgid "``\"sNaN\"``, indicating that the operand is a signaling NaN."
msgstr ""

msgid "Return a value equal to the first operand after rounding and having the exponent of the second operand."
msgstr ""

msgid ">>> Decimal('1.41421356').quantize(Decimal('1.000')) Decimal('1.414')"
msgstr ""

msgid "Unlike other operations, if the length of the coefficient after the quantize operation would be greater than precision, then an :const:`InvalidOperation` is signaled. This guarantees that, unless there is an error condition, the quantized exponent is always equal to that of the right-hand operand."
msgstr ""

msgid "Also unlike other operations, quantize never signals Underflow, even if the result is subnormal and inexact."
msgstr ""

msgid "If the exponent of the second operand is larger than that of the first then rounding may be necessary.  In this case, the rounding mode is determined by the ``rounding`` argument if given, else by the given ``context`` argument; if neither argument is given the rounding mode of the current thread's context is used."
msgstr ""

msgid "If *watchexp* is set (default), then an error is returned whenever the resulting exponent is greater than :attr:`Emax` or less than :attr:`Etiny`."
msgstr ""

msgid "Return ``Decimal(10)``, the radix (base) in which the :class:`Decimal` class does all its arithmetic.  Included for compatibility with the specification."
msgstr ""

msgid "Compute the modulo as either a positive or negative value depending on which is closest to zero.  For instance, ``Decimal(10).remainder_near(6)`` returns ``Decimal('-2')`` which is closer to zero than ``Decimal('4')``."
msgstr ""

msgid "If both are equally close, the one chosen will have the same sign as *self*."
msgstr ""

msgid "Return the result of rotating the digits of the first operand by an amount specified by the second operand.  The second operand must be an integer in the range -precision through precision.  The absolute value of the second operand gives the number of places to rotate.  If the second operand is positive then rotation is to the left; otherwise rotation is to the right. The coefficient of the first operand is padded on the left with zeros to length precision if necessary.  The sign and exponent of the first operand are unchanged."
msgstr ""

msgid "Test whether self and other have the same exponent or whether both are :const:`NaN`."
msgstr ""

msgid "Return the first operand with exponent adjusted by the second. Equivalently, return the first operand multiplied by ``10**other``.  The second operand must be an integer."
msgstr ""

msgid "Return the result of shifting the digits of the first operand by an amount specified by the second operand.  The second operand must be an integer in the range -precision through precision.  The absolute value of the second operand gives the number of places to shift.  If the second operand is positive then the shift is to the left; otherwise the shift is to the right.  Digits shifted into the coefficient are zeros.  The sign and exponent of the first operand are unchanged."
msgstr ""

msgid "Return the square root of the argument to full precision."
msgstr ""

msgid "Convert to an engineering-type string."
msgstr ""

msgid "Engineering notation has an exponent which is a multiple of 3, so there are up to 3 digits left of the decimal place.  For example, converts ``Decimal('123E+1')`` to ``Decimal('1.23E+3')``"
msgstr ""

msgid "Identical to the :meth:`to_integral_value` method.  The ``to_integral`` name has been kept for compatibility with older versions."
msgstr ""

msgid "Round to the nearest integer, signaling :const:`Inexact` or :const:`Rounded` as appropriate if rounding occurs.  The rounding mode is determined by the ``rounding`` parameter if given, else by the given ``context``.  If neither parameter is given then the rounding mode of the current context is used."
msgstr ""

msgid "Round to the nearest integer without signaling :const:`Inexact` or :const:`Rounded`.  If given, applies *rounding*; otherwise, uses the rounding method in either the supplied *context* or the current context."
msgstr ""

msgid "Logical operands"
msgstr ""

msgid "The :meth:`logical_and`, :meth:`logical_invert`, :meth:`logical_or`, and :meth:`logical_xor` methods expect their arguments to be *logical operands*.  A *logical operand* is a :class:`Decimal` instance whose exponent and sign are both zero, and whose digits are all either :const:`0` or :const:`1`."
msgstr ""

msgid "Context objects"
msgstr ""

msgid "Contexts are environments for arithmetic operations.  They govern precision, set rules for rounding, determine which signals are treated as exceptions, and limit the range for exponents."
msgstr ""

msgid "Each thread has its own current context which is accessed or changed using the :func:`getcontext` and :func:`setcontext` functions:"
msgstr ""

msgid "Return the current context for the active thread."
msgstr ""

msgid "Set the current context for the active thread to *c*."
msgstr ""

msgid "You can also use the :keyword:`with` statement and the :func:`localcontext` function to temporarily change the active context."
msgstr ""

msgid "Return a context manager that will set the current context for the active thread to a copy of *c* on entry to the with-statement and restore the previous context when exiting the with-statement. If no context is specified, a copy of the current context is used."
msgstr ""

msgid "For example, the following code sets the current decimal precision to 42 places, performs a calculation, and then automatically restores the previous context::"
msgstr ""

msgid "from decimal import localcontext  with localcontext() as ctx:     ctx.prec = 42   # Perform a high precision calculation     s = calculate_something() s = +s  # Round the final result back to the default precision"
msgstr ""

msgid "New contexts can also be created using the :class:`Context` constructor described below. In addition, the module provides three pre-made contexts:"
msgstr ""

msgid "This is a standard context defined by the General Decimal Arithmetic Specification.  Precision is set to nine.  Rounding is set to :const:`ROUND_HALF_UP`.  All flags are cleared.  All traps are enabled (treated as exceptions) except :const:`Inexact`, :const:`Rounded`, and :const:`Subnormal`."
msgstr ""

msgid "Because many of the traps are enabled, this context is useful for debugging."
msgstr ""

msgid "This is a standard context defined by the General Decimal Arithmetic Specification.  Precision is set to nine.  Rounding is set to :const:`ROUND_HALF_EVEN`.  All flags are cleared.  No traps are enabled (so that exceptions are not raised during computations)."
msgstr ""

msgid "Because the traps are disabled, this context is useful for applications that prefer to have result value of :const:`NaN` or :const:`Infinity` instead of raising exceptions.  This allows an application to complete a run in the presence of conditions that would otherwise halt the program."
msgstr ""

msgid "This context is used by the :class:`Context` constructor as a prototype for new contexts.  Changing a field (such a precision) has the effect of changing the default for new contexts created by the :class:`Context` constructor."
msgstr ""

msgid "This context is most useful in multi-threaded environments.  Changing one of the fields before threads are started has the effect of setting system-wide defaults.  Changing the fields after threads have started is not recommended as it would require thread synchronization to prevent race conditions."
msgstr ""

msgid "In single threaded environments, it is preferable to not use this context at all.  Instead, simply create contexts explicitly as described below."
msgstr ""

msgid "The default values are precision=28, rounding=ROUND_HALF_EVEN, and enabled traps for Overflow, InvalidOperation, and DivisionByZero."
msgstr ""

msgid "In addition to the three supplied contexts, new contexts can be created with the :class:`Context` constructor."
msgstr ""

msgid "Creates a new context.  If a field is not specified or is :const:`None`, the default values are copied from the :const:`DefaultContext`.  If the *flags* field is not specified or is :const:`None`, all flags are cleared."
msgstr ""

msgid "The *prec* field is a positive integer that sets the precision for arithmetic operations in the context."
msgstr ""

msgid "The *rounding* option is one of:"
msgstr ""

msgid ":const:`ROUND_CEILING` (towards :const:`Infinity`),"
msgstr ""

msgid ":const:`ROUND_DOWN` (towards zero),"
msgstr ""

msgid ":const:`ROUND_FLOOR` (towards :const:`-Infinity`),"
msgstr ""

msgid ":const:`ROUND_HALF_DOWN` (to nearest with ties going towards zero),"
msgstr ""

msgid ":const:`ROUND_HALF_EVEN` (to nearest with ties going to nearest even integer),"
msgstr ""

msgid ":const:`ROUND_HALF_UP` (to nearest with ties going away from zero), or"
msgstr ""

msgid ":const:`ROUND_UP` (away from zero)."
msgstr ""

msgid ":const:`ROUND_05UP` (away from zero if last digit after rounding towards zero would have been 0 or 5; otherwise towards zero)"
msgstr ""

msgid "The *traps* and *flags* fields list any signals to be set. Generally, new contexts should only set traps and leave the flags clear."
msgstr ""

msgid "The *Emin* and *Emax* fields are integers specifying the outer limits allowable for exponents."
msgstr ""

msgid "The *capitals* field is either :const:`0` or :const:`1` (the default). If set to :const:`1`, exponents are printed with a capital :const:`E`; otherwise, a lowercase :const:`e` is used: :const:`Decimal('6.02e+23')`."
msgstr ""

msgid "The *clamp* field is either :const:`0` (the default) or :const:`1`. If set to :const:`1`, the exponent ``e`` of a :class:`Decimal` instance representable in this context is strictly limited to the range ``Emin - prec + 1 <= e <= Emax - prec + 1``.  If *clamp* is :const:`0` then a weaker condition holds: the adjusted exponent of the :class:`Decimal` instance is at most ``Emax``.  When *clamp* is :const:`1`, a large normal number will, where possible, have its exponent reduced and a corresponding number of zeros added to its coefficient, in order to fit the exponent constraints; this preserves the value of the number but loses information about significant trailing zeros.  For example::"
msgstr ""

msgid ">>> Context(prec=6, Emax=999, clamp=1).create_decimal('1.23e999') Decimal('1.23000E+999')"
msgstr ""

msgid "A *clamp* value of :const:`1` allows compatibility with the fixed-width decimal interchange formats specified in IEEE 754."
msgstr ""

msgid "The :class:`Context` class defines several general purpose methods as well as a large number of methods for doing arithmetic directly in a given context. In addition, for each of the :class:`Decimal` methods described above (with the exception of the :meth:`adjusted` and :meth:`as_tuple` methods) there is a corresponding :class:`Context` method.  For example, for a :class:`Context` instance ``C`` and :class:`Decimal` instance ``x``, ``C.exp(x)`` is equivalent to ``x.exp(context=C)``.  Each :class:`Context` method accepts a Python integer (an instance of :class:`int`) anywhere that a Decimal instance is accepted."
msgstr ""

msgid "Resets all of the flags to :const:`0`."
msgstr ""

msgid "Return a duplicate of the context."
msgstr ""

msgid "Return a copy of the Decimal instance num."
msgstr ""

msgid "Creates a new Decimal instance from *num* but using *self* as context. Unlike the :class:`Decimal` constructor, the context precision, rounding method, flags, and traps are applied to the conversion."
msgstr ""

msgid "This is useful because constants are often given to a greater precision than is needed by the application.  Another benefit is that rounding immediately eliminates unintended effects from digits beyond the current precision. In the following example, using unrounded inputs means that adding zero to a sum can change the result:"
msgstr ""

msgid ">>> getcontext().prec = 3 >>> Decimal('3.4445') + Decimal('1.0023') Decimal('4.45') >>> Decimal('3.4445') + Decimal(0) + Decimal('1.0023') Decimal('4.44')"
msgstr ""

msgid "This method implements the to-number operation of the IBM specification. If the argument is a string, no leading or trailing whitespace is permitted."
msgstr ""

msgid "Creates a new Decimal instance from a float *f* but rounding using *self* as the context.  Unlike the :meth:`Decimal.from_float` class method, the context precision, rounding method, flags, and traps are applied to the conversion."
msgstr ""

msgid ">>> context = Context(prec=5, rounding=ROUND_DOWN) >>> context.create_decimal_from_float(math.pi) Decimal('3.1415') >>> context = Context(prec=5, traps=[Inexact]) >>> context.create_decimal_from_float(math.pi) Traceback (most recent call last):     ... decimal.Inexact: None"
msgstr ""

msgid "Returns a value equal to ``Emin - prec + 1`` which is the minimum exponent value for subnormal results.  When underflow occurs, the exponent is set to :const:`Etiny`."
msgstr ""

msgid "Returns a value equal to ``Emax - prec + 1``."
msgstr ""

msgid "The usual approach to working with decimals is to create :class:`Decimal` instances and then apply arithmetic operations which take place within the current context for the active thread.  An alternative approach is to use context methods for calculating within a specific context.  The methods are similar to those for the :class:`Decimal` class and are only briefly recounted here."
msgstr ""

msgid "Returns the absolute value of *x*."
msgstr ""

msgid "Return the sum of *x* and *y*."
msgstr ""

msgid "Returns the same Decimal object *x*."
msgstr ""

msgid "Compares *x* and *y* numerically."
msgstr ""

msgid "Compares the values of the two operands numerically."
msgstr ""

msgid "Compares two operands using their abstract representation."
msgstr ""

msgid "Compares two operands using their abstract representation, ignoring sign."
msgstr ""

msgid "Returns a copy of *x* with the sign set to 0."
msgstr ""

msgid "Returns a copy of *x* with the sign inverted."
msgstr ""

msgid "Copies the sign from *y* to *x*."
msgstr ""

msgid "Return *x* divided by *y*."
msgstr ""

msgid "Return *x* divided by *y*, truncated to an integer."
msgstr ""

msgid "Divides two numbers and returns the integer part of the result."
msgstr ""

msgid "Returns `e ** x`."
msgstr ""

msgid "Returns *x* multiplied by *y*, plus *z*."
msgstr ""

msgid "Returns True if *x* is canonical; otherwise returns False."
msgstr ""

msgid "Returns True if *x* is finite; otherwise returns False."
msgstr ""

msgid "Returns True if *x* is infinite; otherwise returns False."
msgstr ""

msgid "Returns True if *x* is a qNaN or sNaN; otherwise returns False."
msgstr ""

msgid "Returns True if *x* is a normal number; otherwise returns False."
msgstr ""

msgid "Returns True if *x* is a quiet NaN; otherwise returns False."
msgstr ""

msgid "Returns True if *x* is negative; otherwise returns False."
msgstr ""

msgid "Returns True if *x* is a signaling NaN; otherwise returns False."
msgstr ""

msgid "Returns True if *x* is subnormal; otherwise returns False."
msgstr ""

msgid "Returns True if *x* is a zero; otherwise returns False."
msgstr ""

msgid "Returns the natural (base e) logarithm of *x*."
msgstr ""

msgid "Returns the base 10 logarithm of *x*."
msgstr ""

msgid "Returns the exponent of the magnitude of the operand's MSD."
msgstr ""

msgid "Applies the logical operation *and* between each operand's digits."
msgstr ""

msgid "Invert all the digits in *x*."
msgstr ""

msgid "Applies the logical operation *or* between each operand's digits."
msgstr ""

msgid "Applies the logical operation *xor* between each operand's digits."
msgstr ""

msgid "Compares two values numerically and returns the maximum."
msgstr ""

msgid "Compares the values numerically with their sign ignored."
msgstr ""

msgid "Compares two values numerically and returns the minimum."
msgstr ""

msgid "Minus corresponds to the unary prefix minus operator in Python."
msgstr ""

msgid "Return the product of *x* and *y*."
msgstr ""

msgid "Returns the largest representable number smaller than *x*."
msgstr ""

msgid "Returns the smallest representable number larger than *x*."
msgstr ""

msgid "Returns the number closest to *x*, in direction towards *y*."
msgstr ""

msgid "Reduces *x* to its simplest form."
msgstr ""

msgid "Returns an indication of the class of *x*."
msgstr ""

msgid "Plus corresponds to the unary prefix plus operator in Python.  This operation applies the context precision and rounding, so it is *not* an identity operation."
msgstr ""

msgid "Return ``x`` to the power of ``y``, reduced modulo ``modulo`` if given."
msgstr ""

msgid "With two arguments, compute ``x**y``.  If ``x`` is negative then ``y`` must be integral.  The result will be inexact unless ``y`` is integral and the result is finite and can be expressed exactly in 'precision' digits. The result should always be correctly rounded, using the rounding mode of the current thread's context."
msgstr ""

msgid "With three arguments, compute ``(x**y) % modulo``.  For the three argument form, the following restrictions on the arguments hold:"
msgstr ""

msgid "all three arguments must be integral"
msgstr ""

msgid "``y`` must be nonnegative"
msgstr ""

msgid "at least one of ``x`` or ``y`` must be nonzero"
msgstr ""

msgid "``modulo`` must be nonzero and have at most 'precision' digits"
msgstr ""

msgid "The value resulting from ``Context.power(x, y, modulo)`` is equal to the value that would be obtained by computing ``(x**y) % modulo`` with unbounded precision, but is computed more efficiently.  The exponent of the result is zero, regardless of the exponents of ``x``, ``y`` and ``modulo``.  The result is always exact."
msgstr ""

msgid "Returns a value equal to *x* (rounded), having the exponent of *y*."
msgstr ""

msgid "Just returns 10, as this is Decimal, :)"
msgstr ""

msgid "Returns the remainder from integer division."
msgstr ""

msgid "The sign of the result, if non-zero, is the same as that of the original dividend."
msgstr ""

msgid "Returns ``x - y * n``, where *n* is the integer nearest the exact value of ``x / y`` (if the result is 0 then its sign will be the sign of *x*)."
msgstr ""

msgid "Returns a rotated copy of *x*, *y* times."
msgstr ""

msgid "Returns True if the two operands have the same exponent."
msgstr ""

msgid "Returns the first operand after adding the second value its exp."
msgstr ""

msgid "Returns a shifted copy of *x*, *y* times."
msgstr ""

msgid "Square root of a non-negative number to context precision."
msgstr ""

msgid "Return the difference between *x* and *y*."
msgstr ""

msgid "Converts a number to a string, using scientific notation."
msgstr ""

msgid "Rounds to an integer."
msgstr ""

msgid "Converts a number to a string using scientific notation."
msgstr ""

msgid "Signals"
msgstr ""

msgid "Signals represent conditions that arise during computation. Each corresponds to one context flag and one context trap enabler."
msgstr ""

msgid "The context flag is set whenever the condition is encountered. After the computation, flags may be checked for informational purposes (for instance, to determine whether a computation was exact). After checking the flags, be sure to clear all flags before starting the next computation."
msgstr ""

msgid "If the context's trap enabler is set for the signal, then the condition causes a Python exception to be raised.  For example, if the :class:`DivisionByZero` trap is set, then a :exc:`DivisionByZero` exception is raised upon encountering the condition."
msgstr ""

msgid "Altered an exponent to fit representation constraints."
msgstr ""

msgid "Typically, clamping occurs when an exponent falls outside the context's :attr:`Emin` and :attr:`Emax` limits.  If possible, the exponent is reduced to fit by adding zeros to the coefficient."
msgstr ""

msgid "Base class for other signals and a subclass of :exc:`ArithmeticError`."
msgstr ""

msgid "Signals the division of a non-infinite number by zero."
msgstr ""

msgid "Can occur with division, modulo division, or when raising a number to a negative power.  If this signal is not trapped, returns :const:`Infinity` or :const:`-Infinity` with the sign determined by the inputs to the calculation."
msgstr ""

msgid "Indicates that rounding occurred and the result is not exact."
msgstr ""

msgid "Signals when non-zero digits were discarded during rounding. The rounded result is returned.  The signal flag or trap is used to detect when results are inexact."
msgstr ""

msgid "An invalid operation was performed."
msgstr ""

msgid "Indicates that an operation was requested that does not make sense. If not trapped, returns :const:`NaN`.  Possible causes include::"
msgstr ""

msgid "Infinity - Infinity 0 * Infinity Infinity / Infinity x % 0 Infinity % x x._rescale( non-integer ) sqrt(-x) and x > 0 0 ** 0 x ** (non-integer) x ** Infinity"
msgstr ""

msgid "Numerical overflow."
msgstr ""

msgid "Indicates the exponent is larger than :attr:`Emax` after rounding has occurred.  If not trapped, the result depends on the rounding mode, either pulling inward to the largest representable finite number or rounding outward to :const:`Infinity`.  In either case, :class:`Inexact` and :class:`Rounded` are also signaled."
msgstr ""

msgid "Rounding occurred though possibly no information was lost."
msgstr ""

msgid "Signaled whenever rounding discards digits; even if those digits are zero (such as rounding :const:`5.00` to :const:`5.0`).  If not trapped, returns the result unchanged.  This signal is used to detect loss of significant digits."
msgstr ""

msgid "Exponent was lower than :attr:`Emin` prior to rounding."
msgstr ""

msgid "Occurs when an operation result is subnormal (the exponent is too small). If not trapped, returns the result unchanged."
msgstr ""

msgid "Numerical underflow with result rounded to zero."
msgstr ""

msgid "Occurs when a subnormal result is pushed to zero by rounding. :class:`Inexact` and :class:`Subnormal` are also signaled."
msgstr ""

msgid "The following table summarizes the hierarchy of signals::"
msgstr ""

msgid "exceptions.ArithmeticError(exceptions.Exception)     DecimalException         Clamped         DivisionByZero(DecimalException, exceptions.ZeroDivisionError)         Inexact             Overflow(Inexact, Rounded)             Underflow(Inexact, Rounded, Subnormal)         InvalidOperation         Rounded         Subnormal"
msgstr ""

msgid "Floating Point Notes"
msgstr ""

msgid "Mitigating round-off error with increased precision"
msgstr ""

msgid "The use of decimal floating point eliminates decimal representation error (making it possible to represent :const:`0.1` exactly); however, some operations can still incur round-off error when non-zero digits exceed the fixed precision."
msgstr ""

msgid "The effects of round-off error can be amplified by the addition or subtraction of nearly offsetting quantities resulting in loss of significance.  Knuth provides two instructive examples where rounded floating point arithmetic with insufficient precision causes the breakdown of the associative and distributive properties of addition:"
msgstr ""

msgid "# Examples from Seminumerical Algorithms, Section 4.2.2. >>> from decimal import Decimal, getcontext >>> getcontext().prec = 8  >>> u, v, w = Decimal(11111113), Decimal(-11111111), Decimal('7.51111111') >>> (u + v) + w Decimal('9.5111111') >>> u + (v + w) Decimal('10')  >>> u, v, w = Decimal(20000), Decimal(-6), Decimal('6.0000003') >>> (u*v) + (u*w) Decimal('0.01') >>> u * (v+w) Decimal('0.0060000')"
msgstr ""

msgid "The :mod:`decimal` module makes it possible to restore the identities by expanding the precision sufficiently to avoid loss of significance:"
msgstr ""

msgid ">>> getcontext().prec = 20 >>> u, v, w = Decimal(11111113), Decimal(-11111111), Decimal('7.51111111') >>> (u + v) + w Decimal('9.51111111') >>> u + (v + w) Decimal('9.51111111') >>> >>> u, v, w = Decimal(20000), Decimal(-6), Decimal('6.0000003') >>> (u*v) + (u*w) Decimal('0.0060000') >>> u * (v+w) Decimal('0.0060000')"
msgstr ""

msgid "Special values"
msgstr ""

msgid "The number system for the :mod:`decimal` module provides special values including :const:`NaN`, :const:`sNaN`, :const:`-Infinity`, :const:`Infinity`, and two zeros, :const:`+0` and :const:`-0`."
msgstr ""

msgid "Infinities can be constructed directly with:  ``Decimal('Infinity')``. Also, they can arise from dividing by zero when the :exc:`DivisionByZero` signal is not trapped.  Likewise, when the :exc:`Overflow` signal is not trapped, infinity can result from rounding beyond the limits of the largest representable number."
msgstr ""

msgid "The infinities are signed (affine) and can be used in arithmetic operations where they get treated as very large, indeterminate numbers.  For instance, adding a constant to infinity gives another infinite result."
msgstr ""

msgid "Some operations are indeterminate and return :const:`NaN`, or if the :exc:`InvalidOperation` signal is trapped, raise an exception.  For example, ``0/0`` returns :const:`NaN` which means \"not a number\".  This variety of :const:`NaN` is quiet and, once created, will flow through other computations always resulting in another :const:`NaN`.  This behavior can be useful for a series of computations that occasionally have missing inputs --- it allows the calculation to proceed while flagging specific results as invalid."
msgstr ""

msgid "A variant is :const:`sNaN` which signals rather than remaining quiet after every operation.  This is a useful return value when an invalid result needs to interrupt a calculation for special handling."
msgstr ""

msgid "The behavior of Python's comparison operators can be a little surprising where a :const:`NaN` is involved.  A test for equality where one of the operands is a quiet or signaling :const:`NaN` always returns :const:`False` (even when doing ``Decimal('NaN')==Decimal('NaN')``), while a test for inequality always returns :const:`True`.  An attempt to compare two Decimals using any of the ``<``, ``<=``, ``>`` or ``>=`` operators will raise the :exc:`InvalidOperation` signal if either operand is a :const:`NaN`, and return :const:`False` if this signal is not trapped.  Note that the General Decimal Arithmetic specification does not specify the behavior of direct comparisons; these rules for comparisons involving a :const:`NaN` were taken from the IEEE 854 standard (see Table 3 in section 5.7).  To ensure strict standards-compliance, use the :meth:`compare` and :meth:`compare-signal` methods instead."
msgstr ""

msgid "The signed zeros can result from calculations that underflow. They keep the sign that would have resulted if the calculation had been carried out to greater precision.  Since their magnitude is zero, both positive and negative zeros are treated as equal and their sign is informational."
msgstr ""

msgid "In addition to the two signed zeros which are distinct yet equal, there are various representations of zero with differing precisions yet equivalent in value.  This takes a bit of getting used to.  For an eye accustomed to normalized floating point representations, it is not immediately obvious that the following calculation returns a value equal to zero:"
msgstr ""

msgid ">>> 1 / Decimal('Infinity') Decimal('0E-1000000026')"
msgstr ""

msgid "Working with threads"
msgstr ""

msgid "The :func:`getcontext` function accesses a different :class:`Context` object for each thread.  Having separate thread contexts means that threads may make changes (such as ``getcontext.prec=10``) without interfering with other threads."
msgstr ""

msgid "Likewise, the :func:`setcontext` function automatically assigns its target to the current thread."
msgstr ""

msgid "If :func:`setcontext` has not been called before :func:`getcontext`, then :func:`getcontext` will automatically create a new context for use in the current thread."
msgstr ""

msgid "The new context is copied from a prototype context called *DefaultContext*. To control the defaults so that each thread will use the same values throughout the application, directly modify the *DefaultContext* object. This should be done *before* any threads are started so that there won't be a race condition between threads calling :func:`getcontext`. For example::"
msgstr ""

msgid "# Set applicationwide defaults for all threads about to be launched DefaultContext.prec = 12 DefaultContext.rounding = ROUND_DOWN DefaultContext.traps = ExtendedContext.traps.copy() DefaultContext.traps[InvalidOperation] = 1 setcontext(DefaultContext)  # Afterwards, the threads can be started t1.start() t2.start() t3.start()  . . ."
msgstr ""

msgid "Recipes"
msgstr ""

msgid "Here are a few recipes that serve as utility functions and that demonstrate ways to work with the :class:`Decimal` class::"
msgstr ""

msgid "def moneyfmt(value, places=2, curr='', sep=',', dp='.',              pos='', neg='-', trailneg=''):     \"\"\"Convert Decimal to a money formatted string.      places:  required number of places after the decimal point     curr:    optional currency symbol before the sign (may be blank)     sep:     optional grouping separator (comma, period, space, or blank)     dp:      decimal point indicator (comma or period)              only specify as blank when places is zero     pos:     optional sign for positive numbers: '+', space or blank     neg:     optional sign for negative numbers: '-', '(', space or blank     trailneg:optional trailing minus indicator:  '-', ')', space or blank      >>> d = Decimal('-1234567.8901')     >>> moneyfmt(d, curr='$')     '-$1,234,567.89'     >>> moneyfmt(d, places=0, sep='.', dp='', neg='', trailneg='-')     '1.234.568-'     >>> moneyfmt(d, curr='$', neg='(', trailneg=')')     '($1,234,567.89)'     >>> moneyfmt(Decimal(123456789), sep=' ')     '123 456 789.00'     >>> moneyfmt(Decimal('-0.02'), neg='<', trailneg='>')     '<0.02>'      \"\"\"     q = Decimal(10) ** -places      # 2 places --> '0.01'     sign, digits, exp = value.quantize(q).as_tuple()     result = []     digits = list(map(str, digits))     build, next = result.append, digits.pop     if sign:         build(trailneg)     for i in range(places):         build(next() if digits else '0')     build(dp)     if not digits:         build('0')     i = 0     while digits:         build(next())         i += 1         if i == 3 and digits:             i = 0             build(sep)     build(curr)     build(neg if sign else pos)     return ''.join(reversed(result))  def pi():     \"\"\"Compute Pi to the current precision.      >>> print(pi())     3.141592653589793238462643383      \"\"\"     getcontext().prec += 2  # extra digits for intermediate steps     three = Decimal(3)      # substitute \"three=3.0\" for regular floats     lasts, t, s, n, na, d, da = 0, three, 3, 1, 0, 0, 24     while s != lasts:         lasts = s         n, na = n+na, na+8         d, da = d+da, da+32         t = (t * n) / d         s += t     getcontext().prec -= 2     return +s               # unary plus applies the new precision  def exp(x):     \"\"\"Return e raised to the power of x.  Result type matches input type.      >>> print(exp(Decimal(1)))     2.718281828459045235360287471     >>> print(exp(Decimal(2)))     7.389056098930650227230427461     >>> print(exp(2.0))     7.38905609893     >>> print(exp(2+0j))     (7.38905609893+0j)      \"\"\"     getcontext().prec += 2     i, lasts, s, fact, num = 0, 0, 1, 1, 1     while s != lasts:         lasts = s         i += 1         fact *= i         num *= x         s += num / fact     getcontext().prec -= 2     return +s  def cos(x):     \"\"\"Return the cosine of x as measured in radians.      >>> print(cos(Decimal('0.5')))     0.8775825618903727161162815826     >>> print(cos(0.5))     0.87758256189     >>> print(cos(0.5+0j))     (0.87758256189+0j)      \"\"\"     getcontext().prec += 2     i, lasts, s, fact, num, sign = 0, 0, 1, 1, 1, 1     while s != lasts:         lasts = s         i += 2         fact *= i * (i-1)         num *= x * x         sign *= -1         s += num / fact * sign     getcontext().prec -= 2     return +s  def sin(x):     \"\"\"Return the sine of x as measured in radians.      >>> print(sin(Decimal('0.5')))     0.4794255386042030002732879352     >>> print(sin(0.5))     0.479425538604     >>> print(sin(0.5+0j))     (0.479425538604+0j)      \"\"\"     getcontext().prec += 2     i, lasts, s, fact, num, sign = 1, 0, x, 1, x, 1     while s != lasts:         lasts = s         i += 2         fact *= i * (i-1)         num *= x * x         sign *= -1         s += num / fact * sign     getcontext().prec -= 2     return +s"
msgstr ""

msgid "Decimal FAQ"
msgstr ""

msgid "Q. It is cumbersome to type ``decimal.Decimal('1234.5')``.  Is there a way to minimize typing when using the interactive interpreter?"
msgstr ""

msgid "A. Some users abbreviate the constructor to just a single letter:"
msgstr ""

msgid ">>> D = decimal.Decimal >>> D('1.23') + D('3.45') Decimal('4.68')"
msgstr ""

msgid "Q. In a fixed-point application with two decimal places, some inputs have many places and need to be rounded.  Others are not supposed to have excess digits and need to be validated.  What methods should be used?"
msgstr ""

msgid "A. The :meth:`quantize` method rounds to a fixed number of decimal places. If the :const:`Inexact` trap is set, it is also useful for validation:"
msgstr ""

msgid ">>> TWOPLACES = Decimal(10) ** -2       # same as Decimal('0.01')"
msgstr ""

msgid ">>> # Round to two places >>> Decimal('3.214').quantize(TWOPLACES) Decimal('3.21')"
msgstr ""

msgid ">>> # Validate that a number does not exceed two places >>> Decimal('3.21').quantize(TWOPLACES, context=Context(traps=[Inexact])) Decimal('3.21')"
msgstr ""

msgid ">>> Decimal('3.214').quantize(TWOPLACES, context=Context(traps=[Inexact])) Traceback (most recent call last):    ... Inexact: None"
msgstr ""

msgid "Q. Once I have valid two place inputs, how do I maintain that invariant throughout an application?"
msgstr ""

msgid "A. Some operations like addition, subtraction, and multiplication by an integer will automatically preserve fixed point.  Others operations, like division and non-integer multiplication, will change the number of decimal places and need to be followed-up with a :meth:`quantize` step:"
msgstr ""

msgid ">>> a = Decimal('102.72')           # Initial fixed-point values >>> b = Decimal('3.17') >>> a + b                           # Addition preserves fixed-point Decimal('105.89') >>> a - b Decimal('99.55') >>> a * 42                          # So does integer multiplication Decimal('4314.24') >>> (a * b).quantize(TWOPLACES)     # Must quantize non-integer multiplication Decimal('325.62') >>> (b / a).quantize(TWOPLACES)     # And quantize division Decimal('0.03')"
msgstr ""

msgid "In developing fixed-point applications, it is convenient to define functions to handle the :meth:`quantize` step:"
msgstr ""

msgid ">>> def mul(x, y, fp=TWOPLACES): ...     return (x * y).quantize(fp) >>> def div(x, y, fp=TWOPLACES): ...     return (x / y).quantize(fp)"
msgstr ""

msgid ">>> mul(a, b)                       # Automatically preserve fixed-point Decimal('325.62') >>> div(b, a) Decimal('0.03')"
msgstr ""

msgid "Q. There are many ways to express the same value.  The numbers :const:`200`, :const:`200.000`, :const:`2E2`, and :const:`.02E+4` all have the same value at various precisions. Is there a way to transform them to a single recognizable canonical value?"
msgstr ""

msgid "A. The :meth:`normalize` method maps all equivalent values to a single representative:"
msgstr ""

msgid ">>> values = map(Decimal, '200 200.000 2E2 .02E+4'.split()) >>> [v.normalize() for v in values] [Decimal('2E+2'), Decimal('2E+2'), Decimal('2E+2'), Decimal('2E+2')]"
msgstr ""

msgid "Q. Some decimal values always print with exponential notation.  Is there a way to get a non-exponential representation?"
msgstr ""

msgid "A. For some values, exponential notation is the only way to express the number of significant places in the coefficient.  For example, expressing :const:`5.0E+3` as :const:`5000` keeps the value constant but cannot show the original's two-place significance."
msgstr ""

msgid "If an application does not care about tracking significance, it is easy to remove the exponent and trailing zeroes, losing significance, but keeping the value unchanged:"
msgstr ""

msgid ">>> def remove_exponent(d): ...     return d.quantize(Decimal(1)) if d == d.to_integral() else d.normalize()"
msgstr ""

msgid ">>> remove_exponent(Decimal('5E+3')) Decimal('5000')"
msgstr ""

msgid "Q. Is there a way to convert a regular float to a :class:`Decimal`?"
msgstr ""

msgid "A. Yes, any binary floating point number can be exactly expressed as a Decimal though an exact conversion may take more precision than intuition would suggest:"
msgstr ""

msgid ">>> Decimal(math.pi) Decimal('3.141592653589793115997963468544185161590576171875')"
msgstr ""

msgid "Q. Within a complex calculation, how can I make sure that I haven't gotten a spurious result because of insufficient precision or rounding anomalies."
msgstr ""

msgid "A. The decimal module makes it easy to test results.  A best practice is to re-run calculations using greater precision and with various rounding modes. Widely differing results indicate insufficient precision, rounding mode issues, ill-conditioned inputs, or a numerically unstable algorithm."
msgstr ""

msgid "Q. I noticed that context precision is applied to the results of operations but not to the inputs.  Is there anything to watch out for when mixing values of different precisions?"
msgstr ""

msgid "A. Yes.  The principle is that all values are considered to be exact and so is the arithmetic on those values.  Only the results are rounded.  The advantage for inputs is that \"what you type is what you get\".  A disadvantage is that the results can look odd if you forget that the inputs haven't been rounded:"
msgstr ""

msgid ">>> getcontext().prec = 3 >>> Decimal('3.104') + Decimal('2.104') Decimal('5.21') >>> Decimal('3.104') + Decimal('0.000') + Decimal('2.104') Decimal('5.20')"
msgstr ""

msgid "The solution is either to increase precision or to force rounding of inputs using the unary plus operation:"
msgstr ""

msgid ">>> getcontext().prec = 3 >>> +Decimal('1.23456789')      # unary plus triggers rounding Decimal('1.23')"
msgstr ""

msgid "Alternatively, inputs can be rounded upon creation using the :meth:`Context.create_decimal` method:"
msgstr ""

msgid ">>> Context(prec=5, rounding=ROUND_DOWN).create_decimal('1.2345678') Decimal('1.2345')"
msgstr ""

msgid "Development Tools"
msgstr ""

msgid "The modules described in this chapter help you write software.  For example, the :mod:`pydoc` module takes a module and generates documentation based on the module's contents.  The :mod:`doctest` and :mod:`unittest` modules contains frameworks for writing unit tests that automatically exercise code and verify that the expected output is produced.  :program:`2to3` can translate Python 2.x source code into valid Python 3.x code."
msgstr ""

msgid "The list of modules described in this chapter is:"
msgstr ""

msgid ":mod:`difflib` --- Helpers for computing deltas"
msgstr ""

msgid "This module provides classes and functions for comparing sequences. It can be used for example, for comparing files, and can produce difference information in various formats, including HTML and context and unified diffs. For comparing directories and files, see also, the :mod:`filecmp` module."
msgstr ""

msgid "This is a flexible class for comparing pairs of sequences of any type, so long as the sequence elements are :term:`hashable`.  The basic algorithm predates, and is a little fancier than, an algorithm published in the late 1980's by Ratcliff and Obershelp under the hyperbolic name \"gestalt pattern matching.\"  The idea is to find the longest contiguous matching subsequence that contains no \"junk\" elements (the Ratcliff and Obershelp algorithm doesn't address junk).  The same idea is then applied recursively to the pieces of the sequences to the left and to the right of the matching subsequence.  This does not yield minimal edit sequences, but does tend to yield matches that \"look right\" to people."
msgstr ""

msgid "**Timing:** The basic Ratcliff-Obershelp algorithm is cubic time in the worst case and quadratic time in the expected case. :class:`SequenceMatcher` is quadratic time for the worst case and has expected-case behavior dependent in a complicated way on how many elements the sequences have in common; best case time is linear."
msgstr ""

msgid "This is a class for comparing sequences of lines of text, and producing human-readable differences or deltas.  Differ uses :class:`SequenceMatcher` both to compare sequences of lines, and to compare sequences of characters within similar (near-matching) lines."
msgstr ""

msgid "Each line of a :class:`Differ` delta begins with a two-letter code:"
msgstr ""

msgid "Code"
msgstr ""

msgid "``'- '``"
msgstr ""

msgid "line unique to sequence 1"
msgstr ""

msgid "``'+ '``"
msgstr ""

msgid "line unique to sequence 2"
msgstr ""

msgid "``'  '``"
msgstr ""

msgid "line common to both sequences"
msgstr ""

msgid "``'? '``"
msgstr ""

msgid "line not present in either input sequence"
msgstr ""

msgid "Lines beginning with '``?``' attempt to guide the eye to intraline differences, and were not present in either input sequence. These lines can be confusing if the sequences contain tab characters."
msgstr ""

msgid "This class can be used to create an HTML table (or a complete HTML file containing the table) showing a side by side, line by line comparison of text with inter-line and intra-line change highlights.  The table can be generated in either full or contextual difference mode."
msgstr ""

msgid "The constructor for this class is:"
msgstr ""

msgid "Initializes instance of :class:`HtmlDiff`."
msgstr ""

msgid "*tabsize* is an optional keyword argument to specify tab stop spacing and defaults to ``8``."
msgstr ""

msgid "*wrapcolumn* is an optional keyword to specify column number where lines are broken and wrapped, defaults to ``None`` where lines are not wrapped."
msgstr ""

msgid "*linejunk* and *charjunk* are optional keyword arguments passed into ``ndiff()`` (used by :class:`HtmlDiff` to generate the side by side HTML differences).  See ``ndiff()`` documentation for argument default values and descriptions."
msgstr ""

msgid "The following methods are public:"
msgstr ""

msgid "Compares *fromlines* and *tolines* (lists of strings) and returns a string which is a complete HTML file containing a table showing line by line differences with inter-line and intra-line changes highlighted."
msgstr ""

msgid "*fromdesc* and *todesc* are optional keyword arguments to specify from/to file column header strings (both default to an empty string)."
msgstr ""

msgid "*context* and *numlines* are both optional keyword arguments. Set *context* to ``True`` when contextual differences are to be shown, else the default is ``False`` to show the full files. *numlines* defaults to ``5``.  When *context* is ``True`` *numlines* controls the number of context lines which surround the difference highlights.  When *context* is ``False`` *numlines* controls the number of lines which are shown before a difference highlight when using the \"next\" hyperlinks (setting to zero would cause the \"next\" hyperlinks to place the next difference highlight at the top of the browser without any leading context)."
msgstr ""

msgid "Compares *fromlines* and *tolines* (lists of strings) and returns a string which is a complete HTML table showing line by line differences with inter-line and intra-line changes highlighted."
msgstr ""

msgid "The arguments for this method are the same as those for the :meth:`make_file` method."
msgstr ""

msgid ":file:`Tools/scripts/diff.py` is a command-line front-end to this class and contains a good example of its use."
msgstr ""

msgid "Compare *a* and *b* (lists of strings); return a delta (a :term:`generator` generating the delta lines) in context diff format."
msgstr ""

msgid "Context diffs are a compact way of showing just the lines that have changed plus a few lines of context.  The changes are shown in a before/after style.  The number of context lines is set by *n* which defaults to three."
msgstr ""

msgid "By default, the diff control lines (those with ``***`` or ``---``) are created with a trailing newline.  This is helpful so that inputs created from :func:`file.readlines` result in diffs that are suitable for use with :func:`file.writelines` since both the inputs and outputs have trailing newlines."
msgstr ""

msgid "For inputs that do not have trailing newlines, set the *lineterm* argument to ``\"\"`` so that the output will be uniformly newline free."
msgstr ""

msgid "The context diff format normally has a header for filenames and modification times.  Any or all of these may be specified using strings for *fromfile*, *tofile*, *fromfiledate*, and *tofiledate*.  The modification times are normally expressed in the ISO 8601 format. If not specified, the strings default to blanks."
msgstr ""

msgid ">>> s1 = ['bacon\\n', 'eggs\\n', 'ham\\n', 'guido\\n'] >>> s2 = ['python\\n', 'eggy\\n', 'hamster\\n', 'guido\\n'] >>> for line in context_diff(s1, s2, fromfile='before.py', tofile='after.py'): ...     sys.stdout.write(line)  # doctest: +NORMALIZE_WHITESPACE *** before.py --- after.py *************** *** 1,4 **** ! bacon ! eggs ! ham   guido --- 1,4 ---- ! python ! eggy ! hamster   guido"
msgstr ""

msgid "See :ref:`difflib-interface` for a more detailed example."
msgstr ""

msgid "Return a list of the best \"good enough\" matches.  *word* is a sequence for which close matches are desired (typically a string), and *possibilities* is a list of sequences against which to match *word* (typically a list of strings)."
msgstr ""

msgid "Optional argument *n* (default ``3``) is the maximum number of close matches to return; *n* must be greater than ``0``."
msgstr ""

msgid "Optional argument *cutoff* (default ``0.6``) is a float in the range [0, 1]. Possibilities that don't score at least that similar to *word* are ignored."
msgstr ""

msgid "The best (no more than *n*) matches among the possibilities are returned in a list, sorted by similarity score, most similar first."
msgstr ""

msgid ">>> get_close_matches('appel', ['ape', 'apple', 'peach', 'puppy']) ['apple', 'ape'] >>> import keyword >>> get_close_matches('wheel', keyword.kwlist) ['while'] >>> get_close_matches('apple', keyword.kwlist) [] >>> get_close_matches('accept', keyword.kwlist) ['except']"
msgstr ""

msgid "Compare *a* and *b* (lists of strings); return a :class:`Differ`\\ -style delta (a :term:`generator` generating the delta lines)."
msgstr ""

msgid "Optional keyword parameters *linejunk* and *charjunk* are for filter functions (or ``None``):"
msgstr ""

msgid "*linejunk*: A function that accepts a single string argument, and returns true if the string is junk, or false if not. The default is ``None``. There is also a module-level function :func:`IS_LINE_JUNK`, which filters out lines without visible characters, except for at most one pound character (``'#'``) -- however the underlying :class:`SequenceMatcher` class does a dynamic analysis of which lines are so frequent as to constitute noise, and this usually works better than using this function."
msgstr ""

msgid "*charjunk*: A function that accepts a character (a string of length 1), and returns if the character is junk, or false if not. The default is module-level function :func:`IS_CHARACTER_JUNK`, which filters out whitespace characters (a blank or tab; note: bad idea to include newline in this!)."
msgstr ""

msgid ":file:`Tools/scripts/ndiff.py` is a command-line front-end to this function."
msgstr ""

msgid ">>> diff = ndiff('one\\ntwo\\nthree\\n'.splitlines(1), ...              'ore\\ntree\\nemu\\n'.splitlines(1)) >>> print(''.join(diff), end=\"\") - one ?  ^ + ore ?  ^ - two - three ?  - + tree + emu"
msgstr ""

msgid "Return one of the two sequences that generated a delta."
msgstr ""

msgid "Given a *sequence* produced by :meth:`Differ.compare` or :func:`ndiff`, extract lines originating from file 1 or 2 (parameter *which*), stripping off line prefixes."
msgstr ""

msgid ">>> diff = ndiff('one\\ntwo\\nthree\\n'.splitlines(1), ...              'ore\\ntree\\nemu\\n'.splitlines(1)) >>> diff = list(diff) # materialize the generated delta into a list >>> print(''.join(restore(diff, 1)), end=\"\") one two three >>> print(''.join(restore(diff, 2)), end=\"\") ore tree emu"
msgstr ""

msgid "Compare *a* and *b* (lists of strings); return a delta (a :term:`generator` generating the delta lines) in unified diff format."
msgstr ""

msgid "Unified diffs are a compact way of showing just the lines that have changed plus a few lines of context.  The changes are shown in a inline style (instead of separate before/after blocks).  The number of context lines is set by *n* which defaults to three."
msgstr ""

msgid "By default, the diff control lines (those with ``---``, ``+++``, or ``@@``) are created with a trailing newline.  This is helpful so that inputs created from :func:`file.readlines` result in diffs that are suitable for use with :func:`file.writelines` since both the inputs and outputs have trailing newlines."
msgstr ""

msgid ">>> s1 = ['bacon\\n', 'eggs\\n', 'ham\\n', 'guido\\n'] >>> s2 = ['python\\n', 'eggy\\n', 'hamster\\n', 'guido\\n'] >>> for line in unified_diff(s1, s2, fromfile='before.py', tofile='after.py'): ...     sys.stdout.write(line)   # doctest: +NORMALIZE_WHITESPACE --- before.py +++ after.py @@ -1,4 +1,4 @@ -bacon -eggs -ham +python +eggy +hamster  guido"
msgstr ""

msgid "Return true for ignorable lines.  The line *line* is ignorable if *line* is blank or contains a single ``'#'``, otherwise it is not ignorable.  Used as a default for parameter *linejunk* in :func:`ndiff` in older versions."
msgstr ""

msgid "Return true for ignorable characters.  The character *ch* is ignorable if *ch* is a space or tab, otherwise it is not ignorable.  Used as a default for parameter *charjunk* in :func:`ndiff`."
msgstr ""

msgid "Discussion of a similar algorithm by John W. Ratcliff and D. E. Metzener. This was published in `Dr. Dobb's Journal <http://www.ddj.com/>`_ in July, 1988."
msgstr ""

msgid "SequenceMatcher Objects"
msgstr ""

msgid "The :class:`SequenceMatcher` class has this constructor:"
msgstr ""

msgid "Optional argument *isjunk* must be ``None`` (the default) or a one-argument function that takes a sequence element and returns true if and only if the element is \"junk\" and should be ignored. Passing ``None`` for *isjunk* is equivalent to passing ``lambda x: 0``; in other words, no elements are ignored. For example, pass::"
msgstr ""

msgid "lambda x: x in \" \\t\""
msgstr ""

msgid "if you're comparing lines as sequences of characters, and don't want to synch up on blanks or hard tabs."
msgstr ""

msgid "The optional arguments *a* and *b* are sequences to be compared; both default to empty strings.  The elements of both sequences must be :term:`hashable`."
msgstr ""

msgid ":class:`SequenceMatcher` objects have the following methods:"
msgstr ""

msgid "Set the two sequences to be compared."
msgstr ""

msgid ":class:`SequenceMatcher` computes and caches detailed information about the second sequence, so if you want to compare one sequence against many sequences, use :meth:`set_seq2` to set the commonly used sequence once and call :meth:`set_seq1` repeatedly, once for each of the other sequences."
msgstr ""

msgid "Set the first sequence to be compared.  The second sequence to be compared is not changed."
msgstr ""

msgid "Set the second sequence to be compared.  The first sequence to be compared is not changed."
msgstr ""

msgid "Find longest matching block in ``a[alo:ahi]`` and ``b[blo:bhi]``."
msgstr ""

msgid "If *isjunk* was omitted or ``None``, :meth:`find_longest_match` returns ``(i, j, k)`` such that ``a[i:i+k]`` is equal to ``b[j:j+k]``, where ``alo <= i <= i+k <= ahi`` and ``blo <= j <= j+k <= bhi``. For all ``(i', j', k')`` meeting those conditions, the additional conditions ``k >= k'``, ``i <= i'``, and if ``i == i'``, ``j <= j'`` are also met. In other words, of all maximal matching blocks, return one that starts earliest in *a*, and of all those maximal matching blocks that start earliest in *a*, return the one that starts earliest in *b*."
msgstr ""

msgid ">>> s = SequenceMatcher(None, \" abcd\", \"abcd abcd\") >>> s.find_longest_match(0, 5, 0, 9) Match(a=0, b=4, size=5)"
msgstr ""

msgid "If *isjunk* was provided, first the longest matching block is determined as above, but with the additional restriction that no junk element appears in the block.  Then that block is extended as far as possible by matching (only) junk elements on both sides. So the resulting block never matches on junk except as identical junk happens to be adjacent to an interesting match."
msgstr ""

msgid "Here's the same example as before, but considering blanks to be junk. That prevents ``' abcd'`` from matching the ``' abcd'`` at the tail end of the second sequence directly.  Instead only the ``'abcd'`` can match, and matches the leftmost ``'abcd'`` in the second sequence:"
msgstr ""

msgid ">>> s = SequenceMatcher(lambda x: x==\" \", \" abcd\", \"abcd abcd\") >>> s.find_longest_match(0, 5, 0, 9) Match(a=1, b=0, size=4)"
msgstr ""

msgid "If no blocks match, this returns ``(alo, blo, 0)``."
msgstr ""

msgid "This method returns a :term:`named tuple` ``Match(a, b, size)``."
msgstr ""

msgid "Return list of triples describing matching subsequences. Each triple is of the form ``(i, j, n)``, and means that ``a[i:i+n] == b[j:j+n]``.  The triples are monotonically increasing in *i* and *j*."
msgstr ""

msgid "The last triple is a dummy, and has the value ``(len(a), len(b), 0)``.  It is the only triple with ``n == 0``.  If ``(i, j, n)`` and ``(i', j', n')`` are adjacent triples in the list, and the second is not the last triple in the list, then ``i+n != i'`` or ``j+n != j'``; in other words, adjacent triples always describe non-adjacent equal blocks."
msgstr ""

msgid ">>> s = SequenceMatcher(None, \"abxcd\", \"abcd\") >>> s.get_matching_blocks() [Match(a=0, b=0, size=2), Match(a=3, b=2, size=2), Match(a=5, b=4, size=0)]"
msgstr ""

msgid "Return list of 5-tuples describing how to turn *a* into *b*. Each tuple is of the form ``(tag, i1, i2, j1, j2)``.  The first tuple has ``i1 == j1 == 0``, and remaining tuples have *i1* equal to the *i2* from the preceding tuple, and, likewise, *j1* equal to the previous *j2*."
msgstr ""

msgid "The *tag* values are strings, with these meanings:"
msgstr ""

msgid "``a[i1:i2]`` should be replaced by ``b[j1:j2]``."
msgstr ""

msgid "``'delete'``"
msgstr ""

msgid "``a[i1:i2]`` should be deleted.  Note that ``j1 == j2`` in this case."
msgstr ""

msgid "``'insert'``"
msgstr ""

msgid "``b[j1:j2]`` should be inserted at ``a[i1:i1]``. Note that ``i1 == i2`` in this case."
msgstr ""

msgid "``'equal'``"
msgstr ""

msgid "``a[i1:i2] == b[j1:j2]`` (the sub-sequences are equal)."
msgstr ""

msgid "For example:"
msgstr ""

msgid ">>> a = \"qabxcd\" >>> b = \"abycdf\" >>> s = SequenceMatcher(None, a, b) >>> for tag, i1, i2, j1, j2 in s.get_opcodes(): ...    print((\"%7s a[%d:%d] (%s) b[%d:%d] (%s)\" % ...           (tag, i1, i2, a[i1:i2], j1, j2, b[j1:j2])))  delete a[0:1] (q) b[0:0] ()   equal a[1:3] (ab) b[0:2] (ab) replace a[3:4] (x) b[2:3] (y)   equal a[4:6] (cd) b[3:5] (cd)  insert a[6:6] () b[5:6] (f)"
msgstr ""

msgid "Return a :term:`generator` of groups with up to *n* lines of context."
msgstr ""

msgid "Starting with the groups returned by :meth:`get_opcodes`, this method splits out smaller change clusters and eliminates intervening ranges which have no changes."
msgstr ""

msgid "The groups are returned in the same format as :meth:`get_opcodes`."
msgstr ""

msgid "Return a measure of the sequences' similarity as a float in the range [0, 1]."
msgstr ""

msgid "Where T is the total number of elements in both sequences, and M is the number of matches, this is 2.0\\*M / T. Note that this is ``1.0`` if the sequences are identical, and ``0.0`` if they have nothing in common."
msgstr ""

msgid "This is expensive to compute if :meth:`get_matching_blocks` or :meth:`get_opcodes` hasn't already been called, in which case you may want to try :meth:`quick_ratio` or :meth:`real_quick_ratio` first to get an upper bound."
msgstr ""

msgid "Return an upper bound on :meth:`ratio` relatively quickly."
msgstr ""

msgid "This isn't defined beyond that it is an upper bound on :meth:`ratio`, and is faster to compute."
msgstr ""

msgid "Return an upper bound on :meth:`ratio` very quickly."
msgstr ""

msgid "This isn't defined beyond that it is an upper bound on :meth:`ratio`, and is faster to compute than either :meth:`ratio` or :meth:`quick_ratio`."
msgstr ""

msgid "The three methods that return the ratio of matching to total characters can give different results due to differing levels of approximation, although :meth:`quick_ratio` and :meth:`real_quick_ratio` are always at least as large as :meth:`ratio`:"
msgstr ""

msgid ">>> s = SequenceMatcher(None, \"abcd\", \"bcde\") >>> s.ratio() 0.75 >>> s.quick_ratio() 0.75 >>> s.real_quick_ratio() 1.0"
msgstr ""

msgid "SequenceMatcher Examples"
msgstr ""

msgid "This example compares two strings, considering blanks to be \"junk:\""
msgstr ""

msgid ">>> s = SequenceMatcher(lambda x: x == \" \", ...                     \"private Thread currentThread;\", ...                     \"private volatile Thread currentThread;\")"
msgstr ""

msgid ":meth:`ratio` returns a float in [0, 1], measuring the similarity of the sequences.  As a rule of thumb, a :meth:`ratio` value over 0.6 means the sequences are close matches:"
msgstr ""

msgid ">>> print(round(s.ratio(), 3)) 0.866"
msgstr ""

msgid "If you're only interested in where the sequences match, :meth:`get_matching_blocks` is handy:"
msgstr ""

msgid ">>> for block in s.get_matching_blocks(): ...     print(\"a[%d] and b[%d] match for %d elements\" % block) a[0] and b[0] match for 8 elements a[8] and b[17] match for 21 elements a[29] and b[38] match for 0 elements"
msgstr ""

msgid "Note that the last tuple returned by :meth:`get_matching_blocks` is always a dummy, ``(len(a), len(b), 0)``, and this is the only case in which the last tuple element (number of elements matched) is ``0``."
msgstr ""

msgid "If you want to know how to change the first sequence into the second, use :meth:`get_opcodes`:"
msgstr ""

msgid ">>> for opcode in s.get_opcodes(): ...     print(\"%6s a[%d:%d] b[%d:%d]\" % opcode)  equal a[0:8] b[0:8] insert a[8:8] b[8:17]  equal a[8:29] b[17:38]"
msgstr ""

msgid "The :func:`get_close_matches` function in this module which shows how simple code building on :class:`SequenceMatcher` can be used to do useful work."
msgstr ""

msgid "`Simple version control recipe <http://code.activestate.com/recipes/576729/>`_ for a small application built with :class:`SequenceMatcher`."
msgstr ""

msgid "Differ Objects"
msgstr ""

msgid "Note that :class:`Differ`\\ -generated deltas make no claim to be **minimal** diffs. To the contrary, minimal diffs are often counter-intuitive, because they synch up anywhere possible, sometimes accidental matches 100 pages apart. Restricting synch points to contiguous matches preserves some notion of locality, at the occasional cost of producing a longer diff."
msgstr ""

msgid "The :class:`Differ` class has this constructor:"
msgstr ""

msgid "*linejunk*: A function that accepts a single string argument, and returns true if the string is junk.  The default is ``None``, meaning that no line is considered junk."
msgstr ""

msgid "*charjunk*: A function that accepts a single character argument (a string of length 1), and returns true if the character is junk. The default is ``None``, meaning that no character is considered junk."
msgstr ""

msgid ":class:`Differ` objects are used (deltas generated) via a single method:"
msgstr ""

msgid "Compare two sequences of lines, and generate the delta (a sequence of lines)."
msgstr ""

msgid "Each sequence must contain individual single-line strings ending with newlines. Such sequences can be obtained from the :meth:`readlines` method of file-like objects.  The delta generated also consists of newline-terminated strings, ready to be printed as-is via the :meth:`writelines` method of a file-like object."
msgstr ""

msgid "Differ Example"
msgstr ""

msgid "This example compares two texts. First we set up the texts, sequences of individual single-line strings ending with newlines (such sequences can also be obtained from the :meth:`readlines` method of file-like objects):"
msgstr ""

msgid ">>> text1 = '''  1. Beautiful is better than ugly. ...   2. Explicit is better than implicit. ...   3. Simple is better than complex. ...   4. Complex is better than complicated. ... '''.splitlines(1) >>> len(text1) 4 >>> text1[0][-1] '\\n' >>> text2 = '''  1. Beautiful is better than ugly. ...   3.   Simple is better than complex. ...   4. Complicated is better than complex. ...   5. Flat is better than nested. ... '''.splitlines(1)"
msgstr ""

msgid "Next we instantiate a Differ object:"
msgstr ""

msgid ">>> d = Differ()"
msgstr ""

msgid "Note that when instantiating a :class:`Differ` object we may pass functions to filter out line and character \"junk.\"  See the :meth:`Differ` constructor for details."
msgstr ""

msgid "Finally, we compare the two:"
msgstr ""

msgid ">>> result = list(d.compare(text1, text2))"
msgstr ""

msgid "``result`` is a list of strings, so let's pretty-print it:"
msgstr ""

msgid ">>> from pprint import pprint >>> pprint(result) ['    1. Beautiful is better than ugly.\\n',  '-   2. Explicit is better than implicit.\\n',  '-   3. Simple is better than complex.\\n',  '+   3.   Simple is better than complex.\\n',  '?     ++\\n',  '-   4. Complex is better than complicated.\\n',  '?            ^                     ---- ^\\n',  '+   4. Complicated is better than complex.\\n',  '?           ++++ ^                      ^\\n',  '+   5. Flat is better than nested.\\n']"
msgstr ""

msgid "As a single multi-line string it looks like this:"
msgstr ""

msgid ">>> import sys >>> sys.stdout.writelines(result)     1. Beautiful is better than ugly. -   2. Explicit is better than implicit. -   3. Simple is better than complex. +   3.   Simple is better than complex. ?     ++ -   4. Complex is better than complicated. ?            ^                     ---- ^ +   4. Complicated is better than complex. ?           ++++ ^                      ^ +   5. Flat is better than nested."
msgstr ""

msgid "A command-line interface to difflib"
msgstr ""

msgid "This example shows how to use difflib to create a ``diff``-like utility. It is also contained in the Python source distribution, as :file:`Tools/scripts/diff.py`."
msgstr ""

msgid "\"\"\" Command line interface to difflib.py providing diffs in four formats:  * ndiff:    lists every line and highlights interline changes. * context:  highlights clusters of changes in a before/after format. * unified:  highlights clusters of changes in an inline format. * html:     generates side by side comparison with change highlights.  \"\"\"  import sys, os, time, difflib, optparse  def main():      # Configure the option parser     usage = \"usage: %prog [options] fromfile tofile\"     parser = optparse.OptionParser(usage)     parser.add_option(\"-c\", action=\"store_true\", default=False,                       help='Produce a context format diff (default)')     parser.add_option(\"-u\", action=\"store_true\", default=False,                       help='Produce a unified format diff')     hlp = 'Produce HTML side by side diff (can use -c and -l in conjunction)'     parser.add_option(\"-m\", action=\"store_true\", default=False, help=hlp)     parser.add_option(\"-n\", action=\"store_true\", default=False,                       help='Produce a ndiff format diff')     parser.add_option(\"-l\", \"--lines\", type=\"int\", default=3,                       help='Set number of context lines (default 3)')     (options, args) = parser.parse_args()      if len(args) == 0:         parser.print_help()         sys.exit(1)     if len(args) != 2:         parser.error(\"need to specify both a fromfile and tofile\")      n = options.lines     fromfile, tofile = args # as specified in the usage string      # we're passing these as arguments to the diff function     fromdate = time.ctime(os.stat(fromfile).st_mtime)     todate = time.ctime(os.stat(tofile).st_mtime)     fromlines = open(fromfile, 'U').readlines()     tolines = open(tofile, 'U').readlines()      if options.u:         diff = difflib.unified_diff(fromlines, tolines, fromfile, tofile,                                     fromdate, todate, n=n)     elif options.n:         diff = difflib.ndiff(fromlines, tolines)     elif options.m:         diff = difflib.HtmlDiff().make_file(fromlines, tolines, fromfile,                                             tofile, context=options.c,                                             numlines=n)     else:         diff = difflib.context_diff(fromlines, tolines, fromfile, tofile,                                     fromdate, todate, n=n)      # we're using writelines because diff is a generator     sys.stdout.writelines(diff)  if __name__ == '__main__':     main()"
msgstr ""

msgid ":mod:`dis` --- Disassembler for Python bytecode"
msgstr ""

msgid "The :mod:`dis` module supports the analysis of Python :term:`bytecode` by disassembling it.  Since there is no Python assembler, this module defines the Python assembly language.  The Python bytecode which this module takes as an input is defined in the file :file:`Include/opcode.h` and used by the compiler and the interpreter."
msgstr ""

msgid "Example: Given the function :func:`myfunc`::"
msgstr ""

msgid "def myfunc(alist):     return len(alist)"
msgstr ""

msgid "the following command can be used to get the disassembly of :func:`myfunc`::"
msgstr ""

msgid ">>> dis.dis(myfunc)   2           0 LOAD_GLOBAL              0 (len)               3 LOAD_FAST                0 (alist)               6 CALL_FUNCTION            1               9 RETURN_VALUE"
msgstr ""

msgid "(The \"2\" is a line number)."
msgstr ""

msgid "The :mod:`dis` module defines the following functions and constants:"
msgstr ""

msgid "Disassemble the *x* object. *x* can denote either a module, a class, a method, a function, or a code object.   For a module, it disassembles all functions.  For a class, it disassembles all methods.  For a single code sequence, it prints one line per bytecode instruction.  If no object is provided, it disassembles the last traceback."
msgstr ""

msgid "Disassembles the top-of-stack function of a traceback, using the last traceback if none was passed.  The instruction causing the exception is indicated."
msgstr ""

msgid "Disassembles a code object, indicating the last instruction if *lasti* was provided.  The output is divided in the following columns:"
msgstr ""

msgid "the line number, for the first instruction of each line"
msgstr ""

msgid "the current instruction, indicated as ``-->``,"
msgstr ""

msgid "a labelled instruction, indicated with ``>>``,"
msgstr ""

msgid "the address of the instruction,"
msgstr ""

msgid "the operation code name,"
msgstr ""

msgid "operation parameters, and"
msgstr ""

msgid "interpretation of the parameters in parentheses."
msgstr ""

msgid "The parameter interpretation recognizes local and global variable names, constant values, branch targets, and compare operators."
msgstr ""

msgid "This generator function uses the ``co_firstlineno`` and ``co_lnotab`` attributes of the code object *code* to find the offsets which are starts of lines in the source code.  They are generated as ``(offset, lineno)`` pairs."
msgstr ""

msgid "Detect all offsets in the code object *code* which are jump targets, and return a list of these offsets."
msgstr ""

msgid "Sequence of operation names, indexable using the bytecode."
msgstr ""

msgid "Dictionary mapping bytecodes to operation names."
msgstr ""

msgid "Sequence of all compare operation names."
msgstr ""

msgid "Sequence of bytecodes that have a constant parameter."
msgstr ""

msgid "Sequence of bytecodes that access a free variable."
msgstr ""

msgid "Sequence of bytecodes that access an attribute by name."
msgstr ""

msgid "Sequence of bytecodes that have a relative jump target."
msgstr ""

msgid "Sequence of bytecodes that have an absolute jump target."
msgstr ""

msgid "Sequence of bytecodes that access a local variable."
msgstr ""

msgid "Sequence of bytecodes of Boolean operations."
msgstr ""

msgid "Python Bytecode Instructions"
msgstr ""

msgid "The Python compiler currently generates the following bytecode instructions."
msgstr ""

msgid "Indicates end-of-code to the compiler, not used by the interpreter."
msgstr ""

msgid "Do nothing code.  Used as a placeholder by the bytecode optimizer."
msgstr ""

msgid "Removes the top-of-stack (TOS) item."
msgstr ""

msgid "Swaps the two top-most stack items."
msgstr ""

msgid "Lifts second and third stack item one position up, moves top down to position three."
msgstr ""

msgid "Lifts second, third and forth stack item one position up, moves top down to position four."
msgstr ""

msgid "Duplicates the reference on top of the stack."
msgstr ""

msgid "Unary Operations take the top of the stack, apply the operation, and push the result back on the stack."
msgstr ""

msgid "Implements ``TOS = +TOS``."
msgstr ""

msgid "Implements ``TOS = -TOS``."
msgstr ""

msgid "Implements ``TOS = not TOS``."
msgstr ""

msgid "Implements ``TOS = ~TOS``."
msgstr ""

msgid "Implements ``TOS = iter(TOS)``."
msgstr ""

msgid "Binary operations remove the top of the stack (TOS) and the second top-most stack item (TOS1) from the stack.  They perform the operation, and put the result back on the stack."
msgstr ""

msgid "Implements ``TOS = TOS1 ** TOS``."
msgstr ""

msgid "Implements ``TOS = TOS1 * TOS``."
msgstr ""

msgid "Implements ``TOS = TOS1 // TOS``."
msgstr ""

msgid "Implements ``TOS = TOS1 / TOS``."
msgstr ""

msgid "Implements ``TOS = TOS1 % TOS``."
msgstr ""

msgid "Implements ``TOS = TOS1 + TOS``."
msgstr ""

msgid "Implements ``TOS = TOS1 - TOS``."
msgstr ""

msgid "Implements ``TOS = TOS1[TOS]``."
msgstr ""

msgid "Implements ``TOS = TOS1 << TOS``."
msgstr ""

msgid "Implements ``TOS = TOS1 >> TOS``."
msgstr ""

msgid "Implements ``TOS = TOS1 & TOS``."
msgstr ""

msgid "Implements ``TOS = TOS1 ^ TOS``."
msgstr ""

msgid "Implements ``TOS = TOS1 | TOS``."
msgstr ""

msgid "In-place operations are like binary operations, in that they remove TOS and TOS1, and push the result back on the stack, but the operation is done in-place when TOS1 supports it, and the resulting TOS may be (but does not have to be) the original TOS1."
msgstr ""

msgid "Implements in-place ``TOS = TOS1 ** TOS``."
msgstr ""

msgid "Implements in-place ``TOS = TOS1 * TOS``."
msgstr ""

msgid "Implements in-place ``TOS = TOS1 // TOS``."
msgstr ""

msgid "Implements in-place ``TOS = TOS1 / TOS``."
msgstr ""

msgid "Implements in-place ``TOS = TOS1 % TOS``."
msgstr ""

msgid "Implements in-place ``TOS = TOS1 + TOS``."
msgstr ""

msgid "Implements in-place ``TOS = TOS1 - TOS``."
msgstr ""

msgid "Implements in-place ``TOS = TOS1 << TOS``."
msgstr ""

msgid "Implements in-place ``TOS = TOS1 >> TOS``."
msgstr ""

msgid "Implements in-place ``TOS = TOS1 & TOS``."
msgstr ""

msgid "Implements in-place ``TOS = TOS1 ^ TOS``."
msgstr ""

msgid "Implements in-place ``TOS = TOS1 | TOS``."
msgstr ""

msgid "Implements ``TOS1[TOS] = TOS2``."
msgstr ""

msgid "Implements ``del TOS1[TOS]``."
msgstr ""

msgid "Miscellaneous opcodes."
msgstr ""

msgid "Implements the expression statement for the interactive mode.  TOS is removed from the stack and printed.  In non-interactive mode, an expression statement is terminated with ``POP_STACK``."
msgstr ""

msgid "Terminates a loop due to a :keyword:`break` statement."
msgstr ""

msgid "Continues a loop due to a :keyword:`continue` statement.  *target* is the address to jump to (which should be a ``FOR_ITER`` instruction)."
msgstr ""

msgid "Calls ``set.add(TOS1[-i], TOS)``.  Used to implement set comprehensions."
msgstr ""

msgid "Calls ``list.append(TOS[-i], TOS)``.  Used to implement list comprehensions."
msgstr ""

msgid "Calls ``dict.setitem(TOS1[-i], TOS, TOS1)``.  Used to implement dict comprehensions."
msgstr ""

msgid "For all of the SET_ADD, LIST_APPEND and MAP_ADD instructions, while the added value or key/value pair is popped off, the container object remains on the stack so that it is available for further iterations of the loop."
msgstr ""

msgid "Returns with TOS to the caller of the function."
msgstr ""

msgid "Pops ``TOS`` and yields it from a :term:`generator`."
msgstr ""

msgid "Loads all symbols not starting with ``'_'`` directly from the module TOS to the local namespace. The module is popped after loading all names. This opcode implements ``from module import *``."
msgstr ""

msgid "Removes one block from the block stack.  Per frame, there is a  stack of blocks, denoting nested loops, try statements, and such."
msgstr ""

msgid "Removes one block from the block stack. The popped block must be an exception handler block, as implicitly created when entering an except handler. In addition to popping extraneous values from the frame stack, the last three popped values are used to restore the exception state."
msgstr ""

msgid "Terminates a :keyword:`finally` clause.  The interpreter recalls whether the exception has to be re-raised, or whether the function returns, and continues with the outer-next block."
msgstr ""

msgid "Pushes :func:`builtins.__build_class__` onto the stack.  It is later called by ``CALL_FUNCTION`` to construct a class."
msgstr ""

msgid "This opcode performs several operations before a with block starts.  First, it loads :meth:`~object.__exit__` from the context manager and pushes it onto the stack for later use by :opcode:`WITH_CLEANUP`.  Then, :meth:`~object.__enter__` is called, and a finally block pointing to *delta* is pushed.  Finally, the result of calling the enter method is pushed onto the stack.  The next opcode will either ignore it (:opcode:`POP_TOP`), or store it in (a) variable(s) (:opcode:`STORE_FAST`, :opcode:`STORE_NAME`, or :opcode:`UNPACK_SEQUENCE`)."
msgstr ""

msgid "Cleans up the stack when a :keyword:`with` statement block exits.  TOS is the context manager's :meth:`__exit__` bound method. Below TOS are 1--3 values indicating how/why the finally clause was entered:"
msgstr ""

msgid "SECOND = ``None``"
msgstr ""

msgid "(SECOND, THIRD) = (``WHY_{RETURN,CONTINUE}``), retval"
msgstr ""

msgid "SECOND = ``WHY_*``; no retval below it"
msgstr ""

msgid "(SECOND, THIRD, FOURTH) = exc_info()"
msgstr ""

msgid "In the last case, ``TOS(SECOND, THIRD, FOURTH)`` is called, otherwise ``TOS(None, None, None)``.  In addition, TOS is removed from the stack."
msgstr ""

msgid "If the stack represents an exception, *and* the function call returns a 'true' value, this information is \"zapped\" and replaced with a single ``WHY_SILENCED`` to prevent ``END_FINALLY`` from re-raising the exception. (But non-local gotos will still be resumed.)"
msgstr ""

msgid "Pops TOS from the stack and stores it as the current frame's ``f_locals``. This is used in class construction."
msgstr ""

msgid "All of the following opcodes expect arguments.  An argument is two bytes, with the more significant byte last."
msgstr ""

msgid "Implements ``name = TOS``. *namei* is the index of *name* in the attribute :attr:`co_names` of the code object. The compiler tries to use ``STORE_FAST`` or ``STORE_GLOBAL`` if possible."
msgstr ""

msgid "Implements ``del name``, where *namei* is the index into :attr:`co_names` attribute of the code object."
msgstr ""

msgid "Unpacks TOS into *count* individual values, which are put onto the stack right-to-left."
msgstr ""

msgid "Implements assignment with a starred target: Unpacks an iterable in TOS into individual values, where the total number of values can be smaller than the number of items in the iterable: one the new values will be a list of all leftover items."
msgstr ""

msgid "The low byte of *counts* is the number of values before the list value, the high byte of *counts* the number of values after it.  The resulting values are put onto the stack right-to-left."
msgstr ""

msgid "Duplicate *count* items, keeping them in the same order. Due to implementation limits, *count* should be between 1 and 5 inclusive."
msgstr ""

msgid "Implements ``TOS.name = TOS1``, where *namei* is the index of name in :attr:`co_names`."
msgstr ""

msgid "Implements ``del TOS.name``, using *namei* as index into :attr:`co_names`."
msgstr ""

msgid "Works as ``STORE_NAME``, but stores the name as a global."
msgstr ""

msgid "Works as ``DELETE_NAME``, but deletes a global name."
msgstr ""

msgid "Pushes ``co_consts[consti]`` onto the stack."
msgstr ""

msgid "Pushes the value associated with ``co_names[namei]`` onto the stack."
msgstr ""

msgid "Creates a tuple consuming *count* items from the stack, and pushes the resulting tuple onto the stack."
msgstr ""

msgid "Works as ``BUILD_TUPLE``, but creates a list."
msgstr ""

msgid "Works as ``BUILD_TUPLE``, but creates a set."
msgstr ""

msgid "Pushes a new dictionary object onto the stack.  The dictionary is pre-sized to hold *count* entries."
msgstr ""

msgid "Replaces TOS with ``getattr(TOS, co_names[namei])``."
msgstr ""

msgid "Performs a Boolean operation.  The operation name can be found in ``cmp_op[opname]``."
msgstr ""

msgid "Imports the module ``co_names[namei]``.  TOS and TOS1 are popped and provide the *fromlist* and *level* arguments of :func:`__import__`.  The module object is pushed onto the stack.  The current namespace is not affected: for a proper import statement, a subsequent ``STORE_FAST`` instruction modifies the namespace."
msgstr ""

msgid "Loads the attribute ``co_names[namei]`` from the module found in TOS. The resulting object is pushed onto the stack, to be subsequently stored by a ``STORE_FAST`` instruction."
msgstr ""

msgid "Increments bytecode counter by *delta*."
msgstr ""

msgid "If TOS is true, sets the bytecode counter to *target*.  TOS is popped."
msgstr ""

msgid "If TOS is false, sets the bytecode counter to *target*.  TOS is popped."
msgstr ""

msgid "If TOS is true, sets the bytecode counter to *target* and leaves TOS on the stack.  Otherwise (TOS is false), TOS is popped."
msgstr ""

msgid "If TOS is false, sets the bytecode counter to *target* and leaves TOS on the stack.  Otherwise (TOS is true), TOS is popped."
msgstr ""

msgid "Set bytecode counter to *target*."
msgstr ""

msgid "``TOS`` is an :term:`iterator`.  Call its :meth:`__next__` method.  If this yields a new value, push it on the stack (leaving the iterator below it).  If the iterator indicates it is exhausted ``TOS`` is popped, and the byte code counter is incremented by *delta*."
msgstr ""

msgid "Loads the global named ``co_names[namei]`` onto the stack."
msgstr ""

msgid "Pushes a block for a loop onto the block stack.  The block spans from the current instruction with a size of *delta* bytes."
msgstr ""

msgid "Pushes a try block from a try-except clause onto the block stack. *delta* points to the first except block."
msgstr ""

msgid "Pushes a try block from a try-except clause onto the block stack. *delta* points to the finally block."
msgstr ""

msgid "Store a key and value pair in a dictionary.  Pops the key and value while leaving the dictionary on the stack."
msgstr ""

msgid "Pushes a reference to the local ``co_varnames[var_num]`` onto the stack."
msgstr ""

msgid "Stores TOS into the local ``co_varnames[var_num]``."
msgstr ""

msgid "Deletes local ``co_varnames[var_num]``."
msgstr ""

msgid "Pushes a reference to the cell contained in slot *i* of the cell and free variable storage.  The name of the variable is  ``co_cellvars[i]`` if *i* is less than the length of *co_cellvars*.  Otherwise it is  ``co_freevars[i - len(co_cellvars)]``."
msgstr ""

msgid "Loads the cell contained in slot *i* of the cell and free variable storage. Pushes a reference to the object the cell contains on the stack."
msgstr ""

msgid "Stores TOS into the cell contained in slot *i* of the cell and free variable storage."
msgstr ""

msgid "This opcode is obsolete."
msgstr ""

msgid "Raises an exception. *argc* indicates the number of parameters to the raise statement, ranging from 0 to 3.  The handler will find the traceback as TOS2, the parameter as TOS1, and the exception as TOS."
msgstr ""

msgid "Calls a function.  The low byte of *argc* indicates the number of positional parameters, the high byte the number of keyword parameters. On the stack, the opcode finds the keyword parameters first.  For each keyword argument, the value is on top of the key.  Below the keyword parameters, the positional parameters are on the stack, with the right-most parameter on top.  Below the parameters, the function object to call is on the stack.  Pops all function arguments, and the function itself off the stack, and pushes the return value."
msgstr ""

msgid "Pushes a new function object on the stack.  TOS is the code associated with the function.  The function object is defined to have *argc* default parameters, which are found below TOS."
msgstr ""

msgid "Creates a new function object, sets its *__closure__* slot, and pushes it on the stack.  TOS is the code associated with the function, TOS1 the tuple containing cells for the closure's free variables.  The function also has *argc* default parameters, which are found below the cells."
msgstr ""

msgid "Pushes a slice object on the stack.  *argc* must be 2 or 3.  If it is 2, ``slice(TOS1, TOS)`` is pushed; if it is 3, ``slice(TOS2, TOS1, TOS)`` is pushed. See the :func:`slice` built-in function for more information."
msgstr ""

msgid "Prefixes any opcode which has an argument too big to fit into the default two bytes.  *ext* holds two additional bytes which, taken together with the subsequent opcode's argument, comprise a four-byte argument, *ext* being the two most-significant bytes."
msgstr ""

msgid "Calls a function. *argc* is interpreted as in ``CALL_FUNCTION``. The top element on the stack contains the variable argument list, followed by keyword and positional arguments."
msgstr ""

msgid "Calls a function. *argc* is interpreted as in ``CALL_FUNCTION``. The top element on the stack contains the keyword arguments dictionary,  followed by explicit keyword and positional arguments."
msgstr ""

msgid "Calls a function. *argc* is interpreted as in ``CALL_FUNCTION``.  The top element on the stack contains the keyword arguments dictionary, followed by the variable-arguments tuple, followed by explicit keyword and positional arguments."
msgstr ""

msgid "This is not really an opcode.  It identifies the dividing line between opcodes which don't take arguments ``< HAVE_ARGUMENT`` and those which do ``>= HAVE_ARGUMENT``."
msgstr ""

msgid ":mod:`distutils` --- Building and installing Python modules"
msgstr ""

msgid "The :mod:`distutils` package provides support for building and installing additional modules into a Python installation.  The new modules may be either 100%-pure Python, or may be extension modules written in C, or may be collections of Python packages which include modules coded in both Python and C."
msgstr ""

msgid "This package is discussed in two separate chapters:"
msgstr ""

msgid "The manual for developers and packagers of Python modules.  This describes how to prepare :mod:`distutils`\\ -based packages so that they may be easily installed into an existing Python installation."
msgstr ""

msgid "An \"administrators\" manual which includes information on installing modules into an existing Python installation.  You do not need to be a Python programmer to read this manual."
msgstr ""

msgid ":mod:`doctest` --- Test interactive Python examples"
msgstr ""

msgid "The :mod:`doctest` module searches for pieces of text that look like interactive Python sessions, and then executes those sessions to verify that they work exactly as shown.  There are several common ways to use doctest:"
msgstr ""

msgid "To check that a module's docstrings are up-to-date by verifying that all interactive examples still work as documented."
msgstr ""

msgid "To perform regression testing by verifying that interactive examples from a test file or a test object work as expected."
msgstr ""

msgid "To write tutorial documentation for a package, liberally illustrated with input-output examples.  Depending on whether the examples or the expository text are emphasized, this has the flavor of \"literate testing\" or \"executable documentation\"."
msgstr ""

msgid "Here's a complete but small example module::"
msgstr ""

msgid "\"\"\" This is the \"example\" module.  The example module supplies one function, factorial().  For example,  >>> factorial(5) 120 \"\"\"  def factorial(n):     \"\"\"Return the factorial of n, an exact integer >= 0.      >>> [factorial(n) for n in range(6)]     [1, 1, 2, 6, 24, 120]     >>> factorial(30)     265252859812191058636308480000000     >>> factorial(-1)     Traceback (most recent call last):         ...     ValueError: n must be >= 0      Factorials of floats are OK, but the float must be an exact integer:     >>> factorial(30.1)     Traceback (most recent call last):         ...     ValueError: n must be exact integer     >>> factorial(30.0)     265252859812191058636308480000000      It must also not be ridiculously large:     >>> factorial(1e100)     Traceback (most recent call last):         ...     OverflowError: n too large     \"\"\"      import math     if not n >= 0:         raise ValueError(\"n must be >= 0\")     if math.floor(n) != n:         raise ValueError(\"n must be exact integer\")     if n+1 == n:  # catch a value like 1e300         raise OverflowError(\"n too large\")     result = 1     factor = 2     while factor <= n:         result *= factor         factor += 1     return result   if __name__ == \"__main__\":     import doctest     doctest.testmod()"
msgstr ""

msgid "If you run :file:`example.py` directly from the command line, :mod:`doctest` works its magic::"
msgstr ""

msgid "$ python example.py $"
msgstr ""

msgid "There's no output!  That's normal, and it means all the examples worked.  Pass :option:`-v` to the script, and :mod:`doctest` prints a detailed log of what it's trying, and prints a summary at the end::"
msgstr ""

msgid "$ python example.py -v Trying:     factorial(5) Expecting:     120 ok Trying:     [factorial(n) for n in range(6)] Expecting:     [1, 1, 2, 6, 24, 120] ok"
msgstr ""

msgid "And so on, eventually ending with::"
msgstr ""

msgid "Trying:     factorial(1e100) Expecting:     Traceback (most recent call last):         ...     OverflowError: n too large ok 2 items passed all tests:    1 tests in __main__    8 tests in __main__.factorial 9 tests in 2 items. 9 passed and 0 failed. Test passed. $"
msgstr ""

msgid "That's all you need to know to start making productive use of :mod:`doctest`! Jump in.  The following sections provide full details.  Note that there are many examples of doctests in the standard Python test suite and libraries. Especially useful examples can be found in the standard test file :file:`Lib/test/test_doctest.py`."
msgstr ""

msgid "Simple Usage: Checking Examples in Docstrings"
msgstr ""

msgid "The simplest way to start using doctest (but not necessarily the way you'll continue to do it) is to end each module :mod:`M` with::"
msgstr ""

msgid "if __name__ == \"__main__\":     import doctest     doctest.testmod()"
msgstr ""

msgid ":mod:`doctest` then examines docstrings in module :mod:`M`."
msgstr ""

msgid "Running the module as a script causes the examples in the docstrings to get executed and verified::"
msgstr ""

msgid "python M.py"
msgstr ""

msgid "This won't display anything unless an example fails, in which case the failing example(s) and the cause(s) of the failure(s) are printed to stdout, and the final line of output is ``***Test Failed*** N failures.``, where *N* is the number of examples that failed."
msgstr ""

msgid "Run it with the :option:`-v` switch instead::"
msgstr ""

msgid "python M.py -v"
msgstr ""

msgid "and a detailed report of all examples tried is printed to standard output, along with assorted summaries at the end."
msgstr ""

msgid "You can force verbose mode by passing ``verbose=True`` to :func:`testmod`, or prohibit it by passing ``verbose=False``.  In either of those cases, ``sys.argv`` is not examined by :func:`testmod` (so passing :option:`-v` or not has no effect)."
msgstr ""

msgid "There is also a command line shortcut for running :func:`testmod`.  You can instruct the Python interpreter to run the doctest module directly from the standard library and pass the module name(s) on the command line::"
msgstr ""

msgid "python -m doctest -v example.py"
msgstr ""

msgid "This will import :file:`example.py` as a standalone module and run :func:`testmod` on it.  Note that this may not work correctly if the file is part of a package and imports other submodules from that package."
msgstr ""

msgid "For more information on :func:`testmod`, see section :ref:`doctest-basic-api`."
msgstr ""

msgid "Simple Usage: Checking Examples in a Text File"
msgstr ""

msgid "Another simple application of doctest is testing interactive examples in a text file.  This can be done with the :func:`testfile` function::"
msgstr ""

msgid "import doctest doctest.testfile(\"example.txt\")"
msgstr ""

msgid "That short script executes and verifies any interactive Python examples contained in the file :file:`example.txt`.  The file content is treated as if it were a single giant docstring; the file doesn't need to contain a Python program!   For example, perhaps :file:`example.txt` contains this::"
msgstr ""

msgid "The ``example`` module ======================  Using ``factorial`` -------------------  This is an example text file in reStructuredText format.  First import ``factorial`` from the ``example`` module:      >>> from example import factorial  Now use it:      >>> factorial(6)     120"
msgstr ""

msgid "Running ``doctest.testfile(\"example.txt\")`` then finds the error in this documentation::"
msgstr ""

msgid "File \"./example.txt\", line 14, in example.txt Failed example:     factorial(6) Expected:     120 Got:     720"
msgstr ""

msgid "As with :func:`testmod`, :func:`testfile` won't display anything unless an example fails.  If an example does fail, then the failing example(s) and the cause(s) of the failure(s) are printed to stdout, using the same format as :func:`testmod`."
msgstr ""

msgid "By default, :func:`testfile` looks for files in the calling module's directory. See section :ref:`doctest-basic-api` for a description of the optional arguments that can be used to tell it to look for files in other locations."
msgstr ""

msgid "Like :func:`testmod`, :func:`testfile`'s verbosity can be set with the :option:`-v` command-line switch or with the optional keyword argument *verbose*."
msgstr ""

msgid "There is also a command line shortcut for running :func:`testfile`.  You can instruct the Python interpreter to run the doctest module directly from the standard library and pass the file name(s) on the command line::"
msgstr ""

msgid "python -m doctest -v example.txt"
msgstr ""

msgid "Because the file name does not end with :file:`.py`, :mod:`doctest` infers that it must be run with :func:`testfile`, not :func:`testmod`."
msgstr ""

msgid "For more information on :func:`testfile`, see section :ref:`doctest-basic-api`."
msgstr ""

msgid "How It Works"
msgstr ""

msgid "This section examines in detail how doctest works: which docstrings it looks at, how it finds interactive examples, what execution context it uses, how it handles exceptions, and how option flags can be used to control its behavior. This is the information that you need to know to write doctest examples; for information about actually running doctest on these examples, see the following sections."
msgstr ""

msgid "Which Docstrings Are Examined?"
msgstr ""

msgid "The module docstring, and all function, class and method docstrings are searched.  Objects imported into the module are not searched."
msgstr ""

msgid "In addition, if ``M.__test__`` exists and \"is true\", it must be a dict, and each entry maps a (string) name to a function object, class object, or string. Function and class object docstrings found from ``M.__test__`` are searched, and strings are treated as if they were docstrings.  In output, a key ``K`` in ``M.__test__`` appears with name ::"
msgstr ""

msgid "<name of M>.__test__.K"
msgstr ""

msgid "Any classes found are recursively searched similarly, to test docstrings in their contained methods and nested classes."
msgstr ""

msgid "How are Docstring Examples Recognized?"
msgstr ""

msgid "In most cases a copy-and-paste of an interactive console session works fine, but doctest isn't trying to do an exact emulation of any specific Python shell."
msgstr ""

msgid ">>> # comments are ignored >>> x = 12 >>> x 12 >>> if x == 13: ...     print(\"yes\") ... else: ...     print(\"no\") ...     print(\"NO\") ...     print(\"NO!!!\") ... no NO NO!!! >>>"
msgstr ""

msgid "Any expected output must immediately follow the final ``'>>> '`` or ``'... '`` line containing the code, and the expected output (if any) extends to the next ``'>>> '`` or all-whitespace line."
msgstr ""

msgid "The fine print:"
msgstr ""

msgid "Expected output cannot contain an all-whitespace line, since such a line is taken to signal the end of expected output.  If expected output does contain a blank line, put ``<BLANKLINE>`` in your doctest example each place a blank line is expected."
msgstr ""

msgid "All hard tab characters are expanded to spaces, using 8-column tab stops. Tabs in output generated by the tested code are not modified.  Because any hard tabs in the sample output *are* expanded, this means that if the code output includes hard tabs, the only way the doctest can pass is if the :const:`NORMALIZE_WHITESPACE` option or directive is in effect. Alternatively, the test can be rewritten to capture the output and compare it to an expected value as part of the test.  This handling of tabs in the source was arrived at through trial and error, and has proven to be the least error prone way of handling them.  It is possible to use a different algorithm for handling tabs by writing a custom :class:`DocTestParser` class."
msgstr ""

msgid "Output to stdout is captured, but not output to stderr (exception tracebacks are captured via a different means)."
msgstr ""

msgid "If you continue a line via backslashing in an interactive session, or for any other reason use a backslash, you should use a raw docstring, which will preserve your backslashes exactly as you type them::"
msgstr ""

msgid ">>> def f(x): ...     r'''Backslashes in a raw docstring: m\\n''' >>> print(f.__doc__) Backslashes in a raw docstring: m\\n"
msgstr ""

msgid "Otherwise, the backslash will be interpreted as part of the string. For example, the \"\\\\\" above would be interpreted as a newline character.  Alternatively, you can double each backslash in the doctest version (and not use a raw string)::"
msgstr ""

msgid ">>> def f(x): ...     '''Backslashes in a raw docstring: m\\\\n''' >>> print(f.__doc__) Backslashes in a raw docstring: m\\n"
msgstr ""

msgid "The starting column doesn't matter::"
msgstr ""

msgid ">>> assert \"Easy!\"       >>> import math           >>> math.floor(1.9)           1"
msgstr ""

msgid "and as many leading whitespace characters are stripped from the expected output as appeared in the initial ``'>>> '`` line that started the example."
msgstr ""

msgid "What's the Execution Context?"
msgstr ""

msgid "By default, each time :mod:`doctest` finds a docstring to test, it uses a *shallow copy* of :mod:`M`'s globals, so that running tests doesn't change the module's real globals, and so that one test in :mod:`M` can't leave behind crumbs that accidentally allow another test to work.  This means examples can freely use any names defined at top-level in :mod:`M`, and names defined earlier in the docstring being run. Examples cannot see names defined in other docstrings."
msgstr ""

msgid "You can force use of your own dict as the execution context by passing ``globs=your_dict`` to :func:`testmod` or :func:`testfile` instead."
msgstr ""

msgid "What About Exceptions?"
msgstr ""

msgid "No problem, provided that the traceback is the only output produced by the example:  just paste in the traceback. [#]_ Since tracebacks contain details that are likely to change rapidly (for example, exact file paths and line numbers), this is one case where doctest works hard to be flexible in what it accepts."
msgstr ""

msgid "Simple example::"
msgstr ""

msgid ">>> [1, 2, 3].remove(42) Traceback (most recent call last):   File \"<stdin>\", line 1, in ? ValueError: list.remove(x): x not in list"
msgstr ""

msgid "That doctest succeeds if :exc:`ValueError` is raised, with the ``list.remove(x): x not in list`` detail as shown."
msgstr ""

msgid "The expected output for an exception must start with a traceback header, which may be either of the following two lines, indented the same as the first line of the example::"
msgstr ""

msgid "Traceback (most recent call last): Traceback (innermost last):"
msgstr ""

msgid "The traceback header is followed by an optional traceback stack, whose contents are ignored by doctest.  The traceback stack is typically omitted, or copied verbatim from an interactive session."
msgstr ""

msgid "The traceback stack is followed by the most interesting part: the line(s) containing the exception type and detail.  This is usually the last line of a traceback, but can extend across multiple lines if the exception has a multi-line detail::"
msgstr ""

msgid ">>> raise ValueError('multi\\n    line\\ndetail') Traceback (most recent call last):   File \"<stdin>\", line 1, in ? ValueError: multi     line detail"
msgstr ""

msgid "The last three lines (starting with :exc:`ValueError`) are compared against the exception's type and detail, and the rest are ignored."
msgstr ""

msgid "Best practice is to omit the traceback stack, unless it adds significant documentation value to the example.  So the last example is probably better as::"
msgstr ""

msgid ">>> raise ValueError('multi\\n    line\\ndetail') Traceback (most recent call last):     ... ValueError: multi     line detail"
msgstr ""

msgid "Note that tracebacks are treated very specially.  In particular, in the rewritten example, the use of ``...`` is independent of doctest's :const:`ELLIPSIS` option.  The ellipsis in that example could be left out, or could just as well be three (or three hundred) commas or digits, or an indented transcript of a Monty Python skit."
msgstr ""

msgid "Some details you should read once, but won't need to remember:"
msgstr ""

msgid "Doctest can't guess whether your expected output came from an exception traceback or from ordinary printing.  So, e.g., an example that expects ``ValueError: 42 is prime`` will pass whether :exc:`ValueError` is actually raised or if the example merely prints that traceback text.  In practice, ordinary output rarely begins with a traceback header line, so this doesn't create real problems."
msgstr ""

msgid "Each line of the traceback stack (if present) must be indented further than the first line of the example, *or* start with a non-alphanumeric character. The first line following the traceback header indented the same and starting with an alphanumeric is taken to be the start of the exception detail.  Of course this does the right thing for genuine tracebacks."
msgstr ""

msgid "When the :const:`IGNORE_EXCEPTION_DETAIL` doctest option is specified, everything following the leftmost colon and any module information in the exception name is ignored."
msgstr ""

msgid "The interactive shell omits the traceback header line for some :exc:`SyntaxError`\\ s.  But doctest uses the traceback header line to distinguish exceptions from non-exceptions.  So in the rare case where you need to test a :exc:`SyntaxError` that omits the traceback header, you will need to manually add the traceback header line to your test example."
msgstr ""

msgid "For some :exc:`SyntaxError`\\ s, Python displays the character position of the syntax error, using a ``^`` marker::"
msgstr ""

msgid ">>> 1 1   File \"<stdin>\", line 1     1 1       ^ SyntaxError: invalid syntax"
msgstr ""

msgid "Since the lines showing the position of the error come before the exception type and detail, they are not checked by doctest.  For example, the following test would pass, even though it puts the ``^`` marker in the wrong location::"
msgstr ""

msgid ">>> 1 1 Traceback (most recent call last):   File \"<stdin>\", line 1     1 1     ^ SyntaxError: invalid syntax"
msgstr ""

msgid "Option Flags and Directives"
msgstr ""

msgid "A number of option flags control various aspects of doctest's behavior. Symbolic names for the flags are supplied as module constants, which can be or'ed together and passed to various functions.  The names can also be used in doctest directives (see below)."
msgstr ""

msgid "The first group of options define test semantics, controlling aspects of how doctest decides whether actual output matches an example's expected output:"
msgstr ""

msgid "By default, if an expected output block contains just ``1``, an actual output block containing just ``1`` or just ``True`` is considered to be a match, and similarly for ``0`` versus ``False``.  When :const:`DONT_ACCEPT_TRUE_FOR_1` is specified, neither substitution is allowed.  The default behavior caters to that Python changed the return type of many functions from integer to boolean; doctests expecting \"little integer\" output still work in these cases.  This option will probably go away, but not for several years."
msgstr ""

msgid "By default, if an expected output block contains a line containing only the string ``<BLANKLINE>``, then that line will match a blank line in the actual output.  Because a genuinely blank line delimits the expected output, this is the only way to communicate that a blank line is expected.  When :const:`DONT_ACCEPT_BLANKLINE` is specified, this substitution is not allowed."
msgstr ""

msgid "When specified, all sequences of whitespace (blanks and newlines) are treated as equal.  Any sequence of whitespace within the expected output will match any sequence of whitespace within the actual output. By default, whitespace must match exactly. :const:`NORMALIZE_WHITESPACE` is especially useful when a line of expected output is very long, and you want to wrap it across multiple lines in your source."
msgstr ""

msgid "When specified, an ellipsis marker (``...``) in the expected output can match any substring in the actual output.  This includes substrings that span line boundaries, and empty substrings, so it's best to keep usage of this simple. Complicated uses can lead to the same kinds of \"oops, it matched too much!\" surprises that ``.*`` is prone to in regular expressions."
msgstr ""

msgid "When specified, an example that expects an exception passes if an exception of the expected type is raised, even if the exception detail does not match.  For example, an example expecting ``ValueError: 42`` will pass if the actual exception raised is ``ValueError: 3*14``, but will fail, e.g., if :exc:`TypeError` is raised."
msgstr ""

msgid "It will also ignore the module name used in Python 3 doctest reports. Hence both these variations will work regardless of whether the test is run under Python 2.7 or Python 3.2 (or later versions):"
msgstr ""

msgid ">>> raise CustomError('message') #doctest: +IGNORE_EXCEPTION_DETAIL Traceback (most recent call last): CustomError: message"
msgstr ""

msgid ">>> raise CustomError('message') #doctest: +IGNORE_EXCEPTION_DETAIL Traceback (most recent call last): my_module.CustomError: message"
msgstr ""

msgid "Note that :const:`ELLIPSIS` can also be used to ignore the details of the exception message, but such a test may still fail based on whether or not the module details are printed as part of the exception name. Using :const:`IGNORE_EXCEPTION_DETAIL` and the details from Python 2.3 is also the only clear way to write a doctest that doesn't care about the exception detail yet continues to pass under Python 2.3 or earlier (those releases do not support doctest directives and ignore them as irrelevant comments). For example, ::"
msgstr ""

msgid ">>> (1, 2)[3] = 'moo' #doctest: +IGNORE_EXCEPTION_DETAIL Traceback (most recent call last):   File \"<stdin>\", line 1, in ? TypeError: object doesn't support item assignment"
msgstr ""

msgid "passes under Python 2.3 and later Python versions, even though the detail changed in Python 2.4 to say \"does not\" instead of \"doesn't\"."
msgstr ""

msgid "When specified, do not run the example at all.  This can be useful in contexts where doctest examples serve as both documentation and test cases, and an example should be included for documentation purposes, but should not be checked.  E.g., the example's output might be random; or the example might depend on resources which would be unavailable to the test driver."
msgstr ""

msgid "The SKIP flag can also be used for temporarily \"commenting out\" examples."
msgstr ""

msgid "A bitmask or'ing together all the comparison flags above."
msgstr ""

msgid "The second group of options controls how test failures are reported:"
msgstr ""

msgid "When specified, failures that involve multi-line expected and actual outputs are displayed using a unified diff."
msgstr ""

msgid "When specified, failures that involve multi-line expected and actual outputs will be displayed using a context diff."
msgstr ""

msgid "When specified, differences are computed by ``difflib.Differ``, using the same algorithm as the popular :file:`ndiff.py` utility. This is the only method that marks differences within lines as well as across lines.  For example, if a line of expected output contains digit ``1`` where actual output contains letter ``l``, a line is inserted with a caret marking the mismatching column positions."
msgstr ""

msgid "When specified, display the first failing example in each doctest, but suppress output for all remaining examples.  This will prevent doctest from reporting correct examples that break because of earlier failures; but it might also hide incorrect examples that fail independently of the first failure.  When :const:`REPORT_ONLY_FIRST_FAILURE` is specified, the remaining examples are still run, and still count towards the total number of failures reported; only the output is suppressed."
msgstr ""

msgid "A bitmask or'ing together all the reporting flags above."
msgstr ""

msgid "\"Doctest directives\" may be used to modify the option flags for individual examples.  Doctest directives are expressed as a special Python comment following an example's source code:"
msgstr ""

msgid "Whitespace is not allowed between the ``+`` or ``-`` and the directive option name.  The directive option name can be any of the option flag names explained above."
msgstr ""

msgid "An example's doctest directives modify doctest's behavior for that single example.  Use ``+`` to enable the named behavior, or ``-`` to disable it."
msgstr ""

msgid "For example, this test passes::"
msgstr ""

msgid ">>> print(list(range(20))) #doctest: +NORMALIZE_WHITESPACE [0,   1,  2,  3,  4,  5,  6,  7,  8,  9, 10,  11, 12, 13, 14, 15, 16, 17, 18, 19]"
msgstr ""

msgid "Without the directive it would fail, both because the actual output doesn't have two blanks before the single-digit list elements, and because the actual output is on a single line.  This test also passes, and also requires a directive to do so::"
msgstr ""

msgid ">>> print(list(range(20))) # doctest: +ELLIPSIS [0, 1, ..., 18, 19]"
msgstr ""

msgid "Multiple directives can be used on a single physical line, separated by commas::"
msgstr ""

msgid ">>> print(list(range(20))) # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE [0,    1, ...,   18,    19]"
msgstr ""

msgid "If multiple directive comments are used for a single example, then they are combined::"
msgstr ""

msgid ">>> print(list(range(20))) # doctest: +ELLIPSIS ...                        # doctest: +NORMALIZE_WHITESPACE [0,    1, ...,   18,    19]"
msgstr ""

msgid "As the previous example shows, you can add ``...`` lines to your example containing only directives.  This can be useful when an example is too long for a directive to comfortably fit on the same line::"
msgstr ""

msgid ">>> print(list(range(5)) + list(range(10, 20)) + list(range(30, 40))) ... # doctest: +ELLIPSIS [0, ..., 4, 10, ..., 19, 30, ..., 39]"
msgstr ""

msgid "Note that since all options are disabled by default, and directives apply only to the example they appear in, enabling options (via ``+`` in a directive) is usually the only meaningful choice.  However, option flags can also be passed to functions that run doctests, establishing different defaults.  In such cases, disabling an option via ``-`` in a directive can be useful."
msgstr ""

msgid "There's also a way to register new option flag names, although this isn't useful unless you intend to extend :mod:`doctest` internals via subclassing:"
msgstr ""

msgid "Create a new option flag with a given name, and return the new flag's integer value.  :func:`register_optionflag` can be used when subclassing :class:`OutputChecker` or :class:`DocTestRunner` to create new options that are supported by your subclasses.  :func:`register_optionflag` should always be called using the following idiom::"
msgstr ""

msgid "MY_FLAG = register_optionflag('MY_FLAG')"
msgstr ""

msgid "Warnings"
msgstr ""

msgid ":mod:`doctest` is serious about requiring exact matches in expected output.  If even a single character doesn't match, the test fails.  This will probably surprise you a few times, as you learn exactly what Python does and doesn't guarantee about output.  For example, when printing a dict, Python doesn't guarantee that the key-value pairs will be printed in any particular order, so a test like ::"
msgstr ""

msgid ">>> foo() {\"Hermione\": \"hippogryph\", \"Harry\": \"broomstick\"}"
msgstr ""

msgid "is vulnerable!  One workaround is to do ::"
msgstr ""

msgid ">>> foo() == {\"Hermione\": \"hippogryph\", \"Harry\": \"broomstick\"} True"
msgstr ""

msgid "instead.  Another is to do ::"
msgstr ""

msgid ">>> d = sorted(foo().items()) >>> d [('Harry', 'broomstick'), ('Hermione', 'hippogryph')]"
msgstr ""

msgid "There are others, but you get the idea."
msgstr ""

msgid "Another bad idea is to print things that embed an object address, like ::"
msgstr ""

msgid ">>> id(1.0) # certain to fail some of the time 7948648 >>> class C: pass >>> C()   # the default repr() for instances embeds an address <__main__.C instance at 0x00AC18F0>"
msgstr ""

msgid "The :const:`ELLIPSIS` directive gives a nice approach for the last example::"
msgstr ""

msgid ">>> C() #doctest: +ELLIPSIS <__main__.C instance at 0x...>"
msgstr ""

msgid "Floating-point numbers are also subject to small output variations across platforms, because Python defers to the platform C library for float formatting, and C libraries vary widely in quality here. ::"
msgstr ""

msgid ">>> 1./7  # risky 0.14285714285714285 >>> print(1./7) # safer 0.142857142857 >>> print(round(1./7, 6)) # much safer 0.142857"
msgstr ""

msgid "Numbers of the form ``I/2.**J`` are safe across all platforms, and I often contrive doctest examples to produce numbers of that form::"
msgstr ""

msgid ">>> 3./4  # utterly safe 0.75"
msgstr ""

msgid "Simple fractions are also easier for people to understand, and that makes for better documentation."
msgstr ""

msgid "Basic API"
msgstr ""

msgid "The functions :func:`testmod` and :func:`testfile` provide a simple interface to doctest that should be sufficient for most basic uses.  For a less formal introduction to these two functions, see sections :ref:`doctest-simple-testmod` and :ref:`doctest-simple-testfile`."
msgstr ""

msgid "All arguments except *filename* are optional, and should be specified in keyword form."
msgstr ""

msgid "Test examples in the file named *filename*.  Return ``(failure_count, test_count)``."
msgstr ""

msgid "Optional argument *module_relative* specifies how the filename should be interpreted:"
msgstr ""

msgid "If *module_relative* is ``True`` (the default), then *filename* specifies an OS-independent module-relative path.  By default, this path is relative to the calling module's directory; but if the *package* argument is specified, then it is relative to that package.  To ensure OS-independence, *filename* should use ``/`` characters to separate path segments, and may not be an absolute path (i.e., it may not begin with ``/``)."
msgstr ""

msgid "If *module_relative* is ``False``, then *filename* specifies an OS-specific path.  The path may be absolute or relative; relative paths are resolved with respect to the current working directory."
msgstr ""

msgid "Optional argument *name* gives the name of the test; by default, or if ``None``, ``os.path.basename(filename)`` is used."
msgstr ""

msgid "Optional argument *package* is a Python package or the name of a Python package whose directory should be used as the base directory for a module-relative filename.  If no package is specified, then the calling module's directory is used as the base directory for module-relative filenames.  It is an error to specify *package* if *module_relative* is ``False``."
msgstr ""

msgid "Optional argument *globs* gives a dict to be used as the globals when executing examples.  A new shallow copy of this dict is created for the doctest, so its examples start with a clean slate. By default, or if ``None``, a new empty dict is used."
msgstr ""

msgid "Optional argument *extraglobs* gives a dict merged into the globals used to execute examples.  This works like :meth:`dict.update`:  if *globs* and *extraglobs* have a common key, the associated value in *extraglobs* appears in the combined dict.  By default, or if ``None``, no extra globals are used.  This is an advanced feature that allows parameterization of doctests.  For example, a doctest can be written for a base class, using a generic name for the class, then reused to test any number of subclasses by passing an *extraglobs* dict mapping the generic name to the subclass to be tested."
msgstr ""

msgid "Optional argument *verbose* prints lots of stuff if true, and prints only failures if false; by default, or if ``None``, it's true if and only if ``'-v'`` is in ``sys.argv``."
msgstr ""

msgid "Optional argument *report* prints a summary at the end when true, else prints nothing at the end.  In verbose mode, the summary is detailed, else the summary is very brief (in fact, empty if all tests passed)."
msgstr ""

msgid "Optional argument *optionflags* or's together option flags.  See section :ref:`doctest-options`."
msgstr ""

msgid "Optional argument *raise_on_error* defaults to false.  If true, an exception is raised upon the first failure or unexpected exception in an example.  This allows failures to be post-mortem debugged. Default behavior is to continue running examples."
msgstr ""

msgid "Optional argument *parser* specifies a :class:`DocTestParser` (or subclass) that should be used to extract tests from the files.  It defaults to a normal parser (i.e., ``DocTestParser()``)."
msgstr ""

msgid "Optional argument *encoding* specifies an encoding that should be used to convert the file to unicode."
msgstr ""

msgid "All arguments are optional, and all except for *m* should be specified in keyword form."
msgstr ""

msgid "Test examples in docstrings in functions and classes reachable from module *m* (or module :mod:`__main__` if *m* is not supplied or is ``None``), starting with ``m.__doc__``."
msgstr ""

msgid "Also test examples reachable from dict ``m.__test__``, if it exists and is not ``None``.  ``m.__test__`` maps names (strings) to functions, classes and strings; function and class docstrings are searched for examples; strings are searched directly, as if they were docstrings."
msgstr ""

msgid "Only docstrings attached to objects belonging to module *m* are searched."
msgstr ""

msgid "Return ``(failure_count, test_count)``."
msgstr ""

msgid "Optional argument *name* gives the name of the module; by default, or if ``None``, ``m.__name__`` is used."
msgstr ""

msgid "Optional argument *exclude_empty* defaults to false.  If true, objects for which no doctests are found are excluded from consideration. The default is a backward compatibility hack, so that code still using :meth:`doctest.master.summarize` in conjunction with :func:`testmod` continues to get output for objects with no tests. The *exclude_empty* argument to the newer :class:`DocTestFinder` constructor defaults to true."
msgstr ""

msgid "Optional arguments *extraglobs*, *verbose*, *report*, *optionflags*, *raise_on_error*, and *globs* are the same as for function :func:`testfile` above, except that *globs* defaults to ``m.__dict__``."
msgstr ""

msgid "There's also a function to run the doctests associated with a single object. This function is provided for backward compatibility.  There are no plans to deprecate it, but it's rarely useful:"
msgstr ""

msgid "Test examples associated with object *f*; for example, *f* may be a module, function, or class object."
msgstr ""

msgid "A shallow copy of dictionary argument *globs* is used for the execution context."
msgstr ""

msgid "Optional argument *name* is used in failure messages, and defaults to ``\"NoName\"``."
msgstr ""

msgid "If optional argument *verbose* is true, output is generated even if there are no failures.  By default, output is generated only in case of an example failure."
msgstr ""

msgid "Optional argument *compileflags* gives the set of flags that should be used by the Python compiler when running the examples.  By default, or if ``None``, flags are deduced corresponding to the set of future features found in *globs*."
msgstr ""

msgid "Optional argument *optionflags* works as for function :func:`testfile` above."
msgstr ""

msgid "Unittest API"
msgstr ""

msgid "As your collection of doctest'ed modules grows, you'll want a way to run all their doctests systematically.  :mod:`doctest` provides two functions that can be used to create :mod:`unittest` test suites from modules and text files containing doctests.  These test suites can then be run using :mod:`unittest` test runners::"
msgstr ""

msgid "import unittest import doctest import my_module_with_doctests, and_another  suite = unittest.TestSuite() for mod in my_module_with_doctests, and_another:     suite.addTest(doctest.DocTestSuite(mod)) runner = unittest.TextTestRunner() runner.run(suite)"
msgstr ""

msgid "There are two main functions for creating :class:`unittest.TestSuite` instances from text files and modules with doctests:"
msgstr ""

msgid "Convert doctest tests from one or more text files to a :class:`unittest.TestSuite`."
msgstr ""

msgid "The returned :class:`unittest.TestSuite` is to be run by the unittest framework and runs the interactive examples in each file.  If an example in any file fails, then the synthesized unit test fails, and a :exc:`failureException` exception is raised showing the name of the file containing the test and a (sometimes approximate) line number."
msgstr ""

msgid "Pass one or more paths (as strings) to text files to be examined."
msgstr ""

msgid "Options may be provided as keyword arguments:"
msgstr ""

msgid "Optional argument *module_relative* specifies how the filenames in *paths* should be interpreted:"
msgstr ""

msgid "If *module_relative* is ``True`` (the default), then each filename in *paths* specifies an OS-independent module-relative path.  By default, this path is relative to the calling module's directory; but if the *package* argument is specified, then it is relative to that package.  To ensure OS-independence, each filename should use ``/`` characters to separate path segments, and may not be an absolute path (i.e., it may not begin with ``/``)."
msgstr ""

msgid "If *module_relative* is ``False``, then each filename in *paths* specifies an OS-specific path.  The path may be absolute or relative; relative paths are resolved with respect to the current working directory."
msgstr ""

msgid "Optional argument *package* is a Python package or the name of a Python package whose directory should be used as the base directory for module-relative filenames in *paths*.  If no package is specified, then the calling module's directory is used as the base directory for module-relative filenames.  It is an error to specify *package* if *module_relative* is ``False``."
msgstr ""

msgid "Optional argument *setUp* specifies a set-up function for the test suite. This is called before running the tests in each file.  The *setUp* function will be passed a :class:`DocTest` object.  The setUp function can access the test globals as the *globs* attribute of the test passed."
msgstr ""

msgid "Optional argument *tearDown* specifies a tear-down function for the test suite.  This is called after running the tests in each file.  The *tearDown* function will be passed a :class:`DocTest` object.  The setUp function can access the test globals as the *globs* attribute of the test passed."
msgstr ""

msgid "Optional argument *globs* is a dictionary containing the initial global variables for the tests.  A new copy of this dictionary is created for each test.  By default, *globs* is a new empty dictionary."
msgstr ""

msgid "Optional argument *optionflags* specifies the default doctest options for the tests, created by or-ing together individual option flags.  See section :ref:`doctest-options`. See function :func:`set_unittest_reportflags` below for a better way to set reporting options."
msgstr ""

msgid "The global ``__file__`` is added to the globals provided to doctests loaded from a text file using :func:`DocFileSuite`."
msgstr ""

msgid "Convert doctest tests for a module to a :class:`unittest.TestSuite`."
msgstr ""

msgid "The returned :class:`unittest.TestSuite` is to be run by the unittest framework and runs each doctest in the module.  If any of the doctests fail, then the synthesized unit test fails, and a :exc:`failureException` exception is raised showing the name of the file containing the test and a (sometimes approximate) line number."
msgstr ""

msgid "Optional argument *module* provides the module to be tested.  It can be a module object or a (possibly dotted) module name.  If not specified, the module calling this function is used."
msgstr ""

msgid "Optional argument *extraglobs* specifies an extra set of global variables, which is merged into *globs*.  By default, no extra globals are used."
msgstr ""

msgid "Optional argument *test_finder* is the :class:`DocTestFinder` object (or a drop-in replacement) that is used to extract doctests from the module."
msgstr ""

msgid "Optional arguments *setUp*, *tearDown*, and *optionflags* are the same as for function :func:`DocFileSuite` above."
msgstr ""

msgid "This function uses the same search technique as :func:`testmod`."
msgstr ""

msgid "Under the covers, :func:`DocTestSuite` creates a :class:`unittest.TestSuite` out of :class:`doctest.DocTestCase` instances, and :class:`DocTestCase` is a subclass of :class:`unittest.TestCase`. :class:`DocTestCase` isn't documented here (it's an internal detail), but studying its code can answer questions about the exact details of :mod:`unittest` integration."
msgstr ""

msgid "Similarly, :func:`DocFileSuite` creates a :class:`unittest.TestSuite` out of :class:`doctest.DocFileCase` instances, and :class:`DocFileCase` is a subclass of :class:`DocTestCase`."
msgstr ""

msgid "So both ways of creating a :class:`unittest.TestSuite` run instances of :class:`DocTestCase`.  This is important for a subtle reason: when you run :mod:`doctest` functions yourself, you can control the :mod:`doctest` options in use directly, by passing option flags to :mod:`doctest` functions.  However, if you're writing a :mod:`unittest` framework, :mod:`unittest` ultimately controls when and how tests get run.  The framework author typically wants to control :mod:`doctest` reporting options (perhaps, e.g., specified by command line options), but there's no way to pass options through :mod:`unittest` to :mod:`doctest` test runners."
msgstr ""

msgid "For this reason, :mod:`doctest` also supports a notion of :mod:`doctest` reporting flags specific to :mod:`unittest` support, via this function:"
msgstr ""

msgid "Set the :mod:`doctest` reporting flags to use."
msgstr ""

msgid "Argument *flags* or's together option flags.  See section :ref:`doctest-options`.  Only \"reporting flags\" can be used."
msgstr ""

msgid "This is a module-global setting, and affects all future doctests run by module :mod:`unittest`:  the :meth:`runTest` method of :class:`DocTestCase` looks at the option flags specified for the test case when the :class:`DocTestCase` instance was constructed.  If no reporting flags were specified (which is the typical and expected case), :mod:`doctest`'s :mod:`unittest` reporting flags are or'ed into the option flags, and the option flags so augmented are passed to the :class:`DocTestRunner` instance created to run the doctest.  If any reporting flags were specified when the :class:`DocTestCase` instance was constructed, :mod:`doctest`'s :mod:`unittest` reporting flags are ignored."
msgstr ""

msgid "The value of the :mod:`unittest` reporting flags in effect before the function was called is returned by the function."
msgstr ""

msgid "Advanced API"
msgstr ""

msgid "The basic API is a simple wrapper that's intended to make doctest easy to use. It is fairly flexible, and should meet most users' needs; however, if you require more fine-grained control over testing, or wish to extend doctest's capabilities, then you should use the advanced API."
msgstr ""

msgid "The advanced API revolves around two container classes, which are used to store the interactive examples extracted from doctest cases:"
msgstr ""

msgid ":class:`Example`: A single Python :term:`statement`, paired with its expected output."
msgstr ""

msgid ":class:`DocTest`: A collection of :class:`Example`\\ s, typically extracted from a single docstring or text file."
msgstr ""

msgid "Additional processing classes are defined to find, parse, and run, and check doctest examples:"
msgstr ""

msgid ":class:`DocTestFinder`: Finds all docstrings in a given module, and uses a :class:`DocTestParser` to create a :class:`DocTest` from every docstring that contains interactive examples."
msgstr ""

msgid ":class:`DocTestParser`: Creates a :class:`DocTest` object from a string (such as an object's docstring)."
msgstr ""

msgid ":class:`DocTestRunner`: Executes the examples in a :class:`DocTest`, and uses an :class:`OutputChecker` to verify their output."
msgstr ""

msgid ":class:`OutputChecker`: Compares the actual output from a doctest example with the expected output, and decides whether they match."
msgstr ""

msgid "The relationships among these processing classes are summarized in the following diagram::"
msgstr ""

msgid "list of: +------+                   +---------+ |module| --DocTestFinder-> | DocTest | --DocTestRunner-> results +------+    |        ^     +---------+     |       ^    (printed)             |        |     | Example |     |       |             v        |     |   ...   |     v       |            DocTestParser   | Example |   OutputChecker                            +---------+"
msgstr ""

msgid "DocTest Objects"
msgstr ""

msgid "A collection of doctest examples that should be run in a single namespace.  The constructor arguments are used to initialize the member variables of the same names."
msgstr ""

msgid ":class:`DocTest` defines the following member variables.  They are initialized by the constructor, and should not be modified directly."
msgstr ""

msgid "A list of :class:`Example` objects encoding the individual interactive Python examples that should be run by this test."
msgstr ""

msgid "The namespace (aka globals) that the examples should be run in. This is a dictionary mapping names to values.  Any changes to the namespace made by the examples (such as binding new variables) will be reflected in :attr:`globs` after the test is run."
msgstr ""

msgid "A string name identifying the :class:`DocTest`.  Typically, this is the name of the object or file that the test was extracted from."
msgstr ""

msgid "The name of the file that this :class:`DocTest` was extracted from; or ``None`` if the filename is unknown, or if the :class:`DocTest` was not extracted from a file."
msgstr ""

msgid "The line number within :attr:`filename` where this :class:`DocTest` begins, or ``None`` if the line number is unavailable.  This line number is zero-based with respect to the beginning of the file."
msgstr ""

msgid "The string that the test was extracted from, or 'None' if the string is unavailable, or if the test was not extracted from a string."
msgstr ""

msgid "Example Objects"
msgstr ""

msgid "A single interactive example, consisting of a Python statement and its expected output.  The constructor arguments are used to initialize the member variables of the same names."
msgstr ""

msgid ":class:`Example` defines the following member variables.  They are initialized by the constructor, and should not be modified directly."
msgstr ""

msgid "A string containing the example's source code.  This source code consists of a single Python statement, and always ends with a newline; the constructor adds a newline when necessary."
msgstr ""

msgid "The expected output from running the example's source code (either from stdout, or a traceback in case of exception).  :attr:`want` ends with a newline unless no output is expected, in which case it's an empty string.  The constructor adds a newline when necessary."
msgstr ""

msgid "The exception message generated by the example, if the example is expected to generate an exception; or ``None`` if it is not expected to generate an exception.  This exception message is compared against the return value of :func:`traceback.format_exception_only`.  :attr:`exc_msg` ends with a newline unless it's ``None``.  The constructor adds a newline if needed."
msgstr ""

msgid "The line number within the string containing this example where the example begins.  This line number is zero-based with respect to the beginning of the containing string."
msgstr ""

msgid "The example's indentation in the containing string, i.e., the number of space characters that precede the example's first prompt."
msgstr ""

msgid "A dictionary mapping from option flags to ``True`` or ``False``, which is used to override default options for this example.  Any option flags not contained in this dictionary are left at their default value (as specified by the :class:`DocTestRunner`'s :attr:`optionflags`). By default, no options are set."
msgstr ""

msgid "DocTestFinder objects"
msgstr ""

msgid "A processing class used to extract the :class:`DocTest`\\ s that are relevant to a given object, from its docstring and the docstrings of its contained objects. :class:`DocTest`\\ s can currently be extracted from the following object types: modules, functions, classes, methods, staticmethods, classmethods, and properties."
msgstr ""

msgid "The optional argument *verbose* can be used to display the objects searched by the finder.  It defaults to ``False`` (no output)."
msgstr ""

msgid "The optional argument *parser* specifies the :class:`DocTestParser` object (or a drop-in replacement) that is used to extract doctests from docstrings."
msgstr ""

msgid "If the optional argument *recurse* is false, then :meth:`DocTestFinder.find` will only examine the given object, and not any contained objects."
msgstr ""

msgid "If the optional argument *exclude_empty* is false, then :meth:`DocTestFinder.find` will include tests for objects with empty docstrings."
msgstr ""

msgid ":class:`DocTestFinder` defines the following method:"
msgstr ""

msgid "Return a list of the :class:`DocTest`\\ s that are defined by *obj*'s docstring, or by any of its contained objects' docstrings."
msgstr ""

msgid "The optional argument *name* specifies the object's name; this name will be used to construct names for the returned :class:`DocTest`\\ s.  If *name* is not specified, then ``obj.__name__`` is used."
msgstr ""

msgid "The optional parameter *module* is the module that contains the given object. If the module is not specified or is None, then the test finder will attempt to automatically determine the correct module.  The object's module is used:"
msgstr ""

msgid "As a default namespace, if *globs* is not specified."
msgstr ""

msgid "To prevent the DocTestFinder from extracting DocTests from objects that are imported from other modules.  (Contained objects with modules other than *module* are ignored.)"
msgstr ""

msgid "To find the name of the file containing the object."
msgstr ""

msgid "To help find the line number of the object within its file."
msgstr ""

msgid "If *module* is ``False``, no attempt to find the module will be made.  This is obscure, of use mostly in testing doctest itself: if *module* is ``False``, or is ``None`` but cannot be found automatically, then all objects are considered to belong to the (non-existent) module, so all contained objects will (recursively) be searched for doctests."
msgstr ""

msgid "The globals for each :class:`DocTest` is formed by combining *globs* and *extraglobs* (bindings in *extraglobs* override bindings in *globs*).  A new shallow copy of the globals dictionary is created for each :class:`DocTest`. If *globs* is not specified, then it defaults to the module's *__dict__*, if specified, or ``{}`` otherwise.  If *extraglobs* is not specified, then it defaults to ``{}``."
msgstr ""

msgid "DocTestParser objects"
msgstr ""

msgid "A processing class used to extract interactive examples from a string, and use them to create a :class:`DocTest` object."
msgstr ""

msgid ":class:`DocTestParser` defines the following methods:"
msgstr ""

msgid "Extract all doctest examples from the given string, and collect them into a :class:`DocTest` object."
msgstr ""

msgid "*globs*, *name*, *filename*, and *lineno* are attributes for the new :class:`DocTest` object.  See the documentation for :class:`DocTest` for more information."
msgstr ""

msgid "Extract all doctest examples from the given string, and return them as a list of :class:`Example` objects.  Line numbers are 0-based.  The optional argument *name* is a name identifying this string, and is only used for error messages."
msgstr ""

msgid "Divide the given string into examples and intervening text, and return them as a list of alternating :class:`Example`\\ s and strings. Line numbers for the :class:`Example`\\ s are 0-based.  The optional argument *name* is a name identifying this string, and is only used for error messages."
msgstr ""

msgid "DocTestRunner objects"
msgstr ""

msgid "A processing class used to execute and verify the interactive examples in a :class:`DocTest`."
msgstr ""

msgid "The comparison between expected outputs and actual outputs is done by an :class:`OutputChecker`.  This comparison may be customized with a number of option flags; see section :ref:`doctest-options` for more information.  If the option flags are insufficient, then the comparison may also be customized by passing a subclass of :class:`OutputChecker` to the constructor."
msgstr ""

msgid "The test runner's display output can be controlled in two ways. First, an output function can be passed to :meth:`TestRunner.run`; this function will be called with strings that should be displayed.  It defaults to ``sys.stdout.write``.  If capturing the output is not sufficient, then the display output can be also customized by subclassing DocTestRunner, and overriding the methods :meth:`report_start`, :meth:`report_success`, :meth:`report_unexpected_exception`, and :meth:`report_failure`."
msgstr ""

msgid "The optional keyword argument *checker* specifies the :class:`OutputChecker` object (or drop-in replacement) that should be used to compare the expected outputs to the actual outputs of doctest examples."
msgstr ""

msgid "The optional keyword argument *verbose* controls the :class:`DocTestRunner`'s verbosity.  If *verbose* is ``True``, then information is printed about each example, as it is run.  If *verbose* is ``False``, then only failures are printed.  If *verbose* is unspecified, or ``None``, then verbose output is used iff the command-line switch :option:`-v` is used."
msgstr ""

msgid "The optional keyword argument *optionflags* can be used to control how the test runner compares expected output to actual output, and how it displays failures. For more information, see section :ref:`doctest-options`."
msgstr ""

msgid "Report that the test runner is about to process the given example. This method is provided to allow subclasses of :class:`DocTestRunner` to customize their output; it should not be called directly."
msgstr ""

msgid "*example* is the example about to be processed.  *test* is the test *containing example*.  *out* is the output function that was passed to :meth:`DocTestRunner.run`."
msgstr ""

msgid "Report that the given example ran successfully.  This method is provided to allow subclasses of :class:`DocTestRunner` to customize their output; it should not be called directly."
msgstr ""

msgid "*example* is the example about to be processed.  *got* is the actual output from the example.  *test* is the test containing *example*.  *out* is the output function that was passed to :meth:`DocTestRunner.run`."
msgstr ""

msgid "Report that the given example failed.  This method is provided to allow subclasses of :class:`DocTestRunner` to customize their output; it should not be called directly."
msgstr ""

msgid "Report that the given example raised an unexpected exception. This method is provided to allow subclasses of :class:`DocTestRunner` to customize their output; it should not be called directly."
msgstr ""

msgid "*example* is the example about to be processed. *exc_info* is a tuple containing information about the unexpected exception (as returned by :func:`sys.exc_info`). *test* is the test containing *example*.  *out* is the output function that was passed to :meth:`DocTestRunner.run`."
msgstr ""

msgid "Run the examples in *test* (a :class:`DocTest` object), and display the results using the writer function *out*."
msgstr ""

msgid "The examples are run in the namespace ``test.globs``.  If *clear_globs* is true (the default), then this namespace will be cleared after the test runs, to help with garbage collection. If you would like to examine the namespace after the test completes, then use *clear_globs=False*."
msgstr ""

msgid "*compileflags* gives the set of flags that should be used by the Python compiler when running the examples.  If not specified, then it will default to the set of future-import flags that apply to *globs*."
msgstr ""

msgid "The output of each example is checked using the :class:`DocTestRunner`'s output checker, and the results are formatted by the :meth:`DocTestRunner.report_\\*` methods."
msgstr ""

msgid "Print a summary of all the test cases that have been run by this DocTestRunner, and return a :term:`named tuple` ``TestResults(failed, attempted)``."
msgstr ""

msgid "The optional *verbose* argument controls how detailed the summary is.  If the verbosity is not specified, then the :class:`DocTestRunner`'s verbosity is used."
msgstr ""

msgid "OutputChecker objects"
msgstr ""

msgid "A class used to check the whether the actual output from a doctest example matches the expected output.  :class:`OutputChecker` defines two methods: :meth:`check_output`, which compares a given pair of outputs, and returns true if they match; and :meth:`output_difference`, which returns a string describing the differences between two outputs."
msgstr ""

msgid ":class:`OutputChecker` defines the following methods:"
msgstr ""

msgid "Return ``True`` iff the actual output from an example (*got*) matches the expected output (*want*).  These strings are always considered to match if they are identical; but depending on what option flags the test runner is using, several non-exact match types are also possible.  See section :ref:`doctest-options` for more information about option flags."
msgstr ""

msgid "Return a string describing the differences between the expected output for a given example (*example*) and the actual output (*got*).  *optionflags* is the set of option flags used to compare *want* and *got*."
msgstr ""

msgid "Debugging"
msgstr ""

msgid "Doctest provides several mechanisms for debugging doctest examples:"
msgstr ""

msgid "Several functions convert doctests to executable Python programs, which can be run under the Python debugger, :mod:`pdb`."
msgstr ""

msgid "The :class:`DebugRunner` class is a subclass of :class:`DocTestRunner` that raises an exception for the first failing example, containing information about that example. This information can be used to perform post-mortem debugging on the example."
msgstr ""

msgid "The :mod:`unittest` cases generated by :func:`DocTestSuite` support the :meth:`debug` method defined by :class:`unittest.TestCase`."
msgstr ""

msgid "You can add a call to :func:`pdb.set_trace` in a doctest example, and you'll drop into the Python debugger when that line is executed.  Then you can inspect current values of variables, and so on.  For example, suppose :file:`a.py` contains just this module docstring::"
msgstr ""

msgid "\"\"\" >>> def f(x): ...     g(x*2) >>> def g(x): ...     print(x+3) ...     import pdb; pdb.set_trace() >>> f(3) 9 \"\"\""
msgstr ""

msgid "Then an interactive Python session may look like this::"
msgstr ""

msgid ">>> import a, doctest >>> doctest.testmod(a) --Return-- > <doctest a[1]>(3)g()->None -> import pdb; pdb.set_trace() (Pdb) list   1     def g(x):   2         print(x+3)   3  ->     import pdb; pdb.set_trace() [EOF] (Pdb) p x 6 (Pdb) step --Return-- > <doctest a[0]>(2)f()->None -> g(x*2) (Pdb) list   1     def f(x):   2  ->     g(x*2) [EOF] (Pdb) p x 3 (Pdb) step --Return-- > <doctest a[2]>(1)?()->None -> f(3) (Pdb) cont (0, 3) >>>"
msgstr ""

msgid "Functions that convert doctests to Python code, and possibly run the synthesized code under the debugger:"
msgstr ""

msgid "Convert text with examples to a script."
msgstr ""

msgid "Argument *s* is a string containing doctest examples.  The string is converted to a Python script, where doctest examples in *s* are converted to regular code, and everything else is converted to Python comments.  The generated script is returned as a string. For example, ::"
msgstr ""

msgid "import doctest print(doctest.script_from_examples(r\"\"\"     Set x and y to 1 and 2.     >>> x, y = 1, 2      Print their sum:     >>> print(x+y)     3 \"\"\"))"
msgstr ""

msgid "displays::"
msgstr ""

msgid "# Set x and y to 1 and 2. x, y = 1, 2 # # Print their sum: print(x+y) # Expected: ## 3"
msgstr ""

msgid "This function is used internally by other functions (see below), but can also be useful when you want to transform an interactive Python session into a Python script."
msgstr ""

msgid "Convert the doctest for an object to a script."
msgstr ""

msgid "Argument *module* is a module object, or dotted name of a module, containing the object whose doctests are of interest.  Argument *name* is the name (within the module) of the object with the doctests of interest.  The result is a string, containing the object's docstring converted to a Python script, as described for :func:`script_from_examples` above.  For example, if module :file:`a.py` contains a top-level function :func:`f`, then ::"
msgstr ""

msgid "import a, doctest print(doctest.testsource(a, \"a.f\"))"
msgstr ""

msgid "prints a script version of function :func:`f`'s docstring, with doctests converted to code, and the rest placed in comments."
msgstr ""

msgid "Debug the doctests for an object."
msgstr ""

msgid "The *module* and *name* arguments are the same as for function :func:`testsource` above.  The synthesized Python script for the named object's docstring is written to a temporary file, and then that file is run under the control of the Python debugger, :mod:`pdb`."
msgstr ""

msgid "A shallow copy of ``module.__dict__`` is used for both local and global execution context."
msgstr ""

msgid "Optional argument *pm* controls whether post-mortem debugging is used.  If *pm* has a true value, the script file is run directly, and the debugger gets involved only if the script terminates via raising an unhandled exception.  If it does, then post-mortem debugging is invoked, via :func:`pdb.post_mortem`, passing the traceback object from the unhandled exception.  If *pm* is not specified, or is false, the script is run under the debugger from the start, via passing an appropriate :func:`exec` call to :func:`pdb.run`."
msgstr ""

msgid "Debug the doctests in a string."
msgstr ""

msgid "This is like function :func:`debug` above, except that a string containing doctest examples is specified directly, via the *src* argument."
msgstr ""

msgid "Optional argument *pm* has the same meaning as in function :func:`debug` above."
msgstr ""

msgid "Optional argument *globs* gives a dictionary to use as both local and global execution context.  If not specified, or ``None``, an empty dictionary is used. If specified, a shallow copy of the dictionary is used."
msgstr ""

msgid "The :class:`DebugRunner` class, and the special exceptions it may raise, are of most interest to testing framework authors, and will only be sketched here.  See the source code, and especially :class:`DebugRunner`'s docstring (which is a doctest!) for more details:"
msgstr ""

msgid "A subclass of :class:`DocTestRunner` that raises an exception as soon as a failure is encountered.  If an unexpected exception occurs, an :exc:`UnexpectedException` exception is raised, containing the test, the example, and the original exception.  If the output doesn't match, then a :exc:`DocTestFailure` exception is raised, containing the test, the example, and the actual output."
msgstr ""

msgid "For information about the constructor parameters and methods, see the documentation for :class:`DocTestRunner` in section :ref:`doctest-advanced-api`."
msgstr ""

msgid "There are two exceptions that may be raised by :class:`DebugRunner` instances:"
msgstr ""

msgid "An exception thrown by :class:`DocTestRunner` to signal that a doctest example's actual output did not match its expected output. The constructor arguments are used to initialize the member variables of the same names."
msgstr ""

msgid ":exc:`DocTestFailure` defines the following member variables:"
msgstr ""

msgid "The :class:`DocTest` object that was being run when the example failed."
msgstr ""

msgid "The :class:`Example` that failed."
msgstr ""

msgid "The example's actual output."
msgstr ""

msgid "An exception thrown by :class:`DocTestRunner` to signal that a doctest example raised an unexpected exception.  The constructor arguments are used to initialize the member variables of the same names."
msgstr ""

msgid ":exc:`UnexpectedException` defines the following member variables:"
msgstr ""

msgid "A tuple containing information about the unexpected exception, as returned by :func:`sys.exc_info`."
msgstr ""

msgid "Soapbox"
msgstr ""

msgid "As mentioned in the introduction, :mod:`doctest` has grown to have three primary uses:"
msgstr ""

msgid "Checking examples in docstrings."
msgstr ""

msgid "Regression testing."
msgstr ""

msgid "Executable documentation / literate testing."
msgstr ""

msgid "These uses have different requirements, and it is important to distinguish them. In particular, filling your docstrings with obscure test cases makes for bad documentation."
msgstr ""

msgid "When writing a docstring, choose docstring examples with care. There's an art to this that needs to be learned---it may not be natural at first.  Examples should add genuine value to the documentation.  A good example can often be worth many words. If done with care, the examples will be invaluable for your users, and will pay back the time it takes to collect them many times over as the years go by and things change.  I'm still amazed at how often one of my :mod:`doctest` examples stops working after a \"harmless\" change."
msgstr ""

msgid "Doctest also makes an excellent tool for regression testing, especially if you don't skimp on explanatory text.  By interleaving prose and examples, it becomes much easier to keep track of what's actually being tested, and why.  When a test fails, good prose can make it much easier to figure out what the problem is, and how it should be fixed.  It's true that you could write extensive comments in code-based testing, but few programmers do. Many have found that using doctest approaches instead leads to much clearer tests.  Perhaps this is simply because doctest makes writing prose a little easier than writing code, while writing comments in code is a little harder.  I think it goes deeper than just that: the natural attitude when writing a doctest-based test is that you want to explain the fine points of your software, and illustrate them with examples. This in turn naturally leads to test files that start with the simplest features, and logically progress to complications and edge cases.  A coherent narrative is the result, instead of a collection of isolated functions that test isolated bits of functionality seemingly at random.  It's a different attitude, and produces different results, blurring the distinction between testing and explaining."
msgstr ""

msgid "Regression testing is best confined to dedicated objects or files.  There are several options for organizing tests:"
msgstr ""

msgid "Write text files containing test cases as interactive examples, and test the files using :func:`testfile` or :func:`DocFileSuite`.  This is recommended, although is easiest to do for new projects, designed from the start to use doctest."
msgstr ""

msgid "Define functions named ``_regrtest_topic`` that consist of single docstrings, containing test cases for the named topics.  These functions can be included in the same file as the module, or separated out into a separate test file."
msgstr ""

msgid "Define a ``__test__`` dictionary mapping from regression test topics to docstrings containing test cases."
msgstr ""

msgid "Examples containing both expected output and an exception are not supported. Trying to guess where one ends and the other begins is too error-prone, and that also makes for a confusing test."
msgstr ""

msgid ":mod:`dummy_threading` --- Drop-in replacement for the :mod:`threading` module"
msgstr ""

msgid "This module provides a duplicate interface to the :mod:`threading` module.  It is meant to be imported when the :mod:`_thread` module is not provided on a platform."
msgstr ""

msgid "try:     import threading except ImportError:     import dummy_threading"
msgstr ""

msgid ":mod:`email` --- An email and MIME handling package"
msgstr ""

msgid "The :mod:`email` package is a library for managing email messages, including MIME and other :rfc:`2822`\\ -based message documents.  It is specifically *not* designed to do any sending of email messages to SMTP (:rfc:`2821`), NNTP, or other servers; those are functions of modules such as :mod:`smtplib` and :mod:`nntplib`. The :mod:`email` package attempts to be as RFC-compliant as possible, supporting in addition to :rfc:`2822`, such MIME-related RFCs as :rfc:`2045`, :rfc:`2046`, :rfc:`2047`, and :rfc:`2231`."
msgstr ""

msgid "The primary distinguishing feature of the :mod:`email` package is that it splits the parsing and generating of email messages from the internal *object model* representation of email.  Applications using the :mod:`email` package deal primarily with objects; you can add sub-objects to messages, remove sub-objects from messages, completely re-arrange the contents, etc.  There is a separate parser and a separate generator which handles the transformation from flat text to the object model, and then back to flat text again.  There are also handy subclasses for some common MIME object types, and a few miscellaneous utilities that help with such common tasks as extracting and parsing message field values, creating RFC-compliant dates, etc."
msgstr ""

msgid "The following sections describe the functionality of the :mod:`email` package. The ordering follows a progression that should be common in applications: an email message is read as flat text from a file or other source, the text is parsed to produce the object structure of the email message, this structure is manipulated, and finally, the object tree is rendered back into flat text."
msgstr ""

msgid "It is perfectly feasible to create the object structure out of whole cloth --- i.e. completely from scratch.  From there, a similar progression can be taken as above."
msgstr ""

msgid "Also included are detailed specifications of all the classes and modules that the :mod:`email` package provides, the exception classes you might encounter while using the :mod:`email` package, some auxiliary utilities, and a few examples.  For users of the older :mod:`mimelib` package, or previous versions of the :mod:`email` package, a section on differences and porting is provided."
msgstr ""

msgid "Contents of the :mod:`email` package documentation:"
msgstr ""

msgid "SMTP protocol client"
msgstr ""

msgid "NNTP protocol client"
msgstr ""

msgid "Package History"
msgstr ""

msgid "This table describes the release history of the email package, corresponding to the version of Python that the package was released with.  For purposes of this document, when you see a note about change or added versions, these refer to the Python version the change was made in, *not* the email package version.  This table also describes the Python compatibility of each version of the package."
msgstr ""

msgid "email version"
msgstr ""

msgid "distributed with"
msgstr ""

msgid "compatible with"
msgstr ""

msgid ":const:`1.x`"
msgstr ""

msgid "Python 2.2.0 to Python 2.2.1"
msgstr ""

msgid "*no longer supported*"
msgstr ""

msgid ":const:`2.5`"
msgstr ""

msgid "Python 2.2.2+ and Python 2.3"
msgstr ""

msgid "Python 2.1 to 2.5"
msgstr ""

msgid ":const:`3.0`"
msgstr ""

msgid "Python 2.4"
msgstr ""

msgid "Python 2.3 to 2.5"
msgstr ""

msgid ":const:`4.0`"
msgstr ""

msgid "Python 2.5"
msgstr ""

msgid "Here are the major differences between :mod:`email` version 4 and version 3:"
msgstr ""

msgid "All modules have been renamed according to :pep:`8` standards.  For example, the version 3 module :mod:`email.Message` was renamed to :mod:`email.message` in version 4."
msgstr ""

msgid "A new subpackage :mod:`email.mime` was added and all the version 3 :mod:`email.MIME\\*` modules were renamed and situated into the :mod:`email.mime` subpackage.  For example, the version 3 module :mod:`email.MIMEText` was renamed to :mod:`email.mime.text`."
msgstr ""

msgid "*Note that the version 3 names will continue to work until Python 2.6*."
msgstr ""

msgid "The :mod:`email.mime.application` module was added, which contains the :class:`MIMEApplication` class."
msgstr ""

msgid "Methods that were deprecated in version 3 have been removed.  These include :meth:`Generator.__call__`, :meth:`Message.get_type`, :meth:`Message.get_main_type`, :meth:`Message.get_subtype`."
msgstr ""

msgid "Fixes have been added for :rfc:`2231` support which can change some of the return types for :func:`Message.get_param` and friends.  Under some circumstances, values which used to return a 3-tuple now return simple strings (specifically, if all extended parameter segments were unencoded, there is no language and charset designation expected, so the return type is now a simple string).  Also, %-decoding used to be done for both encoded and unencoded segments; this decoding is now done only for encoded segments."
msgstr ""

msgid "Here are the major differences between :mod:`email` version 3 and version 2:"
msgstr ""

msgid "The :class:`FeedParser` class was introduced, and the :class:`Parser` class was implemented in terms of the :class:`FeedParser`.  All parsing therefore is non-strict, and parsing will make a best effort never to raise an exception. Problems found while parsing messages are stored in the message's *defect* attribute."
msgstr ""

msgid "All aspects of the API which raised :exc:`DeprecationWarning`\\ s in version 2 have been removed.  These include the *_encoder* argument to the :class:`MIMEText` constructor, the :meth:`Message.add_payload` method, the :func:`Utils.dump_address_pair` function, and the functions :func:`Utils.decode` and :func:`Utils.encode`."
msgstr ""

msgid "New :exc:`DeprecationWarning`\\ s have been added to: :meth:`Generator.__call__`, :meth:`Message.get_type`, :meth:`Message.get_main_type`, :meth:`Message.get_subtype`, and the *strict* argument to the :class:`Parser` class.  These are expected to be removed in future versions."
msgstr ""

msgid "Support for Pythons earlier than 2.3 has been removed."
msgstr ""

msgid "Here are the differences between :mod:`email` version 2 and version 1:"
msgstr ""

msgid "The :mod:`email.Header` and :mod:`email.Charset` modules have been added."
msgstr ""

msgid "The pickle format for :class:`Message` instances has changed. Since this was never (and still isn't) formally defined, this isn't considered a backward incompatibility.  However if your application pickles and unpickles :class:`Message` instances, be aware that in :mod:`email` version 2, :class:`Message` instances now have private variables *_charset* and *_default_type*."
msgstr ""

msgid "Several methods in the :class:`Message` class have been deprecated, or their signatures changed.  Also, many new methods have been added.  See the documentation for the :class:`Message` class for details.  The changes should be completely backward compatible."
msgstr ""

msgid "The object structure has changed in the face of :mimetype:`message/rfc822` content types.  In :mod:`email` version 1, such a type would be represented by a scalar payload, i.e. the container message's :meth:`is_multipart` returned false, :meth:`get_payload` was not a list object, but a single :class:`Message` instance."
msgstr ""

msgid "This structure was inconsistent with the rest of the package, so the object representation for :mimetype:`message/rfc822` content types was changed.  In :mod:`email` version 2, the container *does* return ``True`` from :meth:`is_multipart`, and :meth:`get_payload` returns a list containing a single :class:`Message` item."
msgstr ""

msgid "Note that this is one place that backward compatibility could not be completely maintained.  However, if you're already testing the return type of :meth:`get_payload`, you should be fine.  You just need to make sure your code doesn't do a :meth:`set_payload` with a :class:`Message` instance on a container with a content type of :mimetype:`message/rfc822`."
msgstr ""

msgid "The :class:`Parser` constructor's *strict* argument was added, and its :meth:`parse` and :meth:`parsestr` methods grew a *headersonly* argument.  The *strict* flag was also added to functions :func:`email.message_from_file` and :func:`email.message_from_string`."
msgstr ""

msgid ":meth:`Generator.__call__` is deprecated; use :meth:`Generator.flatten` instead.  The :class:`Generator` class has also grown the :meth:`clone` method."
msgstr ""

msgid "The :class:`DecodedGenerator` class in the :mod:`email.Generator` module was added."
msgstr ""

msgid "The intermediate base classes :class:`MIMENonMultipart` and :class:`MIMEMultipart` have been added, and interposed in the class hierarchy for most of the other MIME-related derived classes."
msgstr ""

msgid "The *_encoder* argument to the :class:`MIMEText` constructor has been deprecated.  Encoding  now happens implicitly based on the *_charset* argument."
msgstr ""

msgid "The following functions in the :mod:`email.Utils` module have been deprecated: :func:`dump_address_pairs`, :func:`decode`, and :func:`encode`.  The following functions have been added to the module: :func:`make_msgid`, :func:`decode_rfc2231`, :func:`encode_rfc2231`, and :func:`decode_params`."
msgstr ""

msgid "The non-public function :func:`email.Iterators._structure` was added."
msgstr ""

msgid "Differences from :mod:`mimelib`"
msgstr ""

msgid "The :mod:`email` package was originally prototyped as a separate library called `mimelib <http://mimelib.sf.net/>`_. Changes have been made so that method names are more consistent, and some methods or modules have either been added or removed.  The semantics of some of the methods have also changed.  For the most part, any functionality available in :mod:`mimelib` is still available in the :mod:`email` package, albeit often in a different way.  Backward compatibility between the :mod:`mimelib` package and the :mod:`email` package was not a priority."
msgstr ""

msgid "Here is a brief description of the differences between the :mod:`mimelib` and the :mod:`email` packages, along with hints on how to port your applications."
msgstr ""

msgid "Of course, the most visible difference between the two packages is that the package name has been changed to :mod:`email`.  In addition, the top-level package has the following differences:"
msgstr ""

msgid ":func:`messageFromString` has been renamed to :func:`message_from_string`."
msgstr ""

msgid ":func:`messageFromFile` has been renamed to :func:`message_from_file`."
msgstr ""

msgid "The :class:`Message` class has the following differences:"
msgstr ""

msgid "The method :meth:`asString` was renamed to :meth:`as_string`."
msgstr ""

msgid "The method :meth:`ismultipart` was renamed to :meth:`is_multipart`."
msgstr ""

msgid "The :meth:`get_payload` method has grown a *decode* optional argument."
msgstr ""

msgid "The method :meth:`getall` was renamed to :meth:`get_all`."
msgstr ""

msgid "The method :meth:`addheader` was renamed to :meth:`add_header`."
msgstr ""

msgid "The method :meth:`gettype` was renamed to :meth:`get_type`."
msgstr ""

msgid "The method :meth:`getmaintype` was renamed to :meth:`get_main_type`."
msgstr ""

msgid "The method :meth:`getsubtype` was renamed to :meth:`get_subtype`."
msgstr ""

msgid "The method :meth:`getparams` was renamed to :meth:`get_params`. Also, whereas :meth:`getparams` returned a list of strings, :meth:`get_params` returns a list of 2-tuples, effectively the key/value pairs of the parameters, split on the ``'='`` sign."
msgstr ""

msgid "The method :meth:`getparam` was renamed to :meth:`get_param`."
msgstr ""

msgid "The method :meth:`getcharsets` was renamed to :meth:`get_charsets`."
msgstr ""

msgid "The method :meth:`getfilename` was renamed to :meth:`get_filename`."
msgstr ""

msgid "The method :meth:`getboundary` was renamed to :meth:`get_boundary`."
msgstr ""

msgid "The method :meth:`setboundary` was renamed to :meth:`set_boundary`."
msgstr ""

msgid "The method :meth:`getdecodedpayload` was removed.  To get similar functionality, pass the value 1 to the *decode* flag of the get_payload() method."
msgstr ""

msgid "The method :meth:`getpayloadastext` was removed.  Similar functionality is supported by the :class:`DecodedGenerator` class in the :mod:`email.generator` module."
msgstr ""

msgid "The method :meth:`getbodyastext` was removed.  You can get similar functionality by creating an iterator with :func:`typed_subpart_iterator` in the :mod:`email.iterators` module."
msgstr ""

msgid "The :class:`Parser` class has no differences in its public interface. It does have some additional smarts to recognize :mimetype:`message/delivery-status` type messages, which it represents as a :class:`Message` instance containing separate :class:`Message` subparts for each header block in the delivery status notification [#]_."
msgstr ""

msgid "The :class:`Generator` class has no differences in its public interface.  There is a new class in the :mod:`email.generator` module though, called :class:`DecodedGenerator` which provides most of the functionality previously available in the :meth:`Message.getpayloadastext` method."
msgstr ""

msgid "The following modules and classes have been changed:"
msgstr ""

msgid "The :class:`MIMEBase` class constructor arguments *_major* and *_minor* have changed to *_maintype* and *_subtype* respectively."
msgstr ""

msgid "The ``Image`` class/module has been renamed to ``MIMEImage``.  The *_minor* argument has been renamed to *_subtype*."
msgstr ""

msgid "The ``Text`` class/module has been renamed to ``MIMEText``.  The *_minor* argument has been renamed to *_subtype*."
msgstr ""

msgid "The ``MessageRFC822`` class/module has been renamed to ``MIMEMessage``.  Note that an earlier version of :mod:`mimelib` called this class/module ``RFC822``, but that clashed with the Python standard library module :mod:`rfc822` on some case-insensitive file systems."
msgstr ""

msgid "Also, the :class:`MIMEMessage` class now represents any kind of MIME message with main type :mimetype:`message`.  It takes an optional argument *_subtype* which is used to set the MIME subtype.  *_subtype* defaults to :mimetype:`rfc822`."
msgstr ""

msgid ":mod:`mimelib` provided some utility functions in its :mod:`address` and :mod:`date` modules.  All of these functions have been moved to the :mod:`email.utils` module."
msgstr ""

msgid "The ``MsgReader`` class/module has been removed.  Its functionality is most closely supported in the :func:`body_line_iterator` function in the :mod:`email.iterators` module."
msgstr ""

msgid "Delivery Status Notifications (DSN) are defined in :rfc:`1894`."
msgstr ""

msgid ":mod:`email`: Examples"
msgstr ""

msgid "Here are a few examples of how to use the :mod:`email` package to read, write, and send simple email messages, as well as more complex MIME messages."
msgstr ""

msgid "First, let's see how to create and send a simple text message:"
msgstr ""

msgid "# Import smtplib for the actual sending function import smtplib  # Import the email modules we'll need from email.mime.text import MIMEText  # Open a plain text file for reading.  For this example, assume that # the text file contains only ASCII characters. fp = open(textfile, 'rb') # Create a text/plain message msg = MIMEText(fp.read()) fp.close()  # me == the sender's email address # you == the recipient's email address msg['Subject'] = 'The contents of %s' % textfile msg['From'] = me msg['To'] = you  # Send the message via our own SMTP server, but don't include the # envelope header. s = smtplib.SMTP() s.sendmail(me, [you], msg.as_string()) s.quit()"
msgstr ""

msgid "And parsing RFC822 headers can easily be done by the parse(filename) or parsestr(message_as_string) methods of the Parser() class:"
msgstr ""

msgid "# Import the email modules we'll need from email.parser import Parser  #  If the e-mail headers are in a file, uncomment this line: #headers = Parser().parse(open(messagefile, 'r'))  #  Or for parsing headers in a string, use: headers = Parser().parsestr('From: <user@example.com>\\n'         'To: <someone_else@example.com>\\n'         'Subject: Test message\\n'         '\\n'         'Body would go here\\n')  #  Now the header items can be accessed as a dictionary: print 'To: %s' % headers['to'] print 'From: %s' % headers['from'] print 'Subject: %s' % headers['subject']"
msgstr ""

msgid "Here's an example of how to send a MIME message containing a bunch of family pictures that may be residing in a directory:"
msgstr ""

msgid "# Import smtplib for the actual sending function import smtplib  # Here are the email package modules we'll need from email.mime.image import MIMEImage from email.mime.multipart import MIMEMultipart  COMMASPACE = ', '  # Create the container (outer) email message. msg = MIMEMultipart() msg['Subject'] = 'Our family reunion' # me == the sender's email address # family = the list of all recipients' email addresses msg['From'] = me msg['To'] = COMMASPACE.join(family) msg.preamble = 'Our family reunion'  # Assume we know that the image files are all in PNG format for file in pngfiles:     # Open the files in binary mode.  Let the MIMEImage class automatically     # guess the specific image type.     fp = open(file, 'rb')     img = MIMEImage(fp.read())     fp.close()     msg.attach(img)  # Send the email via our own SMTP server. s = smtplib.SMTP() s.sendmail(me, family, msg.as_string()) s.quit()"
msgstr ""

msgid "Here's an example of how to send the entire contents of a directory as an email message: [1]_"
msgstr ""

msgid "#!/usr/bin/env python3  \"\"\"Send the contents of a directory as a MIME message.\"\"\"  import os import sys import smtplib # For guessing MIME type based on file name extension import mimetypes  from optparse import OptionParser  from email import encoders from email.message import Message from email.mime.audio import MIMEAudio from email.mime.base import MIMEBase from email.mime.image import MIMEImage from email.mime.multipart import MIMEMultipart from email.mime.text import MIMEText  COMMASPACE = ', '   def main():     parser = OptionParser(usage=\"\"\"\\ Send the contents of a directory as a MIME message.  Usage: %prog [options]  Unless the -o option is given, the email is sent by forwarding to your local SMTP server, which then does the normal delivery process.  Your local machine must be running an SMTP server. \"\"\")     parser.add_option('-d', '--directory',                       type='string', action='store',                       help=\"\"\"Mail the contents of the specified directory,                       otherwise use the current directory.  Only the regular                       files in the directory are sent, and we don't recurse to                       subdirectories.\"\"\")     parser.add_option('-o', '--output',                       type='string', action='store', metavar='FILE',                       help=\"\"\"Print the composed message to FILE instead of                       sending the message to the SMTP server.\"\"\")     parser.add_option('-s', '--sender',                       type='string', action='store', metavar='SENDER',                       help='The value of the From: header (required)')     parser.add_option('-r', '--recipient',                       type='string', action='append', metavar='RECIPIENT',                       default=[], dest='recipients',                       help='A To: header value (at least one required)')     opts, args = parser.parse_args()     if not opts.sender or not opts.recipients:         parser.print_help()         sys.exit(1)     directory = opts.directory     if not directory:         directory = '.'     # Create the enclosing (outer) message     outer = MIMEMultipart()     outer['Subject'] = 'Contents of directory %s' % os.path.abspath(directory)     outer['To'] = COMMASPACE.join(opts.recipients)     outer['From'] = opts.sender     outer.preamble = 'You will not see this in a MIME-aware mail reader.\\n'      for filename in os.listdir(directory):         path = os.path.join(directory, filename)         if not os.path.isfile(path):             continue         # Guess the content type based on the file's extension.  Encoding         # will be ignored, although we should check for simple things like         # gzip'd or compressed files.         ctype, encoding = mimetypes.guess_type(path)         if ctype is None or encoding is not None:             # No guess could be made, or the file is encoded (compressed), so             # use a generic bag-of-bits type.             ctype = 'application/octet-stream'         maintype, subtype = ctype.split('/', 1)         if maintype == 'text':             fp = open(path)             # Note: we should handle calculating the charset             msg = MIMEText(fp.read(), _subtype=subtype)             fp.close()         elif maintype == 'image':             fp = open(path, 'rb')             msg = MIMEImage(fp.read(), _subtype=subtype)             fp.close()         elif maintype == 'audio':             fp = open(path, 'rb')             msg = MIMEAudio(fp.read(), _subtype=subtype)             fp.close()         else:             fp = open(path, 'rb')             msg = MIMEBase(maintype, subtype)             msg.set_payload(fp.read())             fp.close()             # Encode the payload using Base64             encoders.encode_base64(msg)         # Set the filename parameter         msg.add_header('Content-Disposition', 'attachment', filename=filename)         outer.attach(msg)     # Now send or store the message     composed = outer.as_string()     if opts.output:         fp = open(opts.output, 'w')         fp.write(composed)         fp.close()     else:         s = smtplib.SMTP()         s.sendmail(opts.sender, opts.recipients, composed)         s.quit()   if __name__ == '__main__':     main()"
msgstr ""

msgid "Here's an example of how to unpack a MIME message like the one above, into a directory of files:"
msgstr ""

msgid "#!/usr/bin/env python3  \"\"\"Unpack a MIME message into a directory of files.\"\"\"  import os import sys import email import errno import mimetypes  from optparse import OptionParser   def main():     parser = OptionParser(usage=\"\"\"\\ Unpack a MIME message into a directory of files.  Usage: %prog [options] msgfile \"\"\")     parser.add_option('-d', '--directory',                       type='string', action='store',                       help=\"\"\"Unpack the MIME message into the named                       directory, which will be created if it doesn't already                       exist.\"\"\")     opts, args = parser.parse_args()     if not opts.directory:         parser.print_help()         sys.exit(1)      try:         msgfile = args[0]     except IndexError:         parser.print_help()         sys.exit(1)      try:         os.mkdir(opts.directory)     except OSError as e:         # Ignore directory exists error         if e.errno != errno.EEXIST:             raise      fp = open(msgfile)     msg = email.message_from_file(fp)     fp.close()      counter = 1     for part in msg.walk():         # multipart/* are just containers         if part.get_content_maintype() == 'multipart':             continue         # Applications should really sanitize the given filename so that an         # email message can't be used to overwrite important files         filename = part.get_filename()         if not filename:             ext = mimetypes.guess_extension(part.get_content_type())             if not ext:                 # Use a generic bag-of-bits extension                 ext = '.bin'             filename = 'part-%03d%s' % (counter, ext)         counter += 1         fp = open(os.path.join(opts.directory, filename), 'wb')         fp.write(part.get_payload(decode=True))         fp.close()   if __name__ == '__main__':     main()"
msgstr ""

msgid "Here's an example of how to create an HTML message with an alternative plain text version: [2]_"
msgstr ""

msgid "#!/usr/bin/env python3  import smtplib  from email.mime.multipart import MIMEMultipart from email.mime.text import MIMEText  # me == my email address # you == recipient's email address me = \"my@email.com\" you = \"your@email.com\"  # Create message container - the correct MIME type is multipart/alternative. msg = MIMEMultipart('alternative') msg['Subject'] = \"Link\" msg['From'] = me msg['To'] = you  # Create the body of the message (a plain-text and an HTML version). text = \"Hi!\\nHow are you?\\nHere is the link you wanted:\\nhttp://www.python.org\" html = \"\"\"\\ <html>   <head></head>   <body>     <p>Hi!<br>        How are you?<br>        Here is the <a href=\"http://www.python.org\">link</a> you wanted.     </p>   </body> </html> \"\"\"  # Record the MIME types of both parts - text/plain and text/html. part1 = MIMEText(text, 'plain') part2 = MIMEText(html, 'html')  # Attach parts into message container. # According to RFC 2046, the last part of a multipart message, in this case # the HTML message, is best and preferred. msg.attach(part1) msg.attach(part2)  # Send the message via local SMTP server. s = smtplib.SMTP('localhost') # sendmail function takes 3 arguments: sender's address, recipient's address # and message to send - here it is sent as one string. s.sendmail(me, you, msg.as_string()) s.quit()"
msgstr ""

msgid "Thanks to Matthew Dixon Cowles for the original inspiration and examples."
msgstr ""

msgid "Contributed by Martin Matejek."
msgstr ""

msgid ":mod:`email`: Representing character sets"
msgstr ""

msgid "This module provides a class :class:`Charset` for representing character sets and character set conversions in email messages, as well as a character set registry and several convenience methods for manipulating this registry. Instances of :class:`Charset` are used in several other modules within the :mod:`email` package."
msgstr ""

msgid "Import this class from the :mod:`email.charset` module."
msgstr ""

msgid "Map character sets to their email properties."
msgstr ""

msgid "This class provides information about the requirements imposed on email for a specific character set.  It also provides convenience routines for converting between character sets, given the availability of the applicable codecs.  Given a character set, it will do its best to provide information on how to use that character set in an email message in an RFC-compliant way."
msgstr ""

msgid "Certain character sets must be encoded with quoted-printable or base64 when used in email headers or bodies.  Certain character sets must be converted outright, and are not allowed in email."
msgstr ""

msgid "Optional *input_charset* is as described below; it is always coerced to lower case.  After being alias normalized it is also used as a lookup into the registry of character sets to find out the header encoding, body encoding, and output conversion codec to be used for the character set.  For example, if *input_charset* is ``iso-8859-1``, then headers and bodies will be encoded using quoted-printable and no output conversion codec is necessary.  If *input_charset* is ``euc-jp``, then headers will be encoded with base64, bodies will not be encoded, but output text will be converted from the ``euc-jp`` character set to the ``iso-2022-jp`` character set."
msgstr ""

msgid ":class:`Charset` instances have the following data attributes:"
msgstr ""

msgid "The initial character set specified.  Common aliases are converted to their *official* email names (e.g. ``latin_1`` is converted to ``iso-8859-1``).  Defaults to 7-bit ``us-ascii``."
msgstr ""

msgid "If the character set must be encoded before it can be used in an email header, this attribute will be set to ``Charset.QP`` (for quoted-printable), ``Charset.BASE64`` (for base64 encoding), or ``Charset.SHORTEST`` for the shortest of QP or BASE64 encoding. Otherwise, it will be ``None``."
msgstr ""

msgid "Same as *header_encoding*, but describes the encoding for the mail message's body, which indeed may be different than the header encoding. ``Charset.SHORTEST`` is not allowed for *body_encoding*."
msgstr ""

msgid "Some character sets must be converted before they can be used in email headers or bodies.  If the *input_charset* is one of them, this attribute will contain the name of the character set output will be converted to. Otherwise, it will be ``None``."
msgstr ""

msgid "The name of the Python codec used to convert the *input_charset* to Unicode.  If no conversion codec is necessary, this attribute will be ``None``."
msgstr ""

msgid "The name of the Python codec used to convert Unicode to the *output_charset*.  If no conversion codec is necessary, this attribute will have the same value as the *input_codec*."
msgstr ""

msgid ":class:`Charset` instances also have the following methods:"
msgstr ""

msgid "Return the content transfer encoding used for body encoding."
msgstr ""

msgid "This is either the string ``quoted-printable`` or ``base64`` depending on the encoding used, or it is a function, in which case you should call the function with a single argument, the Message object being encoded.  The function should then set the :mailheader:`Content-Transfer-Encoding` header itself to whatever is appropriate."
msgstr ""

msgid "Returns the string ``quoted-printable`` if *body_encoding* is ``QP``, returns the string ``base64`` if *body_encoding* is ``BASE64``, and returns the string ``7bit`` otherwise."
msgstr ""

msgid "Return the output character set."
msgstr ""

msgid "This is the *output_charset* attribute if that is not ``None``, otherwise it is *input_charset*."
msgstr ""

msgid "Return the length of the encoded header string, properly calculating for quoted-printable or base64 encoding."
msgstr ""

msgid "Header-encode the string *string*."
msgstr ""

msgid "The type of encoding (base64 or quoted-printable) will be based on the *header_encoding* attribute."
msgstr ""

msgid "Body-encode the string *string*."
msgstr ""

msgid "The type of encoding (base64 or quoted-printable) will be based on the *body_encoding* attribute."
msgstr ""

msgid "The :class:`Charset` class also provides a number of methods to support standard operations and built-in functions."
msgstr ""

msgid "Returns *input_charset* as a string coerced to lower case. :meth:`__repr__` is an alias for :meth:`__str__`."
msgstr ""

msgid "This method allows you to compare two :class:`Charset` instances for equality."
msgstr ""

msgid "This method allows you to compare two :class:`Charset` instances for inequality."
msgstr ""

msgid "The :mod:`email.charset` module also provides the following functions for adding new entries to the global character set, alias, and codec registries:"
msgstr ""

msgid "Add character properties to the global registry."
msgstr ""

msgid "*charset* is the input character set, and must be the canonical name of a character set."
msgstr ""

msgid "Optional *header_enc* and *body_enc* is either ``Charset.QP`` for quoted-printable, ``Charset.BASE64`` for base64 encoding, ``Charset.SHORTEST`` for the shortest of quoted-printable or base64 encoding, or ``None`` for no encoding.  ``SHORTEST`` is only valid for *header_enc*. The default is ``None`` for no encoding."
msgstr ""

msgid "Optional *output_charset* is the character set that the output should be in. Conversions will proceed from input charset, to Unicode, to the output charset when the method :meth:`Charset.convert` is called.  The default is to output in the same character set as the input."
msgstr ""

msgid "Both *input_charset* and *output_charset* must have Unicode codec entries in the module's character set-to-codec mapping; use :func:`add_codec` to add codecs the module does not know about.  See the :mod:`codecs` module's documentation for more information."
msgstr ""

msgid "The global character set registry is kept in the module global dictionary ``CHARSETS``."
msgstr ""

msgid "Add a character set alias.  *alias* is the alias name, e.g. ``latin-1``. *canonical* is the character set's canonical name, e.g. ``iso-8859-1``."
msgstr ""

msgid "The global charset alias registry is kept in the module global dictionary ``ALIASES``."
msgstr ""

msgid "Add a codec that map characters in the given character set to and from Unicode."
msgstr ""

msgid "*charset* is the canonical name of a character set. *codecname* is the name of a Python codec, as appropriate for the second argument to the :class:`str`'s :func:`decode` method"
msgstr ""

msgid ":mod:`email`: Encoders"
msgstr ""

msgid "When creating :class:`~email.message.Message` objects from scratch, you often need to encode the payloads for transport through compliant mail servers. This is especially true for :mimetype:`image/\\*` and :mimetype:`text/\\*` type messages containing binary data."
msgstr ""

msgid "The :mod:`email` package provides some convenient encodings in its :mod:`encoders` module.  These encoders are actually used by the :class:`~email.mime.audio.MIMEAudio` and :class:`~email.mime.image.MIMEImage` class constructors to provide default encodings.  All encoder functions take exactly one argument, the message object to encode.  They usually extract the payload, encode it, and reset the payload to this newly encoded value.  They should also set the :mailheader:`Content-Transfer-Encoding` header as appropriate."
msgstr ""

msgid "Here are the encoding functions provided:"
msgstr ""

msgid "Encodes the payload into quoted-printable form and sets the :mailheader:`Content-Transfer-Encoding` header to ``quoted-printable`` [#]_. This is a good encoding to use when most of your payload is normal printable data, but contains a few unprintable characters."
msgstr ""

msgid "Encodes the payload into base64 form and sets the :mailheader:`Content-Transfer-Encoding` header to ``base64``.  This is a good encoding to use when most of your payload is unprintable data since it is a more compact form than quoted-printable.  The drawback of base64 encoding is that it renders the text non-human readable."
msgstr ""

msgid "This doesn't actually modify the message's payload, but it does set the :mailheader:`Content-Transfer-Encoding` header to either ``7bit`` or ``8bit`` as appropriate, based on the payload data."
msgstr ""

msgid "This does nothing; it doesn't even set the :mailheader:`Content-Transfer-Encoding` header."
msgstr ""

msgid "Note that encoding with :meth:`encode_quopri` also encodes all tabs and space characters in the data."
msgstr ""

msgid ":mod:`email`: Exception and Defect classes"
msgstr ""

msgid "The following exception classes are defined in the :mod:`email.errors` module:"
msgstr ""

msgid "This is the base class for all exceptions that the :mod:`email` package can raise.  It is derived from the standard :exc:`Exception` class and defines no additional methods."
msgstr ""

msgid "This is the base class for exceptions thrown by the :class:`~email.parser.Parser` class.  It is derived from :exc:`MessageError`."
msgstr ""

msgid "Raised under some error conditions when parsing the :rfc:`2822` headers of a message, this class is derived from :exc:`MessageParseError`. It can be raised from the :meth:`Parser.parse` or :meth:`Parser.parsestr` methods."
msgstr ""

msgid "Situations where it can be raised include finding an envelope header after the first :rfc:`2822` header of the message, finding a continuation line before the first :rfc:`2822` header is found, or finding a line in the headers which is neither a header or a continuation line."
msgstr ""

msgid "Situations where it can be raised include not being able to find the starting or terminating boundary in a :mimetype:`multipart/\\*` message when strict parsing is used."
msgstr ""

msgid "Raised when a payload is added to a :class:`Message` object using :meth:`add_payload`, but the payload is already a scalar and the message's :mailheader:`Content-Type` main type is not either :mimetype:`multipart` or missing.  :exc:`MultipartConversionError` multiply inherits from :exc:`MessageError` and the built-in :exc:`TypeError`."
msgstr ""

msgid "Since :meth:`Message.add_payload` is deprecated, this exception is rarely raised in practice.  However the exception may also be raised if the :meth:`attach` method is called on an instance of a class derived from :class:`~email.mime.nonmultipart.MIMENonMultipart` (e.g. :class:`~email.mime.image.MIMEImage`)."
msgstr ""

msgid "Here's the list of the defects that the :class:`~email.mime.parser.FeedParser` can find while parsing messages.  Note that the defects are added to the message where the problem was found, so for example, if a message nested inside a :mimetype:`multipart/alternative` had a malformed header, that nested message object would have a defect, but the containing messages would not."
msgstr ""

msgid "All defect classes are subclassed from :class:`email.errors.MessageDefect`, but this class is *not* an exception!"
msgstr ""

msgid ":class:`NoBoundaryInMultipartDefect` -- A message claimed to be a multipart, but had no :mimetype:`boundary` parameter."
msgstr ""

msgid ":class:`StartBoundaryNotFoundDefect` -- The start boundary claimed in the :mailheader:`Content-Type` header was never found."
msgstr ""

msgid ":class:`FirstHeaderLineIsContinuationDefect` -- The message had a continuation line as its first header line."
msgstr ""

msgid ":class:`MisplacedEnvelopeHeaderDefect` - A \"Unix From\" header was found in the middle of a header block."
msgstr ""

msgid ":class:`MalformedHeaderDefect` -- A header was found that was missing a colon, or was otherwise malformed."
msgstr ""

msgid ":class:`MultipartInvariantViolationDefect` -- A message claimed to be a :mimetype:`multipart`, but no subparts were found.  Note that when a message has this defect, its :meth:`is_multipart` method may return false even though its content type claims to be :mimetype:`multipart`."
msgstr ""

msgid ":mod:`email`: Generating MIME documents"
msgstr ""

msgid "One of the most common tasks is to generate the flat text of the email message represented by a message object structure.  You will need to do this if you want to send your message via the :mod:`smtplib` module or the :mod:`nntplib` module, or print the message on the console.  Taking a message object structure and producing a flat text document is the job of the :class:`Generator` class."
msgstr ""

msgid "Again, as with the :mod:`email.parser` module, you aren't limited to the functionality of the bundled generator; you could write one from scratch yourself.  However the bundled generator knows how to generate most email in a standards-compliant way, should handle MIME and non-MIME email messages just fine, and is designed so that the transformation from flat text, to a message structure via the :class:`~email.parser.Parser` class, and back to flat text, is idempotent (the input is identical to the output).  On the other hand, using the Generator on a :class:`~email.message.Message` constructed by program may result in changes to the :class:`~email.message.Message` object as defaults are filled in."
msgstr ""

msgid "Here are the public methods of the :class:`Generator` class, imported from the :mod:`email.generator` module:"
msgstr ""

msgid "The constructor for the :class:`Generator` class takes a file-like object called *outfp* for an argument.  *outfp* must support the :meth:`write` method and be usable as the output file for the :func:`print` function."
msgstr ""

msgid "Optional *mangle_from_* is a flag that, when ``True``, puts a ``>`` character in front of any line in the body that starts exactly as ``From``, i.e. ``From`` followed by a space at the beginning of the line.  This is the only guaranteed portable way to avoid having such lines be mistaken for a Unix mailbox format envelope header separator (see `WHY THE CONTENT-LENGTH FORMAT IS BAD <http://www.jwz.org/doc/content-length.html>`_ for details).  *mangle_from_* defaults to ``True``, but you might want to set this to ``False`` if you are not writing Unix mailbox format files."
msgstr ""

msgid "Optional *maxheaderlen* specifies the longest length for a non-continued header. When a header line is longer than *maxheaderlen* (in characters, with tabs expanded to 8 spaces), the header will be split as defined in the :class:`~email.header.Header` class.  Set to zero to disable header wrapping. The default is 78, as recommended (but not required) by :rfc:`2822`."
msgstr ""

msgid "The other public :class:`Generator` methods are:"
msgstr ""

msgid "Print the textual representation of the message object structure rooted at *msg* to the output file specified when the :class:`Generator` instance was created.  Subparts are visited depth-first and the resulting text will be properly MIME encoded."
msgstr ""

msgid "Optional *unixfrom* is a flag that forces the printing of the envelope header delimiter before the first :rfc:`2822` header of the root message object.  If the root object has no envelope header, a standard one is crafted.  By default, this is set to ``False`` to inhibit the printing of the envelope delimiter."
msgstr ""

msgid "Note that for subparts, no envelope header is ever printed."
msgstr ""

msgid "Return an independent clone of this :class:`Generator` instance with the exact same options."
msgstr ""

msgid "Write the string *s* to the underlying file object, i.e. *outfp* passed to :class:`Generator`'s constructor.  This provides just enough file-like API for :class:`Generator` instances to be used in the :func:`print` function."
msgstr ""

msgid "As a convenience, see the methods :meth:`Message.as_string` and ``str(aMessage)``, a.k.a. :meth:`Message.__str__`, which simplify the generation of a formatted string representation of a message object.  For more detail, see :mod:`email.message`."
msgstr ""

msgid "The :mod:`email.generator` module also provides a derived class, called :class:`DecodedGenerator` which is like the :class:`Generator` base class, except that non-\\ :mimetype:`text` parts are substituted with a format string representing the part."
msgstr ""

msgid "This class, derived from :class:`Generator` walks through all the subparts of a message.  If the subpart is of main type :mimetype:`text`, then it prints the decoded payload of the subpart. Optional *_mangle_from_* and *maxheaderlen* are as with the :class:`Generator` base class."
msgstr ""

msgid "If the subpart is not of main type :mimetype:`text`, optional *fmt* is a format string that is used instead of the message payload. *fmt* is expanded with the following keywords, ``%(keyword)s`` format:"
msgstr ""

msgid "``type`` -- Full MIME type of the non-\\ :mimetype:`text` part"
msgstr ""

msgid "``maintype`` -- Main MIME type of the non-\\ :mimetype:`text` part"
msgstr ""

msgid "``subtype`` -- Sub-MIME type of the non-\\ :mimetype:`text` part"
msgstr ""

msgid "``filename`` -- Filename of the non-\\ :mimetype:`text` part"
msgstr ""

msgid "``description`` -- Description associated with the non-\\ :mimetype:`text` part"
msgstr ""

msgid "``encoding`` -- Content transfer encoding of the non-\\ :mimetype:`text` part"
msgstr ""

msgid "The default value for *fmt* is ``None``, meaning ::"
msgstr ""

msgid "[Non-text (%(type)s) part of message omitted, filename %(filename)s]"
msgstr ""

msgid ":mod:`email`: Internationalized headers"
msgstr ""

msgid ":rfc:`2822` is the base standard that describes the format of email messages. It derives from the older :rfc:`822` standard which came into widespread use at a time when most email was composed of ASCII characters only.  :rfc:`2822` is a specification written assuming email contains only 7-bit ASCII characters."
msgstr ""

msgid "Of course, as email has been deployed worldwide, it has become internationalized, such that language specific character sets can now be used in email messages.  The base standard still requires email messages to be transferred using only 7-bit ASCII characters, so a slew of RFCs have been written describing how to encode email containing non-ASCII characters into :rfc:`2822`\\ -compliant format. These RFCs include :rfc:`2045`, :rfc:`2046`, :rfc:`2047`, and :rfc:`2231`. The :mod:`email` package supports these standards in its :mod:`email.header` and :mod:`email.charset` modules."
msgstr ""

msgid "If you want to include non-ASCII characters in your email headers, say in the :mailheader:`Subject` or :mailheader:`To` fields, you should use the :class:`Header` class and assign the field in the :class:`~email.message.Message` object to an instance of :class:`Header` instead of using a string for the header value.  Import the :class:`Header` class from the :mod:`email.header` module. For example::"
msgstr ""

msgid ">>> from email.message import Message >>> from email.header import Header >>> msg = Message() >>> h = Header('p\\xf6stal', 'iso-8859-1') >>> msg['Subject'] = h >>> print(msg.as_string()) Subject: =?iso-8859-1?q?p=F6stal?="
msgstr ""

msgid "Notice here how we wanted the :mailheader:`Subject` field to contain a non-ASCII character?  We did this by creating a :class:`Header` instance and passing in the character set that the byte string was encoded in.  When the subsequent :class:`~email.message.Message` instance was flattened, the :mailheader:`Subject` field was properly :rfc:`2047` encoded.  MIME-aware mail readers would show this header using the embedded ISO-8859-1 character."
msgstr ""

msgid "Here is the :class:`Header` class description:"
msgstr ""

msgid "Create a MIME-compliant header that can contain strings in different character sets."
msgstr ""

msgid "Optional *s* is the initial header value.  If ``None`` (the default), the initial header value is not set.  You can later append to the header with :meth:`append` method calls.  *s* may be an instance of :class:`bytes` or :class:`str`, but see the :meth:`append` documentation for semantics."
msgstr ""

msgid "Optional *charset* serves two purposes: it has the same meaning as the *charset* argument to the :meth:`append` method.  It also sets the default character set for all subsequent :meth:`append` calls that omit the *charset* argument.  If *charset* is not provided in the constructor (the default), the ``us-ascii`` character set is used both as *s*'s initial charset and as the default for subsequent :meth:`append` calls."
msgstr ""

msgid "The maximum line length can be specified explicit via *maxlinelen*.  For splitting the first line to a shorter value (to account for the field header which isn't included in *s*, e.g. :mailheader:`Subject`) pass in the name of the field in *header_name*.  The default *maxlinelen* is 76, and the default value for *header_name* is ``None``, meaning it is not taken into account for the first line of a long, split header."
msgstr ""

msgid "Optional *continuation_ws* must be :rfc:`2822`\\ -compliant folding whitespace, and is usually either a space or a hard tab character.  This character will be prepended to continuation lines.  *continuation_ws* defaults to a single space character."
msgstr ""

msgid "Optional *errors* is passed straight through to the :meth:`append` method."
msgstr ""

msgid "Append the string *s* to the MIME header."
msgstr ""

msgid "Optional *charset*, if given, should be a :class:`~email.charset.Charset` instance (see :mod:`email.charset`) or the name of a character set, which will be converted to a :class:`~email.charset.Charset` instance.  A value of ``None`` (the default) means that the *charset* given in the constructor is used."
msgstr ""

msgid "*s* may be an instance of :class:`bytes` or :class:`str`.  If it is an instance of :class:`bytes`, then *charset* is the encoding of that byte string, and a :exc:`UnicodeError` will be raised if the string cannot be decoded with that character set."
msgstr ""

msgid "If *s* is an instance of :class:`str`, then *charset* is a hint specifying the character set of the characters in the string.  In this case, when producing an :rfc:`2822`\\ -compliant header using :rfc:`2047` rules, the Unicode string will be encoded using the following charsets in order: ``us-ascii``, the *charset* hint, ``utf-8``.  The first character set to not provoke a :exc:`UnicodeError` is used."
msgstr ""

msgid "Optional *errors* is passed through to any :func:`encode` or :func:`ustr.encode` call, and defaults to \"strict\"."
msgstr ""

msgid "Encode a message header into an RFC-compliant format, possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings.  Optional *splitchars* is a string containing characters to split long ASCII lines on, in rough support of :rfc:`2822`'s *highest level syntactic breaks*.  This doesn't affect :rfc:`2047` encoded lines."
msgstr ""

msgid "*maxlinelen*, if given, overrides the instance's value for the maximum line length."
msgstr ""

msgid "The :class:`Header` class also provides a number of methods to support standard operators and built-in functions."
msgstr ""

msgid "A synonym for :meth:`Header.encode`.  Useful for ``str(aHeader)``."
msgstr ""

msgid "A helper for :class:`str`'s :func:`encode` method.  Returns the header as a Unicode string."
msgstr ""

msgid "This method allows you to compare two :class:`Header` instances for equality."
msgstr ""

msgid "This method allows you to compare two :class:`Header` instances for inequality."
msgstr ""

msgid "The :mod:`email.header` module also provides the following convenient functions."
msgstr ""

msgid "Decode a message header value without converting the character set. The header value is in *header*."
msgstr ""

msgid "This function returns a list of ``(decoded_string, charset)`` pairs containing each of the decoded parts of the header.  *charset* is ``None`` for non-encoded parts of the header, otherwise a lower case string containing the name of the character set specified in the encoded string."
msgstr ""

msgid "Here's an example::"
msgstr ""

msgid ">>> from email.header import decode_header >>> decode_header('=?iso-8859-1?q?p=F6stal?=') [('p\\xf6stal', 'iso-8859-1')]"
msgstr ""

msgid "Create a :class:`Header` instance from a sequence of pairs as returned by :func:`decode_header`."
msgstr ""

msgid ":func:`decode_header` takes a header value string and returns a sequence of pairs of the format ``(decoded_string, charset)`` where *charset* is the name of the character set."
msgstr ""

msgid "This function takes one of those sequence of pairs and returns a :class:`Header` instance.  Optional *maxlinelen*, *header_name*, and *continuation_ws* are as in the :class:`Header` constructor."
msgstr ""

msgid ":mod:`email`: Iterators"
msgstr ""

msgid "Iterating over a message object tree is fairly easy with the :meth:`Message.walk` method.  The :mod:`email.iterators` module provides some useful higher level iterations over message object trees."
msgstr ""

msgid "This iterates over all the payloads in all the subparts of *msg*, returning the string payloads line-by-line.  It skips over all the subpart headers, and it skips over any subpart with a payload that isn't a Python string.  This is somewhat equivalent to reading the flat text representation of the message from a file using :meth:`readline`, skipping over all the intervening headers."
msgstr ""

msgid "Optional *decode* is passed through to :meth:`Message.get_payload`."
msgstr ""

msgid "This iterates over all the subparts of *msg*, returning only those subparts that match the MIME type specified by *maintype* and *subtype*."
msgstr ""

msgid "Note that *subtype* is optional; if omitted, then subpart MIME type matching is done only with the main type.  *maintype* is optional too; it defaults to :mimetype:`text`."
msgstr ""

msgid "Thus, by default :func:`typed_subpart_iterator` returns each subpart that has a MIME type of :mimetype:`text/\\*`."
msgstr ""

msgid "The following function has been added as a useful debugging tool.  It should *not* be considered part of the supported public interface for the package."
msgstr ""

msgid "Prints an indented representation of the content types of the message object structure.  For example::"
msgstr ""

msgid ">>> msg = email.message_from_file(somefile) >>> _structure(msg) multipart/mixed     text/plain     text/plain     multipart/digest         message/rfc822             text/plain         message/rfc822             text/plain         message/rfc822             text/plain         message/rfc822             text/plain         message/rfc822             text/plain     text/plain"
msgstr ""

msgid "Optional *fp* is a file-like object to print the output to.  It must be suitable for Python's :func:`print` function.  *level* is used internally. *include_default*, if true, prints the default type as well."
msgstr ""

msgid ":mod:`email`: Representing an email message"
msgstr ""

msgid "The central class in the :mod:`email` package is the :class:`Message` class, imported from the :mod:`email.message` module.  It is the base class for the :mod:`email` object model.  :class:`Message` provides the core functionality for setting and querying header fields, and for accessing message bodies."
msgstr ""

msgid "Conceptually, a :class:`Message` object consists of *headers* and *payloads*. Headers are :rfc:`2822` style field names and values where the field name and value are separated by a colon.  The colon is not part of either the field name or the field value."
msgstr ""

msgid "Headers are stored and returned in case-preserving form but are matched case-insensitively.  There may also be a single envelope header, also known as the *Unix-From* header or the ``From_`` header.  The payload is either a string in the case of simple message objects or a list of :class:`Message` objects for MIME container documents (e.g. :mimetype:`multipart/\\*` and :mimetype:`message/rfc822`)."
msgstr ""

msgid ":class:`Message` objects provide a mapping style interface for accessing the message headers, and an explicit interface for accessing both the headers and the payload.  It provides convenience methods for generating a flat text representation of the message object tree, for accessing commonly used header parameters, and for recursively walking over the object tree."
msgstr ""

msgid "Here are the methods of the :class:`Message` class:"
msgstr ""

msgid "The constructor takes no arguments."
msgstr ""

msgid "Return the entire message flattened as a string.  When optional *unixfrom* is ``True``, the envelope header is included in the returned string. *unixfrom* defaults to ``False``.  Flattening the message may trigger changes to the :class:`Message` if defaults need to be filled in to complete the transformation to a string (for example, MIME boundaries may be generated or modified)."
msgstr ""

msgid "Note that this method is provided as a convenience and may not always format the message the way you want.  For example, by default it mangles lines that begin with ``From``.  For more flexibility, instantiate a :class:`~email.generator.Generator` instance and use its :meth:`flatten` method directly.  For example::"
msgstr ""

msgid "from io import StringIO from email.generator import Generator fp = StringIO() g = Generator(fp, mangle_from_=False, maxheaderlen=60) g.flatten(msg) text = fp.getvalue()"
msgstr ""

msgid "Equivalent to ``as_string(unixfrom=True)``."
msgstr ""

msgid "Return ``True`` if the message's payload is a list of sub-\\ :class:`Message` objects, otherwise return ``False``.  When :meth:`is_multipart` returns False, the payload should be a string object."
msgstr ""

msgid "Set the message's envelope header to *unixfrom*, which should be a string."
msgstr ""

msgid "Return the message's envelope header.  Defaults to ``None`` if the envelope header was never set."
msgstr ""

msgid "Add the given *payload* to the current payload, which must be ``None`` or a list of :class:`Message` objects before the call. After the call, the payload will always be a list of :class:`Message` objects.  If you want to set the payload to a scalar object (e.g. a string), use :meth:`set_payload` instead."
msgstr ""

msgid "Return the current payload, which will be a list of :class:`Message` objects when :meth:`is_multipart` is ``True``, or a string when :meth:`is_multipart` is ``False``.  If the payload is a list and you mutate the list object, you modify the message's payload in place."
msgstr ""

msgid "With optional argument *i*, :meth:`get_payload` will return the *i*-th element of the payload, counting from zero, if :meth:`is_multipart` is ``True``.  An :exc:`IndexError` will be raised if *i* is less than 0 or greater than or equal to the number of items in the payload.  If the payload is a string (i.e.  :meth:`is_multipart` is ``False``) and *i* is given, a :exc:`TypeError` is raised."
msgstr ""

msgid "Optional *decode* is a flag indicating whether the payload should be decoded or not, according to the :mailheader:`Content-Transfer-Encoding` header. When ``True`` and the message is not a multipart, the payload will be decoded if this header's value is ``quoted-printable`` or ``base64``. If some other encoding is used, or :mailheader:`Content-Transfer-Encoding` header is missing, or if the payload has bogus base64 data, the payload is returned as-is (undecoded).  If the message is a multipart and the *decode* flag is ``True``, then ``None`` is returned.  The default for *decode* is ``False``."
msgstr ""

msgid "Set the entire message object's payload to *payload*.  It is the client's responsibility to ensure the payload invariants.  Optional *charset* sets the message's default character set; see :meth:`set_charset` for details."
msgstr ""

msgid "Set the character set of the payload to *charset*, which can either be a :class:`~email.charset.Charset` instance (see :mod:`email.charset`), a string naming a character set, or ``None``.  If it is a string, it will be converted to a :class:`~email.charset.Charset` instance.  If *charset* is ``None``, the ``charset`` parameter will be removed from the :mailheader:`Content-Type` header. Anything else will generate a :exc:`TypeError`."
msgstr ""

msgid "The message will be assumed to be of type :mimetype:`text/\\*` encoded with *charset.input_charset*.  It will be converted to *charset.output_charset* and encoded properly, if needed, when generating the plain text representation of the message.  MIME headers (:mailheader:`MIME-Version`, :mailheader:`Content-Type`, :mailheader:`Content-Transfer-Encoding`) will be added as needed."
msgstr ""

msgid "Return the :class:`~email.charset.Charset` instance associated with the message's payload."
msgstr ""

msgid "The following methods implement a mapping-like interface for accessing the message's :rfc:`2822` headers.  Note that there are some semantic differences between these methods and a normal mapping (i.e. dictionary) interface.  For example, in a dictionary there are no duplicate keys, but here there may be duplicate message headers.  Also, in dictionaries there is no guaranteed order to the keys returned by :meth:`keys`, but in a :class:`Message` object, headers are always returned in the order they appeared in the original message, or were added to the message later.  Any header deleted and then re-added are always appended to the end of the header list."
msgstr ""

msgid "These semantic differences are intentional and are biased toward maximal convenience."
msgstr ""

msgid "Note that in all cases, any envelope header present in the message is not included in the mapping interface."
msgstr ""

msgid "Return the total number of headers, including duplicates."
msgstr ""

msgid "Return true if the message object has a field named *name*. Matching is done case-insensitively and *name* should not include the trailing colon. Used for the ``in`` operator, e.g.::"
msgstr ""

msgid "if 'message-id' in myMessage:    print('Message-ID:', myMessage['message-id'])"
msgstr ""

msgid "Return the value of the named header field.  *name* should not include the colon field separator.  If the header is missing, ``None`` is returned; a :exc:`KeyError` is never raised."
msgstr ""

msgid "Note that if the named field appears more than once in the message's headers, exactly which of those field values will be returned is undefined.  Use the :meth:`get_all` method to get the values of all the extant named headers."
msgstr ""

msgid "Add a header to the message with field name *name* and value *val*.  The field is appended to the end of the message's existing fields."
msgstr ""

msgid "Note that this does *not* overwrite or delete any existing header with the same name.  If you want to ensure that the new header is the only one present in the message with field name *name*, delete the field first, e.g.::"
msgstr ""

msgid "del msg['subject'] msg['subject'] = 'Python roolz!'"
msgstr ""

msgid "Delete all occurrences of the field with name *name* from the message's headers.  No exception is raised if the named field isn't present in the headers."
msgstr ""

msgid "Return true if the message contains a header field named *name*, otherwise return false."
msgstr ""

msgid "Return a list of all the message's header field names."
msgstr ""

msgid "Return a list of all the message's field values."
msgstr ""

msgid "Return a list of 2-tuples containing all the message's field headers and values."
msgstr ""

msgid "Return the value of the named header field.  This is identical to :meth:`__getitem__` except that optional *failobj* is returned if the named header is missing (defaults to ``None``)."
msgstr ""

msgid "Here are some additional useful methods:"
msgstr ""

msgid "Return a list of all the values for the field named *name*. If there are no such named headers in the message, *failobj* is returned (defaults to ``None``)."
msgstr ""

msgid "Extended header setting.  This method is similar to :meth:`__setitem__` except that additional header parameters can be provided as keyword arguments.  *_name* is the header field to add and *_value* is the *primary* value for the header."
msgstr ""

msgid "For each item in the keyword argument dictionary *_params*, the key is taken as the parameter name, with underscores converted to dashes (since dashes are illegal in Python identifiers).  Normally, the parameter will be added as ``key=\"value\"`` unless the value is ``None``, in which case only the key will be added."
msgstr ""

msgid "msg.add_header('Content-Disposition', 'attachment', filename='bud.gif')"
msgstr ""

msgid "This will add a header that looks like ::"
msgstr ""

msgid "Content-Disposition: attachment; filename=\"bud.gif\""
msgstr ""

msgid "Replace a header.  Replace the first header found in the message that matches *_name*, retaining header order and field name case.  If no matching header was found, a :exc:`KeyError` is raised."
msgstr ""

msgid "Return the message's content type.  The returned string is coerced to lower case of the form :mimetype:`maintype/subtype`.  If there was no :mailheader:`Content-Type` header in the message the default type as given by :meth:`get_default_type` will be returned.  Since according to :rfc:`2045`, messages always have a default type, :meth:`get_content_type` will always return a value."
msgstr ""

msgid ":rfc:`2045` defines a message's default type to be :mimetype:`text/plain` unless it appears inside a :mimetype:`multipart/digest` container, in which case it would be :mimetype:`message/rfc822`.  If the :mailheader:`Content-Type` header has an invalid type specification, :rfc:`2045` mandates that the default type be :mimetype:`text/plain`."
msgstr ""

msgid "Return the message's main content type.  This is the :mimetype:`maintype` part of the string returned by :meth:`get_content_type`."
msgstr ""

msgid "Return the message's sub-content type.  This is the :mimetype:`subtype` part of the string returned by :meth:`get_content_type`."
msgstr ""

msgid "Return the default content type.  Most messages have a default content type of :mimetype:`text/plain`, except for messages that are subparts of :mimetype:`multipart/digest` containers.  Such subparts have a default content type of :mimetype:`message/rfc822`."
msgstr ""

msgid "Set the default content type.  *ctype* should either be :mimetype:`text/plain` or :mimetype:`message/rfc822`, although this is not enforced.  The default content type is not stored in the :mailheader:`Content-Type` header."
msgstr ""

msgid "Return the message's :mailheader:`Content-Type` parameters, as a list. The elements of the returned list are 2-tuples of key/value pairs, as split on the ``'='`` sign.  The left hand side of the ``'='`` is the key, while the right hand side is the value.  If there is no ``'='`` sign in the parameter the value is the empty string, otherwise the value is as described in :meth:`get_param` and is unquoted if optional *unquote* is ``True`` (the default)."
msgstr ""

msgid "Optional *failobj* is the object to return if there is no :mailheader:`Content-Type` header.  Optional *header* is the header to search instead of :mailheader:`Content-Type`."
msgstr ""

msgid "Return the value of the :mailheader:`Content-Type` header's parameter *param* as a string.  If the message has no :mailheader:`Content-Type` header or if there is no such parameter, then *failobj* is returned (defaults to ``None``)."
msgstr ""

msgid "Optional *header* if given, specifies the message header to use instead of :mailheader:`Content-Type`."
msgstr ""

msgid "Parameter keys are always compared case insensitively.  The return value can either be a string, or a 3-tuple if the parameter was :rfc:`2231` encoded.  When it's a 3-tuple, the elements of the value are of the form ``(CHARSET, LANGUAGE, VALUE)``.  Note that both ``CHARSET`` and ``LANGUAGE`` can be ``None``, in which case you should consider ``VALUE`` to be encoded in the ``us-ascii`` charset.  You can usually ignore ``LANGUAGE``."
msgstr ""

msgid "If your application doesn't care whether the parameter was encoded as in :rfc:`2231`, you can collapse the parameter value by calling :func:`email.utils.collapse_rfc2231_value`, passing in the return value from :meth:`get_param`.  This will return a suitably decoded Unicode string whn the value is a tuple, or the original string unquoted if it isn't.  For example::"
msgstr ""

msgid "rawparam = msg.get_param('foo') param = email.utils.collapse_rfc2231_value(rawparam)"
msgstr ""

msgid "In any case, the parameter value (either the returned string, or the ``VALUE`` item in the 3-tuple) is always unquoted, unless *unquote* is set to ``False``."
msgstr ""

msgid "Set a parameter in the :mailheader:`Content-Type` header.  If the parameter already exists in the header, its value will be replaced with *value*.  If the :mailheader:`Content-Type` header as not yet been defined for this message, it will be set to :mimetype:`text/plain` and the new parameter value will be appended as per :rfc:`2045`."
msgstr ""

msgid "Optional *header* specifies an alternative header to :mailheader:`Content-Type`, and all parameters will be quoted as necessary unless optional *requote* is ``False`` (the default is ``True``)."
msgstr ""

msgid "If optional *charset* is specified, the parameter will be encoded according to :rfc:`2231`. Optional *language* specifies the RFC 2231 language, defaulting to the empty string.  Both *charset* and *language* should be strings."
msgstr ""

msgid "Remove the given parameter completely from the :mailheader:`Content-Type` header.  The header will be re-written in place without the parameter or its value.  All values will be quoted as necessary unless *requote* is ``False`` (the default is ``True``).  Optional *header* specifies an alternative to :mailheader:`Content-Type`."
msgstr ""

msgid "Set the main type and subtype for the :mailheader:`Content-Type` header. *type* must be a string in the form :mimetype:`maintype/subtype`, otherwise a :exc:`ValueError` is raised."
msgstr ""

msgid "This method replaces the :mailheader:`Content-Type` header, keeping all the parameters in place.  If *requote* is ``False``, this leaves the existing header's quoting as is, otherwise the parameters will be quoted (the default)."
msgstr ""

msgid "An alternative header can be specified in the *header* argument. When the :mailheader:`Content-Type` header is set a :mailheader:`MIME-Version` header is also added."
msgstr ""

msgid "Return the value of the ``filename`` parameter of the :mailheader:`Content-Disposition` header of the message.  If the header does not have a ``filename`` parameter, this method falls back to looking for the ``name`` parameter on the :mailheader:`Content-Type` header.  If neither is found, or the header is missing, then *failobj* is returned. The returned string will always be unquoted as per :func:`email.utils.unquote`."
msgstr ""

msgid "Return the value of the ``boundary`` parameter of the :mailheader:`Content-Type` header of the message, or *failobj* if either the header is missing, or has no ``boundary`` parameter.  The returned string will always be unquoted as per :func:`email.utils.unquote`."
msgstr ""

msgid "Set the ``boundary`` parameter of the :mailheader:`Content-Type` header to *boundary*.  :meth:`set_boundary` will always quote *boundary* if necessary.  A :exc:`HeaderParseError` is raised if the message object has no :mailheader:`Content-Type` header."
msgstr ""

msgid "Note that using this method is subtly different than deleting the old :mailheader:`Content-Type` header and adding a new one with the new boundary via :meth:`add_header`, because :meth:`set_boundary` preserves the order of the :mailheader:`Content-Type` header in the list of headers. However, it does *not* preserve any continuation lines which may have been present in the original :mailheader:`Content-Type` header."
msgstr ""

msgid "Return the ``charset`` parameter of the :mailheader:`Content-Type` header, coerced to lower case.  If there is no :mailheader:`Content-Type` header, or if that header has no ``charset`` parameter, *failobj* is returned."
msgstr ""

msgid "Note that this method differs from :meth:`get_charset` which returns the :class:`~email.charset.Charset` instance for the default encoding of the message body."
msgstr ""

msgid "Return a list containing the character set names in the message.  If the message is a :mimetype:`multipart`, then the list will contain one element for each subpart in the payload, otherwise, it will be a list of length 1."
msgstr ""

msgid "Each item in the list will be a string which is the value of the ``charset`` parameter in the :mailheader:`Content-Type` header for the represented subpart.  However, if the subpart has no :mailheader:`Content-Type` header, no ``charset`` parameter, or is not of the :mimetype:`text` main MIME type, then that item in the returned list will be *failobj*."
msgstr ""

msgid "The :meth:`walk` method is an all-purpose generator which can be used to iterate over all the parts and subparts of a message object tree, in depth-first traversal order.  You will typically use :meth:`walk` as the iterator in a ``for`` loop; each iteration returns the next subpart."
msgstr ""

msgid "Here's an example that prints the MIME type of every part of a multipart message structure::"
msgstr ""

msgid ">>> for part in msg.walk(): ...     print(part.get_content_type()) multipart/report text/plain message/delivery-status text/plain text/plain message/rfc822"
msgstr ""

msgid ":class:`Message` objects can also optionally contain two instance attributes, which can be used when generating the plain text of a MIME message."
msgstr ""

msgid "The format of a MIME document allows for some text between the blank line following the headers, and the first multipart boundary string. Normally, this text is never visible in a MIME-aware mail reader because it falls outside the standard MIME armor.  However, when viewing the raw text of the message, or when viewing the message in a non-MIME aware reader, this text can become visible."
msgstr ""

msgid "The *preamble* attribute contains this leading extra-armor text for MIME documents.  When the :class:`~email.parser.Parser` discovers some text after the headers but before the first boundary string, it assigns this text to the message's *preamble* attribute.  When the :class:`~email.generator.Generator` is writing out the plain text representation of a MIME message, and it finds the message has a *preamble* attribute, it will write this text in the area between the headers and the first boundary.  See :mod:`email.parser` and :mod:`email.generator` for details."
msgstr ""

msgid "Note that if the message object has no preamble, the *preamble* attribute will be ``None``."
msgstr ""

msgid "The *epilogue* attribute acts the same way as the *preamble* attribute, except that it contains text that appears between the last boundary and the end of the message."
msgstr ""

msgid "You do not need to set the epilogue to the empty string in order for the :class:`Generator` to print a newline at the end of the file."
msgstr ""

msgid "The *defects* attribute contains a list of all the problems found when parsing this message.  See :mod:`email.errors` for a detailed description of the possible parsing defects."
msgstr ""

msgid ":mod:`email`: Creating email and MIME objects from scratch"
msgstr ""

msgid "Ordinarily, you get a message object structure by passing a file or some text to a parser, which parses the text and returns the root message object.  However you can also build a complete message structure from scratch, or even individual :class:`~email.message.Message` objects by hand.  In fact, you can also take an existing structure and add new :class:`~email.message.Message` objects, move them around, etc.  This makes a very convenient interface for slicing-and-dicing MIME messages."
msgstr ""

msgid "You can create a new object structure by creating :class:`~email.message.Message` instances, adding attachments and all the appropriate headers manually.  For MIME messages though, the :mod:`email` package provides some convenient subclasses to make things easier."
msgstr ""

msgid "Here are the classes:"
msgstr ""

msgid "Module: :mod:`email.mime.base`"
msgstr ""

msgid "This is the base class for all the MIME-specific subclasses of :class:`~email.message.Message`.  Ordinarily you won't create instances specifically of :class:`MIMEBase`, although you could.  :class:`MIMEBase` is provided primarily as a convenient base class for more specific MIME-aware subclasses."
msgstr ""

msgid "*_maintype* is the :mailheader:`Content-Type` major type (e.g. :mimetype:`text` or :mimetype:`image`), and *_subtype* is the :mailheader:`Content-Type` minor type  (e.g. :mimetype:`plain` or :mimetype:`gif`).  *_params* is a parameter key/value dictionary and is passed directly to :meth:`Message.add_header`."
msgstr ""

msgid "The :class:`MIMEBase` class always adds a :mailheader:`Content-Type` header (based on *_maintype*, *_subtype*, and *_params*), and a :mailheader:`MIME-Version` header (always set to ``1.0``)."
msgstr ""

msgid "Module: :mod:`email.mime.nonmultipart`"
msgstr ""

msgid "A subclass of :class:`~email.mime.base.MIMEBase`, this is an intermediate base class for MIME messages that are not :mimetype:`multipart`.  The primary purpose of this class is to prevent the use of the :meth:`attach` method, which only makes sense for :mimetype:`multipart` messages.  If :meth:`attach` is called, a :exc:`~email.errors.MultipartConversionError` exception is raised."
msgstr ""

msgid "Module: :mod:`email.mime.multipart`"
msgstr ""

msgid "A subclass of :class:`~email.mime.base.MIMEBase`, this is an intermediate base class for MIME messages that are :mimetype:`multipart`.  Optional *_subtype* defaults to :mimetype:`mixed`, but can be used to specify the subtype of the message.  A :mailheader:`Content-Type` header of :mimetype:`multipart/_subtype` will be added to the message object.  A :mailheader:`MIME-Version` header will also be added."
msgstr ""

msgid "Optional *boundary* is the multipart boundary string.  When ``None`` (the default), the boundary is calculated when needed (for example, when the message is serialized)."
msgstr ""

msgid "*_subparts* is a sequence of initial subparts for the payload.  It must be possible to convert this sequence to a list.  You can always attach new subparts to the message by using the :meth:`Message.attach` method."
msgstr ""

msgid "Additional parameters for the :mailheader:`Content-Type` header are taken from the keyword arguments, or passed into the *_params* argument, which is a keyword dictionary."
msgstr ""

msgid "Module: :mod:`email.mime.application`"
msgstr ""

msgid "A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the :class:`MIMEApplication` class is used to represent MIME message objects of major type :mimetype:`application`.  *_data* is a string containing the raw byte data.  Optional *_subtype* specifies the MIME subtype and defaults to :mimetype:`octet-stream`."
msgstr ""

msgid "Optional *_encoder* is a callable (i.e. function) which will perform the actual encoding of the data for transport.  This callable takes one argument, which is the :class:`MIMEApplication` instance. It should use :meth:`get_payload` and :meth:`set_payload` to change the payload to encoded form.  It should also add any :mailheader:`Content-Transfer-Encoding` or other headers to the message object as necessary.  The default encoding is base64.  See the :mod:`email.encoders` module for a list of the built-in encoders."
msgstr ""

msgid "*_params* are passed straight through to the base class constructor."
msgstr ""

msgid "Module: :mod:`email.mime.audio`"
msgstr ""

msgid "A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the :class:`MIMEAudio` class is used to create MIME message objects of major type :mimetype:`audio`. *_audiodata* is a string containing the raw audio data.  If this data can be decoded by the standard Python module :mod:`sndhdr`, then the subtype will be automatically included in the :mailheader:`Content-Type` header. Otherwise you can explicitly specify the audio subtype via the *_subtype* parameter.  If the minor type could not be guessed and *_subtype* was not given, then :exc:`TypeError` is raised."
msgstr ""

msgid "Optional *_encoder* is a callable (i.e. function) which will perform the actual encoding of the audio data for transport.  This callable takes one argument, which is the :class:`MIMEAudio` instance. It should use :meth:`get_payload` and :meth:`set_payload` to change the payload to encoded form.  It should also add any :mailheader:`Content-Transfer-Encoding` or other headers to the message object as necessary.  The default encoding is base64.  See the :mod:`email.encoders` module for a list of the built-in encoders."
msgstr ""

msgid "Module: :mod:`email.mime.image`"
msgstr ""

msgid "A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the :class:`MIMEImage` class is used to create MIME message objects of major type :mimetype:`image`. *_imagedata* is a string containing the raw image data.  If this data can be decoded by the standard Python module :mod:`imghdr`, then the subtype will be automatically included in the :mailheader:`Content-Type` header. Otherwise you can explicitly specify the image subtype via the *_subtype* parameter.  If the minor type could not be guessed and *_subtype* was not given, then :exc:`TypeError` is raised."
msgstr ""

msgid "Optional *_encoder* is a callable (i.e. function) which will perform the actual encoding of the image data for transport.  This callable takes one argument, which is the :class:`MIMEImage` instance. It should use :meth:`get_payload` and :meth:`set_payload` to change the payload to encoded form.  It should also add any :mailheader:`Content-Transfer-Encoding` or other headers to the message object as necessary.  The default encoding is base64.  See the :mod:`email.encoders` module for a list of the built-in encoders."
msgstr ""

msgid "*_params* are passed straight through to the :class:`~email.mime.base.MIMEBase` constructor."
msgstr ""

msgid "Module: :mod:`email.mime.message`"
msgstr ""

msgid "A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the :class:`MIMEMessage` class is used to create MIME objects of main type :mimetype:`message`. *_msg* is used as the payload, and must be an instance of class :class:`~email.message.Message` (or a subclass thereof), otherwise a :exc:`TypeError` is raised."
msgstr ""

msgid "Optional *_subtype* sets the subtype of the message; it defaults to :mimetype:`rfc822`."
msgstr ""

msgid "Module: :mod:`email.mime.text`"
msgstr ""

msgid "A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the :class:`MIMEText` class is used to create MIME objects of major type :mimetype:`text`. *_text* is the string for the payload.  *_subtype* is the minor type and defaults to :mimetype:`plain`.  *_charset* is the character set of the text and is passed as a parameter to the :class:`~email.mime.nonmultipart.MIMENonMultipart` constructor; it defaults to ``us-ascii``.  No guessing or encoding is performed on the text data."
msgstr ""

msgid ":mod:`email`: Parsing email messages"
msgstr ""

msgid "Message object structures can be created in one of two ways: they can be created from whole cloth by instantiating :class:`~email.message.Message` objects and stringing them together via :meth:`attach` and :meth:`set_payload` calls, or they can be created by parsing a flat text representation of the email message."
msgstr ""

msgid "The :mod:`email` package provides a standard parser that understands most email document structures, including MIME documents.  You can pass the parser a string or a file object, and the parser will return to you the root :class:`~email.message.Message` instance of the object structure.  For simple, non-MIME messages the payload of this root object will likely be a string containing the text of the message.  For MIME messages, the root object will return ``True`` from its :meth:`is_multipart` method, and the subparts can be accessed via the :meth:`get_payload` and :meth:`walk` methods."
msgstr ""

msgid "There are actually two parser interfaces available for use, the classic :class:`Parser` API and the incremental :class:`FeedParser` API.  The classic :class:`Parser` API is fine if you have the entire text of the message in memory as a string, or if the entire message lives in a file on the file system. :class:`FeedParser` is more appropriate for when you're reading the message from a stream which might block waiting for more input (e.g. reading an email message from a socket).  The :class:`FeedParser` can consume and parse the message incrementally, and only returns the root object when you close the parser [#]_."
msgstr ""

msgid "Note that the parser can be extended in limited ways, and of course you can implement your own parser completely from scratch.  There is no magical connection between the :mod:`email` package's bundled parser and the :class:`~email.message.Message` class, so your custom parser can create message object trees any way it finds necessary."
msgstr ""

msgid "FeedParser API"
msgstr ""

msgid "The :class:`FeedParser`, imported from the :mod:`email.feedparser` module, provides an API that is conducive to incremental parsing of email messages, such as would be necessary when reading the text of an email message from a source that can block (e.g. a socket).  The :class:`FeedParser` can of course be used to parse an email message fully contained in a string or a file, but the classic :class:`Parser` API may be more convenient for such use cases.  The semantics and results of the two parser APIs are identical."
msgstr ""

msgid "The :class:`FeedParser`'s API is simple; you create an instance, feed it a bunch of text until there's no more to feed it, then close the parser to retrieve the root message object.  The :class:`FeedParser` is extremely accurate when parsing standards-compliant messages, and it does a very good job of parsing non-compliant messages, providing information about how a message was deemed broken.  It will populate a message object's *defects* attribute with a list of any problems it found in a message.  See the :mod:`email.errors` module for the list of defects that it can find."
msgstr ""

msgid "Here is the API for the :class:`FeedParser`:"
msgstr ""

msgid "Create a :class:`FeedParser` instance.  Optional *_factory* is a no-argument callable that will be called whenever a new message object is needed.  It defaults to the :class:`email.message.Message` class."
msgstr ""

msgid "Feed the :class:`FeedParser` some more data.  *data* should be a string containing one or more lines.  The lines can be partial and the :class:`FeedParser` will stitch such partial lines together properly.  The lines in the string can have any of the common three line endings, carriage return, newline, or carriage return and newline (they can even be mixed)."
msgstr ""

msgid "Closing a :class:`FeedParser` completes the parsing of all previously fed data, and returns the root message object.  It is undefined what happens if you feed more data to a closed :class:`FeedParser`."
msgstr ""

msgid "Parser class API"
msgstr ""

msgid "The :class:`Parser` class, imported from the :mod:`email.parser` module, provides an API that can be used to parse a message when the complete contents of the message are available in a string or file.  The :mod:`email.parser` module also provides a second class, called :class:`HeaderParser` which can be used if you're only interested in the headers of the message. :class:`HeaderParser` can be much faster in these situations, since it does not attempt to parse the message body, instead setting the payload to the raw body as a string. :class:`HeaderParser` has the same API as the :class:`Parser` class."
msgstr ""

msgid "The constructor for the :class:`Parser` class takes an optional argument *_class*.  This must be a callable factory (such as a function or a class), and it is used whenever a sub-message object needs to be created.  It defaults to :class:`~email.message.Message` (see :mod:`email.message`).  The factory will be called without arguments."
msgstr ""

msgid "The optional *strict* flag is ignored."
msgstr ""

msgid "The other public :class:`Parser` methods are:"
msgstr ""

msgid "Read all the data from the file-like object *fp*, parse the resulting text, and return the root message object.  *fp* must support both the :meth:`readline` and the :meth:`read` methods on file-like objects."
msgstr ""

msgid "The text contained in *fp* must be formatted as a block of :rfc:`2822` style headers and header continuation lines, optionally preceded by a envelope header.  The header block is terminated either by the end of the data or by a blank line.  Following the header block is the body of the message (which may contain MIME-encoded subparts)."
msgstr ""

msgid "Optional *headersonly* is as with the :meth:`parse` method."
msgstr ""

msgid "Similar to the :meth:`parse` method, except it takes a string object instead of a file-like object.  Calling this method on a string is exactly equivalent to wrapping *text* in a :class:`StringIO` instance first and calling :meth:`parse`."
msgstr ""

msgid "Optional *headersonly* is a flag specifying whether to stop parsing after reading the headers or not.  The default is ``False``, meaning it parses the entire contents of the file."
msgstr ""

msgid "Since creating a message object structure from a string or a file object is such a common task, two functions are provided as a convenience.  They are available in the top-level :mod:`email` package namespace."
msgstr ""

msgid "Return a message object structure from a string.  This is exactly equivalent to ``Parser().parsestr(s)``.  Optional *_class* and *strict* are interpreted as with the :class:`Parser` class constructor."
msgstr ""

msgid "Return a message object structure tree from an open file object.  This is exactly equivalent to ``Parser().parse(fp)``.  Optional *_class* and *strict* are interpreted as with the :class:`Parser` class constructor."
msgstr ""

msgid "Here's an example of how you might use this at an interactive Python prompt::"
msgstr ""

msgid ">>> import email >>> msg = email.message_from_string(myString)"
msgstr ""

msgid "Additional notes"
msgstr ""

msgid "Here are some notes on the parsing semantics:"
msgstr ""

msgid "Most non-\\ :mimetype:`multipart` type messages are parsed as a single message object with a string payload.  These objects will return ``False`` for :meth:`is_multipart`.  Their :meth:`get_payload` method will return a string object."
msgstr ""

msgid "All :mimetype:`multipart` type messages will be parsed as a container message object with a list of sub-message objects for their payload.  The outer container message will return ``True`` for :meth:`is_multipart` and their :meth:`get_payload` method will return the list of :class:`~email.message.Message` subparts."
msgstr ""

msgid "Most messages with a content type of :mimetype:`message/\\*` (e.g. :mimetype:`message/delivery-status` and :mimetype:`message/rfc822`) will also be parsed as container object containing a list payload of length 1.  Their :meth:`is_multipart` method will return ``True``.  The single element in the list payload will be a sub-message object."
msgstr ""

msgid "Some non-standards compliant messages may not be internally consistent about their :mimetype:`multipart`\\ -edness.  Such messages may have a :mailheader:`Content-Type` header of type :mimetype:`multipart`, but their :meth:`is_multipart` method may return ``False``.  If such messages were parsed with the :class:`FeedParser`, they will have an instance of the :class:`MultipartInvariantViolationDefect` class in their *defects* attribute list.  See :mod:`email.errors` for details."
msgstr ""

msgid "As of email package version 3.0, introduced in Python 2.4, the classic :class:`Parser` was re-implemented in terms of the :class:`FeedParser`, so the semantics and results are identical between the two parsers."
msgstr ""

msgid ":mod:`email`: Miscellaneous utilities"
msgstr ""

msgid "There are several useful utilities provided in the :mod:`email.utils` module:"
msgstr ""

msgid "Return a new string with backslashes in *str* replaced by two backslashes, and double quotes replaced by backslash-double quote."
msgstr ""

msgid "Return a new string which is an *unquoted* version of *str*. If *str* ends and begins with double quotes, they are stripped off.  Likewise if *str* ends and begins with angle brackets, they are stripped off."
msgstr ""

msgid "Parse address -- which should be the value of some address-containing field such as :mailheader:`To` or :mailheader:`Cc` -- into its constituent *realname* and *email address* parts.  Returns a tuple of that information, unless the parse fails, in which case a 2-tuple of ``('', '')`` is returned."
msgstr ""

msgid "The inverse of :meth:`parseaddr`, this takes a 2-tuple of the form ``(realname, email_address)`` and returns the string value suitable for a :mailheader:`To` or :mailheader:`Cc` header.  If the first element of *pair* is false, then the second element is returned unmodified."
msgstr ""

msgid "This method returns a list of 2-tuples of the form returned by ``parseaddr()``. *fieldvalues* is a sequence of header field values as might be returned by :meth:`Message.get_all`.  Here's a simple example that gets all the recipients of a message::"
msgstr ""

msgid "from email.utils import getaddresses  tos = msg.get_all('to', []) ccs = msg.get_all('cc', []) resent_tos = msg.get_all('resent-to', []) resent_ccs = msg.get_all('resent-cc', []) all_recipients = getaddresses(tos + ccs + resent_tos + resent_ccs)"
msgstr ""

msgid "Attempts to parse a date according to the rules in :rfc:`2822`. however, some mailers don't follow that format as specified, so :func:`parsedate` tries to guess correctly in such cases.  *date* is a string containing an :rfc:`2822` date, such as  ``\"Mon, 20 Nov 1995 19:12:08 -0500\"``.  If it succeeds in parsing the date, :func:`parsedate` returns a 9-tuple that can be passed directly to :func:`time.mktime`; otherwise ``None`` will be returned.  Note that indexes 6, 7, and 8 of the result tuple are not usable."
msgstr ""

msgid "Performs the same function as :func:`parsedate`, but returns either ``None`` or a 10-tuple; the first 9 elements make up a tuple that can be passed directly to :func:`time.mktime`, and the tenth is the offset of the date's timezone from UTC (which is the official term for Greenwich Mean Time) [#]_.  If the input string has no timezone, the last element of the tuple returned is ``None``.  Note that indexes 6, 7, and 8 of the result tuple are not usable."
msgstr ""

msgid "Turn a 10-tuple as returned by :func:`parsedate_tz` into a UTC timestamp.  It the timezone item in the tuple is ``None``, assume local time.  Minor deficiency: :func:`mktime_tz` interprets the first 8 elements of *tuple* as a local time and then compensates for the timezone difference.  This may yield a slight error around changes in daylight savings time, though not worth worrying about for common use."
msgstr ""

msgid "Returns a date string as per :rfc:`2822`, e.g.::"
msgstr ""

msgid "Fri, 09 Nov 2001 01:08:47 -0000"
msgstr ""

msgid "Optional *timeval* if given is a floating point time value as accepted by :func:`time.gmtime` and :func:`time.localtime`, otherwise the current time is used."
msgstr ""

msgid "Optional *localtime* is a flag that when ``True``, interprets *timeval*, and returns a date relative to the local timezone instead of UTC, properly taking daylight savings time into account. The default is ``False`` meaning UTC is used."
msgstr ""

msgid "Optional *usegmt* is a flag that when ``True``, outputs a  date string with the timezone as an ascii string ``GMT``, rather than a numeric ``-0000``. This is needed for some protocols (such as HTTP). This only applies when *localtime* is ``False``.  The default is ``False``."
msgstr ""

msgid "Returns a string suitable for an :rfc:`2822`\\ -compliant :mailheader:`Message-ID` header.  Optional *idstring* if given, is a string used to strengthen the uniqueness of the message id."
msgstr ""

msgid "Decode the string *s* according to :rfc:`2231`."
msgstr ""

msgid "Encode the string *s* according to :rfc:`2231`.  Optional *charset* and *language*, if given is the character set name and language name to use.  If neither is given, *s* is returned as-is.  If *charset* is given but *language* is not, the string is encoded using the empty string for *language*."
msgstr ""

msgid "When a header parameter is encoded in :rfc:`2231` format, :meth:`Message.get_param` may return a 3-tuple containing the character set, language, and value.  :func:`collapse_rfc2231_value` turns this into a unicode string.  Optional *errors* is passed to the *errors* argument of :class:`str`'s :func:`encode` method; it defaults to ``'replace'``.  Optional *fallback_charset* specifies the character set to use if the one in the :rfc:`2231` header is not known by Python; it defaults to ``'us-ascii'``."
msgstr ""

msgid "For convenience, if the *value* passed to :func:`collapse_rfc2231_value` is not a tuple, it should be a string and it is returned unquoted."
msgstr ""

msgid "Decode parameters list according to :rfc:`2231`.  *params* is a sequence of 2-tuples containing elements of the form ``(content-type, string-value)``."
msgstr ""

msgid "Note that the sign of the timezone offset is the opposite of the sign of the ``time.timezone`` variable for the same timezone; the latter variable follows the POSIX standard while this module follows :rfc:`2822`."
msgstr ""

msgid ":mod:`errno` --- Standard errno system symbols"
msgstr ""

msgid "This module makes available standard ``errno`` system symbols. The value of each symbol is the corresponding integer value. The names and descriptions are borrowed from :file:`linux/include/errno.h`, which should be pretty all-inclusive."
msgstr ""

msgid "Dictionary providing a mapping from the errno value to the string name in the underlying system.  For instance, ``errno.errorcode[errno.EPERM]`` maps to ``'EPERM'``."
msgstr ""

msgid "To translate a numeric error code to an error message, use :func:`os.strerror`."
msgstr ""

msgid "Of the following list, symbols that are not used on the current platform are not defined by the module.  The specific list of defined symbols is available as ``errno.errorcode.keys()``.  Symbols available can include:"
msgstr ""

msgid "Operation not permitted"
msgstr ""

msgid "No such file or directory"
msgstr ""

msgid "No such process"
msgstr ""

msgid "Interrupted system call"
msgstr ""

msgid "I/O error"
msgstr ""

msgid "No such device or address"
msgstr ""

msgid "Arg list too long"
msgstr ""

msgid "Exec format error"
msgstr ""

msgid "Bad file number"
msgstr ""

msgid "No child processes"
msgstr ""

msgid "Try again"
msgstr ""

msgid "Out of memory"
msgstr ""

msgid "Permission denied"
msgstr ""

msgid "Bad address"
msgstr ""

msgid "Block device required"
msgstr ""

msgid "Device or resource busy"
msgstr ""

msgid "File exists"
msgstr ""

msgid "Cross-device link"
msgstr ""

msgid "No such device"
msgstr ""

msgid "Not a directory"
msgstr ""

msgid "Is a directory"
msgstr ""

msgid "Invalid argument"
msgstr ""

msgid "File table overflow"
msgstr ""

msgid "Too many open files"
msgstr ""

msgid "Not a typewriter"
msgstr ""

msgid "Text file busy"
msgstr ""

msgid "File too large"
msgstr ""

msgid "No space left on device"
msgstr ""

msgid "Illegal seek"
msgstr ""

msgid "Read-only file system"
msgstr ""

msgid "Too many links"
msgstr ""

msgid "Broken pipe"
msgstr ""

msgid "Math argument out of domain of func"
msgstr ""

msgid "Math result not representable"
msgstr ""

msgid "Resource deadlock would occur"
msgstr ""

msgid "File name too long"
msgstr ""

msgid "No record locks available"
msgstr ""

msgid "Function not implemented"
msgstr ""

msgid "Directory not empty"
msgstr ""

msgid "Too many symbolic links encountered"
msgstr ""

msgid "Operation would block"
msgstr ""

msgid "No message of desired type"
msgstr ""

msgid "Identifier removed"
msgstr ""

msgid "Channel number out of range"
msgstr ""

msgid "Level 2 not synchronized"
msgstr ""

msgid "Level 3 halted"
msgstr ""

msgid "Level 3 reset"
msgstr ""

msgid "Link number out of range"
msgstr ""

msgid "Protocol driver not attached"
msgstr ""

msgid "No CSI structure available"
msgstr ""

msgid "Level 2 halted"
msgstr ""

msgid "Invalid exchange"
msgstr ""

msgid "Invalid request descriptor"
msgstr ""

msgid "Exchange full"
msgstr ""

msgid "No anode"
msgstr ""

msgid "Invalid request code"
msgstr ""

msgid "Invalid slot"
msgstr ""

msgid "File locking deadlock error"
msgstr ""

msgid "Bad font file format"
msgstr ""

msgid "Device not a stream"
msgstr ""

msgid "No data available"
msgstr ""

msgid "Timer expired"
msgstr ""

msgid "Out of streams resources"
msgstr ""

msgid "Machine is not on the network"
msgstr ""

msgid "Package not installed"
msgstr ""

msgid "Object is remote"
msgstr ""

msgid "Link has been severed"
msgstr ""

msgid "Advertise error"
msgstr ""

msgid "Srmount error"
msgstr ""

msgid "Communication error on send"
msgstr ""

msgid "Protocol error"
msgstr ""

msgid "Multihop attempted"
msgstr ""

msgid "RFS specific error"
msgstr ""

msgid "Not a data message"
msgstr ""

msgid "Value too large for defined data type"
msgstr ""

msgid "Name not unique on network"
msgstr ""

msgid "File descriptor in bad state"
msgstr ""

msgid "Remote address changed"
msgstr ""

msgid "Can not access a needed shared library"
msgstr ""

msgid "Accessing a corrupted shared library"
msgstr ""

msgid ".lib section in a.out corrupted"
msgstr ""

msgid "Attempting to link in too many shared libraries"
msgstr ""

msgid "Cannot exec a shared library directly"
msgstr ""

msgid "Illegal byte sequence"
msgstr ""

msgid "Interrupted system call should be restarted"
msgstr ""

msgid "Streams pipe error"
msgstr ""

msgid "Too many users"
msgstr ""

msgid "Socket operation on non-socket"
msgstr ""

msgid "Destination address required"
msgstr ""

msgid "Message too long"
msgstr ""

msgid "Protocol wrong type for socket"
msgstr ""

msgid "Protocol not available"
msgstr ""

msgid "Protocol not supported"
msgstr ""

msgid "Socket type not supported"
msgstr ""

msgid "Operation not supported on transport endpoint"
msgstr ""

msgid "Protocol family not supported"
msgstr ""

msgid "Address family not supported by protocol"
msgstr ""

msgid "Address already in use"
msgstr ""

msgid "Cannot assign requested address"
msgstr ""

msgid "Network is down"
msgstr ""

msgid "Network is unreachable"
msgstr ""

msgid "Network dropped connection because of reset"
msgstr ""

msgid "Software caused connection abort"
msgstr ""

msgid "Connection reset by peer"
msgstr ""

msgid "No buffer space available"
msgstr ""

msgid "Transport endpoint is already connected"
msgstr ""

msgid "Transport endpoint is not connected"
msgstr ""

msgid "Cannot send after transport endpoint shutdown"
msgstr ""

msgid "Too many references: cannot splice"
msgstr ""

msgid "Connection timed out"
msgstr ""

msgid "Connection refused"
msgstr ""

msgid "Host is down"
msgstr ""

msgid "No route to host"
msgstr ""

msgid "Operation already in progress"
msgstr ""

msgid "Operation now in progress"
msgstr ""

msgid "Stale NFS file handle"
msgstr ""

msgid "Structure needs cleaning"
msgstr ""

msgid "Not a XENIX named type file"
msgstr ""

msgid "No XENIX semaphores available"
msgstr ""

msgid "Is a named type file"
msgstr ""

msgid "Remote I/O error"
msgstr ""

msgid "Quota exceeded"
msgstr ""

msgid "Built-in Exceptions"
msgstr ""

msgid "In Python, all exceptions must be instances of a class that derives from :class:`BaseException`.  In a :keyword:`try` statement with an :keyword:`except` clause that mentions a particular class, that clause also handles any exception classes derived from that class (but not exception classes from which *it* is derived).  Two exception classes that are not related via subclassing are never equivalent, even if they have the same name."
msgstr ""

msgid "The built-in exceptions listed below can be generated by the interpreter or built-in functions.  Except where mentioned, they have an \"associated value\" indicating the detailed cause of the error. This may be a string or a tuple containing several items of information (e.g., an error code and a string explaining the code).  The associated value is usually passed to the exception class's constructor.  If the exception class is derived from the standard root class :exc:`BaseException`, the associated value is present as the exception instance's :attr:`args` attribute."
msgstr ""

msgid "User code can raise built-in exceptions.  This can be used to test an exception handler or to report an error condition \"just like\" the situation in which the interpreter raises the same exception; but beware that there is nothing to prevent user code from raising an inappropriate error."
msgstr ""

msgid "The built-in exception classes can be sub-classed to define new exceptions; programmers are encouraged to at least derive new exceptions from the :exc:`Exception` class and not :exc:`BaseException`.  More information on defining exceptions is available in the Python Tutorial under :ref:`tut-userexceptions`."
msgstr ""

msgid "The following exceptions are used mostly as base classes for other exceptions."
msgstr ""

msgid "The base class for all built-in exceptions.  It is not meant to be directly inherited by user-defined classes (for that use :exc:`Exception`).  If :func:`bytes` or :func:`str` is called on an instance of this class, the representation of the argument(s) to the instance are returned or the empty string when there were no arguments.  All arguments are  stored in :attr:`args` as a tuple."
msgstr ""

msgid "All built-in, non-system-exiting exceptions are derived from this class.  All user-defined exceptions should also be derived from this class."
msgstr ""

msgid "The base class for those built-in exceptions that are raised for various arithmetic errors: :exc:`OverflowError`, :exc:`ZeroDivisionError`, :exc:`FloatingPointError`."
msgstr ""

msgid "The base class for the exceptions that are raised when a key or index used on a mapping or sequence is invalid: :exc:`IndexError`, :exc:`KeyError`.  This can be raised directly by :func:`codecs.lookup`."
msgstr ""

msgid "The base class for exceptions that can occur outside the Python system: :exc:`IOError`, :exc:`OSError`.  When exceptions of this type are created with a 2-tuple, the first item is available on the instance's :attr:`errno` attribute (it is assumed to be an error number), and the second item is available on the :attr:`strerror` attribute (it is usually the associated error message).  The tuple itself is also available on the :attr:`args` attribute."
msgstr ""

msgid "When an :exc:`EnvironmentError` exception is instantiated with a 3-tuple, the first two items are available as above, while the third item is available on the :attr:`filename` attribute.  However, for backwards compatibility, the :attr:`args` attribute contains only a 2-tuple of the first two constructor arguments."
msgstr ""

msgid "The :attr:`filename` attribute is ``None`` when this exception is created with other than 3 arguments.  The :attr:`errno` and :attr:`strerror` attributes are also ``None`` when the instance was created with other than 2 or 3 arguments. In this last case, :attr:`args` contains the verbatim constructor arguments as a tuple."
msgstr ""

msgid "The following exceptions are the exceptions that are usually raised."
msgstr ""

msgid "Raised when an :keyword:`assert` statement fails."
msgstr ""

msgid "Raised when an attribute reference (see :ref:`attribute-references`) or assignment fails.  (When an object does not support attribute references or attribute assignments at all, :exc:`TypeError` is raised.)"
msgstr ""

msgid "Raised when one of the built-in functions (:func:`input` or :func:`raw_input`) hits an end-of-file condition (EOF) without reading any data. (N.B.: the :meth:`file.read` and :meth:`file.readline` methods return an empty string when they hit EOF.)"
msgstr ""

msgid "Raised when a floating point operation fails.  This exception is always defined, but can only be raised when Python is configured with the :option:`--with-fpectl` option, or the :const:`WANT_SIGFPE_HANDLER` symbol is defined in the :file:`pyconfig.h` file."
msgstr ""

msgid "Raise when a :term:`generator`\\'s :meth:`close` method is called.  It directly inherits from :exc:`BaseException` instead of :exc:`Exception` since it is technically not an error."
msgstr ""

msgid "Raised when an I/O operation (such as the built-in :func:`print` or :func:`open` functions or a method of a file object) fails for an I/O-related reason, e.g., \"file not found\" or \"disk full\"."
msgstr ""

msgid "This class is derived from :exc:`EnvironmentError`.  See the discussion above for more information on exception instance attributes."
msgstr ""

msgid "Raised when an :keyword:`import` statement fails to find the module definition or when a ``from ... import`` fails to find a name that is to be imported."
msgstr ""

msgid "Raised when a sequence subscript is out of range.  (Slice indices are silently truncated to fall in the allowed range; if an index is not an integer, :exc:`TypeError` is raised.)"
msgstr ""

msgid "Raised when a mapping (dictionary) key is not found in the set of existing keys."
msgstr ""

msgid "Raised when the user hits the interrupt key (normally :kbd:`Control-C` or :kbd:`Delete`).  During execution, a check for interrupts is made regularly. The exception inherits from :exc:`BaseException` so as to not be accidentally caught by code that catches :exc:`Exception` and thus prevent the interpreter from exiting."
msgstr ""

msgid "Raised when an operation runs out of memory but the situation may still be rescued (by deleting some objects).  The associated value is a string indicating what kind of (internal) operation ran out of memory. Note that because of the underlying memory management architecture (C's :cfunc:`malloc` function), the interpreter may not always be able to completely recover from this situation; it nevertheless raises an exception so that a stack traceback can be printed, in case a run-away program was the cause."
msgstr ""

msgid "Raised when a local or global name is not found.  This applies only to unqualified names.  The associated value is an error message that includes the name that could not be found."
msgstr ""

msgid "This exception is derived from :exc:`RuntimeError`.  In user defined base classes, abstract methods should raise this exception when they require derived classes to override the method."
msgstr ""

msgid "This exception is derived from :exc:`EnvironmentError`.  It is raised when a function returns a system-related error (not for illegal argument types or other incidental errors).  The :attr:`errno` attribute is a numeric error code from :cdata:`errno`, and the :attr:`strerror` attribute is the corresponding string, as would be printed by the C function :cfunc:`perror`. See the module :mod:`errno`, which contains names for the error codes defined by the underlying operating system."
msgstr ""

msgid "For exceptions that involve a file system path (such as :func:`chdir` or :func:`unlink`), the exception instance will contain a third attribute, :attr:`filename`, which is the file name passed to the function."
msgstr ""

msgid "Raised when the result of an arithmetic operation is too large to be represented.  This cannot occur for integers (which would rather raise :exc:`MemoryError` than give up).  Because of the lack of standardization of floating point exception handling in C, most floating point operations also aren't checked."
msgstr ""

msgid "This exception is raised when a weak reference proxy, created by the :func:`weakref.proxy` function, is used to access an attribute of the referent after it has been garbage collected. For more information on weak references, see the :mod:`weakref` module."
msgstr ""

msgid "Raised when an error is detected that doesn't fall in any of the other categories.  The associated value is a string indicating what precisely went wrong.  (This exception is mostly a relic from a previous version of the interpreter; it is not used very much any more.)"
msgstr ""

msgid "Raised by built-in function :func:`next` and an :term:`iterator`\\'s :meth:`__next__` method to signal that there are no further values."
msgstr ""

msgid "Raised when the parser encounters a syntax error.  This may occur in an :keyword:`import` statement, in a call to the built-in functions :func:`exec` or :func:`eval`, or when reading the initial script or standard input (also interactively)."
msgstr ""

msgid "Instances of this class have attributes :attr:`filename`, :attr:`lineno`, :attr:`offset` and :attr:`text` for easier access to the details.  :func:`str` of the exception instance returns only the message."
msgstr ""

msgid "Raised when the interpreter finds an internal error, but the situation does not look so serious to cause it to abandon all hope. The associated value is a string indicating what went wrong (in low-level terms)."
msgstr ""

msgid "You should report this to the author or maintainer of your Python interpreter. Be sure to report the version of the Python interpreter (``sys.version``; it is also printed at the start of an interactive Python session), the exact error message (the exception's associated value) and if possible the source of the program that triggered the error."
msgstr ""

msgid "This exception is raised by the :func:`sys.exit` function.  When it is not handled, the Python interpreter exits; no stack traceback is printed.  If the associated value is an integer, it specifies the system exit status (passed to C's :cfunc:`exit` function); if it is ``None``, the exit status is zero; if it has another type (such as a string), the object's value is printed and the exit status is one."
msgstr ""

msgid "Instances have an attribute :attr:`code` which is set to the proposed exit status or error message (defaulting to ``None``). Also, this exception derives directly from :exc:`BaseException` and not :exc:`Exception`, since it is not technically an error."
msgstr ""

msgid "A call to :func:`sys.exit` is translated into an exception so that clean-up handlers (:keyword:`finally` clauses of :keyword:`try` statements) can be executed, and so that a debugger can execute a script without running the risk of losing control.  The :func:`os._exit` function can be used if it is absolutely positively necessary to exit immediately (for example, in the child process after a call to :func:`fork`)."
msgstr ""

msgid "The exception inherits from :exc:`BaseException` instead of :exc:`Exception` so that it is not accidentally caught by code that catches :exc:`Exception`.  This allows the exception to properly propagate up and cause the interpreter to exit."
msgstr ""

msgid "Raised when an operation or function is applied to an object of inappropriate type.  The associated value is a string giving details about the type mismatch."
msgstr ""

msgid "Raised when a reference is made to a local variable in a function or method, but no value has been bound to that variable.  This is a subclass of :exc:`NameError`."
msgstr ""

msgid "Raised when a Unicode-related encoding or decoding error occurs.  It is a subclass of :exc:`ValueError`."
msgstr ""

msgid "Raised when a Unicode-related error occurs during encoding.  It is a subclass of :exc:`UnicodeError`."
msgstr ""

msgid "Raised when a Unicode-related error occurs during decoding.  It is a subclass of :exc:`UnicodeError`."
msgstr ""

msgid "Raised when a Unicode-related error occurs during translating.  It is a subclass of :exc:`UnicodeError`."
msgstr ""

msgid "Raised when a built-in operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as :exc:`IndexError`."
msgstr ""

msgid "Only available on VMS.  Raised when a VMS-specific error occurs."
msgstr ""

msgid "Raised when a Windows-specific error occurs or when the error number does not correspond to an :cdata:`errno` value.  The :attr:`winerror` and :attr:`strerror` values are created from the return values of the :cfunc:`GetLastError` and :cfunc:`FormatMessage` functions from the Windows Platform API. The :attr:`errno` value maps the :attr:`winerror` value to corresponding ``errno.h`` values. This is a subclass of :exc:`OSError`."
msgstr ""

msgid "Raised when the second argument of a division or modulo operation is zero.  The associated value is a string indicating the type of the operands and the operation."
msgstr ""

msgid "The following exceptions are used as warning categories; see the :mod:`warnings` module for more information."
msgstr ""

msgid "Base class for warning categories."
msgstr ""

msgid "Base class for warnings generated by user code."
msgstr ""

msgid "Base class for warnings about deprecated features."
msgstr ""

msgid "Base class for warnings about features which will be deprecated in the future."
msgstr ""

msgid "Base class for warnings about dubious syntax"
msgstr ""

msgid "Base class for warnings about dubious runtime behavior."
msgstr ""

msgid "Base class for warnings about constructs that will change semantically in the future."
msgstr ""

msgid "Base class for warnings about probable mistakes in module imports."
msgstr ""

msgid "Base class for warnings related to Unicode."
msgstr ""

msgid "Base class for warnings related to :class:`bytes` and :class:`buffer`."
msgstr ""

msgid "Exception hierarchy"
msgstr ""

msgid "The class hierarchy for built-in exceptions is:"
msgstr ""

msgid ":mod:`fcntl` --- The :func:`fcntl` and :func:`ioctl` system calls"
msgstr ""

msgid "This module performs file control and I/O control on file descriptors. It is an interface to the :cfunc:`fcntl` and :cfunc:`ioctl` Unix routines."
msgstr ""

msgid "All functions in this module take a file descriptor *fd* as their first argument.  This can be an integer file descriptor, such as returned by ``sys.stdin.fileno()``, or a file object, such as ``sys.stdin`` itself, which provides a :meth:`fileno` which returns a genuine file descriptor."
msgstr ""

msgid "The module defines the following functions:"
msgstr ""

msgid "Perform the requested operation on file descriptor *fd* (file objects providing a :meth:`fileno` method are accepted as well). The operation is defined by *op* and is operating system dependent.  These codes are also found in the :mod:`fcntl` module. The argument *arg* is optional, and defaults to the integer value ``0``.  When present, it can either be an integer value, or a string. With the argument missing or an integer value, the return value of this function is the integer return value of the C :cfunc:`fcntl` call.  When the argument is a string it represents a binary structure, e.g. created by :func:`struct.pack`. The binary data is copied to a buffer whose address is passed to the C :cfunc:`fcntl` call.  The return value after a successful call is the contents of the buffer, converted to a string object.  The length of the returned string will be the same as the length of the *arg* argument.  This is limited to 1024 bytes.  If the information returned in the buffer by the operating system is larger than 1024 bytes, this is most likely to result in a segmentation violation or a more subtle data corruption."
msgstr ""

msgid "If the :cfunc:`fcntl` fails, an :exc:`IOError` is raised."
msgstr ""

msgid "This function is identical to the :func:`fcntl` function, except that the argument handling is even more complicated."
msgstr ""

msgid "The op parameter is limited to values that can fit in 32-bits."
msgstr ""

msgid "The parameter *arg* can be one of an integer, absent (treated identically to the integer ``0``), an object supporting the read-only buffer interface (most likely a plain Python string) or an object supporting the read-write buffer interface."
msgstr ""

msgid "In all but the last case, behaviour is as for the :func:`fcntl` function."
msgstr ""

msgid "If a mutable buffer is passed, then the behaviour is determined by the value of the *mutate_flag* parameter."
msgstr ""

msgid "If it is false, the buffer's mutability is ignored and behaviour is as for a read-only buffer, except that the 1024 byte limit mentioned above is avoided -- so long as the buffer you pass is as least as long as what the operating system wants to put there, things should work."
msgstr ""

msgid "If *mutate_flag* is true (the default), then the buffer is (in effect) passed to the underlying :func:`ioctl` system call, the latter's return code is passed back to the calling Python, and the buffer's new contents reflect the action of the :func:`ioctl`.  This is a slight simplification, because if the supplied buffer is less than 1024 bytes long it is first copied into a static buffer 1024 bytes long which is then passed to :func:`ioctl` and copied back into the supplied buffer."
msgstr ""

msgid "An example::"
msgstr ""

msgid ">>> import array, fcntl, struct, termios, os >>> os.getpgrp() 13341 >>> struct.unpack('h', fcntl.ioctl(0, termios.TIOCGPGRP, \"  \"))[0] 13341 >>> buf = array.array('h', [0]) >>> fcntl.ioctl(0, termios.TIOCGPGRP, buf, 1) 0 >>> buf array('h', [13341])"
msgstr ""

msgid "Perform the lock operation *op* on file descriptor *fd* (file objects providing a :meth:`fileno` method are accepted as well). See the Unix manual :manpage:`flock(2)` for details.  (On some systems, this function is emulated using :cfunc:`fcntl`.)"
msgstr ""

msgid "This is essentially a wrapper around the :func:`fcntl` locking calls.  *fd* is the file descriptor of the file to lock or unlock, and *operation* is one of the following values:"
msgstr ""

msgid ":const:`LOCK_UN` -- unlock"
msgstr ""

msgid ":const:`LOCK_SH` -- acquire a shared lock"
msgstr ""

msgid ":const:`LOCK_EX` -- acquire an exclusive lock"
msgstr ""

msgid "When *operation* is :const:`LOCK_SH` or :const:`LOCK_EX`, it can also be bitwise ORed with :const:`LOCK_NB` to avoid blocking on lock acquisition. If :const:`LOCK_NB` is used and the lock cannot be acquired, an :exc:`IOError` will be raised and the exception will have an *errno* attribute set to :const:`EACCES` or :const:`EAGAIN` (depending on the operating system; for portability, check for both values).  On at least some systems, :const:`LOCK_EX` can only be used if the file descriptor refers to a file opened for writing."
msgstr ""

msgid "*length* is the number of bytes to lock, *start* is the byte offset at which the lock starts, relative to *whence*, and *whence* is as with :func:`fileobj.seek`, specifically:"
msgstr ""

msgid ":const:`0` -- relative to the start of the file (:const:`SEEK_SET`)"
msgstr ""

msgid ":const:`1` -- relative to the current buffer position (:const:`SEEK_CUR`)"
msgstr ""

msgid ":const:`2` -- relative to the end of the file (:const:`SEEK_END`)"
msgstr ""

msgid "The default for *start* is 0, which means to start at the beginning of the file. The default for *length* is 0 which means to lock to the end of the file.  The default for *whence* is also 0."
msgstr ""

msgid "Examples (all on a SVR4 compliant system)::"
msgstr ""

msgid "import struct, fcntl, os  f = open(...) rv = fcntl.fcntl(f, fcntl.F_SETFL, os.O_NDELAY)  lockdata = struct.pack('hhllhh', fcntl.F_WRLCK, 0, 0, 0, 0, 0) rv = fcntl.fcntl(f, fcntl.F_SETLKW, lockdata)"
msgstr ""

msgid "Note that in the first example the return value variable *rv* will hold an integer value; in the second example it will hold a string value.  The structure lay-out for the *lockdata* variable is system dependent --- therefore using the :func:`flock` call may be better."
msgstr ""

msgid "If the locking flags :const:`O_SHLOCK` and :const:`O_EXLOCK` are present in the :mod:`os` module (on BSD only), the :func:`os.open` function provides an alternative to the :func:`lockf` and :func:`flock` functions."
msgstr ""

msgid ":mod:`filecmp` --- File and Directory Comparisons"
msgstr ""

msgid "The :mod:`filecmp` module defines functions to compare files and directories, with various optional time/correctness trade-offs. For comparing files, see also the :mod:`difflib` module."
msgstr ""

msgid "The :mod:`filecmp` module defines the following functions:"
msgstr ""

msgid "Compare the files named *f1* and *f2*, returning ``True`` if they seem equal, ``False`` otherwise."
msgstr ""

msgid "Unless *shallow* is given and is false, files with identical :func:`os.stat` signatures are taken to be equal."
msgstr ""

msgid "Files that were compared using this function will not be compared again unless their :func:`os.stat` signature changes."
msgstr ""

msgid "Note that no external programs are called from this function, giving it portability and efficiency."
msgstr ""

msgid "Compare the files in the two directories *dir1* and *dir2* whose names are given by *common*."
msgstr ""

msgid "Returns three lists of file names: *match*, *mismatch*, *errors*.  *match* contains the list of files that match, *mismatch* contains the names of those that don't, and *errors* lists the names of files which could not be compared.  Files are listed in *errors* if they don't exist in one of the directories, the user lacks permission to read them or if the comparison could not be done for some other reason."
msgstr ""

msgid "The *shallow* parameter has the same meaning and default value as for :func:`filecmp.cmp`."
msgstr ""

msgid "For example, ``cmpfiles('a', 'b', ['c', 'd/e'])`` will compare ``a/c`` with ``b/c`` and ``a/d/e`` with ``b/d/e``.  ``'c'`` and ``'d/e'`` will each be in one of the three returned lists."
msgstr ""

msgid ">>> import filecmp >>> filecmp.cmp('undoc.rst', 'undoc.rst') True >>> filecmp.cmp('undoc.rst', 'index.rst') False"
msgstr ""

msgid "The :class:`dircmp` class"
msgstr ""

msgid ":class:`dircmp` instances are built using this constructor:"
msgstr ""

msgid "Construct a new directory comparison object, to compare the directories *a* and *b*. *ignore* is a list of names to ignore, and defaults to ``['RCS', 'CVS', 'tags']``. *hide* is a list of names to hide, and defaults to ``[os.curdir, os.pardir]``."
msgstr ""

msgid "The :class:`dircmp` class provides the following methods:"
msgstr ""

msgid "Print (to ``sys.stdout``) a comparison between *a* and *b*."
msgstr ""

msgid "Print a comparison between *a* and *b* and common immediate subdirectories."
msgstr ""

msgid "Print a comparison between *a* and *b* and common subdirectories (recursively)."
msgstr ""

msgid "The :class:`dircmp` offers a number of interesting attributes that may be used to get various bits of information about the directory trees being compared."
msgstr ""

msgid "Note that via :meth:`__getattr__` hooks, all attributes are computed lazily, so there is no speed penalty if only those attributes which are lightweight to compute are used."
msgstr ""

msgid "Files and subdirectories in *a*, filtered by *hide* and *ignore*."
msgstr ""

msgid "Files and subdirectories in *b*, filtered by *hide* and *ignore*."
msgstr ""

msgid "Files and subdirectories in both *a* and *b*."
msgstr ""

msgid "Files and subdirectories only in *a*."
msgstr ""

msgid "Files and subdirectories only in *b*."
msgstr ""

msgid "Subdirectories in both *a* and *b*."
msgstr ""

msgid "Files in both *a* and *b*"
msgstr ""

msgid "Names in both *a* and *b*, such that the type differs between the directories, or names for which :func:`os.stat` reports an error."
msgstr ""

msgid "Files which are identical in both *a* and *b*."
msgstr ""

msgid "Files which are in both *a* and *b*, whose contents differ."
msgstr ""

msgid "Files which are in both *a* and *b*, but could not be compared."
msgstr ""

msgid "A dictionary mapping names in :attr:`common_dirs` to :class:`dircmp` objects."
msgstr ""

msgid "File Formats"
msgstr ""

msgid "The modules described in this chapter parse various miscellaneous file formats that aren't markup languages or are related to e-mail."
msgstr ""

msgid ":mod:`fileinput` --- Iterate over lines from multiple input streams"
msgstr ""

msgid "This module implements a helper class and functions to quickly write a loop over standard input or a list of files. If you just want to read or write one file see :func:`open`."
msgstr ""

msgid "The typical use is::"
msgstr ""

msgid "import fileinput for line in fileinput.input():     process(line)"
msgstr ""

msgid "This iterates over the lines of all files listed in ``sys.argv[1:]``, defaulting to ``sys.stdin`` if the list is empty.  If a filename is ``'-'``, it is also replaced by ``sys.stdin``.  To specify an alternative list of filenames, pass it as the first argument to :func:`.input`.  A single file name is also allowed."
msgstr ""

msgid "All files are opened in text mode by default, but you can override this by specifying the *mode* parameter in the call to :func:`.input` or :class:`FileInput()`.  If an I/O error occurs during opening or reading a file, :exc:`IOError` is raised."
msgstr ""

msgid "If ``sys.stdin`` is used more than once, the second and further use will return no lines, except perhaps for interactive use, or if it has been explicitly reset (e.g. using ``sys.stdin.seek(0)``)."
msgstr ""

msgid "Empty files are opened and immediately closed; the only time their presence in the list of filenames is noticeable at all is when the last file opened is empty."
msgstr ""

msgid "Lines are returned with any newlines intact, which means that the last line in a file may not have one."
msgstr ""

msgid "You can control how files are opened by providing an opening hook via the *openhook* parameter to :func:`fileinput.input` or :class:`FileInput()`. The hook must be a function that takes two arguments, *filename* and *mode*, and returns an accordingly opened file-like object. Two useful hooks are already provided by this module."
msgstr ""

msgid "The following function is the primary interface of this module:"
msgstr ""

msgid "Create an instance of the :class:`FileInput` class.  The instance will be used as global state for the functions of this module, and is also returned to use during iteration.  The parameters to this function will be passed along to the constructor of the :class:`FileInput` class."
msgstr ""

msgid "The following functions use the global state created by :func:`fileinput.input`; if there is no active state, :exc:`RuntimeError` is raised."
msgstr ""

msgid "Return the name of the file currently being read.  Before the first line has been read, returns ``None``."
msgstr ""

msgid "Return the integer \"file descriptor\" for the current file. When no file is opened (before the first line and between files), returns ``-1``."
msgstr ""

msgid "Return the cumulative line number of the line that has just been read.  Before the first line has been read, returns ``0``.  After the last line of the last file has been read, returns the line number of that line."
msgstr ""

msgid "Return the line number in the current file.  Before the first line has been read, returns ``0``.  After the last line of the last file has been read, returns the line number of that line within the file."
msgstr ""

msgid "Returns true if the line just read is the first line of its file, otherwise returns false."
msgstr ""

msgid "Returns true if the last line was read from ``sys.stdin``, otherwise returns false."
msgstr ""

msgid "Close the current file so that the next iteration will read the first line from the next file (if any); lines not read from the file will not count towards the cumulative line count.  The filename is not changed until after the first line of the next file has been read.  Before the first line has been read, this function has no effect; it cannot be used to skip the first file.  After the last line of the last file has been read, this function has no effect."
msgstr ""

msgid "Close the sequence."
msgstr ""

msgid "The class which implements the sequence behavior provided by the module is available for subclassing as well:"
msgstr ""

msgid "Class :class:`FileInput` is the implementation; its methods :meth:`filename`, :meth:`fileno`, :meth:`lineno`, :meth:`filelineno`, :meth:`isfirstline`, :meth:`isstdin`, :meth:`nextfile` and :meth:`close` correspond to the functions of the same name in the module. In addition it has a :meth:`readline` method which returns the next input line, and a :meth:`__getitem__` method which implements the sequence behavior.  The sequence must be accessed in strictly sequential order; random access and :meth:`readline` cannot be mixed."
msgstr ""

msgid "With *mode* you can specify which file mode will be passed to :func:`open`. It must be one of ``'r'``, ``'rU'``, ``'U'`` and ``'rb'``."
msgstr ""

msgid "The *openhook*, when given, must be a function that takes two arguments, *filename* and *mode*, and returns an accordingly opened file-like object. You cannot use *inplace* and *openhook* together."
msgstr ""

msgid "**Optional in-place filtering:** if the keyword argument ``inplace=1`` is passed to :func:`fileinput.input` or to the :class:`FileInput` constructor, the file is moved to a backup file and standard output is directed to the input file (if a file of the same name as the backup file already exists, it will be replaced silently).  This makes it possible to write a filter that rewrites its input file in place.  If the *backup* parameter is given (typically as ``backup='.<some extension>'``), it specifies the extension for the backup file, and the backup file remains around; by default, the extension is ``'.bak'`` and it is deleted when the output file is closed.  In-place filtering is disabled when standard input is read."
msgstr ""

msgid "The current implementation does not work for MS-DOS 8+3 filesystems."
msgstr ""

msgid "The two following opening hooks are provided by this module:"
msgstr ""

msgid "Transparently opens files compressed with gzip and bzip2 (recognized by the extensions ``'.gz'`` and ``'.bz2'``) using the :mod:`gzip` and :mod:`bz2` modules.  If the filename extension is not ``'.gz'`` or ``'.bz2'``, the file is opened normally (ie, using :func:`open` without any decompression)."
msgstr ""

msgid "Usage example:  ``fi = fileinput.FileInput(openhook=fileinput.hook_compressed)``"
msgstr ""

msgid "Returns a hook which opens each file with :func:`codecs.open`, using the given *encoding* to read the file."
msgstr ""

msgid "Usage example: ``fi = fileinput.FileInput(openhook=fileinput.hook_encoded(\"iso-8859-1\"))``"
msgstr ""

msgid "File and Directory Access"
msgstr ""

msgid "The modules described in this chapter deal with disk files and directories.  For example, there are modules for reading the properties of files, manipulating paths in a portable way, and creating temporary files.  The full list of modules in this chapter is:"
msgstr ""

msgid "Operating system interfaces, including functions to work with files at a lower level than the built-in file object."
msgstr ""

msgid "Python's built-in I/O library, including both abstract classes and some concrete classes such as file I/O."
msgstr ""

msgid "The standard way to open files for reading and writing with Python."
msgstr ""

msgid ":mod:`fnmatch` --- Unix filename pattern matching"
msgstr ""

msgid "This module provides support for Unix shell-style wildcards, which are *not* the same as regular expressions (which are documented in the :mod:`re` module).  The special characters used in shell-style wildcards are:"
msgstr ""

msgid "Pattern"
msgstr ""

msgid "``*``"
msgstr ""

msgid "matches everything"
msgstr ""

msgid "``?``"
msgstr ""

msgid "matches any single character"
msgstr ""

msgid "``[seq]``"
msgstr ""

msgid "matches any character in *seq*"
msgstr ""

msgid "``[!seq]``"
msgstr ""

msgid "matches any character not in *seq*"
msgstr ""

msgid "Note that the filename separator (``'/'`` on Unix) is *not* special to this module.  See module :mod:`glob` for pathname expansion (:mod:`glob` uses :func:`fnmatch` to match pathname segments).  Similarly, filenames starting with a period are not special for this module, and are matched by the ``*`` and ``?`` patterns."
msgstr ""

msgid "Test whether the *filename* string matches the *pattern* string, returning :const:`True` or :const:`False`.  If the operating system is case-insensitive, then both parameters will be normalized to all lower- or upper-case before the comparison is performed.  :func:`fnmatchcase` can be used to perform a case-sensitive comparison, regardless of whether that's standard for the operating system."
msgstr ""

msgid "This example will print all file names in the current directory with the extension ``.txt``::"
msgstr ""

msgid "import fnmatch import os  for file in os.listdir('.'):     if fnmatch.fnmatch(file, '*.txt'):         print(file)"
msgstr ""

msgid "Test whether *filename* matches *pattern*, returning :const:`True` or :const:`False`; the comparison is case-sensitive."
msgstr ""

msgid "Return the subset of the list of *names* that match *pattern*. It is the same as ``[n for n in names if fnmatch(n, pattern)]``, but implemented more efficiently."
msgstr ""

msgid "Return the shell-style *pattern* converted to a regular expression."
msgstr ""

msgid ">>> import fnmatch, re >>> >>> regex = fnmatch.translate('*.txt') >>> regex '.*\\\\.txt$' >>> reobj = re.compile(regex) >>> reobj.match('foobar.txt') <_sre.SRE_Match object at 0x...>"
msgstr ""

msgid "Unix shell-style path expansion."
msgstr ""

msgid ":mod:`formatter` --- Generic output formatting"
msgstr ""

msgid "This module supports two interface definitions, each with multiple implementations: The *formatter* interface, and the *writer* interface which is required by the formatter interface."
msgstr ""

msgid "Formatter objects transform an abstract flow of formatting events into specific output events on writer objects.  Formatters manage several stack structures to allow various properties of a writer object to be changed and restored; writers need not be able to handle relative changes nor any sort of \"change back\" operation.  Specific writer properties which may be controlled via formatter objects are horizontal alignment, font, and left margin indentations.  A mechanism is provided which supports providing arbitrary, non-exclusive style settings to a writer as well.  Additional interfaces facilitate formatting events which are not reversible, such as paragraph separation."
msgstr ""

msgid "Writer objects encapsulate device interfaces.  Abstract devices, such as file formats, are supported as well as physical devices.  The provided implementations all work with abstract devices.  The interface makes available mechanisms for setting the properties which formatter objects manage and inserting data into the output."
msgstr ""

msgid "The Formatter Interface"
msgstr ""

msgid "Interfaces to create formatters are dependent on the specific formatter class being instantiated.  The interfaces described below are the required interfaces which all formatters must support once initialized."
msgstr ""

msgid "One data element is defined at the module level:"
msgstr ""

msgid "Value which can be used in the font specification passed to the ``push_font()`` method described below, or as the new value to any other ``push_property()`` method.  Pushing the ``AS_IS`` value allows the corresponding ``pop_property()`` method to be called without having to track whether the property was changed."
msgstr ""

msgid "The following attributes are defined for formatter instance objects:"
msgstr ""

msgid "The writer instance with which the formatter interacts."
msgstr ""

msgid "Close any open paragraphs and insert at least *blanklines* before the next paragraph."
msgstr ""

msgid "Add a hard line break if one does not already exist.  This does not break the logical paragraph."
msgstr ""

msgid "Insert a horizontal rule in the output.  A hard break is inserted if there is data in the current paragraph, but the logical paragraph is not broken.  The arguments and keywords are passed on to the writer's :meth:`send_line_break` method."
msgstr ""

msgid "Provide data which should be formatted with collapsed whitespace. Whitespace from preceding and successive calls to :meth:`add_flowing_data` is considered as well when the whitespace collapse is performed.  The data which is passed to this method is expected to be word-wrapped by the output device.  Note that any word-wrapping still must be performed by the writer object due to the need to rely on device and font information."
msgstr ""

msgid "Provide data which should be passed to the writer unchanged. Whitespace, including newline and tab characters, are considered legal in the value of *data*."
msgstr ""

msgid "Insert a label which should be placed to the left of the current left margin. This should be used for constructing bulleted or numbered lists.  If the *format* value is a string, it is interpreted as a format specification for *counter*, which should be an integer. The result of this formatting becomes the value of the label; if *format* is not a string it is used as the label value directly. The label value is passed as the only argument to the writer's :meth:`send_label_data` method.  Interpretation of non-string label values is dependent on the associated writer."
msgstr ""

msgid "Format specifications are strings which, in combination with a counter value, are used to compute label values.  Each character in the format string is copied to the label value, with some characters recognized to indicate a transform on the counter value.  Specifically, the character ``'1'`` represents the counter value formatter as an Arabic number, the characters ``'A'`` and ``'a'`` represent alphabetic representations of the counter value in upper and lower case, respectively, and ``'I'`` and ``'i'`` represent the counter value in Roman numerals, in upper and lower case.  Note that the alphabetic and roman transforms require that the counter value be greater than zero."
msgstr ""

msgid "Send any pending whitespace buffered from a previous call to :meth:`add_flowing_data` to the associated writer object.  This should be called before any direct manipulation of the writer object."
msgstr ""

msgid "Push a new alignment setting onto the alignment stack.  This may be :const:`AS_IS` if no change is desired.  If the alignment value is changed from the previous setting, the writer's :meth:`new_alignment` method is called with the *align* value."
msgstr ""

msgid "Restore the previous alignment."
msgstr ""

msgid "Change some or all font properties of the writer object.  Properties which are not set to :const:`AS_IS` are set to the values passed in while others are maintained at their current settings.  The writer's :meth:`new_font` method is called with the fully resolved font specification."
msgstr ""

msgid "Restore the previous font."
msgstr ""

msgid "Increase the number of left margin indentations by one, associating the logical tag *margin* with the new indentation.  The initial margin level is ``0``. Changed values of the logical tag must be true values; false values other than :const:`AS_IS` are not sufficient to change the margin."
msgstr ""

msgid "Restore the previous margin."
msgstr ""

msgid "Push any number of arbitrary style specifications.  All styles are pushed onto the styles stack in order.  A tuple representing the entire stack, including :const:`AS_IS` values, is passed to the writer's :meth:`new_styles` method."
msgstr ""

msgid "Pop the last *n* style specifications passed to :meth:`push_style`.  A tuple representing the revised stack, including :const:`AS_IS` values, is passed to the writer's :meth:`new_styles` method."
msgstr ""

msgid "Set the spacing style for the writer."
msgstr ""

msgid "Inform the formatter that data has been added to the current paragraph out-of-band.  This should be used when the writer has been manipulated directly.  The optional *flag* argument can be set to false if the writer manipulations produced a hard line break at the end of the output."
msgstr ""

msgid "Formatter Implementations"
msgstr ""

msgid "Two implementations of formatter objects are provided by this module. Most applications may use one of these classes without modification or subclassing."
msgstr ""

msgid "A formatter which does nothing.  If *writer* is omitted, a :class:`NullWriter` instance is created.  No methods of the writer are called by :class:`NullFormatter` instances.  Implementations should inherit from this class if implementing a writer interface but don't need to inherit any implementation."
msgstr ""

msgid "The standard formatter.  This implementation has demonstrated wide applicability to many writers, and may be used directly in most circumstances.  It has been used to implement a full-featured World Wide Web browser."
msgstr ""

msgid "The Writer Interface"
msgstr ""

msgid "Interfaces to create writers are dependent on the specific writer class being instantiated.  The interfaces described below are the required interfaces which all writers must support once initialized. Note that while most applications can use the :class:`AbstractFormatter` class as a formatter, the writer must typically be provided by the application."
msgstr ""

msgid "Flush any buffered output or device control events."
msgstr ""

msgid "Set the alignment style.  The *align* value can be any object, but by convention is a string or ``None``, where ``None`` indicates that the writer's \"preferred\" alignment should be used. Conventional *align* values are ``'left'``, ``'center'``, ``'right'``, and ``'justify'``."
msgstr ""

msgid "Set the font style.  The value of *font* will be ``None``, indicating that the device's default font should be used, or a tuple of the form ``(size, italic, bold, teletype)``.  Size will be a string indicating the size of font that should be used; specific strings and their interpretation must be defined by the application.  The *italic*, *bold*, and *teletype* values are Boolean values specifying which of those font attributes should be used."
msgstr ""

msgid "Set the margin level to the integer *level* and the logical tag to *margin*. Interpretation of the logical tag is at the writer's discretion; the only restriction on the value of the logical tag is that it not be a false value for non-zero values of *level*."
msgstr ""

msgid "Set the spacing style to *spacing*."
msgstr ""

msgid "Set additional styles.  The *styles* value is a tuple of arbitrary values; the value :const:`AS_IS` should be ignored.  The *styles* tuple may be interpreted either as a set or as a stack depending on the requirements of the application and writer implementation."
msgstr ""

msgid "Break the current line."
msgstr ""

msgid "Produce a paragraph separation of at least *blankline* blank lines, or the equivalent.  The *blankline* value will be an integer.  Note that the implementation will receive a call to :meth:`send_line_break` before this call if a line break is needed;  this method should not include ending the last line of the paragraph. It is only responsible for vertical spacing between paragraphs."
msgstr ""

msgid "Display a horizontal rule on the output device.  The arguments to this method are entirely application- and writer-specific, and should be interpreted with care.  The method implementation may assume that a line break has already been issued via :meth:`send_line_break`."
msgstr ""

msgid "Output character data which may be word-wrapped and re-flowed as needed.  Within any sequence of calls to this method, the writer may assume that spans of multiple whitespace characters have been collapsed to single space characters."
msgstr ""

msgid "Output character data which has already been formatted for display.  Generally, this should be interpreted to mean that line breaks indicated by newline characters should be preserved and no new line breaks should be introduced.  The data may contain embedded newline and tab characters, unlike data provided to the :meth:`send_formatted_data` interface."
msgstr ""

msgid "Set *data* to the left of the current left margin, if possible. The value of *data* is not restricted; treatment of non-string values is entirely application- and writer-dependent.  This method will only be called at the beginning of a line."
msgstr ""

msgid "Writer Implementations"
msgstr ""

msgid "Three implementations of the writer object interface are provided as examples by this module.  Most applications will need to derive new writer classes from the :class:`NullWriter` class."
msgstr ""

msgid "A writer which only provides the interface definition; no actions are taken on any methods.  This should be the base class for all writers which do not need to inherit any implementation methods."
msgstr ""

msgid "A writer which can be used in debugging formatters, but not much else.  Each method simply announces itself by printing its name and arguments on standard output."
msgstr ""

msgid "Simple writer class which writes output on the file object passed in as *file* or, if *file* is omitted, on standard output.  The output is simply word-wrapped to the number of columns specified by *maxcol*.  This class is suitable for reflowing a sequence of paragraphs."
msgstr ""

msgid ":mod:`fpectl` --- Floating point exception control"
msgstr ""

msgid "The :mod:`fpectl` module is not built by default, and its usage is discouraged and may be dangerous except in the hands of experts.  See also the section :ref:`fpectl-limitations` on limitations for more details."
msgstr ""

msgid "Most computers carry out floating point operations in conformance with the so-called IEEE-754 standard. On any real computer, some floating point operations produce results that cannot be expressed as a normal floating point value. For example, try ::"
msgstr ""

msgid ">>> import math >>> math.exp(1000) inf >>> math.exp(1000) / math.exp(1000) nan"
msgstr ""

msgid "(The example above will work on many platforms. DEC Alpha may be one exception.) \"Inf\" is a special, non-numeric value in IEEE-754 that stands for \"infinity\", and \"nan\" means \"not a number.\" Note that, other than the non-numeric results, nothing special happened when you asked Python to carry out those calculations. That is in fact the default behaviour prescribed in the IEEE-754 standard, and if it works for you, stop reading now."
msgstr ""

msgid "In some circumstances, it would be better to raise an exception and stop processing at the point where the faulty operation was attempted. The :mod:`fpectl` module is for use in that situation. It provides control over floating point units from several hardware manufacturers, allowing the user to turn on the generation of :const:`SIGFPE` whenever any of the IEEE-754 exceptions Division by Zero, Overflow, or Invalid Operation occurs. In tandem with a pair of wrapper macros that are inserted into the C code comprising your python system, :const:`SIGFPE` is trapped and converted into the Python :exc:`FloatingPointError` exception."
msgstr ""

msgid "The :mod:`fpectl` module defines the following functions and may raise the given exception:"
msgstr ""

msgid "Turn on the generation of :const:`SIGFPE`, and set up an appropriate signal handler."
msgstr ""

msgid "Reset default handling of floating point exceptions."
msgstr ""

msgid "After :func:`turnon_sigfpe` has been executed, a floating point operation that raises one of the IEEE-754 exceptions Division by Zero, Overflow, or Invalid operation will in turn raise this standard Python exception."
msgstr ""

msgid "The following example demonstrates how to start up and test operation of the :mod:`fpectl` module. ::"
msgstr ""

msgid ">>> import fpectl >>> import fpetest >>> fpectl.turnon_sigfpe() >>> fpetest.test() overflow        PASS FloatingPointError: Overflow  div by 0        PASS FloatingPointError: Division by zero   [ more output from test elided ] >>> import math >>> math.exp(1000) Traceback (most recent call last):   File \"<stdin>\", line 1, in ? FloatingPointError: in math_1"
msgstr ""

msgid "Limitations and other considerations"
msgstr ""

msgid "Setting up a given processor to trap IEEE-754 floating point errors currently requires custom code on a per-architecture basis. You may have to modify :mod:`fpectl` to control your particular hardware."
msgstr ""

msgid "Conversion of an IEEE-754 exception to a Python exception requires that the wrapper macros ``PyFPE_START_PROTECT`` and ``PyFPE_END_PROTECT`` be inserted into your code in an appropriate fashion.  Python itself has been modified to support the :mod:`fpectl` module, but many other codes of interest to numerical analysts have not."
msgstr ""

msgid "The :mod:`fpectl` module is not thread-safe."
msgstr ""

msgid "Some files in the source distribution may be interesting in learning more about how this module operates. The include file :file:`Include/pyfpe.h` discusses the implementation of this module at some length. :file:`Modules/fpetestmodule.c` gives several examples of use. Many additional examples can be found in :file:`Objects/floatobject.c`."
msgstr ""

msgid ":mod:`fractions` --- Rational numbers"
msgstr ""

msgid "The :mod:`fractions` module provides support for rational number arithmetic."
msgstr ""

msgid "A Fraction instance can be constructed from a pair of integers, from another rational number, or from a string."
msgstr ""

msgid "The first version requires that *numerator* and *denominator* are instances of :class:`numbers.Rational` and returns a new :class:`Fraction` instance with value ``numerator/denominator``. If *denominator* is :const:`0`, it raises a :exc:`ZeroDivisionError`. The second version requires that *other_fraction* is an instance of :class:`numbers.Rational` and returns a :class:`Fraction` instance with the same value.  The next two versions accept either a :class:`float` or a :class:`decimal.Decimal` instance, and return a :class:`Fraction` instance with exactly the same value.  Note that due to the usual issues with binary floating-point (see :ref:`tut-fp-issues`), the argument to ``Fraction(1.1)`` is not exactly equal to 11/10, and so ``Fraction(1.1)`` does *not* return ``Fraction(11, 10)`` as one might expect. (But see the documentation for the :meth:`limit_denominator` method below.) The last version of the constructor expects a string or unicode instance. The usual form for this instance is::"
msgstr ""

msgid "[sign] numerator ['/' denominator]"
msgstr ""

msgid "where the optional ``sign`` may be either '+' or '-' and ``numerator`` and ``denominator`` (if present) are strings of decimal digits.  In addition, any string that represents a finite value and is accepted by the :class:`float` constructor is also accepted by the :class:`Fraction` constructor.  In either form the input string may also have leading and/or trailing whitespace. Here are some examples::"
msgstr ""

msgid ">>> from fractions import Fraction >>> Fraction(16, -10) Fraction(-8, 5) >>> Fraction(123) Fraction(123, 1) >>> Fraction() Fraction(0, 1) >>> Fraction('3/7') Fraction(3, 7) [40794 refs] >>> Fraction(' -3/7 ') Fraction(-3, 7) >>> Fraction('1.414213 \\t\\n') Fraction(1414213, 1000000) >>> Fraction('-.125') Fraction(-1, 8) >>> Fraction('7e-6') Fraction(7, 1000000) >>> Fraction(2.25) Fraction(9, 4) >>> Fraction(1.1) Fraction(2476979795053773, 2251799813685248) >>> from decimal import Decimal >>> Fraction(Decimal('1.1')) Fraction(11, 10)"
msgstr ""

msgid "The :class:`Fraction` class inherits from the abstract base class :class:`numbers.Rational`, and implements all of the methods and operations from that class.  :class:`Fraction` instances are hashable, and should be treated as immutable.  In addition, :class:`Fraction` has the following methods:"
msgstr ""

msgid "This class method constructs a :class:`Fraction` representing the exact value of *flt*, which must be a :class:`float`. Beware that ``Fraction.from_float(0.3)`` is not the same value as ``Fraction(3, 10)``"
msgstr ""

msgid "From Python 3.2 onwards, you can also construct a :class:`Fraction` instance directly from a :class:`float`."
msgstr ""

msgid "This class method constructs a :class:`Fraction` representing the exact value of *dec*, which must be a :class:`decimal.Decimal` instance."
msgstr ""

msgid "From Python 3.2 onwards, you can also construct a :class:`Fraction` instance directly from a :class:`decimal.Decimal` instance."
msgstr ""

msgid "Finds and returns the closest :class:`Fraction` to ``self`` that has denominator at most max_denominator.  This method is useful for finding rational approximations to a given floating-point number:"
msgstr ""

msgid ">>> from fractions import Fraction >>> Fraction('3.1415926535897932').limit_denominator(1000) Fraction(355, 113)"
msgstr ""

msgid "or for recovering a rational number that's represented as a float:"
msgstr ""

msgid ">>> from math import pi, cos >>> Fraction(cos(pi/3)) Fraction(4503599627370497, 9007199254740992) >>> Fraction(cos(pi/3)).limit_denominator() Fraction(1, 2) >>> Fraction(1.1).limit_denominator() Fraction(11, 10)"
msgstr ""

msgid "Returns the greatest :class:`int` ``<= self``.  This method can also be accessed through the :func:`math.floor` function:"
msgstr ""

msgid ">>> from math import floor >>> floor(Fraction(355, 113)) 3"
msgstr ""

msgid "Returns the least :class:`int` ``>= self``.  This method can also be accessed through the :func:`math.ceil` function."
msgstr ""

msgid "The first version returns the nearest :class:`int` to ``self``, rounding half to even. The second version rounds ``self`` to the nearest multiple of ``Fraction(1, 10**ndigits)`` (logically, if ``ndigits`` is negative), again rounding half toward even.  This method can also be accessed through the :func:`round` function."
msgstr ""

msgid "Return the greatest common divisor of the integers *a* and *b*.  If either *a* or *b* is nonzero, then the absolute value of ``gcd(a, b)`` is the largest integer that divides both *a* and *b*.  ``gcd(a,b)`` has the same sign as *b* if *b* is nonzero; otherwise it takes the sign of *a*.  ``gcd(0, 0)`` returns ``0``."
msgstr ""

msgid "The abstract base classes making up the numeric tower."
msgstr ""

msgid "Program Frameworks"
msgstr ""

msgid "The modules described in this chapter are frameworks that will largely dictate the structure of your program.  Currently the modules described  here are all oriented toward writing command-line interfaces."
msgstr ""

msgid ":mod:`ftplib` --- FTP protocol client"
msgstr ""

msgid "This module defines the class :class:`FTP` and a few related items. The :class:`FTP` class implements the client side of the FTP protocol.  You can use this to write Python programs that perform a variety of automated FTP jobs, such as mirroring other ftp servers.  It is also used by the module :mod:`urllib.request` to handle URLs that use FTP.  For more information on FTP (File Transfer Protocol), see Internet :rfc:`959`."
msgstr ""

msgid "Here's a sample session using the :mod:`ftplib` module::"
msgstr ""

msgid ">>> from ftplib import FTP >>> ftp = FTP('ftp.cwi.nl')   # connect to host, default port >>> ftp.login()               # user anonymous, passwd anonymous@ >>> ftp.retrlines('LIST')     # list directory contents total 24418 drwxrwsr-x   5 ftp-usr  pdmaint     1536 Mar 20 09:48 . dr-xr-srwt 105 ftp-usr  pdmaint     1536 Mar 21 14:32 .. -rw-r--r--   1 ftp-usr  pdmaint     5305 Mar 20 09:48 INDEX  .  .  . >>> ftp.retrbinary('RETR README', open('README', 'wb').write) '226 Transfer complete.' >>> ftp.quit()"
msgstr ""

msgid "The module defines the following items:"
msgstr ""

msgid "Return a new instance of the :class:`FTP` class.  When *host* is given, the method call ``connect(host)`` is made.  When *user* is given, additionally the method call ``login(user, passwd, acct)`` is made (where *passwd* and *acct* default to the empty string when not given).  The optional *timeout* parameter specifies a timeout in seconds for blocking operations like the connection attempt (if is not specified, the global default timeout setting will be used)."
msgstr ""

msgid ":class:`FTP` class supports the :keyword:`with` statement. Here is a sample on how using it:"
msgstr ""

msgid ">>> from ftplib import FTP >>> with FTP(\"ftp1.at.proftpd.org\") as ftp: ...     ftp.login() ...     ftp.dir() ... '230 Anonymous login ok, restrictions apply.' dr-xr-xr-x   9 ftp      ftp           154 May  6 10:43 . dr-xr-xr-x   9 ftp      ftp           154 May  6 10:43 .. dr-xr-xr-x   5 ftp      ftp          4096 May  6 10:43 CentOS dr-xr-xr-x   3 ftp      ftp            18 Jul 10  2008 Fedora >>>"
msgstr ""

msgid "A :class:`FTP` subclass which adds TLS support to FTP as described in :rfc:`4217`. Connect as usual to port 21 implicitly securing the FTP control connection before authenticating. Securing the data connection requires the user to explicitly ask for it by calling the :meth:`prot_p` method. *keyfile* and *certfile* are optional -- they can contain a PEM formatted private key and certificate chain file name for the SSL connection. *context* parameter is a :class:`ssl.SSLContext` object which allows bundling SSL configuration options, certificates and private keys into a single (potentially long-lived) structure."
msgstr ""

msgid "Here's a sample session using the :class:`FTP_TLS` class:"
msgstr ""

msgid ">>> from ftplib import FTP_TLS >>> ftps = FTP_TLS('ftp.python.org') >>> ftps.login()           # login anonymously before securing control channel >>> ftps.prot_p()          # switch to secure data connection >>> ftps.retrlines('LIST') # list directory content securely total 9 drwxr-xr-x   8 root     wheel        1024 Jan  3  1994 . drwxr-xr-x   8 root     wheel        1024 Jan  3  1994 .. drwxr-xr-x   2 root     wheel        1024 Jan  3  1994 bin drwxr-xr-x   2 root     wheel        1024 Jan  3  1994 etc d-wxrwxr-x   2 ftp      wheel        1024 Sep  5 13:43 incoming drwxr-xr-x   2 root     wheel        1024 Nov 17  1993 lib drwxr-xr-x   6 1094     wheel        1024 Sep 13 19:07 pub drwxr-xr-x   3 root     wheel        1024 Jan  3  1994 usr -rw-r--r--   1 root     root          312 Aug  1  1994 welcome.msg '226 Transfer complete.' >>> ftps.quit() >>>"
msgstr ""

msgid "Exception raised when an unexpected reply is received from the server."
msgstr ""

msgid "Exception raised when an error code in the range 500--599 is received."
msgstr ""

msgid "Exception raised when a reply is received from the server that does not begin with a digit in the range 1--5."
msgstr ""

msgid "The set of all exceptions (as a tuple) that methods of :class:`FTP` instances may raise as a result of problems with the FTP connection (as opposed to programming errors made by the caller).  This set includes the four exceptions listed above as well as :exc:`socket.error` and :exc:`IOError`."
msgstr ""

msgid "Parser for the :file:`.netrc` file format.  The file :file:`.netrc` is typically used by FTP clients to load user authentication information before prompting the user."
msgstr ""

msgid "The file :file:`Tools/scripts/ftpmirror.py` in the Python source distribution is a script that can mirror FTP sites, or portions thereof, using the :mod:`ftplib` module. It can be used as an extended example that applies this module."
msgstr ""

msgid "FTP Objects"
msgstr ""

msgid "Several methods are available in two flavors: one for handling text files and another for binary files.  These are named for the command which is used followed by ``lines`` for the text version or ``binary`` for the binary version."
msgstr ""

msgid ":class:`FTP` instances have the following methods:"
msgstr ""

msgid "Set the instance's debugging level.  This controls the amount of debugging output printed.  The default, ``0``, produces no debugging output.  A value of ``1`` produces a moderate amount of debugging output, generally a single line per request.  A value of ``2`` or higher produces the maximum amount of debugging output, logging each line sent and received on the control connection."
msgstr ""

msgid "Connect to the given host and port.  The default port number is ``21``, as specified by the FTP protocol specification.  It is rarely needed to specify a different port number.  This function should be called only once for each instance; it should not be called at all if a host was given when the instance was created.  All other methods can only be used after a connection has been made."
msgstr ""

msgid "The optional *timeout* parameter specifies a timeout in seconds for the connection attempt. If no *timeout* is passed, the global default timeout setting will be used."
msgstr ""

msgid "Return the welcome message sent by the server in reply to the initial connection.  (This message sometimes contains disclaimers or help information that may be relevant to the user.)"
msgstr ""

msgid "Log in as the given *user*.  The *passwd* and *acct* parameters are optional and default to the empty string.  If no *user* is specified, it defaults to ``'anonymous'``.  If *user* is ``'anonymous'``, the default *passwd* is ``'anonymous@'``.  This function should be called only once for each instance, after a connection has been established; it should not be called at all if a host and user were given when the instance was created.  Most FTP commands are only allowed after the client has logged in.  The *acct* parameter supplies \"accounting information\"; few systems implement this."
msgstr ""

msgid "Abort a file transfer that is in progress.  Using this does not always work, but it's worth a try."
msgstr ""

msgid "Send a simple command string to the server and return the response string."
msgstr ""

msgid "Send a simple command string to the server and handle the response. Return nothing if a response code in the range 200--299 is received. Raise an exception otherwise."
msgstr ""

msgid "Retrieve a file in binary transfer mode.  *cmd* should be an appropriate ``RETR`` command: ``'RETR filename'``. The *callback* function is called for each block of data received, with a single string argument giving the data block. The optional *blocksize* argument specifies the maximum chunk size to read on the low-level socket object created to do the actual transfer (which will also be the largest size of the data blocks passed to *callback*).  A reasonable default is chosen. *rest* means the same thing as in the :meth:`transfercmd` method."
msgstr ""

msgid "Retrieve a file or directory listing in ASCII transfer mode.  *cmd* should be an appropriate ``RETR`` command (see :meth:`retrbinary`) or a command such as ``LIST``, ``NLST`` or ``MLSD`` (usually just the string ``'LIST'``).  The *callback* function is called for each line, with the trailing CRLF stripped.  The default *callback* prints the line to ``sys.stdout``."
msgstr ""

msgid "Enable \"passive\" mode if *boolean* is true, other disable passive mode. Passive mode is on by default."
msgstr ""

msgid "Store a file in binary transfer mode.  *cmd* should be an appropriate ``STOR`` command: ``\"STOR filename\"``. *file* is an open file object which is read until EOF using its :meth:`read` method in blocks of size *blocksize* to provide the data to be stored.  The *blocksize* argument defaults to 8192. *callback* is an optional single parameter callable that is called on each block of data after it is sent. *rest* means the same thing as in the :meth:`transfercmd` method."
msgstr ""

msgid "Store a file in ASCII transfer mode.  *cmd* should be an appropriate ``STOR`` command (see :meth:`storbinary`).  Lines are read until EOF from the open file object *file* using its :meth:`readline` method to provide the data to be stored.  *callback* is an optional single parameter callable that is called on each line after it is sent."
msgstr ""

msgid "Initiate a transfer over the data connection.  If the transfer is active, send a ``EPRT`` or  ``PORT`` command and the transfer command specified by *cmd*, and accept the connection.  If the server is passive, send a ``EPSV`` or ``PASV`` command, connect to it, and start the transfer command.  Either way, return the socket for the connection."
msgstr ""

msgid "If optional *rest* is given, a ``REST`` command is sent to the server, passing *rest* as an argument.  *rest* is usually a byte offset into the requested file, telling the server to restart sending the file's bytes at the requested offset, skipping over the initial bytes.  Note however that RFC 959 requires only that *rest* be a string containing characters in the printable range from ASCII code 33 to ASCII code 126.  The :meth:`transfercmd` method, therefore, converts *rest* to a string, but no check is performed on the string's contents.  If the server does not recognize the ``REST`` command, an :exc:`error_reply` exception will be raised.  If this happens, simply call :meth:`transfercmd` without a *rest* argument."
msgstr ""

msgid "Like :meth:`transfercmd`, but returns a tuple of the data connection and the expected size of the data.  If the expected size could not be computed, ``None`` will be returned as the expected size.  *cmd* and *rest* means the same thing as in :meth:`transfercmd`."
msgstr ""

msgid "Return a list of files as returned by the ``NLST`` command.  The optional *argument* is a directory to list (default is the current server directory). Multiple arguments can be used to pass non-standard options to the ``NLST`` command."
msgstr ""

msgid "Produce a directory listing as returned by the ``LIST`` command, printing it to standard output.  The optional *argument* is a directory to list (default is the current server directory).  Multiple arguments can be used to pass non-standard options to the ``LIST`` command.  If the last argument is a function, it is used as a *callback* function as for :meth:`retrlines`; the default prints to ``sys.stdout``.  This method returns ``None``."
msgstr ""

msgid "Rename file *fromname* on the server to *toname*."
msgstr ""

msgid "Remove the file named *filename* from the server.  If successful, returns the text of the response, otherwise raises :exc:`error_perm` on permission errors or :exc:`error_reply` on other errors."
msgstr ""

msgid "Set the current directory on the server."
msgstr ""

msgid "Create a new directory on the server."
msgstr ""

msgid "Return the pathname of the current directory on the server."
msgstr ""

msgid "Remove the directory named *dirname* on the server."
msgstr ""

msgid "Request the size of the file named *filename* on the server.  On success, the size of the file is returned as an integer, otherwise ``None`` is returned. Note that the ``SIZE`` command is not  standardized, but is supported by many common server implementations."
msgstr ""

msgid "Send a ``QUIT`` command to the server and close the connection. This is the \"polite\" way to close a connection, but it may raise an exception if the server responds with an error to the ``QUIT`` command.  This implies a call to the :meth:`close` method which renders the :class:`FTP` instance useless for subsequent calls (see below)."
msgstr ""

msgid "Close the connection unilaterally.  This should not be applied to an already closed connection such as after a successful call to :meth:`quit`.  After this call the :class:`FTP` instance should not be used any more (after a call to :meth:`close` or :meth:`quit` you cannot reopen the connection by issuing another :meth:`login` method)."
msgstr ""

msgid "FTP_TLS Objects"
msgstr ""

msgid ":class:`FTP_TLS` class inherits from :class:`FTP`, defining these additional objects:"
msgstr ""

msgid "The SSL version to use (defaults to *TLSv1*)."
msgstr ""

msgid "Set up secure control connection by using TLS or SSL, depending on what specified in :meth:`ssl_version` attribute."
msgstr ""

msgid "Set up secure data connection."
msgstr ""

msgid "Set up clear text data connection."
msgstr ""

msgid "Built-in Functions"
msgstr ""

msgid "The Python interpreter has a number of functions and types built into it that are always available.  They are listed here in alphabetical order."
msgstr ""

msgid "Return the absolute value of a number.  The argument may be an integer or a floating point number.  If the argument is a complex number, its magnitude is returned."
msgstr ""

msgid "Return True if all elements of the *iterable* are true (or if the iterable is empty).  Equivalent to::"
msgstr ""

msgid "def all(iterable):     for element in iterable:         if not element:             return False     return True"
msgstr ""

msgid "Return True if any element of the *iterable* is true.  If the iterable is empty, return False.  Equivalent to::"
msgstr ""

msgid "def any(iterable):     for element in iterable:         if element:             return True     return False"
msgstr ""

msgid "As :func:`repr`, return a string containing a printable representation of an object, but escape the non-ASCII characters in the string returned by :func:`repr` using ``\\x``, ``\\u`` or ``\\U`` escapes.  This generates a string similar to that returned by :func:`repr` in Python 2."
msgstr ""

msgid "Convert an integer number to a binary string. The result is a valid Python expression.  If *x* is not a Python :class:`int` object, it has to define an :meth:`__index__` method that returns an integer."
msgstr ""

msgid "Convert a value to a Boolean, using the standard truth testing procedure.  If *x* is false or omitted, this returns :const:`False`; otherwise it returns :const:`True`. :class:`bool` is also a class, which is a subclass of :class:`int`. Class :class:`bool` cannot be subclassed further.  Its only instances are :const:`False` and :const:`True`."
msgstr ""

msgid "Return a new array of bytes.  The :class:`bytearray` type is a mutable sequence of integers in the range 0 <= x < 256.  It has most of the usual methods of mutable sequences, described in :ref:`typesseq-mutable`, as well as most methods that the :class:`str` type has, see :ref:`bytes-methods`."
msgstr ""

msgid "The optional *source* parameter can be used to initialize the array in a few different ways:"
msgstr ""

msgid "If it is a *string*, you must also give the *encoding* (and optionally, *errors*) parameters; :func:`bytearray` then converts the string to bytes using :meth:`str.encode`."
msgstr ""

msgid "If it is an *integer*, the array will have that size and will be initialized with null bytes."
msgstr ""

msgid "If it is an object conforming to the *buffer* interface, a read-only buffer of the object will be used to initialize the bytes array."
msgstr ""

msgid "If it is an *iterable*, it must be an iterable of integers in the range ``0 <= x < 256``, which are used as the initial contents of the array."
msgstr ""

msgid "Without an argument, an array of size 0 is created."
msgstr ""

msgid "Return a new \"bytes\" object, which is an immutable sequence of integers in the range ``0 <= x < 256``.  :class:`bytes` is an immutable version of :class:`bytearray` -- it has the same non-mutating methods and the same indexing and slicing behavior."
msgstr ""

msgid "Accordingly, constructor arguments are interpreted as for :func:`bytearray`."
msgstr ""

msgid "Bytes objects can also be created with literals, see :ref:`strings`."
msgstr ""

msgid "Return the string of one character whose Unicode codepoint is the integer *i*.  For example, ``chr(97)`` returns the string ``'a'``. This is the inverse of :func:`ord`.  The valid range for the argument depends how Python was configured -- it may be either UCS2 [0..0xFFFF] or UCS4 [0..0x10FFFF]. :exc:`ValueError` will be raised if *i* is outside that range."
msgstr ""

msgid "Return a class method for *function*."
msgstr ""

msgid "A class method receives the class as implicit first argument, just like an instance method receives the instance. To declare a class method, use this idiom::"
msgstr ""

msgid "class C:     @classmethod     def f(cls, arg1, arg2, ...): ..."
msgstr ""

msgid "The ``@classmethod`` form is a function :term:`decorator` -- see the description of function definitions in :ref:`function` for details."
msgstr ""

msgid "It can be called either on the class (such as ``C.f()``) or on an instance (such as ``C().f()``).  The instance is ignored except for its class. If a class method is called for a derived class, the derived class object is passed as the implied first argument."
msgstr ""

msgid "Class methods are different than C++ or Java static methods. If you want those, see :func:`staticmethod` in this section."
msgstr ""

msgid "For more information on class methods, consult the documentation on the standard type hierarchy in :ref:`types`."
msgstr ""

msgid "Compile the *source* into a code or AST object.  Code objects can be executed by :func:`exec` or :func:`eval`.  *source* can either be a string or an AST object.  Refer to the :mod:`ast` module documentation for information on how to work with AST objects."
msgstr ""

msgid "The *filename* argument should give the file from which the code was read; pass some recognizable value if it wasn't read from a file (``'<string>'`` is commonly used)."
msgstr ""

msgid "The *mode* argument specifies what kind of code must be compiled; it can be ``'exec'`` if *source* consists of a sequence of statements, ``'eval'`` if it consists of a single expression, or ``'single'`` if it consists of a single interactive statement (in the latter case, expression statements that evaluate to something other than ``None`` will be printed)."
msgstr ""

msgid "The optional arguments *flags* and *dont_inherit* control which future statements (see :pep:`236`) affect the compilation of *source*.  If neither is present (or both are zero) the code is compiled with those future statements that are in effect in the code that is calling compile.  If the *flags* argument is given and *dont_inherit* is not (or is zero) then the future statements specified by the *flags* argument are used in addition to those that would be used anyway. If *dont_inherit* is a non-zero integer then the *flags* argument is it -- the future statements in effect around the call to compile are ignored."
msgstr ""

msgid "Future statements are specified by bits which can be bitwise ORed together to specify multiple statements.  The bitfield required to specify a given feature can be found as the :attr:`compiler_flag` attribute on the :class:`_Feature` instance in the :mod:`__future__` module."
msgstr ""

msgid "This function raises :exc:`SyntaxError` if the compiled source is invalid, and :exc:`TypeError` if the source contains null bytes."
msgstr ""

msgid "When compiling a string with multi-line code in ``'single'`` or ``'eval'`` mode, input must be terminated by at least one newline character.  This is to facilitate detection of incomplete and complete statements in the :mod:`code` module."
msgstr ""

msgid "Create a complex number with the value *real* + *imag*\\*j or convert a string or number to a complex number.  If the first parameter is a string, it will be interpreted as a complex number and the function must be called without a second parameter.  The second parameter can never be a string. Each argument may be any numeric type (including complex). If *imag* is omitted, it defaults to zero and the function serves as a numeric conversion function like :func:`int` and :func:`float`.  If both arguments are omitted, returns ``0j``."
msgstr ""

msgid "The complex type is described in :ref:`typesnumeric`."
msgstr ""

msgid "This is a relative of :func:`setattr`.  The arguments are an object and a string.  The string must be the name of one of the object's attributes.  The function deletes the named attribute, provided the object allows it.  For example, ``delattr(x, 'foobar')`` is equivalent to ``del x.foobar``."
msgstr ""

msgid "Create a new data dictionary, optionally with items taken from *arg*. The dictionary type is described in :ref:`typesmapping`."
msgstr ""

msgid "For other containers see the built in :class:`list`, :class:`set`, and :class:`tuple` classes, and the :mod:`collections` module."
msgstr ""

msgid "Without arguments, return the list of names in the current local scope.  With an argument, attempt to return a list of valid attributes for that object."
msgstr ""

msgid "If the object has a method named :meth:`__dir__`, this method will be called and must return the list of attributes. This allows objects that implement a custom :func:`__getattr__` or :func:`__getattribute__` function to customize the way :func:`dir` reports their attributes."
msgstr ""

msgid "If the object does not provide :meth:`__dir__`, the function tries its best to gather information from the object's :attr:`__dict__` attribute, if defined, and from its type object.  The resulting list is not necessarily complete, and may be inaccurate when the object has a custom :func:`__getattr__`."
msgstr ""

msgid "The default :func:`dir` mechanism behaves differently with different types of objects, as it attempts to produce the most relevant, rather than complete, information:"
msgstr ""

msgid "If the object is a module object, the list contains the names of the module's attributes."
msgstr ""

msgid "If the object is a type or class object, the list contains the names of its attributes, and recursively of the attributes of its bases."
msgstr ""

msgid "Otherwise, the list contains the object's attributes' names, the names of its class's attributes, and recursively of the attributes of its class's base classes."
msgstr ""

msgid "The resulting list is sorted alphabetically.  For example:"
msgstr ""

msgid ">>> import struct >>> dir()   # doctest: +SKIP ['__builtins__', '__doc__', '__name__', 'struct'] >>> dir(struct)   # doctest: +NORMALIZE_WHITESPACE ['Struct', '__builtins__', '__doc__', '__file__', '__name__',  '__package__', '_clearcache', 'calcsize', 'error', 'pack', 'pack_into',  'unpack', 'unpack_from'] >>> class Foo(object): ...     def __dir__(self): ...         return [\"kan\", \"ga\", \"roo\"] ... >>> f = Foo() >>> dir(f) ['ga', 'kan', 'roo']"
msgstr ""

msgid "Because :func:`dir` is supplied primarily as a convenience for use at an interactive prompt, it tries to supply an interesting set of names more than it tries to supply a rigorously or consistently defined set of names, and its detailed behavior may change across releases.  For example, metaclass attributes are not in the result list when the argument is a class."
msgstr ""

msgid "Take two (non complex) numbers as arguments and return a pair of numbers consisting of their quotient and remainder when using integer division.  With mixed operand types, the rules for binary arithmetic operators apply.  For integers, the result is the same as ``(a // b, a % b)``. For floating point numbers the result is ``(q, a % b)``, where *q* is usually ``math.floor(a / b)`` but may be 1 less than that.  In any case ``q * b + a % b`` is very close to *a*, if ``a % b`` is non-zero it has the same sign as *b*, and ``0 <= abs(a % b) < abs(b)``."
msgstr ""

msgid "Return an enumerate object. *iterable* must be a sequence, an :term:`iterator`, or some other object which supports iteration.  The :meth:`__next__` method of the iterator returned by :func:`enumerate` returns a tuple containing a count (from *start* which defaults to 0) and the corresponding value obtained from iterating over *iterable*. :func:`enumerate` is useful for obtaining an indexed series: ``(0, seq[0])``, ``(1, seq[1])``, ``(2, seq[2])``, .... For example:"
msgstr ""

msgid ">>> for i, season in enumerate(['Spring', 'Summer', 'Fall', 'Winter']): ...     print(i, season) 0 Spring 1 Summer 2 Fall 3 Winter"
msgstr ""

msgid "The arguments are a string and optional globals and locals.  If provided, *globals* must be a dictionary.  If provided, *locals* can be any mapping object."
msgstr ""

msgid "The *expression* argument is parsed and evaluated as a Python expression (technically speaking, a condition list) using the *globals* and *locals* dictionaries as global and local namespace.  If the *globals* dictionary is present and lacks '__builtins__', the current globals are copied into *globals* before *expression* is parsed.  This means that *expression* normally has full access to the standard :mod:`builtins` module and restricted environments are propagated.  If the *locals* dictionary is omitted it defaults to the *globals* dictionary.  If both dictionaries are omitted, the expression is executed in the environment where :func:`eval` is called.  The return value is the result of the evaluated expression. Syntax errors are reported as exceptions.  Example:"
msgstr ""

msgid ">>> x = 1 >>> eval('x+1') 2"
msgstr ""

msgid "This function can also be used to execute arbitrary code objects (such as those created by :func:`compile`).  In this case pass a code object instead of a string.  If the code object has been compiled with ``'exec'`` as the *mode* argument, :func:`eval`\\'s return value will be ``None``."
msgstr ""

msgid "Hints: dynamic execution of statements is supported by the :func:`exec` function.  The :func:`globals` and :func:`locals` functions returns the current global and local dictionary, respectively, which may be useful to pass around for use by :func:`eval` or :func:`exec`."
msgstr ""

msgid "This function supports dynamic execution of Python code. *object* must be either a string or a code object.  If it is a string, the string is parsed as a suite of Python statements which is then executed (unless a syntax error occurs). [#]_ If it is a code object, it is simply executed.  In all cases, the code that's executed is expected to be valid as file input (see the section \"File input\" in the Reference Manual). Be aware that the :keyword:`return` and :keyword:`yield` statements may not be used outside of function definitions even within the context of code passed to the :func:`exec` function. The return value is ``None``."
msgstr ""

msgid "In all cases, if the optional parts are omitted, the code is executed in the current scope.  If only *globals* is provided, it must be a dictionary, which will be used for both the global and the local variables.  If *globals* and *locals* are given, they are used for the global and local variables, respectively.  If provided, *locals* can be any mapping object."
msgstr ""

msgid "If the *globals* dictionary does not contain a value for the key ``__builtins__``, a reference to the dictionary of the built-in module :mod:`builtins` is inserted under that key.  That way you can control what builtins are available to the executed code by inserting your own ``__builtins__`` dictionary into *globals* before passing it to :func:`exec`."
msgstr ""

msgid "The built-in functions :func:`globals` and :func:`locals` return the current global and local dictionary, respectively, which may be useful to pass around for use as the second and third argument to :func:`exec`."
msgstr ""

msgid "The default *locals* act as described for function :func:`locals` below: modifications to the default *locals* dictionary should not be attempted. Pass an explicit *locals* dictionary if you need to see effects of the code on *locals* after function :func:`exec` returns."
msgstr ""

msgid "Construct an iterator from those elements of *iterable* for which *function* returns true.  *iterable* may be either a sequence, a container which supports iteration, or an iterator.  If *function* is ``None``, the identity function is assumed, that is, all elements of *iterable* that are false are removed."
msgstr ""

msgid "Note that ``filter(function, iterable)`` is equivalent to the generator expression ``(item for item in iterable if function(item))`` if function is not ``None`` and ``(item for item in iterable if item)`` if function is ``None``."
msgstr ""

msgid "See :func:`itertools.filterfalse` for the complementary function that returns elements of *iterable* for which *function* returns false."
msgstr ""

msgid "Convert a string or a number to floating point.  If the argument is a string, it must contain a possibly signed decimal or floating point number, possibly embedded in whitespace. The argument may also be ``'[+|-]nan'`` or ``'[+|-]inf'``.  Otherwise, the argument may be an integer or a floating point number, and a floating point number with the same value (within Python's floating point precision) is returned.  If no argument is given, ``0.0`` is returned."
msgstr ""

msgid "When passing in a string, values for NaN and Infinity may be returned, depending on the underlying C library.  Float accepts the strings ``'nan'``, ``'inf'`` and ``'-inf'`` for NaN and positive or negative infinity.  The case and a leading + are ignored as well as a leading - is ignored for NaN.  Float always represents NaN and infinity as ``nan``, ``inf`` or ``-inf``."
msgstr ""

msgid "The float type is described in :ref:`typesnumeric`."
msgstr ""

msgid "Convert a *value* to a \"formatted\" representation, as controlled by *format_spec*.  The interpretation of *format_spec* will depend on the type of the *value* argument, however there is a standard formatting syntax that is used by most built-in types: :ref:`formatspec`."
msgstr ""

msgid "``format(value, format_spec)`` merely calls ``value.__format__(format_spec)``."
msgstr ""

msgid "Return a frozenset object, optionally with elements taken from *iterable*. The frozenset type is described in :ref:`types-set`."
msgstr ""

msgid "For other containers see the built in :class:`dict`, :class:`list`, and :class:`tuple` classes, and the :mod:`collections` module."
msgstr ""

msgid "Return the value of the named attributed of *object*.  *name* must be a string. If the string is the name of one of the object's attributes, the result is the value of that attribute.  For example, ``getattr(x, 'foobar')`` is equivalent to ``x.foobar``.  If the named attribute does not exist, *default* is returned if provided, otherwise :exc:`AttributeError` is raised."
msgstr ""

msgid "Return a dictionary representing the current global symbol table. This is always the dictionary of the current module (inside a function or method, this is the module where it is defined, not the module from which it is called)."
msgstr ""

msgid "The arguments are an object and a string.  The result is ``True`` if the string is the name of one of the object's attributes, ``False`` if not. (This is implemented by calling ``getattr(object, name)`` and seeing whether it raises an exception or not.)"
msgstr ""

msgid "Return the hash value of the object (if it has one).  Hash values are integers. They are used to quickly compare dictionary keys during a dictionary lookup. Numeric values that compare equal have the same hash value (even if they are of different types, as is the case for 1 and 1.0)."
msgstr ""

msgid "Invoke the built-in help system.  (This function is intended for interactive use.)  If no argument is given, the interactive help system starts on the interpreter console.  If the argument is a string, then the string is looked up as the name of a module, function, class, method, keyword, or documentation topic, and a help page is printed on the console.  If the argument is any other kind of object, a help page on the object is generated."
msgstr ""

msgid "This function is added to the built-in namespace by the :mod:`site` module."
msgstr ""

msgid "Convert an integer number to a hexadecimal string. The result is a valid Python expression.  If *x* is not a Python :class:`int` object, it has to define an :meth:`__index__` method that returns an integer."
msgstr ""

msgid "To obtain a hexadecimal string representation for a float, use the :meth:`float.hex` method."
msgstr ""

msgid "Return the \"identity\" of an object.  This is an integer which is guaranteed to be unique and constant for this object during its lifetime. Two objects with non-overlapping lifetimes may have the same :func:`id` value."
msgstr ""

msgid "If the *prompt* argument is present, it is written to standard output without a trailing newline.  The function then reads a line from input, converts it to a string (stripping a trailing newline), and returns that.  When EOF is read, :exc:`EOFError` is raised.  Example::"
msgstr ""

msgid ">>> s = input('--> ') --> Monty Python's Flying Circus >>> s \"Monty Python's Flying Circus\""
msgstr ""

msgid "If the :mod:`readline` module was loaded, then :func:`input` will use it to provide elaborate line editing and history features."
msgstr ""

msgid "Convert a number or string to an integer.  If no arguments are given, return ``0``.  If a number is given, return ``number.__int__()``.  Conversion of floating point numbers to integers truncates towards zero.  A string must be a base-radix integer literal optionally preceded by '+' or '-' (with no space in between) and optionally surrounded by whitespace.  A base-n literal consists of the digits 0 to n-1, with 'a' to 'z' (or 'A' to 'Z') having values 10 to 35.  The default *base* is 10. The allowed values are 0 and 2-36. Base-2, -8, and -16 literals can be optionally prefixed with ``0b``/``0B``, ``0o``/``0O``, or ``0x``/``0X``, as with integer literals in code.  Base 0 means to interpret exactly as a code literal, so that the actual base is 2, 8, 10, or 16, and so that ``int('010', 0)`` is not legal, while ``int('010')`` is, as well as ``int('010', 8)``."
msgstr ""

msgid "The integer type is described in :ref:`typesnumeric`."
msgstr ""

msgid "Return true if the *object* argument is an instance of the *classinfo* argument, or of a (direct or indirect) subclass thereof.  If *object* is not an object of the given type, the function always returns false.  If *classinfo* is not a class (type object), it may be a tuple of type objects, or may recursively contain other such tuples (other sequence types are not accepted).  If *classinfo* is not a type or tuple of types and such tuples, a :exc:`TypeError` exception is raised."
msgstr ""

msgid "Return true if *class* is a subclass (direct or indirect) of *classinfo*.  A class is considered a subclass of itself. *classinfo* may be a tuple of class objects, in which case every entry in *classinfo* will be checked. In any other case, a :exc:`TypeError` exception is raised."
msgstr ""

msgid "Return an :term:`iterator` object.  The first argument is interpreted very differently depending on the presence of the second argument. Without a second argument, *object* must be a collection object which supports the iteration protocol (the :meth:`__iter__` method), or it must support the sequence protocol (the :meth:`__getitem__` method with integer arguments starting at ``0``).  If it does not support either of those protocols, :exc:`TypeError` is raised. If the second argument, *sentinel*, is given, then *object* must be a callable object.  The iterator created in this case will call *object* with no arguments for each call to its :meth:`__next__` method; if the value returned is equal to *sentinel*, :exc:`StopIteration` will be raised, otherwise the value will be returned."
msgstr ""

msgid "One useful application of the second form of :func:`iter` is to read lines of a file until a certain line is reached.  The following example reads a file until ``\"STOP\"`` is reached: ::"
msgstr ""

msgid "with open(\"mydata.txt\") as fp:     for line in iter(fp.readline, \"STOP\"):         process_line(line)"
msgstr ""

msgid "Return the length (the number of items) of an object.  The argument may be a sequence (string, tuple or list) or a mapping (dictionary)."
msgstr ""

msgid "Return a list whose items are the same and in the same order as *iterable*'s items.  *iterable* may be either a sequence, a container that supports iteration, or an iterator object.  If *iterable* is already a list, a copy is made and returned, similar to ``iterable[:]``.  For instance, ``list('abc')`` returns ``['a', 'b', 'c']`` and ``list( (1, 2, 3) )`` returns ``[1, 2, 3]``. If no argument is given, returns a new empty list, ``[]``."
msgstr ""

msgid ":class:`list` is a mutable sequence type, as documented in :ref:`typesseq`."
msgstr ""

msgid "Update and return a dictionary representing the current local symbol table. Free variables are returned by :func:`locals` when it is called in function blocks, but not in class blocks."
msgstr ""

msgid "The contents of this dictionary should not be modified; changes may not affect the values of local and free variables used by the interpreter."
msgstr ""

msgid "Return an iterator that applies *function* to every item of *iterable*, yielding the results.  If additional *iterable* arguments are passed, *function* must take that many arguments and is applied to the items from all iterables in parallel.  With multiple iterables, the iterator stops when the shortest iterable is exhausted.  For cases where the function inputs are already arranged into argument tuples, see :func:`itertools.starmap`\\."
msgstr ""

msgid "With a single argument *iterable*, return the largest item of a non-empty iterable (such as a string, tuple or list).  With more than one argument, return the largest of the arguments."
msgstr ""

msgid "The optional keyword-only *key* argument specifies a one-argument ordering function like that used for :meth:`list.sort`."
msgstr ""

msgid "Return a \"memory view\" object created from the given argument.  See :ref:`typememoryview` for more information."
msgstr ""

msgid "With a single argument *iterable*, return the smallest item of a non-empty iterable (such as a string, tuple or list).  With more than one argument, return the smallest of the arguments."
msgstr ""

msgid "Retrieve the next item from the *iterator* by calling its :meth:`__next__` method.  If *default* is given, it is returned if the iterator is exhausted, otherwise :exc:`StopIteration` is raised."
msgstr ""

msgid "Return a new featureless object.  :class:`object` is a base for all classes. It has the methods that are common to all instances of Python classes.  This function does not accept any arguments."
msgstr ""

msgid ":class:`object` does *not* have a :attr:`__dict__`, so you can't assign arbitrary attributes to an instance of the :class:`object` class."
msgstr ""

msgid "Convert an integer number to an octal string.  The result is a valid Python expression.  If *x* is not a Python :class:`int` object, it has to define an :meth:`__index__` method that returns an integer."
msgstr ""

msgid "Open *file* and return a corresponding stream.  If the file cannot be opened, an :exc:`IOError` is raised."
msgstr ""

msgid "*file* is either a string or bytes object giving the name (and the path if the file isn't in the current working directory) of the file to be opened or an integer file descriptor of the file to be wrapped.  (If a file descriptor is given, it is closed when the returned I/O object is closed, unless *closefd* is set to ``False``.)"
msgstr ""

msgid "*mode* is an optional string that specifies the mode in which the file is opened.  The available modes are:"
msgstr ""

msgid "Character"
msgstr ""

msgid "open for reading (default)"
msgstr ""

msgid "open for writing, truncating the file first if it exists"
msgstr ""

msgid "``'a'``"
msgstr ""

msgid "open for writing, appending to the end of the file if it exists"
msgstr ""

msgid "Several characters can be appended that modify the given mode:"
msgstr ""

msgid "``'t'``"
msgstr ""

msgid "text mode (default)"
msgstr ""

msgid "binary mode"
msgstr ""

msgid "``'+'``"
msgstr ""

msgid "open for updating (reading and writing)"
msgstr ""

msgid "``'U'``"
msgstr ""

msgid "universal newline mode (for backwards compatibility; should not be used in new code)"
msgstr ""

msgid "The mode ``'w+'`` opens and truncates the file to 0 bytes, while ``'r+'`` opens the file without truncation.  On *some* Unix systems, append mode means that *all* writes append to the end of the file regardless of the current seek position."
msgstr ""

msgid "Python distinguishes between files opened in binary and text modes, even when the underlying operating system doesn't.  Files opened in binary mode (including ``'b'`` in the *mode* argument) return contents as ``bytes`` objects without any decoding.  In text mode (the default, or when ``'t'`` is included in the *mode* argument), the contents of the file are returned as strings, the bytes having been first decoded using the specified *encoding*. If *encoding* is not specified, a platform-dependent default encoding is used, see below."
msgstr ""

msgid "*buffering* is an optional integer used to set the buffering policy.  By default full buffering is on.  Pass 0 to switch buffering off (only allowed in binary mode), 1 to set line buffering, and an integer > 1 to indicate the size of the buffer."
msgstr ""

msgid "*encoding* is the name of the encoding used to decode or encode the file. This should only be used in text mode.  The default encoding is platform dependent (whatever :func:`locale.getpreferredencoding` returns), but any encoding supported by Python can be used.  See the :mod:`codecs` module for the list of supported encodings."
msgstr ""

msgid "*errors* is an optional string that specifies how encoding and decoding errors are to be handled--this cannot be used in binary mode.  Pass ``'strict'`` to raise a :exc:`ValueError` exception if there is an encoding error (the default of ``None`` has the same effect), or pass ``'ignore'`` to ignore errors.  (Note that ignoring encoding errors can lead to data loss.) ``'replace'`` causes a replacement marker (such as ``'?'``) to be inserted where there is malformed data.  When writing, ``'xmlcharrefreplace'`` (replace with the appropriate XML character reference) or ``'backslashreplace'`` (replace with backslashed escape sequences) can be used.  Any other error handling name that has been registered with :func:`codecs.register_error` is also valid."
msgstr ""

msgid "*newline* controls how universal newlines works (it only applies to text mode).  It can be ``None``, ``''``, ``'\\n'``, ``'\\r'``, and ``'\\r\\n'``.  It works as follows:"
msgstr ""

msgid "On input, if *newline* is ``None``, universal newlines mode is enabled. Lines in the input can end in ``'\\n'``, ``'\\r'``, or ``'\\r\\n'``, and these are translated into ``'\\n'`` before being returned to the caller.  If it is ``''``, universal newline mode is enabled, but line endings are returned to the caller untranslated.  If it has any of the other legal values, input lines are only terminated by the given string, and the line ending is returned to the caller untranslated."
msgstr ""

msgid "On output, if *newline* is ``None``, any ``'\\n'`` characters written are translated to the system default line separator, :data:`os.linesep`.  If *newline* is ``''``, no translation takes place.  If *newline* is any of the other legal values, any ``'\\n'`` characters written are translated to the given string."
msgstr ""

msgid "If *closefd* is ``False`` and a file descriptor rather than a filename was given, the underlying file descriptor will be kept open when the file is closed.  If a filename is given *closefd* has no effect and must be ``True`` (the default)."
msgstr ""

msgid "The type of file object returned by the :func:`open` function depends on the mode.  When :func:`open` is used to open a file in a text mode (``'w'``, ``'r'``, ``'wt'``, ``'rt'``, etc.), it returns a subclass of :class:`io.TextIOBase` (specifically :class:`io.TextIOWrapper`).  When used to open a file in a binary mode with buffering, the returned class is a subclass of :class:`io.BufferedIOBase`.  The exact class varies: in read binary mode, it returns a :class:`io.BufferedReader`; in write binary and append binary modes, it returns a :class:`io.BufferedWriter`, and in read/write mode, it returns a :class:`io.BufferedRandom`.  When buffering is disabled, the raw stream, a subclass of :class:`io.RawIOBase`, :class:`io.FileIO`, is returned."
msgstr ""

msgid "See also the file handling modules, such as, :mod:`fileinput`, :mod:`io` (where :func:`open` is declared), :mod:`os`, :mod:`os.path`, :mod:`tempfile`, and :mod:`shutil`."
msgstr ""

msgid "Given a string of length one, return an integer representing the Unicode code point of the character.  For example, ``ord('a')`` returns the integer ``97`` and ``ord('\\u2020')`` returns ``8224``.  This is the inverse of :func:`chr`."
msgstr ""

msgid "If the argument length is not one, a :exc:`TypeError` will be raised.  (If Python was built with UCS2 Unicode, then the character's code point must be in the range [0..65535] inclusive; otherwise the string length is two!)"
msgstr ""

msgid "Return *x* to the power *y*; if *z* is present, return *x* to the power *y*, modulo *z* (computed more efficiently than ``pow(x, y) % z``). The two-argument form ``pow(x, y)`` is equivalent to using the power operator: ``x**y``."
msgstr ""

msgid "The arguments must have numeric types.  With mixed operand types, the coercion rules for binary arithmetic operators apply.  For :class:`int` operands, the result has the same type as the operands (after coercion) unless the second argument is negative; in that case, all arguments are converted to float and a float result is delivered.  For example, ``10**2`` returns ``100``, but ``10**-2`` returns ``0.01``.  If the second argument is negative, the third argument must be omitted.  If *z* is present, *x* and *y* must be of integer types, and *y* must be non-negative."
msgstr ""

msgid "Print *object*\\(s) to the stream *file*, separated by *sep* and followed by *end*.  *sep*, *end* and *file*, if present, must be given as keyword arguments."
msgstr ""

msgid "All non-keyword arguments are converted to strings like :func:`str` does and written to the stream, separated by *sep* and followed by *end*.  Both *sep* and *end* must be strings; they can also be ``None``, which means to use the default values.  If no *object* is given, :func:`print` will just write *end*."
msgstr ""

msgid "The *file* argument must be an object with a ``write(string)`` method; if it is not present or ``None``, :data:`sys.stdout` will be used."
msgstr ""

msgid "Return a property attribute."
msgstr ""

msgid "*fget* is a function for getting an attribute value, likewise *fset* is a function for setting, and *fdel* a function for del'ing, an attribute.  Typical use is to define a managed attribute x::"
msgstr ""

msgid "class C(object):     def __init__(self):         self._x = None      def getx(self):         return self._x     def setx(self, value):         self._x = value     def delx(self):         del self._x     x = property(getx, setx, delx, \"I'm the 'x' property.\")"
msgstr ""

msgid "If given, *doc* will be the docstring of the property attribute. Otherwise, the property will copy *fget*'s docstring (if it exists).  This makes it possible to create read-only properties easily using :func:`property` as a :term:`decorator`::"
msgstr ""

msgid "class Parrot(object):     def __init__(self):         self._voltage = 100000      @property     def voltage(self):         \"\"\"Get the current voltage.\"\"\"         return self._voltage"
msgstr ""

msgid "turns the :meth:`voltage` method into a \"getter\" for a read-only attribute with the same name."
msgstr ""

msgid "A property object has :attr:`getter`, :attr:`setter`, and :attr:`deleter` methods usable as decorators that create a copy of the property with the corresponding accessor function set to the decorated function.  This is best explained with an example::"
msgstr ""

msgid "class C(object):     def __init__(self):         self._x = None      @property     def x(self):         \"\"\"I'm the 'x' property.\"\"\"         return self._x      @x.setter     def x(self, value):         self._x = value      @x.deleter     def x(self):         del self._x"
msgstr ""

msgid "This code is exactly equivalent to the first example.  Be sure to give the additional functions the same name as the original property (``x`` in this case.)"
msgstr ""

msgid "The returned property also has the attributes ``fget``, ``fset``, and ``fdel`` corresponding to the constructor arguments."
msgstr ""

msgid "This is a versatile function to create iterables yielding arithmetic progressions.  It is most often used in :keyword:`for` loops.  The arguments must be integers.  If the *step* argument is omitted, it defaults to ``1``. If the *start* argument is omitted, it defaults to ``0``.  The full form returns an iterable of integers ``[start, start + step, start + 2 * step, ...]``.  If *step* is positive, the last element is the largest ``start + i * step`` less than *stop*; if *step* is negative, the last element is the smallest ``start + i * step`` greater than *stop*.  *step* must not be zero (or else :exc:`ValueError` is raised).  Example:"
msgstr ""

msgid ">>> list(range(10)) [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] >>> list(range(1, 11)) [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] >>> list(range(0, 30, 5)) [0, 5, 10, 15, 20, 25] >>> list(range(0, 10, 3)) [0, 3, 6, 9] >>> list(range(0, -10, -1)) [0, -1, -2, -3, -4, -5, -6, -7, -8, -9] >>> list(range(0)) [] >>> list(range(1, 0)) []"
msgstr ""

msgid "Return a string containing a printable representation of an object.  For many types, this function makes an attempt to return a string that would yield an object with the same value when passed to :func:`eval`, otherwise the representation is a string enclosed in angle brackets that contains the name of the type of the object together with additional information often including the name and address of the object.  A class can control what this function returns for its instances by defining a :meth:`__repr__` method."
msgstr ""

msgid "Return a reverse :term:`iterator`.  *seq* must be an object which has a :meth:`__reversed__` method or supports the sequence protocol (the :meth:`__len__` method and the :meth:`__getitem__` method with integer arguments starting at ``0``)."
msgstr ""

msgid "Return the floating point value *x* rounded to *n* digits after the decimal point.  If *n* is omitted, it defaults to zero.  Delegates to ``x.__round__(n)``."
msgstr ""

msgid "For the built-in types supporting :func:`round`, values are rounded to the closest multiple of 10 to the power minus *n*; if two multiples are equally close, rounding is done toward the even choice (so, for example, both ``round(0.5)`` and ``round(-0.5)`` are ``0``, and ``round(1.5)`` is ``2``). The return value is an integer if called with one argument, otherwise of the same type as *x*."
msgstr ""

msgid "Return a new set, optionally with elements taken from *iterable*. The set type is described in :ref:`types-set`."
msgstr ""

msgid "This is the counterpart of :func:`getattr`.  The arguments are an object, a string and an arbitrary value.  The string may name an existing attribute or a new attribute.  The function assigns the value to the attribute, provided the object allows it.  For example, ``setattr(x, 'foobar', 123)`` is equivalent to ``x.foobar = 123``."
msgstr ""

msgid "Return a :term:`slice` object representing the set of indices specified by ``range(start, stop, step)``.  The *start* and *step* arguments default to ``None``.  Slice objects have read-only data attributes :attr:`start`, :attr:`stop` and :attr:`step` which merely return the argument values (or their default).  They have no other explicit functionality; however they are used by Numerical Python and other third party extensions.  Slice objects are also generated when extended indexing syntax is used.  For example: ``a[start:stop:step]`` or ``a[start:stop, i]``.  See :func:`itertools.islice` for an alternate version that returns an iterator."
msgstr ""

msgid "Return a new sorted list from the items in *iterable*."
msgstr ""

msgid "Has two optional arguments which must be specified as keyword arguments."
msgstr ""

msgid "*key* specifies a function of one argument that is used to extract a comparison key from each list element: ``key=str.lower``.  The default value is ``None`` (compare the elements directly)."
msgstr ""

msgid "*reverse* is a boolean value.  If set to ``True``, then the list elements are sorted as if each comparison were reversed."
msgstr ""

msgid "Use :func:`functools.cmp_to_key` to convert an old-style *cmp* function to a *key* function."
msgstr ""

msgid "For sorting examples and a brief sorting tutorial, see `Sorting HowTo <http://wiki.python.org/moin/HowTo/Sorting/>`_\\."
msgstr ""

msgid "Return a static method for *function*."
msgstr ""

msgid "A static method does not receive an implicit first argument. To declare a static method, use this idiom::"
msgstr ""

msgid "class C:     @staticmethod     def f(arg1, arg2, ...): ..."
msgstr ""

msgid "The ``@staticmethod`` form is a function :term:`decorator` -- see the description of function definitions in :ref:`function` for details."
msgstr ""

msgid "It can be called either on the class (such as ``C.f()``) or on an instance (such as ``C().f()``).  The instance is ignored except for its class."
msgstr ""

msgid "Static methods in Python are similar to those found in Java or C++. For a more advanced concept, see :func:`classmethod` in this section."
msgstr ""

msgid "For more information on static methods, consult the documentation on the standard type hierarchy in :ref:`types`."
msgstr ""

msgid "Return a string version of an object, using one of the following modes:"
msgstr ""

msgid "If *encoding* and/or *errors* are given, :func:`str` will decode the *object* which can either be a byte string or a character buffer using the codec for *encoding*. The *encoding* parameter is a string giving the name of an encoding; if the encoding is not known, :exc:`LookupError` is raised.  Error handling is done according to *errors*; this specifies the treatment of characters which are invalid in the input encoding. If *errors* is ``'strict'`` (the default), a :exc:`ValueError` is raised on errors, while a value of ``'ignore'`` causes errors to be silently ignored, and a value of ``'replace'`` causes the official Unicode replacement character, U+FFFD, to be used to replace input characters which cannot be decoded. See also the :mod:`codecs` module."
msgstr ""

msgid "When only *object* is given, this returns its nicely printable representation. For strings, this is the string itself.  The difference with ``repr(object)`` is that ``str(object)`` does not always attempt to return a string that is acceptable to :func:`eval`; its goal is to return a printable string. With no arguments, this returns the empty string."
msgstr ""

msgid "Objects can specify what ``str(object)`` returns by defining a :meth:`__str__` special method."
msgstr ""

msgid "For more information on strings see :ref:`typesseq` which describes sequence functionality (strings are sequences), and also the string-specific methods described in the :ref:`string-methods` section. To output formatted strings, see the :ref:`string-formatting` section. In addition see the :ref:`stringservices` section."
msgstr ""

msgid "Sums *start* and the items of an *iterable* from left to right and returns the total.  *start* defaults to ``0``. The *iterable*'s items are normally numbers, and are not allowed to be strings.  The fast, correct way to concatenate a sequence of strings is by calling ``''.join(sequence)``.  To add floating point values with extended precision, see :func:`math.fsum`\\."
msgstr ""

msgid "Return a proxy object that delegates method calls to a parent or sibling class of *type*.  This is useful for accessing inherited methods that have been overridden in a class. The search order is same as that used by :func:`getattr` except that the *type* itself is skipped."
msgstr ""

msgid "The :attr:`__mro__` attribute of the *type* lists the method resolution search order used by both :func:`getattr` and :func:`super`.  The attribute is dynamic and can change whenever the inheritance hierarchy is updated."
msgstr ""

msgid "If the second argument is omitted, the super object returned is unbound.  If the second argument is an object, ``isinstance(obj, type)`` must be true.  If the second argument is a type, ``issubclass(type2, type)`` must be true (this is useful for classmethods)."
msgstr ""

msgid "There are two typical use cases for *super*.  In a class hierarchy with single inheritance, *super* can be used to refer to parent classes without naming them explicitly, thus making the code more maintainable.  This use closely parallels the use of *super* in other programming languages."
msgstr ""

msgid "The second use case is to support cooperative multiple inheritance in a dynamic execution environment.  This use case is unique to Python and is not found in statically compiled languages or languages that only support single inheritance.  This makes it possible to implement \"diamond diagrams\" where multiple base classes implement the same method.  Good design dictates that this method have the same calling signature in every case (because the order of calls is determined at runtime, because that order adapts to changes in the class hierarchy, and because that order can include sibling classes that are unknown prior to runtime)."
msgstr ""

msgid "For both use cases, a typical superclass call looks like this::"
msgstr ""

msgid "class C(B):     def method(self, arg):         super().method(arg)    # This does the same thing as:                                # super(C, self).method(arg)"
msgstr ""

msgid "Note that :func:`super` is implemented as part of the binding process for explicit dotted attribute lookups such as ``super().__getitem__(name)``. It does so by implementing its own :meth:`__getattribute__` method for searching classes in a predictable order that supports cooperative multiple inheritance. Accordingly, :func:`super` is undefined for implicit lookups using statements or operators such as ``super()[name]``."
msgstr ""

msgid "Also note that :func:`super` is not limited to use inside methods.  The two argument form specifies the arguments exactly and makes the appropriate references.  The zero argument form automatically searches the stack frame for the class (``__class__``) and the first argument."
msgstr ""

msgid "Return a tuple whose items are the same and in the same order as *iterable*'s items.  *iterable* may be a sequence, a container that supports iteration, or an iterator object. If *iterable* is already a tuple, it is returned unchanged. For instance, ``tuple('abc')`` returns ``('a', 'b', 'c')`` and ``tuple([1, 2, 3])`` returns ``(1, 2, 3)``.  If no argument is given, returns a new empty tuple, ``()``."
msgstr ""

msgid ":class:`tuple` is an immutable sequence type, as documented in :ref:`typesseq`."
msgstr ""

msgid "Return the type of an *object*.  The return value is a type object and generally the same object as returned by ``object.__class__``."
msgstr ""

msgid "The :func:`isinstance` built-in function is recommended for testing the type of an object, because it takes subclasses into account."
msgstr ""

msgid "With three arguments, :func:`type` functions as a constructor as detailed below."
msgstr ""

msgid "Return a new type object.  This is essentially a dynamic form of the :keyword:`class` statement. The *name* string is the class name and becomes the :attr:`__name__` attribute; the *bases* tuple itemizes the base classes and becomes the :attr:`__bases__` attribute; and the *dict* dictionary is the namespace containing definitions for class body and becomes the :attr:`__dict__` attribute.  For example, the following two statements create identical :class:`type` objects:"
msgstr ""

msgid ">>> class X(object): ...     a = 1 ... >>> X = type('X', (object,), dict(a=1))"
msgstr ""

msgid "Without an argument, act like :func:`locals`."
msgstr ""

msgid "With a module, class or class instance object as argument (or anything else that has a :attr:`__dict__` attribute), return that attribute."
msgstr ""

msgid "The returned dictionary should not be modified: the effects on the corresponding symbol table are undefined. [#]_"
msgstr ""

msgid "Make an iterator that aggregates elements from each of the iterables."
msgstr ""

msgid "Returns an iterator of tuples, where the *i*-th tuple contains the *i*-th element from each of the argument sequences or iterables.  The iterator stops when the shortest input iterable is exhausted. With a single iterable argument, it returns an iterator of 1-tuples.  With no arguments, it returns an empty iterator.  Equivalent to::"
msgstr ""

msgid "def zip(*iterables):     # zip('ABCD', 'xy') --> Ax By     iterables = map(iter, iterables)     while iterables:         yield tuple(map(next, iterables))"
msgstr ""

msgid "The left-to-right evaluation order of the iterables is guaranteed. This makes possible an idiom for clustering a data series into n-length groups using ``zip(*[iter(s)]*n)``."
msgstr ""

msgid ":func:`zip` should only be used with unequal length inputs when you don't care about trailing, unmatched values from the longer iterables.  If those values are important, use :func:`itertools.zip_longest` instead."
msgstr ""

msgid ":func:`zip` in conjunction with the ``*`` operator can be used to unzip a list::"
msgstr ""

msgid ">>> x = [1, 2, 3] >>> y = [4, 5, 6] >>> zipped = zip(x, y) >>> list(zipped) [(1, 4), (2, 5), (3, 6)] >>> x2, y2 = zip(*zip(x, y)) >>> x == list(x2) and y == list(y2) True"
msgstr ""

msgid "This is an advanced function that is not needed in everyday Python programming."
msgstr ""

msgid "This function is invoked by the :keyword:`import` statement.  It can be replaced (by importing the :mod:`builtins` module and assigning to ``builtins.__import__``) in order to change semantics of the :keyword:`import` statement, but nowadays it is usually simpler to use import hooks (see :pep:`302`).  Direct use of :func:`__import__` is rare, except in cases where you want to import a module whose name is only known at runtime."
msgstr ""

msgid "The function imports the module *name*, potentially using the given *globals* and *locals* to determine how to interpret the name in a package context. The *fromlist* gives the names of objects or submodules that should be imported from the module given by *name*.  The standard implementation does not use its *locals* argument at all, and uses its *globals* only to determine the package context of the :keyword:`import` statement."
msgstr ""

msgid "*level* specifies whether to use absolute or relative imports. ``0`` (the default) means only perform absolute imports.  Positive values for *level* indicate the number of parent directories to search relative to the directory of the module calling :func:`__import__`."
msgstr ""

msgid "When the *name* variable is of the form ``package.module``, normally, the top-level package (the name up till the first dot) is returned, *not* the module named by *name*.  However, when a non-empty *fromlist* argument is given, the module named by *name* is returned."
msgstr ""

msgid "For example, the statement ``import spam`` results in bytecode resembling the following code::"
msgstr ""

msgid "spam = __import__('spam', globals(), locals(), [], 0)"
msgstr ""

msgid "The statement ``import spam.ham`` results in this call::"
msgstr ""

msgid "spam = __import__('spam.ham', globals(), locals(), [], 0)"
msgstr ""

msgid "Note how :func:`__import__` returns the toplevel module here because this is the object that is bound to a name by the :keyword:`import` statement."
msgstr ""

msgid "On the other hand, the statement ``from spam.ham import eggs, sausage as saus`` results in ::"
msgstr ""

msgid "_temp = __import__('spam.ham', globals(), locals(), ['eggs', 'sausage'], 0) eggs = _temp.eggs saus = _temp.sausage"
msgstr ""

msgid "Here, the ``spam.ham`` module is returned from :func:`__import__`.  From this object, the names to import are retrieved and assigned to their respective names."
msgstr ""

msgid "If you simply want to import a module (potentially within a package) by name, you can call :func:`__import__` and then look it up in :data:`sys.modules`::"
msgstr ""

msgid ">>> import sys >>> name = 'foo.bar.baz' >>> __import__(name) <module 'foo' from ...> >>> baz = sys.modules[name] >>> baz <module 'foo.bar.baz' from ...>"
msgstr ""

msgid "Note that the parser only accepts the Unix-style end of line convention. If you are reading the code from a file, make sure to use newline conversion mode to convert Windows or Mac-style newlines."
msgstr ""

msgid "In the current implementation, local variable bindings cannot normally be affected this way, but variables retrieved from other scopes (such as modules) can be.  This may change."
msgstr ""

msgid ":mod:`functools` --- Higher order functions and operations on callable objects"
msgstr ""

msgid "The :mod:`functools` module is for higher-order functions: functions that act on or return other functions. In general, any callable object can be treated as a function for the purposes of this module."
msgstr ""

msgid "The :mod:`functools` module defines the following functions:"
msgstr ""

msgid "Transform an old-style comparison function to a key-function.  Used with tools that accept key functions (such as :func:`sorted`, :func:`min`, :func:`max`, :func:`heapq.nlargest`, :func:`heapq.nsmallest`, :func:`itertools.groupby`). This function is primarily used as a transition tool for programs being converted from Py2.x which supported the use of comparison functions."
msgstr ""

msgid "A compare function is any callable that accept two arguments, compares them, and returns a negative number for less-than, zero for equality, or a positive number for greater-than.  A key function is a callable that accepts one argument and returns another value that indicates the position in the desired collation sequence."
msgstr ""

msgid "sorted(iterable, key=cmp_to_key(locale.strcoll))  # locale-aware sort order"
msgstr ""

msgid "Given a class defining one or more rich comparison ordering methods, this class decorator supplies the rest.  This simplifies the effort involved in specifying all of the possible rich comparison operations:"
msgstr ""

msgid "The class must define one of :meth:`__lt__`, :meth:`__le__`, :meth:`__gt__`, or :meth:`__ge__`. In addition, the class should supply an :meth:`__eq__` method."
msgstr ""

msgid "@total_ordering class Student:     def __eq__(self, other):         return ((self.lastname.lower(), self.firstname.lower()) ==                 (other.lastname.lower(), other.firstname.lower()))     def __lt__(self, other):         return ((self.lastname.lower(), self.firstname.lower()) <                 (other.lastname.lower(), other.firstname.lower()))"
msgstr ""

msgid "Return a new :class:`partial` object which when called will behave like *func* called with the positional arguments *args* and keyword arguments *keywords*. If more arguments are supplied to the call, they are appended to *args*. If additional keyword arguments are supplied, they extend and override *keywords*. Roughly equivalent to::"
msgstr ""

msgid "def partial(func, *args, **keywords):     def newfunc(*fargs, **fkeywords):         newkeywords = keywords.copy()         newkeywords.update(fkeywords)         return func(*(args + fargs), **newkeywords)     newfunc.func = func     newfunc.args = args     newfunc.keywords = keywords     return newfunc"
msgstr ""

msgid "The :func:`partial` is used for partial function application which \"freezes\" some portion of a function's arguments and/or keywords resulting in a new object with a simplified signature.  For example, :func:`partial` can be used to create a callable that behaves like the :func:`int` function where the *base* argument defaults to two:"
msgstr ""

msgid ">>> from functools import partial >>> basetwo = partial(int, base=2) >>> basetwo.__doc__ = 'Convert base 2 string to an int.' >>> basetwo('10010') 18"
msgstr ""

msgid "Apply *function* of two arguments cumulatively to the items of *sequence*, from left to right, so as to reduce the sequence to a single value.  For example, ``reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])`` calculates ``((((1+2)+3)+4)+5)``. The left argument, *x*, is the accumulated value and the right argument, *y*, is the update value from the *sequence*.  If the optional *initializer* is present, it is placed before the items of the sequence in the calculation, and serves as a default when the sequence is empty.  If *initializer* is not given and *sequence* contains only one item, the first item is returned."
msgstr ""

msgid "Update a *wrapper* function to look like the *wrapped* function. The optional arguments are tuples to specify which attributes of the original function are assigned directly to the matching attributes on the wrapper function and which attributes of the wrapper function are updated with the corresponding attributes from the original function. The default values for these arguments are the module level constants *WRAPPER_ASSIGNMENTS* (which assigns to the wrapper function's *__name__*, *__module__* and *__doc__*, the documentation string) and *WRAPPER_UPDATES* (which updates the wrapper function's *__dict__*, i.e. the instance dictionary)."
msgstr ""

msgid "The main intended use for this function is in :term:`decorator` functions which wrap the decorated function and return the wrapper. If the wrapper function is not updated, the metadata of the returned function will reflect the wrapper definition rather than the original function definition, which is typically less than helpful."
msgstr ""

msgid "This is a convenience function for invoking ``partial(update_wrapper, wrapped=wrapped, assigned=assigned, updated=updated)`` as a function decorator when defining a wrapper function. For example:"
msgstr ""

msgid ">>> from functools import wraps >>> def my_decorator(f): ...     @wraps(f) ...     def wrapper(*args, **kwds): ...         print('Calling decorated function') ...         return f(*args, **kwds) ...     return wrapper ... >>> @my_decorator ... def example(): ...     \"\"\"Docstring\"\"\" ...     print('Called example function') ... >>> example() Calling decorated function Called example function >>> example.__name__ 'example' >>> example.__doc__ 'Docstring'"
msgstr ""

msgid "Without the use of this decorator factory, the name of the example function would have been ``'wrapper'``, and the docstring of the original :func:`example` would have been lost."
msgstr ""

msgid ":class:`partial` Objects"
msgstr ""

msgid ":class:`partial` objects are callable objects created by :func:`partial`. They have three read-only attributes:"
msgstr ""

msgid "A callable object or function.  Calls to the :class:`partial` object will be forwarded to :attr:`func` with new arguments and keywords."
msgstr ""

msgid "The leftmost positional arguments that will be prepended to the positional arguments provided to a :class:`partial` object call."
msgstr ""

msgid "The keyword arguments that will be supplied when the :class:`partial` object is called."
msgstr ""

msgid ":class:`partial` objects are like :class:`function` objects in that they are callable, weak referencable, and can have attributes.  There are some important differences.  For instance, the :attr:`__name__` and :attr:`__doc__` attributes are not created automatically.  Also, :class:`partial` objects defined in classes behave like static methods and do not transform into bound methods during instance attribute look-up."
msgstr ""

msgid ":mod:`gc` --- Garbage Collector interface"
msgstr ""

msgid "This module provides an interface to the optional garbage collector.  It provides the ability to disable the collector, tune the collection frequency, and set debugging options.  It also provides access to unreachable objects that the collector found but cannot free.  Since the collector supplements the reference counting already used in Python, you can disable the collector if you are sure your program does not create reference cycles.  Automatic collection can be disabled by calling ``gc.disable()``.  To debug a leaking program call ``gc.set_debug(gc.DEBUG_LEAK)``. Notice that this includes ``gc.DEBUG_SAVEALL``, causing garbage-collected objects to be saved in gc.garbage for inspection."
msgstr ""

msgid "The :mod:`gc` module provides the following functions:"
msgstr ""

msgid "Enable automatic garbage collection."
msgstr ""

msgid "Disable automatic garbage collection."
msgstr ""

msgid "Returns true if automatic collection is enabled."
msgstr ""

msgid "With no arguments, run a full collection.  The optional argument *generation* may be an integer specifying which generation to collect (from 0 to 2).  A :exc:`ValueError` is raised if the generation number  is invalid. The number of unreachable objects found is returned."
msgstr ""

msgid "The free lists maintained for a number of built-in types are cleared whenever a full collection or collection of the highest generation (2) is run.  Not all items in some free lists may be freed due to the particular implementation, in particular :class:`float`."
msgstr ""

msgid "Set the garbage collection debugging flags. Debugging information will be written to ``sys.stderr``.  See below for a list of debugging flags which can be combined using bit operations to control debugging."
msgstr ""

msgid "Return the debugging flags currently set."
msgstr ""

msgid "Returns a list of all objects tracked by the collector, excluding the list returned."
msgstr ""

msgid "Set the garbage collection thresholds (the collection frequency). Setting *threshold0* to zero disables collection."
msgstr ""

msgid "The GC classifies objects into three generations depending on how many collection sweeps they have survived.  New objects are placed in the youngest generation (generation ``0``).  If an object survives a collection it is moved into the next older generation.  Since generation ``2`` is the oldest generation, objects in that generation remain there after a collection.  In order to decide when to run, the collector keeps track of the number object allocations and deallocations since the last collection.  When the number of allocations minus the number of deallocations exceeds *threshold0*, collection starts.  Initially only generation ``0`` is examined.  If generation ``0`` has been examined more than *threshold1* times since generation ``1`` has been examined, then generation ``1`` is examined as well.  Similarly, *threshold2* controls the number of collections of generation ``1`` before collecting generation ``2``."
msgstr ""

msgid "Return the current collection  counts as a tuple of ``(count0, count1, count2)``."
msgstr ""

msgid "Return the current collection thresholds as a tuple of ``(threshold0, threshold1, threshold2)``."
msgstr ""

msgid "Return the list of objects that directly refer to any of objs. This function will only locate those containers which support garbage collection; extension types which do refer to other objects but do not support garbage collection will not be found."
msgstr ""

msgid "Note that objects which have already been dereferenced, but which live in cycles and have not yet been collected by the garbage collector can be listed among the resulting referrers.  To get only currently live objects, call :func:`collect` before calling :func:`get_referrers`."
msgstr ""

msgid "Care must be taken when using objects returned by :func:`get_referrers` because some of them could still be under construction and hence in a temporarily invalid state. Avoid using :func:`get_referrers` for any purpose other than debugging."
msgstr ""

msgid "Return a list of objects directly referred to by any of the arguments. The referents returned are those objects visited by the arguments' C-level :attr:`tp_traverse` methods (if any), and may not be all objects actually directly reachable.  :attr:`tp_traverse` methods are supported only by objects that support garbage collection, and are only required to visit objects that may be involved in a cycle.  So, for example, if an integer is directly reachable from an argument, that integer object may or may not appear in the result list."
msgstr ""

msgid "Returns True if the object is currently tracked by the garbage collector, False otherwise.  As a general rule, instances of atomic types aren't tracked and instances of non-atomic types (containers, user-defined objects...) are.  However, some type-specific optimizations can be present in order to suppress the garbage collector footprint of simple instances (e.g. dicts containing only atomic keys and values)::"
msgstr ""

msgid ">>> gc.is_tracked(0) False >>> gc.is_tracked(\"a\") False >>> gc.is_tracked([]) True >>> gc.is_tracked({}) False >>> gc.is_tracked({\"a\": 1}) False >>> gc.is_tracked({\"a\": []}) True"
msgstr ""

msgid "The following variable is provided for read-only access (you can mutate its value but should not rebind it):"
msgstr ""

msgid "A list of objects which the collector found to be unreachable but could not be freed (uncollectable objects).  By default, this list contains only objects with :meth:`__del__` methods. Objects that have :meth:`__del__` methods and are part of a reference cycle cause the entire reference cycle to be uncollectable, including objects not necessarily in the cycle but reachable only from it. Python doesn't collect such cycles automatically because, in general, it isn't possible for Python to guess a safe order in which to run the :meth:`__del__` methods.  If you know a safe order, you can force the issue by examining the *garbage* list, and explicitly breaking cycles due to your objects within the list.  Note that these objects are kept alive even so by virtue of being in the *garbage* list, so they should be removed from *garbage* too.  For example, after breaking cycles, do ``del gc.garbage[:]`` to empty the list.  It's generally better to avoid the issue by not creating cycles containing objects with :meth:`__del__` methods, and *garbage* can be examined in that case to verify that no such cycles are being created."
msgstr ""

msgid "If :const:`DEBUG_SAVEALL` is set, then all unreachable objects will be added to this list rather than freed."
msgstr ""

msgid "The following constants are provided for use with :func:`set_debug`:"
msgstr ""

msgid "Print statistics during collection.  This information can be useful when tuning the collection frequency."
msgstr ""

msgid "Print information on collectable objects found."
msgstr ""

msgid "Print information of uncollectable objects found (objects which are not reachable but cannot be freed by the collector).  These objects will be added to the ``garbage`` list."
msgstr ""

msgid "When set, all unreachable objects found will be appended to *garbage* rather than being freed.  This can be useful for debugging a leaking program."
msgstr ""

msgid "The debugging flags necessary for the collector to print information about a leaking program (equal to ``DEBUG_COLLECTABLE | DEBUG_UNCOLLECTABLE | DEBUG_SAVEALL``)."
msgstr ""

msgid ":mod:`getopt` --- C-style parser for command line options"
msgstr ""

msgid "The :mod:`getopt` module is a parser for command line options whose API is designed to be familiar to users of the C :cfunc:`getopt` function. Users who are unfamiliar with the C :cfunc:`getopt` function or who would like to write less code and get better help and error messages should consider using the :mod:`argparse` module instead."
msgstr ""

msgid "This module helps scripts to parse the command line arguments in ``sys.argv``. It supports the same conventions as the Unix :cfunc:`getopt` function (including the special meanings of arguments of the form '``-``' and '``--``').  Long options similar to those supported by GNU software may be used as well via an optional third argument."
msgstr ""

msgid "A more convenient, flexible, and powerful alternative is the :mod:`optparse` module."
msgstr ""

msgid "This module provides two functions and an exception:"
msgstr ""

msgid "Parses command line options and parameter list.  *args* is the argument list to be parsed, without the leading reference to the running program. Typically, this means ``sys.argv[1:]``. *shortopts* is the string of option letters that the script wants to recognize, with options that require an argument followed by a colon (``':'``; i.e., the same format that Unix :cfunc:`getopt` uses)."
msgstr ""

msgid "Unlike GNU :cfunc:`getopt`, after a non-option argument, all further arguments are considered also non-options. This is similar to the way non-GNU Unix systems work."
msgstr ""

msgid "*longopts*, if specified, must be a list of strings with the names of the long options which should be supported.  The leading ``'--'`` characters should not be included in the option name.  Long options which require an argument should be followed by an equal sign (``'='``).  Optional arguments are not supported.  To accept only long options, *shortopts* should be an empty string.  Long options on the command line can be recognized so long as they provide a prefix of the option name that matches exactly one of the accepted options.  For example, if *longopts* is ``['foo', 'frob']``, the option :option:`--fo` will match as :option:`--foo`, but :option:`--f` will not match uniquely, so :exc:`GetoptError` will be raised."
msgstr ""

msgid "The return value consists of two elements: the first is a list of ``(option, value)`` pairs; the second is the list of program arguments left after the option list was stripped (this is a trailing slice of *args*).  Each option-and-value pair returned has the option as its first element, prefixed with a hyphen for short options (e.g., ``'-x'``) or two hyphens for long options (e.g., ``'--long-option'``), and the option argument as its second element, or an empty string if the option has no argument.  The options occur in the list in the same order in which they were found, thus allowing multiple occurrences.  Long and short options may be mixed."
msgstr ""

msgid "This function works like :func:`getopt`, except that GNU style scanning mode is used by default. This means that option and non-option arguments may be intermixed. The :func:`getopt` function stops processing options as soon as a non-option argument is encountered."
msgstr ""

msgid "If the first character of the option string is '+', or if the environment variable :envvar:`POSIXLY_CORRECT` is set, then option processing stops as soon as a non-option argument is encountered."
msgstr ""

msgid "This is raised when an unrecognized option is found in the argument list or when an option requiring an argument is given none. The argument to the exception is a string indicating the cause of the error.  For long options, an argument given to an option which does not require one will also cause this exception to be raised.  The attributes :attr:`msg` and :attr:`opt` give the error message and related option; if there is no specific option to which the exception relates, :attr:`opt` is an empty string."
msgstr ""

msgid "Alias for :exc:`GetoptError`; for backward compatibility."
msgstr ""

msgid "An example using only Unix style options:"
msgstr ""

msgid ">>> import getopt >>> args = '-a -b -cfoo -d bar a1 a2'.split() >>> args ['-a', '-b', '-cfoo', '-d', 'bar', 'a1', 'a2'] >>> optlist, args = getopt.getopt(args, 'abc:d:') >>> optlist [('-a', ''), ('-b', ''), ('-c', 'foo'), ('-d', 'bar')] >>> args ['a1', 'a2']"
msgstr ""

msgid "Using long option names is equally easy:"
msgstr ""

msgid ">>> s = '--condition=foo --testing --output-file abc.def -x a1 a2' >>> args = s.split() >>> args ['--condition=foo', '--testing', '--output-file', 'abc.def', '-x', 'a1', 'a2'] >>> optlist, args = getopt.getopt(args, 'x', [ ...     'condition=', 'output-file=', 'testing']) >>> optlist [('--condition', 'foo'), ('--testing', ''), ('--output-file', 'abc.def'), ('-x', '')] >>> args ['a1', 'a2']"
msgstr ""

msgid "In a script, typical usage is something like this::"
msgstr ""

msgid "import getopt, sys  def main():     try:         opts, args = getopt.getopt(sys.argv[1:], \"ho:v\", [\"help\", \"output=\"])     except getopt.GetoptError as err:         # print help information and exit:         print(err) # will print something like \"option -a not recognized\"         usage()         sys.exit(2)     output = None     verbose = False     for o, a in opts:         if o == \"-v\":             verbose = True         elif o in (\"-h\", \"--help\"):             usage()             sys.exit()         elif o in (\"-o\", \"--output\"):             output = a         else:             assert False, \"unhandled option\"     # ...  if __name__ == \"__main__\":     main()"
msgstr ""

msgid "Note that an equivalent command line interface could be produced with less code and more informative help and error messages by using the :mod:`argparse` module::"
msgstr ""

msgid "import argparse  if __name__ == '__main__':     parser = argparse.ArgumentParser()     parser.add_argument('-o', '--output')     parser.add_argument('-v', dest='verbose', action='store_true')     args = parser.parse_args()     # ... do something with args.output ...     # ... do something with args.verbose .."
msgstr ""

msgid "Alternative command line option and argument parsing library."
msgstr ""

msgid ":mod:`getpass` --- Portable password input"
msgstr ""

msgid "The :mod:`getpass` module provides two functions:"
msgstr ""

msgid "Prompt the user for a password without echoing.  The user is prompted using the string *prompt*, which defaults to ``'Password: '``.  On Unix, the prompt is written to the file-like object *stream*.  *stream* defaults to the controlling terminal (:file:`/dev/tty`) or if that is unavailable to ``sys.stderr`` (this argument is ignored on Windows)."
msgstr ""

msgid "If echo free input is unavailable getpass() falls back to printing a warning message to *stream* and reading from ``sys.stdin`` and issuing a :exc:`GetPassWarning`."
msgstr ""

msgid "Availability: Macintosh, Unix, Windows."
msgstr ""

msgid "If you call getpass from within IDLE, the input may be done in the terminal you launched IDLE from rather than the idle window itself."
msgstr ""

msgid "A :exc:`UserWarning` subclass issued when password input may be echoed."
msgstr ""

msgid "Return the \"login name\" of the user. Availability: Unix, Windows."
msgstr ""

msgid "This function checks the environment variables :envvar:`LOGNAME`, :envvar:`USER`, :envvar:`LNAME` and :envvar:`USERNAME`, in order, and returns the value of the first one which is set to a non-empty string.  If none are set, the login name from the password database is returned on systems which support the :mod:`pwd` module, otherwise, an exception is raised."
msgstr ""

msgid ":mod:`gettext` --- Multilingual internationalization services"
msgstr ""

msgid "The :mod:`gettext` module provides internationalization (I18N) and localization (L10N) services for your Python modules and applications. It supports both the GNU ``gettext`` message catalog API and a higher level, class-based API that may be more appropriate for Python files.  The interface described below allows you to write your module and application messages in one natural language, and provide a catalog of translated messages for running under different natural languages."
msgstr ""

msgid "Some hints on localizing your Python modules and applications are also given."
msgstr ""

msgid "GNU :program:`gettext` API"
msgstr ""

msgid "The :mod:`gettext` module defines the following API, which is very similar to the GNU :program:`gettext` API.  If you use this API you will affect the translation of your entire application globally.  Often this is what you want if your application is monolingual, with the choice of language dependent on the locale of your user.  If you are localizing a Python module, or if your application needs to switch languages on the fly, you probably want to use the class-based API instead."
msgstr ""

msgid "Bind the *domain* to the locale directory *localedir*.  More concretely, :mod:`gettext` will look for binary :file:`.mo` files for the given domain using the path (on Unix): :file:`localedir/language/LC_MESSAGES/domain.mo`, where *languages* is searched for in the environment variables :envvar:`LANGUAGE`, :envvar:`LC_ALL`, :envvar:`LC_MESSAGES`, and :envvar:`LANG` respectively."
msgstr ""

msgid "If *localedir* is omitted or ``None``, then the current binding for *domain* is returned. [#]_"
msgstr ""

msgid "Bind the *domain* to *codeset*, changing the encoding of strings returned by the :func:`gettext` family of functions. If *codeset* is omitted, then the current binding is returned."
msgstr ""

msgid "Change or query the current global domain.  If *domain* is ``None``, then the current global domain is returned, otherwise the global domain is set to *domain*, which is returned."
msgstr ""

msgid "Return the localized translation of *message*, based on the current global domain, language, and locale directory.  This function is usually aliased as :func:`_` in the local namespace (see examples below)."
msgstr ""

msgid "Equivalent to :func:`gettext`, but the translation is returned in the preferred system encoding, if no other encoding was explicitly set with :func:`bind_textdomain_codeset`."
msgstr ""

msgid "Like :func:`gettext`, but look the message up in the specified *domain*."
msgstr ""

msgid "Equivalent to :func:`dgettext`, but the translation is returned in the preferred system encoding, if no other encoding was explicitly set with :func:`bind_textdomain_codeset`."
msgstr ""

msgid "Like :func:`gettext`, but consider plural forms. If a translation is found, apply the plural formula to *n*, and return the resulting message (some languages have more than two plural forms). If no translation is found, return *singular* if *n* is 1; return *plural* otherwise."
msgstr ""

msgid "The Plural formula is taken from the catalog header. It is a C or Python expression that has a free variable *n*; the expression evaluates to the index of the plural in the catalog. See the GNU gettext documentation for the precise syntax to be used in :file:`.po` files and the formulas for a variety of languages."
msgstr ""

msgid "Equivalent to :func:`ngettext`, but the translation is returned in the preferred system encoding, if no other encoding was explicitly set with :func:`bind_textdomain_codeset`."
msgstr ""

msgid "Like :func:`ngettext`, but look the message up in the specified *domain*."
msgstr ""

msgid "Equivalent to :func:`dngettext`, but the translation is returned in the preferred system encoding, if no other encoding was explicitly set with :func:`bind_textdomain_codeset`."
msgstr ""

msgid "Note that GNU :program:`gettext` also defines a :func:`dcgettext` method, but this was deemed not useful and so it is currently unimplemented."
msgstr ""

msgid "Here's an example of typical usage for this API::"
msgstr ""

msgid "import gettext gettext.bindtextdomain('myapplication', '/path/to/my/language/directory') gettext.textdomain('myapplication') _ = gettext.gettext # ... print(_('This is a translatable string.'))"
msgstr ""

msgid "Class-based API"
msgstr ""

msgid "The class-based API of the :mod:`gettext` module gives you more flexibility and greater convenience than the GNU :program:`gettext` API.  It is the recommended way of localizing your Python applications and modules.  :mod:`gettext` defines a \"translations\" class which implements the parsing of GNU :file:`.mo` format files, and has methods for returning strings. Instances of this \"translations\" class can also install themselves in the built-in namespace as the function :func:`_`."
msgstr ""

msgid "This function implements the standard :file:`.mo` file search algorithm.  It takes a *domain*, identical to what :func:`textdomain` takes.  Optional *localedir* is as in :func:`bindtextdomain`  Optional *languages* is a list of strings, where each string is a language code."
msgstr ""

msgid "If *localedir* is not given, then the default system locale directory is used. [#]_  If *languages* is not given, then the following environment variables are searched: :envvar:`LANGUAGE`, :envvar:`LC_ALL`, :envvar:`LC_MESSAGES`, and :envvar:`LANG`.  The first one returning a non-empty value is used for the *languages* variable. The environment variables should contain a colon separated list of languages, which will be split on the colon to produce the expected list of language code strings."
msgstr ""

msgid ":func:`find` then expands and normalizes the languages, and then iterates through them, searching for an existing file built of these components:"
msgstr ""

msgid ":file:`{localedir}/{language}/LC_MESSAGES/{domain}.mo`"
msgstr ""

msgid "The first such file name that exists is returned by :func:`find`. If no such file is found, then ``None`` is returned. If *all* is given, it returns a list of all file names, in the order in which they appear in the languages list or the environment variables."
msgstr ""

msgid "Return a :class:`Translations` instance based on the *domain*, *localedir*, and *languages*, which are first passed to :func:`find` to get a list of the associated :file:`.mo` file paths.  Instances with identical :file:`.mo` file names are cached.  The actual class instantiated is either *class_* if provided, otherwise :class:`GNUTranslations`.  The class's constructor must take a single file object argument.  If provided, *codeset* will change the charset used to encode translated strings in the :meth:`lgettext` and :meth:`lngettext` methods."
msgstr ""

msgid "If multiple files are found, later files are used as fallbacks for earlier ones. To allow setting the fallback, :func:`copy.copy` is used to clone each translation object from the cache; the actual instance data is still shared with the cache."
msgstr ""

msgid "If no :file:`.mo` file is found, this function raises :exc:`IOError` if *fallback* is false (which is the default), and returns a :class:`NullTranslations` instance if *fallback* is true."
msgstr ""

msgid "This installs the function :func:`_` in Python's builtins namespace, based on *domain*, *localedir*, and *codeset* which are passed to the function :func:`translation`."
msgstr ""

msgid "For the *names* parameter, please see the description of the translation object's :meth:`~NullTranslations.install` method."
msgstr ""

msgid "As seen below, you usually mark the strings in your application that are candidates for translation, by wrapping them in a call to the :func:`_` function, like this::"
msgstr ""

msgid "print(_('This string will be translated.'))"
msgstr ""

msgid "For convenience, you want the :func:`_` function to be installed in Python's builtins namespace, so it is easily accessible in all modules of your application."
msgstr ""

msgid "The :class:`NullTranslations` class"
msgstr ""

msgid "Translation classes are what actually implement the translation of original source file message strings to translated message strings. The base class used by all translation classes is :class:`NullTranslations`; this provides the basic interface you can use to write your own specialized translation classes.  Here are the methods of :class:`NullTranslations`:"
msgstr ""

msgid "Takes an optional file object *fp*, which is ignored by the base class. Initializes \"protected\" instance variables *_info* and *_charset* which are set by derived classes, as well as *_fallback*, which is set through :meth:`add_fallback`.  It then calls ``self._parse(fp)`` if *fp* is not ``None``."
msgstr ""

msgid "No-op'd in the base class, this method takes file object *fp*, and reads the data from the file, initializing its message catalog.  If you have an unsupported message catalog file format, you should override this method to parse your format."
msgstr ""

msgid "Add *fallback* as the fallback object for the current translation object. A translation object should consult the fallback if it cannot provide a translation for a given message."
msgstr ""

msgid "If a fallback has been set, forward :meth:`gettext` to the fallback. Otherwise, return the translated message.  Overridden in derived classes."
msgstr ""

msgid "If a fallback has been set, forward :meth:`lgettext` to the fallback. Otherwise, return the translated message.  Overridden in derived classes."
msgstr ""

msgid "If a fallback has been set, forward :meth:`ngettext` to the fallback. Otherwise, return the translated message.  Overridden in derived classes."
msgstr ""

msgid "Return the \"protected\" :attr:`_info` variable."
msgstr ""

msgid "Return the \"protected\" :attr:`_charset` variable, which is the encoding of the message catalog file."
msgstr ""

msgid "Return the \"protected\" :attr:`_output_charset` variable, which defines the encoding used to return translated messages in :meth:`lgettext` and :meth:`lngettext`."
msgstr ""

msgid "Change the \"protected\" :attr:`_output_charset` variable, which defines the encoding used to return translated messages."
msgstr ""

msgid "This method installs :meth:`self.gettext` into the built-in namespace, binding it to ``_``."
msgstr ""

msgid "If the *names* parameter is given, it must be a sequence containing the names of functions you want to install in the builtins namespace in addition to :func:`_`.  Supported names are ``'gettext'`` (bound to :meth:`self.gettext`), ``'ngettext'`` (bound to :meth:`self.ngettext`), ``'lgettext'`` and ``'lngettext'``."
msgstr ""

msgid "Note that this is only one way, albeit the most convenient way, to make the :func:`_` function available to your application.  Because it affects the entire application globally, and specifically the built-in namespace, localized modules should never install :func:`_`. Instead, they should use this code to make :func:`_` available to their module::"
msgstr ""

msgid "import gettext t = gettext.translation('mymodule', ...) _ = t.gettext"
msgstr ""

msgid "This puts :func:`_` only in the module's global namespace and so only affects calls within this module."
msgstr ""

msgid "The :class:`GNUTranslations` class"
msgstr ""

msgid "The :mod:`gettext` module provides one additional class derived from :class:`NullTranslations`: :class:`GNUTranslations`.  This class overrides :meth:`_parse` to enable reading GNU :program:`gettext` format :file:`.mo` files in both big-endian and little-endian format."
msgstr ""

msgid ":class:`GNUTranslations` parses optional meta-data out of the translation catalog.  It is convention with GNU :program:`gettext` to include meta-data as the translation for the empty string.  This meta-data is in :rfc:`822`\\ -style ``key: value`` pairs, and should contain the ``Project-Id-Version`` key.  If the key ``Content-Type`` is found, then the ``charset`` property is used to initialize the \"protected\" :attr:`_charset` instance variable, defaulting to ``None`` if not found.  If the charset encoding is specified, then all message ids and message strings read from the catalog are converted to Unicode using this encoding, else ASCII encoding is assumed."
msgstr ""

msgid "Since message ids are read as Unicode strings too, all :meth:`*gettext` methods will assume message ids as Unicode strings, not byte strings."
msgstr ""

msgid "The entire set of key/value pairs are placed into a dictionary and set as the \"protected\" :attr:`_info` instance variable."
msgstr ""

msgid "If the :file:`.mo` file's magic number is invalid, or if other problems occur while reading the file, instantiating a :class:`GNUTranslations` class can raise :exc:`IOError`."
msgstr ""

msgid "The following methods are overridden from the base class implementation:"
msgstr ""

msgid "Look up the *message* id in the catalog and return the corresponding message string, as a Unicode string.  If there is no entry in the catalog for the *message* id, and a fallback has been set, the look up is forwarded to the fallback's :meth:`gettext` method.  Otherwise, the *message* id is returned."
msgstr ""

msgid "Equivalent to :meth:`gettext`, but the translation is returned as a bytestring encoded in the selected output charset, or in the preferred system encoding if no encoding was explicitly set with :meth:`set_output_charset`."
msgstr ""

msgid "Do a plural-forms lookup of a message id.  *singular* is used as the message id for purposes of lookup in the catalog, while *n* is used to determine which plural form to use.  The returned message string is a Unicode string."
msgstr ""

msgid "If the message id is not found in the catalog, and a fallback is specified, the request is forwarded to the fallback's :meth:`ngettext` method.  Otherwise, when *n* is 1 *singular* is returned, and *plural* is returned in all other cases."
msgstr ""

msgid "Here is an example::"
msgstr ""

msgid "n = len(os.listdir('.')) cat = GNUTranslations(somefile) message = cat.ngettext(     'There is %(num)d file in this directory',     'There are %(num)d files in this directory',     n) % {'num': n}"
msgstr ""

msgid "Solaris message catalog support"
msgstr ""

msgid "The Solaris operating system defines its own binary :file:`.mo` file format, but since no documentation can be found on this format, it is not supported at this time."
msgstr ""

msgid "The Catalog constructor"
msgstr ""

msgid "GNOME uses a version of the :mod:`gettext` module by James Henstridge, but this version has a slightly different API.  Its documented usage was::"
msgstr ""

msgid "import gettext cat = gettext.Catalog(domain, localedir) _ = cat.gettext print(_('hello world'))"
msgstr ""

msgid "For compatibility with this older module, the function :func:`Catalog` is an alias for the :func:`translation` function described above."
msgstr ""

msgid "One difference between this module and Henstridge's: his catalog objects supported access through a mapping API, but this appears to be unused and so is not currently supported."
msgstr ""

msgid "Internationalizing your programs and modules"
msgstr ""

msgid "Internationalization (I18N) refers to the operation by which a program is made aware of multiple languages.  Localization (L10N) refers to the adaptation of your program, once internationalized, to the local language and cultural habits. In order to provide multilingual messages for your Python programs, you need to take the following steps:"
msgstr ""

msgid "prepare your program or module by specially marking translatable strings"
msgstr ""

msgid "run a suite of tools over your marked files to generate raw messages catalogs"
msgstr ""

msgid "create language specific translations of the message catalogs"
msgstr ""

msgid "use the :mod:`gettext` module so that message strings are properly translated"
msgstr ""

msgid "In order to prepare your code for I18N, you need to look at all the strings in your files.  Any string that needs to be translated should be marked by wrapping it in ``_('...')`` --- that is, a call to the function :func:`_`.  For example::"
msgstr ""

msgid "filename = 'mylog.txt' message = _('writing a log message') fp = open(filename, 'w') fp.write(message) fp.close()"
msgstr ""

msgid "In this example, the string ``'writing a log message'`` is marked as a candidate for translation, while the strings ``'mylog.txt'`` and ``'w'`` are not."
msgstr ""

msgid "The Python distribution comes with two tools which help you generate the message catalogs once you've prepared your source code.  These may or may not be available from a binary distribution, but they can be found in a source distribution, in the :file:`Tools/i18n` directory."
msgstr ""

msgid "The :program:`pygettext` [#]_ program scans all your Python source code looking for the strings you previously marked as translatable.  It is similar to the GNU :program:`gettext` program except that it understands all the intricacies of Python source code, but knows nothing about C or C++ source code.  You don't need GNU ``gettext`` unless you're also going to be translating C code (such as C extension modules)."
msgstr ""

msgid ":program:`pygettext` generates textual Uniforum-style human readable message catalog :file:`.pot` files, essentially structured human readable files which contain every marked string in the source code, along with a placeholder for the translation strings. :program:`pygettext` is a command line script that supports a similar command line interface as :program:`xgettext`; for details on its use, run::"
msgstr ""

msgid "pygettext.py --help"
msgstr ""

msgid "Copies of these :file:`.pot` files are then handed over to the individual human translators who write language-specific versions for every supported natural language.  They send you back the filled in language-specific versions as a :file:`.po` file.  Using the :program:`msgfmt.py` [#]_ program (in the :file:`Tools/i18n` directory), you take the :file:`.po` files from your translators and generate the machine-readable :file:`.mo` binary catalog files. The :file:`.mo` files are what the :mod:`gettext` module uses for the actual translation processing during run-time."
msgstr ""

msgid "How you use the :mod:`gettext` module in your code depends on whether you are internationalizing a single module or your entire application. The next two sections will discuss each case."
msgstr ""

msgid "Localizing your module"
msgstr ""

msgid "If you are localizing your module, you must take care not to make global changes, e.g. to the built-in namespace.  You should not use the GNU ``gettext`` API but instead the class-based API."
msgstr ""

msgid "Let's say your module is called \"spam\" and the module's various natural language translation :file:`.mo` files reside in :file:`/usr/share/locale` in GNU :program:`gettext` format.  Here's what you would put at the top of your module::"
msgstr ""

msgid "import gettext t = gettext.translation('spam', '/usr/share/locale') _ = t.lgettext"
msgstr ""

msgid "Localizing your application"
msgstr ""

msgid "If you are localizing your application, you can install the :func:`_` function globally into the built-in namespace, usually in the main driver file of your application.  This will let all your application-specific files just use ``_('...')`` without having to explicitly install it in each file."
msgstr ""

msgid "In the simple case then, you need only add the following bit of code to the main driver file of your application::"
msgstr ""

msgid "import gettext gettext.install('myapplication')"
msgstr ""

msgid "If you need to set the locale directory, you can pass these into the :func:`install` function::"
msgstr ""

msgid "import gettext gettext.install('myapplication', '/usr/share/locale')"
msgstr ""

msgid "Changing languages on the fly"
msgstr ""

msgid "If your program needs to support many languages at the same time, you may want to create multiple translation instances and then switch between them explicitly, like so::"
msgstr ""

msgid "import gettext  lang1 = gettext.translation('myapplication', languages=['en']) lang2 = gettext.translation('myapplication', languages=['fr']) lang3 = gettext.translation('myapplication', languages=['de'])  # start by using language1 lang1.install()  # ... time goes by, user selects language 2 lang2.install()  # ... more time goes by, user selects language 3 lang3.install()"
msgstr ""

msgid "Deferred translations"
msgstr ""

msgid "In most coding situations, strings are translated where they are coded. Occasionally however, you need to mark strings for translation, but defer actual translation until later.  A classic example is::"
msgstr ""

msgid "animals = ['mollusk',            'albatross',            'rat',            'penguin',            'python', ] # ... for a in animals:     print(a)"
msgstr ""

msgid "Here, you want to mark the strings in the ``animals`` list as being translatable, but you don't actually want to translate them until they are printed."
msgstr ""

msgid "Here is one way you can handle this situation::"
msgstr ""

msgid "def _(message): return message  animals = [_('mollusk'),            _('albatross'),            _('rat'),            _('penguin'),            _('python'), ]  del _  # ... for a in animals:     print(_(a))"
msgstr ""

msgid "This works because the dummy definition of :func:`_` simply returns the string unchanged.  And this dummy definition will temporarily override any definition of :func:`_` in the built-in namespace (until the :keyword:`del` command). Take care, though if you have a previous definition of :func:`_` in the local namespace."
msgstr ""

msgid "Note that the second use of :func:`_` will not identify \"a\" as being translatable to the :program:`pygettext` program, since it is not a string."
msgstr ""

msgid "Another way to handle this is with the following example::"
msgstr ""

msgid "def N_(message): return message  animals = [N_('mollusk'),            N_('albatross'),            N_('rat'),            N_('penguin'),            N_('python'), ]  # ... for a in animals:     print(_(a))"
msgstr ""

msgid "In this case, you are marking translatable strings with the function :func:`N_`, [#]_ which won't conflict with any definition of :func:`_`.  However, you will need to teach your message extraction program to look for translatable strings marked with :func:`N_`. :program:`pygettext` and :program:`xpot` both support this through the use of command line switches."
msgstr ""

msgid "Acknowledgements"
msgstr ""

msgid "The following people contributed code, feedback, design suggestions, previous implementations, and valuable experience to the creation of this module:"
msgstr ""

msgid "Peter Funk"
msgstr ""

msgid "James Henstridge"
msgstr ""

msgid "Juan David Ibáñez Palomar"
msgstr ""

msgid "Marc-André Lemburg"
msgstr ""

msgid "Martin von Löwis"
msgstr ""

msgid "François Pinard"
msgstr ""

msgid "Barry Warsaw"
msgstr ""

msgid "Gustavo Niemeyer"
msgstr ""

msgid "The default locale directory is system dependent; for example, on RedHat Linux it is :file:`/usr/share/locale`, but on Solaris it is :file:`/usr/lib/locale`. The :mod:`gettext` module does not try to support these system dependent defaults; instead its default is :file:`sys.prefix/share/locale`. For this reason, it is always best to call :func:`bindtextdomain` with an explicit absolute path at the start of your application."
msgstr ""

msgid "See the footnote for :func:`bindtextdomain` above."
msgstr ""

msgid "François Pinard has written a program called :program:`xpot` which does a similar job.  It is available as part of his :program:`po-utils` package at http ://po-utils.progiciels-bpi.ca/."
msgstr ""

msgid ":program:`msgfmt.py` is binary compatible with GNU :program:`msgfmt` except that it provides a simpler, all-Python implementation.  With this and :program:`pygettext.py`, you generally won't need to install the GNU :program:`gettext` package to internationalize your Python applications."
msgstr ""

msgid "The choice of :func:`N_` here is totally arbitrary; it could have just as easily been :func:`MarkThisStringForTranslation`."
msgstr ""

msgid ":mod:`glob` --- Unix style pathname pattern expansion"
msgstr ""

msgid "The :mod:`glob` module finds all the pathnames matching a specified pattern according to the rules used by the Unix shell.  No tilde expansion is done, but ``*``, ``?``, and character ranges expressed with ``[]`` will be correctly matched.  This is done by using the :func:`os.listdir` and :func:`fnmatch.fnmatch` functions in concert, and not by actually invoking a subshell.  (For tilde and shell variable expansion, use :func:`os.path.expanduser` and :func:`os.path.expandvars`.)"
msgstr ""

msgid "Return a possibly-empty list of path names that match *pathname*, which must be a string containing a path specification. *pathname* can be either absolute (like :file:`/usr/src/Python-1.5/Makefile`) or relative (like :file:`../../Tools/\\*/\\*.gif`), and can contain shell-style wildcards. Broken symlinks are included in the results (as in the shell)."
msgstr ""

msgid "Return an :term:`iterator` which yields the same values as :func:`glob` without actually storing them all simultaneously."
msgstr ""

msgid "For example, consider a directory containing only the following files: :file:`1.gif`, :file:`2.txt`, and :file:`card.gif`.  :func:`glob` will produce the following results.  Notice how any leading components of the path are preserved. ::"
msgstr ""

msgid ">>> import glob >>> glob.glob('./[0-9].*') ['./1.gif', './2.txt'] >>> glob.glob('*.gif') ['1.gif', 'card.gif'] >>> glob.glob('?.gif') ['1.gif']"
msgstr ""

msgid "Shell-style filename (not path) expansion"
msgstr ""

msgid ":mod:`grp` --- The group database"
msgstr ""

msgid "This module provides access to the Unix group database. It is available on all Unix versions."
msgstr ""

msgid "Group database entries are reported as a tuple-like object, whose attributes correspond to the members of the ``group`` structure (Attribute field below, see ``<pwd.h>``):"
msgstr ""

msgid "Index"
msgstr ""

msgid "gr_name"
msgstr ""

msgid "the name of the group"
msgstr ""

msgid "gr_passwd"
msgstr ""

msgid "the (encrypted) group password; often empty"
msgstr ""

msgid "gr_gid"
msgstr ""

msgid "the numerical group ID"
msgstr ""

msgid "3"
msgstr ""

msgid "gr_mem"
msgstr ""

msgid "all the group member's  user names"
msgstr ""

msgid "The gid is an integer, name and password are strings, and the member list is a list of strings. (Note that most users are not explicitly listed as members of the group they are in according to the password database.  Check both databases to get complete membership information.)"
msgstr ""

msgid "It defines the following items:"
msgstr ""

msgid "Return the group database entry for the given numeric group ID. :exc:`KeyError` is raised if the entry asked for cannot be found."
msgstr ""

msgid "Return the group database entry for the given group name. :exc:`KeyError` is raised if the entry asked for cannot be found."
msgstr ""

msgid "Return a list of all available group entries, in arbitrary order."
msgstr ""

msgid "An interface to the user database, similar to this."
msgstr ""

msgid "An interface to the shadow password database, similar to this."
msgstr ""

msgid ":mod:`gzip` --- Support for :program:`gzip` files"
msgstr ""

msgid "This module provides a simple interface to compress and decompress files just like the GNU programs :program:`gzip` and :program:`gunzip` would."
msgstr ""

msgid "The data compression is provided by the :mod:`zlib` module."
msgstr ""

msgid "The :mod:`gzip` module provides the :class:`GzipFile` class which is modeled after Python's File Object. The :class:`GzipFile` class reads and writes :program:`gzip`\\ -format files, automatically compressing or decompressing the data so that it looks like an ordinary file object."
msgstr ""

msgid "Note that additional file formats which can be decompressed by the :program:`gzip` and :program:`gunzip` programs, such  as those produced by :program:`compress` and :program:`pack`, are not supported by this module."
msgstr ""

msgid "For other archive formats, see the :mod:`bz2`, :mod:`zipfile`, and :mod:`tarfile` modules."
msgstr ""

msgid "Constructor for the :class:`GzipFile` class, which simulates most of the methods of a file object, with the exception of the :meth:`readinto` and :meth:`truncate` methods.  At least one of *fileobj* and *filename* must be given a non-trivial value."
msgstr ""

msgid "The new class instance is based on *fileobj*, which can be a regular file, a :class:`StringIO` object, or any other object which simulates a file.  It defaults to ``None``, in which case *filename* is opened to provide a file object."
msgstr ""

msgid "When *fileobj* is not ``None``, the *filename* argument is only used to be included in the :program:`gzip` file header, which may includes the original filename of the uncompressed file.  It defaults to the filename of *fileobj*, if discernible; otherwise, it defaults to the empty string, and in this case the original filename is not included in the header."
msgstr ""

msgid "The *mode* argument can be any of ``'r'``, ``'rb'``, ``'a'``, ``'ab'``, ``'w'``, or ``'wb'``, depending on whether the file will be read or written.  The default is the mode of *fileobj* if discernible; otherwise, the default is ``'rb'``. If not given, the 'b' flag will be added to the mode to ensure the file is opened in binary mode for cross-platform portability."
msgstr ""

msgid "The *compresslevel* argument is an integer from ``1`` to ``9`` controlling the level of compression; ``1`` is fastest and produces the least compression, and ``9`` is slowest and produces the most compression.  The default is ``9``."
msgstr ""

msgid "The *mtime* argument is an optional numeric timestamp to be written to the stream when compressing.  All :program:`gzip` compressed streams are required to contain a timestamp.  If omitted or ``None``, the current time is used.  This module ignores the timestamp when decompressing; however, some programs, such as :program:`gunzip`\\ , make use of it. The format of the timestamp is the same as that of the return value of ``time.time()`` and of the ``st_mtime`` member of the object returned by ``os.stat()``."
msgstr ""

msgid "Calling a :class:`GzipFile` object's :meth:`close` method does not close *fileobj*, since you might wish to append more material after the compressed data.  This also allows you to pass a :class:`StringIO` object opened for writing as *fileobj*, and retrieve the resulting memory buffer using the :class:`StringIO` object's :meth:`getvalue` method."
msgstr ""

msgid ":class:`GzipFile` supports iteration and the :keyword:`with` statement."
msgstr ""

msgid "This is a shorthand for ``GzipFile(filename,`` ``mode,`` ``compresslevel)``. The *filename* argument is required; *mode* defaults to ``'rb'`` and *compresslevel* defaults to ``9``."
msgstr ""

msgid "Examples of usage"
msgstr ""

msgid "Example of how to read a compressed file::"
msgstr ""

msgid "import gzip f = gzip.open('/home/joe/file.txt.gz', 'rb') file_content = f.read() f.close()"
msgstr ""

msgid "Example of how to create a compressed GZIP file::"
msgstr ""

msgid "import gzip content = \"Lots of content here\" f = gzip.open('/home/joe/file.txt.gz', 'wb') f.write(content) f.close()"
msgstr ""

msgid "Example of how to GZIP compress an existing file::"
msgstr ""

msgid "import gzip f_in = open('/home/joe/file.txt', 'rb') f_out = gzip.open('/home/joe/file.txt.gz', 'wb') f_out.writelines(f_in) f_out.close() f_in.close()"
msgstr ""

msgid "The basic data compression module needed to support the :program:`gzip` file format."
msgstr ""

msgid ":mod:`hashlib` --- Secure hashes and message digests"
msgstr ""

msgid "This module implements a common interface to many different secure hash and message digest algorithms.  Included are the FIPS secure hash algorithms SHA1, SHA224, SHA256, SHA384, and SHA512 (defined in FIPS 180-2) as well as RSA's MD5 algorithm (defined in Internet :rfc:`1321`).  The terms \"secure hash\" and \"message digest\" are interchangeable.  Older algorithms were called message digests.  The modern term is secure hash."
msgstr ""

msgid "If you want the adler32 or crc32 hash functions they are available in the :mod:`zlib` module."
msgstr ""

msgid "Some algorithms have known hash collision weaknesses, see the FAQ at the end."
msgstr ""

msgid "There is one constructor method named for each type of :dfn:`hash`.  All return a hash object with the same simple interface. For example: use :func:`sha1` to create a SHA1 hash object. You can now feed this object with objects conforming to the buffer interface (normally :class:`bytes` objects) using the :meth:`update` method.  At any point you can ask it for the :dfn:`digest` of the concatenation of the data fed to it so far using the :meth:`digest` or :meth:`hexdigest` methods."
msgstr ""

msgid "For better multithreading performance, the Python GIL is released for strings of more than 2047 bytes at object creation or on update."
msgstr ""

msgid "Feeding string objects is to :meth:`update` is not supported, as hashes work on bytes, not on characters."
msgstr ""

msgid "Constructors for hash algorithms that are always present in this module are :func:`md5`, :func:`sha1`, :func:`sha224`, :func:`sha256`, :func:`sha384`, and :func:`sha512`.  Additional algorithms may also be available depending upon the OpenSSL library that Python uses on your platform."
msgstr ""

msgid "For example, to obtain the digest of the byte string ``b'Nobody inspects the spammish repetition'``::"
msgstr ""

msgid ">>> import hashlib >>> m = hashlib.md5() >>> m.update(b\"Nobody inspects\") >>> m.update(b\" the spammish repetition\") >>> m.digest() b'\\xbbd\\x9c\\x83\\xdd\\x1e\\xa5\\xc9\\xd9\\xde\\xc9\\xa1\\x8d\\xf0\\xff\\xe9' >>> m.digest_size 16 >>> m.block_size 64"
msgstr ""

msgid "More condensed:"
msgstr ""

msgid ">>> hashlib.sha224(b\"Nobody inspects the spammish repetition\").hexdigest() 'a4337bc45a8fc544c03f52dc550cd6e1e87021bc896588bd79e901e2'"
msgstr ""

msgid "A generic :func:`new` constructor that takes the string name of the desired algorithm as its first parameter also exists to allow access to the above listed hashes as well as any other algorithms that your OpenSSL library may offer.  The named constructors are much faster than :func:`new` and should be preferred."
msgstr ""

msgid "Using :func:`new` with an algorithm provided by OpenSSL:"
msgstr ""

msgid ">>> h = hashlib.new('ripemd160') >>> h.update(b\"Nobody inspects the spammish repetition\") >>> h.hexdigest() 'cc4a5ce1b3df48aec5d22d1f16b894a0b894eccc'"
msgstr ""

msgid "This module provides the following constant attribute:"
msgstr ""

msgid "A tuple providing the names of the hash algorithms guaranteed to be supported by this module."
msgstr ""

msgid "The following values are provided as constant attributes of the hash objects returned by the constructors:"
msgstr ""

msgid "The size of the resulting hash in bytes."
msgstr ""

msgid "The internal block size of the hash algorithm in bytes."
msgstr ""

msgid "A hash object has the following methods:"
msgstr ""

msgid "Update the hash object with the object *arg*, which must be interpretable as a buffer of bytes.  Repeated calls are equivalent to a single call with the concatenation of all the arguments: ``m.update(a); m.update(b)`` is equivalent to ``m.update(a+b)``."
msgstr ""

msgid "Return the digest of the data passed to the :meth:`update` method so far. This is a bytes array of size :attr:`digest_size` which may contain bytes in the whole range from 0 to 255."
msgstr ""

msgid "Like :meth:`digest` except the digest is returned as a string object of double length, containing only hexadecimal digits.  This may be used to exchange the value safely in email or other non-binary environments."
msgstr ""

msgid "Return a copy (\"clone\") of the hash object.  This can be used to efficiently compute the digests of data sharing a common initial substring."
msgstr ""

msgid "A module to generate message authentication codes using hashes."
msgstr ""

msgid "Another way to encode binary hashes for non-binary environments."
msgstr ""

msgid "The FIPS 180-2 publication on Secure Hash Algorithms."
msgstr ""

msgid "Wikipedia article with information on which algorithms have known issues and what that means regarding their use."
msgstr ""

msgid ":mod:`heapq` --- Heap queue algorithm"
msgstr ""

msgid "This module provides an implementation of the heap queue algorithm, also known as the priority queue algorithm."
msgstr ""

msgid "Heaps are arrays for which ``heap[k] <= heap[2*k+1]`` and ``heap[k] <= heap[2*k+2]`` for all *k*, counting elements from zero.  For the sake of comparison, non-existing elements are considered to be infinite.  The interesting property of a heap is that ``heap[0]`` is always its smallest element."
msgstr ""

msgid "The API below differs from textbook heap algorithms in two aspects: (a) We use zero-based indexing.  This makes the relationship between the index for a node and the indexes for its children slightly less obvious, but is more suitable since Python uses zero-based indexing. (b) Our pop method returns the smallest item, not the largest (called a \"min heap\" in textbooks; a \"max heap\" is more common in texts because of its suitability for in-place sorting)."
msgstr ""

msgid "These two make it possible to view the heap as a regular Python list without surprises: ``heap[0]`` is the smallest item, and ``heap.sort()`` maintains the heap invariant!"
msgstr ""

msgid "To create a heap, use a list initialized to ``[]``, or you can transform a populated list into a heap via function :func:`heapify`."
msgstr ""

msgid "Push the value *item* onto the *heap*, maintaining the heap invariant."
msgstr ""

msgid "Pop and return the smallest item from the *heap*, maintaining the heap invariant.  If the heap is empty, :exc:`IndexError` is raised."
msgstr ""

msgid "Push *item* on the heap, then pop and return the smallest item from the *heap*.  The combined action runs more efficiently than :func:`heappush` followed by a separate call to :func:`heappop`."
msgstr ""

msgid "Transform list *x* into a heap, in-place, in linear time."
msgstr ""

msgid "Pop and return the smallest item from the *heap*, and also push the new *item*. The heap size doesn't change. If the heap is empty, :exc:`IndexError` is raised. This is more efficient than :func:`heappop` followed by  :func:`heappush`, and can be more appropriate when using a fixed-size heap.  Note that the value returned may be larger than *item*!  That constrains reasonable uses of this routine unless written as part of a conditional replacement::"
msgstr ""

msgid "if item > heap[0]:     item = heapreplace(heap, item)"
msgstr ""

msgid "Example of use:"
msgstr ""

msgid ">>> from heapq import heappush, heappop >>> heap = [] >>> data = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0] >>> for item in data: ...     heappush(heap, item) ... >>> ordered = [] >>> while heap: ...     ordered.append(heappop(heap)) ... >>> ordered [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] >>> data.sort() >>> data == ordered True"
msgstr ""

msgid "Using a heap to insert items at the correct place in a priority queue:"
msgstr ""

msgid ">>> heap = [] >>> data = [(1, 'J'), (4, 'N'), (3, 'H'), (2, 'O')] >>> for item in data: ...     heappush(heap, item) ... >>> while heap: ...     print(heappop(heap)[1]) J O H N"
msgstr ""

msgid "The module also offers three general purpose functions based on heaps."
msgstr ""

msgid "Merge multiple sorted inputs into a single sorted output (for example, merge timestamped entries from multiple log files).  Returns an :term:`iterator` over the sorted values."
msgstr ""

msgid "Similar to ``sorted(itertools.chain(*iterables))`` but returns an iterable, does not pull the data into memory all at once, and assumes that each of the input streams is already sorted (smallest to largest)."
msgstr ""

msgid "Return a list with the *n* largest elements from the dataset defined by *iterable*.  *key*, if provided, specifies a function of one argument that is used to extract a comparison key from each element in the iterable: ``key=str.lower`` Equivalent to:  ``sorted(iterable, key=key, reverse=True)[:n]``"
msgstr ""

msgid "Return a list with the *n* smallest elements from the dataset defined by *iterable*.  *key*, if provided, specifies a function of one argument that is used to extract a comparison key from each element in the iterable: ``key=str.lower`` Equivalent to:  ``sorted(iterable, key=key)[:n]``"
msgstr ""

msgid "The latter two functions perform best for smaller values of *n*.  For larger values, it is more efficient to use the :func:`sorted` function.  Also, when ``n==1``, it is more efficient to use the built-in :func:`min` and :func:`max` functions."
msgstr ""

msgid "Theory"
msgstr ""

msgid "(This explanation is due to François Pinard.  The Python code for this module was contributed by Kevin O'Connor.)"
msgstr ""

msgid "Heaps are arrays for which ``a[k] <= a[2*k+1]`` and ``a[k] <= a[2*k+2]`` for all *k*, counting elements from 0.  For the sake of comparison, non-existing elements are considered to be infinite.  The interesting property of a heap is that ``a[0]`` is always its smallest element."
msgstr ""

msgid "The strange invariant above is meant to be an efficient memory representation for a tournament.  The numbers below are *k*, not ``a[k]``::"
msgstr ""

msgid "0                1                                 2        3               4                5               6    7       8       9       10      11      12      13      14  15 16   17 18   19 20   21 22   23 24   25 26   27 28   29 30"
msgstr ""

msgid "In the tree above, each cell *k* is topping ``2*k+1`` and ``2*k+2``. In an usual binary tournament we see in sports, each cell is the winner over the two cells it tops, and we can trace the winner down the tree to see all opponents s/he had.  However, in many computer applications of such tournaments, we do not need to trace the history of a winner. To be more memory efficient, when a winner is promoted, we try to replace it by something else at a lower level, and the rule becomes that a cell and the two cells it tops contain three different items, but the top cell \"wins\" over the two topped cells."
msgstr ""

msgid "If this heap invariant is protected at all time, index 0 is clearly the overall winner.  The simplest algorithmic way to remove it and find the \"next\" winner is to move some loser (let's say cell 30 in the diagram above) into the 0 position, and then percolate this new 0 down the tree, exchanging values, until the invariant is re-established. This is clearly logarithmic on the total number of items in the tree. By iterating over all items, you get an O(n log n) sort."
msgstr ""

msgid "A nice feature of this sort is that you can efficiently insert new items while the sort is going on, provided that the inserted items are not \"better\" than the last 0'th element you extracted.  This is especially useful in simulation contexts, where the tree holds all incoming events, and the \"win\" condition means the smallest scheduled time.  When an event schedule other events for execution, they are scheduled into the future, so they can easily go into the heap.  So, a heap is a good structure for implementing schedulers (this is what I used for my MIDI sequencer :-)."
msgstr ""

msgid "Various structures for implementing schedulers have been extensively studied, and heaps are good for this, as they are reasonably speedy, the speed is almost constant, and the worst case is not much different than the average case. However, there are other representations which are more efficient overall, yet the worst cases might be terrible."
msgstr ""

msgid "Heaps are also very useful in big disk sorts.  You most probably all know that a big sort implies producing \"runs\" (which are pre-sorted sequences, which size is usually related to the amount of CPU memory), followed by a merging passes for these runs, which merging is often very cleverly organised [#]_. It is very important that the initial sort produces the longest runs possible.  Tournaments are a good way to that.  If, using all the memory available to hold a tournament, you replace and percolate items that happen to fit the current run, you'll produce runs which are twice the size of the memory for random input, and much better for input fuzzily ordered."
msgstr ""

msgid "Moreover, if you output the 0'th item on disk and get an input which may not fit in the current tournament (because the value \"wins\" over the last output value), it cannot fit in the heap, so the size of the heap decreases.  The freed memory could be cleverly reused immediately for progressively building a second heap, which grows at exactly the same rate the first heap is melting.  When the first heap completely vanishes, you switch heaps and start a new run.  Clever and quite effective!"
msgstr ""

msgid "In a word, heaps are useful memory structures to know.  I use them in a few applications, and I think it is good to keep a 'heap' module around. :-)"
msgstr ""

msgid "The disk balancing algorithms which are current, nowadays, are more annoying than clever, and this is a consequence of the seeking capabilities of the disks. On devices which cannot seek, like big tape drives, the story was quite different, and one had to be very clever to ensure (far in advance) that each tape movement will be the most effective possible (that is, will best participate at \"progressing\" the merge).  Some tapes were even able to read backwards, and this was also used to avoid the rewinding time. Believe me, real good tape sorts were quite spectacular to watch! From all times, sorting has always been a Great Art! :-)"
msgstr ""

msgid ":mod:`hmac` --- Keyed-Hashing for Message Authentication"
msgstr ""

msgid "This module implements the HMAC algorithm as described by :rfc:`2104`."
msgstr ""

msgid "Return a new hmac object.  If *msg* is present, the method call ``update(msg)`` is made. *digestmod* is the digest constructor or module for the HMAC object to use. It defaults to  the :func:`hashlib.md5` constructor."
msgstr ""

msgid "The md5 hash has known weaknesses but remains the default for backwards compatibility. Choose a better one for your application."
msgstr ""

msgid "An HMAC object has the following methods:"
msgstr ""

msgid "Update the hmac object with the string *msg*.  Repeated calls are equivalent to a single call with the concatenation of all the arguments: ``m.update(a); m.update(b)`` is equivalent to ``m.update(a + b)``."
msgstr ""

msgid "Return the digest of the strings passed to the :meth:`update` method so far. This string will be the same length as the *digest_size* of the digest given to the constructor.  It may contain non-ASCII characters, including NUL bytes."
msgstr ""

msgid "Like :meth:`digest` except the digest is returned as a string twice the length containing only hexadecimal digits.  This may be used to exchange the value safely in email or other non-binary environments."
msgstr ""

msgid "Return a copy (\"clone\") of the hmac object.  This can be used to efficiently compute the digests of strings that share a common initial substring."
msgstr ""

msgid "The Python module providing secure hash functions."
msgstr ""

msgid ":mod:`html.entities` --- Definitions of HTML general entities"
msgstr ""

msgid "This module defines three dictionaries, ``name2codepoint``, ``codepoint2name``, and ``entitydefs``. ``entitydefs`` is used to provide the :attr:`entitydefs` member of the :class:`html.parser.HTMLParser` class.  The definition provided here contains all the entities defined by XHTML 1.0 that can be handled using simple textual substitution in the Latin-1 character set (ISO-8859-1)."
msgstr ""

msgid "A dictionary mapping XHTML 1.0 entity definitions to their replacement text in ISO Latin-1."
msgstr ""

msgid "A dictionary that maps HTML entity names to the Unicode codepoints."
msgstr ""

msgid "A dictionary that maps Unicode codepoints to HTML entity names."
msgstr ""

msgid ":mod:`html.parser` --- Simple HTML and XHTML parser"
msgstr ""

msgid "This module defines a class :class:`HTMLParser` which serves as the basis for parsing text files formatted in HTML (HyperText Mark-up Language) and XHTML."
msgstr ""

msgid "The :class:`HTMLParser` class is instantiated without arguments."
msgstr ""

msgid "An :class:`HTMLParser` instance is fed HTML data and calls handler functions when tags begin and end.  The :class:`HTMLParser` class is meant to be overridden by the user to provide a desired behavior."
msgstr ""

msgid "This parser does not check that end tags match start tags or call the end-tag handler for elements which are closed implicitly by closing an outer element."
msgstr ""

msgid "An exception is defined as well:"
msgstr ""

msgid "Exception raised by the :class:`HTMLParser` class when it encounters an error while parsing.  This exception provides three attributes: :attr:`msg` is a brief message explaining the error, :attr:`lineno` is the number of the line on which the broken construct was detected, and :attr:`offset` is the number of characters into the line at which the construct starts."
msgstr ""

msgid ":class:`HTMLParser` instances have the following methods:"
msgstr ""

msgid "Reset the instance.  Loses all unprocessed data.  This is called implicitly at instantiation time."
msgstr ""

msgid "Feed some text to the parser.  It is processed insofar as it consists of complete elements; incomplete data is buffered until more data is fed or :meth:`close` is called."
msgstr ""

msgid "Force processing of all buffered data as if it were followed by an end-of-file mark.  This method may be redefined by a derived class to define additional processing at the end of the input, but the redefined version should always call the :class:`HTMLParser` base class method :meth:`close`."
msgstr ""

msgid "Return current line number and offset."
msgstr ""

msgid "Return the text of the most recently opened start tag.  This should not normally be needed for structured processing, but may be useful in dealing with HTML \"as deployed\" or for re-generating input with minimal changes (whitespace between attributes can be preserved, etc.)."
msgstr ""

msgid "This method is called to handle the start of a tag.  It is intended to be overridden by a derived class; the base class implementation does nothing."
msgstr ""

msgid "The *tag* argument is the name of the tag converted to lower case. The *attrs* argument is a list of ``(name, value)`` pairs containing the attributes found inside the tag's ``<>`` brackets.  The *name* will be translated to lower case, and quotes in the *value* have been removed, and character and entity references have been replaced.  For instance, for the tag ``<A HREF=\"http://www.cwi.nl/\">``, this method would be called as ``handle_starttag('a', [('href', 'http://www.cwi.nl/')])``."
msgstr ""

msgid "All entity references from :mod:`html.entities` are replaced in the attribute values."
msgstr ""

msgid "Similar to :meth:`handle_starttag`, but called when the parser encounters an XHTML-style empty tag (``<a .../>``).  This method may be overridden by subclasses which require this particular lexical information; the default implementation simple calls :meth:`handle_starttag` and :meth:`handle_endtag`."
msgstr ""

msgid "This method is called to handle the end tag of an element.  It is intended to be overridden by a derived class; the base class implementation does nothing.  The *tag* argument is the name of the tag converted to lower case."
msgstr ""

msgid "This method is called to process arbitrary data.  It is intended to be overridden by a derived class; the base class implementation does nothing."
msgstr ""

msgid "This method is called to process a character reference of the form ``&#ref;``. It is intended to be overridden by a derived class; the base class implementation does nothing."
msgstr ""

msgid "This method is called to process a general entity reference of the form ``&name;`` where *name* is an general entity reference.  It is intended to be overridden by a derived class; the base class implementation does nothing."
msgstr ""

msgid "This method is called when a comment is encountered.  The *comment* argument is a string containing the text between the ``--`` and ``--`` delimiters, but not the delimiters themselves.  For example, the comment ``<!--text-->`` will cause this method to be called with the argument ``'text'``.  It is intended to be overridden by a derived class; the base class implementation does nothing."
msgstr ""

msgid "Method called when an SGML declaration is read by the parser.  The *decl* parameter will be the entire contents of the declaration inside the ``<!``...\\ ``>`` markup.  It is intended to be overridden by a derived class; the base class implementation does nothing."
msgstr ""

msgid "Method called when a processing instruction is encountered.  The *data* parameter will contain the entire processing instruction. For example, for the processing instruction ``<?proc color='red'>``, this method would be called as ``handle_pi(\"proc color='red'\")``.  It is intended to be overridden by a derived class; the base class implementation does nothing."
msgstr ""

msgid "The :class:`HTMLParser` class uses the SGML syntactic rules for processing instructions.  An XHTML processing instruction using the trailing ``'?'`` will cause the ``'?'`` to be included in *data*."
msgstr ""

msgid "Example HTML Parser Application"
msgstr ""

msgid "As a basic example, below is a very basic HTML parser that uses the :class:`HTMLParser` class to print out tags as they are encountered::"
msgstr ""

msgid ">>> from html.parser import HTMLParser >>> >>> class MyHTMLParser(HTMLParser): ...     def handle_starttag(self, tag, attrs): ...         print(\"Encountered a {} start tag\".format(tag)) ...     def handle_endtag(self, tag): ...         print(\"Encountered a {} end tag\".format(tag)) ... >>> page = \"\"\"<html><h1>Title</h1><p>I'm a paragraph!</p></html>\"\"\" >>> >>> myparser = MyHTMLParser() >>> myparser.feed(page) Encountered a html start tag Encountered a h1 start tag Encountered a h1 end tag Encountered a p start tag Encountered a p end tag Encountered a html end tag"
msgstr ""

msgid ":mod:`http.client` --- HTTP protocol client"
msgstr ""

msgid "This module defines classes which implement the client side of the HTTP and HTTPS protocols.  It is normally not used directly --- the module :mod:`urllib.request` uses it to handle URLs that use HTTP and HTTPS."
msgstr ""

msgid "HTTPS support is only available if the :mod:`socket` module was compiled with SSL support."
msgstr ""

msgid "The module provides the following classes:"
msgstr ""

msgid "An :class:`HTTPConnection` instance represents one transaction with an HTTP server.  It should be instantiated passing it a host and optional port number.  If no port number is passed, the port is extracted from the host string if it has the form ``host:port``, else the default HTTP port (80) is used.  When True, the optional parameter *strict* (which defaults to a false value) causes ``BadStatusLine`` to be raised if the status line can't be parsed as a valid HTTP/1.0 or 1.1 status line.  If the optional *timeout* parameter is given, blocking operations (like connection attempts) will timeout after that many seconds (if it is not given, the global default timeout setting is used). The optional *source_address* parameter may be a typle of a (host, port) to use as the source address the HTTP connection is made from."
msgstr ""

msgid "For example, the following calls all create instances that connect to the server at the same host and port::"
msgstr ""

msgid ">>> h1 = http.client.HTTPConnection('www.cwi.nl') >>> h2 = http.client.HTTPConnection('www.cwi.nl:80') >>> h3 = http.client.HTTPConnection('www.cwi.nl', 80) >>> h3 = http.client.HTTPConnection('www.cwi.nl', 80, timeout=10)"
msgstr ""

msgid "A subclass of :class:`HTTPConnection` that uses SSL for communication with secure servers.  Default port is ``443``. *key_file* is the name of a PEM formatted file that contains your private key. *cert_file* is a PEM formatted certificate chain file."
msgstr ""

msgid "This does not do any certificate verification."
msgstr ""

msgid "Class whose instances are returned upon successful connection.  Not instantiated directly by user."
msgstr ""

msgid "The following exceptions are raised as appropriate:"
msgstr ""

msgid "The base class of the other exceptions in this module.  It is a subclass of :exc:`Exception`."
msgstr ""

msgid "A subclass of :exc:`HTTPException`."
msgstr ""

msgid "A subclass of :exc:`HTTPException`, raised if a port is given and is either non-numeric or empty."
msgstr ""

msgid "A subclass of :exc:`ImproperConnectionState`."
msgstr ""

msgid "A subclass of :exc:`HTTPException`.  Raised if a server responds with a HTTP status code that we don't understand."
msgstr ""

msgid "The constants defined in this module are:"
msgstr ""

msgid "The default port for the HTTP protocol (always ``80``)."
msgstr ""

msgid "The default port for the HTTPS protocol (always ``443``)."
msgstr ""

msgid "and also the following constants for integer status codes:"
msgstr ""

msgid "Definition"
msgstr ""

msgid ":const:`CONTINUE`"
msgstr ""

msgid "``100``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.1.1 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.1.1>`_"
msgstr ""

msgid ":const:`SWITCHING_PROTOCOLS`"
msgstr ""

msgid "``101``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.1.2 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.1.2>`_"
msgstr ""

msgid ":const:`PROCESSING`"
msgstr ""

msgid "``102``"
msgstr ""

msgid "WEBDAV, `RFC 2518, Section 10.1 <http://www.webdav.org/specs/rfc2518.html#STATUS_102>`_"
msgstr ""

msgid ":const:`OK`"
msgstr ""

msgid "``200``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.2.1 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1>`_"
msgstr ""

msgid ":const:`CREATED`"
msgstr ""

msgid "``201``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.2.2 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.2>`_"
msgstr ""

msgid ":const:`ACCEPTED`"
msgstr ""

msgid "``202``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.2.3 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.3>`_"
msgstr ""

msgid ":const:`NON_AUTHORITATIVE_INFORMATION`"
msgstr ""

msgid "``203``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.2.4 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.4>`_"
msgstr ""

msgid ":const:`NO_CONTENT`"
msgstr ""

msgid "``204``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.2.5 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.5>`_"
msgstr ""

msgid ":const:`RESET_CONTENT`"
msgstr ""

msgid "``205``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.2.6 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.6>`_"
msgstr ""

msgid ":const:`PARTIAL_CONTENT`"
msgstr ""

msgid "``206``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.2.7 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.7>`_"
msgstr ""

msgid ":const:`MULTI_STATUS`"
msgstr ""

msgid "``207``"
msgstr ""

msgid "WEBDAV `RFC 2518, Section 10.2 <http://www.webdav.org/specs/rfc2518.html#STATUS_207>`_"
msgstr ""

msgid ":const:`IM_USED`"
msgstr ""

msgid "``226``"
msgstr ""

msgid "Delta encoding in HTTP, :rfc:`3229`, Section 10.4.1"
msgstr ""

msgid ":const:`MULTIPLE_CHOICES`"
msgstr ""

msgid "``300``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.3.1 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.1>`_"
msgstr ""

msgid ":const:`MOVED_PERMANENTLY`"
msgstr ""

msgid "``301``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.3.2 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.2>`_"
msgstr ""

msgid ":const:`FOUND`"
msgstr ""

msgid "``302``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.3.3 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.3>`_"
msgstr ""

msgid ":const:`SEE_OTHER`"
msgstr ""

msgid "``303``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.3.4 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.4>`_"
msgstr ""

msgid ":const:`NOT_MODIFIED`"
msgstr ""

msgid "``304``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.3.5 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.5>`_"
msgstr ""

msgid ":const:`USE_PROXY`"
msgstr ""

msgid "``305``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.3.6 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.6>`_"
msgstr ""

msgid ":const:`TEMPORARY_REDIRECT`"
msgstr ""

msgid "``307``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.3.8 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.8>`_"
msgstr ""

msgid ":const:`BAD_REQUEST`"
msgstr ""

msgid "``400``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.4.1 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1>`_"
msgstr ""

msgid ":const:`UNAUTHORIZED`"
msgstr ""

msgid "``401``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.4.2 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2>`_"
msgstr ""

msgid ":const:`PAYMENT_REQUIRED`"
msgstr ""

msgid "``402``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.4.3 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.3>`_"
msgstr ""

msgid ":const:`FORBIDDEN`"
msgstr ""

msgid "``403``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.4.4 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.4>`_"
msgstr ""

msgid ":const:`NOT_FOUND`"
msgstr ""

msgid "``404``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.4.5 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.5>`_"
msgstr ""

msgid ":const:`METHOD_NOT_ALLOWED`"
msgstr ""

msgid "``405``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.4.6 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.6>`_"
msgstr ""

msgid ":const:`NOT_ACCEPTABLE`"
msgstr ""

msgid "``406``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.4.7 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.7>`_"
msgstr ""

msgid ":const:`PROXY_AUTHENTICATION_REQUIRED`"
msgstr ""

msgid "``407``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.4.8 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.8>`_"
msgstr ""

msgid ":const:`REQUEST_TIMEOUT`"
msgstr ""

msgid "``408``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.4.9 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.9>`_"
msgstr ""

msgid ":const:`CONFLICT`"
msgstr ""

msgid "``409``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.4.10 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.10>`_"
msgstr ""

msgid ":const:`GONE`"
msgstr ""

msgid "``410``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.4.11 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.11>`_"
msgstr ""

msgid ":const:`LENGTH_REQUIRED`"
msgstr ""

msgid "``411``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.4.12 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.12>`_"
msgstr ""

msgid ":const:`PRECONDITION_FAILED`"
msgstr ""

msgid "``412``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.4.13 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.13>`_"
msgstr ""

msgid ":const:`REQUEST_ENTITY_TOO_LARGE`"
msgstr ""

msgid "``413``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.4.14 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.14>`_"
msgstr ""

msgid ":const:`REQUEST_URI_TOO_LONG`"
msgstr ""

msgid "``414``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.4.15 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.15>`_"
msgstr ""

msgid ":const:`UNSUPPORTED_MEDIA_TYPE`"
msgstr ""

msgid "``415``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.4.16 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.16>`_"
msgstr ""

msgid ":const:`REQUESTED_RANGE_NOT_SATISFIABLE`"
msgstr ""

msgid "``416``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.4.17 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.17>`_"
msgstr ""

msgid ":const:`EXPECTATION_FAILED`"
msgstr ""

msgid "``417``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.4.18 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.18>`_"
msgstr ""

msgid ":const:`UNPROCESSABLE_ENTITY`"
msgstr ""

msgid "``422``"
msgstr ""

msgid "WEBDAV, `RFC 2518, Section 10.3 <http://www.webdav.org/specs/rfc2518.html#STATUS_422>`_"
msgstr ""

msgid ":const:`LOCKED`"
msgstr ""

msgid "``423``"
msgstr ""

msgid "WEBDAV `RFC 2518, Section 10.4 <http://www.webdav.org/specs/rfc2518.html#STATUS_423>`_"
msgstr ""

msgid ":const:`FAILED_DEPENDENCY`"
msgstr ""

msgid "``424``"
msgstr ""

msgid "WEBDAV, `RFC 2518, Section 10.5 <http://www.webdav.org/specs/rfc2518.html#STATUS_424>`_"
msgstr ""

msgid ":const:`UPGRADE_REQUIRED`"
msgstr ""

msgid "``426``"
msgstr ""

msgid "HTTP Upgrade to TLS, :rfc:`2817`, Section 6"
msgstr ""

msgid ":const:`INTERNAL_SERVER_ERROR`"
msgstr ""

msgid "``500``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.5.1 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1>`_"
msgstr ""

msgid ":const:`NOT_IMPLEMENTED`"
msgstr ""

msgid "``501``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.5.2 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.2>`_"
msgstr ""

msgid ":const:`BAD_GATEWAY`"
msgstr ""

msgid "``502``"
msgstr ""

msgid "HTTP/1.1 `RFC 2616, Section 10.5.3 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.3>`_"
msgstr ""

msgid ":const:`SERVICE_UNAVAILABLE`"
msgstr ""

msgid "``503``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.5.4 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.4>`_"
msgstr ""

msgid ":const:`GATEWAY_TIMEOUT`"
msgstr ""

msgid "``504``"
msgstr ""

msgid "HTTP/1.1 `RFC 2616, Section 10.5.5 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.5>`_"
msgstr ""

msgid ":const:`HTTP_VERSION_NOT_SUPPORTED`"
msgstr ""

msgid "``505``"
msgstr ""

msgid "HTTP/1.1, `RFC 2616, Section 10.5.6 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.6>`_"
msgstr ""

msgid ":const:`INSUFFICIENT_STORAGE`"
msgstr ""

msgid "``507``"
msgstr ""

msgid "WEBDAV, `RFC 2518, Section 10.6 <http://www.webdav.org/specs/rfc2518.html#STATUS_507>`_"
msgstr ""

msgid ":const:`NOT_EXTENDED`"
msgstr ""

msgid "``510``"
msgstr ""

msgid "An HTTP Extension Framework, :rfc:`2774`, Section 7"
msgstr ""

msgid "This dictionary maps the HTTP 1.1 status codes to the W3C names."
msgstr ""

msgid "Example: ``http.client.responses[http.client.NOT_FOUND]`` is ``'Not Found'``."
msgstr ""

msgid "HTTPConnection Objects"
msgstr ""

msgid ":class:`HTTPConnection` instances have the following methods:"
msgstr ""

msgid "This will send a request to the server using the HTTP request method *method* and the selector *url*.  If the *body* argument is present, it should be string or bytes object of data to send after the headers are finished.  Strings are encoded as ISO-8859-1, the default charset for HTTP.  To use other encodings, pass a bytes object.  The Content-Length header is set to the length of the string."
msgstr ""

msgid "The *body* may also be an open file object, in which case the contents of the file is sent; this file object should support ``fileno()`` and ``read()`` methods. The header Content-Length is automatically set to the length of the file as reported by stat."
msgstr ""

msgid "The *headers* argument should be a mapping of extra HTTP headers to send with the request."
msgstr ""

msgid "Should be called after a request is sent to get the response from the server. Returns an :class:`HTTPResponse` instance."
msgstr ""

msgid "Note that you must have read the whole response before you can send a new request to the server."
msgstr ""

msgid "Set the debugging level (the amount of debugging output printed). The default debug level is ``0``, meaning no debugging output is printed."
msgstr ""

msgid "Set the host and the port for HTTP Connect Tunnelling. Normally used when it is required to a HTTPS Connection through a proxy server."
msgstr ""

msgid "The headers argument should be a mapping of extra HTTP headers to to sent with the CONNECT request."
msgstr ""

msgid "Connect to the server specified when the object was created."
msgstr ""

msgid "Close the connection to the server."
msgstr ""

msgid "As an alternative to using the :meth:`request` method described above, you can also send your request step by step, by using the four functions below."
msgstr ""

msgid "This should be the first call after the connection to the server has been made. It sends a line to the server consisting of the *request* string, the *selector* string, and the HTTP version (``HTTP/1.1``).  To disable automatic sending of ``Host:`` or ``Accept-Encoding:`` headers (for example to accept additional content encodings), specify *skip_host* or *skip_accept_encoding* with non-False values."
msgstr ""

msgid "Send an :rfc:`822`\\ -style header to the server.  It sends a line to the server consisting of the header, a colon and a space, and the first argument.  If more arguments are given, continuation lines are sent, each consisting of a tab and an argument."
msgstr ""

msgid "Send a blank line to the server, signalling the end of the headers."
msgstr ""

msgid "Send data to the server.  This should be used directly only after the :meth:`endheaders` method has been called and before :meth:`getresponse` is called."
msgstr ""

msgid "HTTPResponse Objects"
msgstr ""

msgid "An :class:`HTTPResponse` instance wraps the HTTP response from the server.  It provides access to the request headers and the entity body.  The response is an iterable object and can be used in a with statement."
msgstr ""

msgid "Reads and returns the response body, or up to the next *amt* bytes."
msgstr ""

msgid "Get the contents of the header *name*, or *default* if there is no matching header."
msgstr ""

msgid "Return a list of (header, value) tuples."
msgstr ""

msgid "A :class:`http.client.HTTPMessage` instance containing the response headers.  :class:`http.client.HTTPMessage` is a subclass of :class:`email.message.Message`."
msgstr ""

msgid "HTTP protocol version used by server.  10 for HTTP/1.0, 11 for HTTP/1.1."
msgstr ""

msgid "Status code returned by server."
msgstr ""

msgid "Reason phrase returned by server."
msgstr ""

msgid "A debugging hook.  If :attr:`debuglevel` is greater than zero, messages will be printed to stdout as the response is read and parsed."
msgstr ""

msgid "Here is an example session that uses the ``GET`` method::"
msgstr ""

msgid ">>> import http.client >>> conn = http.client.HTTPConnection(\"www.python.org\") >>> conn.request(\"GET\", \"/index.html\") >>> r1 = conn.getresponse() >>> print(r1.status, r1.reason) 200 OK >>> data1 = r1.read() >>> conn.request(\"GET\", \"/parrot.spam\") >>> r2 = conn.getresponse() >>> print(r2.status, r2.reason) 404 Not Found >>> data2 = r2.read() >>> conn.close()"
msgstr ""

msgid "Here is an example session that uses the ``HEAD`` method.  Note that the ``HEAD`` method never returns any data. ::"
msgstr ""

msgid ">>> import http.client >>> conn = http.client.HTTPConnection(\"www.python.org\") >>> conn.request(\"HEAD\",\"/index.html\") >>> res = conn.getresponse() >>> print(res.status, res.reason) 200 OK >>> data = res.read() >>> print(len(data)) 0 >>> data == b'' True"
msgstr ""

msgid "Here is an example session that shows how to ``POST`` requests::"
msgstr ""

msgid ">>> import http.client, urllib.parse >>> params = urllib.parse.urlencode({'spam': 1, 'eggs': 2, 'bacon': 0}) >>> headers = {\"Content-type\": \"application/x-www-form-urlencoded\", ...            \"Accept\": \"text/plain\"} >>> conn = http.client.HTTPConnection(\"musi-cal.mojam.com:80\") >>> conn.request(\"POST\", \"/cgi-bin/query\", params, headers) >>> response = conn.getresponse() >>> print(response.status, response.reason) 200 OK >>> data = response.read() >>> conn.close()"
msgstr ""

msgid "HTTPMessage Objects"
msgstr ""

msgid "An :class:`http.client.HTTPMessage` instance holds the headers from an HTTP response.  It is implemented using the :class:`email.message.Message` class."
msgstr ""

msgid ":mod:`http.cookiejar` --- Cookie handling for HTTP clients"
msgstr ""

msgid "The :mod:`http.cookiejar` module defines classes for automatic handling of HTTP cookies.  It is useful for accessing web sites that require small pieces of data -- :dfn:`cookies` -- to be set on the client machine by an HTTP response from a web server, and then returned to the server in later HTTP requests."
msgstr ""

msgid "Both the regular Netscape cookie protocol and the protocol defined by :rfc:`2965` are handled.  RFC 2965 handling is switched off by default. :rfc:`2109` cookies are parsed as Netscape cookies and subsequently treated either as Netscape or RFC 2965 cookies according to the 'policy' in effect. Note that the great majority of cookies on the Internet are Netscape cookies. :mod:`http.cookiejar` attempts to follow the de-facto Netscape cookie protocol (which differs substantially from that set out in the original Netscape specification), including taking note of the ``max-age`` and ``port`` cookie-attributes introduced with RFC 2965."
msgstr ""

msgid "The various named parameters found in :mailheader:`Set-Cookie` and :mailheader:`Set-Cookie2` headers (eg. ``domain`` and ``expires``) are conventionally referred to as :dfn:`attributes`.  To distinguish them from Python attributes, the documentation for this module uses the term :dfn:`cookie-attribute` instead."
msgstr ""

msgid "The module defines the following exception:"
msgstr ""

msgid "Instances of :class:`FileCookieJar` raise this exception on failure to load cookies from a file.  :exc:`LoadError` is a subclass of :exc:`IOError`."
msgstr ""

msgid "The following classes are provided:"
msgstr ""

msgid "*policy* is an object implementing the :class:`CookiePolicy` interface."
msgstr ""

msgid "The :class:`CookieJar` class stores HTTP cookies.  It extracts cookies from HTTP requests, and returns them in HTTP responses. :class:`CookieJar` instances automatically expire contained cookies when necessary.  Subclasses are also responsible for storing and retrieving cookies from a file or database."
msgstr ""

msgid "*policy* is an object implementing the :class:`CookiePolicy` interface.  For the other arguments, see the documentation for the corresponding attributes."
msgstr ""

msgid "A :class:`CookieJar` which can load cookies from, and perhaps save cookies to, a file on disk.  Cookies are **NOT** loaded from the named file until either the :meth:`load` or :meth:`revert` method is called.  Subclasses of this class are documented in section :ref:`file-cookie-jar-classes`."
msgstr ""

msgid "This class is responsible for deciding whether each cookie should be accepted from / returned to the server."
msgstr ""

msgid "Constructor arguments should be passed as keyword arguments only. *blocked_domains* is a sequence of domain names that we never accept cookies from, nor return cookies to. *allowed_domains* if not :const:`None`, this is a sequence of the only domains for which we accept and return cookies.  For all other arguments, see the documentation for :class:`CookiePolicy` and :class:`DefaultCookiePolicy` objects."
msgstr ""

msgid ":class:`DefaultCookiePolicy` implements the standard accept / reject rules for Netscape and RFC 2965 cookies.  By default, RFC 2109 cookies (ie. cookies received in a :mailheader:`Set-Cookie` header with a version cookie-attribute of 1) are treated according to the RFC 2965 rules.  However, if RFC 2965 handling is turned off or :attr:`rfc2109_as_netscape` is True, RFC 2109 cookies are 'downgraded' by the :class:`CookieJar` instance to Netscape cookies, by setting the :attr:`version` attribute of the :class:`Cookie` instance to 0. :class:`DefaultCookiePolicy` also provides some parameters to allow some fine-tuning of policy."
msgstr ""

msgid "This class represents Netscape, RFC 2109 and RFC 2965 cookies.  It is not expected that users of :mod:`http.cookiejar` construct their own :class:`Cookie` instances.  Instead, if necessary, call :meth:`make_cookies` on a :class:`CookieJar` instance."
msgstr ""

msgid "URL opening with automatic cookie handling."
msgstr ""

msgid "HTTP cookie classes, principally useful for server-side code.  The :mod:`http.cookiejar` and :mod:`http.cookies` modules do not depend on each other."
msgstr ""

msgid "Extensions to this module, including a class for reading Microsoft Internet Explorer cookies on Windows."
msgstr ""

msgid "The specification of the original Netscape cookie protocol.  Though this is still the dominant protocol, the 'Netscape cookie protocol' implemented by all the major browsers (and :mod:`http.cookiejar`) only bears a passing resemblance to the one sketched out in ``cookie_spec.html``."
msgstr ""

msgid "Obsoleted by RFC 2965. Uses :mailheader:`Set-Cookie` with version=1."
msgstr ""

msgid "The Netscape protocol with the bugs fixed.  Uses :mailheader:`Set-Cookie2` in place of :mailheader:`Set-Cookie`.  Not widely used."
msgstr ""

msgid "Unfinished errata to RFC 2965."
msgstr ""

msgid ":rfc:`2964` - Use of HTTP State Management"
msgstr ""

msgid "CookieJar and FileCookieJar Objects"
msgstr ""

msgid ":class:`CookieJar` objects support the :term:`iterator` protocol for iterating over contained :class:`Cookie` objects."
msgstr ""

msgid ":class:`CookieJar` has the following methods:"
msgstr ""

msgid "Add correct :mailheader:`Cookie` header to *request*."
msgstr ""

msgid "If policy allows (ie. the :attr:`rfc2965` and :attr:`hide_cookie2` attributes of the :class:`CookieJar`'s :class:`CookiePolicy` instance are true and false respectively), the :mailheader:`Cookie2` header is also added when appropriate."
msgstr ""

msgid "The *request* object (usually a :class:`urllib.request..Request` instance) must support the methods :meth:`get_full_url`, :meth:`get_host`, :meth:`get_type`, :meth:`unverifiable`, :meth:`get_origin_req_host`, :meth:`has_header`, :meth:`get_header`, :meth:`header_items`, and :meth:`add_unredirected_header`, as documented by :mod:`urllib.request`."
msgstr ""

msgid "Extract cookies from HTTP *response* and store them in the :class:`CookieJar`, where allowed by policy."
msgstr ""

msgid "The :class:`CookieJar` will look for allowable :mailheader:`Set-Cookie` and :mailheader:`Set-Cookie2` headers in the *response* argument, and store cookies as appropriate (subject to the :meth:`CookiePolicy.set_ok` method's approval)."
msgstr ""

msgid "The *response* object (usually the result of a call to :meth:`urllib.request.urlopen`, or similar) should support an :meth:`info` method, which returns a :class:`email.message.Message` instance."
msgstr ""

msgid "The *request* object (usually a :class:`urllib.request.Request` instance) must support the methods :meth:`get_full_url`, :meth:`get_host`, :meth:`unverifiable`, and :meth:`get_origin_req_host`, as documented by :mod:`urllib.request`.  The request is used to set default values for cookie-attributes as well as for checking that the cookie is allowed to be set."
msgstr ""

msgid "Set the :class:`CookiePolicy` instance to be used."
msgstr ""

msgid "Return sequence of :class:`Cookie` objects extracted from *response* object."
msgstr ""

msgid "See the documentation for :meth:`extract_cookies` for the interfaces required of the *response* and *request* arguments."
msgstr ""

msgid "Set a :class:`Cookie` if policy says it's OK to do so."
msgstr ""

msgid "Set a :class:`Cookie`, without checking with policy to see whether or not it should be set."
msgstr ""

msgid "Clear some cookies."
msgstr ""

msgid "If invoked without arguments, clear all cookies.  If given a single argument, only cookies belonging to that *domain* will be removed. If given two arguments, cookies belonging to the specified *domain* and URL *path* are removed.  If given three arguments, then the cookie with the specified *domain*, *path* and *name* is removed."
msgstr ""

msgid "Raises :exc:`KeyError` if no matching cookie exists."
msgstr ""

msgid "Discard all session cookies."
msgstr ""

msgid "Discards all contained cookies that have a true :attr:`discard` attribute (usually because they had either no ``max-age`` or ``expires`` cookie-attribute, or an explicit ``discard`` cookie-attribute).  For interactive browsers, the end of a session usually corresponds to closing the browser window."
msgstr ""

msgid "Note that the :meth:`save` method won't save session cookies anyway, unless you ask otherwise by passing a true *ignore_discard* argument."
msgstr ""

msgid ":class:`FileCookieJar` implements the following additional methods:"
msgstr ""

msgid "Save cookies to a file."
msgstr ""

msgid "This base class raises :exc:`NotImplementedError`.  Subclasses may leave this method unimplemented."
msgstr ""

msgid "*filename* is the name of file in which to save cookies.  If *filename* is not specified, :attr:`self.filename` is used (whose default is the value passed to the constructor, if any); if :attr:`self.filename` is :const:`None`, :exc:`ValueError` is raised."
msgstr ""

msgid "*ignore_discard*: save even cookies set to be discarded. *ignore_expires*: save even cookies that have expired"
msgstr ""

msgid "The file is overwritten if it already exists, thus wiping all the cookies it contains.  Saved cookies can be restored later using the :meth:`load` or :meth:`revert` methods."
msgstr ""

msgid "Load cookies from a file."
msgstr ""

msgid "Old cookies are kept unless overwritten by newly loaded ones."
msgstr ""

msgid "Arguments are as for :meth:`save`."
msgstr ""

msgid "The named file must be in the format understood by the class, or :exc:`LoadError` will be raised.  Also, :exc:`IOError` may be raised, for example if the file does not exist."
msgstr ""

msgid "Clear all cookies and reload cookies from a saved file."
msgstr ""

msgid ":meth:`revert` can raise the same exceptions as :meth:`load`. If there is a failure, the object's state will not be altered."
msgstr ""

msgid ":class:`FileCookieJar` instances have the following public attributes:"
msgstr ""

msgid "Filename of default file in which to keep cookies.  This attribute may be assigned to."
msgstr ""

msgid "If true, load cookies lazily from disk.  This attribute should not be assigned to.  This is only a hint, since this only affects performance, not behaviour (unless the cookies on disk are changing). A :class:`CookieJar` object may ignore it.  None of the :class:`FileCookieJar` classes included in the standard library lazily loads cookies."
msgstr ""

msgid "FileCookieJar subclasses and co-operation with web browsers"
msgstr ""

msgid "The following :class:`CookieJar` subclasses are provided for reading and writing .  Further :class:`CookieJar` subclasses, including one that reads Microsoft Internet Explorer cookies, are available at http://wwwsearch.sourceforge.net/mechanize/."
msgstr ""

msgid "A :class:`FileCookieJar` that can load from and save cookies to disk in the Mozilla ``cookies.txt`` file format (which is also used by the Lynx and Netscape browsers)."
msgstr ""

msgid "This loses information about RFC 2965 cookies, and also about newer or non-standard cookie-attributes such as ``port``."
msgstr ""

msgid "Back up your cookies before saving if you have cookies whose loss / corruption would be inconvenient (there are some subtleties which may lead to slight changes in the file over a load / save round-trip)."
msgstr ""

msgid "Also note that cookies saved while Mozilla is running will get clobbered by Mozilla."
msgstr ""

msgid "A :class:`FileCookieJar` that can load from and save cookies to disk in format compatible with the libwww-perl library's ``Set-Cookie3`` file format.  This is convenient if you want to store cookies in a human-readable file."
msgstr ""

msgid "CookiePolicy Objects"
msgstr ""

msgid "Objects implementing the :class:`CookiePolicy` interface have the following methods:"
msgstr ""

msgid "Return boolean value indicating whether cookie should be accepted from server."
msgstr ""

msgid "*cookie* is a :class:`Cookie` instance.  *request* is an object implementing the interface defined by the documentation for :meth:`CookieJar.extract_cookies`."
msgstr ""

msgid "Return boolean value indicating whether cookie should be returned to server."
msgstr ""

msgid "*cookie* is a :class:`Cookie` instance.  *request* is an object implementing the interface defined by the documentation for :meth:`CookieJar.add_cookie_header`."
msgstr ""

msgid "Return false if cookies should not be returned, given cookie domain."
msgstr ""

msgid "This method is an optimization.  It removes the need for checking every cookie with a particular domain (which might involve reading many files).  Returning true from :meth:`domain_return_ok` and :meth:`path_return_ok` leaves all the work to :meth:`return_ok`."
msgstr ""

msgid "If :meth:`domain_return_ok` returns true for the cookie domain, :meth:`path_return_ok` is called for the cookie path.  Otherwise, :meth:`path_return_ok` and :meth:`return_ok` are never called for that cookie domain.  If :meth:`path_return_ok` returns true, :meth:`return_ok` is called with the :class:`Cookie` object itself for a full check.  Otherwise, :meth:`return_ok` is never called for that cookie path."
msgstr ""

msgid "Note that :meth:`domain_return_ok` is called for every *cookie* domain, not just for the *request* domain.  For example, the function might be called with both ``\".example.com\"`` and ``\"www.example.com\"`` if the request domain is ``\"www.example.com\"``.  The same goes for :meth:`path_return_ok`."
msgstr ""

msgid "The *request* argument is as documented for :meth:`return_ok`."
msgstr ""

msgid "Return false if cookies should not be returned, given cookie path."
msgstr ""

msgid "See the documentation for :meth:`domain_return_ok`."
msgstr ""

msgid "In addition to implementing the methods above, implementations of the :class:`CookiePolicy` interface must also supply the following attributes, indicating which protocols should be used, and how.  All of these attributes may be assigned to."
msgstr ""

msgid "Implement Netscape protocol."
msgstr ""

msgid "Implement RFC 2965 protocol."
msgstr ""

msgid "Don't add :mailheader:`Cookie2` header to requests (the presence of this header indicates to the server that we understand RFC 2965 cookies)."
msgstr ""

msgid "The most useful way to define a :class:`CookiePolicy` class is by subclassing from :class:`DefaultCookiePolicy` and overriding some or all of the methods above.  :class:`CookiePolicy` itself may be used as a 'null policy' to allow setting and receiving any and all cookies (this is unlikely to be useful)."
msgstr ""

msgid "DefaultCookiePolicy Objects"
msgstr ""

msgid "Implements the standard rules for accepting and returning cookies."
msgstr ""

msgid "Both RFC 2965 and Netscape cookies are covered.  RFC 2965 handling is switched off by default."
msgstr ""

msgid "The easiest way to provide your own policy is to override this class and call its methods in your overridden implementations before adding your own additional checks::"
msgstr ""

msgid "import http.cookiejar class MyCookiePolicy(http.cookiejar.DefaultCookiePolicy):     def set_ok(self, cookie, request):         if not http.cookiejar.DefaultCookiePolicy.set_ok(self, cookie, request):             return False         if i_dont_want_to_store_this_cookie(cookie):             return False         return True"
msgstr ""

msgid "In addition to the features required to implement the :class:`CookiePolicy` interface, this class allows you to block and allow domains from setting and receiving cookies.  There are also some strictness switches that allow you to tighten up the rather loose Netscape protocol rules a little bit (at the cost of blocking some benign cookies)."
msgstr ""

msgid "A domain blacklist and whitelist is provided (both off by default). Only domains not in the blacklist and present in the whitelist (if the whitelist is active) participate in cookie setting and returning.  Use the *blocked_domains* constructor argument, and :meth:`blocked_domains` and :meth:`set_blocked_domains` methods (and the corresponding argument and methods for *allowed_domains*).  If you set a whitelist, you can turn it off again by setting it to :const:`None`."
msgstr ""

msgid "Domains in block or allow lists that do not start with a dot must equal the cookie domain to be matched.  For example, ``\"example.com\"`` matches a blacklist entry of ``\"example.com\"``, but ``\"www.example.com\"`` does not.  Domains that do start with a dot are matched by more specific domains too. For example, both ``\"www.example.com\"`` and ``\"www.coyote.example.com\"`` match ``\".example.com\"`` (but ``\"example.com\"`` itself does not).  IP addresses are an exception, and must match exactly.  For example, if blocked_domains contains ``\"192.168.1.2\"`` and ``\".168.1.2\"``, 192.168.1.2 is blocked, but 193.168.1.2 is not."
msgstr ""

msgid ":class:`DefaultCookiePolicy` implements the following additional methods:"
msgstr ""

msgid "Return the sequence of blocked domains (as a tuple)."
msgstr ""

msgid "Set the sequence of blocked domains."
msgstr ""

msgid "Return whether *domain* is on the blacklist for setting or receiving cookies."
msgstr ""

msgid "Return :const:`None`, or the sequence of allowed domains (as a tuple)."
msgstr ""

msgid "Set the sequence of allowed domains, or :const:`None`."
msgstr ""

msgid "Return whether *domain* is not on the whitelist for setting or receiving cookies."
msgstr ""

msgid ":class:`DefaultCookiePolicy` instances have the following attributes, which are all initialised from the constructor arguments of the same name, and which may all be assigned to."
msgstr ""

msgid "If true, request that the :class:`CookieJar` instance downgrade RFC 2109 cookies (ie. cookies received in a :mailheader:`Set-Cookie` header with a version cookie-attribute of 1) to Netscape cookies by setting the version attribute of the :class:`Cookie` instance to 0.  The default value is :const:`None`, in which case RFC 2109 cookies are downgraded if and only if RFC 2965 handling is turned off.  Therefore, RFC 2109 cookies are downgraded by default."
msgstr ""

msgid "General strictness switches:"
msgstr ""

msgid "Don't allow sites to set two-component domains with country-code top-level domains like ``.co.uk``, ``.gov.uk``, ``.co.nz``.etc.  This is far from perfect and isn't guaranteed to work!"
msgstr ""

msgid "RFC 2965 protocol strictness switches:"
msgstr ""

msgid "Follow RFC 2965 rules on unverifiable transactions (usually, an unverifiable transaction is one resulting from a redirect or a request for an image hosted on another site).  If this is false, cookies are *never* blocked on the basis of verifiability"
msgstr ""

msgid "Netscape protocol strictness switches:"
msgstr ""

msgid "apply RFC 2965 rules on unverifiable transactions even to Netscape cookies"
msgstr ""

msgid "Flags indicating how strict to be with domain-matching rules for Netscape cookies.  See below for acceptable values."
msgstr ""

msgid "Ignore cookies in Set-Cookie: headers that have names starting with ``'$'``."
msgstr ""

msgid "Don't allow setting cookies whose path doesn't path-match request URI."
msgstr ""

msgid ":attr:`strict_ns_domain` is a collection of flags.  Its value is constructed by or-ing together (for example, ``DomainStrictNoDots|DomainStrictNonDomain`` means both flags are set)."
msgstr ""

msgid "When setting cookies, the 'host prefix' must not contain a dot (eg. ``www.foo.bar.com`` can't set a cookie for ``.bar.com``, because ``www.foo`` contains a dot)."
msgstr ""

msgid "Cookies that did not explicitly specify a ``domain`` cookie-attribute can only be returned to a domain equal to the domain that set the cookie (eg. ``spam.example.com`` won't be returned cookies from ``example.com`` that had no ``domain`` cookie-attribute)."
msgstr ""

msgid "When setting cookies, require a full RFC 2965 domain-match."
msgstr ""

msgid "The following attributes are provided for convenience, and are the most useful combinations of the above flags:"
msgstr ""

msgid "Equivalent to 0 (ie. all of the above Netscape domain strictness flags switched off)."
msgstr ""

msgid "Equivalent to ``DomainStrictNoDots|DomainStrictNonDomain``."
msgstr ""

msgid "Cookie Objects"
msgstr ""

msgid ":class:`Cookie` instances have Python attributes roughly corresponding to the standard cookie-attributes specified in the various cookie standards.  The correspondence is not one-to-one, because there are complicated rules for assigning default values, because the ``max-age`` and ``expires`` cookie-attributes contain equivalent information, and because RFC 2109 cookies may be 'downgraded' by :mod:`http.cookiejar` from version 1 to version 0 (Netscape) cookies."
msgstr ""

msgid "Assignment to these attributes should not be necessary other than in rare circumstances in a :class:`CookiePolicy` method.  The class does not enforce internal consistency, so you should know what you're doing if you do that."
msgstr ""

msgid "Integer or :const:`None`.  Netscape cookies have :attr:`version` 0. RFC 2965 and RFC 2109 cookies have a ``version`` cookie-attribute of 1.  However, note that :mod:`http.cookiejar` may 'downgrade' RFC 2109 cookies to Netscape cookies, in which case :attr:`version` is 0."
msgstr ""

msgid "Cookie name (a string)."
msgstr ""

msgid "Cookie value (a string), or :const:`None`."
msgstr ""

msgid "String representing a port or a set of ports (eg. '80', or '80,8080'), or :const:`None`."
msgstr ""

msgid "Cookie path (a string, eg. ``'/acme/rocket_launchers'``)."
msgstr ""

msgid "True if cookie should only be returned over a secure connection."
msgstr ""

msgid "Integer expiry date in seconds since epoch, or :const:`None`.  See also the :meth:`is_expired` method."
msgstr ""

msgid "True if this is a session cookie."
msgstr ""

msgid "String comment from the server explaining the function of this cookie, or :const:`None`."
msgstr ""

msgid "URL linking to a comment from the server explaining the function of this cookie, or :const:`None`."
msgstr ""

msgid "True if this cookie was received as an RFC 2109 cookie (ie. the cookie arrived in a :mailheader:`Set-Cookie` header, and the value of the Version cookie-attribute in that header was 1).  This attribute is provided because :mod:`http.cookiejar` may 'downgrade' RFC 2109 cookies to Netscape cookies, in which case :attr:`version` is 0."
msgstr ""

msgid "True if a port or set of ports was explicitly specified by the server (in the :mailheader:`Set-Cookie` / :mailheader:`Set-Cookie2` header)."
msgstr ""

msgid "True if a domain was explicitly specified by the server."
msgstr ""

msgid "True if the domain explicitly specified by the server began with a dot (``'.'``)."
msgstr ""

msgid "Cookies may have additional non-standard cookie-attributes.  These may be accessed using the following methods:"
msgstr ""

msgid "Return true if cookie has the named cookie-attribute."
msgstr ""

msgid "If cookie has the named cookie-attribute, return its value. Otherwise, return *default*."
msgstr ""

msgid "Set the value of the named cookie-attribute."
msgstr ""

msgid "The :class:`Cookie` class also defines the following method:"
msgstr ""

msgid "True if cookie has passed the time at which the server requested it should expire.  If *now* is given (in seconds since the epoch), return whether the cookie has expired at the specified time."
msgstr ""

msgid "The first example shows the most common usage of :mod:`http.cookiejar`::"
msgstr ""

msgid "import http.cookiejar, urllib.request cj = http.cookiejar.CookieJar() opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj)) r = opener.open(\"http://example.com/\")"
msgstr ""

msgid "This example illustrates how to open a URL using your Netscape, Mozilla, or Lynx cookies (assumes Unix/Netscape convention for location of the cookies file)::"
msgstr ""

msgid "import os, http.cookiejar, urllib.request cj = http.cookiejar.MozillaCookieJar() cj.load(os.path.join(os.environ[\"HOME\"], \".netscape/cookies.txt\")) opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj)) r = opener.open(\"http://example.com/\")"
msgstr ""

msgid "The next example illustrates the use of :class:`DefaultCookiePolicy`. Turn on RFC 2965 cookies, be more strict about domains when setting and returning Netscape cookies, and block some domains from setting cookies or having them returned::"
msgstr ""

msgid "import urllib.request from http.cookiejar import CookieJar, DefaultCookiePolicy policy = DefaultCookiePolicy(     rfc2965=True, strict_ns_domain=Policy.DomainStrict,     blocked_domains=[\"ads.net\", \".ads.net\"]) cj = CookieJar(policy) opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj)) r = opener.open(\"http://example.com/\")"
msgstr ""

msgid ":mod:`http.cookies` --- HTTP state management"
msgstr ""

msgid "The :mod:`http.cookies` module defines classes for abstracting the concept of cookies, an HTTP state management mechanism. It supports both simple string-only cookies, and provides an abstraction for having any serializable data-type as cookie value."
msgstr ""

msgid "The module formerly strictly applied the parsing rules described in the :rfc:`2109` and :rfc:`2068` specifications.  It has since been discovered that MSIE 3.0x doesn't follow the character rules outlined in those specs.  As a result, the parsing rules used are a bit less strict."
msgstr ""

msgid "On encountering an invalid cookie, :exc:`CookieError` is raised, so if your cookie data comes from a browser you should always prepare for invalid data and catch :exc:`CookieError` on parsing."
msgstr ""

msgid "Exception failing because of :rfc:`2109` invalidity: incorrect attributes, incorrect :mailheader:`Set-Cookie` header, etc."
msgstr ""

msgid "This class is a dictionary-like object whose keys are strings and whose values are :class:`Morsel` instances. Note that upon setting a key to a value, the value is first converted to a :class:`Morsel` containing the key and the value."
msgstr ""

msgid "If *input* is given, it is passed to the :meth:`load` method."
msgstr ""

msgid "This class derives from :class:`BaseCookie` and overrides :meth:`value_decode` and :meth:`value_encode` to be the identity and :func:`str` respectively."
msgstr ""

msgid "HTTP cookie handling for web *clients*.  The :mod:`http.cookiejar` and :mod:`http.cookies` modules do not depend on each other."
msgstr ""

msgid "This is the state management specification implemented by this module."
msgstr ""

msgid "Return a decoded value from a string representation. Return value can be any type. This method does nothing in :class:`BaseCookie` --- it exists so it can be overridden."
msgstr ""

msgid "Return an encoded value. *val* can be any type, but return value must be a string. This method does nothing in :class:`BaseCookie` --- it exists so it can be overridden"
msgstr ""

msgid "In general, it should be the case that :meth:`value_encode` and :meth:`value_decode` are inverses on the range of *value_decode*."
msgstr ""

msgid "Return a string representation suitable to be sent as HTTP headers. *attrs* and *header* are sent to each :class:`Morsel`'s :meth:`output` method. *sep* is used to join the headers together, and is by default the combination ``'\\r\\n'`` (CRLF)."
msgstr ""

msgid "Return an embeddable JavaScript snippet, which, if run on a browser which supports JavaScript, will act the same as if the HTTP headers was sent."
msgstr ""

msgid "The meaning for *attrs* is the same as in :meth:`output`."
msgstr ""

msgid "If *rawdata* is a string, parse it as an ``HTTP_COOKIE`` and add the values found there as :class:`Morsel`\\ s. If it is a dictionary, it is equivalent to::"
msgstr ""

msgid "for k, v in rawdata.items():     cookie[k] = v"
msgstr ""

msgid "Morsel Objects"
msgstr ""

msgid "Abstract a key/value pair, which has some :rfc:`2109` attributes."
msgstr ""

msgid "Morsels are dictionary-like objects, whose set of keys is constant --- the valid :rfc:`2109` attributes, which are"
msgstr ""

msgid "``expires``"
msgstr ""

msgid "``path``"
msgstr ""

msgid "``comment``"
msgstr ""

msgid "``domain``"
msgstr ""

msgid "``max-age``"
msgstr ""

msgid "``secure``"
msgstr ""

msgid "``version``"
msgstr ""

msgid "``httponly``"
msgstr ""

msgid "The attribute :attr:`httponly` specifies that the cookie is only transfered in HTTP requests, and is not accessible through JavaScript. This is intended to mitigate some forms of cross-site scripting."
msgstr ""

msgid "The keys are case-insensitive."
msgstr ""

msgid "The value of the cookie."
msgstr ""

msgid "The encoded value of the cookie --- this is what should be sent."
msgstr ""

msgid "The name of the cookie."
msgstr ""

msgid "Set the *key*, *value* and *coded_value* members."
msgstr ""

msgid "Whether *K* is a member of the set of keys of a :class:`Morsel`."
msgstr ""

msgid "Return a string representation of the Morsel, suitable to be sent as an HTTP header. By default, all the attributes are included, unless *attrs* is given, in which case it should be a list of attributes to use. *header* is by default ``\"Set-Cookie:\"``."
msgstr ""

msgid "Return an embeddable JavaScript snippet, which, if run on a browser which supports JavaScript, will act the same as if the HTTP header was sent."
msgstr ""

msgid "Return a string representing the Morsel, without any surrounding HTTP or JavaScript."
msgstr ""

msgid "The following example demonstrates how to use the :mod:`http.cookies` module."
msgstr ""

msgid ">>> from http import cookies >>> C = cookies.SimpleCookie() >>> C[\"fig\"] = \"newton\" >>> C[\"sugar\"] = \"wafer\" >>> print(C) # generate HTTP headers Set-Cookie: fig=newton Set-Cookie: sugar=wafer >>> print(C.output()) # same thing Set-Cookie: fig=newton Set-Cookie: sugar=wafer >>> C = cookies.SimpleCookie() >>> C[\"rocky\"] = \"road\" >>> C[\"rocky\"][\"path\"] = \"/cookie\" >>> print(C.output(header=\"Cookie:\")) Cookie: rocky=road; Path=/cookie >>> print(C.output(attrs=[], header=\"Cookie:\")) Cookie: rocky=road >>> C = cookies.SimpleCookie() >>> C.load(\"chips=ahoy; vienna=finger\") # load from a string (HTTP header) >>> print(C) Set-Cookie: chips=ahoy Set-Cookie: vienna=finger >>> C = cookies.SimpleCookie() >>> C.load('keebler=\"E=everybody; L=\\\\\"Loves\\\\\"; fudge=\\\\012;\";') >>> print(C) Set-Cookie: keebler=\"E=everybody; L=\\\"Loves\\\"; fudge=\\012;\" >>> C = cookies.SimpleCookie() >>> C[\"oreo\"] = \"doublestuff\" >>> C[\"oreo\"][\"path\"] = \"/\" >>> print(C) Set-Cookie: oreo=doublestuff; Path=/ >>> C = cookies.SimpleCookie() >>> C[\"twix\"] = \"none for you\" >>> C[\"twix\"].value 'none for you' >>> C = cookies.SimpleCookie() >>> C[\"number\"] = 7 # equivalent to C[\"number\"] = str(7) >>> C[\"string\"] = \"seven\" >>> C[\"number\"].value '7' >>> C[\"string\"].value 'seven' >>> print(C) Set-Cookie: number=7 Set-Cookie: string=seven"
msgstr ""

msgid ":mod:`http.server` --- HTTP servers"
msgstr ""

msgid "This module defines classes for implementing HTTP servers (Web servers)."
msgstr ""

msgid "One class, :class:`HTTPServer`, is a :class:`socketserver.TCPServer` subclass. It creates and listens at the HTTP socket, dispatching the requests to a handler.  Code to create and run the server looks like this::"
msgstr ""

msgid "def run(server_class=HTTPServer, handler_class=BaseHTTPRequestHandler):     server_address = ('', 8000)     httpd = server_class(server_address, handler_class)     httpd.serve_forever()"
msgstr ""

msgid "This class builds on the :class:`TCPServer` class by storing the server address as instance variables named :attr:`server_name` and :attr:`server_port`. The server is accessible by the handler, typically through the handler's :attr:`server` instance variable."
msgstr ""

msgid "The :class:`HTTPServer` must be given a *RequestHandlerClass* on instantiation, of which this module provides three different variants:"
msgstr ""

msgid "This class is used to handle the HTTP requests that arrive at the server.  By itself, it cannot respond to any actual HTTP requests; it must be subclassed to handle each request method (e.g. GET or POST). :class:`BaseHTTPRequestHandler` provides a number of class and instance variables, and methods for use by subclasses."
msgstr ""

msgid "The handler will parse the request and the headers, then call a method specific to the request type. The method name is constructed from the request. For example, for the request method ``SPAM``, the :meth:`do_SPAM` method will be called with no arguments. All of the relevant information is stored in instance variables of the handler.  Subclasses should not need to override or extend the :meth:`__init__` method."
msgstr ""

msgid ":class:`BaseHTTPRequestHandler` has the following instance variables:"
msgstr ""

msgid "Contains a tuple of the form ``(host, port)`` referring to the client's address."
msgstr ""

msgid "Contains the server instance."
msgstr ""

msgid "Contains the command (request type). For example, ``'GET'``."
msgstr ""

msgid "Contains the request path."
msgstr ""

msgid "Contains the version string from the request. For example, ``'HTTP/1.0'``."
msgstr ""

msgid "Holds an instance of the class specified by the :attr:`MessageClass` class variable. This instance parses and manages the headers in the HTTP request."
msgstr ""

msgid "Contains an input stream, positioned at the start of the optional input data."
msgstr ""

msgid "Contains the output stream for writing a response back to the client. Proper adherence to the HTTP protocol must be used when writing to this stream."
msgstr ""

msgid ":class:`BaseHTTPRequestHandler` has the following class variables:"
msgstr ""

msgid "Specifies the server software version.  You may want to override this. The format is multiple whitespace-separated strings, where each string is of the form name[/version]. For example, ``'BaseHTTP/0.2'``."
msgstr ""

msgid "Contains the Python system version, in a form usable by the :attr:`version_string` method and the :attr:`server_version` class variable. For example, ``'Python/1.4'``."
msgstr ""

msgid "Specifies a format string for building an error response to the client. It uses parenthesized, keyed format specifiers, so the format operand must be a dictionary. The *code* key should be an integer, specifying the numeric HTTP error code value. *message* should be a string containing a (detailed) error message of what occurred, and *explain* should be an explanation of the error code number. Default *message* and *explain* values can found in the *responses* class variable."
msgstr ""

msgid "Specifies the Content-Type HTTP header of error responses sent to the client.  The default value is ``'text/html'``."
msgstr ""

msgid "This specifies the HTTP protocol version used in responses.  If set to ``'HTTP/1.1'``, the server will permit HTTP persistent connections; however, your server *must* then include an accurate ``Content-Length`` header (using :meth:`send_header`) in all of its responses to clients. For backwards compatibility, the setting defaults to ``'HTTP/1.0'``."
msgstr ""

msgid "Specifies an :class:`email.message.Message`\\ -like class to parse HTTP headers.  Typically, this is not overridden, and it defaults to :class:`http.client.HTTPMessage`."
msgstr ""

msgid "This variable contains a mapping of error code integers to two-element tuples containing a short and long message. For example, ``{code: (shortmessage, longmessage)}``. The *shortmessage* is usually used as the *message* key in an error response, and *longmessage* as the *explain* key (see the :attr:`error_message_format` class variable)."
msgstr ""

msgid "A :class:`BaseHTTPRequestHandler` instance has the following methods:"
msgstr ""

msgid "Calls :meth:`handle_one_request` once (or, if persistent connections are enabled, multiple times) to handle incoming HTTP requests. You should never need to override it; instead, implement appropriate :meth:`do_\\*` methods."
msgstr ""

msgid "This method will parse and dispatch the request to the appropriate :meth:`do_\\*` method.  You should never need to override it."
msgstr ""

msgid "Sends and logs a complete error reply to the client. The numeric *code* specifies the HTTP error code, with *message* as optional, more specific text. A complete set of headers is sent, followed by text composed using the :attr:`error_message_format` class variable."
msgstr ""

msgid "Sends a response header and logs the accepted request. The HTTP response line is sent, followed by *Server* and *Date* headers. The values for these two headers are picked up from the :meth:`version_string` and :meth:`date_time_string` methods, respectively."
msgstr ""

msgid "Writes a specific HTTP header to the output stream. *keyword* should specify the header keyword, with *value* specifying its value."
msgstr ""

msgid "Sends a blank line, indicating the end of the HTTP headers in the response."
msgstr ""

msgid "Logs an accepted (successful) request. *code* should specify the numeric HTTP code associated with the response. If a size of the response is available, then it should be passed as the *size* parameter."
msgstr ""

msgid "Logs an error when a request cannot be fulfilled. By default, it passes the message to :meth:`log_message`, so it takes the same arguments (*format* and additional values)."
msgstr ""

msgid "Logs an arbitrary message to ``sys.stderr``. This is typically overridden to create custom error logging mechanisms. The *format* argument is a standard printf-style format string, where the additional arguments to :meth:`log_message` are applied as inputs to the formatting. The client address and current date and time are prefixed to every message logged."
msgstr ""

msgid "Returns the server software's version string. This is a combination of the :attr:`server_version` and :attr:`sys_version` class variables."
msgstr ""

msgid "Returns the date and time given by *timestamp* (which must be None or in the format returned by :func:`time.time`), formatted for a message header. If *timestamp* is omitted, it uses the current date and time."
msgstr ""

msgid "The result looks like ``'Sun, 06 Nov 1994 08:49:37 GMT'``."
msgstr ""

msgid "Returns the current date and time, formatted for logging."
msgstr ""

msgid "Returns the client address, formatted for logging. A name lookup is performed on the client's IP address."
msgstr ""

msgid "This class serves files from the current directory and below, directly mapping the directory structure to HTTP requests."
msgstr ""

msgid "A lot of the work, such as parsing the request, is done by the base class :class:`BaseHTTPRequestHandler`.  This class implements the :func:`do_GET` and :func:`do_HEAD` functions."
msgstr ""

msgid "The following are defined as class-level attributes of :class:`SimpleHTTPRequestHandler`:"
msgstr ""

msgid "This will be ``\"SimpleHTTP/\" + __version__``, where ``__version__`` is defined at the module level."
msgstr ""

msgid "A dictionary mapping suffixes into MIME types. The default is signified by an empty string, and is considered to be ``application/octet-stream``. The mapping is used case-insensitively, and so should contain only lower-cased keys."
msgstr ""

msgid "The :class:`SimpleHTTPRequestHandler` class defines the following methods:"
msgstr ""

msgid "This method serves the ``'HEAD'`` request type: it sends the headers it would send for the equivalent ``GET`` request. See the :meth:`do_GET` method for a more complete explanation of the possible headers."
msgstr ""

msgid "The request is mapped to a local file by interpreting the request as a path relative to the current working directory."
msgstr ""

msgid "If the request was mapped to a directory, the directory is checked for a file named ``index.html`` or ``index.htm`` (in that order). If found, the file's contents are returned; otherwise a directory listing is generated by calling the :meth:`list_directory` method. This method uses :func:`os.listdir` to scan the directory, and returns a ``404`` error response if the :func:`listdir` fails."
msgstr ""

msgid "If the request was mapped to a file, it is opened and the contents are returned.  Any :exc:`IOError` exception in opening the requested file is mapped to a ``404``, ``'File not found'`` error. Otherwise, the content type is guessed by calling the :meth:`guess_type` method, which in turn uses the *extensions_map* variable."
msgstr ""

msgid "A ``'Content-type:'`` header with the guessed content type is output, followed by a ``'Content-Length:'`` header with the file's size and a ``'Last-Modified:'`` header with the file's modification time."
msgstr ""

msgid "Then follows a blank line signifying the end of the headers, and then the contents of the file are output. If the file's MIME type starts with ``text/`` the file is opened in text mode; otherwise binary mode is used."
msgstr ""

msgid "For example usage, see the implementation of the :func:`test` function invocation in the :mod:`http.server` module."
msgstr ""

msgid "The :class:`SimpleHTTPRequestHandler` class can be invoked the following manner with the :mod:`http.server` to create a very basic webserver serving files relative to the current directory.::"
msgstr ""

msgid "import http.server import socketserver  PORT = 8000  Handler = http.server.SimpleHTTPRequestHandler  httpd = socketserver.TCPServer((\"\", PORT), Handler)  print(\"serving at port\", PORT) httpd.serve_forever()"
msgstr ""

msgid ":mod:`http.server` can also be invoked directly using the ``-m`` switch of interpreter a with ``port number`` argument which uses :class:`SimpleHTTPRequestHandler` as the default request Handler. Similar to the previous example, even this serves files relative to the current directory.::"
msgstr ""

msgid "python -m http.server 8000"
msgstr ""

msgid "This class is used to serve either files or output of CGI scripts from the current directory and below. Note that mapping HTTP hierarchic structure to local directory structure is exactly as in :class:`SimpleHTTPRequestHandler`."
msgstr ""

msgid "CGI scripts run by the :class:`CGIHTTPRequestHandler` class cannot execute redirects (HTTP code 302), because code 200 (script output follows) is sent prior to execution of the CGI script.  This pre-empts the status code."
msgstr ""

msgid "The class will however, run the CGI script, instead of serving it as a file, if it guesses it to be a CGI script.  Only directory-based CGI are used --- the other common server configuration is to treat special extensions as denoting CGI scripts."
msgstr ""

msgid "The :func:`do_GET` and :func:`do_HEAD` functions are modified to run CGI scripts and serve the output, instead of serving files, if the request leads to somewhere below the ``cgi_directories`` path."
msgstr ""

msgid "The :class:`CGIHTTPRequestHandler` defines the following data member:"
msgstr ""

msgid "This defaults to ``['/cgi-bin', '/htbin']`` and describes directories to treat as containing CGI scripts."
msgstr ""

msgid "The :class:`CGIHTTPRequestHandler` defines the following method:"
msgstr ""

msgid "This method serves the ``'POST'`` request type, only allowed for CGI scripts.  Error 501, \"Can only POST to CGI scripts\", is output when trying to POST to a non-CGI url."
msgstr ""

msgid "Note that CGI scripts will be run with UID of user nobody, for security reasons.  Problems with the CGI script will be translated to error 403."
msgstr ""

msgid "Internationalization"
msgstr ""

msgid "The modules described in this chapter help you write software that is independent of language and locale by providing mechanisms for selecting a language to be used in  program messages or by tailoring output to match local conventions."
msgstr ""

msgid "IDLE"
msgstr ""

msgid "IDLE is the Python IDE built with the :mod:`tkinter` GUI toolkit."
msgstr ""

msgid "IDLE has the following features:"
msgstr ""

msgid "coded in 100% pure Python, using the :mod:`tkinter` GUI toolkit"
msgstr ""

msgid "cross-platform: works on Windows and Unix"
msgstr ""

msgid "multi-window text editor with multiple undo, Python colorizing and many other features, e.g. smart indent and call tips"
msgstr ""

msgid "Python shell window (a.k.a. interactive interpreter)"
msgstr ""

msgid "debugger (not complete, but you can set breakpoints, view  and step)"
msgstr ""

msgid "Menus"
msgstr ""

msgid "File menu"
msgstr ""

msgid "create a new editing window"
msgstr ""

msgid "open an existing file"
msgstr ""

msgid "open an existing module (searches sys.path)"
msgstr ""

msgid "show classes and methods in current file"
msgstr ""

msgid "show sys.path directories, modules, classes and methods"
msgstr ""

msgid "save current window to the associated file (unsaved windows have a \\* before and after the window title)"
msgstr ""

msgid "save current window to new file, which becomes the associated file"
msgstr ""

msgid "save current window to different file without changing the associated file"
msgstr ""

msgid "close current window (asks to save if unsaved)"
msgstr ""

msgid "close all windows and quit IDLE (asks to save if unsaved)"
msgstr ""

msgid "Edit menu"
msgstr ""

msgid "Undo last change to current window (max 1000 changes)"
msgstr ""

msgid "Redo last undone change to current window"
msgstr ""

msgid "Copy selection into system-wide clipboard; then delete selection"
msgstr ""

msgid "Copy selection into system-wide clipboard"
msgstr ""

msgid "Insert system-wide clipboard into window"
msgstr ""

msgid "Select the entire contents of the edit buffer"
msgstr ""

msgid "Open a search dialog box with many options"
msgstr ""

msgid "Repeat last search"
msgstr ""

msgid "Search for the string in the selection"
msgstr ""

msgid "Open a search dialog box for searching files"
msgstr ""

msgid "Open a search-and-replace dialog box"
msgstr ""

msgid "Ask for a line number and show that line"
msgstr ""

msgid "Shift selected lines right 4 spaces"
msgstr ""

msgid "Shift selected lines left 4 spaces"
msgstr ""

msgid "Insert ## in front of selected lines"
msgstr ""

msgid "Remove leading # or ## from selected lines"
msgstr ""

msgid "Turns *leading* stretches of spaces into tabs"
msgstr ""

msgid "Turn *all* tabs into the right number of spaces"
msgstr ""

msgid "Expand the word you have typed to match another word in the same buffer; repeat to get a different expansion"
msgstr ""

msgid "Reformat the current blank-line-separated paragraph"
msgstr ""

msgid "Import or reload the current module"
msgstr ""

msgid "Execute the current file in the __main__ namespace"
msgstr ""

msgid "Windows menu"
msgstr ""

msgid "toggles the window between normal size (24x80) and maximum height."
msgstr ""

msgid "The rest of this menu lists the names of all open windows; select one to bring it to the foreground (deiconifying it if necessary)."
msgstr ""

msgid "Debug menu (in the Python Shell window only)"
msgstr ""

msgid "look around the insert point for a filename and linenumber, open the file, and show the line."
msgstr ""

msgid "show the stack traceback of the last exception"
msgstr ""

msgid "Run commands in the shell under the debugger"
msgstr ""

msgid "Open stack viewer on traceback"
msgstr ""

msgid "Basic editing and navigation"
msgstr ""

msgid ":kbd:`Backspace` deletes to the left; :kbd:`Del` deletes to the right"
msgstr ""

msgid "Arrow keys and :kbd:`Page Up`/:kbd:`Page Down` to move around"
msgstr ""

msgid ":kbd:`Home`/:kbd:`End` go to begin/end of line"
msgstr ""

msgid ":kbd:`C-Home`/:kbd:`C-End` go to begin/end of file"
msgstr ""

msgid "Some :program:`Emacs` bindings may also work, including :kbd:`C-B`, :kbd:`C-P`, :kbd:`C-A`, :kbd:`C-E`, :kbd:`C-D`, :kbd:`C-L`"
msgstr ""

msgid "Automatic indentation"
msgstr ""

msgid "After a block-opening statement, the next line is indented by 4 spaces (in the Python Shell window by one tab).  After certain keywords (break, return etc.) the next line is dedented.  In leading indentation, :kbd:`Backspace` deletes up to 4 spaces if they are there. :kbd:`Tab` inserts 1-4 spaces (in the Python Shell window one tab). See also the indent/dedent region commands in the edit menu."
msgstr ""

msgid "Python Shell window"
msgstr ""

msgid ":kbd:`C-C` interrupts executing command"
msgstr ""

msgid ":kbd:`C-D` sends end-of-file; closes window if typed at a ``>>>`` prompt"
msgstr ""

msgid ":kbd:`Alt-p` retrieves previous command matching what you have typed"
msgstr ""

msgid ":kbd:`Alt-n` retrieves next"
msgstr ""

msgid ":kbd:`Return` while on any previous command retrieves that command"
msgstr ""

msgid ":kbd:`Alt-/` (Expand word) is also useful here"
msgstr ""

msgid "Syntax colors"
msgstr ""

msgid "The coloring is applied in a background \"thread,\" so you may occasionally see uncolorized text.  To change the color scheme, edit the ``[Colors]`` section in :file:`config.txt`."
msgstr ""

msgid "orange"
msgstr ""

msgid "green"
msgstr ""

msgid "red"
msgstr ""

msgid "blue"
msgstr ""

msgid "brown"
msgstr ""

msgid "dark green"
msgstr ""

msgid "black"
msgstr ""

msgid "Startup"
msgstr ""

msgid "Upon startup with the ``-s`` option, IDLE will execute the file referenced by the environment variables :envvar:`IDLESTARTUP` or :envvar:`PYTHONSTARTUP`. Idle first checks for ``IDLESTARTUP``; if ``IDLESTARTUP`` is present the file referenced is run.  If ``IDLESTARTUP`` is not present, Idle checks for ``PYTHONSTARTUP``.  Files referenced by these environment variables are convenient places to store functions that are used frequently from the Idle shell, or for executing import statements to import common modules."
msgstr ""

msgid "In addition, ``Tk`` also loads a startup file if it is present.  Note that the Tk file is loaded unconditionally.  This additional file is ``.Idle.py`` and is looked for in the user's home directory.  Statements in this file will be executed in the Tk namespace, so this file is not useful for importing functions to be used from Idle's Python shell."
msgstr ""

msgid "Command line usage"
msgstr ""

msgid "idle.py [-c command] [-d] [-e] [-s] [-t title] [arg] ...  -c command  run this command -d          enable debugger -e          edit mode; arguments are files to be edited -s          run $IDLESTARTUP or $PYTHONSTARTUP first -t title    set title of shell window"
msgstr ""

msgid "If there are arguments:"
msgstr ""

msgid "If :option:`-e` is used, arguments are files opened for editing and ``sys.argv`` reflects the arguments passed to IDLE itself."
msgstr ""

msgid "Otherwise, if :option:`-c` is used, all arguments are placed in ``sys.argv[1:...]``, with ``sys.argv[0]`` set to ``'-c'``."
msgstr ""

msgid "Otherwise, if neither :option:`-e` nor :option:`-c` is used, the first argument is a script which is executed with the remaining arguments in ``sys.argv[1:...]``  and ``sys.argv[0]`` set to the script name.  If the script name is '-', no script is executed but an interactive Python session is started; the arguments are still available in ``sys.argv``."
msgstr ""

msgid ":mod:`imaplib` --- IMAP4 protocol client"
msgstr ""

msgid "This module defines three classes, :class:`IMAP4`, :class:`IMAP4_SSL` and :class:`IMAP4_stream`, which encapsulate a connection to an IMAP4 server and implement a large subset of the IMAP4rev1 client protocol as defined in :rfc:`2060`. It is backward compatible with IMAP4 (:rfc:`1730`) servers, but note that the ``STATUS`` command is not supported in IMAP4."
msgstr ""

msgid "Three classes are provided by the :mod:`imaplib` module, :class:`IMAP4` is the base class:"
msgstr ""

msgid "This class implements the actual IMAP4 protocol.  The connection is created and protocol version (IMAP4 or IMAP4rev1) is determined when the instance is initialized. If *host* is not specified, ``''`` (the local host) is used. If *port* is omitted, the standard IMAP4 port (143) is used."
msgstr ""

msgid "Three exceptions are defined as attributes of the :class:`IMAP4` class:"
msgstr ""

msgid "Exception raised on any errors.  The reason for the exception is passed to the constructor as a string."
msgstr ""

msgid "IMAP4 server errors cause this exception to be raised.  This is a sub-class of :exc:`IMAP4.error`.  Note that closing the instance and instantiating a new one will usually allow recovery from this exception."
msgstr ""

msgid "This exception is raised when a writable mailbox has its status changed by the server.  This is a sub-class of :exc:`IMAP4.error`.  Some other client now has write permission, and the mailbox will need to be re-opened to re-obtain write permission."
msgstr ""

msgid "There's also a subclass for secure connections:"
msgstr ""

msgid "This is a subclass derived from :class:`IMAP4` that connects over an SSL encrypted socket (to use this class you need a socket module that was compiled with SSL support).  If *host* is not specified, ``''`` (the local host) is used. If *port* is omitted, the standard IMAP4-over-SSL port (993) is used.  *keyfile* and *certfile* are also optional - they can contain a PEM formatted private key and certificate chain file for the SSL connection."
msgstr ""

msgid "The second subclass allows for connections created by a child process:"
msgstr ""

msgid "This is a subclass derived from :class:`IMAP4` that connects to the ``stdin/stdout`` file descriptors created by passing *command* to ``subprocess.Popen()``."
msgstr ""

msgid "The following utility functions are defined:"
msgstr ""

msgid "Converts an IMAP4 INTERNALDATE string to Coordinated Universal Time. Returns a :mod:`time` module tuple."
msgstr ""

msgid "Converts an integer into a string representation using characters from the set [``A`` .. ``P``]."
msgstr ""

msgid "Converts an IMAP4 ``FLAGS`` response to a tuple of individual flags."
msgstr ""

msgid "Converts a :mod:`time` module tuple to an IMAP4 ``INTERNALDATE`` representation. Returns a string in the form: ``\"DD-Mmm-YYYY HH:MM:SS +HHMM\"`` (including double-quotes)."
msgstr ""

msgid "Note that IMAP4 message numbers change as the mailbox changes; in particular, after an ``EXPUNGE`` command performs deletions the remaining messages are renumbered. So it is highly advisable to use UIDs instead, with the UID command."
msgstr ""

msgid "At the end of the module, there is a test section that contains a more extensive example of usage."
msgstr ""

msgid "Documents describing the protocol, and sources and binaries  for servers implementing it, can all be found at the University of Washington's *IMAP Information Center* (http://www.washington.edu/imap/)."
msgstr ""

msgid "IMAP4 Objects"
msgstr ""

msgid "All IMAP4rev1 commands are represented by methods of the same name, either upper-case or lower-case."
msgstr ""

msgid "All arguments to commands are converted to strings, except for ``AUTHENTICATE``, and the last argument to ``APPEND`` which is passed as an IMAP4 literal.  If necessary (the string contains IMAP4 protocol-sensitive characters and isn't enclosed with either parentheses or double quotes) each string is quoted. However, the *password* argument to the ``LOGIN`` command is always quoted. If you want to avoid having an argument string quoted (eg: the *flags* argument to ``STORE``) then enclose the string in parentheses (eg: ``r'(\\Deleted)'``)."
msgstr ""

msgid "Each command returns a tuple: ``(type, [data, ...])`` where *type* is usually ``'OK'`` or ``'NO'``, and *data* is either the text from the command response, or mandated results from the command. Each *data* is either a string, or a tuple. If a tuple, then the first part is the header of the response, and the second part contains the data (ie: 'literal' value)."
msgstr ""

msgid "The *message_set* options to commands below is a string specifying one or more messages to be acted upon.  It may be a simple message number (``'1'``), a range of message numbers (``'2:4'``), or a group of non-contiguous ranges separated by commas (``'1:3,6:9'``).  A range can contain an asterisk to indicate an infinite upper bound (``'3:*'``)."
msgstr ""

msgid "An :class:`IMAP4` instance has the following methods:"
msgstr ""

msgid "Append *message* to named mailbox."
msgstr ""

msgid "Authenticate command --- requires response processing."
msgstr ""

msgid "*mechanism* specifies which authentication mechanism is to be used - it should appear in the instance variable ``capabilities`` in the form ``AUTH=mechanism``."
msgstr ""

msgid "*authobject* must be a callable object::"
msgstr ""

msgid "data = authobject(response)"
msgstr ""

msgid "It will be called to process server continuation responses. It should return ``data`` that will be encoded and sent to server. It should return ``None`` if the client abort response ``*`` should be sent instead."
msgstr ""

msgid "Checkpoint mailbox on server."
msgstr ""

msgid "Close currently selected mailbox. Deleted messages are removed from writable mailbox. This is the recommended command before ``LOGOUT``."
msgstr ""

msgid "Copy *message_set* messages onto end of *new_mailbox*."
msgstr ""

msgid "Create new mailbox named *mailbox*."
msgstr ""

msgid "Delete old mailbox named *mailbox*."
msgstr ""

msgid "Delete the ACLs (remove any rights) set for who on mailbox."
msgstr ""

msgid "Permanently remove deleted items from selected mailbox. Generates an ``EXPUNGE`` response for each deleted message. Returned data contains a list of ``EXPUNGE`` message numbers in order received."
msgstr ""

msgid "Fetch (parts of) messages.  *message_parts* should be a string of message part names enclosed within parentheses, eg: ``\"(UID BODY[TEXT])\"``.  Returned data are tuples of message part envelope and data."
msgstr ""

msgid "Get the ``ACL``\\ s for *mailbox*. The method is non-standard, but is supported by the ``Cyrus`` server."
msgstr ""

msgid "Retrieve the specified ``ANNOTATION``\\ s for *mailbox*. The method is non-standard, but is supported by the ``Cyrus`` server."
msgstr ""

msgid "Get the ``quota`` *root*'s resource usage and limits. This method is part of the IMAP4 QUOTA extension defined in rfc2087."
msgstr ""

msgid "Get the list of ``quota`` ``roots`` for the named *mailbox*. This method is part of the IMAP4 QUOTA extension defined in rfc2087."
msgstr ""

msgid "List mailbox names in *directory* matching *pattern*.  *directory* defaults to the top-level mail folder, and *pattern* defaults to match anything.  Returned data contains a list of ``LIST`` responses."
msgstr ""

msgid "Identify the client using a plaintext password. The *password* will be quoted."
msgstr ""

msgid "Force use of ``CRAM-MD5`` authentication when identifying the client to protect the password.  Will only work if the server ``CAPABILITY`` response includes the phrase ``AUTH=CRAM-MD5``."
msgstr ""

msgid "Shutdown connection to server. Returns server ``BYE`` response."
msgstr ""

msgid "List subscribed mailbox names in directory matching pattern. *directory* defaults to the top level directory and *pattern* defaults to match any mailbox. Returned data are tuples of message part envelope and data."
msgstr ""

msgid "Show my ACLs for a mailbox (i.e. the rights that I have on mailbox)."
msgstr ""

msgid "Returns IMAP namespaces as defined in RFC2342."
msgstr ""

msgid "Send ``NOOP`` to server."
msgstr ""

msgid "Opens socket to *port* at *host*. The connection objects established by this method will be used in the ``read``, ``readline``, ``send``, and ``shutdown`` methods. You may override this method."
msgstr ""

msgid "Fetch truncated part of a message. Returned data is a tuple of message part envelope and data."
msgstr ""

msgid "Assume authentication as *user*. Allows an authorised administrator to proxy into any user's mailbox."
msgstr ""

msgid "Reads *size* bytes from the remote server. You may override this method."
msgstr ""

msgid "Reads one line from the remote server. You may override this method."
msgstr ""

msgid "Prompt server for an update. Returned data is ``None`` if no new messages, else value of ``RECENT`` response."
msgstr ""

msgid "Rename mailbox named *oldmailbox* to *newmailbox*."
msgstr ""

msgid "Return data for response *code* if received, or ``None``. Returns the given code, instead of the usual type."
msgstr ""

msgid "Search mailbox for matching messages.  *charset* may be ``None``, in which case no ``CHARSET`` will be specified in the request to the server.  The IMAP protocol requires that at least one criterion be specified; an exception will be raised when the server returns an error."
msgstr ""

msgid "# M is a connected IMAP4 instance... typ, msgnums = M.search(None, 'FROM', '\"LDJ\"')  # or: typ, msgnums = M.search(None, '(FROM \"LDJ\")')"
msgstr ""

msgid "Select a mailbox. Returned data is the count of messages in *mailbox* (``EXISTS`` response).  The default *mailbox* is ``'INBOX'``.  If the *readonly* flag is set, modifications to the mailbox are not allowed."
msgstr ""

msgid "Sends ``data`` to the remote server. You may override this method."
msgstr ""

msgid "Set an ``ACL`` for *mailbox*. The method is non-standard, but is supported by the ``Cyrus`` server."
msgstr ""

msgid "Set ``ANNOTATION``\\ s for *mailbox*. The method is non-standard, but is supported by the ``Cyrus`` server."
msgstr ""

msgid "Set the ``quota`` *root*'s resource *limits*. This method is part of the IMAP4 QUOTA extension defined in rfc2087."
msgstr ""

msgid "Close connection established in ``open``. You may override this method."
msgstr ""

msgid "Returns socket instance used to connect to server."
msgstr ""

msgid "The ``sort`` command is a variant of ``search`` with sorting semantics for the results.  Returned data contains a space separated list of matching message numbers."
msgstr ""

msgid "Sort has two arguments before the *search_criterion* argument(s); a parenthesized list of *sort_criteria*, and the searching *charset*.  Note that unlike ``search``, the searching *charset* argument is mandatory.  There is also a ``uid sort`` command which corresponds to ``sort`` the way that ``uid search`` corresponds to ``search``.  The ``sort`` command first searches the mailbox for messages that match the given searching criteria using the charset argument for the interpretation of strings in the searching criteria.  It then returns the numbers of matching messages."
msgstr ""

msgid "This is an ``IMAP4rev1`` extension command."
msgstr ""

msgid "Request named status conditions for *mailbox*."
msgstr ""

msgid "Alters flag dispositions for messages in mailbox.  *command* is specified by section 6.4.6 of :rfc:`2060` as being one of \"FLAGS\", \"+FLAGS\", or \"-FLAGS\", optionally with a suffix of \".SILENT\"."
msgstr ""

msgid "For example, to set the delete flag on all messages::"
msgstr ""

msgid "typ, data = M.search(None, 'ALL') for num in data[0].split():    M.store(num, '+FLAGS', '\\\\Deleted') M.expunge()"
msgstr ""

msgid "Subscribe to new mailbox."
msgstr ""

msgid "The ``thread`` command is a variant of ``search`` with threading semantics for the results.  Returned data contains a space separated list of thread members."
msgstr ""

msgid "Thread members consist of zero or more messages numbers, delimited by spaces, indicating successive parent and child."
msgstr ""

msgid "Thread has two arguments before the *search_criterion* argument(s); a *threading_algorithm*, and the searching *charset*.  Note that unlike ``search``, the searching *charset* argument is mandatory.  There is also a ``uid thread`` command which corresponds to ``thread`` the way that ``uid search`` corresponds to ``search``.  The ``thread`` command first searches the mailbox for messages that match the given searching criteria using the charset argument for the interpretation of strings in the searching criteria. It then returns the matching messages threaded according to the specified threading algorithm."
msgstr ""

msgid "Execute command args with messages identified by UID, rather than message number.  Returns response appropriate to command.  At least one argument must be supplied; if none are provided, the server will return an error and an exception will be raised."
msgstr ""

msgid "Unsubscribe from old mailbox."
msgstr ""

msgid "Allow simple extension commands notified by server in ``CAPABILITY`` response."
msgstr ""

msgid "The following attributes are defined on instances of :class:`IMAP4`:"
msgstr ""

msgid "The most recent supported protocol in the ``CAPABILITY`` response from the server."
msgstr ""

msgid "Integer value to control debugging output.  The initialize value is taken from the module variable ``Debug``.  Values greater than three trace each command."
msgstr ""

msgid "IMAP4 Example"
msgstr ""

msgid "Here is a minimal example (without error checking) that opens a mailbox and retrieves and prints all messages::"
msgstr ""

msgid "import getpass, imaplib  M = imaplib.IMAP4() M.login(getpass.getuser(), getpass.getpass()) M.select() typ, data = M.search(None, 'ALL') for num in data[0].split():     typ, data = M.fetch(num, '(RFC822)')     print('Message %s\\n%s\\n' % (num, data[0][1])) M.close() M.logout()"
msgstr ""

msgid ":mod:`imghdr` --- Determine the type of an image"
msgstr ""

msgid "The :mod:`imghdr` module determines the type of image contained in a file or byte stream."
msgstr ""

msgid "The :mod:`imghdr` module defines the following function:"
msgstr ""

msgid "Tests the image data contained in the file named by *filename*, and returns a string describing the image type.  If optional *h* is provided, the *filename* is ignored and *h* is assumed to contain the byte stream to test."
msgstr ""

msgid "The following image types are recognized, as listed below with the return value from :func:`what`:"
msgstr ""

msgid "Image format"
msgstr ""

msgid "``'rgb'``"
msgstr ""

msgid "SGI ImgLib Files"
msgstr ""

msgid "``'gif'``"
msgstr ""

msgid "GIF 87a and 89a Files"
msgstr ""

msgid "``'pbm'``"
msgstr ""

msgid "Portable Bitmap Files"
msgstr ""

msgid "``'pgm'``"
msgstr ""

msgid "Portable Graymap Files"
msgstr ""

msgid "``'ppm'``"
msgstr ""

msgid "Portable Pixmap Files"
msgstr ""

msgid "``'tiff'``"
msgstr ""

msgid "TIFF Files"
msgstr ""

msgid "``'rast'``"
msgstr ""

msgid "Sun Raster Files"
msgstr ""

msgid "``'xbm'``"
msgstr ""

msgid "X Bitmap Files"
msgstr ""

msgid "``'jpeg'``"
msgstr ""

msgid "JPEG data in JFIF or Exif formats"
msgstr ""

msgid "``'bmp'``"
msgstr ""

msgid "BMP files"
msgstr ""

msgid "``'png'``"
msgstr ""

msgid "Portable Network Graphics"
msgstr ""

msgid "You can extend the list of file types :mod:`imghdr` can recognize by appending to this variable:"
msgstr ""

msgid "A list of functions performing the individual tests.  Each function takes two arguments: the byte-stream and an open file-like object. When :func:`what` is called with a byte-stream, the file-like object will be ``None``."
msgstr ""

msgid "The test function should return a string describing the image type if the test succeeded, or ``None`` if it failed."
msgstr ""

msgid ">>> import imghdr >>> imghdr.what('/tmp/bass.gif') 'gif'"
msgstr ""

msgid ":mod:`imp` --- Access the :keyword:`import` internals"
msgstr ""

msgid "This module provides an interface to the mechanisms used to implement the :keyword:`import` statement.  It defines the following constants and functions:"
msgstr ""

msgid "Return the magic string value used to recognize byte-compiled code files (:file:`.pyc` files).  (This value may be different for each Python version.)"
msgstr ""

msgid "Return a list of 3-element tuples, each describing a particular type of module. Each triple has the form ``(suffix, mode, type)``, where *suffix* is a string to be appended to the module name to form the filename to search for, *mode* is the mode string to pass to the built-in :func:`open` function to open the file (this can be ``'r'`` for text files or ``'rb'`` for binary files), and *type* is the file type, which has one of the values :const:`PY_SOURCE`, :const:`PY_COMPILED`, or :const:`C_EXTENSION`, described below."
msgstr ""

msgid "Try to find the module *name*.  If *path* is omitted or ``None``, the list of directory names given by ``sys.path`` is searched, but first a few special places are searched: the function tries to find a built-in module with the given name (:const:`C_BUILTIN`), then a frozen module (:const:`PY_FROZEN`), and on some systems some other places are looked in as well (on Windows, it looks in the registry which may point to a specific file)."
msgstr ""

msgid "Otherwise, *path* must be a list of directory names; each directory is searched for files with any of the suffixes returned by :func:`get_suffixes` above.  Invalid names in the list are silently ignored (but all list items must be strings)."
msgstr ""

msgid "If search is successful, the return value is a 3-element tuple ``(file, pathname, description)``:"
msgstr ""

msgid "*file* is an open file object positioned at the beginning, *pathname* is the pathname of the file found, and *description* is a 3-element tuple as contained in the list returned by :func:`get_suffixes` describing the kind of module found."
msgstr ""

msgid "If the module does not live in a file, the returned *file* is ``None``, *pathname* is the empty string, and the *description* tuple contains empty strings for its suffix and mode; the module type is indicated as given in parentheses above.  If the search is unsuccessful, :exc:`ImportError` is raised.  Other exceptions indicate problems with the arguments or environment."
msgstr ""

msgid "If the module is a package, *file* is ``None``, *pathname* is the package path and the last item in the *description* tuple is :const:`PKG_DIRECTORY`."
msgstr ""

msgid "This function does not handle hierarchical module names (names containing dots).  In order to find *P*.*M*, that is, submodule *M* of package *P*, use :func:`find_module` and :func:`load_module` to find and load package *P*, and then use :func:`find_module` with the *path* argument set to ``P.__path__``. When *P* itself has a dotted name, apply this recipe recursively."
msgstr ""

msgid "Load a module that was previously found by :func:`find_module` (or by an otherwise conducted search yielding compatible results).  This function does more than importing the module: if the module was already imported, it will reload the module!  The *name* argument indicates the full module name (including the package name, if this is a submodule of a package).  The *file* argument is an open file, and *pathname* is the corresponding file name; these can be ``None`` and ``''``, respectively, when the module is a package or not being loaded from a file.  The *description* argument is a tuple, as would be returned by :func:`get_suffixes`, describing what kind of module must be loaded."
msgstr ""

msgid "If the load is successful, the return value is the module object; otherwise, an exception (usually :exc:`ImportError`) is raised."
msgstr ""

msgid "**Important:** the caller is responsible for closing the *file* argument, if it was not ``None``, even when an exception is raised.  This is best done using a :keyword:`try` ... :keyword:`finally` statement."
msgstr ""

msgid "Return a new empty module object called *name*.  This object is *not* inserted in ``sys.modules``."
msgstr ""

msgid "Return ``True`` if the import lock is currently held, else ``False``. On platforms without threads, always return ``False``."
msgstr ""

msgid "On platforms with threads, a thread executing an import holds an internal lock until the import is complete. This lock blocks other threads from doing an import until the original import completes, which in turn prevents other threads from seeing incomplete module objects constructed by the original thread while in the process of completing its import (and the imports, if any, triggered by that)."
msgstr ""

msgid "Acquire the interpreter's import lock for the current thread.  This lock should be used by import hooks to ensure thread-safety when importing modules. On platforms without threads, this function does nothing."
msgstr ""

msgid "Once a thread has acquired the import lock, the same thread may acquire it again without blocking; the thread must release it once for each time it has acquired it."
msgstr ""

msgid "On platforms without threads, this function does nothing."
msgstr ""

msgid "Release the interpreter's import lock. On platforms without threads, this function does nothing."
msgstr ""

msgid "Reload a previously imported *module*.  The argument must be a module object, so it must have been successfully imported before.  This is useful if you have edited the module source file using an external editor and want to try out the new version without leaving the Python interpreter.  The return value is the module object (the same as the *module* argument)."
msgstr ""

msgid "When ``reload(module)`` is executed:"
msgstr ""

msgid "Python modules' code is recompiled and the module-level code reexecuted, defining a new set of objects which are bound to names in the module's dictionary.  The ``init`` function of extension modules is not called a second time."
msgstr ""

msgid "As with all other objects in Python the old objects are only reclaimed after their reference counts drop to zero."
msgstr ""

msgid "The names in the module namespace are updated to point to any new or changed objects."
msgstr ""

msgid "Other references to the old objects (such as names external to the module) are not rebound to refer to the new objects and must be updated in each namespace where they occur if that is desired."
msgstr ""

msgid "There are a number of other caveats:"
msgstr ""

msgid "If a module is syntactically correct but its initialization fails, the first :keyword:`import` statement for it does not bind its name locally, but does store a (partially initialized) module object in ``sys.modules``.  To reload the module you must first :keyword:`import` it again (this will bind the name to the partially initialized module object) before you can :func:`reload` it."
msgstr ""

msgid "When a module is reloaded, its dictionary (containing the module's global variables) is retained.  Redefinitions of names will override the old definitions, so this is generally not a problem.  If the new version of a module does not define a name that was defined by the old version, the old definition remains.  This feature can be used to the module's advantage if it maintains a global table or cache of objects --- with a :keyword:`try` statement it can test for the table's presence and skip its initialization if desired::"
msgstr ""

msgid "try:     cache except NameError:     cache = {}"
msgstr ""

msgid "It is legal though generally not very useful to reload built-in or dynamically loaded modules, except for :mod:`sys`, :mod:`__main__` and :mod:`__builtin__`. In many cases, however, extension modules are not designed to be initialized more than once, and may fail in arbitrary ways when reloaded."
msgstr ""

msgid "If a module imports objects from another module using :keyword:`from` ... :keyword:`import` ..., calling :func:`reload` for the other module does not redefine the objects imported from it --- one way around this is to re-execute the :keyword:`from` statement, another is to use :keyword:`import` and qualified names (*module*.*name*) instead."
msgstr ""

msgid "If a module instantiates instances of a class, reloading the module that defines the class does not affect the method definitions of the instances --- they continue to use the old class definition.  The same is true for derived classes."
msgstr ""

msgid "Acquires the interpreter's import lock for the current thread.  This lock should be used by import hooks to ensure thread-safety when importing modules. On platforms without threads, this function does nothing."
msgstr ""

msgid "The following functions and data provide conveniences for handling :pep:`3147` byte-compiled file paths."
msgstr ""

msgid "Return the :pep:`3147` path to the byte-compiled file associated with the source *path*.  For example, if *path* is ``/foo/bar/baz.py`` the return value would be ``/foo/bar/__pycache__/baz.cpython-32.pyc`` for Python 3.2. The ``cpython-32`` string comes from the current magic tag (see :func:`get_tag`).  The returned path will end in ``.pyc`` when ``__debug__`` is True or ``.pyo`` for an optimized Python (i.e. ``__debug__`` is False).  By passing in True or False for *debug_override* you can override the system's value for ``__debug__`` for extension selection."
msgstr ""

msgid "*path* need not exist."
msgstr ""

msgid "Given the *path* to a :pep:`3147` file name, return the associated source code file path.  For example, if *path* is ``/foo/bar/__pycache__/baz.cpython-32.pyc`` the returned path would be ``/foo/bar/baz.py``.  *path* need not exist, however if it does not conform to :pep:`3147` format, a ``ValueError`` is raised."
msgstr ""

msgid "Return the :pep:`3147` magic tag string matching this version of Python's magic number, as returned by :func:`get_magic`."
msgstr ""

msgid "The following constants with integer values, defined in this module, are used to indicate the search result of :func:`find_module`."
msgstr ""

msgid "The module was found as a source file."
msgstr ""

msgid "The module was found as a compiled code object file."
msgstr ""

msgid "The module was found as dynamically loadable shared library."
msgstr ""

msgid "The module was found as a package directory."
msgstr ""

msgid "The module was found as a built-in module."
msgstr ""

msgid "The module was found as a frozen module (see :func:`init_frozen`)."
msgstr ""

msgid "The following constant and functions are obsolete; their functionality is available through :func:`find_module` or :func:`load_module`. They are kept around for backward compatibility:"
msgstr ""

msgid "Unused."
msgstr ""

msgid "Initialize the built-in module called *name* and return its module object along with storing it in ``sys.modules``.  If the module was already initialized, it will be initialized *again*.  Re-initialization involves the copying of the built-in module's ``__dict__`` from the cached module over the module's entry in ``sys.modules``.  If there is no built-in module called *name*, ``None`` is returned."
msgstr ""

msgid "Initialize the frozen module called *name* and return its module object.  If the module was already initialized, it will be initialized *again*.  If there is no frozen module called *name*, ``None`` is returned.  (Frozen modules are modules written in Python whose compiled byte-code object is incorporated into a custom-built Python interpreter by Python's :program:`freeze` utility. See :file:`Tools/freeze/` for now.)"
msgstr ""

msgid "Return ``1`` if there is a built-in module called *name* which can be initialized again.  Return ``-1`` if there is a built-in module called *name* which cannot be initialized again (see :func:`init_builtin`).  Return ``0`` if there is no built-in module called *name*."
msgstr ""

msgid "Return ``True`` if there is a frozen module (see :func:`init_frozen`) called *name*, or ``False`` if there is no such module."
msgstr ""

msgid "Load and initialize a module implemented as a byte-compiled code file and return its module object.  If the module was already initialized, it will be initialized *again*.  The *name* argument is used to create or access a module object.  The *pathname* argument points to the byte-compiled code file.  The *file* argument is the byte-compiled code file, open for reading in binary mode, from the beginning. It must currently be a real file object, not a user-defined class emulating a file."
msgstr ""

msgid "Load and initialize a module implemented as a dynamically loadable shared library and return its module object.  If the module was already initialized, it will be initialized *again*. Re-initialization involves copying the ``__dict__`` attribute of the cached instance of the module over the value used in the module cached in ``sys.modules``.  The *pathname* argument must point to the shared library.  The *name* argument is used to construct the name of the initialization function: an external C function called ``initname()`` in the shared library is called.  The optional *file* argument is ignored.  (Note: using shared libraries is highly system dependent, and not all systems support it.)"
msgstr ""

msgid "Load and initialize a module implemented as a Python source file and return its module object.  If the module was already initialized, it will be initialized *again*.  The *name* argument is used to create or access a module object.  The *pathname* argument points to the source file.  The *file* argument is the source file, open for reading as text, from the beginning. It must currently be a real file object, not a user-defined class emulating a file.  Note that if a properly matching byte-compiled file (with suffix :file:`.pyc` or :file:`.pyo`) exists, it will be used instead of parsing the given source file."
msgstr ""

msgid "The :class:`NullImporter` type is a :pep:`302` import hook that handles non-directory path strings by failing to find any modules.  Calling this type with an existing directory or empty string raises :exc:`ImportError`. Otherwise, a :class:`NullImporter` instance is returned."
msgstr ""

msgid "Python adds instances of this type to ``sys.path_importer_cache`` for any path entries that are not directories and are not handled by any other path hooks on ``sys.path_hooks``.  Instances have only one method:"
msgstr ""

msgid "This method always returns ``None``, indicating that the requested module could not be found."
msgstr ""

msgid "The following function emulates what was the standard import statement up to Python 1.4 (no hierarchical module names).  (This *implementation* wouldn't work in that version, since :func:`find_module` has been extended and :func:`load_module` has been added in 1.4.) ::"
msgstr ""

msgid "import imp import sys  def __import__(name, globals=None, locals=None, fromlist=None):     # Fast path: see if the module has already been imported.     try:         return sys.modules[name]     except KeyError:         pass      # If any of the following calls raises an exception,     # there's a problem we can't handle -- let the caller handle it.      fp, pathname, description = imp.find_module(name)      try:         return imp.load_module(name, fp, pathname, description)     finally:         # Since we may exit via an exception, close fp explicitly.         if fp:             fp.close()"
msgstr ""

msgid "A more complete example that implements hierarchical module names and includes a :func:`reload` function can be found in the module :mod:`knee`.  The :mod:`knee` module can be found in :file:`Demo/imputil/` in the Python source distribution."
msgstr ""

msgid ":mod:`importlib` -- An implementation of :keyword:`import`"
msgstr ""

msgid "The purpose of the :mod:`importlib` package is two-fold. One is to provide an implementation of the :keyword:`import` statement (and thus, by extension, the :func:`__import__` function) in Python source code. This provides an implementation of :keyword:`import` which is portable to any Python interpreter. This also provides a reference implementation which is easier to comprehend than one implemented in a programming language other than Python."
msgstr ""

msgid "Two, the components to implement :keyword:`import` are exposed in this package, making it easier for users to create their own custom objects (known generically as an :term:`importer`) to participate in the import process. Details on custom importers can be found in :pep:`302`."
msgstr ""

msgid "The language reference for the :keyword:`import` statement."
msgstr ""

msgid "Original specification of packages. Some semantics have changed since the writing of this document (e.g. redirecting based on :keyword:`None` in :data:`sys.modules`)."
msgstr ""

msgid "The :keyword:`import` statement is syntactic sugar for this function."
msgstr ""

msgid "Import on Case-Insensitive Platforms"
msgstr ""

msgid "Defining Python Source Code Encodings"
msgstr ""

msgid "New Import Hooks"
msgstr ""

msgid "Imports: Multi-Line and Absolute/Relative"
msgstr ""

msgid "Main module explicit relative imports"
msgstr ""

msgid "Using UTF-8 as the Default Source Encoding"
msgstr ""

msgid "PYC Repository Directories"
msgstr ""

msgid "An implementation of the built-in :func:`__import__` function."
msgstr ""

msgid "Import a module. The *name* argument specifies what module to import in absolute or relative terms (e.g. either ``pkg.mod`` or ``..mod``). If the name is specified in relative terms, then the *package* argument must be set to the name of the package which is to act as the anchor for resolving the package name (e.g. ``import_module('..mod', 'pkg.subpkg')`` will import ``pkg.mod``)."
msgstr ""

msgid "The :func:`import_module` function acts as a simplifying wrapper around :func:`importlib.__import__`. This means all semantics of the function are derived from :func:`importlib.__import__`, including requiring the package from which an import is occurring to have been previously imported (i.e., *package* must already be imported). The most important difference is that :func:`import_module` returns the most nested package or module that was imported (e.g. ``pkg.mod``), while :func:`__import__` returns the top-level package or module (e.g. ``pkg``)."
msgstr ""

msgid ":mod:`importlib.abc` -- Abstract base classes related to import"
msgstr ""

msgid "The :mod:`importlib.abc` module contains all of the core abstract base classes used by :keyword:`import`. Some subclasses of the core abstract base classes are also provided to help in implementing the core ABCs."
msgstr ""

msgid "An abstract base class representing a :term:`finder`. See :pep:`302` for the exact definition for a finder."
msgstr ""

msgid "An abstract method for finding a :term:`loader` for the specified module. If the :term:`finder` is found on :data:`sys.meta_path` and the module to be searched for is a subpackage or module then *path* will be the value of :attr:`__path__` from the parent package. If a loader cannot be found, :keyword:`None` is returned."
msgstr ""

msgid "An abstract base class for a :term:`loader`. See :pep:`302` for the exact definition for a loader."
msgstr ""

msgid "An abstract method for loading a module. If the module cannot be loaded, :exc:`ImportError` is raised, otherwise the loaded module is returned."
msgstr ""

msgid "If the requested module already exists in :data:`sys.modules`, that module should be used and reloaded. Otherwise the loader should create a new module and insert it into :data:`sys.modules` before any loading begins, to prevent recursion from the import. If the loader inserted a module and the load fails, it must be removed by the loader from :data:`sys.modules`; modules already in :data:`sys.modules` before the loader began execution should be left alone. The :func:`importlib.util.module_for_loader` decorator handles all of these details."
msgstr ""

msgid "The loader should set several attributes on the module. (Note that some of these attributes can change when a module is reloaded.)"
msgstr ""

msgid "The name of the module."
msgstr ""

msgid "The path to where the module data is stored (not set for built-in modules)."
msgstr ""

msgid "A list of strings specifying the search path within a package. This attribute is not set on modules."
msgstr ""

msgid "The parent package for the module/package. If the module is top-level then it has a value of the empty string. The :func:`importlib.util.set_package` decorator can handle the details for :attr:`__package__`."
msgstr ""

msgid "The loader used to load the module. (This is not set by the built-in import machinery, but it should be set whenever a :term:`loader` is used.)"
msgstr ""

msgid "An abstract base class for a :term:`loader` which implements the optional :pep:`302` protocol for loading arbitrary resources from the storage back-end."
msgstr ""

msgid "An abstract method to return the bytes for the data located at *path*. Loaders that have a file-like storage back-end that allows storing arbitrary data can implement this abstract method to give direct access to the data stored. :exc:`IOError` is to be raised if the *path* cannot be found. The *path* is expected to be constructed using a module's :attr:`__file__` attribute or an item from a package's :attr:`__path__`."
msgstr ""

msgid "An abstract base class for a :term:`loader` which implements the optional :pep:`302` protocol for loaders that inspect modules."
msgstr ""

msgid "An abstract method to return the :class:`code` object for a module. :keyword:`None` is returned if the module does not have a code object (e.g. built-in module).  :exc:`ImportError` is raised if loader cannot find the requested module."
msgstr ""

msgid "An abstract method to return the source of a module. It is returned as a text string with universal newlines. Returns :keyword:`None` if no source is available (e.g. a built-in module). Raises :exc:`ImportError` if the loader cannot find the module specified."
msgstr ""

msgid "An abstract method to return a true value if the module is a package, a false value otherwise. :exc:`ImportError` is raised if the :term:`loader` cannot find the module."
msgstr ""

msgid "An abstract base class which inherits from :class:`InspectLoader` that, when implemented, helps a module to be executed as a script. The ABC represents an optional :pep:`302` protocol."
msgstr ""

msgid "An abstract method that is to return the value of :attr:`__file__` for the specified module. If no path is available, :exc:`ImportError` is raised."
msgstr ""

msgid "If source code is available, then the method should return the path to the source file, regardless of whether a bytecode was used to load the module."
msgstr ""

msgid "An abstract base class for implementing source (and optionally bytecode) file loading. The class inherits from both :class:`ResourceLoader` and :class:`ExecutionLoader`, requiring the implementation of:"
msgstr ""

msgid ":meth:`ResourceLoader.get_data`"
msgstr ""

msgid "Implement to only return the path to the source file; sourceless loading is not supported."
msgstr ""

msgid "The abstract methods defined by this class are to add optional bytecode file support. Not implementing these optional methods causes the loader to only work with source code. Implementing the methods allows the loader to work with source *and* bytecode files; it does not allow for *sourceless* loading where only bytecode is provided.  Bytecode files are an optimization to speed up loading by removing the parsing step of Python's compiler, and so no bytecode-specific API is exposed."
msgstr ""

msgid "Optional abstract method which returns the modification time for the specified path."
msgstr ""

msgid "Optional abstract method which writes the specified bytes to a file path. When writing to the path fails because the path is read-only, do not propagate the exception."
msgstr ""

msgid "Concrete implementation of :meth:`InspectLoader.get_code`."
msgstr ""

msgid "Concrete implementation of :meth:`Loader.load_module`."
msgstr ""

msgid "Concrete implementation of :meth:`InspectLoader.get_source`."
msgstr ""

msgid "Concrete implementation of :meth:`InspectLoader.is_package`. A module is determined to be a package if its file path is a file named ``__init__`` when the file extension is removed."
msgstr ""

msgid "An abstract base class inheriting from :class:`ExecutionLoader` and :class:`ResourceLoader` designed to ease the loading of Python source modules (bytecode is not handled; see :class:`SourceLoader` for a source/bytecode ABC). A subclass implementing this ABC will only need to worry about exposing how the source code is stored; all other details for loading Python source code will be handled by the concrete implementations of key methods."
msgstr ""

msgid "If compatibility with Python 3.1 is required, then use the following idiom to implement a subclass that will work with Python 3.1 onwards (make sure to implement :meth:`ExecutionLoader.get_filename`)::"
msgstr ""

msgid "try:     from importlib.abc import SourceLoader except ImportError:     from importlib.abc import PyLoader as SourceLoader   class CustomLoader(SourceLoader):     def get_filename(self, fullname):         \"\"\"Return the path to the source file.\"\"\"         # Implement ...      def source_path(self, fullname):         \"\"\"Implement source_path in terms of get_filename.\"\"\"         try:             return self.get_filename(fullname)         except ImportError:             return None      def is_package(self, fullname):         \"\"\"Implement is_package by looking for an __init__ file         name as returned by get_filename.\"\"\"         filename = os.path.basename(self.get_filename(fullname))         return os.path.splitext(filename)[0] == '__init__'"
msgstr ""

msgid "An abstract method that returns the path to the source code for a module. Should return :keyword:`None` if there is no source code. Raises :exc:`ImportError` if the loader knows it cannot handle the module."
msgstr ""

msgid "A concrete implementation of :meth:`importlib.abc.ExecutionLoader.get_filename` that relies on :meth:`source_path`. If :meth:`source_path` returns :keyword:`None`, then :exc:`ImportError` is raised."
msgstr ""

msgid "A concrete implementation of :meth:`importlib.abc.Loader.load_module` that loads Python source code. All needed information comes from the abstract methods required by this ABC. The only pertinent assumption made by this method is that when loading a package :attr:`__path__` is set to ``[os.path.dirname(__file__)]``."
msgstr ""

msgid "A concrete implementation of :meth:`importlib.abc.InspectLoader.get_code` that creates code objects from Python source code, by requesting the source code (using :meth:`source_path` and :meth:`get_data`) and compiling it with the built-in :func:`compile` function."
msgstr ""

msgid "A concrete implementation of :meth:`importlib.abc.InspectLoader.get_source`. Uses :meth:`importlib.abc.ResourceLoader.get_data` and :meth:`source_path` to get the source code.  It tries to guess the source encoding using :func:`tokenize.detect_encoding`."
msgstr ""

msgid "An abstract base class inheriting from :class:`PyLoader`. This ABC is meant to help in creating loaders that support both Python source and bytecode."
msgstr ""

msgid "An abstract method which returns the modification time for the source code of the specified module. The modification time should be an integer. If there is no source code, return :keyword:`None`. If the module cannot be found then :exc:`ImportError` is raised."
msgstr ""

msgid "An abstract method which returns the path to the bytecode for the specified module, if it exists. It returns :keyword:`None` if no bytecode exists (yet). Raises :exc:`ImportError` if the loader knows it cannot handle the module."
msgstr ""

msgid "A concrete implementation of :meth:`ExecutionLoader.get_filename` that relies on :meth:`PyLoader.source_path` and :meth:`bytecode_path`. If :meth:`source_path` returns a path, then that value is returned. Else if :meth:`bytecode_path` returns a path, that path will be returned. If a path is not available from both methods, :exc:`ImportError` is raised."
msgstr ""

msgid "An abstract method which has the loader write *bytecode* for future use. If the bytecode is written, return :keyword:`True`. Return :keyword:`False` if the bytecode could not be written. This method should not be called if :data:`sys.dont_write_bytecode` is true. The *bytecode* argument should be a bytes string or bytes array."
msgstr ""

msgid ":mod:`importlib.machinery` -- Importers and path hooks"
msgstr ""

msgid "This module contains the various objects that help :keyword:`import` find and load modules."
msgstr ""

msgid "An :term:`importer` for built-in modules. All known built-in modules are listed in :data:`sys.builtin_module_names`. This class implements the :class:`importlib.abc.Finder` and :class:`importlib.abc.InspectLoader` ABCs."
msgstr ""

msgid "Only class methods are defined by this class to alleviate the need for instantiation."
msgstr ""

msgid "An :term:`importer` for frozen modules. This class implements the :class:`importlib.abc.Finder` and :class:`importlib.abc.InspectLoader` ABCs."
msgstr ""

msgid ":term:`Finder` for :data:`sys.path`. This class implements the :class:`importlib.abc.Finder` ABC."
msgstr ""

msgid "This class does not perfectly mirror the semantics of :keyword:`import` in terms of :data:`sys.path`. No implicit path hooks are assumed for simplification of the class and its semantics."
msgstr ""

msgid "Class method that attempts to find a :term:`loader` for the module specified by *fullname* on :data:`sys.path` or, if defined, on *path*. For each path entry that is searched, :data:`sys.path_importer_cache` is checked. If an non-false object is found then it is used as the :term:`finder` to look for the module being searched for. If no entry is found in :data:`sys.path_importer_cache`, then :data:`sys.path_hooks` is searched for a finder for the path entry and, if found, is stored in :data:`sys.path_importer_cache` along with being queried about the module. If no finder is ever found then :keyword:`None` is returned."
msgstr ""

msgid ":mod:`importlib.util` -- Utility code for importers"
msgstr ""

msgid "This module contains the various objects that help in the construction of an :term:`importer`."
msgstr ""

msgid "A :term:`decorator` for a :term:`loader` method, to handle selecting the proper module object to load with. The decorated method is expected to have a call signature taking two positional arguments (e.g. ``load_module(self, module)``) for which the second argument will be the module **object** to be used by the loader. Note that the decorator will not work on static methods because of the assumption of two arguments."
msgstr ""

msgid "The decorated method will take in the **name** of the module to be loaded as expected for a :term:`loader`. If the module is not found in :data:`sys.modules` then a new one is constructed with its :attr:`__name__` attribute set. Otherwise the module found in :data:`sys.modules` will be passed into the method. If an exception is raised by the decorated method and a module was added to :data:`sys.modules` it will be removed to prevent a partially initialized module from being in left in :data:`sys.modules`. If the module was already in :data:`sys.modules` then it is left alone."
msgstr ""

msgid "Use of this decorator handles all the details of which module object a loader should initialize as specified by :pep:`302`."
msgstr ""

msgid "A :term:`decorator` for a :term:`loader` method, to set the :attr:`__loader__` attribute on loaded modules. If the attribute is already set the decorator does nothing. It is assumed that the first positional argument to the wrapped method is what :attr:`__loader__` should be set to."
msgstr ""

msgid "A :term:`decorator` for a :term:`loader` to set the :attr:`__package__` attribute on the module returned by the loader. If :attr:`__package__` is set and has a value other than :keyword:`None` it will not be changed. Note that the module returned by the loader is what has the attribute set on and not the module found in :data:`sys.modules`."
msgstr ""

msgid "Reliance on this decorator is discouraged when it is possible to set :attr:`__package__` before the execution of the code is possible. By setting it before the code for the module is executed it allows the attribute to be used at the global level of the module during initialization."
msgstr ""

msgid "The Python Standard Library"
msgstr ""

msgid "Release"
msgstr ""

msgid "|version|"
msgstr ""

msgid "Date"
msgstr ""

msgid "|today|"
msgstr ""

msgid "While :ref:`reference-index` describes the exact syntax and semantics of the Python language, this library reference manual describes the standard library that is distributed with Python. It also describes some of the optional components that are commonly included in Python distributions."
msgstr ""

msgid "Python's standard library is very extensive, offering a wide range of facilities as indicated by the long table of contents listed below. The library contains built-in modules (written in C) that provide access to system functionality such as file I/O that would otherwise be inaccessible to Python programmers, as well as modules written in Python that provide standardized solutions for many problems that occur in everyday programming. Some of these modules are explicitly designed to encourage and enhance the portability of Python programs by abstracting away platform-specifics into platform-neutral APIs."
msgstr ""

msgid "The Python installers for the Windows platform usually includes the entire standard library and often also include many additional components. For Unix-like operating systems Python is normally provided as a collection of packages, so it may be necessary to use the packaging tools provided with the operating system to obtain some or all of the optional components."
msgstr ""

msgid "In addition to the standard library, there is a growing collection of several thousand components (from individual programs and modules to packages and entire application development frameworks), available from the `Python Package Index <http://pypi.python.org/pypi>`_."
msgstr ""

msgid ":mod:`inspect` --- Inspect live objects"
msgstr ""

msgid "The :mod:`inspect` module provides several useful functions to help get information about live objects such as modules, classes, methods, functions, tracebacks, frame objects, and code objects.  For example, it can help you examine the contents of a class, retrieve the source code of a method, extract and format the argument list for a function, or get all the information you need to display a detailed traceback."
msgstr ""

msgid "There are four main kinds of services provided by this module: type checking, getting source code, inspecting classes and functions, and examining the interpreter stack."
msgstr ""

msgid "Types and members"
msgstr ""

msgid "The :func:`getmembers` function retrieves the members of an object such as a class or module. The sixteen functions whose names begin with \"is\" are mainly provided as convenient choices for the second argument to :func:`getmembers`. They also help you determine when you can expect to find the following special attributes:"
msgstr ""

msgid "Type"
msgstr ""

msgid "module"
msgstr ""

msgid "__doc__"
msgstr ""

msgid "documentation string"
msgstr ""

msgid "__file__"
msgstr ""

msgid "filename (missing for built-in modules)"
msgstr ""

msgid "class"
msgstr ""

msgid "__module__"
msgstr ""

msgid "name of module in which this class was defined"
msgstr ""

msgid "method"
msgstr ""

msgid "__name__"
msgstr ""

msgid "name with which this method was defined"
msgstr ""

msgid "__func__"
msgstr ""

msgid "function object containing implementation of method"
msgstr ""

msgid "__self__"
msgstr ""

msgid "instance to which this method is bound, or ``None``"
msgstr ""

msgid "function"
msgstr ""

msgid "name with which this function was defined"
msgstr ""

msgid "__code__"
msgstr ""

msgid "code object containing compiled function :term:`bytecode`"
msgstr ""

msgid "__defaults__"
msgstr ""

msgid "tuple of any default values for arguments"
msgstr ""

msgid "__globals__"
msgstr ""

msgid "global namespace in which this function was defined"
msgstr ""

msgid "traceback"
msgstr ""

msgid "tb_frame"
msgstr ""

msgid "frame object at this level"
msgstr ""

msgid "tb_lasti"
msgstr ""

msgid "index of last attempted instruction in bytecode"
msgstr ""

msgid "tb_lineno"
msgstr ""

msgid "current line number in Python source code"
msgstr ""

msgid "tb_next"
msgstr ""

msgid "next inner traceback object (called by this level)"
msgstr ""

msgid "frame"
msgstr ""

msgid "f_back"
msgstr ""

msgid "next outer frame object (this frame's caller)"
msgstr ""

msgid "f_builtins"
msgstr ""

msgid "builtins namespace seen by this frame"
msgstr ""

msgid "f_code"
msgstr ""

msgid "code object being executed in this frame"
msgstr ""

msgid "f_globals"
msgstr ""

msgid "global namespace seen by this frame"
msgstr ""

msgid "f_lasti"
msgstr ""

msgid "f_lineno"
msgstr ""

msgid "f_locals"
msgstr ""

msgid "local namespace seen by this frame"
msgstr ""

msgid "f_restricted"
msgstr ""

msgid "0 or 1 if frame is in restricted execution mode"
msgstr ""

msgid "f_trace"
msgstr ""

msgid "tracing function for this frame, or ``None``"
msgstr ""

msgid "code"
msgstr ""

msgid "co_argcount"
msgstr ""

msgid "number of arguments (not including \\* or \\*\\* args)"
msgstr ""

msgid "co_code"
msgstr ""

msgid "string of raw compiled bytecode"
msgstr ""

msgid "co_consts"
msgstr ""

msgid "tuple of constants used in the bytecode"
msgstr ""

msgid "co_filename"
msgstr ""

msgid "name of file in which this code object was created"
msgstr ""

msgid "co_firstlineno"
msgstr ""

msgid "number of first line in Python source code"
msgstr ""

msgid "co_flags"
msgstr ""

msgid "bitmap: 1=optimized ``|`` 2=newlocals ``|`` 4=\\*arg ``|`` 8=\\*\\*arg"
msgstr ""

msgid "co_lnotab"
msgstr ""

msgid "encoded mapping of line numbers to bytecode indices"
msgstr ""

msgid "co_name"
msgstr ""

msgid "name with which this code object was defined"
msgstr ""

msgid "co_names"
msgstr ""

msgid "tuple of names of local variables"
msgstr ""

msgid "co_nlocals"
msgstr ""

msgid "number of local variables"
msgstr ""

msgid "co_stacksize"
msgstr ""

msgid "virtual machine stack space required"
msgstr ""

msgid "co_varnames"
msgstr ""

msgid "tuple of names of arguments and local variables"
msgstr ""

msgid "builtin"
msgstr ""

msgid "original name of this function or method"
msgstr ""

msgid "instance to which a method is bound, or ``None``"
msgstr ""

msgid "Return all the members of an object in a list of (name, value) pairs sorted by name.  If the optional *predicate* argument is supplied, only members for which the predicate returns a true value are included."
msgstr ""

msgid ":func:`getmembers` does not return metaclass attributes when the argument is a class (this behavior is inherited from the :func:`dir` function)."
msgstr ""

msgid "Returns a :term:`named tuple` ``ModuleInfo(name, suffix, mode, module_type)`` of values that describe how Python will interpret the file identified by *path* if it is a module, or ``None`` if it would not be identified as a module.  The return tuple is ``(name, suffix, mode, mtype)``, where *name* is the name of the module without the name of any enclosing package, *suffix* is the trailing part of the file name (which may not be a dot-delimited extension), *mode* is the :func:`open` mode that would be used (``'r'`` or ``'rb'``), and *mtype* is an integer giving the type of the module.  *mtype* will have a value which can be compared to the constants defined in the :mod:`imp` module; see the documentation for that module for more information on module types."
msgstr ""

msgid "Return the name of the module named by the file *path*, without including the names of enclosing packages.  This uses the same algorithm as the interpreter uses when searching for modules.  If the name cannot be matched according to the interpreter's rules, ``None`` is returned."
msgstr ""

msgid "Return true if the object is a module."
msgstr ""

msgid "Return true if the object is a class."
msgstr ""

msgid "Return true if the object is a method."
msgstr ""

msgid "Return true if the object is a Python function or unnamed (:term:`lambda`) function."
msgstr ""

msgid "Return true if the object is a Python generator function."
msgstr ""

msgid "Return true if the object is a generator."
msgstr ""

msgid "Return true if the object is a traceback."
msgstr ""

msgid "Return true if the object is a frame."
msgstr ""

msgid "Return true if the object is a code."
msgstr ""

msgid "Return true if the object is a built-in function."
msgstr ""

msgid "Return true if the object is a user-defined or built-in function or method."
msgstr ""

msgid "Return true if the object is an abstract base class."
msgstr ""

msgid "Return true if the object is a method descriptor, but not if :func:`ismethod` or :func:`isclass` or :func:`isfunction` are true."
msgstr ""

msgid "This, for example, is true of ``int.__add__``.  An object passing this test has a :attr:`__get__` attribute but not a :attr:`__set__` attribute, but beyond that the set of attributes varies.  :attr:`__name__` is usually sensible, and :attr:`__doc__` often is."
msgstr ""

msgid "Methods implemented via descriptors that also pass one of the other tests return false from the :func:`ismethoddescriptor` test, simply because the other tests promise more -- you can, e.g., count on having the :attr:`__func__` attribute (etc) when an object passes :func:`ismethod`."
msgstr ""

msgid "Return true if the object is a data descriptor."
msgstr ""

msgid "Data descriptors have both a :attr:`__get__` and a :attr:`__set__` attribute. Examples are properties (defined in Python), getsets, and members.  The latter two are defined in C and there are more specific tests available for those types, which is robust across Python implementations.  Typically, data descriptors will also have :attr:`__name__` and :attr:`__doc__` attributes (properties, getsets, and members have both of these attributes), but this is not guaranteed."
msgstr ""

msgid "Return true if the object is a getset descriptor."
msgstr ""

msgid "getsets are attributes defined in extension modules via :ctype:`PyGetSetDef` structures.  For Python implementations without such types, this method will always return ``False``."
msgstr ""

msgid "Return true if the object is a member descriptor."
msgstr ""

msgid "Member descriptors are attributes defined in extension modules via :ctype:`PyMemberDef` structures.  For Python implementations without such types, this method will always return ``False``."
msgstr ""

msgid "Retrieving source code"
msgstr ""

msgid "Get the documentation string for an object, cleaned up with :func:`cleandoc`."
msgstr ""

msgid "Return in a single string any lines of comments immediately preceding the object's source code (for a class, function, or method), or at the top of the Python source file (if the object is a module)."
msgstr ""

msgid "Return the name of the (text or binary) file in which an object was defined. This will fail with a :exc:`TypeError` if the object is a built-in module, class, or function."
msgstr ""

msgid "Try to guess which module an object was defined in."
msgstr ""

msgid "Return the name of the Python source file in which an object was defined.  This will fail with a :exc:`TypeError` if the object is a built-in module, class, or function."
msgstr ""

msgid "Return a list of source lines and starting line number for an object. The argument may be a module, class, method, function, traceback, frame, or code object.  The source code is returned as a list of the lines corresponding to the object and the line number indicates where in the original source file the first line of code was found.  An :exc:`IOError` is raised if the source code cannot be retrieved."
msgstr ""

msgid "Return the text of the source code for an object. The argument may be a module, class, method, function, traceback, frame, or code object.  The source code is returned as a single string.  An :exc:`IOError` is raised if the source code cannot be retrieved."
msgstr ""

msgid "Clean up indentation from docstrings that are indented to line up with blocks of code.  Any whitespace that can be uniformly removed from the second line onwards is removed.  Also, all tabs are expanded to spaces."
msgstr ""

msgid "Classes and functions"
msgstr ""

msgid "Arrange the given list of classes into a hierarchy of nested lists. Where a nested list appears, it contains classes derived from the class whose entry immediately precedes the list.  Each entry is a 2-tuple containing a class and a tuple of its base classes.  If the *unique* argument is true, exactly one entry appears in the returned structure for each class in the given list.  Otherwise, classes using multiple inheritance and their descendants will appear multiple times."
msgstr ""

msgid "Get the names and default values of a Python function's arguments. A :term:`named tuple` ``ArgSpec(args, varargs, keywords, defaults)`` is returned. *args* is a list of the argument names. *varargs* and *varkw* are the names of the ``*`` and ``**`` arguments or ``None``. *defaults* is a tuple of default argument values or None if there are no default arguments; if this tuple has *n* elements, they correspond to the last *n* elements listed in *args*."
msgstr ""

msgid "Get the names and default values of a Python function's arguments.  A :term:`named tuple` is returned:"
msgstr ""

msgid "``FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations)``"
msgstr ""

msgid "*args* is a list of the argument names.  *varargs* and *varkw* are the names of the ``*`` and ``**`` arguments or ``None``.  *defaults* is an n-tuple of the default values of the last n arguments.  *kwonlyargs* is a list of keyword-only argument names.  *kwonlydefaults* is a dictionary mapping names from kwonlyargs to defaults.  *annotations* is a dictionary mapping argument names to annotations."
msgstr ""

msgid "The first four items in the tuple correspond to :func:`getargspec`."
msgstr ""

msgid "Get information about arguments passed into a particular frame.  A :term:`named tuple` ``ArgInfo(args, varargs, keywords, locals)`` is returned. *args* is a list of the argument names (it may contain nested lists). *varargs* and *varkw* are the names of the ``*`` and ``**`` arguments or ``None``. *locals* is the locals dictionary of the given frame."
msgstr ""

msgid "Format a pretty argument spec from the four values returned by :func:`getargspec`.  The format\\* arguments are the corresponding optional formatting functions that are called to turn names and values into strings."
msgstr ""

msgid "Format a pretty argument spec from the four values returned by :func:`getargvalues`.  The format\\* arguments are the corresponding optional formatting functions that are called to turn names and values into strings."
msgstr ""

msgid "Return a tuple of class cls's base classes, including cls, in method resolution order.  No class appears more than once in this tuple. Note that the method resolution order depends on cls's type.  Unless a very peculiar user-defined metatype is in use, cls will be the first element of the tuple."
msgstr ""

msgid "Bind the *args* and *kwds* to the argument names of the Python function or method *func*, as if it was called with them. For bound methods, bind also the first argument (typically named ``self``) to the associated instance. A dict is returned, mapping the argument names (including the names of the ``*`` and ``**`` arguments, if any) to their values from *args* and *kwds*. In case of invoking *func* incorrectly, i.e. whenever ``func(*args, **kwds)`` would raise an exception because of incompatible signature, an exception of the same type and the same or similar message is raised. For example::"
msgstr ""

msgid ">>> from inspect import getcallargs >>> def f(a, b=1, *pos, **named): ...     pass >>> getcallargs(f, 1, 2, 3) {'a': 1, 'named': {}, 'b': 2, 'pos': (3,)} >>> getcallargs(f, a=2, x=4) {'a': 2, 'named': {'x': 4}, 'b': 1, 'pos': ()} >>> getcallargs(f) Traceback (most recent call last): ... TypeError: f() takes at least 1 argument (0 given)"
msgstr ""

msgid "The interpreter stack"
msgstr ""

msgid "When the following functions return \"frame records,\" each record is a tuple of six items: the frame object, the filename, the line number of the current line, the function name, a list of lines of context from the source code, and the index of the current line within that list."
msgstr ""

msgid "Keeping references to frame objects, as found in the first element of the frame records these functions return, can cause your program to create reference cycles.  Once a reference cycle has been created, the lifespan of all objects which can be accessed from the objects which form the cycle can become much longer even if Python's optional cycle detector is enabled.  If such cycles must be created, it is important to ensure they are explicitly broken to avoid the delayed destruction of objects and increased memory consumption which occurs."
msgstr ""

msgid "Though the cycle detector will catch these, destruction of the frames (and local variables) can be made deterministic by removing the cycle in a :keyword:`finally` clause.  This is also important if the cycle detector was disabled when Python was compiled or using :func:`gc.disable`.  For example::"
msgstr ""

msgid "def handle_stackframe_without_leak():     frame = inspect.currentframe()     try:         # do something with the frame     finally:         del frame"
msgstr ""

msgid "The optional *context* argument supported by most of these functions specifies the number of lines of context to return, which are centered around the current line."
msgstr ""

msgid "Get information about a frame or traceback object.  A :term:`named tuple` ``Traceback(filename, lineno, function, code_context, index)`` is returned."
msgstr ""

msgid "Get a list of frame records for a frame and all outer frames.  These frames represent the calls that lead to the creation of *frame*. The first entry in the returned list represents *frame*; the last entry represents the outermost call on *frame*'s stack."
msgstr ""

msgid "Get a list of frame records for a traceback's frame and all inner frames.  These frames represent calls made as a consequence of *frame*.  The first entry in the list represents *traceback*; the last entry represents where the exception was raised."
msgstr ""

msgid "Return the frame object for the caller's stack frame."
msgstr ""

msgid "This function relies on Python stack frame support in the interpreter, which isn't guaranteed to exist in all implementations of Python.  If running in an implementation without Python stack frame support this function returns ``None``."
msgstr ""

msgid "Return a list of frame records for the caller's stack.  The first entry in the returned list represents the caller; the last entry represents the outermost call on the stack."
msgstr ""

msgid "Return a list of frame records for the stack between the current frame and the frame in which an exception currently being handled was raised in.  The first entry in the list represents the caller; the last entry represents where the exception was raised."
msgstr ""

msgid "Internet Protocols and Support"
msgstr ""

msgid "The modules described in this chapter implement Internet protocols and  support for related technology.  They are all implemented in Python. Most of these modules require the presence of the system-dependent module :mod:`socket`, which is currently supported on most popular platforms.  Here is an overview:"
msgstr ""

msgid "The \"Python library\" contains several different kinds of components."
msgstr ""

msgid "It contains data types that would normally be considered part of the \"core\" of a language, such as numbers and lists.  For these types, the Python language core defines the form of literals and places some constraints on their semantics, but does not fully define the semantics.  (On the other hand, the language core does define syntactic properties like the spelling and priorities of operators.)"
msgstr ""

msgid "The library also contains built-in functions and exceptions --- objects that can be used by all Python code without the need of an :keyword:`import` statement. Some of these are defined by the core language, but many are not essential for the core semantics and are only described here."
msgstr ""

msgid "The bulk of the library, however, consists of a collection of modules. There are many ways to dissect this collection.  Some modules are written in C and built in to the Python interpreter; others are written in Python and imported in source form.  Some modules provide interfaces that are highly specific to Python, like printing a stack trace; some provide interfaces that are specific to particular operating systems, such as access to specific hardware; others provide interfaces that are specific to a particular application domain, like the World Wide Web. Some modules are available in all versions and ports of Python; others are only available when the underlying system supports or requires them; yet others are available only when a particular configuration option was chosen at the time when Python was compiled and installed."
msgstr ""

msgid "This manual is organized \"from the inside out:\" it first describes the built-in data types, then the built-in functions and exceptions, and finally the modules, grouped in chapters of related modules.  The ordering of the chapters as well as the ordering of the modules within each chapter is roughly from most relevant to least important."
msgstr ""

msgid "This means that if you start reading this manual from the start, and skip to the next chapter when you get bored, you will get a reasonable overview of the available modules and application areas that are supported by the Python library.  Of course, you don't *have* to read it like a novel --- you can also browse the table of contents (in front of the manual), or look for a specific function, module or term in the index (in the back).  And finally, if you enjoy learning about random subjects, you choose a random page number (see module :mod:`random`) and read a section or two.  Regardless of the order in which you read the sections of this manual, it helps to start with chapter :ref:`built-in-funcs`, as the remainder of the manual assumes familiarity with this material."
msgstr ""

msgid "Let the show begin!"
msgstr ""

msgid ":mod:`io` --- Core tools for working with streams"
msgstr ""

msgid "The :mod:`io` module provides the Python interfaces to stream handling.  The built-in :func:`open` function is defined in this module."
msgstr ""

msgid "At the top of the I/O hierarchy is the abstract base class :class:`IOBase`.  It defines the basic interface to a stream.  Note, however, that there is no separation between reading and writing to streams; implementations are allowed to throw an :exc:`IOError` if they do not support a given operation."
msgstr ""

msgid "Extending :class:`IOBase` is :class:`RawIOBase` which deals simply with the reading and writing of raw bytes to a stream.  :class:`FileIO` subclasses :class:`RawIOBase` to provide an interface to files in the machine's file system."
msgstr ""

msgid ":class:`BufferedIOBase` deals with buffering on a raw byte stream (:class:`RawIOBase`).  Its subclasses, :class:`BufferedWriter`, :class:`BufferedReader`, and :class:`BufferedRWPair` buffer streams that are readable, writable, and both readable and writable. :class:`BufferedRandom` provides a buffered interface to random access streams.  :class:`BytesIO` is a simple stream of in-memory bytes."
msgstr ""

msgid "Another :class:`IOBase` subclass, :class:`TextIOBase`, deals with streams whose bytes represent text, and handles encoding and decoding from and to strings. :class:`TextIOWrapper`, which extends it, is a buffered text interface to a buffered raw stream (:class:`BufferedIOBase`). Finally, :class:`StringIO` is an in-memory stream for text."
msgstr ""

msgid "Argument names are not part of the specification, and only the arguments of :func:`.open` are intended to be used as keyword arguments."
msgstr ""

msgid "Module Interface"
msgstr ""

msgid "An int containing the default buffer size used by the module's buffered I/O classes.  :func:`.open` uses the file's blksize (as obtained by :func:`os.stat`) if possible."
msgstr ""

msgid "*mode* is an optional string that specifies the mode in which the file is opened.  It defaults to ``'r'`` which means open for reading in text mode. Other common values are ``'w'`` for writing (truncating the file if it already exists), and ``'a'`` for appending (which on *some* Unix systems, means that *all* writes append to the end of the file regardless of the current seek position).  In text mode, if *encoding* is not specified the encoding used is platform dependent. (For reading and writing raw bytes use binary mode and leave *encoding* unspecified.)  The available modes are:"
msgstr ""

msgid "open for writing, truncating the file first"
msgstr ""

msgid "open a disk file for updating (reading and writing)"
msgstr ""

msgid "The default mode is ``'rt'`` (open for reading text).  For binary random access, the mode ``'w+b'`` opens and truncates the file to 0 bytes, while ``'r+b'`` opens the file without truncation."
msgstr ""

msgid "Python distinguishes between files opened in binary and text modes, even when the underlying operating system doesn't.  Files opened in binary mode (including ``'b'`` in the *mode* argument) return contents as ``bytes`` objects without any decoding.  In text mode (the default, or when ``'t'`` is included in the *mode* argument), the contents of the file are returned as strings, the bytes having been first decoded using a platform-dependent encoding or using the specified *encoding* if given."
msgstr ""

msgid "*buffering* is an optional integer used to set the buffering policy. Pass 0 to switch buffering off (only allowed in binary mode), 1 to select line buffering (only usable in text mode), and an integer > 1 to indicate the size of a fixed-size chunk buffer.  When no *buffering* argument is given, the default buffering policy works as follows:"
msgstr ""

msgid "Binary files are buffered in fixed-size chunks; the size of the buffer is chosen using a heuristic trying to determine the underlying device's \"block size\" and falling back on :attr:`DEFAULT_BUFFER_SIZE`. On many systems, the buffer will typically be 4096 or 8192 bytes long."
msgstr ""

msgid "\"Interactive\" text files (files for which :meth:`isatty` returns True) use line buffering.  Other text files use the policy described above for binary files."
msgstr ""

msgid "The type of file object returned by the :func:`.open` function depends on the mode.  When :func:`.open` is used to open a file in a text mode (``'w'``, ``'r'``, ``'wt'``, ``'rt'``, etc.), it returns a subclass of :class:`TextIOBase` (specifically :class:`TextIOWrapper`).  When used to open a file in a binary mode with buffering, the returned class is a subclass of :class:`BufferedIOBase`.  The exact class varies: in read binary mode, it returns a :class:`BufferedReader`; in write binary and append binary modes, it returns a :class:`BufferedWriter`, and in read/write mode, it returns a :class:`BufferedRandom`.  When buffering is disabled, the raw stream, a subclass of :class:`RawIOBase`, :class:`FileIO`, is returned."
msgstr ""

msgid "It is also possible to use a string or bytearray as a file for both reading and writing.  For strings :class:`StringIO` can be used like a file opened in a text mode, and for bytearrays a :class:`BytesIO` can be used like a file opened in a binary mode."
msgstr ""

msgid "Error raised when blocking would occur on a non-blocking stream.  It inherits :exc:`IOError`."
msgstr ""

msgid "In addition to those of :exc:`IOError`, :exc:`BlockingIOError` has one attribute:"
msgstr ""

msgid "An integer containing the number of characters written to the stream before it blocked."
msgstr ""

msgid "An exception inheriting :exc:`IOError` and :exc:`ValueError` that is raised when an unsupported operation is called on a stream."
msgstr ""

msgid "I/O Base Classes"
msgstr ""

msgid "The abstract base class for all I/O classes, acting on streams of bytes. There is no public constructor."
msgstr ""

msgid "This class provides empty abstract implementations for many methods that derived classes can override selectively; the default implementations represent a file that cannot be read, written or seeked."
msgstr ""

msgid "Even though :class:`IOBase` does not declare :meth:`read`, :meth:`readinto`, or :meth:`write` because their signatures will vary, implementations and clients should consider those methods part of the interface.  Also, implementations may raise a :exc:`IOError` when operations they do not support are called."
msgstr ""

msgid "The basic type used for binary data read from or written to a file is :class:`bytes`.  :class:`bytearray`\\s are accepted too, and in some cases (such as :class:`readinto`) required.  Text I/O classes work with :class:`str` data."
msgstr ""

msgid "Note that calling any method (even inquiries) on a closed stream is undefined.  Implementations may raise :exc:`IOError` in this case."
msgstr ""

msgid "IOBase (and its subclasses) support the iterator protocol, meaning that an :class:`IOBase` object can be iterated over yielding the lines in a stream. Lines are defined slightly differently depending on whether the stream is a binary stream (yielding bytes), or a text stream (yielding character strings).  See :meth:`readline` below."
msgstr ""

msgid "IOBase is also a context manager and therefore supports the :keyword:`with` statement.  In this example, *file* is closed after the :keyword:`with` statement's suite is finished---even if an exception occurs::"
msgstr ""

msgid "with open('spam.txt', 'w') as file:     file.write('Spam and eggs!')"
msgstr ""

msgid ":class:`IOBase` provides these data attributes and methods:"
msgstr ""

msgid "Flush and close this stream. This method has no effect if the file is already closed. Once the file is closed, any operation on the file (e.g. reading or writing) will raise a :exc:`ValueError`."
msgstr ""

msgid "As a convenience, it is allowed to call this method more than once; only the first call, however, will have an effect."
msgstr ""

msgid "True if the stream is closed."
msgstr ""

msgid "Return the underlying file descriptor (an integer) of the stream if it exists.  An :exc:`IOError` is raised if the IO object does not use a file descriptor."
msgstr ""

msgid "Flush the write buffers of the stream if applicable.  This does nothing for read-only and non-blocking streams."
msgstr ""

msgid "Return ``True`` if the stream is interactive (i.e., connected to a terminal/tty device)."
msgstr ""

msgid "Return ``True`` if the stream can be read from.  If False, :meth:`read` will raise :exc:`IOError`."
msgstr ""

msgid "Read and return one line from the stream.  If *limit* is specified, at most *limit* bytes will be read."
msgstr ""

msgid "The line terminator is always ``b'\\n'`` for binary files; for text files, the *newlines* argument to :func:`.open` can be used to select the line terminator(s) recognized."
msgstr ""

msgid "Read and return a list of lines from the stream.  *hint* can be specified to control the number of lines read: no more lines will be read if the total size (in bytes/characters) of all lines so far exceeds *hint*."
msgstr ""

msgid "Change the stream position to the given byte *offset*.  *offset* is interpreted relative to the position indicated by *whence*.  Values for *whence* are:"
msgstr ""

msgid ":data:`SEEK_SET` or ``0`` -- start of the stream (the default); *offset* should be zero or positive"
msgstr ""

msgid ":data:`SEEK_CUR` or ``1`` -- current stream position; *offset* may be negative"
msgstr ""

msgid ":data:`SEEK_END` or ``2`` -- end of the stream; *offset* is usually negative"
msgstr ""

msgid "Return the new absolute position."
msgstr ""

msgid "Return ``True`` if the stream supports random access.  If ``False``, :meth:`seek`, :meth:`tell` and :meth:`truncate` will raise :exc:`IOError`."
msgstr ""

msgid "Return the current stream position."
msgstr ""

msgid "Resize the stream to the given *size* in bytes (or the current position if *size* is not specified).  The current stream position isn't changed. This resizing can extend or reduce the current file size.  In case of extension, the contents of the new file area depend on the platform (on most systems, additional bytes are zero-filled, on Windows they're undetermined).  The new file size is returned."
msgstr ""

msgid "Return ``True`` if the stream supports writing.  If ``False``, :meth:`write` and :meth:`truncate` will raise :exc:`IOError`."
msgstr ""

msgid "Write a list of lines to the stream.  Line separators are not added, so it is usual for each of the lines provided to have a line separator at the end."
msgstr ""

msgid "Base class for raw binary I/O.  It inherits :class:`IOBase`.  There is no public constructor."
msgstr ""

msgid "Raw binary I/O typically provides low-level access to an underlying OS device or API, and does not try to encapsulate it in high-level primitives (this is left to Buffered I/O and Text I/O, described later in this page)."
msgstr ""

msgid "In addition to the attributes and methods from :class:`IOBase`, RawIOBase provides the following methods:"
msgstr ""

msgid "Read up to *n* bytes from the object and return them.  As a convenience, if *n* is unspecified or -1, :meth:`readall` is called.  Otherwise, only one system call is ever made.  Fewer than *n* bytes may be returned if the operating system call returns fewer than *n* bytes."
msgstr ""

msgid "If 0 bytes are returned, and *n* was not 0, this indicates end of file. If the object is in non-blocking mode and no bytes are available, ``None`` is returned."
msgstr ""

msgid "Read and return all the bytes from the stream until EOF, using multiple calls to the stream if necessary."
msgstr ""

msgid "Read up to len(b) bytes into bytearray *b* and return the number of bytes read."
msgstr ""

msgid "Write the given bytes or bytearray object, *b*, to the underlying raw stream and return the number of bytes written.  This can be less than ``len(b)``, depending on specifics of the underlying raw stream, and especially if it is in non-blocking mode.  ``None`` is returned if the raw stream is set not to block and no single byte could be readily written to it."
msgstr ""

msgid "Base class for binary streams that support some kind of buffering. It inherits :class:`IOBase`. There is no public constructor."
msgstr ""

msgid "The main difference with :class:`RawIOBase` is that methods :meth:`read`, :meth:`readinto` and :meth:`write` will try (respectively) to read as much input as requested or to consume all given output, at the expense of making perhaps more than one system call."
msgstr ""

msgid "In addition, those methods can raise :exc:`BlockingIOError` if the underlying raw stream is in non-blocking mode and cannot take or give enough data; unlike their :class:`RawIOBase` counterparts, they will never return ``None``."
msgstr ""

msgid "Besides, the :meth:`read` method does not have a default implementation that defers to :meth:`readinto`."
msgstr ""

msgid "A typical :class:`BufferedIOBase` implementation should not inherit from a :class:`RawIOBase` implementation, but wrap one, like :class:`BufferedWriter` and :class:`BufferedReader` do."
msgstr ""

msgid ":class:`BufferedIOBase` provides or overrides these members in addition to those from :class:`IOBase`:"
msgstr ""

msgid "The underlying raw stream (a :class:`RawIOBase` instance) that :class:`BufferedIOBase` deals with.  This is not part of the :class:`BufferedIOBase` API and may not exist on some implementations."
msgstr ""

msgid "Separate the underlying raw stream from the buffer and return it."
msgstr ""

msgid "After the raw stream has been detached, the buffer is in an unusable state."
msgstr ""

msgid "Some buffers, like :class:`BytesIO`, do not have the concept of a single raw stream to return from this method.  They raise :exc:`UnsupportedOperation`."
msgstr ""

msgid "Read and return up to *n* bytes.  If the argument is omitted, ``None``, or negative, data is read and returned until EOF is reached.  An empty bytes object is returned if the stream is already at EOF."
msgstr ""

msgid "If the argument is positive, and the underlying raw stream is not interactive, multiple raw reads may be issued to satisfy the byte count (unless EOF is reached first).  But for interactive raw streams, at most one raw read will be issued, and a short result does not imply that EOF is imminent."
msgstr ""

msgid "A :exc:`BlockingIOError` is raised if the underlying raw stream is in non blocking-mode, and has no data available at the moment."
msgstr ""

msgid "Read and return up to *n* bytes, with at most one call to the underlying raw stream's :meth:`~RawIOBase.read` method.  This can be useful if you are implementing your own buffering on top of a :class:`BufferedIOBase` object."
msgstr ""

msgid "Like :meth:`read`, multiple reads may be issued to the underlying raw stream, unless the latter is 'interactive'."
msgstr ""

msgid "Write the given bytes or bytearray object, *b* and return the number of bytes written (never less than ``len(b)``, since if the write fails an :exc:`IOError` will be raised).  Depending on the actual implementation, these bytes may be readily written to the underlying stream, or held in a buffer for performance and latency reasons."
msgstr ""

msgid "When in non-blocking mode, a :exc:`BlockingIOError` is raised if the data needed to be written to the raw stream but it couldn't accept all the data without blocking."
msgstr ""

msgid "Raw File I/O"
msgstr ""

msgid ":class:`FileIO` represents an OS-level file containing bytes data. It implements the :class:`RawIOBase` interface (and therefore the :class:`IOBase` interface, too)."
msgstr ""

msgid "The *name* can be one of two things:"
msgstr ""

msgid "a character string or bytes object representing the path to the file which will be opened;"
msgstr ""

msgid "an integer representing the number of an existing OS-level file descriptor to which the resulting :class:`FileIO` object will give access."
msgstr ""

msgid "The *mode* can be ``'r'``, ``'w'`` or ``'a'`` for reading (default), writing, or appending.  The file will be created if it doesn't exist when opened for writing or appending; it will be truncated when opened for writing.  Add a ``'+'`` to the mode to allow simultaneous reading and writing."
msgstr ""

msgid "The :meth:`read` (when called with a positive argument), :meth:`readinto` and :meth:`write` methods on this class will only make one system call."
msgstr ""

msgid "In addition to the attributes and methods from :class:`IOBase` and :class:`RawIOBase`, :class:`FileIO` provides the following data attributes and methods:"
msgstr ""

msgid "The mode as given in the constructor."
msgstr ""

msgid "The file name.  This is the file descriptor of the file when no name is given in the constructor."
msgstr ""

msgid "Buffered Streams"
msgstr ""

msgid "In many situations, buffered I/O streams will provide higher performance (bandwidth and latency) than raw I/O streams.  Their API is also more usable."
msgstr ""

msgid "A stream implementation using an in-memory bytes buffer.  It inherits :class:`BufferedIOBase`."
msgstr ""

msgid "The argument *initial_bytes* is an optional initial bytearray."
msgstr ""

msgid ":class:`BytesIO` provides or overrides these methods in addition to those from :class:`BufferedIOBase` and :class:`IOBase`:"
msgstr ""

msgid "Return ``bytes`` containing the entire contents of the buffer."
msgstr ""

msgid "In :class:`BytesIO`, this is the same as :meth:`read`."
msgstr ""

msgid "A buffer providing higher-level access to a readable, sequential :class:`RawIOBase` object.  It inherits :class:`BufferedIOBase`. When reading data from this object, a larger amount of data may be requested from the underlying raw stream, and kept in an internal buffer. The buffered data can then be returned directly on subsequent reads."
msgstr ""

msgid "The constructor creates a :class:`BufferedReader` for the given readable *raw* stream and *buffer_size*.  If *buffer_size* is omitted, :data:`DEFAULT_BUFFER_SIZE` is used."
msgstr ""

msgid ":class:`BufferedReader` provides or overrides these methods in addition to those from :class:`BufferedIOBase` and :class:`IOBase`:"
msgstr ""

msgid "Return bytes from the stream without advancing the position.  At most one single read on the raw stream is done to satisfy the call. The number of bytes returned may be less or more than requested."
msgstr ""

msgid "Read and return *n* bytes, or if *n* is not given or negative, until EOF or if the read call would block in non-blocking mode."
msgstr ""

msgid "Read and return up to *n* bytes with only one call on the raw stream.  If at least one byte is buffered, only buffered bytes are returned. Otherwise, one raw stream read call is made."
msgstr ""

msgid "A buffer providing higher-level access to a writeable, sequential :class:`RawIOBase` object.  It inherits :class:`BufferedIOBase`. When writing to this object, data is normally held into an internal buffer.  The buffer will be written out to the underlying :class:`RawIOBase` object under various conditions, including:"
msgstr ""

msgid "when the buffer gets too small for all pending data;"
msgstr ""

msgid "when :meth:`flush()` is called;"
msgstr ""

msgid "when a :meth:`seek()` is requested (for :class:`BufferedRandom` objects);"
msgstr ""

msgid "when the :class:`BufferedWriter` object is closed or destroyed."
msgstr ""

msgid "The constructor creates a :class:`BufferedWriter` for the given writeable *raw* stream.  If the *buffer_size* is not given, it defaults to :data:`DEFAULT_BUFFER_SIZE`."
msgstr ""

msgid "A third argument, *max_buffer_size*, is supported, but unused and deprecated."
msgstr ""

msgid ":class:`BufferedWriter` provides or overrides these methods in addition to those from :class:`BufferedIOBase` and :class:`IOBase`:"
msgstr ""

msgid "Force bytes held in the buffer into the raw stream.  A :exc:`BlockingIOError` should be raised if the raw stream blocks."
msgstr ""

msgid "Write the bytes or bytearray object, *b* and return the number of bytes written.  When in non-blocking mode, a :exc:`BlockingIOError` is raised if the buffer needs to be written out but the raw stream blocks."
msgstr ""

msgid "A buffered I/O object giving a combined, higher-level access to two sequential :class:`RawIOBase` objects: one readable, the other writeable. It is useful for pairs of unidirectional communication channels (pipes, for instance).  It inherits :class:`BufferedIOBase`."
msgstr ""

msgid "*reader* and *writer* are :class:`RawIOBase` objects that are readable and writeable respectively.  If the *buffer_size* is omitted it defaults to :data:`DEFAULT_BUFFER_SIZE`."
msgstr ""

msgid "A fourth argument, *max_buffer_size*, is supported, but unused and deprecated."
msgstr ""

msgid ":class:`BufferedRWPair` implements all of :class:`BufferedIOBase`\\'s methods except for :meth:`~BufferedIOBase.detach`, which raises :exc:`UnsupportedOperation`."
msgstr ""

msgid "A buffered interface to random access streams.  It inherits :class:`BufferedReader` and :class:`BufferedWriter`, and further supports :meth:`seek` and :meth:`tell` functionality."
msgstr ""

msgid "The constructor creates a reader and writer for a seekable raw stream, given in the first argument.  If the *buffer_size* is omitted it defaults to :data:`DEFAULT_BUFFER_SIZE`."
msgstr ""

msgid ":class:`BufferedRandom` is capable of anything :class:`BufferedReader` or :class:`BufferedWriter` can do."
msgstr ""

msgid "Text I/O"
msgstr ""

msgid "Base class for text streams.  This class provides a character and line based interface to stream I/O.  There is no :meth:`readinto` method because Python's character strings are immutable.  It inherits :class:`IOBase`. There is no public constructor."
msgstr ""

msgid ":class:`TextIOBase` provides or overrides these data attributes and methods in addition to those from :class:`IOBase`:"
msgstr ""

msgid "The name of the encoding used to decode the stream's bytes into strings, and to encode strings into bytes."
msgstr ""

msgid "The error setting of the decoder or encoder."
msgstr ""

msgid "A string, a tuple of strings, or ``None``, indicating the newlines translated so far.  Depending on the implementation and the initial constructor flags, this may not be available."
msgstr ""

msgid "The underlying binary buffer (a :class:`BufferedIOBase` instance) that :class:`TextIOBase` deals with.  This is not part of the :class:`TextIOBase` API and may not exist on some implementations."
msgstr ""

msgid "Separate the underlying binary buffer from the :class:`TextIOBase` and return it."
msgstr ""

msgid "After the underlying buffer has been detached, the :class:`TextIOBase` is in an unusable state."
msgstr ""

msgid "Some :class:`TextIOBase` implementations, like :class:`StringIO`, may not have the concept of an underlying buffer and calling this method will raise :exc:`UnsupportedOperation`."
msgstr ""

msgid "Read and return at most *n* characters from the stream as a single :class:`str`.  If *n* is negative or ``None``, reads until EOF."
msgstr ""

msgid "Read until newline or EOF and return a single ``str``.  If the stream is already at EOF, an empty string is returned."
msgstr ""

msgid "Write the string *s* to the stream and return the number of characters written."
msgstr ""

msgid "A buffered text stream over a :class:`BufferedIOBase` binary stream. It inherits :class:`TextIOBase`."
msgstr ""

msgid "*encoding* gives the name of the encoding that the stream will be decoded or encoded with.  It defaults to :func:`locale.getpreferredencoding`."
msgstr ""

msgid "*errors* is an optional string that specifies how encoding and decoding errors are to be handled.  Pass ``'strict'`` to raise a :exc:`ValueError` exception if there is an encoding error (the default of ``None`` has the same effect), or pass ``'ignore'`` to ignore errors.  (Note that ignoring encoding errors can lead to data loss.)  ``'replace'`` causes a replacement marker (such as ``'?'``) to be inserted where there is malformed data.  When writing, ``'xmlcharrefreplace'`` (replace with the appropriate XML character reference) or ``'backslashreplace'`` (replace with backslashed escape sequences) can be used.  Any other error handling name that has been registered with :func:`codecs.register_error` is also valid."
msgstr ""

msgid "*newline* can be ``None``, ``''``, ``'\\n'``, ``'\\r'``, or ``'\\r\\n'``.  It controls the handling of line endings.  If it is ``None``, universal newlines is enabled.  With this enabled, on input, the lines endings ``'\\n'``, ``'\\r'``, or ``'\\r\\n'`` are translated to ``'\\n'`` before being returned to the caller.  Conversely, on output, ``'\\n'`` is translated to the system default line separator, :data:`os.linesep`.  If *newline* is any other of its legal values, that newline becomes the newline when the file is read and it is returned untranslated.  On output, ``'\\n'`` is converted to the *newline*."
msgstr ""

msgid "If *line_buffering* is ``True``, :meth:`flush` is implied when a call to write contains a newline character."
msgstr ""

msgid ":class:`TextIOWrapper` provides one attribute in addition to those of :class:`TextIOBase` and its parents:"
msgstr ""

msgid "Whether line buffering is enabled."
msgstr ""

msgid "An in-memory stream for text.  It inherits :class:`TextIOWrapper`."
msgstr ""

msgid "The initial value of the buffer (an empty string by default) can be set by providing *initial_value*.  The *newline* argument works like that of :class:`TextIOWrapper`.  The default is to do no newline translation."
msgstr ""

msgid ":class:`StringIO` provides this method in addition to those from :class:`TextIOWrapper` and its parents:"
msgstr ""

msgid "Return a ``str`` containing the entire contents of the buffer at any time before the :class:`StringIO` object's :meth:`close` method is called."
msgstr ""

msgid "Example usage::"
msgstr ""

msgid "import io  output = io.StringIO() output.write('First line.\\n') print('Second line.', file=output)  # Retrieve file contents -- this will be # 'First line.\\nSecond line.\\n' contents = output.getvalue()  # Close object and discard memory buffer -- # .getvalue() will now raise an exception. output.close()"
msgstr ""

msgid "A helper codec that decodes newlines for universal newlines mode.  It inherits :class:`codecs.IncrementalDecoder`."
msgstr ""

msgid "Interprocess Communication and Networking"
msgstr ""

msgid "The modules described in this chapter provide mechanisms for different processes to communicate."
msgstr ""

msgid "Some modules only work for two processes that are on the same machine, e.g. :mod:`signal` and :mod:`subprocess`.  Other modules support networking protocols that two or more processes can used to communicate across machines."
msgstr ""

msgid ":mod:`itertools` --- Functions creating iterators for efficient looping"
msgstr ""

msgid "This module implements a number of :term:`iterator` building blocks inspired by constructs from APL, Haskell, and SML.  Each has been recast in a form suitable for Python."
msgstr ""

msgid "The module standardizes a core set of fast, memory efficient tools that are useful by themselves or in combination.  Together, they form an \"iterator algebra\" making it possible to construct specialized tools succinctly and efficiently in pure Python."
msgstr ""

msgid "For instance, SML provides a tabulation tool: ``tabulate(f)`` which produces a sequence ``f(0), f(1), ...``.  The same effect can be achieved in Python by combining :func:`map` and :func:`count` to form ``map(f, count())``."
msgstr ""

msgid "These tools and their built-in counterparts also work well with the high-speed functions in the :mod:`operator` module.  For example, the multiplication operator can be mapped across two vectors to form an efficient dot-product: ``sum(map(operator.mul, vector1, vector2))``."
msgstr ""

msgid "**Infinite Iterators:**"
msgstr ""

msgid "Iterator"
msgstr ""

msgid "Arguments"
msgstr ""

msgid "Results"
msgstr ""

msgid ":func:`count`"
msgstr ""

msgid "start, [step]"
msgstr ""

msgid "start, start+step, start+2*step, ..."
msgstr ""

msgid "``count(10) --> 10 11 12 13 14 ...``"
msgstr ""

msgid ":func:`cycle`"
msgstr ""

msgid "p"
msgstr ""

msgid "p0, p1, ... plast, p0, p1, ..."
msgstr ""

msgid "``cycle('ABCD') --> A B C D A B C D ...``"
msgstr ""

msgid ":func:`repeat`"
msgstr ""

msgid "elem [,n]"
msgstr ""

msgid "elem, elem, elem, ... endlessly or up to n times"
msgstr ""

msgid "``repeat(10, 3) --> 10 10 10``"
msgstr ""

msgid "**Iterators terminating on the shortest input sequence:**"
msgstr ""

msgid ":func:`chain`"
msgstr ""

msgid "p, q, ..."
msgstr ""

msgid "p0, p1, ... plast, q0, q1, ..."
msgstr ""

msgid "``chain('ABC', 'DEF') --> A B C D E F``"
msgstr ""

msgid ":func:`compress`"
msgstr ""

msgid "data, selectors"
msgstr ""

msgid "(d[0] if s[0]), (d[1] if s[1]), ..."
msgstr ""

msgid "``compress('ABCDEF', [1,0,1,0,1,1]) --> A C E F``"
msgstr ""

msgid ":func:`dropwhile`"
msgstr ""

msgid "pred, seq"
msgstr ""

msgid "seq[n], seq[n+1], starting when pred fails"
msgstr ""

msgid "``dropwhile(lambda x: x<5, [1,4,6,4,1]) --> 6 4 1``"
msgstr ""

msgid ":func:`filterfalse`"
msgstr ""

msgid "elements of seq where pred(elem) is False"
msgstr ""

msgid "``filterfalse(lambda x: x%2, range(10)) --> 0 2 4 6 8``"
msgstr ""

msgid ":func:`groupby`"
msgstr ""

msgid "iterable[, keyfunc]"
msgstr ""

msgid "sub-iterators grouped by value of keyfunc(v)"
msgstr ""

msgid ":func:`islice`"
msgstr ""

msgid "seq, [start,] stop [, step]"
msgstr ""

msgid "elements from seq[start:stop:step]"
msgstr ""

msgid "``islice('ABCDEFG', 2, None) --> C D E F G``"
msgstr ""

msgid ":func:`starmap`"
msgstr ""

msgid "func, seq"
msgstr ""

msgid "func(\\*seq[0]), func(\\*seq[1]), ..."
msgstr ""

msgid "``starmap(pow, [(2,5), (3,2), (10,3)]) --> 32 9 1000``"
msgstr ""

msgid ":func:`takewhile`"
msgstr ""

msgid "seq[0], seq[1], until pred fails"
msgstr ""

msgid "``takewhile(lambda x: x<5, [1,4,6,4,1]) --> 1 4``"
msgstr ""

msgid ":func:`tee`"
msgstr ""

msgid "it, n"
msgstr ""

msgid "it1, it2 , ... itn  splits one iterator into n"
msgstr ""

msgid ":func:`zip_longest`"
msgstr ""

msgid "(p[0], q[0]), (p[1], q[1]), ..."
msgstr ""

msgid "``zip_longest('ABCD', 'xy', fillvalue='-') --> Ax By C- D-``"
msgstr ""

msgid "**Combinatoric generators:**"
msgstr ""

msgid ":func:`product`"
msgstr ""

msgid "p, q, ... [repeat=1]"
msgstr ""

msgid "cartesian product, equivalent to a nested for-loop"
msgstr ""

msgid ":func:`permutations`"
msgstr ""

msgid "p[, r]"
msgstr ""

msgid "r-length tuples, all possible orderings, no repeated elements"
msgstr ""

msgid ":func:`combinations`"
msgstr ""

msgid "p, r"
msgstr ""

msgid "r-length tuples, in sorted order, no repeated elements"
msgstr ""

msgid ":func:`combinations_with_replacement`"
msgstr ""

msgid "r-length tuples, in sorted order, with repeated elements"
msgstr ""

msgid "``product('ABCD', repeat=2)``"
msgstr ""

msgid "``AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD``"
msgstr ""

msgid "``permutations('ABCD', 2)``"
msgstr ""

msgid "``AB AC AD BA BC BD CA CB CD DA DB DC``"
msgstr ""

msgid "``combinations('ABCD', 2)``"
msgstr ""

msgid "``AB AC AD BC BD CD``"
msgstr ""

msgid "``combinations_with_replacement('ABCD', 2)``"
msgstr ""

msgid "``AA AB AC AD BB BC BD CC CD DD``"
msgstr ""

msgid "Itertool functions"
msgstr ""

msgid "The following module functions all construct and return iterators. Some provide streams of infinite length, so they should only be accessed by functions or loops that truncate the stream."
msgstr ""

msgid "Make an iterator that returns elements from the first iterable until it is exhausted, then proceeds to the next iterable, until all of the iterables are exhausted.  Used for treating consecutive sequences as a single sequence. Equivalent to::"
msgstr ""

msgid "def chain(*iterables):     # chain('ABC', 'DEF') --> A B C D E F     for it in iterables:         for element in it:             yield element"
msgstr ""

msgid "Alternate constructor for :func:`chain`.  Gets chained inputs from a single iterable argument that is evaluated lazily.  Equivalent to::"
msgstr ""

msgid "@classmethod def from_iterable(iterables):     # chain.from_iterable(['ABC', 'DEF']) --> A B C D E F     for it in iterables:         for element in it:             yield element"
msgstr ""

msgid "Return *r* length subsequences of elements from the input *iterable*."
msgstr ""

msgid "Combinations are emitted in lexicographic sort order.  So, if the input *iterable* is sorted, the combination tuples will be produced in sorted order."
msgstr ""

msgid "Elements are treated as unique based on their position, not on their value.  So if the input elements are unique, there will be no repeat values in each combination."
msgstr ""

msgid "Equivalent to::"
msgstr ""

msgid "def combinations(iterable, r):     # combinations('ABCD', 2) --> AB AC AD BC BD CD     # combinations(range(4), 3) --> 012 013 023 123     pool = tuple(iterable)     n = len(pool)     if r > n:         return     indices = list(range(r))     yield tuple(pool[i] for i in indices)     while True:         for i in reversed(range(r)):             if indices[i] != i + n - r:                 break         else:             return         indices[i] += 1         for j in range(i+1, r):             indices[j] = indices[j-1] + 1         yield tuple(pool[i] for i in indices)"
msgstr ""

msgid "The code for :func:`combinations` can be also expressed as a subsequence of :func:`permutations` after filtering entries where the elements are not in sorted order (according to their position in the input pool)::"
msgstr ""

msgid "def combinations(iterable, r):     pool = tuple(iterable)     n = len(pool)     for indices in permutations(range(n), r):         if sorted(indices) == list(indices):             yield tuple(pool[i] for i in indices)"
msgstr ""

msgid "The number of items returned is ``n! / r! / (n-r)!`` when ``0 <= r <= n`` or zero when ``r > n``."
msgstr ""

msgid "Return *r* length subsequences of elements from the input *iterable* allowing individual elements to be repeated more than once."
msgstr ""

msgid "Elements are treated as unique based on their position, not on their value.  So if the input elements are unique, the generated combinations will also be unique."
msgstr ""

msgid "def combinations_with_replacement(iterable, r):     # combinations_with_replacement('ABC', 2) --> AA AB AC BB BC CC     pool = tuple(iterable)     n = len(pool)     if not n and r:         return     indices = [0] * r     yield tuple(pool[i] for i in indices)     while True:         for i in reversed(range(r)):             if indices[i] != n - 1:                 break         else:             return         indices[i:] = [indices[i] + 1] * (r - i)         yield tuple(pool[i] for i in indices)"
msgstr ""

msgid "The code for :func:`combinations_with_replacement` can be also expressed as a subsequence of :func:`product` after filtering entries where the elements are not in sorted order (according to their position in the input pool)::"
msgstr ""

msgid "def combinations_with_replacement(iterable, r):     pool = tuple(iterable)     n = len(pool)     for indices in product(range(n), repeat=r):         if sorted(indices) == list(indices):             yield tuple(pool[i] for i in indices)"
msgstr ""

msgid "The number of items returned is ``(n+r-1)! / r! / (n-1)!`` when ``n > 0``."
msgstr ""

msgid "Make an iterator that filters elements from *data* returning only those that have a corresponding element in *selectors* that evaluates to ``True``. Stops when either the *data* or *selectors* iterables has been exhausted. Equivalent to::"
msgstr ""

msgid "def compress(data, selectors):     # compress('ABCDEF', [1,0,1,0,1,1]) --> A C E F     return (d for d, s in zip(data, selectors) if s)"
msgstr ""

msgid "Make an iterator that returns evenly spaced values starting with *n*. Often used as an argument to :func:`map` to generate consecutive data points. Also, used with :func:`zip` to add sequence numbers.  Equivalent to::"
msgstr ""

msgid "def count(start=0, step=1):     # count(10) --> 10 11 12 13 14 ...     # count(2.5, 0.5) -> 3.5 3.0 4.5 ...     n = start     while True:         yield n         n += step"
msgstr ""

msgid "When counting with floating point numbers, better accuracy can sometimes be achieved by substituting multiplicative code such as: ``(start + step * i for i in count())``."
msgstr ""

msgid "Make an iterator returning elements from the iterable and saving a copy of each. When the iterable is exhausted, return elements from the saved copy.  Repeats indefinitely.  Equivalent to::"
msgstr ""

msgid "def cycle(iterable):     # cycle('ABCD') --> A B C D A B C D A B C D ...     saved = []     for element in iterable:         yield element         saved.append(element)     while saved:         for element in saved:               yield element"
msgstr ""

msgid "Note, this member of the toolkit may require significant auxiliary storage (depending on the length of the iterable)."
msgstr ""

msgid "Make an iterator that drops elements from the iterable as long as the predicate is true; afterwards, returns every element.  Note, the iterator does not produce *any* output until the predicate first becomes false, so it may have a lengthy start-up time.  Equivalent to::"
msgstr ""

msgid "def dropwhile(predicate, iterable):     # dropwhile(lambda x: x<5, [1,4,6,4,1]) --> 6 4 1     iterable = iter(iterable)     for x in iterable:         if not predicate(x):             yield x             break     for x in iterable:         yield x"
msgstr ""

msgid "Make an iterator that filters elements from iterable returning only those for which the predicate is ``False``. If *predicate* is ``None``, return the items that are false. Equivalent to::"
msgstr ""

msgid "def filterfalse(predicate, iterable):     # filterfalse(lambda x: x%2, range(10)) --> 0 2 4 6 8     if predicate is None:         predicate = bool     for x in iterable:         if not predicate(x):             yield x"
msgstr ""

msgid "Make an iterator that returns consecutive keys and groups from the *iterable*. The *key* is a function computing a key value for each element.  If not specified or is ``None``, *key* defaults to an identity function and returns the element unchanged.  Generally, the iterable needs to already be sorted on the same key function."
msgstr ""

msgid "The operation of :func:`groupby` is similar to the ``uniq`` filter in Unix.  It generates a break or new group every time the value of the key function changes (which is why it is usually necessary to have sorted the data using the same key function).  That behavior differs from SQL's GROUP BY which aggregates common elements regardless of their input order."
msgstr ""

msgid "The returned group is itself an iterator that shares the underlying iterable with :func:`groupby`.  Because the source is shared, when the :func:`groupby` object is advanced, the previous group is no longer visible.  So, if that data is needed later, it should be stored as a list::"
msgstr ""

msgid "groups = [] uniquekeys = [] data = sorted(data, key=keyfunc) for k, g in groupby(data, keyfunc):     groups.append(list(g))      # Store group iterator as a list     uniquekeys.append(k)"
msgstr ""

msgid ":func:`groupby` is equivalent to::"
msgstr ""

msgid "class groupby(object):     # [k for k, g in groupby('AAAABBBCCDAABBB')] --> A B C D A B     # [list(g) for k, g in groupby('AAAABBBCCD')] --> AAAA BBB CC D     def __init__(self, iterable, key=None):         if key is None:             key = lambda x: x         self.keyfunc = key         self.it = iter(iterable)         self.tgtkey = self.currkey = self.currvalue = object()     def __iter__(self):         return self     def __next__(self):         while self.currkey == self.tgtkey:             self.currvalue = next(self.it)    # Exit on StopIteration             self.currkey = self.keyfunc(self.currvalue)         self.tgtkey = self.currkey         return (self.currkey, self._grouper(self.tgtkey))     def _grouper(self, tgtkey):         while self.currkey == tgtkey:             yield self.currvalue             self.currvalue = next(self.it)    # Exit on StopIteration             self.currkey = self.keyfunc(self.currvalue)"
msgstr ""

msgid "Make an iterator that returns selected elements from the iterable. If *start* is non-zero, then elements from the iterable are skipped until start is reached. Afterward, elements are returned consecutively unless *step* is set higher than one which results in items being skipped.  If *stop* is ``None``, then iteration continues until the iterator is exhausted, if at all; otherwise, it stops at the specified position.  Unlike regular slicing, :func:`islice` does not support negative values for *start*, *stop*, or *step*.  Can be used to extract related fields from data where the internal structure has been flattened (for example, a multi-line report may list a name field on every third line).  Equivalent to::"
msgstr ""

msgid "def islice(iterable, *args):     # islice('ABCDEFG', 2) --> A B     # islice('ABCDEFG', 2, 4) --> C D     # islice('ABCDEFG', 2, None) --> C D E F G     # islice('ABCDEFG', 0, None, 2) --> A C E G     s = slice(*args)     it = iter(range(s.start or 0, s.stop or sys.maxsize, s.step or 1))     nexti = next(it)     for i, element in enumerate(iterable):         if i == nexti:             yield element             nexti = next(it)"
msgstr ""

msgid "If *start* is ``None``, then iteration starts at zero. If *step* is ``None``, then the step defaults to one."
msgstr ""

msgid "Return successive *r* length permutations of elements in the *iterable*."
msgstr ""

msgid "If *r* is not specified or is ``None``, then *r* defaults to the length of the *iterable* and all possible full-length permutations are generated."
msgstr ""

msgid "Permutations are emitted in lexicographic sort order.  So, if the input *iterable* is sorted, the permutation tuples will be produced in sorted order."
msgstr ""

msgid "Elements are treated as unique based on their position, not on their value.  So if the input elements are unique, there will be no repeat values in each permutation."
msgstr ""

msgid "def permutations(iterable, r=None):     # permutations('ABCD', 2) --> AB AC AD BA BC BD CA CB CD DA DB DC     # permutations(range(3)) --> 012 021 102 120 201 210     pool = tuple(iterable)     n = len(pool)     r = n if r is None else r     if r > n:         return     indices = list(range(n))     cycles = range(n, n-r, -1)     yield tuple(pool[i] for i in indices[:r])     while n:         for i in reversed(range(r)):             cycles[i] -= 1             if cycles[i] == 0:                 indices[i:] = indices[i+1:] + indices[i:i+1]                 cycles[i] = n - i             else:                 j = cycles[i]                 indices[i], indices[-j] = indices[-j], indices[i]                 yield tuple(pool[i] for i in indices[:r])                 break         else:             return"
msgstr ""

msgid "The code for :func:`permutations` can be also expressed as a subsequence of :func:`product`, filtered to exclude entries with repeated elements (those from the same position in the input pool)::"
msgstr ""

msgid "def permutations(iterable, r=None):     pool = tuple(iterable)     n = len(pool)     r = n if r is None else r     for indices in product(range(n), repeat=r):         if len(set(indices)) == r:             yield tuple(pool[i] for i in indices)"
msgstr ""

msgid "The number of items returned is ``n! / (n-r)!`` when ``0 <= r <= n`` or zero when ``r > n``."
msgstr ""

msgid "Cartesian product of input iterables."
msgstr ""

msgid "Equivalent to nested for-loops in a generator expression. For example, ``product(A, B)`` returns the same as ``((x,y) for x in A for y in B)``."
msgstr ""

msgid "The nested loops cycle like an odometer with the rightmost element advancing on every iteration.  This pattern creates a lexicographic ordering so that if the input's iterables are sorted, the product tuples are emitted in sorted order."
msgstr ""

msgid "To compute the product of an iterable with itself, specify the number of repetitions with the optional *repeat* keyword argument.  For example, ``product(A, repeat=4)`` means the same as ``product(A, A, A, A)``."
msgstr ""

msgid "This function is equivalent to the following code, except that the actual implementation does not build up intermediate results in memory::"
msgstr ""

msgid "def product(*args, repeat=1):     # product('ABCD', 'xy') --> Ax Ay Bx By Cx Cy Dx Dy     # product(range(2), repeat=3) --> 000 001 010 011 100 101 110 111     pools = [tuple(pool) for pool in args] * repeat     result = [[]]     for pool in pools:         result = [x+[y] for x in result for y in pool]     for prod in result:         yield tuple(prod)"
msgstr ""

msgid "Make an iterator that returns *object* over and over again. Runs indefinitely unless the *times* argument is specified. Used as argument to :func:`map` for invariant parameters to the called function.  Also used with :func:`zip` to create an invariant part of a tuple record.  Equivalent to::"
msgstr ""

msgid "def repeat(object, times=None):     # repeat(10, 3) --> 10 10 10     if times is None:         while True:             yield object     else:         for i in range(times):             yield object"
msgstr ""

msgid "Make an iterator that computes the function using arguments obtained from the iterable.  Used instead of :func:`map` when argument parameters are already grouped in tuples from a single iterable (the data has been \"pre-zipped\").  The difference between :func:`map` and :func:`starmap` parallels the distinction between ``function(a,b)`` and ``function(*c)``. Equivalent to::"
msgstr ""

msgid "def starmap(function, iterable):     # starmap(pow, [(2,5), (3,2), (10,3)]) --> 32 9 1000     for args in iterable:         yield function(*args)"
msgstr ""

msgid "Make an iterator that returns elements from the iterable as long as the predicate is true.  Equivalent to::"
msgstr ""

msgid "def takewhile(predicate, iterable):     # takewhile(lambda x: x<5, [1,4,6,4,1]) --> 1 4     for x in iterable:         if predicate(x):             yield x         else:             break"
msgstr ""

msgid "Return *n* independent iterators from a single iterable.  Equivalent to::"
msgstr ""

msgid "def tee(iterable, n=2):     it = iter(iterable)     deques = [collections.deque() for i in range(n)]     def gen(mydeque):         while True:             if not mydeque:             # when the local deque is empty                 newval = next(it)       # fetch a new value and                 for d in deques:        # load it to all the deques                     d.append(newval)             yield mydeque.popleft()     return tuple(gen(d) for d in deques)"
msgstr ""

msgid "Once :func:`tee` has made a split, the original *iterable* should not be used anywhere else; otherwise, the *iterable* could get advanced without the tee objects being informed."
msgstr ""

msgid "This itertool may require significant auxiliary storage (depending on how much temporary data needs to be stored). In general, if one iterator uses most or all of the data before another iterator starts, it is faster to use :func:`list` instead of :func:`tee`."
msgstr ""

msgid "Make an iterator that aggregates elements from each of the iterables. If the iterables are of uneven length, missing values are filled-in with *fillvalue*. Iteration continues until the longest iterable is exhausted.  Equivalent to::"
msgstr ""

msgid "def zip_longest(*args, fillvalue=None):     # zip_longest('ABCD', 'xy', fillvalue='-') --> Ax By C- D-     def sentinel(counter = ([fillvalue]*(len(args)-1)).pop):         yield counter()         # yields the fillvalue, or raises IndexError     fillers = repeat(fillvalue)     iters = [chain(it, sentinel(), fillers) for it in args]     try:         for tup in zip(*iters):             yield tup     except IndexError:         pass"
msgstr ""

msgid "If one of the iterables is potentially infinite, then the :func:`zip_longest` function should be wrapped with something that limits the number of calls (for example :func:`islice` or :func:`takewhile`).  If not specified, *fillvalue* defaults to ``None``."
msgstr ""

msgid "This section shows recipes for creating an extended toolset using the existing itertools as building blocks."
msgstr ""

msgid "The extended tools offer the same high performance as the underlying toolset. The superior memory performance is kept by processing elements one at a time rather than bringing the whole iterable into memory all at once. Code volume is kept small by linking the tools together in a functional style which helps eliminate temporary variables.  High speed is retained by preferring \"vectorized\" building blocks over the use of for-loops and :term:`generator`\\s which incur interpreter overhead."
msgstr ""

msgid "def take(n, iterable):     \"Return first n items of the iterable as a list\"     return list(islice(iterable, n))  def tabulate(function, start=0):     \"Return function(0), function(1), ...\"     return map(function, count(start))  def consume(iterator, n):     \"Advance the iterator n-steps ahead. If n is none, consume entirely.\"     # Use functions that consume iterators at C speed.     if n is None:         # feed the entire iterator into a zero-length deque         collections.deque(iterator, maxlen=0)     else:         # advance to the emtpy slice starting at position n         next(islice(iterator, n, n), None)  def nth(iterable, n, default=None):     \"Returns the nth item or a default value\"     return next(islice(iterable, n, None), default)  def quantify(iterable, pred=bool):     \"Count how many times the predicate is true\"     return sum(map(pred, iterable))  def padnone(iterable):     \"\"\"Returns the sequence elements and then returns None indefinitely.      Useful for emulating the behavior of the built-in map() function.     \"\"\"     return chain(iterable, repeat(None))  def ncycles(iterable, n):     \"Returns the sequence elements n times\"     return chain.from_iterable(repeat(tuple(iterable), n))  def dotproduct(vec1, vec2):     return sum(map(operator.mul, vec1, vec2))  def flatten(listOfLists):     \"Flatten one level of nesting\"     return chain.from_iterable(listOfLists)  def repeatfunc(func, times=None, *args):     \"\"\"Repeat calls to func with specified arguments.      Example:  repeatfunc(random.random)     \"\"\"     if times is None:         return starmap(func, repeat(args))     return starmap(func, repeat(args, times))  def pairwise(iterable):     \"s -> (s0,s1), (s1,s2), (s2, s3), ...\"     a, b = tee(iterable)     next(b, None)     return zip(a, b)  def grouper(n, iterable, fillvalue=None):     \"grouper(3, 'ABCDEFG', 'x') --> ABC DEF Gxx\"     args = [iter(iterable)] * n     return zip_longest(*args, fillvalue=fillvalue)  def roundrobin(*iterables):     \"roundrobin('ABC', 'D', 'EF') --> A D E B F C\"     # Recipe credited to George Sakkis     pending = len(iterables)     nexts = cycle(iter(it).__next__ for it in iterables)     while pending:         try:             for next in nexts:                 yield next()         except StopIteration:             pending -= 1             nexts = cycle(islice(nexts, pending))  def powerset(iterable):     \"powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)\"     s = list(iterable)     return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))  def unique_everseen(iterable, key=None):     \"List unique elements, preserving order. Remember all elements ever seen.\"     # unique_everseen('AAAABBBCCDAABBB') --> A B C D     # unique_everseen('ABBCcAD', str.lower) --> A B C D     seen = set()     seen_add = seen.add     if key is None:         for element in filterfalse(seen.__contains__, iterable):             seen_add(element)             yield element     else:         for element in iterable:             k = key(element)             if k not in seen:                 seen_add(k)                 yield element  def unique_justseen(iterable, key=None):     \"List unique elements, preserving order. Remember only the element just seen.\"     # unique_justseen('AAAABBBCCDAABBB') --> A B C D A B     # unique_justseen('ABBCcAD', str.lower) --> A B C A D     return map(next, map(itemgetter(1), groupby(iterable, key)))  def iter_except(func, exception, first=None):     \"\"\" Call a function repeatedly until an exception is raised.      Converts a call-until-exception interface to an iterator interface.     Like __builtin__.iter(func, sentinel) but uses an exception instead     of a sentinel to end the loop.      Examples:         iter_except(functools.partial(heappop, h), IndexError)   # priority queue iterator         iter_except(d.popitem, KeyError)                         # non-blocking dict iterator         iter_except(d.popleft, IndexError)                       # non-blocking deque iterator         iter_except(q.get_nowait, Queue.Empty)                   # loop over a producer Queue         iter_except(s.pop, KeyError)                             # non-blocking set iterator      \"\"\"     try:         if first is not None:             yield first()            # For database APIs needing an initial cast to db.first()         while 1:             yield func()     except exception:         pass  def random_product(*args, repeat=1):     \"Random selection from itertools.product(*args, **kwds)\"     pools = [tuple(pool) for pool in args] * repeat     return tuple(random.choice(pool) for pool in pools)  def random_permutation(iterable, r=None):     \"Random selection from itertools.permutations(iterable, r)\"     pool = tuple(iterable)     r = len(pool) if r is None else r     return tuple(random.sample(pool, r))  def random_combination(iterable, r):     \"Random selection from itertools.combinations(iterable, r)\"     pool = tuple(iterable)     n = len(pool)     indices = sorted(random.sample(range(n), r))     return tuple(pool[i] for i in indices)  def random_combination_with_replacement(iterable, r):     \"Random selection from itertools.combinations_with_replacement(iterable, r)\"     pool = tuple(iterable)     n = len(pool)     indices = sorted(random.randrange(n) for i in range(r))     return tuple(pool[i] for i in indices)"
msgstr ""

msgid "Note, many of the above recipes can be optimized by replacing global lookups with local variables defined as default values.  For example, the *dotproduct* recipe can be written as::"
msgstr ""

msgid "def dotproduct(vec1, vec2, sum=sum, map=map, mul=operator.mul):     return sum(map(mul, vec1, vec2))"
msgstr ""

msgid ":mod:`json` --- JSON encoder and decoder"
msgstr ""

msgid "JSON (JavaScript Object Notation) <http://json.org> is a subset of JavaScript syntax (ECMA-262 3rd edition) used as a lightweight data interchange format."
msgstr ""

msgid ":mod:`json` exposes an API familiar to users of the standard library :mod:`marshal` and :mod:`pickle` modules."
msgstr ""

msgid "Encoding basic Python object hierarchies::"
msgstr ""

msgid ">>> import json >>> json.dumps(['foo', {'bar': ('baz', None, 1.0, 2)}]) '[\"foo\", {\"bar\": [\"baz\", null, 1.0, 2]}]' >>> print(json.dumps(\"\\\"foo\\bar\")) \"\\\"foo\\bar\" >>> print(json.dumps('\\u1234')) \"\\u1234\" >>> print(json.dumps('\\\\')) \"\\\\\" >>> print(json.dumps({\"c\": 0, \"b\": 0, \"a\": 0}, sort_keys=True)) {\"a\": 0, \"b\": 0, \"c\": 0} >>> from io import StringIO >>> io = StringIO() >>> json.dump(['streaming API'], io) >>> io.getvalue() '[\"streaming API\"]'"
msgstr ""

msgid "Compact encoding::"
msgstr ""

msgid ">>> import json >>> json.dumps([1,2,3,{'4': 5, '6': 7}], separators=(',',':')) '[1,2,3,{\"4\":5,\"6\":7}]'"
msgstr ""

msgid "Pretty printing::"
msgstr ""

msgid ">>> import json >>> print(json.dumps({'4': 5, '6': 7}, sort_keys=True, indent=4)) {     \"4\": 5,     \"6\": 7 }"
msgstr ""

msgid "Decoding JSON::"
msgstr ""

msgid ">>> import json >>> json.loads('[\"foo\", {\"bar\":[\"baz\", null, 1.0, 2]}]') ['foo', {'bar': ['baz', None, 1.0, 2]}] >>> json.loads('\"\\\\\"foo\\\\bar\"') '\"foo\\x08ar' >>> from io import StringIO >>> io = StringIO('[\"streaming API\"]') >>> json.load(io) ['streaming API']"
msgstr ""

msgid "Specializing JSON object decoding::"
msgstr ""

msgid ">>> import json >>> def as_complex(dct): ...     if '__complex__' in dct: ...         return complex(dct['real'], dct['imag']) ...     return dct ... >>> json.loads('{\"__complex__\": true, \"real\": 1, \"imag\": 2}', ...     object_hook=as_complex) (1+2j) >>> import decimal >>> json.loads('1.1', parse_float=decimal.Decimal) Decimal('1.1')"
msgstr ""

msgid "Extending :class:`JSONEncoder`::"
msgstr ""

msgid ">>> import json >>> class ComplexEncoder(json.JSONEncoder): ...     def default(self, obj): ...         if isinstance(obj, complex): ...             return [obj.real, obj.imag] ...         return json.JSONEncoder.default(self, obj) ... >>> dumps(2 + 1j, cls=ComplexEncoder) '[2.0, 1.0]' >>> ComplexEncoder().encode(2 + 1j) '[2.0, 1.0]' >>> list(ComplexEncoder().iterencode(2 + 1j)) ['[', '2.0', ', ', '1.0', ']']"
msgstr ""

msgid "Using json.tool from the shell to validate and pretty-print::"
msgstr ""

msgid "$ echo '{\"json\":\"obj\"}' | python -mjson.tool {     \"json\": \"obj\" } $ echo '{ 1.2:3.4}' | python -mjson.tool Expecting property name: line 1 column 2 (char 2)"
msgstr ""

msgid "The JSON produced by this module's default settings is a subset of YAML, so it may be used as a serializer for that as well."
msgstr ""

msgid "Basic Usage"
msgstr ""

msgid "Serialize *obj* as a JSON formatted stream to *fp* (a ``.write()``-supporting file-like object)."
msgstr ""

msgid "If *skipkeys* is ``True`` (default: ``False``), then dict keys that are not of a basic type (:class:`bytes`, :class:`str`, :class:`int`, :class:`float`, :class:`bool`, ``None``) will be skipped instead of raising a :exc:`TypeError`."
msgstr ""

msgid "The :mod:`json` module always produces :class:`str` objects, not :class:`bytes` objects. Therefore, ``fp.write()`` must support :class:`str` input."
msgstr ""

msgid "If *check_circular* is ``False`` (default: ``True``), then the circular reference check for container types will be skipped and a circular reference will result in an :exc:`OverflowError` (or worse)."
msgstr ""

msgid "If *allow_nan* is ``False`` (default: ``True``), then it will be a :exc:`ValueError` to serialize out of range :class:`float` values (``nan``, ``inf``, ``-inf``) in strict compliance of the JSON specification, instead of using the JavaScript equivalents (``NaN``, ``Infinity``, ``-Infinity``)."
msgstr ""

msgid "If *indent* is a non-negative integer, then JSON array elements and object members will be pretty-printed with that indent level.  An indent level of 0 will only insert newlines.  ``None`` (the default) selects the most compact representation."
msgstr ""

msgid "If *separators* is an ``(item_separator, dict_separator)`` tuple, then it will be used instead of the default ``(', ', ': ')`` separators.  ``(',', ':')`` is the most compact JSON representation."
msgstr ""

msgid "*default(obj)* is a function that should return a serializable version of *obj* or raise :exc:`TypeError`.  The default simply raises :exc:`TypeError`."
msgstr ""

msgid "To use a custom :class:`JSONEncoder` subclass (e.g. one that overrides the :meth:`default` method to serialize additional types), specify it with the *cls* kwarg."
msgstr ""

msgid "Serialize *obj* to a JSON formatted :class:`str`.  The arguments have the same meaning as in :func:`dump`."
msgstr ""

msgid "Deserialize *fp* (a ``.read()``-supporting file-like object containing a JSON document) to a Python object."
msgstr ""

msgid "*object_hook* is an optional function that will be called with the result of any object literal decoded (a :class:`dict`).  The return value of *object_hook* will be used instead of the :class:`dict`.  This feature can be used to implement custom decoders (e.g. JSON-RPC class hinting)."
msgstr ""

msgid "*object_pairs_hook* is an optional function that will be called with the result of any object literal decoded with an ordered list of pairs.  The return value of *object_pairs_hook* will be used instead of the :class:`dict`.  This feature can be used to implement custom decoders that rely on the order that the key and value pairs are decoded (for example, :func:`collections.OrderedDict` will remember the order of insertion). If *object_hook* is also defined, the *object_pairs_hook* takes priority."
msgstr ""

msgid "*parse_float*, if specified, will be called with the string of every JSON float to be decoded.  By default, this is equivalent to ``float(num_str)``. This can be used to use another datatype or parser for JSON floats (e.g. :class:`decimal.Decimal`)."
msgstr ""

msgid "*parse_int*, if specified, will be called with the string of every JSON int to be decoded.  By default, this is equivalent to ``int(num_str)``.  This can be used to use another datatype or parser for JSON integers (e.g. :class:`float`)."
msgstr ""

msgid "*parse_constant*, if specified, will be called with one of the following strings: ``'-Infinity'``, ``'Infinity'``, ``'NaN'``, ``'null'``, ``'true'``, ``'false'``.  This can be used to raise an exception if invalid JSON numbers are encountered."
msgstr ""

msgid "To use a custom :class:`JSONDecoder` subclass, specify it with the ``cls`` kwarg.  Additional keyword arguments will be passed to the constructor of the class."
msgstr ""

msgid "Deserialize *s* (a :class:`bytes` or :class:`str` instance containing a JSON document) to a Python object."
msgstr ""

msgid "If *s* is a :class:`bytes` instance and is encoded with an ASCII based encoding other than UTF-8 (e.g. latin-1), then an appropriate *encoding* name must be specified.  Encodings that are not ASCII based (such as UCS-2) are not allowed and should be decoded to :class:`str` first."
msgstr ""

msgid "The other arguments have the same meaning as in :func:`load`."
msgstr ""

msgid "Encoders and decoders"
msgstr ""

msgid "Simple JSON decoder."
msgstr ""

msgid "Performs the following translations in decoding by default:"
msgstr ""

msgid "JSON"
msgstr ""

msgid "Python"
msgstr ""

msgid "object"
msgstr ""

msgid "dict"
msgstr ""

msgid "array"
msgstr ""

msgid "list"
msgstr ""

msgid "string"
msgstr ""

msgid "str"
msgstr ""

msgid "number (int)"
msgstr ""

msgid "number (real)"
msgstr ""

msgid "true"
msgstr ""

msgid "True"
msgstr ""

msgid "false"
msgstr ""

msgid "False"
msgstr ""

msgid "null"
msgstr ""

msgid "None"
msgstr ""

msgid "It also understands ``NaN``, ``Infinity``, and ``-Infinity`` as their corresponding ``float`` values, which is outside the JSON spec."
msgstr ""

msgid "*object_hook*, if specified, will be called with the result of every JSON object decoded and its return value will be used in place of the given :class:`dict`.  This can be used to provide custom deserializations (e.g. to support JSON-RPC class hinting)."
msgstr ""

msgid "*object_pairs_hook*, if specified will be called with the result of every JSON object decoded with an ordered list of pairs.  The return value of *object_pairs_hook* will be used instead of the :class:`dict`.  This feature can be used to implement custom decoders that rely on the order that the key and value pairs are decoded (for example, :func:`collections.OrderedDict` will remember the order of insertion). If *object_hook* is also defined, the *object_pairs_hook* takes priority."
msgstr ""

msgid "Return the Python representation of *s* (a :class:`str` instance containing a JSON document)"
msgstr ""

msgid "Decode a JSON document from *s* (a :class:`str` beginning with a JSON document) and return a 2-tuple of the Python representation and the index in *s* where the document ended."
msgstr ""

msgid "This can be used to decode a JSON document from a string that may have extraneous data at the end."
msgstr ""

msgid "Extensible JSON encoder for Python data structures."
msgstr ""

msgid "Supports the following objects and types by default:"
msgstr ""

msgid "list, tuple"
msgstr ""

msgid "int, float"
msgstr ""

msgid "number"
msgstr ""

msgid "To extend this to recognize other objects, subclass and implement a :meth:`default` method with another method that returns a serializable object for ``o`` if possible, otherwise it should call the superclass implementation (to raise :exc:`TypeError`)."
msgstr ""

msgid "If *skipkeys* is ``False`` (the default), then it is a :exc:`TypeError` to attempt encoding of keys that are not str, int, float or None.  If *skipkeys* is ``True``, such items are simply skipped."
msgstr ""

msgid "If *ensure_ascii* is ``True`` (the default), the output is guaranteed to have all incoming non-ASCII characters escaped.  If *ensure_ascii* is ``False``, these characters will be output as-is."
msgstr ""

msgid "If *check_circular* is ``True`` (the default), then lists, dicts, and custom encoded objects will be checked for circular references during encoding to prevent an infinite recursion (which would cause an :exc:`OverflowError`). Otherwise, no such check takes place."
msgstr ""

msgid "If *allow_nan* is ``True`` (the default), then ``NaN``, ``Infinity``, and ``-Infinity`` will be encoded as such.  This behavior is not JSON specification compliant, but is consistent with most JavaScript based encoders and decoders.  Otherwise, it will be a :exc:`ValueError` to encode such floats."
msgstr ""

msgid "If *sort_keys* is ``True`` (the default), then the output of dictionaries will be sorted by key; this is useful for regression tests to ensure that JSON serializations can be compared on a day-to-day basis."
msgstr ""

msgid "If *indent* is a non-negative integer (it is ``None`` by default), then JSON array elements and object members will be pretty-printed with that indent level.  An indent level of 0 will only insert newlines.  ``None`` is the most compact representation."
msgstr ""

msgid "If specified, *separators* should be an ``(item_separator, key_separator)`` tuple.  The default is ``(', ', ': ')``.  To get the most compact JSON representation, you should specify ``(',', ':')`` to eliminate whitespace."
msgstr ""

msgid "If specified, *default* is a function that gets called for objects that can't otherwise be serialized.  It should return a JSON encodable version of the object or raise a :exc:`TypeError`."
msgstr ""

msgid "Implement this method in a subclass such that it returns a serializable object for *o*, or calls the base implementation (to raise a :exc:`TypeError`)."
msgstr ""

msgid "For example, to support arbitrary iterators, you could implement default like this::"
msgstr ""

msgid "def default(self, o):    try:        iterable = iter(o)    except TypeError:        pass    else:        return list(iterable)    return JSONEncoder.default(self, o)"
msgstr ""

msgid "Return a JSON string representation of a Python data structure, *o*.  For example::"
msgstr ""

msgid ">>> JSONEncoder().encode({\"foo\": [\"bar\", \"baz\"]}) '{\"foo\": [\"bar\", \"baz\"]}'"
msgstr ""

msgid "Encode the given object, *o*, and yield each string representation as available.  For example::"
msgstr ""

msgid "for chunk in JSONEncoder().iterencode(bigobject):     mysocket.write(chunk)"
msgstr ""

msgid ":mod:`keyword` --- Testing for Python keywords"
msgstr ""

msgid "This module allows a Python program to determine if a string is a keyword."
msgstr ""

msgid "Return true if *s* is a Python keyword."
msgstr ""

msgid "Sequence containing all the keywords defined for the interpreter.  If any keywords are defined to only be active when particular :mod:`__future__` statements are in effect, these will be included as well."
msgstr ""

msgid "Python Language Services"
msgstr ""

msgid "Python provides a number of modules to assist in working with the Python language.  These modules support tokenizing, parsing, syntax analysis, bytecode disassembly, and various other facilities."
msgstr ""

msgid "These modules include:"
msgstr ""

msgid ":mod:`linecache` --- Random access to text lines"
msgstr ""

msgid "The :mod:`linecache` module allows one to get any line from any file, while attempting to optimize internally, using a cache, the common case where many lines are read from a single file.  This is used by the :mod:`traceback` module to retrieve source lines for inclusion in  the formatted traceback."
msgstr ""

msgid "The :mod:`linecache` module defines the following functions:"
msgstr ""

msgid "Get line *lineno* from file named *filename*. This function will never throw an exception --- it will return ``''`` on errors (the terminating newline character will be included for lines that are found)."
msgstr ""

msgid "If a file named *filename* is not found, the function will look for it in the module search path, ``sys.path``, after first checking for a :pep:`302` ``__loader__`` in *module_globals*, in case the module was imported from a zipfile or other non-filesystem import source."
msgstr ""

msgid "Clear the cache.  Use this function if you no longer need lines from files previously read using :func:`getline`."
msgstr ""

msgid "Check the cache for validity.  Use this function if files in the cache  may have changed on disk, and you require the updated version.  If *filename* is omitted, it will check all the entries in the cache."
msgstr ""

msgid ">>> import linecache >>> linecache.getline('/etc/passwd', 4) 'sys:x:3:3:sys:/dev:/bin/sh\\n'"
msgstr ""

msgid ":mod:`locale` --- Internationalization services"
msgstr ""

msgid "The :mod:`locale` module opens access to the POSIX locale database and functionality. The POSIX locale mechanism allows programmers to deal with certain cultural issues in an application, without requiring the programmer to know all the specifics of each country where the software is executed."
msgstr ""

msgid "The :mod:`locale` module is implemented on top of the :mod:`_locale` module, which in turn uses an ANSI C locale implementation if available."
msgstr ""

msgid "The :mod:`locale` module defines the following exception and functions:"
msgstr ""

msgid "Exception raised when :func:`setlocale` fails."
msgstr ""

msgid "If *locale* is specified, it may be a string, a tuple of the form ``(language code, encoding)``, or ``None``. If it is a tuple, it is converted to a string using the locale aliasing engine.  If *locale* is given and not ``None``, :func:`setlocale` modifies the locale setting for the *category*.  The available categories are listed in the data description below.  The value is the name of a locale.  An empty string specifies the user's default settings. If the modification of the locale fails, the exception :exc:`Error` is raised.  If successful, the new locale setting is returned."
msgstr ""

msgid "If *locale* is omitted or ``None``, the current setting for *category* is returned."
msgstr ""

msgid ":func:`setlocale` is not thread safe on most systems. Applications typically start with a call of ::"
msgstr ""

msgid "import locale locale.setlocale(locale.LC_ALL, '')"
msgstr ""

msgid "This sets the locale for all categories to the user's default setting (typically specified in the :envvar:`LANG` environment variable).  If the locale is not changed thereafter, using multithreading should not cause problems."
msgstr ""

msgid "Returns the database of the local conventions as a dictionary. This dictionary has the following strings as keys:"
msgstr ""

msgid "Category"
msgstr ""

msgid ":const:`LC_NUMERIC`"
msgstr ""

msgid "``'decimal_point'``"
msgstr ""

msgid "Decimal point character."
msgstr ""

msgid "``'grouping'``"
msgstr ""

msgid "Sequence of numbers specifying which relative positions the ``'thousands_sep'`` is expected.  If the sequence is terminated with :const:`CHAR_MAX`, no further grouping is performed. If the sequence terminates with a ``0``,  the last group size is repeatedly used."
msgstr ""

msgid "``'thousands_sep'``"
msgstr ""

msgid "Character used between groups."
msgstr ""

msgid ":const:`LC_MONETARY`"
msgstr ""

msgid "``'int_curr_symbol'``"
msgstr ""

msgid "International currency symbol."
msgstr ""

msgid "``'currency_symbol'``"
msgstr ""

msgid "Local currency symbol."
msgstr ""

msgid "``'p_cs_precedes/n_cs_precedes'``"
msgstr ""

msgid "Whether the currency symbol precedes the value (for positive resp. negative values)."
msgstr ""

msgid "``'p_sep_by_space/n_sep_by_space'``"
msgstr ""

msgid "Whether the currency symbol is separated from the value  by a space (for positive resp. negative values)."
msgstr ""

msgid "``'mon_decimal_point'``"
msgstr ""

msgid "Decimal point used for monetary values."
msgstr ""

msgid "``'frac_digits'``"
msgstr ""

msgid "Number of fractional digits used in local formatting of monetary values."
msgstr ""

msgid "``'int_frac_digits'``"
msgstr ""

msgid "Number of fractional digits used in international formatting of monetary values."
msgstr ""

msgid "``'mon_thousands_sep'``"
msgstr ""

msgid "Group separator used for monetary values."
msgstr ""

msgid "``'mon_grouping'``"
msgstr ""

msgid "Equivalent to ``'grouping'``, used for monetary values."
msgstr ""

msgid "``'positive_sign'``"
msgstr ""

msgid "Symbol used to annotate a positive monetary value."
msgstr ""

msgid "``'negative_sign'``"
msgstr ""

msgid "Symbol used to annotate a negative monetary value."
msgstr ""

msgid "``'p_sign_posn/n_sign_posn'``"
msgstr ""

msgid "The position of the sign (for positive resp. negative values), see below."
msgstr ""

msgid "All numeric values can be set to :const:`CHAR_MAX` to indicate that there is no value specified in this locale."
msgstr ""

msgid "The possible values for ``'p_sign_posn'`` and ``'n_sign_posn'`` are given below."
msgstr ""

msgid "Explanation"
msgstr ""

msgid "``0``"
msgstr ""

msgid "Currency and value are surrounded by parentheses."
msgstr ""

msgid "``1``"
msgstr ""

msgid "The sign should precede the value and currency symbol."
msgstr ""

msgid "``2``"
msgstr ""

msgid "The sign should follow the value and currency symbol."
msgstr ""

msgid "``3``"
msgstr ""

msgid "The sign should immediately precede the value."
msgstr ""

msgid "``4``"
msgstr ""

msgid "The sign should immediately follow the value."
msgstr ""

msgid "``CHAR_MAX``"
msgstr ""

msgid "Nothing is specified in this locale."
msgstr ""

msgid "Return some locale-specific information as a string.  This function is not available on all systems, and the set of possible options might also vary across platforms.  The possible argument values are numbers, for which symbolic constants are available in the locale module."
msgstr ""

msgid "The :func:`nl_langinfo` function accepts one of the following keys.  Most descriptions are taken from the corresponding description in the GNU C library."
msgstr ""

msgid "Get a string with the name of the character encoding used in the selected locale."
msgstr ""

msgid "Get a string that can be used as a format string for :func:`strftime` to represent time and date in a locale-specific way."
msgstr ""

msgid "Get a string that can be used as a format string for :func:`strftime` to represent a date in a locale-specific way."
msgstr ""

msgid "Get a string that can be used as a format string for :func:`strftime` to represent a time in a locale-specific way."
msgstr ""

msgid "Get a format string for :func:`strftime` to represent time in the am/pm format."
msgstr ""

msgid "Get the name of the n-th day of the week."
msgstr ""

msgid "This follows the US convention of :const:`DAY_1` being Sunday, not the international convention (ISO 8601) that Monday is the first day of the week."
msgstr ""

msgid "Get the abbreviated name of the n-th day of the week."
msgstr ""

msgid "Get the name of the n-th month."
msgstr ""

msgid "Get the abbreviated name of the n-th month."
msgstr ""

msgid "Get the radix character (decimal dot, decimal comma, etc.)"
msgstr ""

msgid "Get the separator character for thousands (groups of three digits)."
msgstr ""

msgid "Get a regular expression that can be used with the regex function to recognize a positive response to a yes/no question."
msgstr ""

msgid "The expression is in the syntax suitable for the :cfunc:`regex` function from the C library, which might differ from the syntax used in :mod:`re`."
msgstr ""

msgid "Get a regular expression that can be used with the regex(3) function to recognize a negative response to a yes/no question."
msgstr ""

msgid "Get the currency symbol, preceded by \"-\" if the symbol should appear before the value, \"+\" if the symbol should appear after the value, or \".\" if the symbol should replace the radix character."
msgstr ""

msgid "Get a string that represents the era used in the current locale."
msgstr ""

msgid "Most locales do not define this value.  An example of a locale which does define this value is the Japanese one.  In Japan, the traditional representation of dates includes the name of the era corresponding to the then-emperor's reign."
msgstr ""

msgid "Normally it should not be necessary to use this value directly. Specifying the ``E`` modifier in their format strings causes the :func:`strftime` function to use this information.  The format of the returned string is not specified, and therefore you should not assume knowledge of it on different systems."
msgstr ""

msgid "Get the year in the relevant era of the locale."
msgstr ""

msgid "Get a format string for :func:`strftime` to represent dates and times in a locale-specific era-based way."
msgstr ""

msgid "Get a format string for :func:`strftime` to represent time in a locale-specific era-based way."
msgstr ""

msgid "Get a representation of up to 100 values used to represent the values 0 to 99."
msgstr ""

msgid "Tries to determine the default locale settings and returns them as a tuple of the form ``(language code, encoding)``."
msgstr ""

msgid "According to POSIX, a program which has not called ``setlocale(LC_ALL, '')`` runs using the portable ``'C'`` locale.  Calling ``setlocale(LC_ALL, '')`` lets it use the default locale as defined by the :envvar:`LANG` variable.  Since we do not want to interfere with the current locale setting we thus emulate the behavior in the way described above."
msgstr ""

msgid "To maintain compatibility with other platforms, not only the :envvar:`LANG` variable is tested, but a list of variables given as envvars parameter.  The first found to be defined will be used.  *envvars* defaults to the search path used in GNU gettext; it must always contain the variable name ``'LANG'``.  The GNU gettext search path contains ``'LC_ALL'``, ``'LC_CTYPE'``, ``'LANG'`` and ``'LANGUAGE'``, in that order."
msgstr ""

msgid "Except for the code ``'C'``, the language code corresponds to :rfc:`1766`. *language code* and *encoding* may be ``None`` if their values cannot be determined."
msgstr ""

msgid "Returns the current setting for the given locale category as sequence containing *language code*, *encoding*. *category* may be one of the :const:`LC_\\*` values except :const:`LC_ALL`.  It defaults to :const:`LC_CTYPE`."
msgstr ""

msgid "Return the encoding used for text data, according to user preferences.  User preferences are expressed differently on different systems, and might not be available programmatically on some systems, so this function only returns a guess."
msgstr ""

msgid "On some systems, it is necessary to invoke :func:`setlocale` to obtain the user preferences, so this function is not thread-safe. If invoking setlocale is not necessary or desired, *do_setlocale* should be set to ``False``."
msgstr ""

msgid "Returns a normalized locale code for the given locale name.  The returned locale code is formatted for use with :func:`setlocale`.  If normalization fails, the original name is returned unchanged."
msgstr ""

msgid "If the given encoding is not known, the function defaults to the default encoding for the locale code just like :func:`setlocale`."
msgstr ""

msgid "Sets the locale for *category* to the default setting."
msgstr ""

msgid "The default setting is determined by calling :func:`getdefaultlocale`. *category* defaults to :const:`LC_ALL`."
msgstr ""

msgid "Compares two strings according to the current :const:`LC_COLLATE` setting. As any other compare function, returns a negative, or a positive value, or ``0``, depending on whether *string1* collates before or after *string2* or is equal to it."
msgstr ""

msgid "Transforms a string to one that can be used in locale-aware comparisons.  For example, ``strxfrm(s1) < strxfrm(s2)`` is equivalent to ``strcoll(s1, s2) < 0``.  This function can be used when the same string is compared repeatedly, e.g. when collating a sequence of strings."
msgstr ""

msgid "Formats a number *val* according to the current :const:`LC_NUMERIC` setting. The format follows the conventions of the ``%`` operator.  For floating point values, the decimal point is modified if appropriate.  If *grouping* is true, also takes the grouping into account."
msgstr ""

msgid "If *monetary* is true, the conversion uses monetary thousands separator and grouping strings."
msgstr ""

msgid "Please note that this function will only work for exactly one %char specifier. For whole format strings, use :func:`format_string`."
msgstr ""

msgid "Processes formatting specifiers as in ``format % val``, but takes the current locale settings into account."
msgstr ""

msgid "Formats a number *val* according to the current :const:`LC_MONETARY` settings."
msgstr ""

msgid "The returned string includes the currency symbol if *symbol* is true, which is the default. If *grouping* is true (which is not the default), grouping is done with the value. If *international* is true (which is not the default), the international currency symbol is used."
msgstr ""

msgid "Note that this function will not work with the 'C' locale, so you have to set a locale via :func:`setlocale` first."
msgstr ""

msgid "Formats a floating point number using the same format as the built-in function ``str(float)``, but takes the decimal point into account."
msgstr ""

msgid "Converts a string to a floating point number, following the :const:`LC_NUMERIC` settings."
msgstr ""

msgid "Converts a string to an integer, following the :const:`LC_NUMERIC` conventions."
msgstr ""

msgid "Locale category for the character type functions.  Depending on the settings of this category, the functions of module :mod:`string` dealing with case change their behaviour."
msgstr ""

msgid "Locale category for sorting strings.  The functions :func:`strcoll` and :func:`strxfrm` of the :mod:`locale` module are affected."
msgstr ""

msgid "Locale category for the formatting of time.  The function :func:`time.strftime` follows these conventions."
msgstr ""

msgid "Locale category for formatting of monetary values.  The available options are available from the :func:`localeconv` function."
msgstr ""

msgid "Locale category for message display. Python currently does not support application specific locale-aware messages.  Messages displayed by the operating system, like those returned by :func:`os.strerror` might be affected by this category."
msgstr ""

msgid "Locale category for formatting numbers.  The functions :func:`.format`, :func:`atoi`, :func:`atof` and :func:`.str` of the :mod:`locale` module are affected by that category.  All other numeric formatting operations are not affected."
msgstr ""

msgid "Combination of all locale settings.  If this flag is used when the locale is changed, setting the locale for all categories is attempted. If that fails for any category, no category is changed at all.  When the locale is retrieved using this flag, a string indicating the setting for all categories is returned. This string can be later used to restore the settings."
msgstr ""

msgid "This is a symbolic constant used for different values returned by :func:`localeconv`."
msgstr ""

msgid ">>> import locale >>> loc = locale.getlocale() # get current locale # use German locale; name might vary with platform >>> locale.setlocale(locale.LC_ALL, 'de_DE') >>> locale.strcoll('f\\xe4n', 'foo') # compare a string containing an umlaut >>> locale.setlocale(locale.LC_ALL, '') # use user's preferred locale >>> locale.setlocale(locale.LC_ALL, 'C') # use default (C) locale >>> locale.setlocale(locale.LC_ALL, loc) # restore saved locale"
msgstr ""

msgid "Background, details, hints, tips and caveats"
msgstr ""

msgid "The C standard defines the locale as a program-wide property that may be relatively expensive to change.  On top of that, some implementation are broken in such a way that frequent locale changes may cause core dumps.  This makes the locale somewhat painful to use correctly."
msgstr ""

msgid "Initially, when a program is started, the locale is the ``C`` locale, no matter what the user's preferred locale is.  The program must explicitly say that it wants the user's preferred locale settings by calling ``setlocale(LC_ALL, '')``."
msgstr ""

msgid "It is generally a bad idea to call :func:`setlocale` in some library routine, since as a side effect it affects the entire program.  Saving and restoring it is almost as bad: it is expensive and affects other threads that happen to run before the settings have been restored."
msgstr ""

msgid "If, when coding a module for general use, you need a locale independent version of an operation that is affected by the locale (such as certain formats used with :func:`time.strftime`), you will have to find a way to do it without using the standard library routine.  Even better is convincing yourself that using locale settings is okay.  Only as a last resort should you document that your module is not compatible with non-\\ ``C`` locale settings."
msgstr ""

msgid "The only way to perform numeric operations according to the locale is to use the special functions defined by this module: :func:`atof`, :func:`atoi`, :func:`.format`, :func:`.str`."
msgstr ""

msgid "There is no way to perform case conversions and character classifications according to the locale.  For (Unicode) text strings these are done according to the character value only, while for byte strings, the conversions and classifications are done according to the ASCII value of the byte, and bytes whose high bit is set (i.e., non-ASCII bytes) are never converted or considered part of a character class such as letter or whitespace."
msgstr ""

msgid "For extension writers and programs that embed Python"
msgstr ""

msgid "Extension modules should never call :func:`setlocale`, except to find out what the current locale is.  But since the return value can only be used portably to restore it, that is not very useful (except perhaps to find out whether or not the locale is ``C``)."
msgstr ""

msgid "When Python code uses the :mod:`locale` module to change the locale, this also affects the embedding application.  If the embedding application doesn't want this to happen, it should remove the :mod:`_locale` extension module (which does all the work) from the table of built-in modules in the :file:`config.c` file, and make sure that the :mod:`_locale` module is not accessible as a shared library."
msgstr ""

msgid "Access to message catalogs"
msgstr ""

msgid "The locale module exposes the C library's gettext interface on systems that provide this interface.  It consists of the functions :func:`gettext`, :func:`dgettext`, :func:`dcgettext`, :func:`textdomain`, :func:`bindtextdomain`, and :func:`bind_textdomain_codeset`.  These are similar to the same functions in the :mod:`gettext` module, but use the C library's binary format for message catalogs, and the C library's search algorithms for locating message catalogs."
msgstr ""

msgid "Python applications should normally find no need to invoke these functions, and should use :mod:`gettext` instead.  A known exception to this rule are applications that link use additional C libraries which internally invoke :cfunc:`gettext` or :func:`dcgettext`.  For these applications, it may be necessary to bind the text domain, so that the libraries can properly locate their message catalogs."
msgstr ""

msgid ":mod:`logging` --- Logging facility for Python"
msgstr ""

msgid "This module defines functions and classes which implement a flexible error logging system for applications."
msgstr ""

msgid "Logging is performed by calling methods on instances of the :class:`Logger` class (hereafter called :dfn:`loggers`). Each instance has a name, and they are conceptually arranged in a namespace hierarchy using dots (periods) as separators. For example, a logger named \"scan\" is the parent of loggers \"scan.text\", \"scan.html\" and \"scan.pdf\". Logger names can be anything you want, and indicate the area of an application in which a logged message originates."
msgstr ""

msgid "Logged messages also have levels of importance associated with them. The default levels provided are :const:`DEBUG`, :const:`INFO`, :const:`WARNING`, :const:`ERROR` and :const:`CRITICAL`. As a convenience, you indicate the importance of a logged message by calling an appropriate method of :class:`Logger`. The methods are :meth:`debug`, :meth:`info`, :meth:`warning`, :meth:`error` and :meth:`critical`, which mirror the default levels. You are not constrained to use these levels: you can specify your own and use a more general :class:`Logger` method, :meth:`log`, which takes an explicit level argument."
msgstr ""

msgid "Logging tutorial"
msgstr ""

msgid "The key benefit of having the logging API provided by a standard library module is that all Python modules can participate in logging, so your application log can include messages from third-party modules."
msgstr ""

msgid "It is, of course, possible to log messages with different verbosity levels or to different destinations.  Support for writing log messages to files, HTTP GET/POST locations, email via SMTP, generic sockets, or OS-specific logging mechanisms are all supported by the standard module.  You can also create your own log destination class if you have special requirements not met by any of the built-in classes."
msgstr ""

msgid "Simple examples"
msgstr ""

msgid "Most applications are probably going to want to log to a file, so let's start with that case. Using the :func:`basicConfig` function, we can set up the default handler so that debug messages are written to a file (in the example, we assume that you have the appropriate permissions to create a file called *example.log* in the current directory)::"
msgstr ""

msgid "import logging LOG_FILENAME = 'example.log' logging.basicConfig(filename=LOG_FILENAME,level=logging.DEBUG)  logging.debug('This message should go to the log file')"
msgstr ""

msgid "And now if we open the file and look at what we have, we should find the log message::"
msgstr ""

msgid "DEBUG:root:This message should go to the log file"
msgstr ""

msgid "If you run the script repeatedly, the additional log messages are appended to the file.  To create a new file each time, you can pass a *filemode* argument to :func:`basicConfig` with a value of ``'w'``.  Rather than managing the file size yourself, though, it is simpler to use a :class:`RotatingFileHandler`::"
msgstr ""

msgid "import glob import logging import logging.handlers  LOG_FILENAME = 'logging_rotatingfile_example.out'  # Set up a specific logger with our desired output level my_logger = logging.getLogger('MyLogger') my_logger.setLevel(logging.DEBUG)  # Add the log message handler to the logger handler = logging.handlers.RotatingFileHandler(               LOG_FILENAME, maxBytes=20, backupCount=5)  my_logger.addHandler(handler)  # Log some messages for i in range(20):     my_logger.debug('i = %d' % i)  # See what files are created logfiles = glob.glob('%s*' % LOG_FILENAME)  for filename in logfiles:     print(filename)"
msgstr ""

msgid "The result should be 6 separate files, each with part of the log history for the application::"
msgstr ""

msgid "logging_rotatingfile_example.out logging_rotatingfile_example.out.1 logging_rotatingfile_example.out.2 logging_rotatingfile_example.out.3 logging_rotatingfile_example.out.4 logging_rotatingfile_example.out.5"
msgstr ""

msgid "The most current file is always :file:`logging_rotatingfile_example.out`, and each time it reaches the size limit it is renamed with the suffix ``.1``. Each of the existing backup files is renamed to increment the suffix (``.1`` becomes ``.2``, etc.)  and the ``.6`` file is erased."
msgstr ""

msgid "Obviously this example sets the log length much much too small as an extreme example.  You would want to set *maxBytes* to an appropriate value."
msgstr ""

msgid "Another useful feature of the logging API is the ability to produce different messages at different log levels.  This allows you to instrument your code with debug messages, for example, but turning the log level down so that those debug messages are not written for your production system.  The default levels are ``NOTSET``, ``DEBUG``, ``INFO``, ``WARNING``, ``ERROR`` and ``CRITICAL``."
msgstr ""

msgid "The logger, handler, and log message call each specify a level.  The log message is only emitted if the handler and logger are configured to emit messages of that level or lower.  For example, if a message is ``CRITICAL``, and the logger is set to ``ERROR``, the message is emitted.  If a message is a ``WARNING``, and the logger is set to produce only ``ERROR``\\s, the message is not emitted::"
msgstr ""

msgid "import logging import sys  LEVELS = {'debug': logging.DEBUG,           'info': logging.INFO,           'warning': logging.WARNING,           'error': logging.ERROR,           'critical': logging.CRITICAL}  if len(sys.argv) > 1:     level_name = sys.argv[1]     level = LEVELS.get(level_name, logging.NOTSET)     logging.basicConfig(level=level)  logging.debug('This is a debug message') logging.info('This is an info message') logging.warning('This is a warning message') logging.error('This is an error message') logging.critical('This is a critical error message')"
msgstr ""

msgid "Run the script with an argument like 'debug' or 'warning' to see which messages show up at different levels::"
msgstr ""

msgid "$ python logging_level_example.py debug DEBUG:root:This is a debug message INFO:root:This is an info message WARNING:root:This is a warning message ERROR:root:This is an error message CRITICAL:root:This is a critical error message  $ python logging_level_example.py info INFO:root:This is an info message WARNING:root:This is a warning message ERROR:root:This is an error message CRITICAL:root:This is a critical error message"
msgstr ""

msgid "You will notice that these log messages all have ``root`` embedded in them.  The logging module supports a hierarchy of loggers with different names.  An easy way to tell where a specific log message comes from is to use a separate logger object for each of your modules.  Each new logger \"inherits\" the configuration of its parent, and log messages sent to a logger include the name of that logger.  Optionally, each logger can be configured differently, so that messages from different modules are handled in different ways.  Let's look at a simple example of how to log from different modules so it is easy to trace the source of the message::"
msgstr ""

msgid "import logging  logging.basicConfig(level=logging.WARNING)  logger1 = logging.getLogger('package1.module1') logger2 = logging.getLogger('package2.module2')  logger1.warning('This message comes from one module') logger2.warning('And this message comes from another module')"
msgstr ""

msgid "And the output::"
msgstr ""

msgid "$ python logging_modules_example.py WARNING:package1.module1:This message comes from one module WARNING:package2.module2:And this message comes from another module"
msgstr ""

msgid "There are many more options for configuring logging, including different log message formatting options, having messages delivered to multiple destinations, and changing the configuration of a long-running application on the fly using a socket interface.  All of these options are covered in depth in the library module documentation."
msgstr ""

msgid "Loggers"
msgstr ""

msgid "The logging library takes a modular approach and offers the several categories of components: loggers, handlers, filters, and formatters.  Loggers expose the interface that application code directly uses.  Handlers send the log records to the appropriate destination. Filters provide a finer grained facility for determining which log records to send on to a handler.  Formatters specify the layout of the resultant log record."
msgstr ""

msgid ":class:`Logger` objects have a threefold job.  First, they expose several methods to application code so that applications can log messages at runtime. Second, logger objects determine which log messages to act upon based upon severity (the default filtering facility) or filter objects.  Third, logger objects pass along relevant log messages to all interested log handlers."
msgstr ""

msgid "The most widely used methods on logger objects fall into two categories: configuration and message sending."
msgstr ""

msgid ":meth:`Logger.setLevel` specifies the lowest-severity log message a logger will handle, where debug is the lowest built-in severity level and critical is the highest built-in severity.  For example, if the severity level is info, the logger will handle only info, warning, error, and critical messages and will ignore debug messages."
msgstr ""

msgid ":meth:`Logger.addFilter` and :meth:`Logger.removeFilter` add and remove filter objects from the logger object.  This tutorial does not address filters."
msgstr ""

msgid "With the logger object configured, the following methods create log messages:"
msgstr ""

msgid ":meth:`Logger.debug`, :meth:`Logger.info`, :meth:`Logger.warning`, :meth:`Logger.error`, and :meth:`Logger.critical` all create log records with a message and a level that corresponds to their respective method names. The message is actually a format string, which may contain the standard string substitution syntax of :const:`%s`, :const:`%d`, :const:`%f`, and so on.  The rest of their arguments is a list of objects that correspond with the substitution fields in the message.  With regard to :const:`**kwargs`, the logging methods care only about a keyword of :const:`exc_info` and use it to determine whether to log exception information."
msgstr ""

msgid ":meth:`Logger.exception` creates a log message similar to :meth:`Logger.error`.  The difference is that :meth:`Logger.exception` dumps a stack trace along with it.  Call this method only from an exception handler."
msgstr ""

msgid ":meth:`Logger.log` takes a log level as an explicit argument.  This is a little more verbose for logging messages than using the log level convenience methods listed above, but this is how to log at custom log levels."
msgstr ""

msgid ":func:`getLogger` returns a reference to a logger instance with the specified if it is provided, or ``root`` if not.  The names are period-separated hierarchical structures.  Multiple calls to :func:`getLogger` with the same name will return a reference to the same logger object.  Loggers that are further down in the hierarchical list are children of loggers higher up in the list. For example, given a logger with a name of ``foo``, loggers with names of ``foo.bar``, ``foo.bar.baz``, and ``foo.bam`` are all descendants of ``foo``. Child loggers propagate messages up to the handlers associated with their ancestor loggers.  Because of this, it is unnecessary to define and configure handlers for all the loggers an application uses. It is sufficient to configure handlers for a top-level logger and create child loggers as needed."
msgstr ""

msgid "Handlers"
msgstr ""

msgid ":class:`Handler` objects are responsible for dispatching the appropriate log messages (based on the log messages' severity) to the handler's specified destination.  Logger objects can add zero or more handler objects to themselves with an :func:`addHandler` method.  As an example scenario, an application may want to send all log messages to a log file, all log messages of error or higher to stdout, and all messages of critical to an email address.  This scenario requires three individual handlers where each handler is responsible for sending messages of a specific severity to a specific location."
msgstr ""

msgid "The standard library includes quite a few handler types; this tutorial uses only :class:`StreamHandler` and :class:`FileHandler` in its examples."
msgstr ""

msgid "There are very few methods in a handler for application developers to concern themselves with.  The only handler methods that seem relevant for application developers who are using the built-in handler objects (that is, not creating custom handlers) are the following configuration methods:"
msgstr ""

msgid "The :meth:`Handler.setLevel` method, just as in logger objects, specifies the lowest severity that will be dispatched to the appropriate destination.  Why are there two :func:`setLevel` methods?  The level set in the logger determines which severity of messages it will pass to its handlers.  The level set in each handler determines which messages that handler will send on."
msgstr ""

msgid ":func:`setFormatter` selects a Formatter object for this handler to use."
msgstr ""

msgid ":func:`addFilter` and :func:`removeFilter` respectively configure and deconfigure filter objects on handlers."
msgstr ""

msgid "Application code should not directly instantiate and use instances of :class:`Handler`.  Instead, the :class:`Handler` class is a base class that defines the interface that all handlers should have and establishes some default behavior that child classes can use (or override)."
msgstr ""

msgid "Formatters"
msgstr ""

msgid "Formatter objects configure the final order, structure, and contents of the log message.  Unlike the base :class:`logging.Handler` class, application code may instantiate formatter classes, although you could likely subclass the formatter if your application needs special behavior.  The constructor takes two optional arguments: a message format string and a date format string.  If there is no message format string, the default is to use the raw message.  If there is no date format string, the default date format is::"
msgstr ""

msgid "%Y-%m-%d %H:%M:%S"
msgstr ""

msgid "with the milliseconds tacked on at the end."
msgstr ""

msgid "The message format string uses ``%(<dictionary key>)s`` styled string substitution; the possible keys are documented in :ref:`formatter-objects`."
msgstr ""

msgid "The following message format string will log the time in a human-readable format, the severity of the message, and the contents of the message, in that order::"
msgstr ""

msgid "\"%(asctime)s - %(levelname)s - %(message)s\""
msgstr ""

msgid "Configuring Logging"
msgstr ""

msgid "Programmers can configure logging in three ways:"
msgstr ""

msgid "Creating loggers, handlers, and formatters explicitly using Python code that calls the configuration methods listed above."
msgstr ""

msgid "Creating a logging config file and reading it using the :func:`fileConfig` function."
msgstr ""

msgid "Creating a dictionary of configuration information and passing it to the :func:`dictConfig` function."
msgstr ""

msgid "The following example configures a very simple logger, a console handler, and a simple formatter using Python code::"
msgstr ""

msgid "import logging  # create logger logger = logging.getLogger(\"simple_example\") logger.setLevel(logging.DEBUG)  # create console handler and set level to debug ch = logging.StreamHandler() ch.setLevel(logging.DEBUG)  # create formatter formatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")  # add formatter to ch ch.setFormatter(formatter)  # add ch to logger logger.addHandler(ch)  # \"application\" code logger.debug(\"debug message\") logger.info(\"info message\") logger.warn(\"warn message\") logger.error(\"error message\") logger.critical(\"critical message\")"
msgstr ""

msgid "Running this module from the command line produces the following output::"
msgstr ""

msgid "$ python simple_logging_module.py 2005-03-19 15:10:26,618 - simple_example - DEBUG - debug message 2005-03-19 15:10:26,620 - simple_example - INFO - info message 2005-03-19 15:10:26,695 - simple_example - WARNING - warn message 2005-03-19 15:10:26,697 - simple_example - ERROR - error message 2005-03-19 15:10:26,773 - simple_example - CRITICAL - critical message"
msgstr ""

msgid "The following Python module creates a logger, handler, and formatter nearly identical to those in the example listed above, with the only difference being the names of the objects::"
msgstr ""

msgid "import logging import logging.config  logging.config.fileConfig(\"logging.conf\")  # create logger logger = logging.getLogger(\"simpleExample\")  # \"application\" code logger.debug(\"debug message\") logger.info(\"info message\") logger.warn(\"warn message\") logger.error(\"error message\") logger.critical(\"critical message\")"
msgstr ""

msgid "Here is the logging.conf file::"
msgstr ""

msgid "[loggers] keys=root,simpleExample  [handlers] keys=consoleHandler  [formatters] keys=simpleFormatter  [logger_root] level=DEBUG handlers=consoleHandler  [logger_simpleExample] level=DEBUG handlers=consoleHandler qualname=simpleExample propagate=0  [handler_consoleHandler] class=StreamHandler level=DEBUG formatter=simpleFormatter args=(sys.stdout,)  [formatter_simpleFormatter] format=%(asctime)s - %(name)s - %(levelname)s - %(message)s datefmt="
msgstr ""

msgid "The output is nearly identical to that of the non-config-file-based example::"
msgstr ""

msgid "$ python simple_logging_config.py 2005-03-19 15:38:55,977 - simpleExample - DEBUG - debug message 2005-03-19 15:38:55,979 - simpleExample - INFO - info message 2005-03-19 15:38:56,054 - simpleExample - WARNING - warn message 2005-03-19 15:38:56,055 - simpleExample - ERROR - error message 2005-03-19 15:38:56,130 - simpleExample - CRITICAL - critical message"
msgstr ""

msgid "You can see that the config file approach has a few advantages over the Python code approach, mainly separation of configuration and code and the ability of noncoders to easily modify the logging properties."
msgstr ""

msgid "Note that the class names referenced in config files need to be either relative to the logging module, or absolute values which can be resolved using normal import mechanisms. Thus, you could use either `handlers.WatchedFileHandler` (relative to the logging module) or `mypackage.mymodule.MyHandler` (for a class defined in package `mypackage` and module `mymodule`, where `mypackage` is available on the Python import path)."
msgstr ""

msgid "In Python 3.2, a new means of configuring logging has been introduced, using dictionaries to hold configuration information. This provides a superset of the functionality of the config-file-based approach outlined above, and is the recommended configuration method for new applications and deployments. Because a Python dictionary is used to hold configuration information, and since you can populate that dictionary using different means, you have more options for configuration. For example, you can use a configuration file in JSON format, or, if you have access to YAML processing functionality, a file in YAML format, to populate the configuration dictionary. Or, of course, you can construct the dictionary in Python code, receive it in pickled form over a socket, or use whatever approach makes sense for your application."
msgstr ""

msgid "Here's an example of the same configuration as above, in YAML format for the new dictionary-based approach::"
msgstr ""

msgid "version: 1 formatters:   simple:     format: format=%(asctime)s - %(name)s - %(levelname)s - %(message)s handlers:   console:     class: logging.StreamHandler     level: DEBUG     formatter: simple     stream: ext://sys.stdout loggers:   simpleExample:     level: DEBUG     handlers: [console]     propagate: no root:     level: DEBUG     handlers: [console]"
msgstr ""

msgid "For more information about logging using a dictionary, see :ref:`logging-config-api`."
msgstr ""

msgid "Configuring Logging for a Library"
msgstr ""

msgid "When developing a library which uses logging, some consideration needs to be given to its configuration. If the using application does not use logging, and library code makes logging calls, then a one-off message \"No handlers could be found for logger X.Y.Z\" is printed to the console. This message is intended to catch mistakes in logging configuration, but will confuse an application developer who is not aware of logging by the library."
msgstr ""

msgid "In addition to documenting how a library uses logging, a good way to configure library logging so that it does not cause a spurious message is to add a handler which does nothing. This avoids the message being printed, since a handler will be found: it just doesn't produce any output. If the library user configures logging for application use, presumably that configuration will add some handlers, and if levels are suitably configured then logging calls made in library code will send output to those handlers, as normal."
msgstr ""

msgid "A do-nothing handler can be simply defined as follows::"
msgstr ""

msgid "import logging  class NullHandler(logging.Handler):     def emit(self, record):         pass"
msgstr ""

msgid "An instance of this handler should be added to the top-level logger of the logging namespace used by the library. If all logging by a library *foo* is done using loggers with names matching \"foo.x.y\", then the code::"
msgstr ""

msgid "import logging  h = NullHandler() logging.getLogger(\"foo\").addHandler(h)"
msgstr ""

msgid "should have the desired effect. If an organisation produces a number of libraries, then the logger name specified can be \"orgname.foo\" rather than just \"foo\"."
msgstr ""

msgid "The :class:`NullHandler` class was not present in previous versions, but is now included, so that it need not be defined in library code."
msgstr ""

msgid "Logging Levels"
msgstr ""

msgid "The numeric values of logging levels are given in the following table. These are primarily of interest if you want to define your own levels, and need them to have specific values relative to the predefined levels. If you define a level with the same numeric value, it overwrites the predefined value; the predefined name is lost."
msgstr ""

msgid "Level"
msgstr ""

msgid "Numeric value"
msgstr ""

msgid "``CRITICAL``"
msgstr ""

msgid "50"
msgstr ""

msgid "``ERROR``"
msgstr ""

msgid "40"
msgstr ""

msgid "``WARNING``"
msgstr ""

msgid "30"
msgstr ""

msgid "``INFO``"
msgstr ""

msgid "20"
msgstr ""

msgid "``DEBUG``"
msgstr ""

msgid "10"
msgstr ""

msgid "``NOTSET``"
msgstr ""

msgid "Levels can also be associated with loggers, being set either by the developer or through loading a saved logging configuration. When a logging method is called on a logger, the logger compares its own level with the level associated with the method call. If the logger's level is higher than the method call's, no logging message is actually generated. This is the basic mechanism controlling the verbosity of logging output."
msgstr ""

msgid "Logging messages are encoded as instances of the :class:`LogRecord` class. When a logger decides to actually log an event, a :class:`LogRecord` instance is created from the logging message."
msgstr ""

msgid "Logging messages are subjected to a dispatch mechanism through the use of :dfn:`handlers`, which are instances of subclasses of the :class:`Handler` class. Handlers are responsible for ensuring that a logged message (in the form of a :class:`LogRecord`) ends up in a particular location (or set of locations) which is useful for the target audience for that message (such as end users, support desk staff, system administrators, developers). Handlers are passed :class:`LogRecord` instances intended for particular destinations. Each logger can have zero, one or more handlers associated with it (via the :meth:`addHandler` method of :class:`Logger`). In addition to any handlers directly associated with a logger, *all handlers associated with all ancestors of the logger* are called to dispatch the message (unless the *propagate* flag for a logger is set to a false value, at which point the passing to ancestor handlers stops)."
msgstr ""

msgid "Just as for loggers, handlers can have levels associated with them. A handler's level acts as a filter in the same way as a logger's level does. If a handler decides to actually dispatch an event, the :meth:`emit` method is used to send the message to its destination. Most user-defined subclasses of :class:`Handler` will need to override this :meth:`emit`."
msgstr ""

msgid "Useful Handlers"
msgstr ""

msgid "In addition to the base :class:`Handler` class, many useful subclasses are provided:"
msgstr ""

msgid ":class:`StreamHandler` instances send error messages to streams (file-like objects)."
msgstr ""

msgid ":class:`FileHandler` instances send error messages to disk files."
msgstr ""

msgid ":class:`BaseRotatingHandler` is the base class for handlers that rotate log files at a certain point. It is not meant to be  instantiated directly. Instead, use :class:`RotatingFileHandler` or :class:`TimedRotatingFileHandler`."
msgstr ""

msgid ":class:`RotatingFileHandler` instances send error messages to disk files, with support for maximum log file sizes and log file rotation."
msgstr ""

msgid ":class:`TimedRotatingFileHandler` instances send error messages to disk files, rotating the log file at certain timed intervals."
msgstr ""

msgid ":class:`SocketHandler` instances send error messages to TCP/IP sockets."
msgstr ""

msgid ":class:`DatagramHandler` instances send error messages to UDP sockets."
msgstr ""

msgid ":class:`SMTPHandler` instances send error messages to a designated email address."
msgstr ""

msgid ":class:`SysLogHandler` instances send error messages to a Unix syslog daemon, possibly on a remote machine."
msgstr ""

msgid ":class:`NTEventLogHandler` instances send error messages to a Windows NT/2000/XP event log."
msgstr ""

msgid ":class:`MemoryHandler` instances send error messages to a buffer in memory, which is flushed whenever specific criteria are met."
msgstr ""

msgid ":class:`HTTPHandler` instances send error messages to an HTTP server using either ``GET`` or ``POST`` semantics."
msgstr ""

msgid ":class:`WatchedFileHandler` instances watch the file they are logging to. If the file changes, it is closed and reopened using the file name. This handler is only useful on Unix-like systems; Windows does not support the underlying mechanism used."
msgstr ""

msgid ":class:`NullHandler` instances do nothing with error messages. They are used by library developers who want to use logging, but want to avoid the \"No handlers could be found for logger XXX\" message which can be displayed if the library user has not configured logging. See :ref:`library-config` for more information."
msgstr ""

msgid "The :class:`NullHandler` class was not present in previous versions."
msgstr ""

msgid "The :class:`NullHandler`, :class:`StreamHandler` and :class:`FileHandler` classes are defined in the core logging package. The other handlers are defined in a sub- module, :mod:`logging.handlers`. (There is also another sub-module, :mod:`logging.config`, for configuration functionality.)"
msgstr ""

msgid "Logged messages are formatted for presentation through instances of the :class:`Formatter` class. They are initialized with a format string suitable for use with the % operator and a dictionary."
msgstr ""

msgid "For formatting multiple messages in a batch, instances of :class:`BufferingFormatter` can be used. In addition to the format string (which is applied to each message in the batch), there is provision for header and trailer format strings."
msgstr ""

msgid "When filtering based on logger level and/or handler level is not enough, instances of :class:`Filter` can be added to both :class:`Logger` and :class:`Handler` instances (through their :meth:`addFilter` method). Before deciding to process a message further, both loggers and handlers consult all their filters for permission. If any filter returns a false value, the message is not processed further."
msgstr ""

msgid "The basic :class:`Filter` functionality allows filtering by specific logger name. If this feature is used, messages sent to the named logger and its children are allowed through the filter, and all others dropped."
msgstr ""

msgid "Module-Level Functions"
msgstr ""

msgid "In addition to the classes described above, there are a number of module- level functions."
msgstr ""

msgid "Return a logger with the specified name or, if name is ``None``, return a logger which is the root logger of the hierarchy. If specified, the name is typically a dot-separated hierarchical name like *\"a\"*, *\"a.b\"* or *\"a.b.c.d\"*. Choice of these names is entirely up to the developer who is using logging."
msgstr ""

msgid "All calls to this function with a given name return the same logger instance. This means that logger instances never need to be passed between different parts of an application."
msgstr ""

msgid "Return either the standard :class:`Logger` class, or the last class passed to :func:`setLoggerClass`. This function may be called from within a new class definition, to ensure that installing a customised :class:`Logger` class will not undo customisations already applied by other code. For example::"
msgstr ""

msgid "class MyLogger(logging.getLoggerClass()):     # ... override behaviour here"
msgstr ""

msgid "Logs a message with level :const:`DEBUG` on the root logger. The *msg* is the message format string, and the *args* are the arguments which are merged into *msg* using the string formatting operator. (Note that this means that you can use keywords in the format string, together with a single dictionary argument.)"
msgstr ""

msgid "There are two keyword arguments in *kwargs* which are inspected: *exc_info* which, if it does not evaluate as false, causes exception information to be added to the logging message. If an exception tuple (in the format returned by :func:`sys.exc_info`) is provided, it is used; otherwise, :func:`sys.exc_info` is called to get the exception information."
msgstr ""

msgid "The other optional keyword argument is *extra* which can be used to pass a dictionary which is used to populate the __dict__ of the LogRecord created for the logging event with user-defined attributes. These custom attributes can then be used as you like. For example, they could be incorporated into logged messages. For example::"
msgstr ""

msgid "FORMAT = \"%(asctime)-15s %(clientip)s %(user)-8s %(message)s\" logging.basicConfig(format=FORMAT) d = {'clientip': '192.168.0.1', 'user': 'fbloggs'} logging.warning(\"Protocol problem: %s\", \"connection reset\", extra=d)"
msgstr ""

msgid "would print something like ::"
msgstr ""

msgid "2006-02-08 22:20:02,165 192.168.0.1 fbloggs  Protocol problem: connection reset"
msgstr ""

msgid "The keys in the dictionary passed in *extra* should not clash with the keys used by the logging system. (See the :class:`Formatter` documentation for more information on which keys are used by the logging system.)"
msgstr ""

msgid "If you choose to use these attributes in logged messages, you need to exercise some care. In the above example, for instance, the :class:`Formatter` has been set up with a format string which expects 'clientip' and 'user' in the attribute dictionary of the LogRecord. If these are missing, the message will not be logged because a string formatting exception will occur. So in this case, you always need to pass the *extra* dictionary with these keys."
msgstr ""

msgid "While this might be annoying, this feature is intended for use in specialized circumstances, such as multi-threaded servers where the same code executes in many contexts, and interesting conditions which arise are dependent on this context (such as remote client IP address and authenticated user name, in the above example). In such circumstances, it is likely that specialized :class:`Formatter`\\ s would be used with particular :class:`Handler`\\ s."
msgstr ""

msgid "Logs a message with level :const:`INFO` on the root logger. The arguments are interpreted as for :func:`debug`."
msgstr ""

msgid "Logs a message with level :const:`WARNING` on the root logger. The arguments are interpreted as for :func:`debug`."
msgstr ""

msgid "Logs a message with level :const:`ERROR` on the root logger. The arguments are interpreted as for :func:`debug`."
msgstr ""

msgid "Logs a message with level :const:`CRITICAL` on the root logger. The arguments are interpreted as for :func:`debug`."
msgstr ""

msgid "Logs a message with level :const:`ERROR` on the root logger. The arguments are interpreted as for :func:`debug`. Exception info is added to the logging message. This function should only be called from an exception handler."
msgstr ""

msgid "Logs a message with level *level* on the root logger. The other arguments are interpreted as for :func:`debug`."
msgstr ""

msgid "Provides an overriding level *lvl* for all loggers which takes precedence over the logger's own level. When the need arises to temporarily throttle logging output down across the whole application, this function can be useful. Its effect is to disable all logging calls of severity *lvl* and below, so that if you call it with a value of INFO, then all INFO and DEBUG events would be discarded, whereas those of severity WARNING and above would be processed according to the logger's effective level."
msgstr ""

msgid "Associates level *lvl* with text *levelName* in an internal dictionary, which is used to map numeric levels to a textual representation, for example when a :class:`Formatter` formats a message. This function can also be used to define your own levels. The only constraints are that all levels used must be registered using this function, levels should be positive integers and they should increase in increasing order of severity."
msgstr ""

msgid "Returns the textual representation of logging level *lvl*. If the level is one of the predefined levels :const:`CRITICAL`, :const:`ERROR`, :const:`WARNING`, :const:`INFO` or :const:`DEBUG` then you get the corresponding string. If you have associated levels with names using :func:`addLevelName` then the name you have associated with *lvl* is returned. If a numeric value corresponding to one of the defined levels is passed in, the corresponding string representation is returned. Otherwise, the string \"Level %s\" % lvl is returned."
msgstr ""

msgid "Creates and returns a new :class:`LogRecord` instance whose attributes are defined by *attrdict*. This function is useful for taking a pickled :class:`LogRecord` attribute dictionary, sent over a socket, and reconstituting it as a :class:`LogRecord` instance at the receiving end."
msgstr ""

msgid "Does basic configuration for the logging system by creating a :class:`StreamHandler` with a default :class:`Formatter` and adding it to the root logger. The functions :func:`debug`, :func:`info`, :func:`warning`, :func:`error` and :func:`critical` will call :func:`basicConfig` automatically if no handlers are defined for the root logger."
msgstr ""

msgid "This function does nothing if the root logger already has handlers configured for it."
msgstr ""

msgid "The following keyword arguments are supported."
msgstr ""

msgid "Format"
msgstr ""

msgid "``filename``"
msgstr ""

msgid "Specifies that a FileHandler be created, using the specified filename, rather than a StreamHandler."
msgstr ""

msgid "``filemode``"
msgstr ""

msgid "Specifies the mode to open the file, if filename is specified (if filemode is unspecified, it defaults to 'a')."
msgstr ""

msgid "``format``"
msgstr ""

msgid "Use the specified format string for the handler."
msgstr ""

msgid "``datefmt``"
msgstr ""

msgid "Use the specified date/time format."
msgstr ""

msgid "``level``"
msgstr ""

msgid "Set the root logger level to the specified level."
msgstr ""

msgid "``stream``"
msgstr ""

msgid "Use the specified stream to initialize the StreamHandler. Note that this argument is incompatible with 'filename' - if both are present, 'stream' is ignored."
msgstr ""

msgid "Informs the logging system to perform an orderly shutdown by flushing and closing all handlers. This should be called at application exit and no further use of the logging system should be made after this call."
msgstr ""

msgid "Tells the logging system to use the class *klass* when instantiating a logger. The class should define :meth:`__init__` such that only a name argument is required, and the :meth:`__init__` should call :meth:`Logger.__init__`. This function is typically called before any loggers are instantiated by applications which need to use custom logger behavior."
msgstr ""

msgid "The proposal which described this feature for inclusion in the Python standard library."
msgstr ""

msgid "This is the original source for the :mod:`logging` package.  The version of the package available from this site is suitable for use with Python 1.5.2, 2.1.x and 2.2.x, which do not include the :mod:`logging` package in the standard library."
msgstr ""

msgid "Logger Objects"
msgstr ""

msgid "Loggers have the following attributes and methods. Note that Loggers are never instantiated directly, but always through the module-level function ``logging.getLogger(name)``."
msgstr ""

msgid "If this evaluates to false, logging messages are not passed by this logger or by its child loggers to the handlers of higher level (ancestor) loggers. The constructor sets this attribute to 1."
msgstr ""

msgid "Sets the threshold for this logger to *lvl*. Logging messages which are less severe than *lvl* will be ignored. When a logger is created, the level is set to :const:`NOTSET` (which causes all messages to be processed when the logger is the root logger, or delegation to the parent when the logger is a non-root logger). Note that the root logger is created with level :const:`WARNING`."
msgstr ""

msgid "The term \"delegation to the parent\" means that if a logger has a level of NOTSET, its chain of ancestor loggers is traversed until either an ancestor with a level other than NOTSET is found, or the root is reached."
msgstr ""

msgid "If an ancestor is found with a level other than NOTSET, then that ancestor's level is treated as the effective level of the logger where the ancestor search began, and is used to determine how a logging event is handled."
msgstr ""

msgid "If the root is reached, and it has a level of NOTSET, then all messages will be processed. Otherwise, the root's level will be used as the effective level."
msgstr ""

msgid "Indicates if a message of severity *lvl* would be processed by this logger. This method checks first the module-level level set by ``logging.disable(lvl)`` and then the logger's effective level as determined by :meth:`getEffectiveLevel`."
msgstr ""

msgid "Indicates the effective level for this logger. If a value other than :const:`NOTSET` has been set using :meth:`setLevel`, it is returned. Otherwise, the hierarchy is traversed towards the root until a value other than :const:`NOTSET` is found, and that value is returned."
msgstr ""

msgid "Returns a logger which is a descendant to this logger, as determined by the suffix. Thus, ``logging.getLogger('abc').getChild('def.ghi')`` would return the same logger as would be returned by ``logging.getLogger('abc.def.ghi')``. This is a convenience method, useful when the parent logger is named using e.g. ``__name__`` rather than a literal string."
msgstr ""

msgid "Logs a message with level :const:`DEBUG` on this logger. The *msg* is the message format string, and the *args* are the arguments which are merged into *msg* using the string formatting operator. (Note that this means that you can use keywords in the format string, together with a single dictionary argument.)"
msgstr ""

msgid "FORMAT = \"%(asctime)-15s %(clientip)s %(user)-8s %(message)s\" logging.basicConfig(format=FORMAT) d = { 'clientip' : '192.168.0.1', 'user' : 'fbloggs' } logger = logging.getLogger(\"tcpserver\") logger.warning(\"Protocol problem: %s\", \"connection reset\", extra=d)"
msgstr ""

msgid "would print something like  ::"
msgstr ""

msgid "Logs a message with level :const:`INFO` on this logger. The arguments are interpreted as for :meth:`debug`."
msgstr ""

msgid "Logs a message with level :const:`WARNING` on this logger. The arguments are interpreted as for :meth:`debug`."
msgstr ""

msgid "Logs a message with level :const:`ERROR` on this logger. The arguments are interpreted as for :meth:`debug`."
msgstr ""

msgid "Logs a message with level :const:`CRITICAL` on this logger. The arguments are interpreted as for :meth:`debug`."
msgstr ""

msgid "Logs a message with integer level *lvl* on this logger. The other arguments are interpreted as for :meth:`debug`."
msgstr ""

msgid "Logs a message with level :const:`ERROR` on this logger. The arguments are interpreted as for :meth:`debug`. Exception info is added to the logging message. This method should only be called from an exception handler."
msgstr ""

msgid "Adds the specified filter *filt* to this logger."
msgstr ""

msgid "Removes the specified filter *filt* from this logger."
msgstr ""

msgid "Applies this logger's filters to the record and returns a true value if the record is to be processed."
msgstr ""

msgid "Adds the specified handler *hdlr* to this logger."
msgstr ""

msgid "Removes the specified handler *hdlr* from this logger."
msgstr ""

msgid "Finds the caller's source filename and line number. Returns the filename, line number and function name as a 3-element tuple."
msgstr ""

msgid "Handles a record by passing it to all handlers associated with this logger and its ancestors (until a false value of *propagate* is found). This method is used for unpickled records received from a socket, as well as those created locally. Logger-level filtering is applied using :meth:`~Logger.filter`."
msgstr ""

msgid "This is a factory method which can be overridden in subclasses to create specialized :class:`LogRecord` instances."
msgstr ""

msgid "Basic example"
msgstr ""

msgid "The :mod:`logging` package provides a lot of flexibility, and its configuration can appear daunting.  This section demonstrates that simple use of the logging package is possible."
msgstr ""

msgid "The simplest example shows logging to the console::"
msgstr ""

msgid "import logging  logging.debug('A debug message') logging.info('Some information') logging.warning('A shot across the bows')"
msgstr ""

msgid "If you run the above script, you'll see this::"
msgstr ""

msgid "WARNING:root:A shot across the bows"
msgstr ""

msgid "Because no particular logger was specified, the system used the root logger. The debug and info messages didn't appear because by default, the root logger is configured to only handle messages with a severity of WARNING or above. The message format is also a configuration default, as is the output destination of the messages - ``sys.stderr``. The severity level, the message format and destination can be easily changed, as shown in the example below::"
msgstr ""

msgid "import logging  logging.basicConfig(level=logging.DEBUG,                     format='%(asctime)s %(levelname)s %(message)s',                     filename='myapp.log',                     filemode='w') logging.debug('A debug message') logging.info('Some information') logging.warning('A shot across the bows')"
msgstr ""

msgid "The :meth:`basicConfig` method is used to change the configuration defaults, which results in output (written to ``myapp.log``) which should look something like the following::"
msgstr ""

msgid "2004-07-02 13:00:08,743 DEBUG A debug message 2004-07-02 13:00:08,743 INFO Some information 2004-07-02 13:00:08,743 WARNING A shot across the bows"
msgstr ""

msgid "This time, all messages with a severity of DEBUG or above were handled, and the format of the messages was also changed, and output went to the specified file rather than the console."
msgstr ""

msgid "Formatting uses the old Python string formatting - see section :ref:`old-string-formatting`. The format string takes the following common specifiers. For a complete list of specifiers, consult the :class:`Formatter` documentation."
msgstr ""

msgid "``%(name)s``"
msgstr ""

msgid "Name of the logger (logging channel)."
msgstr ""

msgid "``%(levelname)s``"
msgstr ""

msgid "Text logging level for the message (``'DEBUG'``, ``'INFO'``, ``'WARNING'``, ``'ERROR'``, ``'CRITICAL'``)."
msgstr ""

msgid "``%(asctime)s``"
msgstr ""

msgid "Human-readable time when the :class:`LogRecord` was created.  By default this is of the form \"2003-07-08 16:49:45,896\" (the numbers after the comma are millisecond portion of the time)."
msgstr ""

msgid "``%(message)s``"
msgstr ""

msgid "The logged message."
msgstr ""

msgid "To change the date/time format, you can pass an additional keyword parameter, *datefmt*, as in the following::"
msgstr ""

msgid "import logging  logging.basicConfig(level=logging.DEBUG,                     format='%(asctime)s %(levelname)-8s %(message)s',                     datefmt='%a, %d %b %Y %H:%M:%S',                     filename='/temp/myapp.log',                     filemode='w') logging.debug('A debug message') logging.info('Some information') logging.warning('A shot across the bows')"
msgstr ""

msgid "which would result in output like ::"
msgstr ""

msgid "Fri, 02 Jul 2004 13:06:18 DEBUG    A debug message Fri, 02 Jul 2004 13:06:18 INFO     Some information Fri, 02 Jul 2004 13:06:18 WARNING  A shot across the bows"
msgstr ""

msgid "The date format string follows the requirements of :func:`strftime` - see the documentation for the :mod:`time` module."
msgstr ""

msgid "If, instead of sending logging output to the console or a file, you'd rather use a file-like object which you have created separately, you can pass it to :func:`basicConfig` using the *stream* keyword argument. Note that if both *stream* and *filename* keyword arguments are passed, the *stream* argument is ignored."
msgstr ""

msgid "Of course, you can put variable information in your output. To do this, simply have the message be a format string and pass in additional arguments containing the variable information, as in the following example::"
msgstr ""

msgid "import logging  logging.basicConfig(level=logging.DEBUG,                     format='%(asctime)s %(levelname)-8s %(message)s',                     datefmt='%a, %d %b %Y %H:%M:%S',                     filename='/temp/myapp.log',                     filemode='w') logging.error('Pack my box with %d dozen %s', 5, 'liquor jugs')"
msgstr ""

msgid "which would result in ::"
msgstr ""

msgid "Wed, 21 Jul 2004 15:35:16 ERROR    Pack my box with 5 dozen liquor jugs"
msgstr ""

msgid "Logging to multiple destinations"
msgstr ""

msgid "Let's say you want to log to console and file with different message formats and in differing circumstances. Say you want to log messages with levels of DEBUG and higher to file, and those messages at level INFO and higher to the console. Let's also assume that the file should contain timestamps, but the console messages should not. Here's how you can achieve this::"
msgstr ""

msgid "import logging  # set up logging to file - see previous section for more details logging.basicConfig(level=logging.DEBUG,                     format='%(asctime)s %(name)-12s %(levelname)-8s %(message)s',                     datefmt='%m-%d %H:%M',                     filename='/temp/myapp.log',                     filemode='w') # define a Handler which writes INFO messages or higher to the sys.stderr console = logging.StreamHandler() console.setLevel(logging.INFO) # set a format which is simpler for console use formatter = logging.Formatter('%(name)-12s: %(levelname)-8s %(message)s') # tell the handler to use this format console.setFormatter(formatter) # add the handler to the root logger logging.getLogger('').addHandler(console)  # Now, we can log to the root logger, or any other logger. First the root... logging.info('Jackdaws love my big sphinx of quartz.')  # Now, define a couple of other loggers which might represent areas in your # application:  logger1 = logging.getLogger('myapp.area1') logger2 = logging.getLogger('myapp.area2')  logger1.debug('Quick zephyrs blow, vexing daft Jim.') logger1.info('How quickly daft jumping zebras vex.') logger2.warning('Jail zesty vixen who grabbed pay from quack.') logger2.error('The five boxing wizards jump quickly.')"
msgstr ""

msgid "When you run this, on the console you will see ::"
msgstr ""

msgid "root        : INFO     Jackdaws love my big sphinx of quartz. myapp.area1 : INFO     How quickly daft jumping zebras vex. myapp.area2 : WARNING  Jail zesty vixen who grabbed pay from quack. myapp.area2 : ERROR    The five boxing wizards jump quickly."
msgstr ""

msgid "and in the file you will see something like ::"
msgstr ""

msgid "10-22 22:19 root         INFO     Jackdaws love my big sphinx of quartz. 10-22 22:19 myapp.area1  DEBUG    Quick zephyrs blow, vexing daft Jim. 10-22 22:19 myapp.area1  INFO     How quickly daft jumping zebras vex. 10-22 22:19 myapp.area2  WARNING  Jail zesty vixen who grabbed pay from quack. 10-22 22:19 myapp.area2  ERROR    The five boxing wizards jump quickly."
msgstr ""

msgid "As you can see, the DEBUG message only shows up in the file. The other messages are sent to both destinations."
msgstr ""

msgid "This example uses console and file handlers, but you can use any number and combination of handlers you choose."
msgstr ""

msgid "Exceptions raised during logging"
msgstr ""

msgid "The logging package is designed to swallow exceptions which occur while logging in production. This is so that errors which occur while handling logging events - such as logging misconfiguration, network or other similar errors - do not cause the application using logging to terminate prematurely."
msgstr ""

msgid ":class:`SystemExit` and :class:`KeyboardInterrupt` exceptions are never swallowed. Other exceptions which occur during the :meth:`emit` method of a :class:`Handler` subclass are passed to its :meth:`handleError` method."
msgstr ""

msgid "The default implementation of :meth:`handleError` in :class:`Handler` checks to see if a module-level variable, :data:`raiseExceptions`, is set. If set, a traceback is printed to :data:`sys.stderr`. If not set, the exception is swallowed."
msgstr ""

msgid "**Note:** The default value of :data:`raiseExceptions` is ``True``. This is because during development, you typically want to be notified of any exceptions that occur. It's advised that you set :data:`raiseExceptions` to ``False`` for production usage."
msgstr ""

msgid "Adding contextual information to your logging output"
msgstr ""

msgid "Sometimes you want logging output to contain contextual information in addition to the parameters passed to the logging call. For example, in a networked application, it may be desirable to log client-specific information in the log (e.g. remote client's username, or IP address). Although you could use the *extra* parameter to achieve this, it's not always convenient to pass the information in this way. While it might be tempting to create :class:`Logger` instances on a per-connection basis, this is not a good idea because these instances are not garbage collected. While this is not a problem in practice, when the number of :class:`Logger` instances is dependent on the level of granularity you want to use in logging an application, it could be hard to manage if the number of :class:`Logger` instances becomes effectively unbounded."
msgstr ""

msgid "An easy way in which you can pass contextual information to be output along with logging event information is to use the :class:`LoggerAdapter` class. This class is designed to look like a :class:`Logger`, so that you can call :meth:`debug`, :meth:`info`, :meth:`warning`, :meth:`error`, :meth:`exception`, :meth:`critical` and :meth:`log`. These methods have the same signatures as their counterparts in :class:`Logger`, so you can use the two types of instances interchangeably."
msgstr ""

msgid "When you create an instance of :class:`LoggerAdapter`, you pass it a :class:`Logger` instance and a dict-like object which contains your contextual information. When you call one of the logging methods on an instance of :class:`LoggerAdapter`, it delegates the call to the underlying instance of :class:`Logger` passed to its constructor, and arranges to pass the contextual information in the delegated call. Here's a snippet from the code of :class:`LoggerAdapter`::"
msgstr ""

msgid "def debug(self, msg, *args, **kwargs):     \"\"\"     Delegate a debug call to the underlying logger, after adding     contextual information from this adapter instance.     \"\"\"     msg, kwargs = self.process(msg, kwargs)     self.logger.debug(msg, *args, **kwargs)"
msgstr ""

msgid "The :meth:`process` method of :class:`LoggerAdapter` is where the contextual information is added to the logging output. It's passed the message and keyword arguments of the logging call, and it passes back (potentially) modified versions of these to use in the call to the underlying logger. The default implementation of this method leaves the message alone, but inserts an \"extra\" key in the keyword argument whose value is the dict-like object passed to the constructor. Of course, if you had passed an \"extra\" keyword argument in the call to the adapter, it will be silently overwritten."
msgstr ""

msgid "The advantage of using \"extra\" is that the values in the dict-like object are merged into the :class:`LogRecord` instance's __dict__, allowing you to use customized strings with your :class:`Formatter` instances which know about the keys of the dict-like object. If you need a different method, e.g. if you want to prepend or append the contextual information to the message string, you just need to subclass :class:`LoggerAdapter` and override :meth:`process` to do what you need. Here's an example script which uses this class, which also illustrates what dict-like behaviour is needed from an arbitrary \"dict-like\" object for use in the constructor::"
msgstr ""

msgid "import logging  class ConnInfo:     \"\"\"     An example class which shows how an arbitrary class can be used as     the 'extra' context information repository passed to a LoggerAdapter.     \"\"\"      def __getitem__(self, name):         \"\"\"         To allow this instance to look like a dict.         \"\"\"         from random import choice         if name == \"ip\":             result = choice([\"127.0.0.1\", \"192.168.0.1\"])         elif name == \"user\":             result = choice([\"jim\", \"fred\", \"sheila\"])         else:             result = self.__dict__.get(name, \"?\")         return result      def __iter__(self):         \"\"\"         To allow iteration over keys, which will be merged into         the LogRecord dict before formatting and output.         \"\"\"         keys = [\"ip\", \"user\"]         keys.extend(self.__dict__.keys())         return keys.__iter__()  if __name__ == \"__main__\":     from random import choice     levels = (logging.DEBUG, logging.INFO, logging.WARNING, logging.ERROR, logging.CRITICAL)     a1 = logging.LoggerAdapter(logging.getLogger(\"a.b.c\"),                                { \"ip\" : \"123.231.231.123\", \"user\" : \"sheila\" })     logging.basicConfig(level=logging.DEBUG,                         format=\"%(asctime)-15s %(name)-5s %(levelname)-8s IP: %(ip)-15s User: %(user)-8s %(message)s\")     a1.debug(\"A debug message\")     a1.info(\"An info message with %s\", \"some parameters\")     a2 = logging.LoggerAdapter(logging.getLogger(\"d.e.f\"), ConnInfo())     for x in range(10):         lvl = choice(levels)         lvlname = logging.getLevelName(lvl)         a2.log(lvl, \"A message at %s level with %d %s\", lvlname, 2, \"parameters\")"
msgstr ""

msgid "When this script is run, the output should look something like this::"
msgstr ""

msgid "2008-01-18 14:49:54,023 a.b.c DEBUG    IP: 123.231.231.123 User: sheila   A debug message 2008-01-18 14:49:54,023 a.b.c INFO     IP: 123.231.231.123 User: sheila   An info message with some parameters 2008-01-18 14:49:54,023 d.e.f CRITICAL IP: 192.168.0.1     User: jim      A message at CRITICAL level with 2 parameters 2008-01-18 14:49:54,033 d.e.f INFO     IP: 192.168.0.1     User: jim      A message at INFO level with 2 parameters 2008-01-18 14:49:54,033 d.e.f WARNING  IP: 192.168.0.1     User: sheila   A message at WARNING level with 2 parameters 2008-01-18 14:49:54,033 d.e.f ERROR    IP: 127.0.0.1       User: fred     A message at ERROR level with 2 parameters 2008-01-18 14:49:54,033 d.e.f ERROR    IP: 127.0.0.1       User: sheila   A message at ERROR level with 2 parameters 2008-01-18 14:49:54,033 d.e.f WARNING  IP: 192.168.0.1     User: sheila   A message at WARNING level with 2 parameters 2008-01-18 14:49:54,033 d.e.f WARNING  IP: 192.168.0.1     User: jim      A message at WARNING level with 2 parameters 2008-01-18 14:49:54,033 d.e.f INFO     IP: 192.168.0.1     User: fred     A message at INFO level with 2 parameters 2008-01-18 14:49:54,033 d.e.f WARNING  IP: 192.168.0.1     User: sheila   A message at WARNING level with 2 parameters 2008-01-18 14:49:54,033 d.e.f WARNING  IP: 127.0.0.1       User: jim      A message at WARNING level with 2 parameters"
msgstr ""

msgid "Logging to a single file from multiple processes"
msgstr ""

msgid "Although logging is thread-safe, and logging to a single file from multiple threads in a single process *is* supported, logging to a single file from *multiple processes* is *not* supported, because there is no standard way to serialize access to a single file across multiple processes in Python. If you need to log to a single file from multiple processes, the best way of doing this is to have all the processes log to a :class:`SocketHandler`, and have a separate process which implements a socket server which reads from the socket and logs to file. (If you prefer, you can dedicate one thread in one of the existing processes to perform this function.) The following section documents this approach in more detail and includes a working socket receiver which can be used as a starting point for you to adapt in your own applications."
msgstr ""

msgid "If you are using a recent version of Python which includes the :mod:`multiprocessing` module, you can write your own handler which uses the :class:`Lock` class from this module to serialize access to the file from your processes. The existing :class:`FileHandler` and subclasses do not make use of :mod:`multiprocessing` at present, though they may do so in the future. Note that at present, the :mod:`multiprocessing` module does not provide working lock functionality on all platforms (see http://bugs.python.org/issue3770)."
msgstr ""

msgid "Sending and receiving logging events across a network"
msgstr ""

msgid "Let's say you want to send logging events across a network, and handle them at the receiving end. A simple way of doing this is attaching a :class:`SocketHandler` instance to the root logger at the sending end::"
msgstr ""

msgid "import logging, logging.handlers  rootLogger = logging.getLogger('') rootLogger.setLevel(logging.DEBUG) socketHandler = logging.handlers.SocketHandler('localhost',                     logging.handlers.DEFAULT_TCP_LOGGING_PORT) # don't bother with a formatter, since a socket handler sends the event as # an unformatted pickle rootLogger.addHandler(socketHandler)  # Now, we can log to the root logger, or any other logger. First the root... logging.info('Jackdaws love my big sphinx of quartz.')  # Now, define a couple of other loggers which might represent areas in your # application:  logger1 = logging.getLogger('myapp.area1') logger2 = logging.getLogger('myapp.area2')  logger1.debug('Quick zephyrs blow, vexing daft Jim.') logger1.info('How quickly daft jumping zebras vex.') logger2.warning('Jail zesty vixen who grabbed pay from quack.') logger2.error('The five boxing wizards jump quickly.')"
msgstr ""

msgid "At the receiving end, you can set up a receiver using the :mod:`socketserver` module. Here is a basic working example::"
msgstr ""

msgid "import pickle import logging import logging.handlers import socketserver import struct   class LogRecordStreamHandler(socketserver.StreamRequestHandler):     \"\"\"Handler for a streaming logging request.      This basically logs the record using whatever logging policy is     configured locally.     \"\"\"      def handle(self):         \"\"\"         Handle multiple requests - each expected to be a 4-byte length,         followed by the LogRecord in pickle format. Logs the record         according to whatever policy is configured locally.         \"\"\"         while True:             chunk = self.connection.recv(4)             if len(chunk) < 4:                 break             slen = struct.unpack(\">L\", chunk)[0]             chunk = self.connection.recv(slen)             while len(chunk) < slen:                 chunk = chunk + self.connection.recv(slen - len(chunk))             obj = self.unPickle(chunk)             record = logging.makeLogRecord(obj)             self.handleLogRecord(record)      def unPickle(self, data):         return pickle.loads(data)      def handleLogRecord(self, record):         # if a name is specified, we use the named logger rather than the one         # implied by the record.         if self.server.logname is not None:             name = self.server.logname         else:             name = record.name         logger = logging.getLogger(name)         # N.B. EVERY record gets logged. This is because Logger.handle         # is normally called AFTER logger-level filtering. If you want         # to do filtering, do it at the client end to save wasting         # cycles and network bandwidth!         logger.handle(record)  class LogRecordSocketReceiver(socketserver.ThreadingTCPServer):     \"\"\"simple TCP socket-based logging receiver suitable for testing.     \"\"\"      allow_reuse_address = 1      def __init__(self, host='localhost',                  port=logging.handlers.DEFAULT_TCP_LOGGING_PORT,                  handler=LogRecordStreamHandler):         socketserver.ThreadingTCPServer.__init__(self, (host, port), handler)         self.abort = 0         self.timeout = 1         self.logname = None      def serve_until_stopped(self):         import select         abort = 0         while not abort:             rd, wr, ex = select.select([self.socket.fileno()],                                        [], [],                                        self.timeout)             if rd:                 self.handle_request()             abort = self.abort  def main():     logging.basicConfig(         format=\"%(relativeCreated)5d %(name)-15s %(levelname)-8s %(message)s\")     tcpserver = LogRecordSocketReceiver()     print(\"About to start TCP server...\")     tcpserver.serve_until_stopped()  if __name__ == \"__main__\":     main()"
msgstr ""

msgid "First run the server, and then the client. On the client side, nothing is printed on the console; on the server side, you should see something like::"
msgstr ""

msgid "About to start TCP server...    59 root            INFO     Jackdaws love my big sphinx of quartz.    59 myapp.area1     DEBUG    Quick zephyrs blow, vexing daft Jim.    69 myapp.area1     INFO     How quickly daft jumping zebras vex.    69 myapp.area2     WARNING  Jail zesty vixen who grabbed pay from quack.    69 myapp.area2     ERROR    The five boxing wizards jump quickly."
msgstr ""

msgid "Using arbitrary objects as messages"
msgstr ""

msgid "In the preceding sections and examples, it has been assumed that the message passed when logging the event is a string. However, this is not the only possibility. You can pass an arbitrary object as a message, and its :meth:`__str__` method will be called when the logging system needs to convert it to a string representation. In fact, if you want to, you can avoid computing a string representation altogether - for example, the :class:`SocketHandler` emits an event by pickling it and sending it over the wire."
msgstr ""

msgid "Optimization"
msgstr ""

msgid "Formatting of message arguments is deferred until it cannot be avoided. However, computing the arguments passed to the logging method can also be expensive, and you may want to avoid doing it if the logger will just throw away your event. To decide what to do, you can call the :meth:`isEnabledFor` method which takes a level argument and returns true if the event would be created by the Logger for that level of call. You can write code like this::"
msgstr ""

msgid "if logger.isEnabledFor(logging.DEBUG):     logger.debug(\"Message with %s, %s\", expensive_func1(),                                         expensive_func2())"
msgstr ""

msgid "so that if the logger's threshold is set above ``DEBUG``, the calls to :func:`expensive_func1` and :func:`expensive_func2` are never made."
msgstr ""

msgid "There are other optimizations which can be made for specific applications which need more precise control over what logging information is collected. Here's a list of things you can do to avoid processing during logging which you don't need:"
msgstr ""

msgid "What you don't want to collect"
msgstr ""

msgid "How to avoid collecting it"
msgstr ""

msgid "Information about where calls were made from."
msgstr ""

msgid "Set ``logging._srcfile`` to ``None``."
msgstr ""

msgid "Threading information."
msgstr ""

msgid "Set ``logging.logThreads`` to ``0``."
msgstr ""

msgid "Process information."
msgstr ""

msgid "Set ``logging.logProcesses`` to ``0``."
msgstr ""

msgid "Also note that the core logging module only includes the basic handlers. If you don't import :mod:`logging.handlers` and :mod:`logging.config`, they won't take up any memory."
msgstr ""

msgid "Handler Objects"
msgstr ""

msgid "Handlers have the following attributes and methods. Note that :class:`Handler` is never instantiated directly; this class acts as a base for more useful subclasses. However, the :meth:`__init__` method in subclasses needs to call :meth:`Handler.__init__`."
msgstr ""

msgid "Initializes the :class:`Handler` instance by setting its level, setting the list of filters to the empty list and creating a lock (using :meth:`createLock`) for serializing access to an I/O mechanism."
msgstr ""

msgid "Initializes a thread lock which can be used to serialize access to underlying I/O functionality which may not be threadsafe."
msgstr ""

msgid "Acquires the thread lock created with :meth:`createLock`."
msgstr ""

msgid "Releases the thread lock acquired with :meth:`acquire`."
msgstr ""

msgid "Sets the threshold for this handler to *lvl*. Logging messages which are less severe than *lvl* will be ignored. When a handler is created, the level is set to :const:`NOTSET` (which causes all messages to be processed)."
msgstr ""

msgid "Sets the :class:`Formatter` for this handler to *form*."
msgstr ""

msgid "Adds the specified filter *filt* to this handler."
msgstr ""

msgid "Removes the specified filter *filt* from this handler."
msgstr ""

msgid "Applies this handler's filters to the record and returns a true value if the record is to be processed."
msgstr ""

msgid "Ensure all logging output has been flushed. This version does nothing and is intended to be implemented by subclasses."
msgstr ""

msgid "Tidy up any resources used by the handler. This version does no output but removes the handler from an internal list of handlers which is closed when :func:`shutdown` is called. Subclasses should ensure that this gets called from overridden :meth:`close` methods."
msgstr ""

msgid "Conditionally emits the specified logging record, depending on filters which may have been added to the handler. Wraps the actual emission of the record with acquisition/release of the I/O thread lock."
msgstr ""

msgid "This method should be called from handlers when an exception is encountered during an :meth:`emit` call. By default it does nothing, which means that exceptions get silently ignored. This is what is mostly wanted for a logging system - most users will not care about errors in the logging system, they are more interested in application errors. You could, however, replace this with a custom handler if you wish. The specified record is the one which was being processed when the exception occurred."
msgstr ""

msgid "Do formatting for a record - if a formatter is set, use it. Otherwise, use the default formatter for the module."
msgstr ""

msgid "Do whatever it takes to actually log the specified logging record. This version is intended to be implemented by subclasses and so raises a :exc:`NotImplementedError`."
msgstr ""

msgid "StreamHandler"
msgstr ""

msgid "The :class:`StreamHandler` class, located in the core :mod:`logging` package, sends logging output to streams such as *sys.stdout*, *sys.stderr* or any file-like object (or, more precisely, any object which supports :meth:`write` and :meth:`flush` methods)."
msgstr ""

msgid "Returns a new instance of the :class:`StreamHandler` class. If *stream* is specified, the instance will use it for logging output; otherwise, *sys.stderr* will be used."
msgstr ""

msgid "If a formatter is specified, it is used to format the record. The record is then written to the stream with a trailing newline. If exception information is present, it is formatted using :func:`traceback.print_exception` and appended to the stream."
msgstr ""

msgid "Flushes the stream by calling its :meth:`flush` method. Note that the :meth:`close` method is inherited from :class:`Handler` and so does no output, so an explicit :meth:`flush` call may be needed at times."
msgstr ""

msgid "FileHandler"
msgstr ""

msgid "The :class:`FileHandler` class, located in the core :mod:`logging` package, sends logging output to a disk file.  It inherits the output functionality from :class:`StreamHandler`."
msgstr ""

msgid "Returns a new instance of the :class:`FileHandler` class. The specified file is opened and used as the stream for logging. If *mode* is not specified, :const:`'a'` is used.  If *encoding* is not *None*, it is used to open the file with that encoding.  If *delay* is true, then file opening is deferred until the first call to :meth:`emit`. By default, the file grows indefinitely."
msgstr ""

msgid "Closes the file."
msgstr ""

msgid "Outputs the record to the file."
msgstr ""

msgid "NullHandler"
msgstr ""

msgid "The :class:`NullHandler` class, located in the core :mod:`logging` package, does not do any formatting or output. It is essentially a \"no-op\" handler for use by library developers."
msgstr ""

msgid "Returns a new instance of the :class:`NullHandler` class."
msgstr ""

msgid "This method does nothing."
msgstr ""

msgid "See :ref:`library-config` for more information on how to use :class:`NullHandler`."
msgstr ""

msgid "WatchedFileHandler"
msgstr ""

msgid "The :class:`WatchedFileHandler` class, located in the :mod:`logging.handlers` module, is a :class:`FileHandler` which watches the file it is logging to. If the file changes, it is closed and reopened using the file name."
msgstr ""

msgid "A file change can happen because of usage of programs such as *newsyslog* and *logrotate* which perform log file rotation. This handler, intended for use under Unix/Linux, watches the file to see if it has changed since the last emit. (A file is deemed to have changed if its device or inode have changed.) If the file has changed, the old file stream is closed, and the file opened to get a new stream."
msgstr ""

msgid "This handler is not appropriate for use under Windows, because under Windows open log files cannot be moved or renamed - logging opens the files with exclusive locks - and so there is no need for such a handler. Furthermore, *ST_INO* is not supported under Windows; :func:`stat` always returns zero for this value."
msgstr ""

msgid "Returns a new instance of the :class:`WatchedFileHandler` class. The specified file is opened and used as the stream for logging. If *mode* is not specified, :const:`'a'` is used.  If *encoding* is not *None*, it is used to open the file with that encoding.  If *delay* is true, then file opening is deferred until the first call to :meth:`emit`.  By default, the file grows indefinitely."
msgstr ""

msgid "Outputs the record to the file, but first checks to see if the file has changed.  If it has, the existing stream is flushed and closed and the file opened again, before outputting the record to the file."
msgstr ""

msgid "RotatingFileHandler"
msgstr ""

msgid "The :class:`RotatingFileHandler` class, located in the :mod:`logging.handlers` module, supports rotation of disk log files."
msgstr ""

msgid "Returns a new instance of the :class:`RotatingFileHandler` class. The specified file is opened and used as the stream for logging. If *mode* is not specified, ``'a'`` is used.  If *encoding* is not *None*, it is used to open the file with that encoding.  If *delay* is true, then file opening is deferred until the first call to :meth:`emit`.  By default, the file grows indefinitely."
msgstr ""

msgid "You can use the *maxBytes* and *backupCount* values to allow the file to :dfn:`rollover` at a predetermined size. When the size is about to be exceeded, the file is closed and a new file is silently opened for output. Rollover occurs whenever the current log file is nearly *maxBytes* in length; if *maxBytes* is zero, rollover never occurs.  If *backupCount* is non-zero, the system will save old log files by appending the extensions \".1\", \".2\" etc., to the filename. For example, with a *backupCount* of 5 and a base file name of :file:`app.log`, you would get :file:`app.log`, :file:`app.log.1`, :file:`app.log.2`, up to :file:`app.log.5`. The file being written to is always :file:`app.log`.  When this file is filled, it is closed and renamed to :file:`app.log.1`, and if files :file:`app.log.1`, :file:`app.log.2`, etc.  exist, then they are renamed to :file:`app.log.2`, :file:`app.log.3` etc.  respectively."
msgstr ""

msgid "Does a rollover, as described above."
msgstr ""

msgid "Outputs the record to the file, catering for rollover as described previously."
msgstr ""

msgid "TimedRotatingFileHandler"
msgstr ""

msgid "The :class:`TimedRotatingFileHandler` class, located in the :mod:`logging.handlers` module, supports rotation of disk log files at certain timed intervals."
msgstr ""

msgid "Returns a new instance of the :class:`TimedRotatingFileHandler` class. The specified file is opened and used as the stream for logging. On rotating it also sets the filename suffix. Rotating happens based on the product of *when* and *interval*."
msgstr ""

msgid "You can use the *when* to specify the type of *interval*. The list of possible values is below.  Note that they are not case sensitive."
msgstr ""

msgid "Type of interval"
msgstr ""

msgid "``'S'``"
msgstr ""

msgid "Seconds"
msgstr ""

msgid "``'M'``"
msgstr ""

msgid "Minutes"
msgstr ""

msgid "Hours"
msgstr ""

msgid "``'D'``"
msgstr ""

msgid "Days"
msgstr ""

msgid "``'W'``"
msgstr ""

msgid "Week day (0=Monday)"
msgstr ""

msgid "``'midnight'``"
msgstr ""

msgid "Roll over at midnight"
msgstr ""

msgid "The system will save old log files by appending extensions to the filename. The extensions are date-and-time based, using the strftime format ``%Y-%m-%d_%H-%M-%S`` or a leading portion thereof, depending on the rollover interval."
msgstr ""

msgid "When computing the next rollover time for the first time (when the handler is created), the last modification time of an existing log file, or else the current time, is used to compute when the next rotation will occur."
msgstr ""

msgid "If the *utc* argument is true, times in UTC will be used; otherwise local time is used."
msgstr ""

msgid "If *backupCount* is nonzero, at most *backupCount* files will be kept, and if more would be created when rollover occurs, the oldest one is deleted. The deletion logic uses the interval to determine which files to delete, so changing the interval may leave old files lying around."
msgstr ""

msgid "If *delay* is true, then file opening is deferred until the first call to :meth:`emit`."
msgstr ""

msgid "Outputs the record to the file, catering for rollover as described above."
msgstr ""

msgid "SocketHandler"
msgstr ""

msgid "The :class:`SocketHandler` class, located in the :mod:`logging.handlers` module, sends logging output to a network socket. The base class uses a TCP socket."
msgstr ""

msgid "Returns a new instance of the :class:`SocketHandler` class intended to communicate with a remote machine whose address is given by *host* and *port*."
msgstr ""

msgid "Closes the socket."
msgstr ""

msgid "Pickles the record's attribute dictionary and writes it to the socket in binary format. If there is an error with the socket, silently drops the packet. If the connection was previously lost, re-establishes the connection. To unpickle the record at the receiving end into a :class:`LogRecord`, use the :func:`makeLogRecord` function."
msgstr ""

msgid "Handles an error which has occurred during :meth:`emit`. The most likely cause is a lost connection. Closes the socket so that we can retry on the next event."
msgstr ""

msgid "This is a factory method which allows subclasses to define the precise type of socket they want. The default implementation creates a TCP socket (:const:`socket.SOCK_STREAM`)."
msgstr ""

msgid "Pickles the record's attribute dictionary in binary format with a length prefix, and returns it ready for transmission across the socket."
msgstr ""

msgid "Note that pickles aren't completely secure. If you are concerned about security, you may want to override this method to implement a more secure mechanism. For example, you can sign pickles using HMAC and then verify them on the receiving end, or alternatively you can disable unpickling of global objects on the receiving end."
msgstr ""

msgid "Send a pickled string *packet* to the socket. This function allows for partial sends which can happen when the network is busy."
msgstr ""

msgid "DatagramHandler"
msgstr ""

msgid "The :class:`DatagramHandler` class, located in the :mod:`logging.handlers` module, inherits from :class:`SocketHandler` to support sending logging messages over UDP sockets."
msgstr ""

msgid "Returns a new instance of the :class:`DatagramHandler` class intended to communicate with a remote machine whose address is given by *host* and *port*."
msgstr ""

msgid "Pickles the record's attribute dictionary and writes it to the socket in binary format. If there is an error with the socket, silently drops the packet. To unpickle the record at the receiving end into a :class:`LogRecord`, use the :func:`makeLogRecord` function."
msgstr ""

msgid "The factory method of :class:`SocketHandler` is here overridden to create a UDP socket (:const:`socket.SOCK_DGRAM`)."
msgstr ""

msgid "Send a pickled string to a socket."
msgstr ""

msgid "SysLogHandler"
msgstr ""

msgid "The :class:`SysLogHandler` class, located in the :mod:`logging.handlers` module, supports sending logging messages to a remote or local Unix syslog."
msgstr ""

msgid "Returns a new instance of the :class:`SysLogHandler` class intended to communicate with a remote Unix machine whose address is given by *address* in the form of a ``(host, port)`` tuple.  If *address* is not specified, ``('localhost', 514)`` is used.  The address is used to open a socket.  An alternative to providing a ``(host, port)`` tuple is providing an address as a string, for example \"/dev/log\". In this case, a Unix domain socket is used to send the message to the syslog. If *facility* is not specified, :const:`LOG_USER` is used. The type of socket opened depends on the *socktype* argument, which defaults to :const:`socket.SOCK_DGRAM` and thus opens a UDP socket. To open a TCP socket (for use with the newer syslog daemons such as rsyslog), specify a value of :const:`socket.SOCK_STREAM`."
msgstr ""

msgid "Closes the socket to the remote host."
msgstr ""

msgid "The record is formatted, and then sent to the syslog server. If exception information is present, it is *not* sent to the server."
msgstr ""

msgid "Encodes the facility and priority into an integer. You can pass in strings or integers - if strings are passed, internal mapping dictionaries are used to convert them to integers."
msgstr ""

msgid "The symbolic ``LOG_`` values are defined in :class:`SysLogHandler` and mirror the values defined in the ``sys/syslog.h`` header file."
msgstr ""

msgid "**Priorities**"
msgstr ""

msgid "Name (string)"
msgstr ""

msgid "Symbolic value"
msgstr ""

msgid "``alert``"
msgstr ""

msgid "LOG_ALERT"
msgstr ""

msgid "``crit`` or ``critical``"
msgstr ""

msgid "LOG_CRIT"
msgstr ""

msgid "``debug``"
msgstr ""

msgid "LOG_DEBUG"
msgstr ""

msgid "``emerg`` or ``panic``"
msgstr ""

msgid "LOG_EMERG"
msgstr ""

msgid "``err`` or ``error``"
msgstr ""

msgid "LOG_ERR"
msgstr ""

msgid "``info``"
msgstr ""

msgid "LOG_INFO"
msgstr ""

msgid "``notice``"
msgstr ""

msgid "LOG_NOTICE"
msgstr ""

msgid "``warn`` or ``warning``"
msgstr ""

msgid "LOG_WARNING"
msgstr ""

msgid "**Facilities**"
msgstr ""

msgid "``auth``"
msgstr ""

msgid "LOG_AUTH"
msgstr ""

msgid "``authpriv``"
msgstr ""

msgid "LOG_AUTHPRIV"
msgstr ""

msgid "``cron``"
msgstr ""

msgid "LOG_CRON"
msgstr ""

msgid "``daemon``"
msgstr ""

msgid "LOG_DAEMON"
msgstr ""

msgid "``ftp``"
msgstr ""

msgid "LOG_FTP"
msgstr ""

msgid "``kern``"
msgstr ""

msgid "LOG_KERN"
msgstr ""

msgid "``lpr``"
msgstr ""

msgid "LOG_LPR"
msgstr ""

msgid "``mail``"
msgstr ""

msgid "LOG_MAIL"
msgstr ""

msgid "``news``"
msgstr ""

msgid "LOG_NEWS"
msgstr ""

msgid "``syslog``"
msgstr ""

msgid "LOG_SYSLOG"
msgstr ""

msgid "``user``"
msgstr ""

msgid "LOG_USER"
msgstr ""

msgid "``uucp``"
msgstr ""

msgid "LOG_UUCP"
msgstr ""

msgid "``local0``"
msgstr ""

msgid "LOG_LOCAL0"
msgstr ""

msgid "``local1``"
msgstr ""

msgid "LOG_LOCAL1"
msgstr ""

msgid "``local2``"
msgstr ""

msgid "LOG_LOCAL2"
msgstr ""

msgid "``local3``"
msgstr ""

msgid "LOG_LOCAL3"
msgstr ""

msgid "``local4``"
msgstr ""

msgid "LOG_LOCAL4"
msgstr ""

msgid "``local5``"
msgstr ""

msgid "LOG_LOCAL5"
msgstr ""

msgid "``local6``"
msgstr ""

msgid "LOG_LOCAL6"
msgstr ""

msgid "``local7``"
msgstr ""

msgid "LOG_LOCAL7"
msgstr ""

msgid "Maps a logging level name to a syslog priority name. You may need to override this if you are using custom levels, or if the default algorithm is not suitable for your needs. The default algorithm maps ``DEBUG``, ``INFO``, ``WARNING``, ``ERROR`` and ``CRITICAL`` to the equivalent syslog names, and all other level names to \"warning\"."
msgstr ""

msgid "NTEventLogHandler"
msgstr ""

msgid "The :class:`NTEventLogHandler` class, located in the :mod:`logging.handlers` module, supports sending logging messages to a local Windows NT, Windows 2000 or Windows XP event log. Before you can use it, you need Mark Hammond's Win32 extensions for Python installed."
msgstr ""

msgid "Returns a new instance of the :class:`NTEventLogHandler` class. The *appname* is used to define the application name as it appears in the event log. An appropriate registry entry is created using this name. The *dllname* should give the fully qualified pathname of a .dll or .exe which contains message definitions to hold in the log (if not specified, ``'win32service.pyd'`` is used - this is installed with the Win32 extensions and contains some basic placeholder message definitions. Note that use of these placeholders will make your event logs big, as the entire message source is held in the log. If you want slimmer logs, you have to pass in the name of your own .dll or .exe which contains the message definitions you want to use in the event log). The *logtype* is one of ``'Application'``, ``'System'`` or ``'Security'``, and defaults to ``'Application'``."
msgstr ""

msgid "At this point, you can remove the application name from the registry as a source of event log entries. However, if you do this, you will not be able to see the events as you intended in the Event Log Viewer - it needs to be able to access the registry to get the .dll name. The current version does not do this."
msgstr ""

msgid "Determines the message ID, event category and event type, and then logs the message in the NT event log."
msgstr ""

msgid "Returns the event category for the record. Override this if you want to specify your own categories. This version returns 0."
msgstr ""

msgid "Returns the event type for the record. Override this if you want to specify your own types. This version does a mapping using the handler's typemap attribute, which is set up in :meth:`__init__` to a dictionary which contains mappings for :const:`DEBUG`, :const:`INFO`, :const:`WARNING`, :const:`ERROR` and :const:`CRITICAL`. If you are using your own levels, you will either need to override this method or place a suitable dictionary in the handler's *typemap* attribute."
msgstr ""

msgid "Returns the message ID for the record. If you are using your own messages, you could do this by having the *msg* passed to the logger being an ID rather than a format string. Then, in here, you could use a dictionary lookup to get the message ID. This version returns 1, which is the base message ID in :file:`win32service.pyd`."
msgstr ""

msgid "SMTPHandler"
msgstr ""

msgid "The :class:`SMTPHandler` class, located in the :mod:`logging.handlers` module, supports sending logging messages to an email address via SMTP."
msgstr ""

msgid "Returns a new instance of the :class:`SMTPHandler` class. The instance is initialized with the from and to addresses and subject line of the email. The *toaddrs* should be a list of strings. To specify a non-standard SMTP port, use the (host, port) tuple format for the *mailhost* argument. If you use a string, the standard SMTP port is used. If your SMTP server requires authentication, you can specify a (username, password) tuple for the *credentials* argument."
msgstr ""

msgid "Formats the record and sends it to the specified addressees."
msgstr ""

msgid "If you want to specify a subject line which is record-dependent, override this method."
msgstr ""

msgid "MemoryHandler"
msgstr ""

msgid "The :class:`MemoryHandler` class, located in the :mod:`logging.handlers` module, supports buffering of logging records in memory, periodically flushing them to a :dfn:`target` handler. Flushing occurs whenever the buffer is full, or when an event of a certain severity or greater is seen."
msgstr ""

msgid ":class:`MemoryHandler` is a subclass of the more general :class:`BufferingHandler`, which is an abstract class. This buffers logging records in memory. Whenever each record is added to the buffer, a check is made by calling :meth:`shouldFlush` to see if the buffer should be flushed.  If it should, then :meth:`flush` is expected to do the needful."
msgstr ""

msgid "Initializes the handler with a buffer of the specified capacity."
msgstr ""

msgid "Appends the record to the buffer. If :meth:`shouldFlush` returns true, calls :meth:`flush` to process the buffer."
msgstr ""

msgid "You can override this to implement custom flushing behavior. This version just zaps the buffer to empty."
msgstr ""

msgid "Returns true if the buffer is up to capacity. This method can be overridden to implement custom flushing strategies."
msgstr ""

msgid "Returns a new instance of the :class:`MemoryHandler` class. The instance is initialized with a buffer size of *capacity*. If *flushLevel* is not specified, :const:`ERROR` is used. If no *target* is specified, the target will need to be set using :meth:`setTarget` before this handler does anything useful."
msgstr ""

msgid "Calls :meth:`flush`, sets the target to :const:`None` and clears the buffer."
msgstr ""

msgid "For a :class:`MemoryHandler`, flushing means just sending the buffered records to the target, if there is one. Override if you want different behavior."
msgstr ""

msgid "Sets the target handler for this handler."
msgstr ""

msgid "Checks for buffer full or a record at the *flushLevel* or higher."
msgstr ""

msgid "HTTPHandler"
msgstr ""

msgid "The :class:`HTTPHandler` class, located in the :mod:`logging.handlers` module, supports sending logging messages to a Web server, using either ``GET`` or ``POST`` semantics."
msgstr ""

msgid "Returns a new instance of the :class:`HTTPHandler` class. The instance is initialized with a host address, url and HTTP method. The *host* can be of the form ``host:port``, should you need to use a specific port number. If no *method* is specified, ``GET`` is used."
msgstr ""

msgid "Sends the record to the Web server as an URL-encoded dictionary."
msgstr ""

msgid "Formatter Objects"
msgstr ""

msgid ":class:`Formatter`\\ s have the following attributes and methods. They are responsible for converting a :class:`LogRecord` to (usually) a string which can be interpreted by either a human or an external system. The base :class:`Formatter` allows a formatting string to be specified. If none is supplied, the default value of ``'%(message)s'`` is used."
msgstr ""

msgid "A Formatter can be initialized with a format string which makes use of knowledge of the :class:`LogRecord` attributes - such as the default value mentioned above making use of the fact that the user's message and arguments are pre-formatted into a :class:`LogRecord`'s *message* attribute.  This format string contains standard Python %-style mapping keys. See section :ref:`old-string-formatting` for more information on string formatting."
msgstr ""

msgid "Currently, the useful mapping keys in a :class:`LogRecord` are:"
msgstr ""

msgid "``%(levelno)s``"
msgstr ""

msgid "Numeric logging level for the message (:const:`DEBUG`, :const:`INFO`, :const:`WARNING`, :const:`ERROR`, :const:`CRITICAL`)."
msgstr ""

msgid "``%(pathname)s``"
msgstr ""

msgid "Full pathname of the source file where the logging call was issued (if available)."
msgstr ""

msgid "``%(filename)s``"
msgstr ""

msgid "Filename portion of pathname."
msgstr ""

msgid "``%(module)s``"
msgstr ""

msgid "Module (name portion of filename)."
msgstr ""

msgid "``%(funcName)s``"
msgstr ""

msgid "Name of function containing the logging call."
msgstr ""

msgid "``%(lineno)d``"
msgstr ""

msgid "Source line number where the logging call was issued (if available)."
msgstr ""

msgid "``%(created)f``"
msgstr ""

msgid "Time when the :class:`LogRecord` was created (as returned by :func:`time.time`)."
msgstr ""

msgid "``%(relativeCreated)d``"
msgstr ""

msgid "Time in milliseconds when the LogRecord was created, relative to the time the logging module was loaded."
msgstr ""

msgid "``%(msecs)d``"
msgstr ""

msgid "Millisecond portion of the time when the :class:`LogRecord` was created."
msgstr ""

msgid "``%(thread)d``"
msgstr ""

msgid "Thread ID (if available)."
msgstr ""

msgid "``%(threadName)s``"
msgstr ""

msgid "Thread name (if available)."
msgstr ""

msgid "``%(process)d``"
msgstr ""

msgid "Process ID (if available)."
msgstr ""

msgid "The logged message, computed as ``msg % args``."
msgstr ""

msgid "Returns a new instance of the :class:`Formatter` class.  The instance is initialized with a format string for the message as a whole, as well as a format string for the date/time portion of a message.  If no *fmt* is specified, ``'%(message)s'`` is used.  If no *datefmt* is specified, the ISO8601 date format is used."
msgstr ""

msgid "The record's attribute dictionary is used as the operand to a string formatting operation. Returns the resulting string. Before formatting the dictionary, a couple of preparatory steps are carried out. The *message* attribute of the record is computed using *msg* % *args*. If the formatting string contains ``'(asctime)'``, :meth:`formatTime` is called to format the event time. If there is exception information, it is formatted using :meth:`formatException` and appended to the message. Note that the formatted exception information is cached in attribute *exc_text*. This is useful because the exception information can be pickled and sent across the wire, but you should be careful if you have more than one :class:`Formatter` subclass which customizes the formatting of exception information. In this case, you will have to clear the cached value after a formatter has done its formatting, so that the next formatter to handle the event doesn't use the cached value but recalculates it afresh."
msgstr ""

msgid "This method should be called from :meth:`format` by a formatter which wants to make use of a formatted time. This method can be overridden in formatters to provide for any specific requirement, but the basic behavior is as follows: if *datefmt* (a string) is specified, it is used with :func:`time.strftime` to format the creation time of the record. Otherwise, the ISO8601 format is used.  The resulting string is returned."
msgstr ""

msgid "Formats the specified exception information (a standard exception tuple as returned by :func:`sys.exc_info`) as a string. This default implementation just uses :func:`traceback.print_exception`. The resulting string is returned."
msgstr ""

msgid "Filter Objects"
msgstr ""

msgid ":class:`Filter`\\ s can be used by :class:`Handler`\\ s and :class:`Logger`\\ s for more sophisticated filtering than is provided by levels. The base filter class only allows events which are below a certain point in the logger hierarchy. For example, a filter initialized with \"A.B\" will allow events logged by loggers \"A.B\", \"A.B.C\", \"A.B.C.D\", \"A.B.D\" etc. but not \"A.BB\", \"B.A.B\" etc. If initialized with the empty string, all events are passed."
msgstr ""

msgid "Returns an instance of the :class:`Filter` class. If *name* is specified, it names a logger which, together with its children, will have its events allowed through the filter. If *name* is the empty string, allows every event."
msgstr ""

msgid "Is the specified record to be logged? Returns zero for no, nonzero for yes. If deemed appropriate, the record may be modified in-place by this method."
msgstr ""

msgid "LogRecord Objects"
msgstr ""

msgid ":class:`LogRecord` instances are created every time something is logged. They contain all the information pertinent to the event being logged. The main information passed in is in msg and args, which are combined using msg % args to create the message field of the record. The record also includes information such as when the record was created, the source line where the logging call was made, and any exception information to be logged."
msgstr ""

msgid "Returns an instance of :class:`LogRecord` initialized with interesting information. The *name* is the logger name; *lvl* is the numeric level; *pathname* is the absolute pathname of the source file in which the logging call was made; *lineno* is the line number in that file where the logging call is found; *msg* is the user-supplied message (a format string); *args* is the tuple which, together with *msg*, makes up the user message; and *exc_info* is the exception tuple obtained by calling :func:`sys.exc_info` (or :const:`None`, if no exception information is available). The *func* is the name of the function from which the logging call was made. If not specified, it defaults to ``None``."
msgstr ""

msgid "Returns the message for this :class:`LogRecord` instance after merging any user-supplied arguments with the message."
msgstr ""

msgid "LoggerAdapter Objects"
msgstr ""

msgid ":class:`LoggerAdapter` instances are used to conveniently pass contextual information into logging calls. For a usage example , see the section on `adding contextual information to your logging output`__."
msgstr ""

msgid "Returns an instance of :class:`LoggerAdapter` initialized with an underlying :class:`Logger` instance and a dict-like object."
msgstr ""

msgid "Modifies the message and/or keyword arguments passed to a logging call in order to insert contextual information. This implementation takes the object passed as *extra* to the constructor and adds it to *kwargs* using key 'extra'. The return value is a (*msg*, *kwargs*) tuple which has the (possibly modified) versions of the arguments passed in."
msgstr ""

msgid "In addition to the above, :class:`LoggerAdapter` supports all the logging methods of :class:`Logger`, i.e. :meth:`debug`, :meth:`info`, :meth:`warning`, :meth:`error`, :meth:`exception`, :meth:`critical` and :meth:`log`. These methods have the same signatures as their counterparts in :class:`Logger`, so you can use the two types of instances interchangeably."
msgstr ""

msgid "The :meth:`isEnabledFor` method was added to :class:`LoggerAdapter`. This method delegates to the underlying logger."
msgstr ""

msgid "Thread Safety"
msgstr ""

msgid "The logging module is intended to be thread-safe without any special work needing to be done by its clients. It achieves this though using threading locks; there is one lock to serialize access to the module's shared data, and each handler also creates a lock to serialize access to its underlying I/O."
msgstr ""

msgid "If you are implementing asynchronous signal handlers using the :mod:`signal` module, you may not be able to use logging from within such handlers. This is because lock implementations in the :mod:`threading` module are not always re-entrant, and so cannot be invoked from such signal handlers."
msgstr ""

msgid "Integration with the warnings module"
msgstr ""

msgid "The :func:`captureWarnings` function can be used to integrate :mod:`logging` with the :mod:`warnings` module."
msgstr ""

msgid "This function is used to turn the capture of warnings by logging on and off."
msgstr ""

msgid "If `capture` is `True`, warnings issued by the :mod:`warnings` module will be redirected to the logging system. Specifically, a warning will be formatted using :func:`warnings.formatwarning` and the resulting string logged to a logger named \"py.warnings\" with a severity of `WARNING`."
msgstr ""

msgid "If `capture` is `False`, the redirection of warnings to the logging system will stop, and warnings will be redirected to their original destinations (i.e. those in effect before `captureWarnings(True)` was called)."
msgstr ""

msgid "Configuration"
msgstr ""

msgid "Configuration functions"
msgstr ""

msgid "The following functions configure the logging module. They are located in the :mod:`logging.config` module.  Their use is optional --- you can configure the logging module using these functions or by making calls to the main API (defined in :mod:`logging` itself) and defining handlers which are declared either in :mod:`logging` or :mod:`logging.handlers`."
msgstr ""

msgid "Takes the logging configuration from a dictionary.  The contents of this dictionary are described in :ref:`logging-config-dictschema` below."
msgstr ""

msgid "If an error is encountered during configuration, this function will raise a :exc:`ValueError`, :exc:`TypeError`, :exc:`AttributeError` or :exc:`ImportError` with a suitably descriptive message.  The following is a (possibly incomplete) list of conditions which will raise an error:"
msgstr ""

msgid "A ``level`` which is not a string or which is a string not corresponding to an actual logging level."
msgstr ""

msgid "A ``propagate`` value which is not a boolean."
msgstr ""

msgid "An id which does not have a corresponding destination."
msgstr ""

msgid "A non-existent handler id found during an incremental call."
msgstr ""

msgid "An invalid logger name."
msgstr ""

msgid "Inability to resolve to an internal or external object."
msgstr ""

msgid "Parsing is performed by the :class:`DictConfigurator` class, whose constructor is passed the dictionary used for configuration, and has a :meth:`configure` method.  The :mod:`logging.config` module has a callable attribute :attr:`dictConfigClass` which is initially set to :class:`DictConfigurator`. You can replace the value of :attr:`dictConfigClass` with a suitable implementation of your own."
msgstr ""

msgid ":func:`dictConfig` calls :attr:`dictConfigClass` passing the specified dictionary, and then calls the :meth:`configure` method on the returned object to put the configuration into effect::"
msgstr ""

msgid "def dictConfig(config):     dictConfigClass(config).configure()"
msgstr ""

msgid "For example, a subclass of :class:`DictConfigurator` could call ``DictConfigurator.__init__()`` in its own :meth:`__init__()`, then set up custom prefixes which would be usable in the subsequent :meth:`configure` call. :attr:`dictConfigClass` would be bound to this new subclass, and then :func:`dictConfig` could be called exactly as in the default, uncustomized state."
msgstr ""

msgid "Reads the logging configuration from a :mod:`configparser`\\-format file named *fname*. This function can be called several times from an application, allowing an end user to select from various pre-canned configurations (if the developer provides a mechanism to present the choices and load the chosen configuration). Defaults to be passed to the ConfigParser can be specified in the *defaults* argument."
msgstr ""

msgid "Starts up a socket server on the specified port, and listens for new configurations. If no port is specified, the module's default :const:`DEFAULT_LOGGING_CONFIG_PORT` is used. Logging configurations will be sent as a file suitable for processing by :func:`fileConfig`. Returns a :class:`Thread` instance on which you can call :meth:`start` to start the server, and which you can :meth:`join` when appropriate. To stop the server, call :func:`stopListening`."
msgstr ""

msgid "To send a configuration to the socket, read in the configuration file and send it to the socket as a string of bytes preceded by a four-byte length string packed in binary using ``struct.pack('>L', n)``."
msgstr ""

msgid "Stops the listening server which was created with a call to :func:`listen`. This is typically called before calling :meth:`join` on the return value from :func:`listen`."
msgstr ""

msgid "Configuration dictionary schema"
msgstr ""

msgid "Describing a logging configuration requires listing the various objects to create and the connections between them; for example, you may create a handler named \"console\" and then say that the logger named \"startup\" will send its messages to the \"console\" handler. These objects aren't limited to those provided by the :mod:`logging` module because you might write your own formatter or handler class. The parameters to these classes may also need to include external objects such as ``sys.stderr``.  The syntax for describing these objects and connections is defined in :ref:`logging-config-dict-connections` below."
msgstr ""

msgid "Dictionary Schema Details"
msgstr ""

msgid "The dictionary passed to :func:`dictConfig` must contain the following keys:"
msgstr ""

msgid "`version` - to be set to an integer value representing the schema version.  The only valid value at present is 1, but having this key allows the schema to evolve while still preserving backwards compatibility."
msgstr ""

msgid "All other keys are optional, but if present they will be interpreted as described below.  In all cases below where a 'configuring dict' is mentioned, it will be checked for the special ``'()'`` key to see if a custom instantiation is required.  If so, the mechanism described in :ref:`logging-config-dict-userdef` below is used to create an instance; otherwise, the context is used to determine what to instantiate."
msgstr ""

msgid "`formatters` - the corresponding value will be a dict in which each key is a formatter id and each value is a dict describing how to configure the corresponding Formatter instance."
msgstr ""

msgid "The configuring dict is searched for keys ``format`` and ``datefmt`` (with defaults of ``None``) and these are used to construct a :class:`logging.Formatter` instance."
msgstr ""

msgid "`filters` - the corresponding value will be a dict in which each key is a filter id and each value is a dict describing how to configure the corresponding Filter instance."
msgstr ""

msgid "The configuring dict is searched for the key ``name`` (defaulting to the empty string) and this is used to construct a :class:`logging.Filter` instance."
msgstr ""

msgid "`handlers` - the corresponding value will be a dict in which each key is a handler id and each value is a dict describing how to configure the corresponding Handler instance."
msgstr ""

msgid "The configuring dict is searched for the following keys:"
msgstr ""

msgid "``class`` (mandatory).  This is the fully qualified name of the handler class."
msgstr ""

msgid "``level`` (optional).  The level of the handler."
msgstr ""

msgid "``formatter`` (optional).  The id of the formatter for this handler."
msgstr ""

msgid "``filters`` (optional).  A list of ids of the filters for this handler."
msgstr ""

msgid "All *other* keys are passed through as keyword arguments to the handler's constructor.  For example, given the snippet::"
msgstr ""

msgid "handlers:   console:     class : logging.StreamHandler     formatter: brief     level   : INFO     filters: [allow_foo]     stream  : ext://sys.stdout   file:     class : logging.handlers.RotatingFileHandler     formatter: precise     filename: logconfig.log     maxBytes: 1024     backupCount: 3"
msgstr ""

msgid "the handler with id ``console`` is instantiated as a :class:`logging.StreamHandler`, using ``sys.stdout`` as the underlying stream.  The handler with id ``file`` is instantiated as a :class:`logging.handlers.RotatingFileHandler` with the keyword arguments ``filename='logconfig.log', maxBytes=1024, backupCount=3``."
msgstr ""

msgid "`loggers` - the corresponding value will be a dict in which each key is a logger name and each value is a dict describing how to configure the corresponding Logger instance."
msgstr ""

msgid "``level`` (optional).  The level of the logger."
msgstr ""

msgid "``propagate`` (optional).  The propagation setting of the logger."
msgstr ""

msgid "``filters`` (optional).  A list of ids of the filters for this logger."
msgstr ""

msgid "``handlers`` (optional).  A list of ids of the handlers for this logger."
msgstr ""

msgid "The specified loggers will be configured according to the level, propagation, filters and handlers specified."
msgstr ""

msgid "`root` - this will be the configuration for the root logger. Processing of the configuration will be as for any logger, except that the ``propagate`` setting will not be applicable."
msgstr ""

msgid "`incremental` - whether the configuration is to be interpreted as incremental to the existing configuration.  This value defaults to ``False``, which means that the specified configuration replaces the existing configuration with the same semantics as used by the existing :func:`fileConfig` API."
msgstr ""

msgid "If the specified value is ``True``, the configuration is processed as described in the section on :ref:`logging-config-dict-incremental`."
msgstr ""

msgid "`disable_existing_loggers` - whether any existing loggers are to be disabled. This setting mirrors the parameter of the same name in :func:`fileConfig`. If absent, this parameter defaults to ``True``. This value is ignored if `incremental` is ``True``."
msgstr ""

msgid "Incremental Configuration"
msgstr ""

msgid "It is difficult to provide complete flexibility for incremental configuration.  For example, because objects such as filters and formatters are anonymous, once a configuration is set up, it is not possible to refer to such anonymous objects when augmenting a configuration."
msgstr ""

msgid "Furthermore, there is not a compelling case for arbitrarily altering the object graph of loggers, handlers, filters, formatters at run-time, once a configuration is set up; the verbosity of loggers and handlers can be controlled just by setting levels (and, in the case of loggers, propagation flags).  Changing the object graph arbitrarily in a safe way is problematic in a multi-threaded environment; while not impossible, the benefits are not worth the complexity it adds to the implementation."
msgstr ""

msgid "Thus, when the ``incremental`` key of a configuration dict is present and is ``True``, the system will completely ignore any ``formatters`` and ``filters`` entries, and process only the ``level`` settings in the ``handlers`` entries, and the ``level`` and ``propagate`` settings in the ``loggers`` and ``root`` entries."
msgstr ""

msgid "Using a value in the configuration dict lets configurations to be sent over the wire as pickled dicts to a socket listener. Thus, the logging verbosity of a long-running application can be altered over time with no need to stop and restart the application."
msgstr ""

msgid "Object connections"
msgstr ""

msgid "The schema describes a set of logging objects - loggers, handlers, formatters, filters - which are connected to each other in an object graph.  Thus, the schema needs to represent connections between the objects.  For example, say that, once configured, a particular logger has attached to it a particular handler.  For the purposes of this discussion, we can say that the logger represents the source, and the handler the destination, of a connection between the two.  Of course in the configured objects this is represented by the logger holding a reference to the handler.  In the configuration dict, this is done by giving each destination object an id which identifies it unambiguously, and then using the id in the source object's configuration to indicate that a connection exists between the source and the destination object with that id."
msgstr ""

msgid "So, for example, consider the following YAML snippet::"
msgstr ""

msgid "formatters:   brief:     # configuration for formatter with id 'brief' goes here   precise:     # configuration for formatter with id 'precise' goes here handlers:   h1: #This is an id    # configuration of handler with id 'h1' goes here    formatter: brief   h2: #This is another id    # configuration of handler with id 'h2' goes here    formatter: precise loggers:   foo.bar.baz:     # other configuration for logger 'foo.bar.baz'     handlers: [h1, h2]"
msgstr ""

msgid "(Note: YAML used here because it's a little more readable than the equivalent Python source form for the dictionary.)"
msgstr ""

msgid "The ids for loggers are the logger names which would be used programmatically to obtain a reference to those loggers, e.g. ``foo.bar.baz``.  The ids for Formatters and Filters can be any string value (such as ``brief``, ``precise`` above) and they are transient, in that they are only meaningful for processing the configuration dictionary and used to determine connections between objects, and are not persisted anywhere when the configuration call is complete."
msgstr ""

msgid "The above snippet indicates that logger named ``foo.bar.baz`` should have two handlers attached to it, which are described by the handler ids ``h1`` and ``h2``. The formatter for ``h1`` is that described by id ``brief``, and the formatter for ``h2`` is that described by id ``precise``."
msgstr ""

msgid "User-defined objects"
msgstr ""

msgid "The schema supports user-defined objects for handlers, filters and formatters.  (Loggers do not need to have different types for different instances, so there is no support in this configuration schema for user-defined logger classes.)"
msgstr ""

msgid "Objects to be configured are described by dictionaries which detail their configuration.  In some places, the logging system will be able to infer from the context how an object is to be instantiated, but when a user-defined object is to be instantiated, the system will not know how to do this.  In order to provide complete flexibility for user-defined object instantiation, the user needs to provide a 'factory' - a callable which is called with a configuration dictionary and which returns the instantiated object. This is signalled by an absolute import path to the factory being made available under the special key ``'()'``.  Here's a concrete example::"
msgstr ""

msgid "formatters:   brief:     format: '%(message)s'   default:     format: '%(asctime)s %(levelname)-8s %(name)-15s %(message)s'     datefmt: '%Y-%m-%d %H:%M:%S'   custom:       (): my.package.customFormatterFactory       bar: baz       spam: 99.9       answer: 42"
msgstr ""

msgid "The above YAML snippet defines three formatters.  The first, with id ``brief``, is a standard :class:`logging.Formatter` instance with the specified format string.  The second, with id ``default``, has a longer format and also defines the time format explicitly, and will result in a :class:`logging.Formatter` initialized with those two format strings.  Shown in Python source form, the ``brief`` and ``default`` formatters have configuration sub-dictionaries::"
msgstr ""

msgid "{   'format' : '%(message)s' }"
msgstr ""

msgid "and::"
msgstr ""

msgid "{   'format' : '%(asctime)s %(levelname)-8s %(name)-15s %(message)s',   'datefmt' : '%Y-%m-%d %H:%M:%S' }"
msgstr ""

msgid "respectively, and as these dictionaries do not contain the special key ``'()'``, the instantiation is inferred from the context: as a result, standard :class:`logging.Formatter` instances are created.  The configuration sub-dictionary for the third formatter, with id ``custom``, is::"
msgstr ""

msgid "{   '()' : 'my.package.customFormatterFactory',   'bar' : 'baz',   'spam' : 99.9,   'answer' : 42 }"
msgstr ""

msgid "and this contains the special key ``'()'``, which means that user-defined instantiation is wanted.  In this case, the specified factory callable will be used. If it is an actual callable it will be used directly - otherwise, if you specify a string (as in the example) the actual callable will be located using normal import mechanisms. The callable will be called with the **remaining** items in the configuration sub-dictionary as keyword arguments.  In the above example, the formatter with id ``custom`` will be assumed to be returned by the call::"
msgstr ""

msgid "my.package.customFormatterFactory(bar='baz', spam=99.9, answer=42)"
msgstr ""

msgid "The key ``'()'`` has been used as the special key because it is not a valid keyword parameter name, and so will not clash with the names of the keyword arguments used in the call.  The ``'()'`` also serves as a mnemonic that the corresponding value is a callable."
msgstr ""

msgid "Access to external objects"
msgstr ""

msgid "There are times where a configuration needs to refer to objects external to the configuration, for example ``sys.stderr``.  If the configuration dict is constructed using Python code, this is straightforward, but a problem arises when the configuration is provided via a text file (e.g. JSON, YAML).  In a text file, there is no standard way to distinguish ``sys.stderr`` from the literal string ``'sys.stderr'``.  To facilitate this distinction, the configuration system looks for certain special prefixes in string values and treat them specially.  For example, if the literal string ``'ext://sys.stderr'`` is provided as a value in the configuration, then the ``ext://`` will be stripped off and the remainder of the value processed using normal import mechanisms."
msgstr ""

msgid "The handling of such prefixes is done in a way analogous to protocol handling: there is a generic mechanism to look for prefixes which match the regular expression ``^(?P<prefix>[a-z]+)://(?P<suffix>.*)$`` whereby, if the ``prefix`` is recognised, the ``suffix`` is processed in a prefix-dependent manner and the result of the processing replaces the string value.  If the prefix is not recognised, then the string value will be left as-is."
msgstr ""

msgid "Access to internal objects"
msgstr ""

msgid "As well as external objects, there is sometimes also a need to refer to objects in the configuration.  This will be done implicitly by the configuration system for things that it knows about.  For example, the string value ``'DEBUG'`` for a ``level`` in a logger or handler will automatically be converted to the value ``logging.DEBUG``, and the ``handlers``, ``filters`` and ``formatter`` entries will take an object id and resolve to the appropriate destination object."
msgstr ""

msgid "However, a more generic mechanism is needed for user-defined objects which are not known to the :mod:`logging` module.  For example, consider :class:`logging.handlers.MemoryHandler`, which takes a ``target`` argument which is another handler to delegate to. Since the system already knows about this class, then in the configuration, the given ``target`` just needs to be the object id of the relevant target handler, and the system will resolve to the handler from the id.  If, however, a user defines a ``my.package.MyHandler`` which has an ``alternate`` handler, the configuration system would not know that the ``alternate`` referred to a handler.  To cater for this, a generic resolution system allows the user to specify::"
msgstr ""

msgid "handlers:   file:     # configuration of file handler goes here    custom:     (): my.package.MyHandler     alternate: cfg://handlers.file"
msgstr ""

msgid "The literal string ``'cfg://handlers.file'`` will be resolved in an analogous way to strings with the ``ext://`` prefix, but looking in the configuration itself rather than the import namespace.  The mechanism allows access by dot or by index, in a similar way to that provided by ``str.format``.  Thus, given the following snippet::"
msgstr ""

msgid "handlers:   email:     class: logging.handlers.SMTPHandler     mailhost: localhost     fromaddr: my_app@domain.tld     toaddrs:       - support_team@domain.tld       - dev_team@domain.tld     subject: Houston, we have a problem."
msgstr ""

msgid "in the configuration, the string ``'cfg://handlers'`` would resolve to the dict with key ``handlers``, the string ``'cfg://handlers.email`` would resolve to the dict with key ``email`` in the ``handlers`` dict, and so on.  The string ``'cfg://handlers.email.toaddrs[1]`` would resolve to ``'dev_team.domain.tld'`` and the string ``'cfg://handlers.email.toaddrs[0]'`` would resolve to the value ``'support_team@domain.tld'``. The ``subject`` value could be accessed using either ``'cfg://handlers.email.subject'`` or, equivalently, ``'cfg://handlers.email[subject]'``.  The latter form only needs to be used if the key contains spaces or non-alphanumeric characters.  If an index value consists only of decimal digits, access will be attempted using the corresponding integer value, falling back to the string value if needed."
msgstr ""

msgid "Given a string ``cfg://handlers.myhandler.mykey.123``, this will resolve to ``config_dict['handlers']['myhandler']['mykey']['123']``. If the string is specified as ``cfg://handlers.myhandler.mykey[123]``, the system will attempt to retrieve the value from ``config_dict['handlers']['myhandler']['mykey'][123]``, and fall back to ``config_dict['handlers']['myhandler']['mykey']['123']`` if that fails."
msgstr ""

msgid "Configuration file format"
msgstr ""

msgid "The configuration file format understood by :func:`fileConfig` is based on :mod:`configparser` functionality. The file must contain sections called ``[loggers]``, ``[handlers]`` and ``[formatters]`` which identify by name the entities of each type which are defined in the file. For each such entity, there is a separate section which identifies how that entity is configured.  Thus, for a logger named ``log01`` in the ``[loggers]`` section, the relevant configuration details are held in a section ``[logger_log01]``. Similarly, a handler called ``hand01`` in the ``[handlers]`` section will have its configuration held in a section called ``[handler_hand01]``, while a formatter called ``form01`` in the ``[formatters]`` section will have its configuration specified in a section called ``[formatter_form01]``. The root logger configuration must be specified in a section called ``[logger_root]``."
msgstr ""

msgid "Examples of these sections in the file are given below. ::"
msgstr ""

msgid "[loggers] keys=root,log02,log03,log04,log05,log06,log07  [handlers] keys=hand01,hand02,hand03,hand04,hand05,hand06,hand07,hand08,hand09  [formatters] keys=form01,form02,form03,form04,form05,form06,form07,form08,form09"
msgstr ""

msgid "The root logger must specify a level and a list of handlers. An example of a root logger section is given below. ::"
msgstr ""

msgid "[logger_root] level=NOTSET handlers=hand01"
msgstr ""

msgid "The ``level`` entry can be one of ``DEBUG, INFO, WARNING, ERROR, CRITICAL`` or ``NOTSET``. For the root logger only, ``NOTSET`` means that all messages will be logged. Level values are :func:`eval`\\ uated in the context of the ``logging`` package's namespace."
msgstr ""

msgid "The ``handlers`` entry is a comma-separated list of handler names, which must appear in the ``[handlers]`` section. These names must appear in the ``[handlers]`` section and have corresponding sections in the configuration file."
msgstr ""

msgid "For loggers other than the root logger, some additional information is required. This is illustrated by the following example. ::"
msgstr ""

msgid "[logger_parser] level=DEBUG handlers=hand01 propagate=1 qualname=compiler.parser"
msgstr ""

msgid "The ``level`` and ``handlers`` entries are interpreted as for the root logger, except that if a non-root logger's level is specified as ``NOTSET``, the system consults loggers higher up the hierarchy to determine the effective level of the logger. The ``propagate`` entry is set to 1 to indicate that messages must propagate to handlers higher up the logger hierarchy from this logger, or 0 to indicate that messages are **not** propagated to handlers up the hierarchy. The ``qualname`` entry is the hierarchical channel name of the logger, that is to say the name used by the application to get the logger."
msgstr ""

msgid "Sections which specify handler configuration are exemplified by the following. ::"
msgstr ""

msgid "[handler_hand01] class=StreamHandler level=NOTSET formatter=form01 args=(sys.stdout,)"
msgstr ""

msgid "The ``class`` entry indicates the handler's class (as determined by :func:`eval` in the ``logging`` package's namespace). The ``level`` is interpreted as for loggers, and ``NOTSET`` is taken to mean \"log everything\"."
msgstr ""

msgid "The ``formatter`` entry indicates the key name of the formatter for this handler. If blank, a default formatter (``logging._defaultFormatter``) is used. If a name is specified, it must appear in the ``[formatters]`` section and have a corresponding section in the configuration file."
msgstr ""

msgid "The ``args`` entry, when :func:`eval`\\ uated in the context of the ``logging`` package's namespace, is the list of arguments to the constructor for the handler class. Refer to the constructors for the relevant handlers, or to the examples below, to see how typical entries are constructed. ::"
msgstr ""

msgid "[handler_hand02] class=FileHandler level=DEBUG formatter=form02 args=('python.log', 'w')  [handler_hand03] class=handlers.SocketHandler level=INFO formatter=form03 args=('localhost', handlers.DEFAULT_TCP_LOGGING_PORT)  [handler_hand04] class=handlers.DatagramHandler level=WARN formatter=form04 args=('localhost', handlers.DEFAULT_UDP_LOGGING_PORT)  [handler_hand05] class=handlers.SysLogHandler level=ERROR formatter=form05 args=(('localhost', handlers.SYSLOG_UDP_PORT), handlers.SysLogHandler.LOG_USER)  [handler_hand06] class=handlers.NTEventLogHandler level=CRITICAL formatter=form06 args=('Python Application', '', 'Application')  [handler_hand07] class=handlers.SMTPHandler level=WARN formatter=form07 args=('localhost', 'from@abc', ['user1@abc', 'user2@xyz'], 'Logger Subject')  [handler_hand08] class=handlers.MemoryHandler level=NOTSET formatter=form08 target= args=(10, ERROR)  [handler_hand09] class=handlers.HTTPHandler level=NOTSET formatter=form09 args=('localhost:9022', '/log', 'GET')"
msgstr ""

msgid "Sections which specify formatter configuration are typified by the following. ::"
msgstr ""

msgid "[formatter_form01] format=F1 %(asctime)s %(levelname)s %(message)s datefmt= class=logging.Formatter"
msgstr ""

msgid "The ``format`` entry is the overall format string, and the ``datefmt`` entry is the :func:`strftime`\\ -compatible date/time format string.  If empty, the package substitutes ISO8601 format date/times, which is almost equivalent to specifying the date format string ``\"%Y-%m-%d %H:%M:%S\"``.  The ISO8601 format also specifies milliseconds, which are appended to the result of using the above format string, with a comma separator.  An example time in ISO8601 format is ``2003-01-23 00:29:50,411``."
msgstr ""

msgid "The ``class`` entry is optional.  It indicates the name of the formatter's class (as a dotted module and class name.)  This option is useful for instantiating a :class:`Formatter` subclass.  Subclasses of :class:`Formatter` can present exception tracebacks in an expanded or condensed format."
msgstr ""

msgid "Configuration server example"
msgstr ""

msgid "Here is an example of a module using the logging configuration server::"
msgstr ""

msgid "import logging import logging.config import time import os  # read initial config file logging.config.fileConfig(\"logging.conf\")  # create and start listener on port 9999 t = logging.config.listen(9999) t.start()  logger = logging.getLogger(\"simpleExample\")  try:     # loop through logging calls to see the difference     # new configurations make, until Ctrl+C is pressed     while True:         logger.debug(\"debug message\")         logger.info(\"info message\")         logger.warn(\"warn message\")         logger.error(\"error message\")         logger.critical(\"critical message\")         time.sleep(5) except KeyboardInterrupt:     # cleanup     logging.config.stopListening()     t.join()"
msgstr ""

msgid "And here is a script that takes a filename and sends that file to the server, properly preceded with the binary-encoded length, as the new logging configuration::"
msgstr ""

msgid "#!/usr/bin/env python import socket, sys, struct  data_to_send = open(sys.argv[1], \"r\").read()  HOST = 'localhost' PORT = 9999 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) print(\"connecting...\") s.connect((HOST, PORT)) print(\"sending config...\") s.send(struct.pack(\">L\", len(data_to_send))) s.send(data_to_send) s.close() print(\"complete\")"
msgstr ""

msgid "More examples"
msgstr ""

msgid "Multiple handlers and formatters"
msgstr ""

msgid "Loggers are plain Python objects.  The :func:`addHandler` method has no minimum or maximum quota for the number of handlers you may add.  Sometimes it will be beneficial for an application to log all messages of all severities to a text file while simultaneously logging errors or above to the console.  To set this up, simply configure the appropriate handlers.  The logging calls in the application code will remain unchanged.  Here is a slight modification to the previous simple module-based configuration example::"
msgstr ""

msgid "import logging  logger = logging.getLogger(\"simple_example\") logger.setLevel(logging.DEBUG) # create file handler which logs even debug messages fh = logging.FileHandler(\"spam.log\") fh.setLevel(logging.DEBUG) # create console handler with a higher log level ch = logging.StreamHandler() ch.setLevel(logging.ERROR) # create formatter and add it to the handlers formatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\") ch.setFormatter(formatter) fh.setFormatter(formatter) # add the handlers to logger logger.addHandler(ch) logger.addHandler(fh)  # \"application\" code logger.debug(\"debug message\") logger.info(\"info message\") logger.warn(\"warn message\") logger.error(\"error message\") logger.critical(\"critical message\")"
msgstr ""

msgid "Notice that the \"application\" code does not care about multiple handlers.  All that changed was the addition and configuration of a new handler named *fh*."
msgstr ""

msgid "The ability to create new handlers with higher- or lower-severity filters can be very helpful when writing and testing an application.  Instead of using many ``print`` statements for debugging, use ``logger.debug``: Unlike the print statements, which you will have to delete or comment out later, the logger.debug statements can remain intact in the source code and remain dormant until you need them again.  At that time, the only change that needs to happen is to modify the severity level of the logger and/or handler to debug."
msgstr ""

msgid "Using logging in multiple modules"
msgstr ""

msgid "It was mentioned above that multiple calls to ``logging.getLogger('someLogger')`` return a reference to the same logger object.  This is true not only within the same module, but also across modules as long as it is in the same Python interpreter process.  It is true for references to the same object; additionally, application code can define and configure a parent logger in one module and create (but not configure) a child logger in a separate module, and all logger calls to the child will pass up to the parent.  Here is a main module::"
msgstr ""

msgid "import logging import auxiliary_module  # create logger with \"spam_application\" logger = logging.getLogger(\"spam_application\") logger.setLevel(logging.DEBUG) # create file handler which logs even debug messages fh = logging.FileHandler(\"spam.log\") fh.setLevel(logging.DEBUG) # create console handler with a higher log level ch = logging.StreamHandler() ch.setLevel(logging.ERROR) # create formatter and add it to the handlers formatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\") fh.setFormatter(formatter) ch.setFormatter(formatter) # add the handlers to the logger logger.addHandler(fh) logger.addHandler(ch)  logger.info(\"creating an instance of auxiliary_module.Auxiliary\") a = auxiliary_module.Auxiliary() logger.info(\"created an instance of auxiliary_module.Auxiliary\") logger.info(\"calling auxiliary_module.Auxiliary.do_something\") a.do_something() logger.info(\"finished auxiliary_module.Auxiliary.do_something\") logger.info(\"calling auxiliary_module.some_function()\") auxiliary_module.some_function() logger.info(\"done with auxiliary_module.some_function()\")"
msgstr ""

msgid "Here is the auxiliary module::"
msgstr ""

msgid "import logging  # create logger module_logger = logging.getLogger(\"spam_application.auxiliary\")  class Auxiliary:     def __init__(self):         self.logger = logging.getLogger(\"spam_application.auxiliary.Auxiliary\")         self.logger.info(\"creating an instance of Auxiliary\")     def do_something(self):         self.logger.info(\"doing something\")         a = 1 + 1         self.logger.info(\"done doing something\")  def some_function():     module_logger.info(\"received a call to \\\"some_function\\\"\")"
msgstr ""

msgid "The output looks like this::"
msgstr ""

msgid "2005-03-23 23:47:11,663 - spam_application - INFO -    creating an instance of auxiliary_module.Auxiliary 2005-03-23 23:47:11,665 - spam_application.auxiliary.Auxiliary - INFO -    creating an instance of Auxiliary 2005-03-23 23:47:11,665 - spam_application - INFO -    created an instance of auxiliary_module.Auxiliary 2005-03-23 23:47:11,668 - spam_application - INFO -    calling auxiliary_module.Auxiliary.do_something 2005-03-23 23:47:11,668 - spam_application.auxiliary.Auxiliary - INFO -    doing something 2005-03-23 23:47:11,669 - spam_application.auxiliary.Auxiliary - INFO -    done doing something 2005-03-23 23:47:11,670 - spam_application - INFO -    finished auxiliary_module.Auxiliary.do_something 2005-03-23 23:47:11,671 - spam_application - INFO -    calling auxiliary_module.some_function() 2005-03-23 23:47:11,672 - spam_application.auxiliary - INFO -    received a call to \"some_function\" 2005-03-23 23:47:11,673 - spam_application - INFO -    done with auxiliary_module.some_function()"
msgstr ""

msgid ":mod:`macpath` --- Mac OS 9 path manipulation functions"
msgstr ""

msgid "This module is the Mac OS 9 (and earlier) implementation of the :mod:`os.path` module. It can be used to manipulate old-style Macintosh pathnames on Mac OS X (or any other platform)."
msgstr ""

msgid "The following functions are available in this module: :func:`normcase`, :func:`normpath`, :func:`isabs`, :func:`join`, :func:`split`, :func:`isdir`, :func:`isfile`, :func:`walk`, :func:`exists`. For other functions available in :mod:`os.path` dummy counterparts are available."
msgstr ""

msgid ":mod:`mailbox` --- Manipulate mailboxes in various formats"
msgstr ""

msgid "This module defines two classes, :class:`Mailbox` and :class:`Message`, for accessing and manipulating on-disk mailboxes and the messages they contain. :class:`Mailbox` offers a dictionary-like mapping from keys to messages. :class:`Message` extends the :mod:`email.Message` module's :class:`Message` class with format-specific state and behavior. Supported mailbox formats are Maildir, mbox, MH, Babyl, and MMDF."
msgstr ""

msgid "Represent and manipulate messages."
msgstr ""

msgid ":class:`Mailbox` objects"
msgstr ""

msgid "A mailbox, which may be inspected and modified."
msgstr ""

msgid "The :class:`Mailbox` class defines an interface and is not intended to be instantiated.  Instead, format-specific subclasses should inherit from :class:`Mailbox` and your code should instantiate a particular subclass."
msgstr ""

msgid "The :class:`Mailbox` interface is dictionary-like, with small keys corresponding to messages. Keys are issued by the :class:`Mailbox` instance with which they will be used and are only meaningful to that :class:`Mailbox` instance. A key continues to identify a message even if the corresponding message is modified, such as by replacing it with another message."
msgstr ""

msgid "Messages may be added to a :class:`Mailbox` instance using the set-like method :meth:`add` and removed using a ``del`` statement or the set-like methods :meth:`remove` and :meth:`discard`."
msgstr ""

msgid ":class:`Mailbox` interface semantics differ from dictionary semantics in some noteworthy ways. Each time a message is requested, a new representation (typically a :class:`Message` instance) is generated based upon the current state of the mailbox. Similarly, when a message is added to a :class:`Mailbox` instance, the provided message representation's contents are copied. In neither case is a reference to the message representation kept by the :class:`Mailbox` instance."
msgstr ""

msgid "The default :class:`Mailbox` iterator iterates over message representations, not keys as the default dictionary iterator does. Moreover, modification of a mailbox during iteration is safe and well-defined. Messages added to the mailbox after an iterator is created will not be seen by the iterator. Messages removed from the mailbox before the iterator yields them will be silently skipped, though using a key from an iterator may result in a :exc:`KeyError` exception if the corresponding message is subsequently removed."
msgstr ""

msgid "Be very cautious when modifying mailboxes that might be simultaneously changed by some other process.  The safest mailbox format to use for such tasks is Maildir; try to avoid using single-file formats such as mbox for concurrent writing.  If you're modifying a mailbox, you *must* lock it by calling the :meth:`lock` and :meth:`unlock` methods *before* reading any messages in the file or making any changes by adding or deleting a message.  Failing to lock the mailbox runs the risk of losing messages or corrupting the entire mailbox."
msgstr ""

msgid ":class:`Mailbox` instances have the following methods:"
msgstr ""

msgid "Add *message* to the mailbox and return the key that has been assigned to it."
msgstr ""

msgid "Parameter *message* may be a :class:`Message` instance, an :class:`email.Message.Message` instance, a string, or a file-like object (which should be open in text mode). If *message* is an instance of the appropriate format-specific :class:`Message` subclass (e.g., if it's an :class:`mboxMessage` instance and this is an :class:`mbox` instance), its format-specific information is used. Otherwise, reasonable defaults for format-specific information are used."
msgstr ""

msgid "Delete the message corresponding to *key* from the mailbox."
msgstr ""

msgid "If no such message exists, a :exc:`KeyError` exception is raised if the method was called as :meth:`remove` or :meth:`__delitem__` but no exception is raised if the method was called as :meth:`discard`. The behavior of :meth:`discard` may be preferred if the underlying mailbox format supports concurrent modification by other processes."
msgstr ""

msgid "Replace the message corresponding to *key* with *message*. Raise a :exc:`KeyError` exception if no message already corresponds to *key*."
msgstr ""

msgid "As with :meth:`add`, parameter *message* may be a :class:`Message` instance, an :class:`email.Message.Message` instance, a string, or a file-like object (which should be open in text mode). If *message* is an instance of the appropriate format-specific :class:`Message` subclass (e.g., if it's an :class:`mboxMessage` instance and this is an :class:`mbox` instance), its format-specific information is used. Otherwise, the format-specific information of the message that currently corresponds to *key* is left unchanged."
msgstr ""

msgid "Return an iterator over all keys if called as :meth:`iterkeys` or return a list of keys if called as :meth:`keys`."
msgstr ""

msgid "Return an iterator over representations of all messages if called as :meth:`itervalues` or :meth:`__iter__` or return a list of such representations if called as :meth:`values`. The messages are represented as instances of the appropriate format-specific :class:`Message` subclass unless a custom message factory was specified when the :class:`Mailbox` instance was initialized."
msgstr ""

msgid "The behavior of :meth:`__iter__` is unlike that of dictionaries, which iterate over keys."
msgstr ""

msgid "Return an iterator over (*key*, *message*) pairs, where *key* is a key and *message* is a message representation, if called as :meth:`iteritems` or return a list of such pairs if called as :meth:`items`. The messages are represented as instances of the appropriate format-specific :class:`Message` subclass unless a custom message factory was specified when the :class:`Mailbox` instance was initialized."
msgstr ""

msgid "Return a representation of the message corresponding to *key*. If no such message exists, *default* is returned if the method was called as :meth:`get` and a :exc:`KeyError` exception is raised if the method was called as :meth:`__getitem__`. The message is represented as an instance of the appropriate format-specific :class:`Message` subclass unless a custom message factory was specified when the :class:`Mailbox` instance was initialized."
msgstr ""

msgid "Return a representation of the message corresponding to *key* as an instance of the appropriate format-specific :class:`Message` subclass, or raise a :exc:`KeyError` exception if no such message exists."
msgstr ""

msgid "Return a string representation of the message corresponding to *key*, or raise a :exc:`KeyError` exception if no such message exists."
msgstr ""

msgid "Return a file-like representation of the message corresponding to *key*, or raise a :exc:`KeyError` exception if no such message exists. The file-like object behaves as if open in binary mode. This file should be closed once it is no longer needed."
msgstr ""

msgid "Unlike other representations of messages, file-like representations are not necessarily independent of the :class:`Mailbox` instance that created them or of the underlying mailbox. More specific documentation is provided by each subclass."
msgstr ""

msgid "Return ``True`` if *key* corresponds to a message, ``False`` otherwise."
msgstr ""

msgid "Return a count of messages in the mailbox."
msgstr ""

msgid "Delete all messages from the mailbox."
msgstr ""

msgid "Return a representation of the message corresponding to *key* and delete the message. If no such message exists, return *default*. The message is represented as an instance of the appropriate format-specific :class:`Message` subclass unless a custom message factory was specified when the :class:`Mailbox` instance was initialized."
msgstr ""

msgid "Return an arbitrary (*key*, *message*) pair, where *key* is a key and *message* is a message representation, and delete the corresponding message. If the mailbox is empty, raise a :exc:`KeyError` exception. The message is represented as an instance of the appropriate format-specific :class:`Message` subclass unless a custom message factory was specified when the :class:`Mailbox` instance was initialized."
msgstr ""

msgid "Parameter *arg* should be a *key*-to-*message* mapping or an iterable of (*key*, *message*) pairs. Updates the mailbox so that, for each given *key* and *message*, the message corresponding to *key* is set to *message* as if by using :meth:`__setitem__`. As with :meth:`__setitem__`, each *key* must already correspond to a message in the mailbox or else a :exc:`KeyError` exception will be raised, so in general it is incorrect for *arg* to be a :class:`Mailbox` instance."
msgstr ""

msgid "Unlike with dictionaries, keyword arguments are not supported."
msgstr ""

msgid "Write any pending changes to the filesystem. For some :class:`Mailbox` subclasses, changes are always written immediately and :meth:`flush` does nothing, but you should still make a habit of calling this method."
msgstr ""

msgid "Acquire an exclusive advisory lock on the mailbox so that other processes know not to modify it. An :exc:`ExternalClashError` is raised if the lock is not available. The particular locking mechanisms used depend upon the mailbox format.  You should *always* lock the mailbox before making any modifications to its contents."
msgstr ""

msgid "Release the lock on the mailbox, if any."
msgstr ""

msgid "Flush the mailbox, unlock it if necessary, and close any open files. For some :class:`Mailbox` subclasses, this method does nothing."
msgstr ""

msgid ":class:`Maildir`"
msgstr ""

msgid "A subclass of :class:`Mailbox` for mailboxes in Maildir format. Parameter *factory* is a callable object that accepts a file-like message representation (which behaves as if opened in binary mode) and returns a custom representation. If *factory* is ``None``, :class:`MaildirMessage` is used as the default message representation. If *create* is ``True``, the mailbox is created if it does not exist."
msgstr ""

msgid "It is for historical reasons that *dirname* is named as such rather than *path*."
msgstr ""

msgid "Maildir is a directory-based mailbox format invented for the qmail mail transfer agent and now widely supported by other programs. Messages in a Maildir mailbox are stored in separate files within a common directory structure. This design allows Maildir mailboxes to be accessed and modified by multiple unrelated programs without data corruption, so file locking is unnecessary."
msgstr ""

msgid "Maildir mailboxes contain three subdirectories, namely: :file:`tmp`, :file:`new`, and :file:`cur`. Messages are created momentarily in the :file:`tmp` subdirectory and then moved to the :file:`new` subdirectory to finalize delivery. A mail user agent may subsequently move the message to the :file:`cur` subdirectory and store information about the state of the message in a special \"info\" section appended to its file name."
msgstr ""

msgid "Folders of the style introduced by the Courier mail transfer agent are also supported. Any subdirectory of the main mailbox is considered a folder if ``'.'`` is the first character in its name. Folder names are represented by :class:`Maildir` without the leading ``'.'``. Each folder is itself a Maildir mailbox but should not contain other folders. Instead, a logical nesting is indicated using ``'.'`` to delimit levels, e.g., \"Archived.2005.07\"."
msgstr ""

msgid "The Maildir specification requires the use of a colon (``':'``) in certain message file names. However, some operating systems do not permit this character in file names, If you wish to use a Maildir-like format on such an operating system, you should specify another character to use instead. The exclamation point (``'!'``) is a popular choice. For example::"
msgstr ""

msgid "import mailbox mailbox.Maildir.colon = '!'"
msgstr ""

msgid "The :attr:`colon` attribute may also be set on a per-instance basis."
msgstr ""

msgid ":class:`Maildir` instances have all of the methods of :class:`Mailbox` in addition to the following:"
msgstr ""

msgid "Return a list of the names of all folders."
msgstr ""

msgid "Return a :class:`Maildir` instance representing the folder whose name is *folder*. A :exc:`NoSuchMailboxError` exception is raised if the folder does not exist."
msgstr ""

msgid "Create a folder whose name is *folder* and return a :class:`Maildir` instance representing it."
msgstr ""

msgid "Delete the folder whose name is *folder*. If the folder contains any messages, a :exc:`NotEmptyError` exception will be raised and the folder will not be deleted."
msgstr ""

msgid "Delete temporary files from the mailbox that have not been accessed in the last 36 hours. The Maildir specification says that mail-reading programs should do this occasionally."
msgstr ""

msgid "Some :class:`Mailbox` methods implemented by :class:`Maildir` deserve special remarks:"
msgstr ""

msgid "These methods generate unique file names based upon the current process ID. When using multiple threads, undetected name clashes may occur and cause corruption of the mailbox unless threads are coordinated to avoid using these methods to manipulate the same mailbox simultaneously."
msgstr ""

msgid "All changes to Maildir mailboxes are immediately applied, so this method does nothing."
msgstr ""

msgid "Maildir mailboxes do not support (or require) locking, so these methods do nothing."
msgstr ""

msgid ":class:`Maildir` instances do not keep any open files and the underlying mailboxes do not support locking, so this method does nothing."
msgstr ""

msgid "Depending upon the host platform, it may not be possible to modify or remove the underlying message while the returned file remains open."
msgstr ""

msgid "The original specification of the format."
msgstr ""

msgid "Notes on Maildir by its inventor. Includes an updated name-creation scheme and details on \"info\" semantics."
msgstr ""

msgid "Another specification of the format. Describes a common extension for supporting folders."
msgstr ""

msgid ":class:`mbox`"
msgstr ""

msgid "A subclass of :class:`Mailbox` for mailboxes in mbox format. Parameter *factory* is a callable object that accepts a file-like message representation (which behaves as if opened in binary mode) and returns a custom representation. If *factory* is ``None``, :class:`mboxMessage` is used as the default message representation. If *create* is ``True``, the mailbox is created if it does not exist."
msgstr ""

msgid "The mbox format is the classic format for storing mail on Unix systems. All messages in an mbox mailbox are stored in a single file with the beginning of each message indicated by a line whose first five characters are \"From \"."
msgstr ""

msgid "Several variations of the mbox format exist to address perceived shortcomings in the original. In the interest of compatibility, :class:`mbox` implements the original format, which is sometimes referred to as :dfn:`mboxo`. This means that the :mailheader:`Content-Length` header, if present, is ignored and that any occurrences of \"From \" at the beginning of a line in a message body are transformed to \">From \" when storing the message, although occurrences of \">From \" are not transformed to \"From \" when reading the message."
msgstr ""

msgid "Some :class:`Mailbox` methods implemented by :class:`mbox` deserve special remarks:"
msgstr ""

msgid "Using the file after calling :meth:`flush` or :meth:`close` on the :class:`mbox` instance may yield unpredictable results or raise an exception."
msgstr ""

msgid "Three locking mechanisms are used---dot locking and, if available, the :cfunc:`flock` and :cfunc:`lockf` system calls."
msgstr ""

msgid "A specification of the format and its variations."
msgstr ""

msgid "Another specification of the format, with details on locking."
msgstr ""

msgid "An argument for using the original mbox format rather than a variation."
msgstr ""

msgid "A history of mbox variations."
msgstr ""

msgid ":class:`MH`"
msgstr ""

msgid "A subclass of :class:`Mailbox` for mailboxes in MH format. Parameter *factory* is a callable object that accepts a file-like message representation (which behaves as if opened in binary mode) and returns a custom representation. If *factory* is ``None``, :class:`MHMessage` is used as the default message representation. If *create* is ``True``, the mailbox is created if it does not exist."
msgstr ""

msgid "MH is a directory-based mailbox format invented for the MH Message Handling System, a mail user agent. Each message in an MH mailbox resides in its own file. An MH mailbox may contain other MH mailboxes (called :dfn:`folders`) in addition to messages. Folders may be nested indefinitely. MH mailboxes also support :dfn:`sequences`, which are named lists used to logically group messages without moving them to sub-folders. Sequences are defined in a file called :file:`.mh_sequences` in each folder."
msgstr ""

msgid "The :class:`MH` class manipulates MH mailboxes, but it does not attempt to emulate all of :program:`mh`'s behaviors. In particular, it does not modify and is not affected by the :file:`context` or :file:`.mh_profile` files that are used by :program:`mh` to store its state and configuration."
msgstr ""

msgid ":class:`MH` instances have all of the methods of :class:`Mailbox` in addition to the following:"
msgstr ""

msgid "Return an :class:`MH` instance representing the folder whose name is *folder*. A :exc:`NoSuchMailboxError` exception is raised if the folder does not exist."
msgstr ""

msgid "Create a folder whose name is *folder* and return an :class:`MH` instance representing it."
msgstr ""

msgid "Return a dictionary of sequence names mapped to key lists. If there are no sequences, the empty dictionary is returned."
msgstr ""

msgid "Re-define the sequences that exist in the mailbox based upon *sequences*, a dictionary of names mapped to key lists, like returned by :meth:`get_sequences`."
msgstr ""

msgid "Rename messages in the mailbox as necessary to eliminate gaps in numbering.  Entries in the sequences list are updated correspondingly."
msgstr ""

msgid "Already-issued keys are invalidated by this operation and should not be subsequently used."
msgstr ""

msgid "Some :class:`Mailbox` methods implemented by :class:`MH` deserve special remarks:"
msgstr ""

msgid "These methods immediately delete the message. The MH convention of marking a message for deletion by prepending a comma to its name is not used."
msgstr ""

msgid "Three locking mechanisms are used---dot locking and, if available, the :cfunc:`flock` and :cfunc:`lockf` system calls. For MH mailboxes, locking the mailbox means locking the :file:`.mh_sequences` file and, only for the duration of any operations that affect them, locking individual message files."
msgstr ""

msgid "Depending upon the host platform, it may not be possible to remove the underlying message while the returned file remains open."
msgstr ""

msgid "All changes to MH mailboxes are immediately applied, so this method does nothing."
msgstr ""

msgid ":class:`MH` instances do not keep any open files, so this method is equivalent to :meth:`unlock`."
msgstr ""

msgid "Home page of :program:`nmh`, an updated version of the original :program:`mh`."
msgstr ""

msgid "A GPL-licensed book on :program:`mh` and :program:`nmh`, with some information on the mailbox format."
msgstr ""

msgid ":class:`Babyl`"
msgstr ""

msgid "A subclass of :class:`Mailbox` for mailboxes in Babyl format. Parameter *factory* is a callable object that accepts a file-like message representation (which behaves as if opened in binary mode) and returns a custom representation. If *factory* is ``None``, :class:`BabylMessage` is used as the default message representation. If *create* is ``True``, the mailbox is created if it does not exist."
msgstr ""

msgid "Babyl is a single-file mailbox format used by the Rmail mail user agent included with Emacs. The beginning of a message is indicated by a line containing the two characters Control-Underscore (``'\\037'``) and Control-L (``'\\014'``). The end of a message is indicated by the start of the next message or, in the case of the last message, a line containing a Control-Underscore (``'\\037'``) character."
msgstr ""

msgid "Messages in a Babyl mailbox have two sets of headers, original headers and so-called visible headers. Visible headers are typically a subset of the original headers that have been reformatted or abridged to be more attractive. Each message in a Babyl mailbox also has an accompanying list of :dfn:`labels`, or short strings that record extra information about the message, and a list of all user-defined labels found in the mailbox is kept in the Babyl options section."
msgstr ""

msgid ":class:`Babyl` instances have all of the methods of :class:`Mailbox` in addition to the following:"
msgstr ""

msgid "Return a list of the names of all user-defined labels used in the mailbox."
msgstr ""

msgid "The actual messages are inspected to determine which labels exist in the mailbox rather than consulting the list of labels in the Babyl options section, but the Babyl section is updated whenever the mailbox is modified."
msgstr ""

msgid "Some :class:`Mailbox` methods implemented by :class:`Babyl` deserve special remarks:"
msgstr ""

msgid "In Babyl mailboxes, the headers of a message are not stored contiguously with the body of the message. To generate a file-like representation, the headers and body are copied together into a :class:`StringIO` instance (from the :mod:`StringIO` module), which has an API identical to that of a file. As a result, the file-like object is truly independent of the underlying mailbox but does not save memory compared to a string representation."
msgstr ""

msgid "A specification of the Babyl format."
msgstr ""

msgid "The Rmail manual, with some information on Babyl semantics."
msgstr ""

msgid ":class:`MMDF`"
msgstr ""

msgid "A subclass of :class:`Mailbox` for mailboxes in MMDF format. Parameter *factory* is a callable object that accepts a file-like message representation (which behaves as if opened in binary mode) and returns a custom representation. If *factory* is ``None``, :class:`MMDFMessage` is used as the default message representation. If *create* is ``True``, the mailbox is created if it does not exist."
msgstr ""

msgid "MMDF is a single-file mailbox format invented for the Multichannel Memorandum Distribution Facility, a mail transfer agent. Each message is in the same form as an mbox message but is bracketed before and after by lines containing four Control-A (``'\\001'``) characters. As with the mbox format, the beginning of each message is indicated by a line whose first five characters are \"From \", but additional occurrences of \"From \" are not transformed to \">From \" when storing messages because the extra message separator lines prevent mistaking such occurrences for the starts of subsequent messages."
msgstr ""

msgid "Some :class:`Mailbox` methods implemented by :class:`MMDF` deserve special remarks:"
msgstr ""

msgid "Using the file after calling :meth:`flush` or :meth:`close` on the :class:`MMDF` instance may yield unpredictable results or raise an exception."
msgstr ""

msgid "A specification of MMDF format from the documentation of tin, a newsreader."
msgstr ""

msgid "A Wikipedia article describing the Multichannel Memorandum Distribution Facility."
msgstr ""

msgid ":class:`Message` objects"
msgstr ""

msgid "A subclass of the :mod:`email.Message` module's :class:`Message`. Subclasses of :class:`mailbox.Message` add mailbox-format-specific state and behavior."
msgstr ""

msgid "If *message* is omitted, the new instance is created in a default, empty state. If *message* is an :class:`email.Message.Message` instance, its contents are copied; furthermore, any format-specific information is converted insofar as possible if *message* is a :class:`Message` instance. If *message* is a string or a file, it should contain an :rfc:`2822`\\ -compliant message, which is read and parsed."
msgstr ""

msgid "The format-specific state and behaviors offered by subclasses vary, but in general it is only the properties that are not specific to a particular mailbox that are supported (although presumably the properties are specific to a particular mailbox format). For example, file offsets for single-file mailbox formats and file names for directory-based mailbox formats are not retained, because they are only applicable to the original mailbox. But state such as whether a message has been read by the user or marked as important is retained, because it applies to the message itself."
msgstr ""

msgid "There is no requirement that :class:`Message` instances be used to represent messages retrieved using :class:`Mailbox` instances. In some situations, the time and memory required to generate :class:`Message` representations might not not acceptable. For such situations, :class:`Mailbox` instances also offer string and file-like representations, and a custom message factory may be specified when a :class:`Mailbox` instance is initialized."
msgstr ""

msgid ":class:`MaildirMessage`"
msgstr ""

msgid "A message with Maildir-specific behaviors. Parameter *message* has the same meaning as with the :class:`Message` constructor."
msgstr ""

msgid "Typically, a mail user agent application moves all of the messages in the :file:`new` subdirectory to the :file:`cur` subdirectory after the first time the user opens and closes the mailbox, recording that the messages are old whether or not they've actually been read. Each message in :file:`cur` has an \"info\" section added to its file name to store information about its state. (Some mail readers may also add an \"info\" section to messages in :file:`new`.)  The \"info\" section may take one of two forms: it may contain \"2,\" followed by a list of standardized flags (e.g., \"2,FR\") or it may contain \"1,\" followed by so-called experimental information. Standard flags for Maildir messages are as follows:"
msgstr ""

msgid "Flag"
msgstr ""

msgid "D"
msgstr ""

msgid "Draft"
msgstr ""

msgid "Under composition"
msgstr ""

msgid "F"
msgstr ""

msgid "Flagged"
msgstr ""

msgid "Marked as important"
msgstr ""

msgid "P"
msgstr ""

msgid "Passed"
msgstr ""

msgid "Forwarded, resent, or bounced"
msgstr ""

msgid "R"
msgstr ""

msgid "Replied"
msgstr ""

msgid "Replied to"
msgstr ""

msgid "S"
msgstr ""

msgid "Seen"
msgstr ""

msgid "Read"
msgstr ""

msgid "T"
msgstr ""

msgid "Trashed"
msgstr ""

msgid "Marked for subsequent deletion"
msgstr ""

msgid ":class:`MaildirMessage` instances offer the following methods:"
msgstr ""

msgid "Return either \"new\" (if the message should be stored in the :file:`new` subdirectory) or \"cur\" (if the message should be stored in the :file:`cur` subdirectory)."
msgstr ""

msgid "A message is typically moved from :file:`new` to :file:`cur` after its mailbox has been accessed, whether or not the message is has been read. A message ``msg`` has been read if ``\"S\" in msg.get_flags()`` is ``True``."
msgstr ""

msgid "Set the subdirectory the message should be stored in. Parameter *subdir* must be either \"new\" or \"cur\"."
msgstr ""

msgid "Return a string specifying the flags that are currently set. If the message complies with the standard Maildir format, the result is the concatenation in alphabetical order of zero or one occurrence of each of ``'D'``, ``'F'``, ``'P'``, ``'R'``, ``'S'``, and ``'T'``. The empty string is returned if no flags are set or if \"info\" contains experimental semantics."
msgstr ""

msgid "Set the flags specified by *flags* and unset all others."
msgstr ""

msgid "Set the flag(s) specified by *flag* without changing other flags. To add more than one flag at a time, *flag* may be a string of more than one character. The current \"info\" is overwritten whether or not it contains experimental information rather than flags."
msgstr ""

msgid "Unset the flag(s) specified by *flag* without changing other flags. To remove more than one flag at a time, *flag* maybe a string of more than one character.  If \"info\" contains experimental information rather than flags, the current \"info\" is not modified."
msgstr ""

msgid "Return the delivery date of the message as a floating-point number representing seconds since the epoch."
msgstr ""

msgid "Set the delivery date of the message to *date*, a floating-point number representing seconds since the epoch."
msgstr ""

msgid "Return a string containing the \"info\" for a message. This is useful for accessing and modifying \"info\" that is experimental (i.e., not a list of flags)."
msgstr ""

msgid "Set \"info\" to *info*, which should be a string."
msgstr ""

msgid "When a :class:`MaildirMessage` instance is created based upon an :class:`mboxMessage` or :class:`MMDFMessage` instance, the :mailheader:`Status` and :mailheader:`X-Status` headers are omitted and the following conversions take place:"
msgstr ""

msgid "Resulting state"
msgstr ""

msgid ":class:`mboxMessage` or :class:`MMDFMessage` state"
msgstr ""

msgid "\"cur\" subdirectory"
msgstr ""

msgid "O flag"
msgstr ""

msgid "F flag"
msgstr ""

msgid "R flag"
msgstr ""

msgid "A flag"
msgstr ""

msgid "S flag"
msgstr ""

msgid "T flag"
msgstr ""

msgid "D flag"
msgstr ""

msgid "When a :class:`MaildirMessage` instance is created based upon an :class:`MHMessage` instance, the following conversions take place:"
msgstr ""

msgid ":class:`MHMessage` state"
msgstr ""

msgid "\"unseen\" sequence"
msgstr ""

msgid "\"cur\" subdirectory and S flag"
msgstr ""

msgid "no \"unseen\" sequence"
msgstr ""

msgid "\"flagged\" sequence"
msgstr ""

msgid "\"replied\" sequence"
msgstr ""

msgid "When a :class:`MaildirMessage` instance is created based upon a :class:`BabylMessage` instance, the following conversions take place:"
msgstr ""

msgid ":class:`BabylMessage` state"
msgstr ""

msgid "\"unseen\" label"
msgstr ""

msgid "no \"unseen\" label"
msgstr ""

msgid "P flag"
msgstr ""

msgid "\"forwarded\" or \"resent\" label"
msgstr ""

msgid "\"answered\" label"
msgstr ""

msgid "\"deleted\" label"
msgstr ""

msgid ":class:`mboxMessage`"
msgstr ""

msgid "A message with mbox-specific behaviors. Parameter *message* has the same meaning as with the :class:`Message` constructor."
msgstr ""

msgid "Messages in an mbox mailbox are stored together in a single file. The sender's envelope address and the time of delivery are typically stored in a line beginning with \"From \" that is used to indicate the start of a message, though there is considerable variation in the exact format of this data among mbox implementations. Flags that indicate the state of the message, such as whether it has been read or marked as important, are typically stored in :mailheader:`Status` and :mailheader:`X-Status` headers."
msgstr ""

msgid "Conventional flags for mbox messages are as follows:"
msgstr ""

msgid "O"
msgstr ""

msgid "Old"
msgstr ""

msgid "Previously detected by MUA"
msgstr ""

msgid "Deleted"
msgstr ""

msgid "A"
msgstr ""

msgid "Answered"
msgstr ""

msgid "The \"R\" and \"O\" flags are stored in the :mailheader:`Status` header, and the \"D\", \"F\", and \"A\" flags are stored in the :mailheader:`X-Status` header. The flags and headers typically appear in the order mentioned."
msgstr ""

msgid ":class:`mboxMessage` instances offer the following methods:"
msgstr ""

msgid "Return a string representing the \"From \" line that marks the start of the message in an mbox mailbox. The leading \"From \" and the trailing newline are excluded."
msgstr ""

msgid "Set the \"From \" line to *from_*, which should be specified without a leading \"From \" or trailing newline. For convenience, *time_* may be specified and will be formatted appropriately and appended to *from_*. If *time_* is specified, it should be a :class:`struct_time` instance, a tuple suitable for passing to :meth:`time.strftime`, or ``True`` (to use :meth:`time.gmtime`)."
msgstr ""

msgid "Return a string specifying the flags that are currently set. If the message complies with the conventional format, the result is the concatenation in the following order of zero or one occurrence of each of ``'R'``, ``'O'``, ``'D'``, ``'F'``, and ``'A'``."
msgstr ""

msgid "Set the flags specified by *flags* and unset all others. Parameter *flags* should be the concatenation in any order of zero or more occurrences of each of ``'R'``, ``'O'``, ``'D'``, ``'F'``, and ``'A'``."
msgstr ""

msgid "Set the flag(s) specified by *flag* without changing other flags. To add more than one flag at a time, *flag* may be a string of more than one character."
msgstr ""

msgid "Unset the flag(s) specified by *flag* without changing other flags. To remove more than one flag at a time, *flag* maybe a string of more than one character."
msgstr ""

msgid "When an :class:`mboxMessage` instance is created based upon a :class:`MaildirMessage` instance, a \"From \" line is generated based upon the :class:`MaildirMessage` instance's delivery date, and the following conversions take place:"
msgstr ""

msgid ":class:`MaildirMessage` state"
msgstr ""

msgid "When an :class:`mboxMessage` instance is created based upon an :class:`MHMessage` instance, the following conversions take place:"
msgstr ""

msgid "R flag and O flag"
msgstr ""

msgid "When an :class:`mboxMessage` instance is created based upon a :class:`BabylMessage` instance, the following conversions take place:"
msgstr ""

msgid "When a :class:`Message` instance is created based upon an :class:`MMDFMessage` instance, the \"From \" line is copied and all flags directly correspond:"
msgstr ""

msgid ":class:`MMDFMessage` state"
msgstr ""

msgid ":class:`MHMessage`"
msgstr ""

msgid "A message with MH-specific behaviors. Parameter *message* has the same meaning as with the :class:`Message` constructor."
msgstr ""

msgid "MH messages do not support marks or flags in the traditional sense, but they do support sequences, which are logical groupings of arbitrary messages. Some mail reading programs (although not the standard :program:`mh` and :program:`nmh`) use sequences in much the same way flags are used with other formats, as follows:"
msgstr ""

msgid "Sequence"
msgstr ""

msgid "unseen"
msgstr ""

msgid "Not read, but previously detected by MUA"
msgstr ""

msgid "replied"
msgstr ""

msgid "flagged"
msgstr ""

msgid ":class:`MHMessage` instances offer the following methods:"
msgstr ""

msgid "Return a list of the names of sequences that include this message."
msgstr ""

msgid "Set the list of sequences that include this message."
msgstr ""

msgid "Add *sequence* to the list of sequences that include this message."
msgstr ""

msgid "Remove *sequence* from the list of sequences that include this message."
msgstr ""

msgid "When an :class:`MHMessage` instance is created based upon a :class:`MaildirMessage` instance, the following conversions take place:"
msgstr ""

msgid "no S flag"
msgstr ""

msgid "When an :class:`MHMessage` instance is created based upon an :class:`mboxMessage` or :class:`MMDFMessage` instance, the :mailheader:`Status` and :mailheader:`X-Status` headers are omitted and the following conversions take place:"
msgstr ""

msgid "no R flag"
msgstr ""

msgid "When an :class:`MHMessage` instance is created based upon a :class:`BabylMessage` instance, the following conversions take place:"
msgstr ""

msgid ":class:`BabylMessage`"
msgstr ""

msgid "A message with Babyl-specific behaviors. Parameter *message* has the same meaning as with the :class:`Message` constructor."
msgstr ""

msgid "Certain message labels, called :dfn:`attributes`, are defined by convention to have special meanings. The attributes are as follows:"
msgstr ""

msgid "Label"
msgstr ""

msgid "deleted"
msgstr ""

msgid "filed"
msgstr ""

msgid "Copied to another file or mailbox"
msgstr ""

msgid "answered"
msgstr ""

msgid "forwarded"
msgstr ""

msgid "Forwarded"
msgstr ""

msgid "edited"
msgstr ""

msgid "Modified by the user"
msgstr ""

msgid "resent"
msgstr ""

msgid "Resent"
msgstr ""

msgid "By default, Rmail displays only visible headers. The :class:`BabylMessage` class, though, uses the original headers because they are more complete. Visible headers may be accessed explicitly if desired."
msgstr ""

msgid ":class:`BabylMessage` instances offer the following methods:"
msgstr ""

msgid "Return a list of labels on the message."
msgstr ""

msgid "Set the list of labels on the message to *labels*."
msgstr ""

msgid "Add *label* to the list of labels on the message."
msgstr ""

msgid "Remove *label* from the list of labels on the message."
msgstr ""

msgid "Return an :class:`Message` instance whose headers are the message's visible headers and whose body is empty."
msgstr ""

msgid "Set the message's visible headers to be the same as the headers in *message*.  Parameter *visible* should be a :class:`Message` instance, an :class:`email.Message.Message` instance, a string, or a file-like object (which should be open in text mode)."
msgstr ""

msgid "When a :class:`BabylMessage` instance's original headers are modified, the visible headers are not automatically modified to correspond. This method updates the visible headers as follows: each visible header with a corresponding original header is set to the value of the original header, each visible header without a corresponding original header is removed, and any of :mailheader:`Date`, :mailheader:`From`, :mailheader:`Reply-To`, :mailheader:`To`, :mailheader:`CC`, and :mailheader:`Subject` that are present in the original headers but not the visible headers are added to the visible headers."
msgstr ""

msgid "When a :class:`BabylMessage` instance is created based upon a :class:`MaildirMessage` instance, the following conversions take place:"
msgstr ""

msgid "\"forwarded\" label"
msgstr ""

msgid "When a :class:`BabylMessage` instance is created based upon an :class:`mboxMessage` or :class:`MMDFMessage` instance, the :mailheader:`Status` and :mailheader:`X-Status` headers are omitted and the following conversions take place:"
msgstr ""

msgid "When a :class:`BabylMessage` instance is created based upon an :class:`MHMessage` instance, the following conversions take place:"
msgstr ""

msgid ":class:`MMDFMessage`"
msgstr ""

msgid "A message with MMDF-specific behaviors. Parameter *message* has the same meaning as with the :class:`Message` constructor."
msgstr ""

msgid "As with message in an mbox mailbox, MMDF messages are stored with the sender's address and the delivery date in an initial line beginning with \"From \".  Likewise, flags that indicate the state of the message are typically stored in :mailheader:`Status` and :mailheader:`X-Status` headers."
msgstr ""

msgid "Conventional flags for MMDF messages are identical to those of mbox message and are as follows:"
msgstr ""

msgid ":class:`MMDFMessage` instances offer the following methods, which are identical to those offered by :class:`mboxMessage`:"
msgstr ""

msgid "When an :class:`MMDFMessage` instance is created based upon a :class:`MaildirMessage` instance, a \"From \" line is generated based upon the :class:`MaildirMessage` instance's delivery date, and the following conversions take place:"
msgstr ""

msgid "When an :class:`MMDFMessage` instance is created based upon an :class:`MHMessage` instance, the following conversions take place:"
msgstr ""

msgid "When an :class:`MMDFMessage` instance is created based upon a :class:`BabylMessage` instance, the following conversions take place:"
msgstr ""

msgid "When an :class:`MMDFMessage` instance is created based upon an :class:`mboxMessage` instance, the \"From \" line is copied and all flags directly correspond:"
msgstr ""

msgid ":class:`mboxMessage` state"
msgstr ""

msgid "Exceptions"
msgstr ""

msgid "The following exception classes are defined in the :mod:`mailbox` module:"
msgstr ""

msgid "The based class for all other module-specific exceptions."
msgstr ""

msgid "Raised when a mailbox is expected but is not found, such as when instantiating a :class:`Mailbox` subclass with a path that does not exist (and with the *create* parameter set to ``False``), or when opening a folder that does not exist."
msgstr ""

msgid "Raised when a mailbox is not empty but is expected to be, such as when deleting a folder that contains messages."
msgstr ""

msgid "Raised when some mailbox-related condition beyond the control of the program causes it to be unable to proceed, such as when failing to acquire a lock that another program already holds a lock, or when a uniquely-generated file name already exists."
msgstr ""

msgid "Raised when the data in a file cannot be parsed, such as when an :class:`MH` instance attempts to read a corrupted :file:`.mh_sequences` file."
msgstr ""

msgid "A simple example of printing the subjects of all messages in a mailbox that seem interesting::"
msgstr ""

msgid "import mailbox for message in mailbox.mbox('~/mbox'):     subject = message['subject']       # Could possibly be None.     if subject and 'python' in subject.lower():         print(subject)"
msgstr ""

msgid "To copy all mail from a Babyl mailbox to an MH mailbox, converting all of the format-specific information that can be converted::"
msgstr ""

msgid "import mailbox destination = mailbox.MH('~/Mail') destination.lock() for message in mailbox.Babyl('~/RMAIL'):     destination.add(mailbox.MHMessage(message)) destination.flush() destination.unlock()"
msgstr ""

msgid "This example sorts mail from several mailing lists into different mailboxes, being careful to avoid mail corruption due to concurrent modification by other programs, mail loss due to interruption of the program, or premature termination due to malformed messages in the mailbox::"
msgstr ""

msgid "import mailbox import email.Errors  list_names = ('python-list', 'python-dev', 'python-bugs')  boxes = {name: mailbox.mbox('~/email/%s' % name) for name in list_names} inbox = mailbox.Maildir('~/Maildir', factory=None)  for key in inbox.iterkeys():     try:         message = inbox[key]     except email.Errors.MessageParseError:         continue                # The message is malformed. Just leave it.      for name in list_names:         list_id = message['list-id']         if list_id and name in list_id:             # Get mailbox to use             box = boxes[name]              # Write copy to disk before removing original.             # If there's a crash, you might duplicate a message, but             # that's better than losing a message completely.             box.lock()             box.add(message)             box.flush()             box.unlock()              # Remove original message             inbox.lock()             inbox.discard(key)             inbox.flush()             inbox.unlock()             break               # Found destination, so stop looking.  for box in boxes.itervalues():     box.close()"
msgstr ""

msgid ":mod:`mailcap` --- Mailcap file handling"
msgstr ""

msgid "Mailcap files are used to configure how MIME-aware applications such as mail readers and Web browsers react to files with different MIME types. (The name \"mailcap\" is derived from the phrase \"mail capability\".)  For example, a mailcap file might contain a line like ``video/mpeg; xmpeg %s``.  Then, if the user encounters an email message or Web document with the MIME type :mimetype:`video/mpeg`, ``%s`` will be replaced by a filename (usually one belonging to a temporary file) and the :program:`xmpeg` program can be automatically started to view the file."
msgstr ""

msgid "The mailcap format is documented in :rfc:`1524`, \"A User Agent Configuration Mechanism For Multimedia Mail Format Information,\" but is not an Internet standard.  However, mailcap files are supported on most Unix systems."
msgstr ""

msgid "Return a 2-tuple; the first element is a string containing the command line to be executed (which can be passed to :func:`os.system`), and the second element is the mailcap entry for a given MIME type.  If no matching MIME type can be found, ``(None, None)`` is returned."
msgstr ""

msgid "*key* is the name of the field desired, which represents the type of activity to be performed; the default value is 'view', since in the  most common case you simply want to view the body of the MIME-typed data.  Other possible values might be 'compose' and 'edit', if you wanted to create a new body of the given MIME type or alter the existing body data.  See :rfc:`1524` for a complete list of these fields."
msgstr ""

msgid "*filename* is the filename to be substituted for ``%s`` in the command line; the default value is ``'/dev/null'`` which is almost certainly not what you want, so usually you'll override it by specifying a filename."
msgstr ""

msgid "*plist* can be a list containing named parameters; the default value is simply an empty list.  Each entry in the list must be a string containing the parameter name, an equals sign (``'='``), and the parameter's value.  Mailcap entries can contain  named parameters like ``%{foo}``, which will be replaced by the value of the parameter named 'foo'.  For example, if the command line ``showpartial %{id} %{number} %{total}`` was in a mailcap file, and *plist* was set to ``['id=1', 'number=2', 'total=3']``, the resulting command line would be ``'showpartial 1 2 3'``."
msgstr ""

msgid "In a mailcap file, the \"test\" field can optionally be specified to test some external condition (such as the machine architecture, or the window system in use) to determine whether or not the mailcap line applies.  :func:`findmatch` will automatically check such conditions and skip the entry if the check fails."
msgstr ""

msgid "Returns a dictionary mapping MIME types to a list of mailcap file entries. This dictionary must be passed to the :func:`findmatch` function.  An entry is stored as a list of dictionaries, but it shouldn't be necessary to know the details of this representation."
msgstr ""

msgid "The information is derived from all of the mailcap files found on the system. Settings in the user's mailcap file :file:`$HOME/.mailcap` will override settings in the system mailcap files :file:`/etc/mailcap`, :file:`/usr/etc/mailcap`, and :file:`/usr/local/etc/mailcap`."
msgstr ""

msgid "An example usage::"
msgstr ""

msgid ">>> import mailcap >>> d=mailcap.getcaps() >>> mailcap.findmatch(d, 'video/mpeg', filename='/tmp/tmp1223') ('xmpeg /tmp/tmp1223', {'view': 'xmpeg %s'})"
msgstr ""

msgid "Structured Markup Processing Tools"
msgstr ""

msgid "Python supports a variety of modules to work with various forms of structured data markup.  This includes modules to work with the Standard Generalized Markup Language (SGML) and the Hypertext Markup Language (HTML), and several interfaces for working with the Extensible Markup Language (XML)."
msgstr ""

msgid "It is important to note that modules in the :mod:`xml` package require that there be at least one SAX-compliant XML parser available. The Expat parser is included with Python, so the :mod:`xml.parsers.expat` module will always be available."
msgstr ""

msgid "The documentation for the :mod:`xml.dom` and :mod:`xml.sax` packages are the definition of the Python bindings for the DOM and SAX interfaces."
msgstr ""

msgid ":mod:`marshal` --- Internal Python object serialization"
msgstr ""

msgid "This module contains functions that can read and write Python values in a binary format.  The format is specific to Python, but independent of machine architecture issues (e.g., you can write a Python value to a file on a PC, transport the file to a Sun, and read it back there).  Details of the format are undocumented on purpose; it may change between Python versions (although it rarely does). [#]_"
msgstr ""

msgid "This is not a general \"persistence\" module.  For general persistence and transfer of Python objects through RPC calls, see the modules :mod:`pickle` and :mod:`shelve`.  The :mod:`marshal` module exists mainly to support reading and writing the \"pseudo-compiled\" code for Python modules of :file:`.pyc` files. Therefore, the Python maintainers reserve the right to modify the marshal format in backward incompatible ways should the need arise.  If you're serializing and de-serializing Python objects, use the :mod:`pickle` module instead -- the performance is comparable, version independence is guaranteed, and pickle supports a substantially wider range of objects than marshal."
msgstr ""

msgid "The :mod:`marshal` module is not intended to be secure against erroneous or maliciously constructed data.  Never unmarshal data received from an untrusted or unauthenticated source."
msgstr ""

msgid "Not all Python object types are supported; in general, only objects whose value is independent from a particular invocation of Python can be written and read by this module.  The following types are supported: booleans, integers, floating point numbers, complex numbers, strings, bytes, bytearrays, tuples, lists, sets, frozensets, dictionaries, and code objects, where it should be understood that tuples, lists, sets, frozensets and dictionaries are only supported as long as the values contained therein are themselves supported; and recursive lists, sets and dictionaries should not be written (they will cause infinite loops).  The singletons :const:`None`, :const:`Ellipsis` and :exc:`StopIteration` can also be marshalled and unmarshalled."
msgstr ""

msgid "There are functions that read/write files as well as functions operating on strings."
msgstr ""

msgid "The module defines these functions:"
msgstr ""

msgid "Write the value on the open file.  The value must be a supported type.  The file must be an open file object such as ``sys.stdout`` or returned by :func:`open` or :func:`os.popen`.  It must be opened in binary mode (``'wb'`` or ``'w+b'``)."
msgstr ""

msgid "If the value has (or contains an object that has) an unsupported type, a :exc:`ValueError` exception is raised --- but garbage data will also be written to the file.  The object will not be properly read back by :func:`load`."
msgstr ""

msgid "The *version* argument indicates the data format that ``dump`` should use (see below)."
msgstr ""

msgid "Read one value from the open file and return it.  If no valid value is read (e.g. because the data has a different Python version's incompatible marshal format), raise :exc:`EOFError`, :exc:`ValueError` or :exc:`TypeError`.  The file must be an open file object opened in binary mode (``'rb'`` or ``'r+b'``)."
msgstr ""

msgid "If an object containing an unsupported type was marshalled with :func:`dump`, :func:`load` will substitute ``None`` for the unmarshallable type."
msgstr ""

msgid "Return the string that would be written to a file by ``dump(value, file)``.  The value must be a supported type.  Raise a :exc:`ValueError` exception if value has (or contains an object that has) an unsupported type."
msgstr ""

msgid "The *version* argument indicates the data format that ``dumps`` should use (see below)."
msgstr ""

msgid "Convert the string to a value.  If no valid value is found, raise :exc:`EOFError`, :exc:`ValueError` or :exc:`TypeError`.  Extra characters in the string are ignored."
msgstr ""

msgid "In addition, the following constants are defined:"
msgstr ""

msgid "Indicates the format that the module uses. Version 0 is the historical format, version 1 shares interned strings and version 2 uses a binary format for floating point numbers. The current version is 2."
msgstr ""

msgid "The name of this module stems from a bit of terminology used by the designers of Modula-3 (amongst others), who use the term \"marshalling\" for shipping of data around in a self-contained form. Strictly speaking, \"to marshal\" means to convert some data from internal to external form (in an RPC buffer for instance) and \"unmarshalling\" for the reverse process."
msgstr ""

msgid ":mod:`math` --- Mathematical functions"
msgstr ""

msgid "This module is always available.  It provides access to the mathematical functions defined by the C standard."
msgstr ""

msgid "These functions cannot be used with complex numbers; use the functions of the same name from the :mod:`cmath` module if you require support for complex numbers.  The distinction between functions which support complex numbers and those which don't is made since most users do not want to learn quite as much mathematics as required to understand complex numbers.  Receiving an exception instead of a complex result allows earlier detection of the unexpected complex number used as a parameter, so that the programmer can determine how and why it was generated in the first place."
msgstr ""

msgid "The following functions are provided by this module.  Except when explicitly noted otherwise, all return values are floats."
msgstr ""

msgid "Number-theoretic and representation functions"
msgstr ""

msgid "Return the ceiling of *x*, the smallest integer greater than or equal to *x*. If *x* is not a float, delegates to ``x.__ceil__()``, which should return an :class:`Integral` value."
msgstr ""

msgid "Return *x* with the sign of *y*.  On a platform that supports signed zeros, ``copysign(1.0, -0.0)`` returns *-1.0*."
msgstr ""

msgid "Return the absolute value of *x*."
msgstr ""

msgid "Return *x* factorial.  Raises :exc:`ValueError` if *x* is not integral or is negative."
msgstr ""

msgid "Return the floor of *x*, the largest integer less than or equal to *x*. If *x* is not a float, delegates to ``x.__floor__()``, which should return an :class:`Integral` value."
msgstr ""

msgid "Return ``fmod(x, y)``, as defined by the platform C library. Note that the Python expression ``x % y`` may not return the same result.  The intent of the C standard is that ``fmod(x, y)`` be exactly (mathematically; to infinite precision) equal to ``x - n*y`` for some integer *n* such that the result has the same sign as *x* and magnitude less than ``abs(y)``.  Python's ``x % y`` returns a result with the sign of *y* instead, and may not be exactly computable for float arguments. For example, ``fmod(-1e-100, 1e100)`` is ``-1e-100``, but the result of Python's ``-1e-100 % 1e100`` is ``1e100-1e-100``, which cannot be represented exactly as a float, and rounds to the surprising ``1e100``.  For this reason, function :func:`fmod` is generally preferred when working with floats, while Python's ``x % y`` is preferred when working with integers."
msgstr ""

msgid "Return the mantissa and exponent of *x* as the pair ``(m, e)``.  *m* is a float and *e* is an integer such that ``x == m * 2**e`` exactly. If *x* is zero, returns ``(0.0, 0)``, otherwise ``0.5 <= abs(m) < 1``.  This is used to \"pick apart\" the internal representation of a float in a portable way."
msgstr ""

msgid "Return an accurate floating point sum of values in the iterable.  Avoids loss of precision by tracking multiple intermediate partial sums::"
msgstr ""

msgid ">>> sum([.1, .1, .1, .1, .1, .1, .1, .1, .1, .1]) 0.9999999999999999 >>> fsum([.1, .1, .1, .1, .1, .1, .1, .1, .1, .1]) 1.0"
msgstr ""

msgid "The algorithm's accuracy depends on IEEE-754 arithmetic guarantees and the typical case where the rounding mode is half-even.  On some non-Windows builds, the underlying C library uses extended precision addition and may occasionally double-round an intermediate sum causing it to be off in its least significant bit."
msgstr ""

msgid "For further discussion and two alternative approaches, see the `ASPN cookbook recipes for accurate floating point summation <http://code.activestate.com/recipes/393090/>`_\\."
msgstr ""

msgid "Check if the float *x* is positive or negative infinity."
msgstr ""

msgid "Check if the float *x* is a NaN (not a number).  For more information on NaNs, see the IEEE 754 standards."
msgstr ""

msgid "Return ``x * (2**i)``.  This is essentially the inverse of function :func:`frexp`."
msgstr ""

msgid "Return the fractional and integer parts of *x*.  Both results carry the sign of *x* and are floats."
msgstr ""

msgid "Return the :class:`Real` value *x* truncated to an :class:`Integral` (usually an integer). Delegates to ``x.__trunc__()``."
msgstr ""

msgid "Note that :func:`frexp` and :func:`modf` have a different call/return pattern than their C equivalents: they take a single argument and return a pair of values, rather than returning their second return value through an 'output parameter' (there is no such thing in Python)."
msgstr ""

msgid "For the :func:`ceil`, :func:`floor`, and :func:`modf` functions, note that *all* floating-point numbers of sufficiently large magnitude are exact integers. Python floats typically carry no more than 53 bits of precision (the same as the platform C double type), in which case any float *x* with ``abs(x) >= 2**52`` necessarily has no fractional bits."
msgstr ""

msgid "Return ``e**x``."
msgstr ""

msgid "Return ``e**x - 1``.  For small floats *x*, the subtraction in ``exp(x) - 1`` can result in a significant loss of precision; the :func:`expm1` function provides a way to compute this quantity to full precision::"
msgstr ""

msgid ">>> from math import exp, expm1 >>> exp(1e-5) - 1  # gives result accurate to 11 places 1.0000050000069649e-05 >>> expm1(1e-5)    # result accurate to full precision 1.0000050000166668e-05"
msgstr ""

msgid "With one argument, return the natural logarithm of *x* (to base *e*)."
msgstr ""

msgid "With two arguments, return the logarithm of *x* to the given *base*, calculated as ``log(x)/log(base)``."
msgstr ""

msgid "Return the natural logarithm of *1+x* (base *e*). The result is calculated in a way which is accurate for *x* near zero."
msgstr ""

msgid "Return the base-10 logarithm of *x*.  This is usually more accurate than ``log(x, 10)``."
msgstr ""

msgid "Return ``x`` raised to the power ``y``.  Exceptional cases follow Annex 'F' of the C99 standard as far as possible.  In particular, ``pow(1.0, x)`` and ``pow(x, 0.0)`` always return ``1.0``, even when ``x`` is a zero or a NaN.  If both ``x`` and ``y`` are finite, ``x`` is negative, and ``y`` is not an integer then ``pow(x, y)`` is undefined, and raises :exc:`ValueError`."
msgstr ""

msgid "Return the square root of *x*."
msgstr ""

msgid "Return the arc cosine of *x*, in radians."
msgstr ""

msgid "Return the arc sine of *x*, in radians."
msgstr ""

msgid "Return the arc tangent of *x*, in radians."
msgstr ""

msgid "Return ``atan(y / x)``, in radians. The result is between ``-pi`` and ``pi``. The vector in the plane from the origin to point ``(x, y)`` makes this angle with the positive X axis. The point of :func:`atan2` is that the signs of both inputs are known to it, so it can compute the correct quadrant for the angle. For example, ``atan(1)`` and ``atan2(1, 1)`` are both ``pi/4``, but ``atan2(-1, -1)`` is ``-3*pi/4``."
msgstr ""

msgid "Return the cosine of *x* radians."
msgstr ""

msgid "Return the Euclidean norm, ``sqrt(x*x + y*y)``. This is the length of the vector from the origin to point ``(x, y)``."
msgstr ""

msgid "Return the sine of *x* radians."
msgstr ""

msgid "Return the tangent of *x* radians."
msgstr ""

msgid "Angular conversion"
msgstr ""

msgid "Converts angle *x* from radians to degrees."
msgstr ""

msgid "Converts angle *x* from degrees to radians."
msgstr ""

msgid "Return the inverse hyperbolic cosine of *x*."
msgstr ""

msgid "Return the inverse hyperbolic sine of *x*."
msgstr ""

msgid "Return the inverse hyperbolic tangent of *x*."
msgstr ""

msgid "Special functions"
msgstr ""

msgid "Return the error function at *x*."
msgstr ""

msgid "Return the complementary error function at *x*."
msgstr ""

msgid "Return the Gamma function at *x*."
msgstr ""

msgid "Return the natural logarithm of the absolute value of the Gamma function at *x*."
msgstr ""

msgid "The mathematical constant π = 3.141592..., to available precision."
msgstr ""

msgid "The mathematical constant e = 2.718281..., to available precision."
msgstr ""

msgid "The :mod:`math` module consists mostly of thin wrappers around the platform C math library functions.  Behavior in exceptional cases follows Annex F of the C99 standard where appropriate.  The current implementation will raise :exc:`ValueError` for invalid operations like ``sqrt(-1.0)`` or ``log(0.0)`` (where C99 Annex F recommends signaling invalid operation or divide-by-zero), and :exc:`OverflowError` for results that overflow (for example, ``exp(1000.0)``).  A NaN will not be returned from any of the functions above unless one or more of the input arguments was a NaN; in that case, most functions will return a NaN, but (again following C99 Annex F) there are some exceptions to this rule, for example ``pow(float('nan'), 0.0)`` or ``hypot(float('nan'), float('inf'))``."
msgstr ""

msgid "Note that Python makes no effort to distinguish signaling NaNs from quiet NaNs, and behavior for signaling NaNs remains unspecified. Typical behavior is to treat all NaNs as though they were quiet."
msgstr ""

msgid "Complex number versions of many of these functions."
msgstr ""

msgid ":mod:`mimetypes` --- Map filenames to MIME types"
msgstr ""

msgid "The :mod:`mimetypes` module converts between a filename or URL and the MIME type associated with the filename extension.  Conversions are provided from filename to MIME type and from MIME type to filename extension; encodings are not supported for the latter conversion."
msgstr ""

msgid "The module provides one class and a number of convenience functions. The functions are the normal interface to this module, but some applications may be interested in the class as well."
msgstr ""

msgid "The functions described below provide the primary interface for this module.  If the module has not been initialized, they will call :func:`init` if they rely on the information :func:`init` sets up."
msgstr ""

msgid "Guess the type of a file based on its filename or URL, given by *filename*.  The return value is a tuple ``(type, encoding)`` where *type* is ``None`` if the type can't be guessed (missing or unknown suffix) or a string of the form ``'type/subtype'``, usable for a MIME :mailheader:`content-type` header."
msgstr ""

msgid "*encoding* is ``None`` for no encoding or the name of the program used to encode (e.g. :program:`compress` or :program:`gzip`). The encoding is suitable for use as a :mailheader:`Content-Encoding` header, *not* as a :mailheader:`Content-Transfer-Encoding` header. The mappings are table driven. Encoding suffixes are case sensitive; type suffixes are first tried case sensitively, then case insensitively."
msgstr ""

msgid "Optional *strict* is a flag specifying whether the list of known MIME types is limited to only the official types `registered with IANA <http://www.iana.org/assignments/media-types/>`_ are recognized. When *strict* is true (the default), only the IANA types are supported; when *strict* is false, some additional non-standard but commonly used MIME types are also recognized."
msgstr ""

msgid "Guess the extensions for a file based on its MIME type, given by *type*. The return value is a list of strings giving all possible filename extensions, including the leading dot (``'.'``).  The extensions are not guaranteed to have been associated with any particular data stream, but would be mapped to the MIME type *type* by :func:`guess_type`."
msgstr ""

msgid "Optional *strict* has the same meaning as with the :func:`guess_type` function."
msgstr ""

msgid "Guess the extension for a file based on its MIME type, given by *type*. The return value is a string giving a filename extension, including the leading dot (``'.'``).  The extension is not guaranteed to have been associated with any particular data stream, but would be mapped to the  MIME type *type* by :func:`guess_type`.  If no extension can be guessed for *type*, ``None`` is returned."
msgstr ""

msgid "Some additional functions and data items are available for controlling the behavior of the module."
msgstr ""

msgid "Initialize the internal data structures.  If given, *files* must be a sequence of file names which should be used to augment the default type map.  If omitted, the file names to use are taken from :const:`knownfiles`; on Windows, the current registry settings are loaded.  Each file named in *files* or :const:`knownfiles` takes precedence over those named before it.  Calling :func:`init` repeatedly is allowed."
msgstr ""

msgid "Load the type map given in the file *filename*, if it exists.  The  type map is returned as a dictionary mapping filename extensions, including the leading dot (``'.'``), to strings of the form ``'type/subtype'``.  If the file *filename* does not exist or cannot be read, ``None`` is returned."
msgstr ""

msgid "Add a mapping from the mimetype *type* to the extension *ext*. When the extension is already known, the new type will replace the old one. When the type is already known the extension will be added to the list of known extensions."
msgstr ""

msgid "When *strict* is True (the default), the mapping will added to the official MIME types, otherwise to the non-standard ones."
msgstr ""

msgid "Flag indicating whether or not the global data structures have been initialized. This is set to true by :func:`init`."
msgstr ""

msgid "List of type map file names commonly installed.  These files are typically named :file:`mime.types` and are installed in different locations by different packages."
msgstr ""

msgid "Dictionary mapping suffixes to suffixes.  This is used to allow recognition of encoded files for which the encoding and the type are indicated by the same extension.  For example, the :file:`.tgz` extension is mapped to :file:`.tar.gz` to allow the encoding and type to be recognized separately."
msgstr ""

msgid "Dictionary mapping filename extensions to encoding types."
msgstr ""

msgid "Dictionary mapping filename extensions to MIME types."
msgstr ""

msgid "Dictionary mapping filename extensions to non-standard, but commonly found MIME types."
msgstr ""

msgid "The :class:`MimeTypes` class may be useful for applications which may want more than one MIME-type database:"
msgstr ""

msgid "This class represents a MIME-types database.  By default, it provides access to the same database as the rest of this module. The initial database is a copy of that provided by the module, and may be extended by loading additional :file:`mime.types`\\ -style files into the database using the :meth:`read` or :meth:`readfp` methods.  The mapping dictionaries may also be cleared before loading additional data if the default data is not desired."
msgstr ""

msgid "The optional *filenames* parameter can be used to cause additional files to be loaded \"on top\" of the default database."
msgstr ""

msgid "An example usage of the module::"
msgstr ""

msgid ">>> import mimetypes >>> mimetypes.init() >>> mimetypes.knownfiles ['/etc/mime.types', '/etc/httpd/mime.types', ... ] >>> mimetypes.suffix_map['.tgz'] '.tar.gz' >>> mimetypes.encodings_map['.gz'] 'gzip' >>> mimetypes.types_map['.tgz'] 'application/x-tar-gz'"
msgstr ""

msgid "MimeTypes Objects"
msgstr ""

msgid ":class:`MimeTypes` instances provide an interface which is very like that of the :mod:`mimetypes` module."
msgstr ""

msgid "Dictionary mapping suffixes to suffixes.  This is used to allow recognition of encoded files for which the encoding and the type are indicated by the same extension.  For example, the :file:`.tgz` extension is mapped to :file:`.tar.gz` to allow the encoding and type to be recognized separately.  This is initially a copy of the global ``suffix_map`` defined in the module."
msgstr ""

msgid "Dictionary mapping filename extensions to encoding types.  This is initially a copy of the global ``encodings_map`` defined in the module."
msgstr ""

msgid "Dictionary mapping filename extensions to MIME types.  This is initially a copy of the global ``types_map`` defined in the module."
msgstr ""

msgid "Dictionary mapping filename extensions to non-standard, but commonly found MIME types.  This is initially a copy of the global ``common_types`` defined in the module."
msgstr ""

msgid "Similar to the :func:`guess_extension` function, using the tables stored as part of the object."
msgstr ""

msgid "Similar to the :func:`guess_type` function, using the tables stored as part of the object."
msgstr ""

msgid "Load MIME information from a file named *path*.  This uses :meth:`readfp` to parse the file."
msgstr ""

msgid "Load MIME type information from an open file.  The file must have the format of the standard :file:`mime.types` files."
msgstr ""

msgid "Load MIME type information from the Windows registry.  Availability: Windows."
msgstr ""

msgid "Miscellaneous Services"
msgstr ""

msgid "The modules described in this chapter provide miscellaneous services that are available in all Python versions.  Here's an overview:"
msgstr ""

msgid "Multimedia Services"
msgstr ""

msgid "The modules described in this chapter implement various algorithms or interfaces that are mainly useful for multimedia applications.  They are available at the discretion of the installation.  Here's an overview:"
msgstr ""

msgid ":mod:`mmap` --- Memory-mapped file support"
msgstr ""

msgid "Memory-mapped file objects behave like both :class:`bytes` and like file objects. Unlike normal :class:`bytes` objects, however, these are mutable. You can use mmap objects in most places where :class:`bytes` are expected; for example, you can use the :mod:`re` module to search through a memory-mapped file. Since they're mutable, you can change a single byte by doing ``obj[index] = 97``, or change a subsequence by assigning to a slice: ``obj[i1:i2] = b'...'``. You can also read and write data starting at the current file position, and :meth:`seek` through the file to different positions."
msgstr ""

msgid "A memory-mapped file is created by the :class:`mmap` constructor, which is different on Unix and on Windows.  In either case you must provide a file descriptor for a file opened for update. If you wish to map an existing Python file object, use its :meth:`fileno` method to obtain the correct value for the *fileno* parameter.  Otherwise, you can open the file using the :func:`os.open` function, which returns a file descriptor directly (the file still needs to be closed when done)."
msgstr ""

msgid "For both the Unix and Windows versions of the constructor, *access* may be specified as an optional keyword parameter. *access* accepts one of three values: :const:`ACCESS_READ`, :const:`ACCESS_WRITE`, or :const:`ACCESS_COPY` to specify read-only, write-through or copy-on-write memory respectively. *access* can be used on both Unix and Windows.  If *access* is not specified, Windows mmap returns a write-through mapping.  The initial memory values for all three access types are taken from the specified file.  Assignment to an :const:`ACCESS_READ` memory map raises a :exc:`TypeError` exception. Assignment to an :const:`ACCESS_WRITE` memory map affects both memory and the underlying file.  Assignment to an :const:`ACCESS_COPY` memory map affects memory but does not update the underlying file."
msgstr ""

msgid "To map anonymous memory, -1 should be passed as the fileno along with the length."
msgstr ""

msgid "**(Windows version)** Maps *length* bytes from the file specified by the file handle *fileno*, and creates a mmap object.  If *length* is larger than the current size of the file, the file is extended to contain *length* bytes.  If *length* is ``0``, the maximum length of the map is the current size of the file, except that if the file is empty Windows raises an exception (you cannot create an empty mapping on Windows)."
msgstr ""

msgid "*tagname*, if specified and not ``None``, is a string giving a tag name for the mapping.  Windows allows you to have many different mappings against the same file.  If you specify the name of an existing tag, that tag is opened, otherwise a new tag of this name is created.  If this parameter is omitted or ``None``, the mapping is created without a name.  Avoiding the use of the tag parameter will assist in keeping your code portable between Unix and Windows."
msgstr ""

msgid "*offset* may be specified as a non-negative integer offset. mmap references will be relative to the offset from the beginning of the file. *offset* defaults to 0.  *offset* must be a multiple of the ALLOCATIONGRANULARITY."
msgstr ""

msgid "**(Unix version)** Maps *length* bytes from the file specified by the file descriptor *fileno*, and returns a mmap object.  If *length* is ``0``, the maximum length of the map will be the current size of the file when :class:`mmap` is called."
msgstr ""

msgid "*flags* specifies the nature of the mapping. :const:`MAP_PRIVATE` creates a private copy-on-write mapping, so changes to the contents of the mmap object will be private to this process, and :const:`MAP_SHARED` creates a mapping that's shared with all other processes mapping the same areas of the file.  The default value is :const:`MAP_SHARED`."
msgstr ""

msgid "*prot*, if specified, gives the desired memory protection; the two most useful values are :const:`PROT_READ` and :const:`PROT_WRITE`, to specify that the pages may be read or written.  *prot* defaults to :const:`PROT_READ \\| PROT_WRITE`."
msgstr ""

msgid "*access* may be specified in lieu of *flags* and *prot* as an optional keyword parameter.  It is an error to specify both *flags*, *prot* and *access*.  See the description of *access* above for information on how to use this parameter."
msgstr ""

msgid "*offset* may be specified as a non-negative integer offset. mmap references will be relative to the offset from the beginning of the file. *offset* defaults to 0.  *offset* must be a multiple of the PAGESIZE or ALLOCATIONGRANULARITY."
msgstr ""

msgid "This example shows a simple way of using :class:`mmap`::"
msgstr ""

msgid "import mmap  # write a simple example file with open(\"hello.txt\", \"wb\") as f:     f.write(b\"Hello Python!\\n\")  with open(\"hello.txt\", \"r+b\") as f:     # memory-map the file, size 0 means whole file     map = mmap.mmap(f.fileno(), 0)     # read content via standard file methods     print(map.readline())  # prints b\"Hello Python!\\n\"     # read content via slice notation     print(map[:5])  # prints b\"Hello\"     # update content using slice notation;     # note that new content must have same size     map[6:] = b\" world!\\n\"     # ... and read again using standard file methods     map.seek(0)     print(map.readline())  # prints b\"Hello  world!\\n\"     # close the map     map.close()"
msgstr ""

msgid "The next example demonstrates how to create an anonymous map and exchange data between the parent and child processes::"
msgstr ""

msgid "import mmap import os  map = mmap.mmap(-1, 13) map.write(b\"Hello world!\")  pid = os.fork()  if pid == 0: # In a child process     map.seek(0)     print(map.readline())      map.close()"
msgstr ""

msgid "Memory-mapped file objects support the following methods:"
msgstr ""

msgid "Close the file.  Subsequent calls to other methods of the object will result in an exception being raised."
msgstr ""

msgid "Returns the lowest index in the object where the subsequence *sub* is found, such that *sub* is contained in the range [*start*, *end*]. Optional arguments *start* and *end* are interpreted as in slice notation. Returns ``-1`` on failure."
msgstr ""

msgid "Flushes changes made to the in-memory copy of a file back to disk. Without use of this call there is no guarantee that changes are written back before the object is destroyed.  If *offset* and *size* are specified, only changes to the given range of bytes will be flushed to disk; otherwise, the whole extent of the mapping is flushed."
msgstr ""

msgid "**(Windows version)** A nonzero value returned indicates success; zero indicates failure."
msgstr ""

msgid "**(Unix version)** A zero value is returned to indicate success. An exception is raised when the call failed."
msgstr ""

msgid "Copy the *count* bytes starting at offset *src* to the destination index *dest*.  If the mmap was created with :const:`ACCESS_READ`, then calls to move will throw a :exc:`TypeError` exception."
msgstr ""

msgid "Return a :class:`bytes` containing up to *num* bytes starting from the current file position; the file position is updated to point after the bytes that were returned."
msgstr ""

msgid "Returns a byte at the current file position as an integer, and advances the file position by 1."
msgstr ""

msgid "Returns a single line, starting at the current file position and up to the next newline."
msgstr ""

msgid "Resizes the map and the underlying file, if any. If the mmap was created with :const:`ACCESS_READ` or :const:`ACCESS_COPY`, resizing the map will throw a :exc:`TypeError` exception."
msgstr ""

msgid "Returns the highest index in the object where the subsequence *sub* is found, such that *sub* is contained in the range [*start*, *end*]. Optional arguments *start* and *end* are interpreted as in slice notation. Returns ``-1`` on failure."
msgstr ""

msgid "Set the file's current position.  *whence* argument is optional and defaults to ``os.SEEK_SET`` or ``0`` (absolute file positioning); other values are ``os.SEEK_CUR`` or ``1`` (seek relative to the current position) and ``os.SEEK_END`` or ``2`` (seek relative to the file's end)."
msgstr ""

msgid "Return the length of the file, which can be larger than the size of the memory-mapped area."
msgstr ""

msgid "Returns the current position of the file pointer."
msgstr ""

msgid "Write the bytes in *bytes* into memory at the current position of the file pointer; the file position is updated to point after the bytes that were written. If the mmap was created with :const:`ACCESS_READ`, then writing to it will throw a :exc:`TypeError` exception."
msgstr ""

msgid "Write the the integer *byte* into memory at the current position of the file pointer; the file position is advanced by ``1``. If the mmap was created with :const:`ACCESS_READ`, then writing to it will throw a :exc:`TypeError` exception."
msgstr ""

msgid ":mod:`modulefinder` --- Find modules used by a script"
msgstr ""

msgid "This module provides a :class:`ModuleFinder` class that can be used to determine the set of modules imported by a script. ``modulefinder.py`` can also be run as a script, giving the filename of a Python script as its argument, after which a report of the imported modules will be printed."
msgstr ""

msgid "Record that the package named *pkg_name* can be found in the specified *path*."
msgstr ""

msgid "Allows specifying that the module named *oldname* is in fact the package named *newname*.  The most common usage would be  to handle how the :mod:`_xmlplus` package replaces the :mod:`xml` package."
msgstr ""

msgid "This class provides :meth:`run_script` and :meth:`report` methods to determine the set of modules imported by a script. *path* can be a list of directories to search for modules; if not specified, ``sys.path`` is used.  *debug* sets the debugging level; higher values make the class print debugging messages about what it's doing. *excludes* is a list of module names to exclude from the analysis. *replace_paths* is a list of ``(oldpath, newpath)`` tuples that will be replaced in module paths."
msgstr ""

msgid "Print a report to standard output that lists the modules imported by the script and their paths, as well as modules that are missing or seem to be missing."
msgstr ""

msgid "Analyze the contents of the *pathname* file, which must contain Python code."
msgstr ""

msgid "A dictionary mapping module names to modules. See :ref:`modulefinder-example`"
msgstr ""

msgid "Example usage of :class:`ModuleFinder`"
msgstr ""

msgid "The script that is going to get analyzed later on (bacon.py)::"
msgstr ""

msgid "import re, itertools  try:     import baconhameggs except ImportError:     pass  try:     import guido.python.ham except ImportError:     pass"
msgstr ""

msgid "The script that will output the report of bacon.py::"
msgstr ""

msgid "from modulefinder import ModuleFinder  finder = ModuleFinder() finder.run_script('bacon.py')  print('Loaded modules:') for name, mod in finder.modules.items():     print('%s: ' % name, end='')     print(','.join(list(mod.globalnames.keys())[:3]))  print('-'*50) print('Modules not imported:') print('\\n'.join(finder.badmodules.keys()))"
msgstr ""

msgid "Sample output (may vary depending on the architecture)::"
msgstr ""

msgid "Loaded modules: _types: copyreg:  _inverted_registry,_slotnames,__all__ sre_compile:  isstring,_sre,_optimize_unicode _sre: sre_constants:  REPEAT_ONE,makedict,AT_END_LINE sys: re:  __module__,finditer,_expand itertools: __main__:  re,itertools,baconhameggs sre_parse:  __getslice__,_PATTERNENDERS,SRE_FLAG_UNICODE array: types:  __module__,IntType,TypeType --------------------------------------------------- Modules not imported: guido.python.ham baconhameggs"
msgstr ""

msgid "Importing Modules"
msgstr ""

msgid "The modules described in this chapter provide new ways to import other Python modules and hooks for customizing the import process."
msgstr ""

msgid ":mod:`msilib` --- Read and write Microsoft Installer files"
msgstr ""

msgid "The :mod:`msilib` supports the creation of Microsoft Installer (``.msi``) files. Because these files often contain an embedded \"cabinet\" file (``.cab``), it also exposes an API to create CAB files. Support for reading ``.cab`` files is currently not implemented; read support for the ``.msi`` database is possible."
msgstr ""

msgid "This package aims to provide complete access to all tables in an ``.msi`` file, therefore, it is a fairly low-level API. Two primary applications of this package are the :mod:`distutils` command ``bdist_msi``, and the creation of Python installer package itself (although that currently uses a different version of ``msilib``)."
msgstr ""

msgid "The package contents can be roughly split into four parts: low-level CAB routines, low-level MSI routines, higher-level MSI routines, and standard table structures."
msgstr ""

msgid "Create a new CAB file named *cabname*. *files* must be a list of tuples, each containing the name of the file on disk, and the name of the file inside the CAB file."
msgstr ""

msgid "The files are added to the CAB file in the order they appear in the list. All files are added into a single CAB file, using the MSZIP compression algorithm."
msgstr ""

msgid "Callbacks to Python for the various steps of MSI creation are currently not exposed."
msgstr ""

msgid "Return the string representation of a new unique identifier. This wraps the Windows API functions :cfunc:`UuidCreate` and :cfunc:`UuidToString`."
msgstr ""

msgid "Return a new database object by calling MsiOpenDatabase.   *path* is the file name of the MSI file; *persist* can be one of the constants ``MSIDBOPEN_CREATEDIRECT``, ``MSIDBOPEN_CREATE``, ``MSIDBOPEN_DIRECT``, ``MSIDBOPEN_READONLY``, or ``MSIDBOPEN_TRANSACT``, and may include the flag ``MSIDBOPEN_PATCHFILE``. See the Microsoft documentation for the meaning of these flags; depending on the flags, an existing database is opened, or a new one created."
msgstr ""

msgid "Return a new record object by calling :cfunc:`MSICreateRecord`. *count* is the number of fields of the record."
msgstr ""

msgid "Create and return a new database *name*, initialize it with *schema*, and set the properties *ProductName*, *ProductCode*, *ProductVersion*, and *Manufacturer*."
msgstr ""

msgid "*schema* must be a module object containing ``tables`` and ``_Validation_records`` attributes; typically, :mod:`msilib.schema` should be used."
msgstr ""

msgid "The database will contain just the schema and the validation records when this function returns."
msgstr ""

msgid "Add all *records* to the table named *table* in *database*."
msgstr ""

msgid "The *table* argument must be one of the predefined tables in the MSI schema, e.g. ``'Feature'``, ``'File'``, ``'Component'``, ``'Dialog'``, ``'Control'``, etc."
msgstr ""

msgid "*records* should be a list of tuples, each one containing all fields of a record according to the schema of the table.  For optional fields, ``None`` can be passed."
msgstr ""

msgid "Field values can be int or long numbers, strings, or instances of the Binary class."
msgstr ""

msgid "Represents entries in the Binary table; inserting such an object using :func:`add_data` reads the file named *filename* into the table."
msgstr ""

msgid "Add all table content from *module* to *database*. *module* must contain an attribute *tables* listing all tables for which content should be added, and one attribute per table that has the actual content."
msgstr ""

msgid "This is typically used to install the sequence tables."
msgstr ""

msgid "Add the file *path* into the ``_Stream`` table of *database*, with the stream name *name*."
msgstr ""

msgid "Return a new UUID, in the format that MSI typically requires (i.e. in curly braces, and with all hexdigits in upper-case)."
msgstr ""

msgid "`FCICreateFile <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/devnotes/winprog/fcicreate.asp>`_ `UuidCreate <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/rpc/rpc/uuidcreate.asp>`_ `UuidToString <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/rpc/rpc/uuidtostring.asp>`_"
msgstr ""

msgid "Database Objects"
msgstr ""

msgid "Return a view object, by calling :cfunc:`MSIDatabaseOpenView`. *sql* is the SQL statement to execute."
msgstr ""

msgid "Commit the changes pending in the current transaction, by calling :cfunc:`MSIDatabaseCommit`."
msgstr ""

msgid "Return a new summary information object, by calling :cfunc:`MsiGetSummaryInformation`.  *count* is the maximum number of updated values."
msgstr ""

msgid "`MSIDatabaseOpenView <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msidatabaseopenview.asp>`_ `MSIDatabaseCommit <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msidatabasecommit.asp>`_ `MSIGetSummaryInformation <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msigetsummaryinformation.asp>`_"
msgstr ""

msgid "View Objects"
msgstr ""

msgid "Execute the SQL query of the view, through :cfunc:`MSIViewExecute`. If *params* is not ``None``, it is a record describing actual values of the parameter tokens in the query."
msgstr ""

msgid "Return a record describing the columns of the view, through calling :cfunc:`MsiViewGetColumnInfo`. *kind* can be either ``MSICOLINFO_NAMES`` or ``MSICOLINFO_TYPES``."
msgstr ""

msgid "Return a result record of the query, through calling :cfunc:`MsiViewFetch`."
msgstr ""

msgid "Modify the view, by calling :cfunc:`MsiViewModify`. *kind* can be one of ``MSIMODIFY_SEEK``, ``MSIMODIFY_REFRESH``, ``MSIMODIFY_INSERT``, ``MSIMODIFY_UPDATE``, ``MSIMODIFY_ASSIGN``, ``MSIMODIFY_REPLACE``, ``MSIMODIFY_MERGE``, ``MSIMODIFY_DELETE``, ``MSIMODIFY_INSERT_TEMPORARY``, ``MSIMODIFY_VALIDATE``, ``MSIMODIFY_VALIDATE_NEW``, ``MSIMODIFY_VALIDATE_FIELD``, or ``MSIMODIFY_VALIDATE_DELETE``."
msgstr ""

msgid "*data* must be a record describing the new data."
msgstr ""

msgid "Close the view, through :cfunc:`MsiViewClose`."
msgstr ""

msgid "`MsiViewExecute <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msiviewexecute.asp>`_ `MSIViewGetColumnInfo <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msiviewgetcolumninfo.asp>`_ `MsiViewFetch <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msiviewfetch.asp>`_ `MsiViewModify <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msiviewmodify.asp>`_ `MsiViewClose <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msiviewclose.asp>`_"
msgstr ""

msgid "Summary Information Objects"
msgstr ""

msgid "Return a property of the summary, through :cfunc:`MsiSummaryInfoGetProperty`. *field* is the name of the property, and can be one of the constants ``PID_CODEPAGE``, ``PID_TITLE``, ``PID_SUBJECT``, ``PID_AUTHOR``, ``PID_KEYWORDS``, ``PID_COMMENTS``, ``PID_TEMPLATE``, ``PID_LASTAUTHOR``, ``PID_REVNUMBER``, ``PID_LASTPRINTED``, ``PID_CREATE_DTM``, ``PID_LASTSAVE_DTM``, ``PID_PAGECOUNT``, ``PID_WORDCOUNT``, ``PID_CHARCOUNT``, ``PID_APPNAME``, or ``PID_SECURITY``."
msgstr ""

msgid "Return the number of summary properties, through :cfunc:`MsiSummaryInfoGetPropertyCount`."
msgstr ""

msgid "Set a property through :cfunc:`MsiSummaryInfoSetProperty`. *field* can have the same values as in :meth:`GetProperty`, *value* is the new value of the property. Possible value types are integer and string."
msgstr ""

msgid "Write the modified properties to the summary information stream, using :cfunc:`MsiSummaryInfoPersist`."
msgstr ""

msgid "`MsiSummaryInfoGetProperty <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msisummaryinfogetproperty.asp>`_ `MsiSummaryInfoGetPropertyCount <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msisummaryinfogetpropertycount.asp>`_ `MsiSummaryInfoSetProperty <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msisummaryinfosetproperty.asp>`_ `MsiSummaryInfoPersist <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msisummaryinfopersist.asp>`_"
msgstr ""

msgid "Record Objects"
msgstr ""

msgid "Return the number of fields of the record, through :cfunc:`MsiRecordGetFieldCount`."
msgstr ""

msgid "Return the value of *field* as an integer where possible.  *field* must be an integer."
msgstr ""

msgid "Return the value of *field* as a string where possible.  *field* must be an integer."
msgstr ""

msgid "Set *field* to *value* through :cfunc:`MsiRecordSetString`. *field* must be an integer; *value* a string."
msgstr ""

msgid "Set *field* to the contents of the file named *value*, through :cfunc:`MsiRecordSetStream`. *field* must be an integer; *value* a string."
msgstr ""

msgid "Set *field* to *value* through :cfunc:`MsiRecordSetInteger`. Both *field* and *value* must be an integer."
msgstr ""

msgid "Set all fields of the record to 0, through :cfunc:`MsiRecordClearData`."
msgstr ""

msgid "`MsiRecordGetFieldCount <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msirecordgetfieldcount.asp>`_ `MsiRecordSetString <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msirecordsetstring.asp>`_ `MsiRecordSetStream <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msirecordsetstream.asp>`_ `MsiRecordSetInteger <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msirecordsetinteger.asp>`_ `MsiRecordClear <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msirecordclear.asp>`_"
msgstr ""

msgid "Errors"
msgstr ""

msgid "All wrappers around MSI functions raise :exc:`MsiError`; the string inside the exception will contain more detail."
msgstr ""

msgid "CAB Objects"
msgstr ""

msgid "The class :class:`CAB` represents a CAB file. During MSI construction, files will be added simultaneously to the ``Files`` table, and to a CAB file. Then, when all files have been added, the CAB file can be written, then added to the MSI file."
msgstr ""

msgid "*name* is the name of the CAB file in the MSI file."
msgstr ""

msgid "Add the file with the pathname *full* to the CAB file, under the name *logical*.  If there is already a file named *logical*, a new file name is created."
msgstr ""

msgid "Return the index of the file in the CAB file, and the new name of the file inside the CAB file."
msgstr ""

msgid "Generate a CAB file, add it as a stream to the MSI file, put it into the ``Media`` table, and remove the generated file from the disk."
msgstr ""

msgid "Directory Objects"
msgstr ""

msgid "Create a new directory in the Directory table. There is a current component at each point in time for the directory, which is either explicitly created through :meth:`start_component`, or implicitly when files are added for the first time. Files are added into the current component, and into the cab file.  To create a directory, a base directory object needs to be specified (can be ``None``), the path to the physical directory, and a logical directory name.  *default* specifies the DefaultDir slot in the directory table. *componentflags* specifies the default flags that new components get."
msgstr ""

msgid "Add an entry to the Component table, and make this component the current component for this directory. If no component name is given, the directory name is used. If no *feature* is given, the current feature is used. If no *flags* are given, the directory's default flags are used. If no *keyfile* is given, the KeyPath is left null in the Component table."
msgstr ""

msgid "Add a file to the current component of the directory, starting a new one if there is no current component. By default, the file name in the source and the file table will be identical. If the *src* file is specified, it is interpreted relative to the current directory. Optionally, a *version* and a *language* can be specified for the entry in the File table."
msgstr ""

msgid "Add a list of files to the current component as specified in the glob pattern.  Individual files can be excluded in the *exclude* list."
msgstr ""

msgid "Remove ``.pyc``/``.pyo`` files on uninstall."
msgstr ""

msgid "`Directory Table <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/directory_table.asp>`_ `File Table <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/file_table.asp>`_ `Component Table <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/component_table.asp>`_ `FeatureComponents Table <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/featurecomponents_table.asp>`_"
msgstr ""

msgid "Features"
msgstr ""

msgid "Add a new record to the ``Feature`` table, using the values *id*, *parent.id*, *title*, *desc*, *display*, *level*, *directory*, and *attributes*. The resulting feature object can be passed to the :meth:`start_component` method of :class:`Directory`."
msgstr ""

msgid "Make this feature the current feature of :mod:`msilib`. New components are automatically added to the default feature, unless a feature is explicitly specified."
msgstr ""

msgid "`Feature Table <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/feature_table.asp>`_"
msgstr ""

msgid "GUI classes"
msgstr ""

msgid ":mod:`msilib` provides several classes that wrap the GUI tables in an MSI database. However, no standard user interface is provided; use :mod:`bdist_msi` to create MSI files with a user-interface for installing Python packages."
msgstr ""

msgid "Base class of the dialog controls. *dlg* is the dialog object the control belongs to, and *name* is the control's name."
msgstr ""

msgid "Make an entry into the ``ControlEvent`` table for this control."
msgstr ""

msgid "Make an entry into the ``EventMapping`` table for this control."
msgstr ""

msgid "Make an entry into the ``ControlCondition`` table for this control."
msgstr ""

msgid "Create a radio button control named *name*. *property* is the installer property that gets set when a radio button is selected."
msgstr ""

msgid "Add a radio button named *name* to the group, at the coordinates *x*, *y*, *width*, *height*, and with the label *text*. If *value* is ``None``, it defaults to *name*."
msgstr ""

msgid "Return a new :class:`Dialog` object. An entry in the ``Dialog`` table is made, with the specified coordinates, dialog attributes, title, name of the first, default, and cancel controls."
msgstr ""

msgid "Return a new :class:`Control` object. An entry in the ``Control`` table is made with the specified parameters."
msgstr ""

msgid "This is a generic method; for specific types, specialized methods are provided."
msgstr ""

msgid "Add and return a ``Text`` control."
msgstr ""

msgid "Add and return a ``Bitmap`` control."
msgstr ""

msgid "Add and return a ``Line`` control."
msgstr ""

msgid "Add and return a ``PushButton`` control."
msgstr ""

msgid "Add and return a ``RadioButtonGroup`` control."
msgstr ""

msgid "Add and return a ``CheckBox`` control."
msgstr ""

msgid "`Dialog Table <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/dialog_table.asp>`_ `Control Table <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/control_table.asp>`_ `Control Types <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/controls.asp>`_ `ControlCondition Table <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/controlcondition_table.asp>`_ `ControlEvent Table <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/controlevent_table.asp>`_ `EventMapping Table <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/eventmapping_table.asp>`_ `RadioButton Table <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/radiobutton_table.asp>`_"
msgstr ""

msgid "Precomputed tables"
msgstr ""

msgid ":mod:`msilib` provides a few subpackages that contain only schema and table definitions. Currently, these definitions are based on MSI version 2.0."
msgstr ""

msgid "This is the standard MSI schema for MSI 2.0, with the *tables* variable providing a list of table definitions, and *_Validation_records* providing the data for MSI validation."
msgstr ""

msgid "This module contains table contents for the standard sequence tables: *AdminExecuteSequence*, *AdminUISequence*, *AdvtExecuteSequence*, *InstallExecuteSequence*, and *InstallUISequence*."
msgstr ""

msgid "This module contains definitions for the UIText and ActionText tables, for the standard installer actions."
msgstr ""

msgid ":mod:`msvcrt` -- Useful routines from the MS VC++ runtime"
msgstr ""

msgid "These functions provide access to some useful capabilities on Windows platforms. Some higher-level modules use these functions to build the  Windows implementations of their services.  For example, the :mod:`getpass` module uses this in the implementation of the :func:`getpass` function."
msgstr ""

msgid "Further documentation on these functions can be found in the Platform API documentation."
msgstr ""

msgid "The module implements both the normal and wide char variants of the console I/O api. The normal API deals only with ASCII characters and is of limited use for internationalized applications. The wide char API should be used where ever possible"
msgstr ""

msgid "File Operations"
msgstr ""

msgid "Lock part of a file based on file descriptor *fd* from the C runtime.  Raises :exc:`IOError` on failure.  The locked region of the file extends from the current file position for *nbytes* bytes, and may continue beyond the end of the file.  *mode* must be one of the :const:`LK_\\*` constants listed below. Multiple regions in a file may be locked at the same time, but may not overlap.  Adjacent regions are not merged; they must be unlocked individually."
msgstr ""

msgid "Locks the specified bytes. If the bytes cannot be locked, the program immediately tries again after 1 second.  If, after 10 attempts, the bytes cannot be locked, :exc:`IOError` is raised."
msgstr ""

msgid "Locks the specified bytes. If the bytes cannot be locked, :exc:`IOError` is raised."
msgstr ""

msgid "Unlocks the specified bytes, which must have been previously locked."
msgstr ""

msgid "Set the line-end translation mode for the file descriptor *fd*. To set it to text mode, *flags* should be :const:`os.O_TEXT`; for binary, it should be :const:`os.O_BINARY`."
msgstr ""

msgid "Create a C runtime file descriptor from the file handle *handle*.  The *flags* parameter should be a bitwise OR of :const:`os.O_APPEND`, :const:`os.O_RDONLY`, and :const:`os.O_TEXT`.  The returned file descriptor may be used as a parameter to :func:`os.fdopen` to create a file object."
msgstr ""

msgid "Return the file handle for the file descriptor *fd*.  Raises :exc:`IOError` if *fd* is not recognized."
msgstr ""

msgid "Console I/O"
msgstr ""

msgid "Return true if a keypress is waiting to be read."
msgstr ""

msgid "Read a keypress and return the resulting character.  Nothing is echoed to the console.  This call will block if a keypress is not already available, but will not wait for :kbd:`Enter` to be pressed. If the pressed key was a special function key, this will return ``'\\000'`` or ``'\\xe0'``; the next call will return the keycode.  The :kbd:`Control-C` keypress cannot be read with this function."
msgstr ""

msgid "Wide char variant of :func:`getch`, returning a Unicode value."
msgstr ""

msgid "Similar to :func:`getch`, but the keypress will be echoed if it  represents a printable character."
msgstr ""

msgid "Wide char variant of :func:`getche`, returning a Unicode value."
msgstr ""

msgid "Print the character *char* to the console without buffering."
msgstr ""

msgid "Wide char variant of :func:`putch`, accepting a Unicode value."
msgstr ""

msgid "Cause the character *char* to be \"pushed back\" into the console buffer; it will be the next character read by :func:`getch` or :func:`getche`."
msgstr ""

msgid "Wide char variant of :func:`ungetch`, accepting a Unicode value."
msgstr ""

msgid "Other Functions"
msgstr ""

msgid "Force the :cfunc:`malloc` heap to clean itself up and return unused blocks to the operating system.  On failure, this raises :exc:`IOError`."
msgstr ""

msgid ":mod:`multiprocessing` --- Process-based \"threading\" interface"
msgstr ""

msgid ":mod:`multiprocessing` is a package that supports spawning processes using an API similar to the :mod:`threading` module.  The :mod:`multiprocessing` package offers both local and remote concurrency, effectively side-stepping the :term:`Global Interpreter Lock` by using subprocesses instead of threads.  Due to this, the :mod:`multiprocessing` module allows the programmer to fully leverage multiple processors on a given machine.  It runs on both Unix and Windows."
msgstr ""

msgid "Some of this package's functionality requires a functioning shared semaphore implementation on the host operating system. Without one, the :mod:`multiprocessing.synchronize` module will be disabled, and attempts to import it will result in an :exc:`ImportError`. See :issue:`3770` for additional information."
msgstr ""

msgid "Functionality within this package requires that the ``__main__`` method be importable by the children. This is covered in :ref:`multiprocessing-programming` however it is worth pointing out here. This means that some examples, such as the :class:`multiprocessing.Pool` examples will not work in the interactive interpreter. For example::"
msgstr ""

msgid ">>> from multiprocessing import Pool >>> p = Pool(5) >>> def f(x): ...     return x*x ... >>> p.map(f, [1,2,3]) Process PoolWorker-1: Process PoolWorker-2: Process PoolWorker-3: Traceback (most recent call last): Traceback (most recent call last): Traceback (most recent call last): AttributeError: 'module' object has no attribute 'f' AttributeError: 'module' object has no attribute 'f' AttributeError: 'module' object has no attribute 'f'"
msgstr ""

msgid "(If you try this it will actually output three full tracebacks interleaved in a semi-random fashion, and then you may have to stop the master process somehow.)"
msgstr ""

msgid "The :class:`Process` class"
msgstr ""

msgid "In :mod:`multiprocessing`, processes are spawned by creating a :class:`Process` object and then calling its :meth:`~Process.start` method.  :class:`Process` follows the API of :class:`threading.Thread`.  A trivial example of a multiprocess program is ::"
msgstr ""

msgid "from multiprocessing import Process  def f(name):     print('hello', name)  if __name__ == '__main__':     p = Process(target=f, args=('bob',))     p.start()     p.join()"
msgstr ""

msgid "To show the individual process IDs involved, here is an expanded example::"
msgstr ""

msgid "from multiprocessing import Process import os  def info(title):     print(title)     print('module name:', __name__)     print('parent process:', os.getppid())     print('process id:', os.getpid())  def f(name):     info('function f')     print('hello', name)  if __name__ == '__main__':     info('main line')     p = Process(target=f, args=('bob',))     p.start()     p.join()"
msgstr ""

msgid "For an explanation of why (on Windows) the ``if __name__ == '__main__'`` part is necessary, see :ref:`multiprocessing-programming`."
msgstr ""

msgid "Exchanging objects between processes"
msgstr ""

msgid ":mod:`multiprocessing` supports two types of communication channel between processes:"
msgstr ""

msgid "**Queues**"
msgstr ""

msgid "The :class:`Queue` class is a near clone of :class:`queue.Queue`.  For example::"
msgstr ""

msgid "from multiprocessing import Process, Queue  def f(q):     q.put([42, None, 'hello'])  if __name__ == '__main__':     q = Queue()     p = Process(target=f, args=(q,))     p.start()     print(q.get())    # prints \"[42, None, 'hello']\"     p.join()"
msgstr ""

msgid "Queues are thread and process safe."
msgstr ""

msgid "**Pipes**"
msgstr ""

msgid "The :func:`Pipe` function returns a pair of connection objects connected by a pipe which by default is duplex (two-way).  For example::"
msgstr ""

msgid "from multiprocessing import Process, Pipe  def f(conn):     conn.send([42, None, 'hello'])     conn.close()  if __name__ == '__main__':     parent_conn, child_conn = Pipe()     p = Process(target=f, args=(child_conn,))     p.start()     print(parent_conn.recv())   # prints \"[42, None, 'hello']\"     p.join()"
msgstr ""

msgid "The two connection objects returned by :func:`Pipe` represent the two ends of the pipe.  Each connection object has :meth:`~Connection.send` and :meth:`~Connection.recv` methods (among others).  Note that data in a pipe may become corrupted if two processes (or threads) try to read from or write to the *same* end of the pipe at the same time.  Of course there is no risk of corruption from processes using different ends of the pipe at the same time."
msgstr ""

msgid "Synchronization between processes"
msgstr ""

msgid ":mod:`multiprocessing` contains equivalents of all the synchronization primitives from :mod:`threading`.  For instance one can use a lock to ensure that only one process prints to standard output at a time::"
msgstr ""

msgid "from multiprocessing import Process, Lock  def f(l, i):     l.acquire()     print('hello world', i)     l.release()  if __name__ == '__main__':     lock = Lock()      for num in range(10):         Process(target=f, args=(lock, num)).start()"
msgstr ""

msgid "Without using the lock output from the different processes is liable to get all mixed up."
msgstr ""

msgid "Sharing state between processes"
msgstr ""

msgid "As mentioned above, when doing concurrent programming it is usually best to avoid using shared state as far as possible.  This is particularly true when using multiple processes."
msgstr ""

msgid "However, if you really do need to use some shared data then :mod:`multiprocessing` provides a couple of ways of doing so."
msgstr ""

msgid "**Shared memory**"
msgstr ""

msgid "Data can be stored in a shared memory map using :class:`Value` or :class:`Array`.  For example, the following code ::"
msgstr ""

msgid "from multiprocessing import Process, Value, Array  def f(n, a):     n.value = 3.1415927     for i in range(len(a)):         a[i] = -a[i]  if __name__ == '__main__':     num = Value('d', 0.0)     arr = Array('i', range(10))      p = Process(target=f, args=(num, arr))     p.start()     p.join()      print(num.value)     print(arr[:])"
msgstr ""

msgid "will print ::"
msgstr ""

msgid "3.1415927 [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]"
msgstr ""

msgid "The ``'d'`` and ``'i'`` arguments used when creating ``num`` and ``arr`` are typecodes of the kind used by the :mod:`array` module: ``'d'`` indicates a double precision float and ``'i'`` indicates a signed integer.  These shared objects will be process and thread safe."
msgstr ""

msgid "For more flexibility in using shared memory one can use the :mod:`multiprocessing.sharedctypes` module which supports the creation of arbitrary ctypes objects allocated from shared memory."
msgstr ""

msgid "**Server process**"
msgstr ""

msgid "A manager object returned by :func:`Manager` controls a server process which holds Python objects and allows other processes to manipulate them using proxies."
msgstr ""

msgid "A manager returned by :func:`Manager` will support types :class:`list`, :class:`dict`, :class:`Namespace`, :class:`Lock`, :class:`RLock`, :class:`Semaphore`, :class:`BoundedSemaphore`, :class:`Condition`, :class:`Event`, :class:`Queue`, :class:`Value` and :class:`Array`.  For example, ::"
msgstr ""

msgid "from multiprocessing import Process, Manager  def f(d, l):     d[1] = '1'     d['2'] = 2     d[0.25] = None     l.reverse()  if __name__ == '__main__':     manager = Manager()      d = manager.dict()     l = manager.list(range(10))      p = Process(target=f, args=(d, l))     p.start()     p.join()      print(d)     print(l)"
msgstr ""

msgid "{0.25: None, 1: '1', '2': 2} [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
msgstr ""

msgid "Server process managers are more flexible than using shared memory objects because they can be made to support arbitrary object types.  Also, a single manager can be shared by processes on different computers over a network. They are, however, slower than using shared memory."
msgstr ""

msgid "Using a pool of workers"
msgstr ""

msgid "The :class:`~multiprocessing.pool.Pool` class represents a pool of worker processes.  It has methods which allows tasks to be offloaded to the worker processes in a few different ways."
msgstr ""

msgid "from multiprocessing import Pool  def f(x):     return x*x  if __name__ == '__main__':     pool = Pool(processes=4)               # start 4 worker processes     result = pool.apply_async(f, [10])     # evaluate \"f(10)\" asynchronously     print(result.get(timeout=1))           # prints \"100\" unless your computer is *very* slow     print(pool.map(f, range(10)))          # prints \"[0, 1, 4,..., 81]\""
msgstr ""

msgid "Reference"
msgstr ""

msgid "The :mod:`multiprocessing` package mostly replicates the API of the :mod:`threading` module."
msgstr ""

msgid ":class:`Process` and exceptions"
msgstr ""

msgid "Process objects represent activity that is run in a separate process. The :class:`Process` class has equivalents of all the methods of :class:`threading.Thread`."
msgstr ""

msgid "The constructor should always be called with keyword arguments. *group* should always be ``None``; it exists solely for compatibility with :class:`threading.Thread`.  *target* is the callable object to be invoked by the :meth:`run()` method.  It defaults to ``None``, meaning nothing is called. *name* is the process name.  By default, a unique name is constructed of the form 'Process-N\\ :sub:`1`:N\\ :sub:`2`:...:N\\ :sub:`k`' where N\\ :sub:`1`,N\\ :sub:`2`,...,N\\ :sub:`k` is a sequence of integers whose length is determined by the *generation* of the process.  *args* is the argument tuple for the target invocation.  *kwargs* is a dictionary of keyword arguments for the target invocation.  By default, no arguments are passed to *target*."
msgstr ""

msgid "If a subclass overrides the constructor, it must make sure it invokes the base class constructor (:meth:`Process.__init__`) before doing anything else to the process."
msgstr ""

msgid "Method representing the process's activity."
msgstr ""

msgid "You may override this method in a subclass.  The standard :meth:`run` method invokes the callable object passed to the object's constructor as the target argument, if any, with sequential and keyword arguments taken from the *args* and *kwargs* arguments, respectively."
msgstr ""

msgid "Start the process's activity."
msgstr ""

msgid "This must be called at most once per process object.  It arranges for the object's :meth:`run` method to be invoked in a separate process."
msgstr ""

msgid "Block the calling thread until the process whose :meth:`join` method is called terminates or until the optional timeout occurs."
msgstr ""

msgid "If *timeout* is ``None`` then there is no timeout."
msgstr ""

msgid "A process can be joined many times."
msgstr ""

msgid "A process cannot join itself because this would cause a deadlock.  It is an error to attempt to join a process before it has been started."
msgstr ""

msgid "The process's name."
msgstr ""

msgid "The name is a string used for identification purposes only.  It has no semantics.  Multiple processes may be given the same name.  The initial name is set by the constructor."
msgstr ""

msgid "Return whether the process is alive."
msgstr ""

msgid "Roughly, a process object is alive from the moment the :meth:`start` method returns until the child process terminates."
msgstr ""

msgid "The process's daemon flag, a Boolean value.  This must be set before :meth:`start` is called."
msgstr ""

msgid "The initial value is inherited from the creating process."
msgstr ""

msgid "When a process exits, it attempts to terminate all of its daemonic child processes."
msgstr ""

msgid "Note that a daemonic process is not allowed to create child processes. Otherwise a daemonic process would leave its children orphaned if it gets terminated when its parent process exits. Additionally, these are **not** Unix daemons or services, they are normal processes that will be terminated (and not joined) if non-dameonic processes have exited."
msgstr ""

msgid "In addition to the  :class:`Threading.Thread` API, :class:`Process` objects also support the following attributes and methods:"
msgstr ""

msgid "Return the process ID.  Before the process is spawned, this will be ``None``."
msgstr ""

msgid "The child's exit code.  This will be ``None`` if the process has not yet terminated.  A negative value *-N* indicates that the child was terminated by signal *N*."
msgstr ""

msgid "The process's authentication key (a byte string)."
msgstr ""

msgid "When :mod:`multiprocessing` is initialized the main process is assigned a random string using :func:`os.random`."
msgstr ""

msgid "When a :class:`Process` object is created, it will inherit the authentication key of its parent process, although this may be changed by setting :attr:`authkey` to another byte string."
msgstr ""

msgid "See :ref:`multiprocessing-auth-keys`."
msgstr ""

msgid "Terminate the process.  On Unix this is done using the ``SIGTERM`` signal; on Windows :cfunc:`TerminateProcess` is used.  Note that exit handlers and finally clauses, etc., will not be executed."
msgstr ""

msgid "Note that descendant processes of the process will *not* be terminated -- they will simply become orphaned."
msgstr ""

msgid "If this method is used when the associated process is using a pipe or queue then the pipe or queue is liable to become corrupted and may become unusable by other process.  Similarly, if the process has acquired a lock or semaphore etc. then terminating it is liable to cause other processes to deadlock."
msgstr ""

msgid "Note that the :meth:`start`, :meth:`join`, :meth:`is_alive` and :attr:`exit_code` methods should only be called by the process that created the process object."
msgstr ""

msgid "Example usage of some of the methods of :class:`Process`:"
msgstr ""

msgid ">>> import multiprocessing, time, signal >>> p = multiprocessing.Process(target=time.sleep, args=(1000,)) >>> print(p, p.is_alive()) <Process(Process-1, initial)> False >>> p.start() >>> print(p, p.is_alive()) <Process(Process-1, started)> True >>> p.terminate() >>> time.sleep(0.1) >>> print(p, p.is_alive()) <Process(Process-1, stopped[SIGTERM])> False >>> p.exitcode == -signal.SIGTERM True"
msgstr ""

msgid "Exception raised by :meth:`Connection.recv_bytes_into()` when the supplied buffer object is too small for the message read."
msgstr ""

msgid "If ``e`` is an instance of :exc:`BufferTooShort` then ``e.args[0]`` will give the message as a byte string."
msgstr ""

msgid "Pipes and Queues"
msgstr ""

msgid "When using multiple processes, one generally uses message passing for communication between processes and avoids having to use any synchronization primitives like locks."
msgstr ""

msgid "For passing messages one can use :func:`Pipe` (for a connection between two processes) or a queue (which allows multiple producers and consumers)."
msgstr ""

msgid "The :class:`Queue` and :class:`JoinableQueue` types are multi-producer, multi-consumer FIFO queues modelled on the :class:`queue.Queue` class in the standard library.  They differ in that :class:`Queue` lacks the :meth:`~queue.Queue.task_done` and :meth:`~queue.Queue.join` methods introduced into Python 2.5's :class:`queue.Queue` class."
msgstr ""

msgid "If you use :class:`JoinableQueue` then you **must** call :meth:`JoinableQueue.task_done` for each task removed from the queue or else the semaphore used to count the number of unfinished tasks may eventually overflow raising an exception."
msgstr ""

msgid "Note that one can also create a shared queue by using a manager object -- see :ref:`multiprocessing-managers`."
msgstr ""

msgid ":mod:`multiprocessing` uses the usual :exc:`queue.Empty` and :exc:`queue.Full` exceptions to signal a timeout.  They are not available in the :mod:`multiprocessing` namespace so you need to import them from :mod:`queue`."
msgstr ""

msgid "If a process is killed using :meth:`Process.terminate` or :func:`os.kill` while it is trying to use a :class:`Queue`, then the data in the queue is likely to become corrupted.  This may cause any other processes to get an exception when it tries to use the queue later on."
msgstr ""

msgid "As mentioned above, if a child process has put items on a queue (and it has not used :meth:`JoinableQueue.cancel_join_thread`), then that process will not terminate until all buffered items have been flushed to the pipe."
msgstr ""

msgid "This means that if you try joining that process you may get a deadlock unless you are sure that all items which have been put on the queue have been consumed.  Similarly, if the child process is non-daemonic then the parent process may hang on exit when it tries to join all its non-daemonic children."
msgstr ""

msgid "Note that a queue created using a manager does not have this issue.  See :ref:`multiprocessing-programming`."
msgstr ""

msgid "For an example of the usage of queues for interprocess communication see :ref:`multiprocessing-examples`."
msgstr ""

msgid "Returns a pair ``(conn1, conn2)`` of :class:`Connection` objects representing the ends of a pipe."
msgstr ""

msgid "If *duplex* is ``True`` (the default) then the pipe is bidirectional.  If *duplex* is ``False`` then the pipe is unidirectional: ``conn1`` can only be used for receiving messages and ``conn2`` can only be used for sending messages."
msgstr ""

msgid "Returns a process shared queue implemented using a pipe and a few locks/semaphores.  When a process first puts an item on the queue a feeder thread is started which transfers objects from a buffer into the pipe."
msgstr ""

msgid "The usual :exc:`queue.Empty` and :exc:`queue.Full` exceptions from the standard library's :mod:`Queue` module are raised to signal timeouts."
msgstr ""

msgid ":class:`Queue` implements all the methods of :class:`queue.Queue` except for :meth:`~queue.Queue.task_done` and :meth:`~queue.Queue.join`."
msgstr ""

msgid "Return the approximate size of the queue.  Because of multithreading/multiprocessing semantics, this number is not reliable."
msgstr ""

msgid "Note that this may raise :exc:`NotImplementedError` on Unix platforms like Mac OS X where ``sem_getvalue()`` is not implemented."
msgstr ""

msgid "Return ``True`` if the queue is empty, ``False`` otherwise.  Because of multithreading/multiprocessing semantics, this is not reliable."
msgstr ""

msgid "Return ``True`` if the queue is full, ``False`` otherwise.  Because of multithreading/multiprocessing semantics, this is not reliable."
msgstr ""

msgid "Put item into the queue.  If the optional argument *block* is ``True`` (the default) and *timeout* is ``None`` (the default), block if necessary until a free slot is available.  If *timeout* is a positive number, it blocks at most *timeout* seconds and raises the :exc:`queue.Full` exception if no free slot was available within that time.  Otherwise (*block* is ``False``), put an item on the queue if a free slot is immediately available, else raise the :exc:`queue.Full` exception (*timeout* is ignored in that case)."
msgstr ""

msgid "Equivalent to ``put(item, False)``."
msgstr ""

msgid "Remove and return an item from the queue.  If optional args *block* is ``True`` (the default) and *timeout* is ``None`` (the default), block if necessary until an item is available.  If *timeout* is a positive number, it blocks at most *timeout* seconds and raises the :exc:`queue.Empty` exception if no item was available within that time.  Otherwise (block is ``False``), return an item if one is immediately available, else raise the :exc:`queue.Empty` exception (*timeout* is ignored in that case)."
msgstr ""

msgid "Equivalent to ``get(False)``."
msgstr ""

msgid ":class:`multiprocessing.Queue` has a few additional methods not found in :class:`queue.Queue`.  These methods are usually unnecessary for most code:"
msgstr ""

msgid "Indicate that no more data will be put on this queue by the current process.  The background thread will quit once it has flushed all buffered data to the pipe.  This is called automatically when the queue is garbage collected."
msgstr ""

msgid "Join the background thread.  This can only be used after :meth:`close` has been called.  It blocks until the background thread exits, ensuring that all data in the buffer has been flushed to the pipe."
msgstr ""

msgid "By default if a process is not the creator of the queue then on exit it will attempt to join the queue's background thread.  The process can call :meth:`cancel_join_thread` to make :meth:`join_thread` do nothing."
msgstr ""

msgid "Prevent :meth:`join_thread` from blocking.  In particular, this prevents the background thread from being joined automatically when the process exits -- see :meth:`join_thread`."
msgstr ""

msgid ":class:`JoinableQueue`, a :class:`Queue` subclass, is a queue which additionally has :meth:`task_done` and :meth:`join` methods."
msgstr ""

msgid "Indicate that a formerly enqueued task is complete. Used by queue consumer threads.  For each :meth:`~Queue.get` used to fetch a task, a subsequent call to :meth:`task_done` tells the queue that the processing on the task is complete."
msgstr ""

msgid "If a :meth:`~Queue.join` is currently blocking, it will resume when all items have been processed (meaning that a :meth:`task_done` call was received for every item that had been :meth:`~Queue.put` into the queue)."
msgstr ""

msgid "Raises a :exc:`ValueError` if called more times than there were items placed in the queue."
msgstr ""

msgid "Block until all items in the queue have been gotten and processed."
msgstr ""

msgid "The count of unfinished tasks goes up whenever an item is added to the queue.  The count goes down whenever a consumer thread calls :meth:`task_done` to indicate that the item was retrieved and all work on it is complete.  When the count of unfinished tasks drops to zero, :meth:`~Queue.join` unblocks."
msgstr ""

msgid "Miscellaneous"
msgstr ""

msgid "Return list of all live children of the current process."
msgstr ""

msgid "Calling this has the side affect of \"joining\" any processes which have already finished."
msgstr ""

msgid "Return the number of CPUs in the system.  May raise :exc:`NotImplementedError`."
msgstr ""

msgid "Return the :class:`Process` object corresponding to the current process."
msgstr ""

msgid "An analogue of :func:`threading.current_thread`."
msgstr ""

msgid "Add support for when a program which uses :mod:`multiprocessing` has been frozen to produce a Windows executable.  (Has been tested with **py2exe**, **PyInstaller** and **cx_Freeze**.)"
msgstr ""

msgid "One needs to call this function straight after the ``if __name__ == '__main__'`` line of the main module.  For example::"
msgstr ""

msgid "from multiprocessing import Process, freeze_support  def f():     print('hello world!')  if __name__ == '__main__':     freeze_support()     Process(target=f).start()"
msgstr ""

msgid "If the ``freeze_support()`` line is omitted then trying to run the frozen executable will raise :exc:`RuntimeError`."
msgstr ""

msgid "If the module is being run normally by the Python interpreter then :func:`freeze_support` has no effect."
msgstr ""

msgid "Sets the path of the Python interpreter to use when starting a child process. (By default :data:`sys.executable` is used).  Embedders will probably need to do some thing like ::"
msgstr ""

msgid "setExecutable(os.path.join(sys.exec_prefix, 'pythonw.exe'))"
msgstr ""

msgid "before they can create child processes.  (Windows only)"
msgstr ""

msgid ":mod:`multiprocessing` contains no analogues of :func:`threading.active_count`, :func:`threading.enumerate`, :func:`threading.settrace`, :func:`threading.setprofile`, :class:`threading.Timer`, or :class:`threading.local`."
msgstr ""

msgid "Connection Objects"
msgstr ""

msgid "Connection objects allow the sending and receiving of picklable objects or strings.  They can be thought of as message oriented connected sockets."
msgstr ""

msgid "Connection objects usually created using :func:`Pipe` -- see also :ref:`multiprocessing-listeners-clients`."
msgstr ""

msgid "Send an object to the other end of the connection which should be read using :meth:`recv`."
msgstr ""

msgid "The object must be picklable.  Very large pickles (approximately 32 MB+, though it depends on the OS) may raise a ValueError exception."
msgstr ""

msgid "Return an object sent from the other end of the connection using :meth:`send`.  Raises :exc:`EOFError` if there is nothing left to receive and the other end was closed."
msgstr ""

msgid "Returns the file descriptor or handle used by the connection."
msgstr ""

msgid "Close the connection."
msgstr ""

msgid "This is called automatically when the connection is garbage collected."
msgstr ""

msgid "Return whether there is any data available to be read."
msgstr ""

msgid "If *timeout* is not specified then it will return immediately.  If *timeout* is a number then this specifies the maximum time in seconds to block.  If *timeout* is ``None`` then an infinite timeout is used."
msgstr ""

msgid "Send byte data from an object supporting the buffer interface as a complete message."
msgstr ""

msgid "If *offset* is given then data is read from that position in *buffer*.  If *size* is given then that many bytes will be read from buffer.  Very large buffers (approximately 32 MB+, though it depends on the OS) may raise a ValueError exception"
msgstr ""

msgid "Return a complete message of byte data sent from the other end of the connection as a string.  Raises :exc:`EOFError` if there is nothing left to receive and the other end has closed."
msgstr ""

msgid "If *maxlength* is specified and the message is longer than *maxlength* then :exc:`IOError` is raised and the connection will no longer be readable."
msgstr ""

msgid "Read into *buffer* a complete message of byte data sent from the other end of the connection and return the number of bytes in the message.  Raises :exc:`EOFError` if there is nothing left to receive and the other end was closed."
msgstr ""

msgid "*buffer* must be an object satisfying the writable buffer interface.  If *offset* is given then the message will be written into the buffer from that position.  Offset must be a non-negative integer less than the length of *buffer* (in bytes)."
msgstr ""

msgid "If the buffer is too short then a :exc:`BufferTooShort` exception is raised and the complete message is available as ``e.args[0]`` where ``e`` is the exception instance."
msgstr ""

msgid ">>> from multiprocessing import Pipe >>> a, b = Pipe() >>> a.send([1, 'hello', None]) >>> b.recv() [1, 'hello', None] >>> b.send_bytes('thank you') >>> a.recv_bytes() 'thank you' >>> import array >>> arr1 = array.array('i', range(5)) >>> arr2 = array.array('i', [0] * 10) >>> a.send_bytes(arr1) >>> count = b.recv_bytes_into(arr2) >>> assert count == len(arr1) * arr1.itemsize >>> arr2 array('i', [0, 1, 2, 3, 4, 0, 0, 0, 0, 0])"
msgstr ""

msgid "The :meth:`Connection.recv` method automatically unpickles the data it receives, which can be a security risk unless you can trust the process which sent the message."
msgstr ""

msgid "Therefore, unless the connection object was produced using :func:`Pipe` you should only use the :meth:`~Connection.recv` and :meth:`~Connection.send` methods after performing some sort of authentication.  See :ref:`multiprocessing-auth-keys`."
msgstr ""

msgid "If a process is killed while it is trying to read or write to a pipe then the data in the pipe is likely to become corrupted, because it may become impossible to be sure where the message boundaries lie."
msgstr ""

msgid "Synchronization primitives"
msgstr ""

msgid "Generally synchronization primitives are not as necessary in a multiprocess program as they are in a multithreaded program.  See the documentation for :mod:`threading` module."
msgstr ""

msgid "Note that one can also create synchronization primitives by using a manager object -- see :ref:`multiprocessing-managers`."
msgstr ""

msgid "A bounded semaphore object: a clone of :class:`threading.BoundedSemaphore`."
msgstr ""

msgid "(On Mac OS X, this is indistinguishable from :class:`Semaphore` because ``sem_getvalue()`` is not implemented on that platform)."
msgstr ""

msgid "A condition variable: a clone of :class:`threading.Condition`."
msgstr ""

msgid "If *lock* is specified then it should be a :class:`Lock` or :class:`RLock` object from :mod:`multiprocessing`."
msgstr ""

msgid "A clone of :class:`threading.Event`. This method returns the state of the internal semaphore on exit, so it will always return ``True`` except if a timeout is given and the operation times out."
msgstr ""

msgid "A non-recursive lock object: a clone of :class:`threading.Lock`."
msgstr ""

msgid "A recursive lock object: a clone of :class:`threading.RLock`."
msgstr ""

msgid "A bounded semaphore object: a clone of :class:`threading.Semaphore`."
msgstr ""

msgid "The :meth:`acquire` method of :class:`BoundedSemaphore`, :class:`Lock`, :class:`RLock` and :class:`Semaphore` has a timeout parameter not supported by the equivalents in :mod:`threading`.  The signature is ``acquire(block=True, timeout=None)`` with keyword parameters being acceptable.  If *block* is ``True`` and *timeout* is not ``None`` then it specifies a timeout in seconds.  If *block* is ``False`` then *timeout* is ignored."
msgstr ""

msgid "On Mac OS X, ``sem_timedwait`` is unsupported, so calling ``acquire()`` with a timeout will emulate that function's behavior using a sleeping loop."
msgstr ""

msgid "If the SIGINT signal generated by Ctrl-C arrives while the main thread is blocked by a call to :meth:`BoundedSemaphore.acquire`, :meth:`Lock.acquire`, :meth:`RLock.acquire`, :meth:`Semaphore.acquire`, :meth:`Condition.acquire` or :meth:`Condition.wait` then the call will be immediately interrupted and :exc:`KeyboardInterrupt` will be raised."
msgstr ""

msgid "This differs from the behaviour of :mod:`threading` where SIGINT will be ignored while the equivalent blocking calls are in progress."
msgstr ""

msgid "Shared :mod:`ctypes` Objects"
msgstr ""

msgid "It is possible to create shared objects using shared memory which can be inherited by child processes."
msgstr ""

msgid "Return a :mod:`ctypes` object allocated from shared memory.  By default the return value is actually a synchronized wrapper for the object."
msgstr ""

msgid "*typecode_or_type* determines the type of the returned object: it is either a ctypes type or a one character typecode of the kind used by the :mod:`array` module.  *\\*args* is passed on to the constructor for the type."
msgstr ""

msgid "If *lock* is ``True`` (the default) then a new lock object is created to synchronize access to the value.  If *lock* is a :class:`Lock` or :class:`RLock` object then that will be used to synchronize access to the value.  If *lock* is ``False`` then access to the returned object will not be automatically protected by a lock, so it will not necessarily be \"process-safe\"."
msgstr ""

msgid "Note that *lock* is a keyword-only argument."
msgstr ""

msgid "Return a ctypes array allocated from shared memory.  By default the return value is actually a synchronized wrapper for the array."
msgstr ""

msgid "*typecode_or_type* determines the type of the elements of the returned array: it is either a ctypes type or a one character typecode of the kind used by the :mod:`array` module.  If *size_or_initializer* is an integer, then it determines the length of the array, and the array will be initially zeroed. Otherwise, *size_or_initializer* is a sequence which is used to initialize the array and whose length determines the length of the array."
msgstr ""

msgid "Note that *lock* is a keyword only argument."
msgstr ""

msgid "Note that an array of :data:`ctypes.c_char` has *value* and *raw* attributes which allow one to use it to store and retrieve strings."
msgstr ""

msgid "The :mod:`multiprocessing.sharedctypes` module"
msgstr ""

msgid "The :mod:`multiprocessing.sharedctypes` module provides functions for allocating :mod:`ctypes` objects from shared memory which can be inherited by child processes."
msgstr ""

msgid "Although it is possible to store a pointer in shared memory remember that this will refer to a location in the address space of a specific process. However, the pointer is quite likely to be invalid in the context of a second process and trying to dereference the pointer from the second process may cause a crash."
msgstr ""

msgid "Return a ctypes array allocated from shared memory."
msgstr ""

msgid "*typecode_or_type* determines the type of the elements of the returned array: it is either a ctypes type or a one character typecode of the kind used by the :mod:`array` module.  If *size_or_initializer* is an integer then it determines the length of the array, and the array will be initially zeroed. Otherwise *size_or_initializer* is a sequence which is used to initialize the array and whose length determines the length of the array."
msgstr ""

msgid "Note that setting and getting an element is potentially non-atomic -- use :func:`Array` instead to make sure that access is automatically synchronized using a lock."
msgstr ""

msgid "Return a ctypes object allocated from shared memory."
msgstr ""

msgid "Note that setting and getting the value is potentially non-atomic -- use :func:`Value` instead to make sure that access is automatically synchronized using a lock."
msgstr ""

msgid "Note that an array of :data:`ctypes.c_char` has ``value`` and ``raw`` attributes which allow one to use it to store and retrieve strings -- see documentation for :mod:`ctypes`."
msgstr ""

msgid "The same as :func:`RawArray` except that depending on the value of *lock* a process-safe synchronization wrapper may be returned instead of a raw ctypes array."
msgstr ""

msgid "The same as :func:`RawValue` except that depending on the value of *lock* a process-safe synchronization wrapper may be returned instead of a raw ctypes object."
msgstr ""

msgid "Return a ctypes object allocated from shared memory which is a copy of the ctypes object *obj*."
msgstr ""

msgid "Return a process-safe wrapper object for a ctypes object which uses *lock* to synchronize access.  If *lock* is ``None`` (the default) then a :class:`multiprocessing.RLock` object is created automatically."
msgstr ""

msgid "A synchronized wrapper will have two methods in addition to those of the object it wraps: :meth:`get_obj` returns the wrapped object and :meth:`get_lock` returns the lock object used for synchronization."
msgstr ""

msgid "Note that accessing the ctypes object through the wrapper can be a lot slower than accessing the raw ctypes object."
msgstr ""

msgid "The table below compares the syntax for creating shared ctypes objects from shared memory with the normal ctypes syntax.  (In the table ``MyStruct`` is some subclass of :class:`ctypes.Structure`.)"
msgstr ""

msgid "ctypes"
msgstr ""

msgid "sharedctypes using type"
msgstr ""

msgid "sharedctypes using typecode"
msgstr ""

msgid "c_double(2.4)"
msgstr ""

msgid "RawValue(c_double, 2.4)"
msgstr ""

msgid "RawValue('d', 2.4)"
msgstr ""

msgid "MyStruct(4, 6)"
msgstr ""

msgid "RawValue(MyStruct, 4, 6)"
msgstr ""

msgid "(c_short * 7)()"
msgstr ""

msgid "RawArray(c_short, 7)"
msgstr ""

msgid "RawArray('h', 7)"
msgstr ""

msgid "(c_int * 3)(9, 2, 8)"
msgstr ""

msgid "RawArray(c_int, (9, 2, 8))"
msgstr ""

msgid "RawArray('i', (9, 2, 8))"
msgstr ""

msgid "Below is an example where a number of ctypes objects are modified by a child process::"
msgstr ""

msgid "from multiprocessing import Process, Lock from multiprocessing.sharedctypes import Value, Array from ctypes import Structure, c_double  class Point(Structure):     _fields_ = [('x', c_double), ('y', c_double)]  def modify(n, x, s, A):     n.value **= 2     x.value **= 2     s.value = s.value.upper()     for a in A:         a.x **= 2         a.y **= 2  if __name__ == '__main__':     lock = Lock()      n = Value('i', 7)     x = Value(c_double, 1.0/3.0, lock=False)     s = Array('c', 'hello world', lock=lock)     A = Array(Point, [(1.875,-6.25), (-5.75,2.0), (2.375,9.5)], lock=lock)      p = Process(target=modify, args=(n, x, s, A))     p.start()     p.join()      print(n.value)     print(x.value)     print(s.value)     print([(a.x, a.y) for a in A])"
msgstr ""

msgid "The results printed are ::"
msgstr ""

msgid "49 0.1111111111111111 HELLO WORLD [(3.515625, 39.0625), (33.0625, 4.0), (5.640625, 90.25)]"
msgstr ""

msgid "Managers"
msgstr ""

msgid "Managers provide a way to create data which can be shared between different processes. A manager object controls a server process which manages *shared objects*.  Other processes can access the shared objects by using proxies."
msgstr ""

msgid "Returns a started :class:`~multiprocessing.managers.SyncManager` object which can be used for sharing objects between processes.  The returned manager object corresponds to a spawned child process and has methods which will create shared objects and return corresponding proxies."
msgstr ""

msgid "Manager processes will be shutdown as soon as they are garbage collected or their parent process exits.  The manager classes are defined in the :mod:`multiprocessing.managers` module:"
msgstr ""

msgid "Create a BaseManager object."
msgstr ""

msgid "Once created one should call :meth:`start` or ``get_server().serve_forever()`` to ensure that the manager object refers to a started manager process."
msgstr ""

msgid "*address* is the address on which the manager process listens for new connections.  If *address* is ``None`` then an arbitrary one is chosen."
msgstr ""

msgid "*authkey* is the authentication key which will be used to check the validity of incoming connections to the server process.  If *authkey* is ``None`` then ``current_process().authkey``.  Otherwise *authkey* is used and it must be a string."
msgstr ""

msgid "Start a subprocess to start the manager.  If *initializer* is not ``None`` then the subprocess will call ``initializer(*initargs)`` when it starts."
msgstr ""

msgid "Returns a :class:`Server` object which represents the actual server under the control of the Manager. The :class:`Server` object supports the :meth:`serve_forever` method::"
msgstr ""

msgid ">>> from multiprocessing.managers import BaseManager >>> manager = BaseManager(address=('', 50000), authkey='abc') >>> server = manager.get_server() >>> server.serve_forever()"
msgstr ""

msgid ":class:`Server` additionally has an :attr:`address` attribute."
msgstr ""

msgid "Connect a local manager object to a remote manager process::"
msgstr ""

msgid ">>> from multiprocessing.managers import BaseManager >>> m = BaseManager(address=('127.0.0.1', 5000), authkey='abc') >>> m.connect()"
msgstr ""

msgid "Stop the process used by the manager.  This is only available if :meth:`start` has been used to start the server process."
msgstr ""

msgid "This can be called multiple times."
msgstr ""

msgid "A classmethod which can be used for registering a type or callable with the manager class."
msgstr ""

msgid "*typeid* is a \"type identifier\" which is used to identify a particular type of shared object.  This must be a string."
msgstr ""

msgid "*callable* is a callable used for creating objects for this type identifier.  If a manager instance will be created using the :meth:`from_address` classmethod or if the *create_method* argument is ``False`` then this can be left as ``None``."
msgstr ""

msgid "*proxytype* is a subclass of :class:`BaseProxy` which is used to create proxies for shared objects with this *typeid*.  If ``None`` then a proxy class is created automatically."
msgstr ""

msgid "*exposed* is used to specify a sequence of method names which proxies for this typeid should be allowed to access using :meth:`BaseProxy._callMethod`.  (If *exposed* is ``None`` then :attr:`proxytype._exposed_` is used instead if it exists.)  In the case where no exposed list is specified, all \"public methods\" of the shared object will be accessible.  (Here a \"public method\" means any attribute which has a :meth:`__call__` method and whose name does not begin with ``'_'``.)"
msgstr ""

msgid "*method_to_typeid* is a mapping used to specify the return type of those exposed methods which should return a proxy.  It maps method names to typeid strings.  (If *method_to_typeid* is ``None`` then :attr:`proxytype._method_to_typeid_` is used instead if it exists.)  If a method's name is not a key of this mapping or if the mapping is ``None`` then the object returned by the method will be copied by value."
msgstr ""

msgid "*create_method* determines whether a method should be created with name *typeid* which can be used to tell the server process to create a new shared object and return a proxy for it.  By default it is ``True``."
msgstr ""

msgid ":class:`BaseManager` instances also have one read-only property:"
msgstr ""

msgid "The address used by the manager."
msgstr ""

msgid "A subclass of :class:`BaseManager` which can be used for the synchronization of processes.  Objects of this type are returned by :func:`multiprocessing.Manager`."
msgstr ""

msgid "It also supports creation of shared lists and dictionaries."
msgstr ""

msgid "Create a shared :class:`threading.BoundedSemaphore` object and return a proxy for it."
msgstr ""

msgid "Create a shared :class:`threading.Condition` object and return a proxy for it."
msgstr ""

msgid "If *lock* is supplied then it should be a proxy for a :class:`threading.Lock` or :class:`threading.RLock` object."
msgstr ""

msgid "Create a shared :class:`threading.Event` object and return a proxy for it."
msgstr ""

msgid "Create a shared :class:`threading.Lock` object and return a proxy for it."
msgstr ""

msgid "Create a shared :class:`Namespace` object and return a proxy for it."
msgstr ""

msgid "Create a shared :class:`queue.Queue` object and return a proxy for it."
msgstr ""

msgid "Create a shared :class:`threading.RLock` object and return a proxy for it."
msgstr ""

msgid "Create a shared :class:`threading.Semaphore` object and return a proxy for it."
msgstr ""

msgid "Create an array and return a proxy for it."
msgstr ""

msgid "Create an object with a writable ``value`` attribute and return a proxy for it."
msgstr ""

msgid "Create a shared ``dict`` object and return a proxy for it."
msgstr ""

msgid "Create a shared ``list`` object and return a proxy for it."
msgstr ""

msgid "Namespace objects"
msgstr ""

msgid "A namespace object has no public methods, but does have writable attributes. Its representation shows the values of its attributes."
msgstr ""

msgid "However, when using a proxy for a namespace object, an attribute beginning with ``'_'`` will be an attribute of the proxy and not an attribute of the referent:"
msgstr ""

msgid ">>> manager = multiprocessing.Manager() >>> Global = manager.Namespace() >>> Global.x = 10 >>> Global.y = 'hello' >>> Global._z = 12.3    # this is an attribute of the proxy >>> print(Global) Namespace(x=10, y='hello')"
msgstr ""

msgid "Customized managers"
msgstr ""

msgid "To create one's own manager, one creates a subclass of :class:`BaseManager` and use the :meth:`~BaseManager.register` classmethod to register new types or callables with the manager class.  For example::"
msgstr ""

msgid "from multiprocessing.managers import BaseManager  class MathsClass(object):     def add(self, x, y):         return x + y     def mul(self, x, y):         return x * y  class MyManager(BaseManager):     pass  MyManager.register('Maths', MathsClass)  if __name__ == '__main__':     manager = MyManager()     manager.start()     maths = manager.Maths()     print(maths.add(4, 3))         # prints 7     print(maths.mul(7, 8))         # prints 56"
msgstr ""

msgid "Using a remote manager"
msgstr ""

msgid "It is possible to run a manager server on one machine and have clients use it from other machines (assuming that the firewalls involved allow it)."
msgstr ""

msgid "Running the following commands creates a server for a single shared queue which remote clients can access::"
msgstr ""

msgid ">>> from multiprocessing.managers import BaseManager >>> import queue >>> queue = queue.Queue() >>> class QueueManager(BaseManager): pass >>> QueueManager.register('get_queue', callable=lambda:queue) >>> m = QueueManager(address=('', 50000), authkey='abracadabra') >>> s = m.get_server() >>> s.serve_forever()"
msgstr ""

msgid "One client can access the server as follows::"
msgstr ""

msgid ">>> from multiprocessing.managers import BaseManager >>> class QueueManager(BaseManager): pass >>> QueueManager.register('get_queue') >>> m = QueueManager(address=('foo.bar.org', 50000), authkey='abracadabra') >>> m.connect() >>> queue = m.get_queue() >>> queue.put('hello')"
msgstr ""

msgid "Another client can also use it::"
msgstr ""

msgid ">>> from multiprocessing.managers import BaseManager >>> class QueueManager(BaseManager): pass >>> QueueManager.register('get_queue') >>> m = QueueManager(address=('foo.bar.org', 50000), authkey='abracadabra') >>> m.connect() >>> queue = m.get_queue() >>> queue.get() 'hello'"
msgstr ""

msgid "Local processes can also access that queue, using the code from above on the client to access it remotely::"
msgstr ""

msgid ">>> from multiprocessing import Process, Queue >>> from multiprocessing.managers import BaseManager >>> class Worker(Process): ...     def __init__(self, q): ...         self.q = q ...         super(Worker, self).__init__() ...     def run(self): ...         self.q.put('local hello') ... >>> queue = Queue() >>> w = Worker(queue) >>> w.start() >>> class QueueManager(BaseManager): pass ... >>> QueueManager.register('get_queue', callable=lambda: queue) >>> m = QueueManager(address=('', 50000), authkey='abracadabra') >>> s = m.get_server() >>> s.serve_forever()"
msgstr ""

msgid "Proxy Objects"
msgstr ""

msgid "A proxy is an object which *refers* to a shared object which lives (presumably) in a different process.  The shared object is said to be the *referent* of the proxy.  Multiple proxy objects may have the same referent."
msgstr ""

msgid "A proxy object has methods which invoke corresponding methods of its referent (although not every method of the referent will necessarily be available through the proxy).  A proxy can usually be used in most of the same ways that its referent can:"
msgstr ""

msgid ">>> from multiprocessing import Manager >>> manager = Manager() >>> l = manager.list([i*i for i in range(10)]) >>> print(l) [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] >>> print(repr(l)) <ListProxy object, typeid 'list' at 0x...> >>> l[4] 16 >>> l[2:5] [4, 9, 16]"
msgstr ""

msgid "Notice that applying :func:`str` to a proxy will return the representation of the referent, whereas applying :func:`repr` will return the representation of the proxy."
msgstr ""

msgid "An important feature of proxy objects is that they are picklable so they can be passed between processes.  Note, however, that if a proxy is sent to the corresponding manager's process then unpickling it will produce the referent itself.  This means, for example, that one shared object can contain a second:"
msgstr ""

msgid ">>> a = manager.list() >>> b = manager.list() >>> a.append(b)         # referent of a now contains referent of b >>> print(a, b) [[]] [] >>> b.append('hello') >>> print(a, b) [['hello']] ['hello']"
msgstr ""

msgid "The proxy types in :mod:`multiprocessing` do nothing to support comparisons by value.  So, for instance, we have:"
msgstr ""

msgid ">>> manager.list([1,2,3]) == [1,2,3] False"
msgstr ""

msgid "One should just use a copy of the referent instead when making comparisons."
msgstr ""

msgid "Proxy objects are instances of subclasses of :class:`BaseProxy`."
msgstr ""

msgid "Call and return the result of a method of the proxy's referent."
msgstr ""

msgid "If ``proxy`` is a proxy whose referent is ``obj`` then the expression ::"
msgstr ""

msgid "proxy._callmethod(methodname, args, kwds)"
msgstr ""

msgid "will evaluate the expression ::"
msgstr ""

msgid "getattr(obj, methodname)(*args, **kwds)"
msgstr ""

msgid "in the manager's process."
msgstr ""

msgid "The returned value will be a copy of the result of the call or a proxy to a new shared object -- see documentation for the *method_to_typeid* argument of :meth:`BaseManager.register`."
msgstr ""

msgid "If an exception is raised by the call, then then is re-raised by :meth:`_callmethod`.  If some other exception is raised in the manager's process then this is converted into a :exc:`RemoteError` exception and is raised by :meth:`_callmethod`."
msgstr ""

msgid "Note in particular that an exception will be raised if *methodname* has not been *exposed*"
msgstr ""

msgid "An example of the usage of :meth:`_callmethod`:"
msgstr ""

msgid ">>> l = manager.list(range(10)) >>> l._callmethod('__len__') 10 >>> l._callmethod('__getslice__', (2, 7))   # equiv to `l[2:7]` [2, 3, 4, 5, 6] >>> l._callmethod('__getitem__', (20,))     # equiv to `l[20]` Traceback (most recent call last): ... IndexError: list index out of range"
msgstr ""

msgid "Return a copy of the referent."
msgstr ""

msgid "If the referent is unpicklable then this will raise an exception."
msgstr ""

msgid "Return a representation of the proxy object."
msgstr ""

msgid "Return the representation of the referent."
msgstr ""

msgid "Cleanup"
msgstr ""

msgid "A proxy object uses a weakref callback so that when it gets garbage collected it deregisters itself from the manager which owns its referent."
msgstr ""

msgid "A shared object gets deleted from the manager process when there are no longer any proxies referring to it."
msgstr ""

msgid "Process Pools"
msgstr ""

msgid "One can create a pool of processes which will carry out tasks submitted to it with the :class:`Pool` class."
msgstr ""

msgid "A process pool object which controls a pool of worker processes to which jobs can be submitted.  It supports asynchronous results with timeouts and callbacks and has a parallel map implementation."
msgstr ""

msgid "*processes* is the number of worker processes to use.  If *processes* is ``None`` then the number returned by :func:`cpu_count` is used.  If *initializer* is not ``None`` then each worker process will call ``initializer(*initargs)`` when it starts."
msgstr ""

msgid "*maxtasksperchild* is the number of tasks a worker process can complete before it will exit and be replaced with a fresh worker process, to enable unused resources to be freed. The default *maxtasksperchild* is None, which means worker processes will live as long as the pool."
msgstr ""

msgid "Worker processes within a :class:`Pool` typically live for the complete duration of the Pool's work queue. A frequent pattern found in other systems (such as Apache, mod_wsgi, etc) to free resources held by workers is to allow a worker within a pool to complete only a set amount of work before being exiting, being cleaned up and a new process spawned to replace the old one. The *maxtasksperchild* argument to the :class:`Pool` exposes this ability to the end user."
msgstr ""

msgid "Call *func* with arguments *args* and keyword arguments *kwds*.  It blocks till the result is ready. Given this blocks, :meth:`apply_async` is better suited for performing work in parallel. Additionally, the passed in function is only executed in one of the workers of the pool."
msgstr ""

msgid "A variant of the :meth:`apply` method which returns a result object."
msgstr ""

msgid "If *callback* is specified then it should be a callable which accepts a single argument.  When the result becomes ready *callback* is applied to it (unless the call failed).  *callback* should complete immediately since otherwise the thread which handles the results will get blocked."
msgstr ""

msgid "A parallel equivalent of the :func:`map` built-in function (it supports only one *iterable* argument though).  It blocks till the result is ready."
msgstr ""

msgid "This method chops the iterable into a number of chunks which it submits to the process pool as separate tasks.  The (approximate) size of these chunks can be specified by setting *chunksize* to a positive integer."
msgstr ""

msgid "A variant of the :meth:`.map` method which returns a result object."
msgstr ""

msgid "A lazier version of :meth:`map`."
msgstr ""

msgid "The *chunksize* argument is the same as the one used by the :meth:`.map` method.  For very long iterables using a large value for *chunksize* can make make the job complete **much** faster than using the default value of ``1``."
msgstr ""

msgid "Also if *chunksize* is ``1`` then the :meth:`!next` method of the iterator returned by the :meth:`imap` method has an optional *timeout* parameter: ``next(timeout)`` will raise :exc:`multiprocessing.TimeoutError` if the result cannot be returned within *timeout* seconds."
msgstr ""

msgid "The same as :meth:`imap` except that the ordering of the results from the returned iterator should be considered arbitrary.  (Only when there is only one worker process is the order guaranteed to be \"correct\".)"
msgstr ""

msgid "Prevents any more tasks from being submitted to the pool.  Once all the tasks have been completed the worker processes will exit."
msgstr ""

msgid "Stops the worker processes immediately without completing outstanding work.  When the pool object is garbage collected :meth:`terminate` will be called immediately."
msgstr ""

msgid "Wait for the worker processes to exit.  One must call :meth:`close` or :meth:`terminate` before using :meth:`join`."
msgstr ""

msgid "The class of the result returned by :meth:`Pool.apply_async` and :meth:`Pool.map_async`."
msgstr ""

msgid "Return the result when it arrives.  If *timeout* is not ``None`` and the result does not arrive within *timeout* seconds then :exc:`multiprocessing.TimeoutError` is raised.  If the remote call raised an exception then that exception will be reraised by :meth:`get`."
msgstr ""

msgid "Wait until the result is available or until *timeout* seconds pass."
msgstr ""

msgid "Return whether the call has completed."
msgstr ""

msgid "Return whether the call completed without raising an exception.  Will raise :exc:`AssertionError` if the result is not ready."
msgstr ""

msgid "The following example demonstrates the use of a pool::"
msgstr ""

msgid "from multiprocessing import Pool  def f(x):     return x*x  if __name__ == '__main__':     pool = Pool(processes=4)              # start 4 worker processes      result = pool.apply_async(f, (10,))   # evaluate \"f(10)\" asynchronously     print(result.get(timeout=1))          # prints \"100\" unless your computer is *very* slow      print(pool.map(f, range(10)))         # prints \"[0, 1, 4,..., 81]\"      it = pool.imap(f, range(10))     print(next(it))                       # prints \"0\"     print(next(it))                       # prints \"1\"     print(it.next(timeout=1))             # prints \"4\" unless your computer is *very* slow      import time     result = pool.apply_async(time.sleep, (10,))     print(result.get(timeout=1))          # raises TimeoutError"
msgstr ""

msgid "Listeners and Clients"
msgstr ""

msgid "Usually message passing between processes is done using queues or by using :class:`Connection` objects returned by :func:`Pipe`."
msgstr ""

msgid "However, the :mod:`multiprocessing.connection` module allows some extra flexibility.  It basically gives a high level message oriented API for dealing with sockets or Windows named pipes, and also has support for *digest authentication* using the :mod:`hmac` module."
msgstr ""

msgid "Send a randomly generated message to the other end of the connection and wait for a reply."
msgstr ""

msgid "If the reply matches the digest of the message using *authkey* as the key then a welcome message is sent to the other end of the connection.  Otherwise :exc:`AuthenticationError` is raised."
msgstr ""

msgid "Receive a message, calculate the digest of the message using *authkey* as the key, and then send the digest back."
msgstr ""

msgid "If a welcome message is not received, then :exc:`AuthenticationError` is raised."
msgstr ""

msgid "Attempt to set up a connection to the listener which is using address *address*, returning a :class:`~multiprocessing.Connection`."
msgstr ""

msgid "The type of the connection is determined by *family* argument, but this can generally be omitted since it can usually be inferred from the format of *address*. (See :ref:`multiprocessing-address-formats`)"
msgstr ""

msgid "If *authenticate* is ``True`` or *authkey* is a string then digest authentication is used.  The key used for authentication will be either *authkey* or ``current_process().authkey)`` if *authkey* is ``None``. If authentication fails then :exc:`AuthenticationError` is raised.  See :ref:`multiprocessing-auth-keys`."
msgstr ""

msgid "A wrapper for a bound socket or Windows named pipe which is 'listening' for connections."
msgstr ""

msgid "*address* is the address to be used by the bound socket or named pipe of the listener object."
msgstr ""

msgid "If an address of '0.0.0.0' is used, the address will not be a connectable end point on Windows. If you require a connectable end-point, you should use '127.0.0.1'."
msgstr ""

msgid "*family* is the type of socket (or named pipe) to use.  This can be one of the strings ``'AF_INET'`` (for a TCP socket), ``'AF_UNIX'`` (for a Unix domain socket) or ``'AF_PIPE'`` (for a Windows named pipe).  Of these only the first is guaranteed to be available.  If *family* is ``None`` then the family is inferred from the format of *address*.  If *address* is also ``None`` then a default is chosen.  This default is the family which is assumed to be the fastest available.  See :ref:`multiprocessing-address-formats`.  Note that if *family* is ``'AF_UNIX'`` and address is ``None`` then the socket will be created in a private temporary directory created using :func:`tempfile.mkstemp`."
msgstr ""

msgid "If the listener object uses a socket then *backlog* (1 by default) is passed to the :meth:`listen` method of the socket once it has been bound."
msgstr ""

msgid "If *authenticate* is ``True`` (``False`` by default) or *authkey* is not ``None`` then digest authentication is used."
msgstr ""

msgid "If *authkey* is a string then it will be used as the authentication key; otherwise it must be *None*."
msgstr ""

msgid "If *authkey* is ``None`` and *authenticate* is ``True`` then ``current_process().authkey`` is used as the authentication key.  If *authkey* is ``None`` and *authenticate* is ``False`` then no authentication is done.  If authentication fails then :exc:`AuthenticationError` is raised.  See :ref:`multiprocessing-auth-keys`."
msgstr ""

msgid "Accept a connection on the bound socket or named pipe of the listener object and return a :class:`Connection` object.  If authentication is attempted and fails, then :exc:`AuthenticationError` is raised."
msgstr ""

msgid "Close the bound socket or named pipe of the listener object.  This is called automatically when the listener is garbage collected.  However it is advisable to call it explicitly."
msgstr ""

msgid "Listener objects have the following read-only properties:"
msgstr ""

msgid "The address which is being used by the Listener object."
msgstr ""

msgid "The address from which the last accepted connection came.  If this is unavailable then it is ``None``."
msgstr ""

msgid "The module defines two exceptions:"
msgstr ""

msgid "Exception raised when there is an authentication error."
msgstr ""

msgid "**Examples**"
msgstr ""

msgid "The following server code creates a listener which uses ``'secret password'`` as an authentication key.  It then waits for a connection and sends some data to the client::"
msgstr ""

msgid "from multiprocessing.connection import Listener from array import array  address = ('localhost', 6000)     # family is deduced to be 'AF_INET' listener = Listener(address, authkey='secret password')  conn = listener.accept() print('connection accepted from', listener.last_accepted)  conn.send([2.25, None, 'junk', float])  conn.send_bytes('hello')  conn.send_bytes(array('i', [42, 1729]))  conn.close() listener.close()"
msgstr ""

msgid "The following code connects to the server and receives some data from the server::"
msgstr ""

msgid "from multiprocessing.connection import Client from array import array  address = ('localhost', 6000) conn = Client(address, authkey='secret password')  print(conn.recv())                  # => [2.25, None, 'junk', float]  print(conn.recv_bytes())            # => 'hello'  arr = array('i', [0, 0, 0, 0, 0]) print(conn.recv_bytes_into(arr))    # => 8 print(arr)                          # => array('i', [42, 1729, 0, 0, 0])  conn.close()"
msgstr ""

msgid "Address Formats"
msgstr ""

msgid "An ``'AF_INET'`` address is a tuple of the form ``(hostname, port)`` where *hostname* is a string and *port* is an integer."
msgstr ""

msgid "An ``'AF_UNIX'`` address is a string representing a filename on the filesystem."
msgstr ""

msgid ":samp:`r'\\\\\\\\.\\\\pipe\\\\{PipeName}'`.  To use :func:`Client` to connect to a named pipe on a remote computer called *ServerName* one should use an address of the form :samp:`r'\\\\\\\\{ServerName}\\\\pipe\\\\{PipeName}'` instead."
msgstr ""

msgid "Note that any string beginning with two backslashes is assumed by default to be an ``'AF_PIPE'`` address rather than an ``'AF_UNIX'`` address."
msgstr ""

msgid "Authentication keys"
msgstr ""

msgid "When one uses :meth:`Connection.recv`, the data received is automatically unpickled.  Unfortunately unpickling data from an untrusted source is a security risk.  Therefore :class:`Listener` and :func:`Client` use the :mod:`hmac` module to provide digest authentication."
msgstr ""

msgid "An authentication key is a string which can be thought of as a password: once a connection is established both ends will demand proof that the other knows the authentication key.  (Demonstrating that both ends are using the same key does **not** involve sending the key over the connection.)"
msgstr ""

msgid "If authentication is requested but do authentication key is specified then the return value of ``current_process().authkey`` is used (see :class:`~multiprocessing.Process`).  This value will automatically inherited by any :class:`~multiprocessing.Process` object that the current process creates. This means that (by default) all processes of a multi-process program will share a single authentication key which can be used when setting up connections between themselves."
msgstr ""

msgid "Suitable authentication keys can also be generated by using :func:`os.urandom`."
msgstr ""

msgid "Logging"
msgstr ""

msgid "Some support for logging is available.  Note, however, that the :mod:`logging` package does not use process shared locks so it is possible (depending on the handler type) for messages from different processes to get mixed up."
msgstr ""

msgid "Returns the logger used by :mod:`multiprocessing`.  If necessary, a new one will be created."
msgstr ""

msgid "When first created the logger has level :data:`logging.NOTSET` and no default handler. Messages sent to this logger will not by default propagate to the root logger."
msgstr ""

msgid "Note that on Windows child processes will only inherit the level of the parent process's logger -- any other customization of the logger will not be inherited."
msgstr ""

msgid "This function performs a call to :func:`get_logger` but in addition to returning the logger created by get_logger, it adds a handler which sends output to :data:`sys.stderr` using format ``'[%(levelname)s/%(processName)s] %(message)s'``."
msgstr ""

msgid "Below is an example session with logging turned on::"
msgstr ""

msgid ">>> import multiprocessing, logging >>> logger = multiprocessing.log_to_stderr() >>> logger.setLevel(logging.INFO) >>> logger.warning('doomed') [WARNING/MainProcess] doomed >>> m = multiprocessing.Manager() [INFO/SyncManager-...] child process calling self.run() [INFO/SyncManager-...] created temp directory /.../pymp-... [INFO/SyncManager-...] manager serving at '/.../listener-...' >>> del m [INFO/MainProcess] sending shutdown message to manager [INFO/SyncManager-...] manager exiting with exitcode 0"
msgstr ""

msgid "In addition to having these two logging functions, the multiprocessing also exposes two additional logging level attributes. These are  :const:`SUBWARNING` and :const:`SUBDEBUG`. The table below illustrates where theses fit in the normal level hierarchy."
msgstr ""

msgid "``SUBWARNING``"
msgstr ""

msgid "25"
msgstr ""

msgid "``SUBDEBUG``"
msgstr ""

msgid "5"
msgstr ""

msgid "For a full table of logging levels, see the :mod:`logging` module."
msgstr ""

msgid "These additional logging levels are used primarily for certain debug messages within the multiprocessing module. Below is the same example as above, except with :const:`SUBDEBUG` enabled::"
msgstr ""

msgid ">>> import multiprocessing, logging >>> logger = multiprocessing.log_to_stderr() >>> logger.setLevel(multiprocessing.SUBDEBUG) >>> logger.warning('doomed') [WARNING/MainProcess] doomed >>> m = multiprocessing.Manager() [INFO/SyncManager-...] child process calling self.run() [INFO/SyncManager-...] created temp directory /.../pymp-... [INFO/SyncManager-...] manager serving at '/.../pymp-djGBXN/listener-...' >>> del m [SUBDEBUG/MainProcess] finalizer calling ... [INFO/MainProcess] sending shutdown message to manager [DEBUG/SyncManager-...] manager received shutdown message [SUBDEBUG/SyncManager-...] calling <Finalize object, callback=unlink, ... [SUBDEBUG/SyncManager-...] finalizer calling <built-in function unlink> ... [SUBDEBUG/SyncManager-...] calling <Finalize object, dead> [SUBDEBUG/SyncManager-...] finalizer calling <function rmtree at 0x5aa730> ... [INFO/SyncManager-...] manager exiting with exitcode 0"
msgstr ""

msgid "The :mod:`multiprocessing.dummy` module"
msgstr ""

msgid ":mod:`multiprocessing.dummy` replicates the API of :mod:`multiprocessing` but is no more than a wrapper around the :mod:`threading` module."
msgstr ""

msgid "Programming guidelines"
msgstr ""

msgid "There are certain guidelines and idioms which should be adhered to when using :mod:`multiprocessing`."
msgstr ""

msgid "All platforms"
msgstr ""

msgid "Avoid shared state"
msgstr ""

msgid "As far as possible one should try to avoid shifting large amounts of data between processes."
msgstr ""

msgid "It is probably best to stick to using queues or pipes for communication between processes rather than using the lower level synchronization primitives from the :mod:`threading` module."
msgstr ""

msgid "Picklability"
msgstr ""

msgid "Ensure that the arguments to the methods of proxies are picklable."
msgstr ""

msgid "Thread safety of proxies"
msgstr ""

msgid "Do not use a proxy object from more than one thread unless you protect it with a lock."
msgstr ""

msgid "(There is never a problem with different processes using the *same* proxy.)"
msgstr ""

msgid "Joining zombie processes"
msgstr ""

msgid "On Unix when a process finishes but has not been joined it becomes a zombie. There should never be very many because each time a new process starts (or :func:`active_children` is called) all completed processes which have not yet been joined will be joined.  Also calling a finished process's :meth:`Process.is_alive` will join the process.  Even so it is probably good practice to explicitly join all the processes that you start."
msgstr ""

msgid "Better to inherit than pickle/unpickle"
msgstr ""

msgid "On Windows many types from :mod:`multiprocessing` need to be picklable so that child processes can use them.  However, one should generally avoid sending shared objects to other processes using pipes or queues.  Instead you should arrange the program so that a process which need access to a shared resource created elsewhere can inherit it from an ancestor process."
msgstr ""

msgid "Avoid terminating processes"
msgstr ""

msgid "Using the :meth:`Process.terminate` method to stop a process is liable to cause any shared resources (such as locks, semaphores, pipes and queues) currently being used by the process to become broken or unavailable to other processes."
msgstr ""

msgid "Therefore it is probably best to only consider using :meth:`Process.terminate` on processes which never use any shared resources."
msgstr ""

msgid "Joining processes that use queues"
msgstr ""

msgid "Bear in mind that a process that has put items in a queue will wait before terminating until all the buffered items are fed by the \"feeder\" thread to the underlying pipe.  (The child process can call the :meth:`Queue.cancel_join_thread` method of the queue to avoid this behaviour.)"
msgstr ""

msgid "This means that whenever you use a queue you need to make sure that all items which have been put on the queue will eventually be removed before the process is joined.  Otherwise you cannot be sure that processes which have put items on the queue will terminate.  Remember also that non-daemonic processes will be automatically be joined."
msgstr ""

msgid "An example which will deadlock is the following::"
msgstr ""

msgid "from multiprocessing import Process, Queue  def f(q):     q.put('X' * 1000000)  if __name__ == '__main__':     queue = Queue()     p = Process(target=f, args=(queue,))     p.start()     p.join()                    # this deadlocks     obj = queue.get()"
msgstr ""

msgid "A fix here would be to swap the last two lines round (or simply remove the ``p.join()`` line)."
msgstr ""

msgid "Explicitly pass resources to child processes"
msgstr ""

msgid "On Unix a child process can make use of a shared resource created in a parent process using a global resource.  However, it is better to pass the object as an argument to the constructor for the child process."
msgstr ""

msgid "Apart from making the code (potentially) compatible with Windows this also ensures that as long as the child process is still alive the object will not be garbage collected in the parent process.  This might be important if some resource is freed when the object is garbage collected in the parent process."
msgstr ""

msgid "So for instance ::"
msgstr ""

msgid "from multiprocessing import Process, Lock  def f():     ... do something using \"lock\" ...  if __name__ == '__main__':    lock = Lock()    for i in range(10):         Process(target=f).start()"
msgstr ""

msgid "should be rewritten as ::"
msgstr ""

msgid "from multiprocessing import Process, Lock  def f(l):     ... do something using \"l\" ...  if __name__ == '__main__':    lock = Lock()    for i in range(10):         Process(target=f, args=(lock,)).start()"
msgstr ""

msgid "Beware replacing sys.stdin with a \"file like object\""
msgstr ""

msgid ":mod:`multiprocessing` originally unconditionally called::"
msgstr ""

msgid "os.close(sys.stdin.fileno())"
msgstr ""

msgid "in the :meth:`multiprocessing.Process._bootstrap` method --- this resulted in issues with processes-in-processes. This has been changed to::"
msgstr ""

msgid "sys.stdin.close() sys.stdin = open(os.devnull)"
msgstr ""

msgid "Which solves the fundamental issue of processes colliding with each other resulting in a bad file descriptor error, but introduces a potential danger to applications which replace :func:`sys.stdin` with a \"file-like object\" with output buffering.  This danger is that if multiple processes call :func:`close()` on this file-like object, it could result in the same data being flushed to the object multiple times, resulting in corruption."
msgstr ""

msgid "If you write a file-like object and implement your own caching, you can make it fork-safe by storing the pid whenever you append to the cache, and discarding the cache when the pid changes. For example::"
msgstr ""

msgid "@property def cache(self):     pid = os.getpid()     if pid != self._pid:         self._pid = pid         self._cache = []     return self._cache"
msgstr ""

msgid "For more information, see :issue:`5155`, :issue:`5313` and :issue:`5331`"
msgstr ""

msgid "Windows"
msgstr ""

msgid "Since Windows lacks :func:`os.fork` it has a few extra restrictions:"
msgstr ""

msgid "More picklability"
msgstr ""

msgid "Ensure that all arguments to :meth:`Process.__init__` are picklable.  This means, in particular, that bound or unbound methods cannot be used directly as the ``target`` argument on Windows --- just define a function and use that instead."
msgstr ""

msgid "Also, if you subclass :class:`Process` then make sure that instances will be picklable when the :meth:`Process.start` method is called."
msgstr ""

msgid "Global variables"
msgstr ""

msgid "Bear in mind that if code run in a child process tries to access a global variable, then the value it sees (if any) may not be the same as the value in the parent process at the time that :meth:`Process.start` was called."
msgstr ""

msgid "However, global variables which are just module level constants cause no problems."
msgstr ""

msgid "Safe importing of main module"
msgstr ""

msgid "Make sure that the main module can be safely imported by a new Python interpreter without causing unintended side effects (such a starting a new process)."
msgstr ""

msgid "For example, under Windows running the following module would fail with a :exc:`RuntimeError`::"
msgstr ""

msgid "from multiprocessing import Process  def foo():     print('hello')  p = Process(target=foo) p.start()"
msgstr ""

msgid "Instead one should protect the \"entry point\" of the program by using ``if __name__ == '__main__':`` as follows::"
msgstr ""

msgid "from multiprocessing import Process, freeze_support  def foo():     print('hello')  if __name__ == '__main__':     freeze_support()     p = Process(target=foo)     p.start()"
msgstr ""

msgid "(The ``freeze_support()`` line can be omitted if the program will be run normally instead of frozen.)"
msgstr ""

msgid "This allows the newly spawned Python interpreter to safely import the module and then run the module's ``foo()`` function."
msgstr ""

msgid "Similar restrictions apply if a pool or manager is created in the main module."
msgstr ""

msgid "Demonstration of how to create and use customized managers and proxies:"
msgstr ""

msgid "# # This module shows how to use arbitrary callables with a subclass of # `BaseManager`. # # Copyright (c) 2006-2008, R Oudkerk # All rights reserved. #  from multiprocessing import freeze_support from multiprocessing.managers import BaseManager, BaseProxy import operator  ##  class Foo(object):     def f(self):         print('you called Foo.f()')     def g(self):         print('you called Foo.g()')     def _h(self):         print('you called Foo._h()')  # A simple generator function def baz():     for i in range(10):         yield i*i  # Proxy type for generator objects class GeneratorProxy(BaseProxy):     _exposed_ = ('next', '__next__')     def __iter__(self):         return self     def __next__(self):         return self._callmethod('next')     def __next__(self):         return self._callmethod('__next__')  # Function to return the operator module def get_operator_module():     return operator  ##  class MyManager(BaseManager):     pass  # register the Foo class; make `f()` and `g()` accessible via proxy MyManager.register('Foo1', Foo)  # register the Foo class; make `g()` and `_h()` accessible via proxy MyManager.register('Foo2', Foo, exposed=('g', '_h'))  # register the generator function baz; use `GeneratorProxy` to make proxies MyManager.register('baz', baz, proxytype=GeneratorProxy)  # register get_operator_module(); make public functions accessible via proxy MyManager.register('operator', get_operator_module)  ##  def test():     manager = MyManager()     manager.start()      print('-' * 20)      f1 = manager.Foo1()     f1.f()     f1.g()     assert not hasattr(f1, '_h')     assert sorted(f1._exposed_) == sorted(['f', 'g'])      print('-' * 20)      f2 = manager.Foo2()     f2.g()     f2._h()     assert not hasattr(f2, 'f')     assert sorted(f2._exposed_) == sorted(['g', '_h'])      print('-' * 20)      it = manager.baz()     for i in it:         print('<%d>' % i, end=' ')     print()      print('-' * 20)      op = manager.operator()     print('op.add(23, 45) =', op.add(23, 45))     print('op.pow(2, 94) =', op.pow(2, 94))     print('op.getslice(range(10), 2, 6) =', op.getslice(list(range(10)), 2, 6))     print('op.repeat(range(5), 3) =', op.repeat(list(range(5)), 3))     print('op._exposed_ =', op._exposed_)  ##  if __name__ == '__main__':     freeze_support()     test()"
msgstr ""

msgid "Using :class:`Pool`:"
msgstr ""

msgid "# # A test of `multiprocessing.Pool` class # # Copyright (c) 2006-2008, R Oudkerk # All rights reserved. #  import multiprocessing import time import random import sys  # # Functions used by test code #  def calculate(func, args):     result = func(*args)     return '%s says that %s%s = %s' % (         multiprocessing.current_process().name,         func.__name__, args, result         )  def calculatestar(args):     return calculate(*args)  def mul(a, b):     time.sleep(0.5*random.random())     return a * b  def plus(a, b):     time.sleep(0.5*random.random())     return a + b  def f(x):     return 1.0 / (x-5.0)  def pow3(x):     return x**3  def noop(x):     pass  # # Test code #  def test():     print('cpu_count() = %d\\n' % multiprocessing.cpu_count())      #     # Create pool     #      PROCESSES = 4     print('Creating pool with %d processes\\n' % PROCESSES)     pool = multiprocessing.Pool(PROCESSES)     print('pool = %s' % pool)     print()      #     # Tests     #      TASKS = [(mul, (i, 7)) for i in range(10)] + \\             [(plus, (i, 8)) for i in range(10)]      results = [pool.apply_async(calculate, t) for t in TASKS]     imap_it = pool.imap(calculatestar, TASKS)     imap_unordered_it = pool.imap_unordered(calculatestar, TASKS)      print('Ordered results using pool.apply_async():')     for r in results:         print('\\t', r.get())     print()      print('Ordered results using pool.imap():')     for x in imap_it:         print('\\t', x)     print()      print('Unordered results using pool.imap_unordered():')     for x in imap_unordered_it:         print('\\t', x)     print()      print('Ordered results using pool.map() --- will block till complete:')     for x in pool.map(calculatestar, TASKS):         print('\\t', x)     print()      #     # Simple benchmarks     #      N = 100000     print('def pow3(x): return x**3')      t = time.time()     A = list(map(pow3, range(N)))     print('\\tmap(pow3, range(%d)):\\n\\t\\t%s seconds' % \\           (N, time.time() - t))      t = time.time()     B = pool.map(pow3, range(N))     print('\\tpool.map(pow3, range(%d)):\\n\\t\\t%s seconds' % \\           (N, time.time() - t))      t = time.time()     C = list(pool.imap(pow3, range(N), chunksize=N//8))     print('\\tlist(pool.imap(pow3, range(%d), chunksize=%d)):\\n\\t\\t%s' \\           ' seconds' % (N, N//8, time.time() - t))      assert A == B == C, (len(A), len(B), len(C))     print()      L = [None] * 1000000     print('def noop(x): pass')     print('L = [None] * 1000000')      t = time.time()     A = list(map(noop, L))     print('\\tmap(noop, L):\\n\\t\\t%s seconds' % \\           (time.time() - t))      t = time.time()     B = pool.map(noop, L)     print('\\tpool.map(noop, L):\\n\\t\\t%s seconds' % \\           (time.time() - t))      t = time.time()     C = list(pool.imap(noop, L, chunksize=len(L)//8))     print('\\tlist(pool.imap(noop, L, chunksize=%d)):\\n\\t\\t%s seconds' % \\           (len(L)//8, time.time() - t))      assert A == B == C, (len(A), len(B), len(C))     print()      del A, B, C, L      #     # Test error handling     #      print('Testing error handling:')      try:         print(pool.apply(f, (5,)))     except ZeroDivisionError:         print('\\tGot ZeroDivisionError as expected from pool.apply()')     else:         raise AssertionError('expected ZeroDivisionError')      try:         print(pool.map(f, list(range(10))))     except ZeroDivisionError:         print('\\tGot ZeroDivisionError as expected from pool.map()')     else:         raise AssertionError('expected ZeroDivisionError')      try:         print(list(pool.imap(f, list(range(10)))))     except ZeroDivisionError:         print('\\tGot ZeroDivisionError as expected from list(pool.imap())')     else:         raise AssertionError('expected ZeroDivisionError')      it = pool.imap(f, list(range(10)))     for i in range(10):         try:             x = next(it)         except ZeroDivisionError:             if i == 5:                 pass         except StopIteration:             break         else:             if i == 5:                 raise AssertionError('expected ZeroDivisionError')      assert i == 9     print('\\tGot ZeroDivisionError as expected from IMapIterator.next()')     print()      #     # Testing timeouts     #      print('Testing ApplyResult.get() with timeout:', end=' ')     res = pool.apply_async(calculate, TASKS[0])     while 1:         sys.stdout.flush()         try:             sys.stdout.write('\\n\\t%s' % res.get(0.02))             break         except multiprocessing.TimeoutError:             sys.stdout.write('.')     print()     print()      print('Testing IMapIterator.next() with timeout:', end=' ')     it = pool.imap(calculatestar, TASKS)     while 1:         sys.stdout.flush()         try:             sys.stdout.write('\\n\\t%s' % it.next(0.02))         except StopIteration:             break         except multiprocessing.TimeoutError:             sys.stdout.write('.')     print()     print()      #     # Testing callback     #      print('Testing callback:')      A = []     B = [56, 0, 1, 8, 27, 64, 125, 216, 343, 512, 729]      r = pool.apply_async(mul, (7, 8), callback=A.append)     r.wait()      r = pool.map_async(pow3, list(range(10)), callback=A.extend)     r.wait()      if A == B:         print('\\tcallbacks succeeded\\n')     else:         print('\\t*** callbacks failed\\n\\t\\t%s != %s\\n' % (A, B))      #     # Check there are no outstanding tasks     #      assert not pool._cache, 'cache = %r' % pool._cache      #     # Check close() methods     #      print('Testing close():')      for worker in pool._pool:         assert worker.is_alive()      result = pool.apply_async(time.sleep, [0.5])     pool.close()     pool.join()      assert result.get() is None      for worker in pool._pool:         assert not worker.is_alive()      print('\\tclose() succeeded\\n')      #     # Check terminate() method     #      print('Testing terminate():')      pool = multiprocessing.Pool(2)     DELTA = 0.1     ignore = pool.apply(pow3, [2])     results = [pool.apply_async(time.sleep, [DELTA]) for i in range(100)]     pool.terminate()     pool.join()      for worker in pool._pool:         assert not worker.is_alive()      print('\\tterminate() succeeded\\n')      #     # Check garbage collection     #      print('Testing garbage collection:')      pool = multiprocessing.Pool(2)     DELTA = 0.1     processes = pool._pool     ignore = pool.apply(pow3, [2])     results = [pool.apply_async(time.sleep, [DELTA]) for i in range(100)]      results = pool = None      time.sleep(DELTA * 2)      for worker in processes:         assert not worker.is_alive()      print('\\tgarbage collection succeeded\\n')   if __name__ == '__main__':     multiprocessing.freeze_support()      assert len(sys.argv) in (1, 2)      if len(sys.argv) == 1 or sys.argv[1] == 'processes':         print(' Using processes '.center(79, '-'))     elif sys.argv[1] == 'threads':         print(' Using threads '.center(79, '-'))         import multiprocessing.dummy as multiprocessing     else:         print('Usage:\\n\\t%s [processes | threads]' % sys.argv[0])         raise SystemExit(2)      test()"
msgstr ""

msgid "Synchronization types like locks, conditions and queues:"
msgstr ""

msgid "# # A test file for the `multiprocessing` package # # Copyright (c) 2006-2008, R Oudkerk # All rights reserved. #  import time, sys, random from queue import Empty  import multiprocessing               # may get overwritten   #### TEST_VALUE  def value_func(running, mutex):     random.seed()     time.sleep(random.random()*4)      mutex.acquire()     print('\\n\\t\\t\\t' + str(multiprocessing.current_process()) + ' has finished')     running.value -= 1     mutex.release()  def test_value():     TASKS = 10     running = multiprocessing.Value('i', TASKS)     mutex = multiprocessing.Lock()      for i in range(TASKS):         p = multiprocessing.Process(target=value_func, args=(running, mutex))         p.start()      while running.value > 0:         time.sleep(0.08)         mutex.acquire()         print(running.value, end=' ')         sys.stdout.flush()         mutex.release()      print()     print('No more running processes')   #### TEST_QUEUE  def queue_func(queue):     for i in range(30):         time.sleep(0.5 * random.random())         queue.put(i*i)     queue.put('STOP')  def test_queue():     q = multiprocessing.Queue()      p = multiprocessing.Process(target=queue_func, args=(q,))     p.start()      o = None     while o != 'STOP':         try:             o = q.get(timeout=0.3)             print(o, end=' ')             sys.stdout.flush()         except Empty:             print('TIMEOUT')      print()   #### TEST_CONDITION  def condition_func(cond):     cond.acquire()     print('\\t' + str(cond))     time.sleep(2)     print('\\tchild is notifying')     print('\\t' + str(cond))     cond.notify()     cond.release()  def test_condition():     cond = multiprocessing.Condition()      p = multiprocessing.Process(target=condition_func, args=(cond,))     print(cond)      cond.acquire()     print(cond)     cond.acquire()     print(cond)      p.start()      print('main is waiting')     cond.wait()     print('main has woken up')      print(cond)     cond.release()     print(cond)     cond.release()      p.join()     print(cond)   #### TEST_SEMAPHORE  def semaphore_func(sema, mutex, running):     sema.acquire()      mutex.acquire()     running.value += 1     print(running.value, 'tasks are running')     mutex.release()      random.seed()     time.sleep(random.random()*2)      mutex.acquire()     running.value -= 1     print('%s has finished' % multiprocessing.current_process())     mutex.release()      sema.release()  def test_semaphore():     sema = multiprocessing.Semaphore(3)     mutex = multiprocessing.RLock()     running = multiprocessing.Value('i', 0)      processes = [         multiprocessing.Process(target=semaphore_func,                                 args=(sema, mutex, running))         for i in range(10)         ]      for p in processes:         p.start()      for p in processes:         p.join()   #### TEST_JOIN_TIMEOUT  def join_timeout_func():     print('\\tchild sleeping')     time.sleep(5.5)     print('\\n\\tchild terminating')  def test_join_timeout():     p = multiprocessing.Process(target=join_timeout_func)     p.start()      print('waiting for process to finish')      while 1:         p.join(timeout=1)         if not p.is_alive():             break         print('.', end=' ')         sys.stdout.flush()   #### TEST_EVENT  def event_func(event):     print('\\t%r is waiting' % multiprocessing.current_process())     event.wait()     print('\\t%r has woken up' % multiprocessing.current_process())  def test_event():     event = multiprocessing.Event()      processes = [multiprocessing.Process(target=event_func, args=(event,))                  for i in range(5)]      for p in processes:         p.start()      print('main is sleeping')     time.sleep(2)      print('main is setting event')     event.set()      for p in processes:         p.join()   #### TEST_SHAREDVALUES  def sharedvalues_func(values, arrays, shared_values, shared_arrays):     for i in range(len(values)):         v = values[i][1]         sv = shared_values[i].value         assert v == sv      for i in range(len(values)):         a = arrays[i][1]         sa = list(shared_arrays[i][:])         assert a == sa      print('Tests passed')  def test_sharedvalues():     values = [         ('i', 10),         ('h', -2),         ('d', 1.25)         ]     arrays = [         ('i', list(range(100))),         ('d', [0.25 * i for i in range(100)]),         ('H', list(range(1000)))         ]      shared_values = [multiprocessing.Value(id, v) for id, v in values]     shared_arrays = [multiprocessing.Array(id, a) for id, a in arrays]      p = multiprocessing.Process(         target=sharedvalues_func,         args=(values, arrays, shared_values, shared_arrays)         )     p.start()     p.join()      assert p.exitcode == 0   ####  def test(namespace=multiprocessing):     global multiprocessing      multiprocessing = namespace      for func in [ test_value, test_queue, test_condition,                   test_semaphore, test_join_timeout, test_event,                   test_sharedvalues ]:          print('\\n\\t######## %s\\n' % func.__name__)         func()      ignore = multiprocessing.active_children()      # cleanup any old processes     if hasattr(multiprocessing, '_debug_info'):         info = multiprocessing._debug_info()         if info:             print(info)             raise ValueError('there should be no positive refcounts left')   if __name__ == '__main__':     multiprocessing.freeze_support()      assert len(sys.argv) in (1, 2)      if len(sys.argv) == 1 or sys.argv[1] == 'processes':         print(' Using processes '.center(79, '-'))         namespace = multiprocessing     elif sys.argv[1] == 'manager':         print(' Using processes and a manager '.center(79, '-'))         namespace = multiprocessing.Manager()         namespace.Process = multiprocessing.Process         namespace.current_process = multiprocessing.current_process         namespace.active_children = multiprocessing.active_children     elif sys.argv[1] == 'threads':         print(' Using threads '.center(79, '-'))         import multiprocessing.dummy as namespace     else:         print('Usage:\\n\\t%s [processes | manager | threads]' % sys.argv[0])         raise SystemExit(2)      test(namespace)"
msgstr ""

msgid "An showing how to use queues to feed tasks to a collection of worker process and collect the results:"
msgstr ""

msgid "# # Simple example which uses a pool of workers to carry out some tasks. # # Notice that the results will probably not come out of the output # queue in the same in the same order as the corresponding tasks were # put on the input queue.  If it is important to get the results back # in the original order then consider using `Pool.map()` or # `Pool.imap()` (which will save on the amount of code needed anyway). # # Copyright (c) 2006-2008, R Oudkerk # All rights reserved. #  import time import random  from multiprocessing import Process, Queue, current_process, freeze_support  # # Function run by worker processes #  def worker(input, output):     for func, args in iter(input.get, 'STOP'):         result = calculate(func, args)         output.put(result)  # # Function used to calculate result #  def calculate(func, args):     result = func(*args)     return '%s says that %s%s = %s' % \\         (current_process().name, func.__name__, args, result)  # # Functions referenced by tasks #  def mul(a, b):     time.sleep(0.5*random.random())     return a * b  def plus(a, b):     time.sleep(0.5*random.random())     return a + b  # # #  def test():     NUMBER_OF_PROCESSES = 4     TASKS1 = [(mul, (i, 7)) for i in range(20)]     TASKS2 = [(plus, (i, 8)) for i in range(10)]      # Create queues     task_queue = Queue()     done_queue = Queue()      # Submit tasks     for task in TASKS1:         task_queue.put(task)      # Start worker processes     for i in range(NUMBER_OF_PROCESSES):         Process(target=worker, args=(task_queue, done_queue)).start()      # Get and print results     print('Unordered results:')     for i in range(len(TASKS1)):         print('\\t', done_queue.get())      # Add more tasks using `put()`     for task in TASKS2:         task_queue.put(task)      # Get and print some more results     for i in range(len(TASKS2)):         print('\\t', done_queue.get())      # Tell child processes to stop     for i in range(NUMBER_OF_PROCESSES):         task_queue.put('STOP')   if __name__ == '__main__':     freeze_support()     test()"
msgstr ""

msgid "An example of how a pool of worker processes can each run a :class:`SimpleHTTPServer.HttpServer` instance while sharing a single listening socket."
msgstr ""

msgid "# # Example where a pool of http servers share a single listening socket # # On Windows this module depends on the ability to pickle a socket # object so that the worker processes can inherit a copy of the server # object.  (We import `multiprocessing.reduction` to enable this pickling.) # # Not sure if we should synchronize access to `socket.accept()` method by # using a process-shared lock -- does not seem to be necessary. # # Copyright (c) 2006-2008, R Oudkerk # All rights reserved. #  import os import sys  from multiprocessing import Process, current_process, freeze_support from http.server import HTTPServer from http.server import SimpleHTTPRequestHandler  if sys.platform == 'win32':     import multiprocessing.reduction    # make sockets pickable/inheritable   def note(format, *args):     sys.stderr.write('[%s]\\t%s\\n' % (current_process().name, format%args))   class RequestHandler(SimpleHTTPRequestHandler):     # we override log_message() to show which process is handling the request     def log_message(self, format, *args):         note(format, *args)  def serve_forever(server):     note('starting server')     try:         server.serve_forever()     except KeyboardInterrupt:         pass   def runpool(address, number_of_processes):     # create a single server object -- children will each inherit a copy     server = HTTPServer(address, RequestHandler)      # create child processes to act as workers     for i in range(number_of_processes-1):         Process(target=serve_forever, args=(server,)).start()      # main process also acts as a worker     serve_forever(server)   def test():     DIR = os.path.join(os.path.dirname(__file__), '..')     ADDRESS = ('localhost', 8000)     NUMBER_OF_PROCESSES = 4      print('Serving at http://%s:%d using %d worker processes' % \\           (ADDRESS[0], ADDRESS[1], NUMBER_OF_PROCESSES))     print('To exit press Ctrl-' + ['C', 'Break'][sys.platform=='win32'])      os.chdir(DIR)     runpool(ADDRESS, NUMBER_OF_PROCESSES)   if __name__ == '__main__':     freeze_support()     test()"
msgstr ""

msgid "Some simple benchmarks comparing :mod:`multiprocessing` with :mod:`threading`:"
msgstr ""

msgid "# # Simple benchmarks for the multiprocessing package # # Copyright (c) 2006-2008, R Oudkerk # All rights reserved. #  import time, sys, multiprocessing, threading, queue, gc  if sys.platform == 'win32':     _timer = time.clock else:     _timer = time.time  delta = 1   #### TEST_QUEUESPEED  def queuespeed_func(q, c, iterations):     a = '0' * 256     c.acquire()     c.notify()     c.release()      for i in range(iterations):         q.put(a)      q.put('STOP')  def test_queuespeed(Process, q, c):     elapsed = 0     iterations = 1      while elapsed < delta:         iterations *= 2          p = Process(target=queuespeed_func, args=(q, c, iterations))         c.acquire()         p.start()         c.wait()         c.release()          result = None         t = _timer()          while result != 'STOP':             result = q.get()          elapsed = _timer() - t          p.join()      print(iterations, 'objects passed through the queue in', elapsed, 'seconds')     print('average number/sec:', iterations/elapsed)   #### TEST_PIPESPEED  def pipe_func(c, cond, iterations):     a = '0' * 256     cond.acquire()     cond.notify()     cond.release()      for i in range(iterations):         c.send(a)      c.send('STOP')  def test_pipespeed():     c, d = multiprocessing.Pipe()     cond = multiprocessing.Condition()     elapsed = 0     iterations = 1      while elapsed < delta:         iterations *= 2          p = multiprocessing.Process(target=pipe_func,                                     args=(d, cond, iterations))         cond.acquire()         p.start()         cond.wait()         cond.release()          result = None         t = _timer()          while result != 'STOP':             result = c.recv()          elapsed = _timer() - t         p.join()      print(iterations, 'objects passed through connection in',elapsed,'seconds')     print('average number/sec:', iterations/elapsed)   #### TEST_SEQSPEED  def test_seqspeed(seq):     elapsed = 0     iterations = 1      while elapsed < delta:         iterations *= 2          t = _timer()          for i in range(iterations):             a = seq[5]          elapsed = _timer()-t      print(iterations, 'iterations in', elapsed, 'seconds')     print('average number/sec:', iterations/elapsed)   #### TEST_LOCK  def test_lockspeed(l):     elapsed = 0     iterations = 1      while elapsed < delta:         iterations *= 2          t = _timer()          for i in range(iterations):             l.acquire()             l.release()          elapsed = _timer()-t      print(iterations, 'iterations in', elapsed, 'seconds')     print('average number/sec:', iterations/elapsed)   #### TEST_CONDITION  def conditionspeed_func(c, N):     c.acquire()     c.notify()      for i in range(N):         c.wait()         c.notify()      c.release()  def test_conditionspeed(Process, c):     elapsed = 0     iterations = 1      while elapsed < delta:         iterations *= 2          c.acquire()         p = Process(target=conditionspeed_func, args=(c, iterations))         p.start()          c.wait()          t = _timer()          for i in range(iterations):             c.notify()             c.wait()          elapsed = _timer()-t          c.release()         p.join()      print(iterations * 2, 'waits in', elapsed, 'seconds')     print('average number/sec:', iterations * 2 / elapsed)  ####  def test():     manager = multiprocessing.Manager()      gc.disable()      print('\\n\\t######## testing Queue.Queue\\n')     test_queuespeed(threading.Thread, queue.Queue(),                     threading.Condition())     print('\\n\\t######## testing multiprocessing.Queue\\n')     test_queuespeed(multiprocessing.Process, multiprocessing.Queue(),                     multiprocessing.Condition())     print('\\n\\t######## testing Queue managed by server process\\n')     test_queuespeed(multiprocessing.Process, manager.Queue(),                     manager.Condition())     print('\\n\\t######## testing multiprocessing.Pipe\\n')     test_pipespeed()      print()      print('\\n\\t######## testing list\\n')     test_seqspeed(list(range(10)))     print('\\n\\t######## testing list managed by server process\\n')     test_seqspeed(manager.list(list(range(10))))     print('\\n\\t######## testing Array(\"i\", ..., lock=False)\\n')     test_seqspeed(multiprocessing.Array('i', list(range(10)), lock=False))     print('\\n\\t######## testing Array(\"i\", ..., lock=True)\\n')     test_seqspeed(multiprocessing.Array('i', list(range(10)), lock=True))      print()      print('\\n\\t######## testing threading.Lock\\n')     test_lockspeed(threading.Lock())     print('\\n\\t######## testing threading.RLock\\n')     test_lockspeed(threading.RLock())     print('\\n\\t######## testing multiprocessing.Lock\\n')     test_lockspeed(multiprocessing.Lock())     print('\\n\\t######## testing multiprocessing.RLock\\n')     test_lockspeed(multiprocessing.RLock())     print('\\n\\t######## testing lock managed by server process\\n')     test_lockspeed(manager.Lock())     print('\\n\\t######## testing rlock managed by server process\\n')     test_lockspeed(manager.RLock())      print()      print('\\n\\t######## testing threading.Condition\\n')     test_conditionspeed(threading.Thread, threading.Condition())     print('\\n\\t######## testing multiprocessing.Condition\\n')     test_conditionspeed(multiprocessing.Process, multiprocessing.Condition())     print('\\n\\t######## testing condition managed by a server process\\n')     test_conditionspeed(multiprocessing.Process, manager.Condition())      gc.enable()  if __name__ == '__main__':     multiprocessing.freeze_support()     test()"
msgstr ""

msgid "Internet Data Handling"
msgstr ""

msgid "This chapter describes modules which support handling data formats commonly used on the Internet."
msgstr ""

msgid ":mod:`netrc` --- netrc file processing"
msgstr ""

msgid "The :class:`netrc` class parses and encapsulates the netrc file format used by the Unix :program:`ftp` program and other FTP clients."
msgstr ""

msgid "A :class:`netrc` instance or subclass instance encapsulates data from  a netrc file.  The initialization argument, if present, specifies the file to parse.  If no argument is given, the file :file:`.netrc` in the user's home directory will be read.  Parse errors will raise :exc:`NetrcParseError` with diagnostic information including the file name, line number, and terminating token."
msgstr ""

msgid "Exception raised by the :class:`netrc` class when syntactical errors are encountered in source text.  Instances of this exception provide three interesting attributes:  :attr:`msg` is a textual explanation of the error, :attr:`filename` is the name of the source file, and :attr:`lineno` gives the line number on which the error was found."
msgstr ""

msgid "netrc Objects"
msgstr ""

msgid "A :class:`netrc` instance has the following methods:"
msgstr ""

msgid "Return a 3-tuple ``(login, account, password)`` of authenticators for *host*. If the netrc file did not contain an entry for the given host, return the tuple associated with the 'default' entry.  If neither matching host nor default entry is available, return ``None``."
msgstr ""

msgid "Dump the class data as a string in the format of a netrc file. (This discards comments and may reorder the entries.)"
msgstr ""

msgid "Instances of :class:`netrc` have public instance variables:"
msgstr ""

msgid "Dictionary mapping host names to ``(login, account, password)`` tuples.  The 'default' entry, if any, is represented as a pseudo-host by that name."
msgstr ""

msgid "Dictionary mapping macro names to string lists."
msgstr ""

msgid "Passwords are limited to a subset of the ASCII character set.  All ASCII punctuation is allowed in passwords, however, note that whitespace and non-printable characters are not allowed in passwords.  This is a limitation of the way the .netrc file is parsed and may be removed in the future."
msgstr ""

msgid ":mod:`nis` --- Interface to Sun's NIS (Yellow Pages)"
msgstr ""

msgid "The :mod:`nis` module gives a thin wrapper around the NIS library, useful for central administration of several hosts."
msgstr ""

msgid "Because NIS exists only on Unix systems, this module is only available for Unix."
msgstr ""

msgid "The :mod:`nis` module defines the following functions:"
msgstr ""

msgid "Return the match for *key* in map *mapname*, or raise an error (:exc:`nis.error`) if there is none. Both should be strings, *key* is 8-bit clean. Return value is an arbitrary array of bytes (may contain ``NULL`` and other joys)."
msgstr ""

msgid "Note that *mapname* is first checked if it is an alias to another name."
msgstr ""

msgid "The *domain* argument allows to override the NIS domain used for the lookup. If unspecified, lookup is in the default NIS domain."
msgstr ""

msgid "Return a dictionary mapping *key* to *value* such that ``match(key, mapname)==value``. Note that both keys and values of the dictionary are arbitrary arrays of bytes."
msgstr ""

msgid "Return a list of all valid maps."
msgstr ""

msgid "Return the system default NIS domain."
msgstr ""

msgid "The :mod:`nis` module defines the following exception:"
msgstr ""

msgid "An error raised when a NIS function returns an error code."
msgstr ""

msgid ":mod:`nntplib` --- NNTP protocol client"
msgstr ""

msgid "This module defines the class :class:`NNTP` which implements the client side of the NNTP protocol.  It can be used to implement a news reader or poster, or automated news processors.  For more information on NNTP (Network News Transfer Protocol), see Internet :rfc:`977`."
msgstr ""

msgid "Here are two small examples of how it can be used.  To list some statistics about a newsgroup and print the subjects of the last 10 articles::"
msgstr ""

msgid ">>> s = NNTP('news.cwi.nl') >>> resp, count, first, last, name = s.group('comp.lang.python') >>> print('Group', name, 'has', count, 'articles, range', first, 'to', last) Group comp.lang.python has 59 articles, range 3742 to 3803 >>> resp, subs = s.xhdr('subject', first + '-' + last) >>> for id, sub in subs[-10:]: print(id, sub) ... 3792 Re: Removing elements from a list while iterating... 3793 Re: Who likes Info files? 3794 Emacs and doc strings 3795 a few questions about the Mac implementation 3796 Re: executable python scripts 3797 Re: executable python scripts 3798 Re: a few questions about the Mac implementation 3799 Re: PROPOSAL: A Generic Python Object Interface for Python C Modules 3802 Re: executable python scripts 3803 Re: \\POSIX{} wait and SIGCHLD >>> s.quit() '205 news.cwi.nl closing connection.  Goodbye.'"
msgstr ""

msgid "To post an article from a file (this assumes that the article has valid headers)::"
msgstr ""

msgid ">>> s = NNTP('news.cwi.nl') >>> f = open('/tmp/article') >>> s.post(f) '240 Article posted successfully.' >>> s.quit() '205 news.cwi.nl closing connection.  Goodbye.'"
msgstr ""

msgid "The module itself defines the following items:"
msgstr ""

msgid "Return a new instance of the :class:`NNTP` class, representing a connection to the NNTP server running on host *host*, listening at port *port*.  The default *port* is 119.  If the optional *user* and *password* are provided, or if suitable credentials are present in :file:`/.netrc` and the optional flag *usenetrc* is true (the default), the ``AUTHINFO USER`` and ``AUTHINFO PASS`` commands are used to identify and authenticate the user to the server. If the optional flag *readermode* is true, then a ``mode reader`` command is sent before authentication is performed.  Reader mode is sometimes necessary if you are connecting to an NNTP server on the local machine and intend to call reader-specific commands, such as ``group``.  If you get unexpected :exc:`NNTPPermanentError`\\ s, you might need to set *readermode*. *readermode* defaults to ``None``. *usenetrc* defaults to ``True``."
msgstr ""

msgid "Derived from the standard exception :exc:`Exception`, this is the base class for all exceptions raised by the :mod:`nntplib` module."
msgstr ""

msgid "Exception raised when an unexpected reply is received from the server.  For backwards compatibility, the exception ``error_reply`` is equivalent to this class."
msgstr ""

msgid "Exception raised when an error code in the range 400--499 is received.  For backwards compatibility, the exception ``error_temp`` is equivalent to this class."
msgstr ""

msgid "Exception raised when an error code in the range 500--599 is received.  For backwards compatibility, the exception ``error_perm`` is equivalent to this class."
msgstr ""

msgid "Exception raised when a reply is received from the server that does not begin with a digit in the range 1--5.  For backwards compatibility, the exception ``error_proto`` is equivalent to this class."
msgstr ""

msgid "Exception raised when there is some error in the response data.  For backwards compatibility, the exception ``error_data`` is equivalent to this class."
msgstr ""

msgid "NNTP Objects"
msgstr ""

msgid "NNTP instances have the following methods.  The *response* that is returned as the first item in the return tuple of almost all methods is the server's response: a string beginning with a three-digit code. If the server's response indicates an error, the method raises one of the above exceptions."
msgstr ""

msgid "Set the instance's debugging level.  This controls the amount of debugging output printed.  The default, ``0``, produces no debugging output.  A value of ``1`` produces a moderate amount of debugging output, generally a single line per request or response.  A value of ``2`` or higher produces the maximum amount of debugging output, logging each line sent and received on the connection (including message text)."
msgstr ""

msgid "Send a ``NEWGROUPS`` command.  The *date* argument should be a string of the form ``'yymmdd'`` indicating the date, and *time* should be a string of the form ``'hhmmss'`` indicating the time.  Return a pair ``(response, groups)`` where *groups* is a list of group names that are new since the given date and time. If the *file* parameter is supplied, then the output of the  ``NEWGROUPS`` command is stored in a file.  If *file* is a string,  then the method will open a file object with that name, write to it  then close it.  If *file* is a file object, then it will start calling :meth:`write` on it to store the lines of the command output. If *file* is supplied, then the returned *list* is an empty list."
msgstr ""

msgid "Send a ``NEWNEWS`` command.  Here, *group* is a group name or ``'*'``, and *date* and *time* have the same meaning as for :meth:`newgroups`.  Return a pair ``(response, articles)`` where *articles* is a list of message ids. If the *file* parameter is supplied, then the output of the  ``NEWNEWS`` command is stored in a file.  If *file* is a string,  then the method will open a file object with that name, write to it  then close it.  If *file* is a file object, then it will start calling :meth:`write` on it to store the lines of the command output. If *file* is supplied, then the returned *list* is an empty list."
msgstr ""

msgid "Send a ``LIST`` command.  Return a pair ``(response, list)`` where *list* is a list of tuples.  Each tuple has the form ``(group, last, first, flag)``, where *group* is a group name, *last* and *first* are the last and first article numbers (as strings), and *flag* is ``'y'`` if posting is allowed, ``'n'`` if not, and ``'m'`` if the newsgroup is moderated.  (Note the ordering: *last*, *first*.) If the *file* parameter is supplied, then the output of the  ``LIST`` command is stored in a file.  If *file* is a string,  then the method will open a file object with that name, write to it  then close it.  If *file* is a file object, then it will start calling :meth:`write` on it to store the lines of the command output. If *file* is supplied, then the returned *list* is an empty list."
msgstr ""

msgid "Send a ``LIST NEWSGROUPS`` command, where *grouppattern* is a wildmat string as specified in RFC2980 (it's essentially the same as DOS or UNIX shell wildcard strings).  Return a pair ``(response, list)``, where *list* is a list of tuples containing ``(name, title)``."
msgstr ""

msgid "Get a description for a single group *group*.  If more than one group matches (if 'group' is a real wildmat string), return the first match.   If no group matches, return an empty string."
msgstr ""

msgid "This elides the response code from the server.  If the response code is needed, use :meth:`descriptions`."
msgstr ""

msgid "Send a ``GROUP`` command, where *name* is the group name. Return a tuple ``(response, count, first, last, name)`` where *count* is the (estimated) number of articles in the group, *first* is the first article number in the group, *last* is the last article number in the group, and *name* is the group name. The numbers are returned as strings."
msgstr ""

msgid "Send a ``HELP`` command.  Return a pair ``(response, list)`` where *list* is a list of help strings. If the *file* parameter is supplied, then the output of the  ``HELP`` command is stored in a file.  If *file* is a string,  then the method will open a file object with that name, write to it  then close it.  If *file* is a file object, then it will start calling :meth:`write` on it to store the lines of the command output. If *file* is supplied, then the returned *list* is an empty list."
msgstr ""

msgid "Send a ``STAT`` command, where *id* is the message id (enclosed in ``'<'`` and ``'>'``) or an article number (as a string). Return a triple ``(response, number, id)`` where *number* is the article number (as a string) and *id* is the message id  (enclosed in ``'<'`` and ``'>'``)."
msgstr ""

msgid "Send a ``NEXT`` command.  Return as for :meth:`stat`."
msgstr ""

msgid "Send a ``LAST`` command.  Return as for :meth:`stat`."
msgstr ""

msgid "Send a ``HEAD`` command, where *id* has the same meaning as for :meth:`stat`. Return a tuple ``(response, number, id, list)`` where the first three are the same as for :meth:`stat`, and *list* is a list of the article's headers (an uninterpreted list of lines, without trailing newlines)."
msgstr ""

msgid "Send a ``BODY`` command, where *id* has the same meaning as for :meth:`stat`. If the *file* parameter is supplied, then the body is stored in a file.  If *file* is a string, then the method will open a file object with that name, write to it then close it. If *file* is a file object, then it will start calling :meth:`write` on it to store the lines of the body. Return as for :meth:`head`.  If *file* is supplied, then the returned *list* is an empty list."
msgstr ""

msgid "Send an ``ARTICLE`` command, where *id* has the same meaning as for :meth:`stat`.  Return as for :meth:`head`."
msgstr ""

msgid "Send a ``SLAVE`` command.  Return the server's *response*."
msgstr ""

msgid "Send an ``XHDR`` command.  This command is not defined in the RFC but is a common extension.  The *header* argument is a header keyword, e.g. ``'subject'``.  The *string* argument should have the form ``'first-last'`` where *first* and *last* are the first and last article numbers to search. Return a pair ``(response, list)``, where *list* is a list of pairs ``(id, text)``, where *id* is an article number (as a string) and *text* is the text of the requested header for that article. If the *file* parameter is supplied, then the output of the  ``XHDR`` command is stored in a file.  If *file* is a string, then the method will open a file object with that name, write to it  then close it.  If *file* is a file object, then it will start calling :meth:`write` on it to store the lines of the command output. If *file* is supplied, then the returned *list* is an empty list."
msgstr ""

msgid "Post an article using the ``POST`` command.  The *file* argument is an open file object which is read until EOF using its :meth:`readline` method.  It should be a well-formed news article, including the required headers.  The :meth:`post` method automatically escapes lines beginning with ``.``."
msgstr ""

msgid "Send an ``IHAVE`` command. *id* is a message id (enclosed in  ``'<'`` and ``'>'``). If the response is not an error, treat *file* exactly as for the :meth:`post` method."
msgstr ""

msgid "Return a triple ``(response, date, time)``, containing the current date and time in a form suitable for the :meth:`newnews` and :meth:`newgroups` methods. This is an optional NNTP extension, and may not be supported by all servers."
msgstr ""

msgid "Process an ``XGTITLE`` command, returning a pair ``(response, list)``, where *list* is a list of tuples containing ``(name, title)``. If the *file* parameter is supplied, then the output of the  ``XGTITLE`` command is stored in a file. If *file* is a string,  then the method will open a file object with that name, write to it  then close it.  If *file* is a file object, then it will start calling :meth:`write` on it to store the lines of the command output. If *file* is supplied, then the returned *list* is an empty list. This is an optional NNTP extension, and may not be supported by all servers."
msgstr ""

msgid "RFC2980 says \"It is suggested that this extension be deprecated\".  Use :meth:`descriptions` or :meth:`description` instead."
msgstr ""

msgid "Return a pair ``(resp, list)``.  *list* is a list of tuples, one for each article in the range delimited by the *start* and *end* article numbers.  Each tuple is of the form ``(article number, subject, poster, date, id, references, size, lines)``. If the *file* parameter is supplied, then the output of the ``XOVER`` command is stored in a file.  If *file* is a string,  then the method will open a file object with that name, write to it  then close it.  If *file* is a file object, then it will start calling :meth:`write` on it to store the lines of the command output. If *file* is supplied, then the returned *list* is an empty list. This is an optional NNTP extension, and may not be supported by all servers."
msgstr ""

msgid "Return a pair ``(resp, path)``, where *path* is the directory path to the article with message ID *id*.  This is an optional NNTP extension, and may not be supported by all servers."
msgstr ""

msgid "Send a ``QUIT`` command and close the connection.  Once this method has been called, no other methods of the NNTP object should be called."
msgstr ""

msgid ":mod:`numbers` --- Numeric abstract base classes"
msgstr ""

msgid "The :mod:`numbers` module (:pep:`3141`) defines a hierarchy of numeric abstract base classes which progressively define more operations.  None of the types defined in this module can be instantiated."
msgstr ""

msgid "The root of the numeric hierarchy. If you just want to check if an argument *x* is a number, without caring what kind, use ``isinstance(x, Number)``."
msgstr ""

msgid "The numeric tower"
msgstr ""

msgid "Subclasses of this type describe complex numbers and include the operations that work on the built-in :class:`complex` type. These are: conversions to :class:`complex` and :class:`bool`, :attr:`.real`, :attr:`.imag`, ``+``, ``-``, ``*``, ``/``, :func:`abs`, :meth:`conjugate`, ``==``, and ``!=``. All except ``-`` and ``!=`` are abstract."
msgstr ""

msgid "Abstract. Retrieves the real component of this number."
msgstr ""

msgid "Abstract. Retrieves the imaginary component of this number."
msgstr ""

msgid "Abstract. Returns the complex conjugate. For example, ``(1+3j).conjugate() == (1-3j)``."
msgstr ""

msgid "To :class:`Complex`, :class:`Real` adds the operations that work on real numbers."
msgstr ""

msgid "In short, those are: a conversion to :class:`float`, :func:`trunc`, :func:`round`, :func:`math.floor`, :func:`math.ceil`, :func:`divmod`, ``//``, ``%``, ``<``, ``<=``, ``>``, and ``>=``."
msgstr ""

msgid "Real also provides defaults for :func:`complex`, :attr:`~Complex.real`, :attr:`~Complex.imag`, and :meth:`~Complex.conjugate`."
msgstr ""

msgid "Subtypes :class:`Real` and adds :attr:`~Rational.numerator` and :attr:`~Rational.denominator` properties, which should be in lowest terms. With these, it provides a default for :func:`float`."
msgstr ""

msgid "Abstract."
msgstr ""

msgid "Subtypes :class:`Rational` and adds a conversion to :class:`int`. Provides defaults for :func:`float`, :attr:`~Rational.numerator`, and :attr:`~Rational.denominator`, and bit-string operations: ``<<``, ``>>``, ``&``, ``^``, ``|``, ``~``."
msgstr ""

msgid "Notes for type implementors"
msgstr ""

msgid "Implementors should be careful to make equal numbers equal and hash them to the same values. This may be subtle if there are two different extensions of the real numbers. For example, :class:`fractions.Fraction` implements :func:`hash` as follows::"
msgstr ""

msgid "def __hash__(self):     if self.denominator == 1:         # Get integers right.         return hash(self.numerator)     # Expensive check, but definitely correct.     if self == float(self):         return hash(float(self))     else:         # Use tuple's hash to avoid a high collision rate on         # simple fractions.         return hash((self.numerator, self.denominator))"
msgstr ""

msgid "Adding More Numeric ABCs"
msgstr ""

msgid "There are, of course, more possible ABCs for numbers, and this would be a poor hierarchy if it precluded the possibility of adding those. You can add ``MyFoo`` between :class:`Complex` and :class:`Real` with::"
msgstr ""

msgid "class MyFoo(Complex): ... MyFoo.register(Real)"
msgstr ""

msgid "Implementing the arithmetic operations"
msgstr ""

msgid "We want to implement the arithmetic operations so that mixed-mode operations either call an implementation whose author knew about the types of both arguments, or convert both to the nearest built in type and do the operation there. For subtypes of :class:`Integral`, this means that :meth:`__add__` and :meth:`__radd__` should be defined as::"
msgstr ""

msgid "class MyIntegral(Integral):      def __add__(self, other):         if isinstance(other, MyIntegral):             return do_my_adding_stuff(self, other)         elif isinstance(other, OtherTypeIKnowAbout):             return do_my_other_adding_stuff(self, other)         else:             return NotImplemented      def __radd__(self, other):         if isinstance(other, MyIntegral):             return do_my_adding_stuff(other, self)         elif isinstance(other, OtherTypeIKnowAbout):             return do_my_other_adding_stuff(other, self)         elif isinstance(other, Integral):             return int(other) + int(self)         elif isinstance(other, Real):             return float(other) + float(self)         elif isinstance(other, Complex):             return complex(other) + complex(self)         else:             return NotImplemented"
msgstr ""

msgid "There are 5 different cases for a mixed-type operation on subclasses of :class:`Complex`. I'll refer to all of the above code that doesn't refer to ``MyIntegral`` and ``OtherTypeIKnowAbout`` as \"boilerplate\". ``a`` will be an instance of ``A``, which is a subtype of :class:`Complex` (``a : A <: Complex``), and ``b : B <: Complex``. I'll consider ``a + b``:"
msgstr ""

msgid "If ``A`` defines an :meth:`__add__` which accepts ``b``, all is well."
msgstr ""

msgid "If ``A`` falls back to the boilerplate code, and it were to return a value from :meth:`__add__`, we'd miss the possibility that ``B`` defines a more intelligent :meth:`__radd__`, so the boilerplate should return :const:`NotImplemented` from :meth:`__add__`. (Or ``A`` may not implement :meth:`__add__` at all.)"
msgstr ""

msgid "Then ``B``'s :meth:`__radd__` gets a chance. If it accepts ``a``, all is well."
msgstr ""

msgid "If it falls back to the boilerplate, there are no more possible methods to try, so this is where the default implementation should live."
msgstr ""

msgid "If ``B <: A``, Python tries ``B.__radd__`` before ``A.__add__``. This is ok, because it was implemented with knowledge of ``A``, so it can handle those instances before delegating to :class:`Complex`."
msgstr ""

msgid "If ``A <: Complex`` and ``B <: Real`` without sharing any other knowledge, then the appropriate shared operation is the one involving the built in :class:`complex`, and both :meth:`__radd__` s land there, so ``a+b == b+a``."
msgstr ""

msgid "Because most of the operations on any given type will be very similar, it can be useful to define a helper function which generates the forward and reverse instances of any given operator. For example, :class:`fractions.Fraction` uses::"
msgstr ""

msgid "def _operator_fallbacks(monomorphic_operator, fallback_operator):     def forward(a, b):         if isinstance(b, (int, Fraction)):             return monomorphic_operator(a, b)         elif isinstance(b, float):             return fallback_operator(float(a), b)         elif isinstance(b, complex):             return fallback_operator(complex(a), b)         else:             return NotImplemented     forward.__name__ = '__' + fallback_operator.__name__ + '__'     forward.__doc__ = monomorphic_operator.__doc__      def reverse(b, a):         if isinstance(a, Rational):             # Includes ints.             return monomorphic_operator(a, b)         elif isinstance(a, numbers.Real):             return fallback_operator(float(a), float(b))         elif isinstance(a, numbers.Complex):             return fallback_operator(complex(a), complex(b))         else:             return NotImplemented     reverse.__name__ = '__r' + fallback_operator.__name__ + '__'     reverse.__doc__ = monomorphic_operator.__doc__      return forward, reverse  def _add(a, b):     \"\"\"a + b\"\"\"     return Fraction(a.numerator * b.denominator +                     b.numerator * a.denominator,                     a.denominator * b.denominator)  __add__, __radd__ = _operator_fallbacks(_add, operator.add)  # ..."
msgstr ""

msgid "Numeric and Mathematical Modules"
msgstr ""

msgid "The modules described in this chapter provide numeric and math-related functions and data types. The :mod:`numbers` module defines an abstract hierarchy of numeric types. The :mod:`math` and :mod:`cmath` modules contain various mathematical functions for floating-point and complex numbers. For users more interested in decimal accuracy than in speed, the :mod:`decimal` module supports exact representations of decimal numbers."
msgstr ""

msgid ":mod:`operator` --- Standard operators as functions"
msgstr ""

msgid "The :mod:`operator` module exports a set of functions implemented in C corresponding to the intrinsic operators of Python.  For example, ``operator.add(x, y)`` is equivalent to the expression ``x+y``.  The function names are those used for special class methods; variants without leading and trailing ``__`` are also provided for convenience."
msgstr ""

msgid "The functions fall into categories that perform object comparisons, logical operations, mathematical operations, sequence operations, and abstract type tests."
msgstr ""

msgid "The object comparison functions are useful for all objects, and are named after the rich comparison operators they support:"
msgstr ""

msgid "Perform \"rich comparisons\" between *a* and *b*. Specifically, ``lt(a, b)`` is equivalent to ``a < b``, ``le(a, b)`` is equivalent to ``a <= b``, ``eq(a, b)`` is equivalent to ``a == b``, ``ne(a, b)`` is equivalent to ``a != b``, ``gt(a, b)`` is equivalent to ``a > b`` and ``ge(a, b)`` is equivalent to ``a >= b``.  Note that these functions can return any value, which may or may not be interpretable as a Boolean value.  See :ref:`comparisons` for more information about rich comparisons."
msgstr ""

msgid "The logical operations are also generally applicable to all objects, and support truth tests, identity tests, and boolean operations:"
msgstr ""

msgid "Return the outcome of :keyword:`not` *obj*.  (Note that there is no :meth:`__not__` method for object instances; only the interpreter core defines this operation.  The result is affected by the :meth:`__bool__` and :meth:`__len__` methods.)"
msgstr ""

msgid "Return :const:`True` if *obj* is true, and :const:`False` otherwise.  This is equivalent to using the :class:`bool` constructor."
msgstr ""

msgid "Return ``a is b``.  Tests object identity."
msgstr ""

msgid "Return ``a is not b``.  Tests object identity."
msgstr ""

msgid "The mathematical and bitwise operations are the most numerous:"
msgstr ""

msgid "Return the absolute value of *obj*."
msgstr ""

msgid "Return ``a + b``, for *a* and *b* numbers."
msgstr ""

msgid "Return the bitwise and of *a* and *b*."
msgstr ""

msgid "Return ``a // b``."
msgstr ""

msgid "Return *a* converted to an integer.  Equivalent to ``a.__index__()``."
msgstr ""

msgid "Return the bitwise inverse of the number *obj*.  This is equivalent to ``~obj``."
msgstr ""

msgid "Return *a* shifted left by *b*."
msgstr ""

msgid "Return ``a % b``."
msgstr ""

msgid "Return ``a * b``, for *a* and *b* numbers."
msgstr ""

msgid "Return *obj* negated (``-obj``)."
msgstr ""

msgid "Return the bitwise or of *a* and *b*."
msgstr ""

msgid "Return *obj* positive (``+obj``)."
msgstr ""

msgid "Return ``a ** b``, for *a* and *b* numbers."
msgstr ""

msgid "Return *a* shifted right by *b*."
msgstr ""

msgid "Return ``a - b``."
msgstr ""

msgid "Return ``a / b`` where 2/3 is .66 rather than 0.  This is also known as \"true\" division."
msgstr ""

msgid "Return the bitwise exclusive or of *a* and *b*."
msgstr ""

msgid "Operations which work with sequences (some of them with mappings too) include:"
msgstr ""

msgid "Return ``a + b`` for *a* and *b* sequences."
msgstr ""

msgid "Return the outcome of the test ``b in a``. Note the reversed operands."
msgstr ""

msgid "Return the number of occurrences of *b* in *a*."
msgstr ""

msgid "Remove the value of *a* at index *b*."
msgstr ""

msgid "Return the value of *a* at index *b*."
msgstr ""

msgid "Return the index of the first of occurrence of *b* in *a*."
msgstr ""

msgid "Set the value of *a* at index *b* to *c*."
msgstr ""

msgid "Many operations have an \"in-place\" version.  The following functions provide a more primitive access to in-place operators than the usual syntax does; for example, the :term:`statement` ``x += y`` is equivalent to ``x = operator.iadd(x, y)``.  Another way to put it is to say that ``z = operator.iadd(x, y)`` is equivalent to the compound statement ``z = x; z += y``."
msgstr ""

msgid "``a = iadd(a, b)`` is equivalent to ``a += b``."
msgstr ""

msgid "``a = iand(a, b)`` is equivalent to ``a &= b``."
msgstr ""

msgid "``a = iconcat(a, b)`` is equivalent to ``a += b`` for *a* and *b* sequences."
msgstr ""

msgid "``a = ifloordiv(a, b)`` is equivalent to ``a //= b``."
msgstr ""

msgid "``a = ilshift(a, b)`` is equivalent to ``a <<= b``."
msgstr ""

msgid "``a = imod(a, b)`` is equivalent to ``a %= b``."
msgstr ""

msgid "``a = imul(a, b)`` is equivalent to ``a *= b``."
msgstr ""

msgid "``a = ior(a, b)`` is equivalent to ``a |= b``."
msgstr ""

msgid "``a = ipow(a, b)`` is equivalent to ``a **= b``."
msgstr ""

msgid "``a = irshift(a, b)`` is equivalent to ``a >>= b``."
msgstr ""

msgid "``a = isub(a, b)`` is equivalent to ``a -= b``."
msgstr ""

msgid "``a = itruediv(a, b)`` is equivalent to ``a /= b``."
msgstr ""

msgid "``a = ixor(a, b)`` is equivalent to ``a ^= b``."
msgstr ""

msgid "Example: Build a dictionary that maps the ordinals from ``0`` to ``255`` to their character equivalents."
msgstr ""

msgid ">>> d = {} >>> keys = range(256) >>> vals = map(chr, keys) >>> map(operator.setitem, [d]*len(keys), keys, vals)   # doctest: +SKIP"
msgstr ""

msgid "The :mod:`operator` module also defines tools for generalized attribute and item lookups.  These are useful for making fast field extractors as arguments for :func:`map`, :func:`sorted`, :meth:`itertools.groupby`, or other functions that expect a function argument."
msgstr ""

msgid "Return a callable object that fetches *attr* from its operand. If more than one attribute is requested, returns a tuple of attributes. After, ``f = attrgetter('name')``, the call ``f(b)`` returns ``b.name``.  After, ``f = attrgetter('name', 'date')``, the call ``f(b)`` returns ``(b.name, b.date)``."
msgstr ""

msgid "The attribute names can also contain dots; after ``f = attrgetter('date.month')``, the call ``f(b)`` returns ``b.date.month``."
msgstr ""

msgid "Return a callable object that fetches *item* from its operand using the operand's :meth:`__getitem__` method.  If multiple items are specified, returns a tuple of lookup values.  Equivalent to::"
msgstr ""

msgid "def itemgetter(*items):     if len(items) == 1:         item = items[0]         def g(obj):             return obj[item]     else:         def g(obj):             return tuple(obj[item] for item in items)     return g"
msgstr ""

msgid "The items can be any type accepted by the operand's :meth:`__getitem__` method.  Dictionaries accept any hashable value.  Lists, tuples, and strings accept an index or a slice:"
msgstr ""

msgid ">>> itemgetter(1)('ABCDEFG') 'B' >>> itemgetter(1,3,5)('ABCDEFG') ('B', 'D', 'F') >>> itemgetter(slice(2,None))('ABCDEFG') 'CDEFG'"
msgstr ""

msgid "Example of using :func:`itemgetter` to retrieve specific fields from a tuple record:"
msgstr ""

msgid ">>> inventory = [('apple', 3), ('banana', 2), ('pear', 5), ('orange', 1)] >>> getcount = itemgetter(1) >>> map(getcount, inventory) [3, 2, 5, 1] >>> sorted(inventory, key=getcount) [('orange', 1), ('banana', 2), ('apple', 3), ('pear', 5)]"
msgstr ""

msgid "Return a callable object that calls the method *name* on its operand.  If additional arguments and/or keyword arguments are given, they will be given to the method as well.  After ``f = methodcaller('name')``, the call ``f(b)`` returns ``b.name()``.  After ``f = methodcaller('name', 'foo', bar=1)``, the call ``f(b)`` returns ``b.name('foo', bar=1)``."
msgstr ""

msgid "Mapping Operators to Functions"
msgstr ""

msgid "This table shows how abstract operations correspond to operator symbols in the Python syntax and the functions in the :mod:`operator` module."
msgstr ""

msgid "Syntax"
msgstr ""

msgid "Function"
msgstr ""

msgid "Addition"
msgstr ""

msgid "``a + b``"
msgstr ""

msgid "``add(a, b)``"
msgstr ""

msgid "Concatenation"
msgstr ""

msgid "``seq1 + seq2``"
msgstr ""

msgid "``concat(seq1, seq2)``"
msgstr ""

msgid "Containment Test"
msgstr ""

msgid "``obj in seq``"
msgstr ""

msgid "``contains(seq, obj)``"
msgstr ""

msgid "Division"
msgstr ""

msgid "``a / b``"
msgstr ""

msgid "``div(a, b)``"
msgstr ""

msgid "``a // b``"
msgstr ""

msgid "``floordiv(a, b)``"
msgstr ""

msgid "Bitwise And"
msgstr ""

msgid "``a & b``"
msgstr ""

msgid "``and_(a, b)``"
msgstr ""

msgid "Bitwise Exclusive Or"
msgstr ""

msgid "``a ^ b``"
msgstr ""

msgid "``xor(a, b)``"
msgstr ""

msgid "Bitwise Inversion"
msgstr ""

msgid "``~ a``"
msgstr ""

msgid "``invert(a)``"
msgstr ""

msgid "Bitwise Or"
msgstr ""

msgid "``a | b``"
msgstr ""

msgid "``or_(a, b)``"
msgstr ""

msgid "Exponentiation"
msgstr ""

msgid "``a ** b``"
msgstr ""

msgid "``pow(a, b)``"
msgstr ""

msgid "Identity"
msgstr ""

msgid "``a is b``"
msgstr ""

msgid "``is_(a, b)``"
msgstr ""

msgid "``a is not b``"
msgstr ""

msgid "``is_not(a, b)``"
msgstr ""

msgid "Indexed Assignment"
msgstr ""

msgid "``obj[k] = v``"
msgstr ""

msgid "``setitem(obj, k, v)``"
msgstr ""

msgid "Indexed Deletion"
msgstr ""

msgid "``del obj[k]``"
msgstr ""

msgid "``delitem(obj, k)``"
msgstr ""

msgid "Indexing"
msgstr ""

msgid "``obj[k]``"
msgstr ""

msgid "``getitem(obj, k)``"
msgstr ""

msgid "Left Shift"
msgstr ""

msgid "``a << b``"
msgstr ""

msgid "``lshift(a, b)``"
msgstr ""

msgid "Modulo"
msgstr ""

msgid "``a % b``"
msgstr ""

msgid "``mod(a, b)``"
msgstr ""

msgid "Multiplication"
msgstr ""

msgid "``a * b``"
msgstr ""

msgid "``mul(a, b)``"
msgstr ""

msgid "Negation (Arithmetic)"
msgstr ""

msgid "``- a``"
msgstr ""

msgid "``neg(a)``"
msgstr ""

msgid "Negation (Logical)"
msgstr ""

msgid "``not a``"
msgstr ""

msgid "``not_(a)``"
msgstr ""

msgid "Positive"
msgstr ""

msgid "``+ a``"
msgstr ""

msgid "``pos(a)``"
msgstr ""

msgid "Right Shift"
msgstr ""

msgid "``a >> b``"
msgstr ""

msgid "``rshift(a, b)``"
msgstr ""

msgid "Sequence Repetition"
msgstr ""

msgid "``seq * i``"
msgstr ""

msgid "``repeat(seq, i)``"
msgstr ""

msgid "Slice Assignment"
msgstr ""

msgid "``seq[i:j] = values``"
msgstr ""

msgid "``setitem(seq, slice(i, j), values)``"
msgstr ""

msgid "Slice Deletion"
msgstr ""

msgid "``del seq[i:j]``"
msgstr ""

msgid "``delitem(seq, slice(i, j))``"
msgstr ""

msgid "Slicing"
msgstr ""

msgid "``seq[i:j]``"
msgstr ""

msgid "``getitem(seq, slice(i, j))``"
msgstr ""

msgid "String Formatting"
msgstr ""

msgid "``s % obj``"
msgstr ""

msgid "``mod(s, obj)``"
msgstr ""

msgid "Subtraction"
msgstr ""

msgid "``a - b``"
msgstr ""

msgid "``sub(a, b)``"
msgstr ""

msgid "Truth Test"
msgstr ""

msgid "``obj``"
msgstr ""

msgid "``truth(obj)``"
msgstr ""

msgid "Ordering"
msgstr ""

msgid "``a < b``"
msgstr ""

msgid "``lt(a, b)``"
msgstr ""

msgid "``a <= b``"
msgstr ""

msgid "``le(a, b)``"
msgstr ""

msgid "Equality"
msgstr ""

msgid "``a == b``"
msgstr ""

msgid "``eq(a, b)``"
msgstr ""

msgid "Difference"
msgstr ""

msgid "``a != b``"
msgstr ""

msgid "``ne(a, b)``"
msgstr ""

msgid "``a >= b``"
msgstr ""

msgid "``ge(a, b)``"
msgstr ""

msgid "``a > b``"
msgstr ""

msgid "``gt(a, b)``"
msgstr ""

msgid ":mod:`optparse` --- Parser for command line options"
msgstr ""

msgid ":mod:`optparse` is a more convenient, flexible, and powerful library for parsing command-line options than the old :mod:`getopt` module.  :mod:`optparse` uses a more declarative style of command-line parsing: you create an instance of :class:`OptionParser`, populate it with options, and parse the command line. :mod:`optparse` allows users to specify options in the conventional GNU/POSIX syntax, and additionally generates usage and help messages for you."
msgstr ""

msgid "Here's an example of using :mod:`optparse` in a simple script::"
msgstr ""

msgid "from optparse import OptionParser [...] parser = OptionParser() parser.add_option(\"-f\", \"--file\", dest=\"filename\",                   help=\"write report to FILE\", metavar=\"FILE\") parser.add_option(\"-q\", \"--quiet\",                   action=\"store_false\", dest=\"verbose\", default=True,                   help=\"don't print status messages to stdout\")  (options, args) = parser.parse_args()"
msgstr ""

msgid "With these few lines of code, users of your script can now do the \"usual thing\" on the command-line, for example::"
msgstr ""

msgid "<yourscript> --file=outfile -q"
msgstr ""

msgid "As it parses the command line, :mod:`optparse` sets attributes of the ``options`` object returned by :meth:`parse_args` based on user-supplied command-line values.  When :meth:`parse_args` returns from parsing this command line, ``options.filename`` will be ``\"outfile\"`` and ``options.verbose`` will be ``False``.  :mod:`optparse` supports both long and short options, allows short options to be merged together, and allows options to be associated with their arguments in a variety of ways.  Thus, the following command lines are all equivalent to the above example::"
msgstr ""

msgid "<yourscript> -f outfile --quiet <yourscript> --quiet --file outfile <yourscript> -q -foutfile <yourscript> -qfoutfile"
msgstr ""

msgid "Additionally, users can run one of  ::"
msgstr ""

msgid "<yourscript> -h <yourscript> --help"
msgstr ""

msgid "and :mod:`optparse` will print out a brief summary of your script's options:"
msgstr ""

msgid "usage: <yourscript> [options]  options:   -h, --help            show this help message and exit   -f FILE, --file=FILE  write report to FILE   -q, --quiet           don't print status messages to stdout"
msgstr ""

msgid "where the value of *yourscript* is determined at runtime (normally from ``sys.argv[0]``)."
msgstr ""

msgid "Background"
msgstr ""

msgid ":mod:`optparse` was explicitly designed to encourage the creation of programs with straightforward, conventional command-line interfaces.  To that end, it supports only the most common command-line syntax and semantics conventionally used under Unix.  If you are unfamiliar with these conventions, read this section to acquaint yourself with them."
msgstr ""

msgid "Terminology"
msgstr ""

msgid "a string entered on the command-line, and passed by the shell to ``execl()`` or ``execv()``.  In Python, arguments are elements of ``sys.argv[1:]`` (``sys.argv[0]`` is the name of the program being executed).  Unix shells also use the term \"word\"."
msgstr ""

msgid "It is occasionally desirable to substitute an argument list other than ``sys.argv[1:]``, so you should read \"argument\" as \"an element of ``sys.argv[1:]``, or of some other list provided as a substitute for ``sys.argv[1:]``\"."
msgstr ""

msgid "an argument used to supply extra information to guide or customize the execution of a program.  There are many different syntaxes for options; the traditional Unix syntax is a hyphen (\"-\") followed by a single letter, e.g. ``\"-x\"`` or ``\"-F\"``.  Also, traditional Unix syntax allows multiple options to be merged into a single argument, e.g.  ``\"-x -F\"`` is equivalent to ``\"-xF\"``.  The GNU project introduced ``\"--\"`` followed by a series of hyphen-separated words, e.g.  ``\"--file\"`` or ``\"--dry-run\"``.  These are the only two option syntaxes provided by :mod:`optparse`."
msgstr ""

msgid "Some other option syntaxes that the world has seen include:"
msgstr ""

msgid "a hyphen followed by a few letters, e.g. ``\"-pf\"`` (this is *not* the same as multiple options merged into a single argument)"
msgstr ""

msgid "a hyphen followed by a whole word, e.g. ``\"-file\"`` (this is technically equivalent to the previous syntax, but they aren't usually seen in the same program)"
msgstr ""

msgid "a plus sign followed by a single letter, or a few letters, or a word, e.g. ``\"+f\"``, ``\"+rgb\"``"
msgstr ""

msgid "a slash followed by a letter, or a few letters, or a word, e.g. ``\"/f\"``, ``\"/file\"``"
msgstr ""

msgid "These option syntaxes are not supported by :mod:`optparse`, and they never will be.  This is deliberate: the first three are non-standard on any environment, and the last only makes sense if you're exclusively targeting VMS, MS-DOS, and/or Windows."
msgstr ""

msgid "an argument that follows an option, is closely associated with that option, and is consumed from the argument list when that option is. With :mod:`optparse`, option arguments may either be in a separate argument from their option:"
msgstr ""

msgid "-f foo --file foo"
msgstr ""

msgid "or included in the same argument:"
msgstr ""

msgid "-ffoo --file=foo"
msgstr ""

msgid "Typically, a given option either takes an argument or it doesn't. Lots of people want an \"optional option arguments\" feature, meaning that some options will take an argument if they see it, and won't if they don't.  This is somewhat controversial, because it makes parsing ambiguous: if ``\"-a\"`` takes an optional argument and ``\"-b\"`` is another option entirely, how do we interpret ``\"-ab\"``?  Because of this ambiguity, :mod:`optparse` does not support this feature."
msgstr ""

msgid "something leftover in the argument list after options have been parsed, i.e. after options and their arguments have been parsed and removed from the argument list."
msgstr ""

msgid "an option that must be supplied on the command-line; note that the phrase \"required option\" is self-contradictory in English.  :mod:`optparse` doesn't prevent you from implementing required options, but doesn't give you much help at it either."
msgstr ""

msgid "For example, consider this hypothetical command-line::"
msgstr ""

msgid "prog -v --report /tmp/report.txt foo bar"
msgstr ""

msgid "``\"-v\"`` and ``\"--report\"`` are both options.  Assuming that :option:`--report` takes one argument, ``\"/tmp/report.txt\"`` is an option argument.  ``\"foo\"`` and ``\"bar\"`` are positional arguments."
msgstr ""

msgid "What are options for?"
msgstr ""

msgid "Options are used to provide extra information to tune or customize the execution of a program.  In case it wasn't clear, options are usually *optional*.  A program should be able to run just fine with no options whatsoever.  (Pick a random program from the Unix or GNU toolsets.  Can it run without any options at all and still make sense?  The main exceptions are ``find``, ``tar``, and ``dd``\\ ---all of which are mutant oddballs that have been rightly criticized for their non-standard syntax and confusing interfaces.)"
msgstr ""

msgid "Lots of people want their programs to have \"required options\".  Think about it. If it's required, then it's *not optional*!  If there is a piece of information that your program absolutely requires in order to run successfully, that's what positional arguments are for."
msgstr ""

msgid "As an example of good command-line interface design, consider the humble ``cp`` utility, for copying files.  It doesn't make much sense to try to copy files without supplying a destination and at least one source. Hence, ``cp`` fails if you run it with no arguments.  However, it has a flexible, useful syntax that does not require any options at all::"
msgstr ""

msgid "cp SOURCE DEST cp SOURCE ... DEST-DIR"
msgstr ""

msgid "You can get pretty far with just that.  Most ``cp`` implementations provide a bunch of options to tweak exactly how the files are copied: you can preserve mode and modification time, avoid following symlinks, ask before clobbering existing files, etc.  But none of this distracts from the core mission of ``cp``, which is to copy either one file to another, or several files to another directory."
msgstr ""

msgid "What are positional arguments for?"
msgstr ""

msgid "Positional arguments are for those pieces of information that your program absolutely, positively requires to run."
msgstr ""

msgid "A good user interface should have as few absolute requirements as possible.  If your program requires 17 distinct pieces of information in order to run successfully, it doesn't much matter *how* you get that information from the user---most people will give up and walk away before they successfully run the program.  This applies whether the user interface is a command-line, a configuration file, or a GUI: if you make that many demands on your users, most of them will simply give up."
msgstr ""

msgid "In short, try to minimize the amount of information that users are absolutely required to supply---use sensible defaults whenever possible.  Of course, you also want to make your programs reasonably flexible.  That's what options are for.  Again, it doesn't matter if they are entries in a config file, widgets in the \"Preferences\" dialog of a GUI, or command-line options---the more options you implement, the more flexible your program is, and the more complicated its implementation becomes.  Too much flexibility has drawbacks as well, of course; too many options can overwhelm users and make your code much harder to maintain."
msgstr ""

msgid "Tutorial"
msgstr ""

msgid "While :mod:`optparse` is quite flexible and powerful, it's also straightforward to use in most cases.  This section covers the code patterns that are common to any :mod:`optparse`\\ -based program."
msgstr ""

msgid "First, you need to import the OptionParser class; then, early in the main program, create an OptionParser instance::"
msgstr ""

msgid "from optparse import OptionParser [...] parser = OptionParser()"
msgstr ""

msgid "Then you can start defining options.  The basic syntax is::"
msgstr ""

msgid "parser.add_option(opt_str, ...,                   attr=value, ...)"
msgstr ""

msgid "Each option has one or more option strings, such as ``\"-f\"`` or ``\"--file\"``, and several option attributes that tell :mod:`optparse` what to expect and what to do when it encounters that option on the command line."
msgstr ""

msgid "Typically, each option will have one short option string and one long option string, e.g.::"
msgstr ""

msgid "parser.add_option(\"-f\", \"--file\", ...)"
msgstr ""

msgid "You're free to define as many short option strings and as many long option strings as you like (including zero), as long as there is at least one option string overall."
msgstr ""

msgid "The option strings passed to :meth:`add_option` are effectively labels for the option defined by that call.  For brevity, we will frequently refer to *encountering an option* on the command line; in reality, :mod:`optparse` encounters *option strings* and looks up options from them."
msgstr ""

msgid "Once all of your options are defined, instruct :mod:`optparse` to parse your program's command line::"
msgstr ""

msgid "(options, args) = parser.parse_args()"
msgstr ""

msgid "(If you like, you can pass a custom argument list to :meth:`parse_args`, but that's rarely necessary: by default it uses ``sys.argv[1:]``.)"
msgstr ""

msgid ":meth:`parse_args` returns two values:"
msgstr ""

msgid "``options``, an object containing values for all of your options---e.g. if ``\"--file\"`` takes a single string argument, then ``options.file`` will be the filename supplied by the user, or ``None`` if the user did not supply that option"
msgstr ""

msgid "``args``, the list of positional arguments leftover after parsing options"
msgstr ""

msgid "This tutorial section only covers the four most important option attributes: :attr:`~Option.action`, :attr:`~Option.type`, :attr:`~Option.dest` (destination), and :attr:`~Option.help`. Of these, :attr:`~Option.action` is the most fundamental."
msgstr ""

msgid "Understanding option actions"
msgstr ""

msgid "Actions tell :mod:`optparse` what to do when it encounters an option on the command line.  There is a fixed set of actions hard-coded into :mod:`optparse`; adding new actions is an advanced topic covered in section :ref:`optparse-extending-optparse`.  Most actions tell :mod:`optparse` to store a value in some variable---for example, take a string from the command line and store it in an attribute of ``options``."
msgstr ""

msgid "If you don't specify an option action, :mod:`optparse` defaults to ``store``."
msgstr ""

msgid "The store action"
msgstr ""

msgid "The most common option action is ``store``, which tells :mod:`optparse` to take the next argument (or the remainder of the current argument), ensure that it is of the correct type, and store it to your chosen destination."
msgstr ""

msgid "parser.add_option(\"-f\", \"--file\",                   action=\"store\", type=\"string\", dest=\"filename\")"
msgstr ""

msgid "Now let's make up a fake command line and ask :mod:`optparse` to parse it::"
msgstr ""

msgid "args = [\"-f\", \"foo.txt\"] (options, args) = parser.parse_args(args)"
msgstr ""

msgid "When :mod:`optparse` sees the option string ``\"-f\"``, it consumes the next argument, ``\"foo.txt\"``, and stores it in ``options.filename``.  So, after this call to :meth:`parse_args`, ``options.filename`` is ``\"foo.txt\"``."
msgstr ""

msgid "Some other option types supported by :mod:`optparse` are ``int`` and ``float``. Here's an option that expects an integer argument::"
msgstr ""

msgid "parser.add_option(\"-n\", type=\"int\", dest=\"num\")"
msgstr ""

msgid "Note that this option has no long option string, which is perfectly acceptable. Also, there's no explicit action, since the default is ``store``."
msgstr ""

msgid "Let's parse another fake command-line.  This time, we'll jam the option argument right up against the option: since ``\"-n42\"`` (one argument) is equivalent to ``\"-n 42\"`` (two arguments), the code ::"
msgstr ""

msgid "(options, args) = parser.parse_args([\"-n42\"]) print(options.num)"
msgstr ""

msgid "will print ``\"42\"``."
msgstr ""

msgid "If you don't specify a type, :mod:`optparse` assumes ``string``.  Combined with the fact that the default action is ``store``, that means our first example can be a lot shorter::"
msgstr ""

msgid "parser.add_option(\"-f\", \"--file\", dest=\"filename\")"
msgstr ""

msgid "If you don't supply a destination, :mod:`optparse` figures out a sensible default from the option strings: if the first long option string is ``\"--foo-bar\"``, then the default destination is ``foo_bar``.  If there are no long option strings, :mod:`optparse` looks at the first short option string: the default destination for ``\"-f\"`` is ``f``."
msgstr ""

msgid ":mod:`optparse` also includes the built-in ``complex`` type.  Adding types is covered in section :ref:`optparse-extending-optparse`."
msgstr ""

msgid "Handling boolean (flag) options"
msgstr ""

msgid "Flag options---set a variable to true or false when a particular option is seen ---are quite common.  :mod:`optparse` supports them with two separate actions, ``store_true`` and ``store_false``.  For example, you might have a ``verbose`` flag that is turned on with ``\"-v\"`` and off with ``\"-q\"``::"
msgstr ""

msgid "parser.add_option(\"-v\", action=\"store_true\", dest=\"verbose\") parser.add_option(\"-q\", action=\"store_false\", dest=\"verbose\")"
msgstr ""

msgid "Here we have two different options with the same destination, which is perfectly OK.  (It just means you have to be a bit careful when setting default values--- see below.)"
msgstr ""

msgid "When :mod:`optparse` encounters ``\"-v\"`` on the command line, it sets ``options.verbose`` to ``True``; when it encounters ``\"-q\"``, ``options.verbose`` is set to ``False``."
msgstr ""

msgid "Other actions"
msgstr ""

msgid "Some other actions supported by :mod:`optparse` are:"
msgstr ""

msgid "store a constant value"
msgstr ""

msgid "append this option's argument to a list"
msgstr ""

msgid "increment a counter by one"
msgstr ""

msgid "call a specified function"
msgstr ""

msgid "These are covered in section :ref:`optparse-reference-guide`, Reference Guide and section :ref:`optparse-option-callbacks`."
msgstr ""

msgid "Default values"
msgstr ""

msgid "All of the above examples involve setting some variable (the \"destination\") when certain command-line options are seen.  What happens if those options are never seen?  Since we didn't supply any defaults, they are all set to ``None``.  This is usually fine, but sometimes you want more control.  :mod:`optparse` lets you supply a default value for each destination, which is assigned before the command line is parsed."
msgstr ""

msgid "First, consider the verbose/quiet example.  If we want :mod:`optparse` to set ``verbose`` to ``True`` unless ``\"-q\"`` is seen, then we can do this::"
msgstr ""

msgid "parser.add_option(\"-v\", action=\"store_true\", dest=\"verbose\", default=True) parser.add_option(\"-q\", action=\"store_false\", dest=\"verbose\")"
msgstr ""

msgid "Since default values apply to the *destination* rather than to any particular option, and these two options happen to have the same destination, this is exactly equivalent::"
msgstr ""

msgid "parser.add_option(\"-v\", action=\"store_true\", dest=\"verbose\") parser.add_option(\"-q\", action=\"store_false\", dest=\"verbose\", default=True)"
msgstr ""

msgid "Consider this::"
msgstr ""

msgid "parser.add_option(\"-v\", action=\"store_true\", dest=\"verbose\", default=False) parser.add_option(\"-q\", action=\"store_false\", dest=\"verbose\", default=True)"
msgstr ""

msgid "Again, the default value for ``verbose`` will be ``True``: the last default value supplied for any particular destination is the one that counts."
msgstr ""

msgid "A clearer way to specify default values is the :meth:`set_defaults` method of OptionParser, which you can call at any time before calling :meth:`parse_args`::"
msgstr ""

msgid "parser.set_defaults(verbose=True) parser.add_option(...) (options, args) = parser.parse_args()"
msgstr ""

msgid "As before, the last value specified for a given option destination is the one that counts.  For clarity, try to use one method or the other of setting default values, not both."
msgstr ""

msgid "Generating help"
msgstr ""

msgid ":mod:`optparse`'s ability to generate help and usage text automatically is useful for creating user-friendly command-line interfaces.  All you have to do is supply a :attr:`~Option.help` value for each option, and optionally a short usage message for your whole program.  Here's an OptionParser populated with user-friendly (documented) options::"
msgstr ""

msgid "usage = \"usage: %prog [options] arg1 arg2\" parser = OptionParser(usage=usage) parser.add_option(\"-v\", \"--verbose\",                   action=\"store_true\", dest=\"verbose\", default=True,                   help=\"make lots of noise [default]\") parser.add_option(\"-q\", \"--quiet\",                   action=\"store_false\", dest=\"verbose\",                   help=\"be vewwy quiet (I'm hunting wabbits)\") parser.add_option(\"-f\", \"--filename\",                   metavar=\"FILE\", help=\"write output to FILE\") parser.add_option(\"-m\", \"--mode\",                   default=\"intermediate\",                   help=\"interaction mode: novice, intermediate, \"                        \"or expert [default: %default]\")"
msgstr ""

msgid "If :mod:`optparse` encounters either ``\"-h\"`` or ``\"--help\"`` on the command-line, or if you just call :meth:`parser.print_help`, it prints the following to standard output:"
msgstr ""

msgid "usage: <yourscript> [options] arg1 arg2  options:   -h, --help            show this help message and exit   -v, --verbose         make lots of noise [default]   -q, --quiet           be vewwy quiet (I'm hunting wabbits)   -f FILE, --filename=FILE                         write output to FILE   -m MODE, --mode=MODE  interaction mode: novice, intermediate, or                         expert [default: intermediate]"
msgstr ""

msgid "(If the help output is triggered by a help option, :mod:`optparse` exits after printing the help text.)"
msgstr ""

msgid "There's a lot going on here to help :mod:`optparse` generate the best possible help message:"
msgstr ""

msgid "the script defines its own usage message::"
msgstr ""

msgid "usage = \"usage: %prog [options] arg1 arg2\""
msgstr ""

msgid ":mod:`optparse` expands ``\"%prog\"`` in the usage string to the name of the current program, i.e. ``os.path.basename(sys.argv[0])``.  The expanded string is then printed before the detailed option help."
msgstr ""

msgid "If you don't supply a usage string, :mod:`optparse` uses a bland but sensible default: ``\"usage: %prog [options]\"``, which is fine if your script doesn't take any positional arguments."
msgstr ""

msgid "every option defines a help string, and doesn't worry about line-wrapping--- :mod:`optparse` takes care of wrapping lines and making the help output look good."
msgstr ""

msgid "options that take a value indicate this fact in their automatically-generated help message, e.g. for the \"mode\" option::"
msgstr ""

msgid "-m MODE, --mode=MODE"
msgstr ""

msgid "Here, \"MODE\" is called the meta-variable: it stands for the argument that the user is expected to supply to :option:`-m`/:option:`--mode`.  By default, :mod:`optparse` converts the destination variable name to uppercase and uses that for the meta-variable.  Sometimes, that's not what you want---for example, the :option:`--filename` option explicitly sets ``metavar=\"FILE\"``, resulting in this automatically-generated option description::"
msgstr ""

msgid "-f FILE, --filename=FILE"
msgstr ""

msgid "This is important for more than just saving space, though: the manually written help text uses the meta-variable \"FILE\" to clue the user in that there's a connection between the semi-formal syntax \"-f FILE\" and the informal semantic description \"write output to FILE\". This is a simple but effective way to make your help text a lot clearer and more useful for end users."
msgstr ""

msgid "options that have a default value can include ``%default`` in the help string---\\ :mod:`optparse` will replace it with :func:`str` of the option's default value.  If an option has no default value (or the default value is ``None``), ``%default`` expands to ``none``."
msgstr ""

msgid "When dealing with many options, it is convenient to group these options for better help output.  An :class:`OptionParser` can contain several option groups, each of which can contain several options."
msgstr ""

msgid "Continuing with the parser defined above, adding an :class:`OptionGroup` to a parser is easy::"
msgstr ""

msgid "group = OptionGroup(parser, \"Dangerous Options\",                     \"Caution: use these options at your own risk.  \"                     \"It is believed that some of them bite.\") group.add_option(\"-g\", action=\"store_true\", help=\"Group option.\") parser.add_option_group(group)"
msgstr ""

msgid "This would result in the following help output:"
msgstr ""

msgid "usage:  [options] arg1 arg2  options:   -h, --help           show this help message and exit   -v, --verbose        make lots of noise [default]   -q, --quiet          be vewwy quiet (I'm hunting wabbits)   -fFILE, --file=FILE  write output to FILE   -mMODE, --mode=MODE  interaction mode: one of 'novice', 'intermediate'                        [default], 'expert'    Dangerous Options:   Caution: use of these options is at your own risk.  It is believed that   some of them bite.   -g                 Group option."
msgstr ""

msgid "Printing a version string"
msgstr ""

msgid "Similar to the brief usage string, :mod:`optparse` can also print a version string for your program.  You have to supply the string as the ``version`` argument to OptionParser::"
msgstr ""

msgid "parser = OptionParser(usage=\"%prog [-f] [-q]\", version=\"%prog 1.0\")"
msgstr ""

msgid "``\"%prog\"`` is expanded just like it is in ``usage``.  Apart from that, ``version`` can contain anything you like.  When you supply it, :mod:`optparse` automatically adds a ``\"--version\"`` option to your parser. If it encounters this option on the command line, it expands your ``version`` string (by replacing ``\"%prog\"``), prints it to stdout, and exits."
msgstr ""

msgid "For example, if your script is called ``/usr/bin/foo``::"
msgstr ""

msgid "$ /usr/bin/foo --version foo 1.0"
msgstr ""

msgid "The following two methods can be used to print and get the ``version`` string:"
msgstr ""

msgid "Print the version message for the current program (``self.version``) to *file* (default stdout).  As with :meth:`print_usage`, any occurrence of ``\"%prog\"`` in ``self.version`` is replaced with the name of the current program.  Does nothing if ``self.version`` is empty or undefined."
msgstr ""

msgid "Same as :meth:`print_version` but returns the version string instead of printing it."
msgstr ""

msgid "How :mod:`optparse` handles errors"
msgstr ""

msgid "There are two broad classes of errors that :mod:`optparse` has to worry about: programmer errors and user errors.  Programmer errors are usually erroneous calls to :func:`OptionParser.add_option`, e.g. invalid option strings, unknown option attributes, missing option attributes, etc.  These are dealt with in the usual way: raise an exception (either :exc:`optparse.OptionError` or :exc:`TypeError`) and let the program crash."
msgstr ""

msgid "Handling user errors is much more important, since they are guaranteed to happen no matter how stable your code is.  :mod:`optparse` can automatically detect some user errors, such as bad option arguments (passing ``\"-n 4x\"`` where :option:`-n` takes an integer argument), missing arguments (``\"-n\"`` at the end of the command line, where :option:`-n` takes an argument of any type).  Also, you can call :func:`OptionParser.error` to signal an application-defined error condition::"
msgstr ""

msgid "(options, args) = parser.parse_args() [...] if options.a and options.b:     parser.error(\"options -a and -b are mutually exclusive\")"
msgstr ""

msgid "In either case, :mod:`optparse` handles the error the same way: it prints the program's usage message and an error message to standard error and exits with error status 2."
msgstr ""

msgid "Consider the first example above, where the user passes ``\"4x\"`` to an option that takes an integer::"
msgstr ""

msgid "$ /usr/bin/foo -n 4x usage: foo [options]  foo: error: option -n: invalid integer value: '4x'"
msgstr ""

msgid "Or, where the user fails to pass a value at all::"
msgstr ""

msgid "$ /usr/bin/foo -n usage: foo [options]  foo: error: -n option requires an argument"
msgstr ""

msgid ":mod:`optparse`\\ -generated error messages take care always to mention the option involved in the error; be sure to do the same when calling :func:`OptionParser.error` from your application code."
msgstr ""

msgid "If :mod:`optparse`'s default error-handling behaviour does not suit your needs, you'll need to subclass OptionParser and override its :meth:`~OptionParser.exit` and/or :meth:`~OptionParser.error` methods."
msgstr ""

msgid "Putting it all together"
msgstr ""

msgid "Here's what :mod:`optparse`\\ -based scripts usually look like::"
msgstr ""

msgid "from optparse import OptionParser [...] def main():     usage = \"usage: %prog [options] arg\"     parser = OptionParser(usage)     parser.add_option(\"-f\", \"--file\", dest=\"filename\",                       help=\"read data from FILENAME\")     parser.add_option(\"-v\", \"--verbose\",                       action=\"store_true\", dest=\"verbose\")     parser.add_option(\"-q\", \"--quiet\",                       action=\"store_false\", dest=\"verbose\")     [...]     (options, args) = parser.parse_args()     if len(args) != 1:         parser.error(\"incorrect number of arguments\")     if options.verbose:         print(\"reading %s...\" % options.filename)     [...]  if __name__ == \"__main__\":     main()"
msgstr ""

msgid "Reference Guide"
msgstr ""

msgid "Creating the parser"
msgstr ""

msgid "The first step in using :mod:`optparse` is to create an OptionParser instance."
msgstr ""

msgid "The OptionParser constructor has no required arguments, but a number of optional keyword arguments.  You should always pass them as keyword arguments, i.e. do not rely on the order in which the arguments are declared."
msgstr ""

msgid "The usage summary to print when your program is run incorrectly or with a help option.  When :mod:`optparse` prints the usage string, it expands ``%prog`` to ``os.path.basename(sys.argv[0])`` (or to ``prog`` if you passed that keyword argument).  To suppress a usage message, pass the special value :data:`optparse.SUPPRESS_USAGE`."
msgstr ""

msgid "A list of Option objects to populate the parser with.  The options in ``option_list`` are added after any options in ``standard_option_list`` (a class attribute that may be set by OptionParser subclasses), but before any version or help options. Deprecated; use :meth:`add_option` after creating the parser instead."
msgstr ""

msgid "Class to use when adding options to the parser in :meth:`add_option`."
msgstr ""

msgid "A version string to print when the user supplies a version option. If you supply a true value for ``version``, :mod:`optparse` automatically adds a version option with the single option string ``\"--version\"``.  The substring ``\"%prog\"`` is expanded the same as for ``usage``."
msgstr ""

msgid "Specifies what to do when options with conflicting option strings are added to the parser; see section :ref:`optparse-conflicts-between-options`."
msgstr ""

msgid "A paragraph of text giving a brief overview of your program. :mod:`optparse` reformats this paragraph to fit the current terminal width and prints it when the user requests help (after ``usage``, but before the list of options)."
msgstr ""

msgid "An instance of optparse.HelpFormatter that will be used for printing help text.  :mod:`optparse` provides two concrete classes for this purpose: IndentedHelpFormatter and TitledHelpFormatter."
msgstr ""

msgid "If true, :mod:`optparse` will add a help option (with option strings ``\"-h\"`` and ``\"--help\"``) to the parser."
msgstr ""

msgid "The string to use when expanding ``\"%prog\"`` in ``usage`` and ``version`` instead of ``os.path.basename(sys.argv[0])``."
msgstr ""

msgid "A paragraph of help text to print after the option help."
msgstr ""

msgid "Populating the parser"
msgstr ""

msgid "There are several ways to populate the parser with options.  The preferred way is by using :meth:`OptionParser.add_option`, as shown in section :ref:`optparse-tutorial`.  :meth:`add_option` can be called in one of two ways:"
msgstr ""

msgid "pass it an Option instance (as returned by :func:`make_option`)"
msgstr ""

msgid "pass it any combination of positional and keyword arguments that are acceptable to :func:`make_option` (i.e., to the Option constructor), and it will create the Option instance for you"
msgstr ""

msgid "The other alternative is to pass a list of pre-constructed Option instances to the OptionParser constructor, as in::"
msgstr ""

msgid "option_list = [     make_option(\"-f\", \"--filename\",                 action=\"store\", type=\"string\", dest=\"filename\"),     make_option(\"-q\", \"--quiet\",                 action=\"store_false\", dest=\"verbose\"),     ] parser = OptionParser(option_list=option_list)"
msgstr ""

msgid "(:func:`make_option` is a factory function for creating Option instances; currently it is an alias for the Option constructor.  A future version of :mod:`optparse` may split Option into several classes, and :func:`make_option` will pick the right class to instantiate.  Do not instantiate Option directly.)"
msgstr ""

msgid "Defining options"
msgstr ""

msgid "Each Option instance represents a set of synonymous command-line option strings, e.g. :option:`-f` and :option:`--file`.  You can specify any number of short or long option strings, but you must specify at least one overall option string."
msgstr ""

msgid "The canonical way to create an :class:`Option` instance is with the :meth:`add_option` method of :class:`OptionParser`."
msgstr ""

msgid "To define an option with only a short option string::"
msgstr ""

msgid "parser.add_option(\"-f\", attr=value, ...)"
msgstr ""

msgid "And to define an option with only a long option string::"
msgstr ""

msgid "parser.add_option(\"--foo\", attr=value, ...)"
msgstr ""

msgid "The keyword arguments define attributes of the new Option object.  The most important option attribute is :attr:`~Option.action`, and it largely determines which other attributes are relevant or required.  If you pass irrelevant option attributes, or fail to pass required ones, :mod:`optparse` raises an :exc:`OptionError` exception explaining your mistake."
msgstr ""

msgid "An option's *action* determines what :mod:`optparse` does when it encounters this option on the command-line.  The standard option actions hard-coded into :mod:`optparse` are:"
msgstr ""

msgid "store this option's argument (default)"
msgstr ""

msgid "store a true value"
msgstr ""

msgid "store a false value"
msgstr ""

msgid "append a constant value to a list"
msgstr ""

msgid "print a usage message including all options and the documentation for them"
msgstr ""

msgid "(If you don't supply an action, the default is ``\"store\"``.  For this action, you may also supply :attr:`~Option.type` and :attr:`~Option.dest` option attributes; see :ref:`optparse-standard-option-actions`.)"
msgstr ""

msgid "As you can see, most actions involve storing or updating a value somewhere. :mod:`optparse` always creates a special object for this, conventionally called ``options`` (it happens to be an instance of :class:`optparse.Values`).  Option arguments (and various other values) are stored as attributes of this object, according to the :attr:`~Option.dest` (destination) option attribute."
msgstr ""

msgid "For example, when you call ::"
msgstr ""

msgid "parser.parse_args()"
msgstr ""

msgid "one of the first things :mod:`optparse` does is create the ``options`` object::"
msgstr ""

msgid "options = Values()"
msgstr ""

msgid "If one of the options in this parser is defined with ::"
msgstr ""

msgid "parser.add_option(\"-f\", \"--file\", action=\"store\", type=\"string\", dest=\"filename\")"
msgstr ""

msgid "and the command-line being parsed includes any of the following::"
msgstr ""

msgid "-ffoo -f foo --file=foo --file foo"
msgstr ""

msgid "then :mod:`optparse`, on seeing this option, will do the equivalent of ::"
msgstr ""

msgid "options.filename = \"foo\""
msgstr ""

msgid "The :attr:`~Option.type` and :attr:`~Option.dest` option attributes are almost as important as :attr:`~Option.action`, but :attr:`~Option.action` is the only one that makes sense for *all* options."
msgstr ""

msgid "Option attributes"
msgstr ""

msgid "The following option attributes may be passed as keyword arguments to :meth:`OptionParser.add_option`.  If you pass an option attribute that is not relevant to a particular option, or fail to pass a required option attribute, :mod:`optparse` raises :exc:`OptionError`."
msgstr ""

msgid "(default: ``\"store\"``)"
msgstr ""

msgid "Determines :mod:`optparse`'s behaviour when this option is seen on the command line; the available options are documented :ref:`here <optparse-standard-option-actions>`."
msgstr ""

msgid "(default: ``\"string\"``)"
msgstr ""

msgid "The argument type expected by this option (e.g., ``\"string\"`` or ``\"int\"``); the available option types are documented :ref:`here <optparse-standard-option-types>`."
msgstr ""

msgid "(default: derived from option strings)"
msgstr ""

msgid "If the option's action implies writing or modifying a value somewhere, this tells :mod:`optparse` where to write it: :attr:`~Option.dest` names an attribute of the ``options`` object that :mod:`optparse` builds as it parses the command line."
msgstr ""

msgid "The value to use for this option's destination if the option is not seen on the command line.  See also :meth:`OptionParser.set_defaults`."
msgstr ""

msgid "(default: 1)"
msgstr ""

msgid "How many arguments of type :attr:`~Option.type` should be consumed when this option is seen.  If > 1, :mod:`optparse` will store a tuple of values to :attr:`~Option.dest`."
msgstr ""

msgid "For actions that store a constant value, the constant value to store."
msgstr ""

msgid "For options of type ``\"choice\"``, the list of strings the user may choose from."
msgstr ""

msgid "For options with action ``\"callback\"``, the callable to call when this option is seen.  See section :ref:`optparse-option-callbacks` for detail on the arguments passed to the callable."
msgstr ""

msgid "Additional positional and keyword arguments to pass to ``callback`` after the four standard callback arguments."
msgstr ""

msgid "Help text to print for this option when listing all available options after the user supplies a :attr:`~Option.help` option (such as ``\"--help\"``).  If no help text is supplied, the option will be listed without help text.  To hide this option, use the special value :data:`optparse.SUPPRESS_HELP`."
msgstr ""

msgid "Stand-in for the option argument(s) to use when printing help text.  See section :ref:`optparse-tutorial` for an example."
msgstr ""

msgid "Standard option actions"
msgstr ""

msgid "The various option actions all have slightly different requirements and effects. Most actions have several relevant option attributes which you may specify to guide :mod:`optparse`'s behaviour; a few have required attributes, which you must specify for any option using that action."
msgstr ""

msgid "``\"store\"`` [relevant: :attr:`~Option.type`, :attr:`~Option.dest`, :attr:`~Option.nargs`, :attr:`~Option.choices`]"
msgstr ""

msgid "The option must be followed by an argument, which is converted to a value according to :attr:`~Option.type` and stored in :attr:`~Option.dest`.  If :attr:`~Option.nargs` > 1, multiple arguments will be consumed from the command line; all will be converted according to :attr:`~Option.type` and stored to :attr:`~Option.dest` as a tuple.  See the :ref:`optparse-standard-option-types` section."
msgstr ""

msgid "If :attr:`~Option.choices` is supplied (a list or tuple of strings), the type defaults to ``\"choice\"``."
msgstr ""

msgid "If :attr:`~Option.type` is not supplied, it defaults to ``\"string\"``."
msgstr ""

msgid "If :attr:`~Option.dest` is not supplied, :mod:`optparse` derives a destination from the first long option string (e.g., ``\"--foo-bar\"`` implies ``foo_bar``). If there are no long option strings, :mod:`optparse` derives a destination from the first short option string (e.g., ``\"-f\"`` implies ``f``)."
msgstr ""

msgid "parser.add_option(\"-f\") parser.add_option(\"-p\", type=\"float\", nargs=3, dest=\"point\")"
msgstr ""

msgid "As it parses the command line ::"
msgstr ""

msgid "-f foo.txt -p 1 -3.5 4 -fbar.txt"
msgstr ""

msgid ":mod:`optparse` will set ::"
msgstr ""

msgid "options.f = \"foo.txt\" options.point = (1.0, -3.5, 4.0) options.f = \"bar.txt\""
msgstr ""

msgid "``\"store_const\"`` [required: :attr:`~Option.const`; relevant: :attr:`~Option.dest`]"
msgstr ""

msgid "The value :attr:`~Option.const` is stored in :attr:`~Option.dest`."
msgstr ""

msgid "parser.add_option(\"-q\", \"--quiet\",                   action=\"store_const\", const=0, dest=\"verbose\") parser.add_option(\"-v\", \"--verbose\",                   action=\"store_const\", const=1, dest=\"verbose\") parser.add_option(\"--noisy\",                   action=\"store_const\", const=2, dest=\"verbose\")"
msgstr ""

msgid "If ``\"--noisy\"`` is seen, :mod:`optparse` will set  ::"
msgstr ""

msgid "options.verbose = 2"
msgstr ""

msgid "``\"store_true\"`` [relevant: :attr:`~Option.dest`]"
msgstr ""

msgid "A special case of ``\"store_const\"`` that stores a true value to :attr:`~Option.dest`."
msgstr ""

msgid "``\"store_false\"`` [relevant: :attr:`~Option.dest`]"
msgstr ""

msgid "Like ``\"store_true\"``, but stores a false value."
msgstr ""

msgid "parser.add_option(\"--clobber\", action=\"store_true\", dest=\"clobber\") parser.add_option(\"--no-clobber\", action=\"store_false\", dest=\"clobber\")"
msgstr ""

msgid "``\"append\"`` [relevant: :attr:`~Option.type`, :attr:`~Option.dest`, :attr:`~Option.nargs`, :attr:`~Option.choices`]"
msgstr ""

msgid "The option must be followed by an argument, which is appended to the list in :attr:`~Option.dest`.  If no default value for :attr:`~Option.dest` is supplied, an empty list is automatically created when :mod:`optparse` first encounters this option on the command-line.  If :attr:`~Option.nargs` > 1, multiple arguments are consumed, and a tuple of length :attr:`~Option.nargs` is appended to :attr:`~Option.dest`."
msgstr ""

msgid "The defaults for :attr:`~Option.type` and :attr:`~Option.dest` are the same as for the ``\"store\"`` action."
msgstr ""

msgid "parser.add_option(\"-t\", \"--tracks\", action=\"append\", type=\"int\")"
msgstr ""

msgid "If ``\"-t3\"`` is seen on the command-line, :mod:`optparse` does the equivalent of::"
msgstr ""

msgid "options.tracks = [] options.tracks.append(int(\"3\"))"
msgstr ""

msgid "If, a little later on, ``\"--tracks=4\"`` is seen, it does::"
msgstr ""

msgid "options.tracks.append(int(\"4\"))"
msgstr ""

msgid "``\"append_const\"`` [required: :attr:`~Option.const`; relevant: :attr:`~Option.dest`]"
msgstr ""

msgid "Like ``\"store_const\"``, but the value :attr:`~Option.const` is appended to :attr:`~Option.dest`; as with ``\"append\"``, :attr:`~Option.dest` defaults to ``None``, and an empty list is automatically created the first time the option is encountered."
msgstr ""

msgid "``\"count\"`` [relevant: :attr:`~Option.dest`]"
msgstr ""

msgid "Increment the integer stored at :attr:`~Option.dest`.  If no default value is supplied, :attr:`~Option.dest` is set to zero before being incremented the first time."
msgstr ""

msgid "parser.add_option(\"-v\", action=\"count\", dest=\"verbosity\")"
msgstr ""

msgid "The first time ``\"-v\"`` is seen on the command line, :mod:`optparse` does the equivalent of::"
msgstr ""

msgid "options.verbosity = 0 options.verbosity += 1"
msgstr ""

msgid "Every subsequent occurrence of ``\"-v\"`` results in  ::"
msgstr ""

msgid "options.verbosity += 1"
msgstr ""

msgid "``\"callback\"`` [required: :attr:`~Option.callback`; relevant: :attr:`~Option.type`, :attr:`~Option.nargs`, :attr:`~Option.callback_args`, :attr:`~Option.callback_kwargs`]"
msgstr ""

msgid "Call the function specified by :attr:`~Option.callback`, which is called as ::"
msgstr ""

msgid "func(option, opt_str, value, parser, *args, **kwargs)"
msgstr ""

msgid "See section :ref:`optparse-option-callbacks` for more detail."
msgstr ""

msgid "``\"help\"``"
msgstr ""

msgid "Prints a complete help message for all the options in the current option parser.  The help message is constructed from the ``usage`` string passed to OptionParser's constructor and the :attr:`~Option.help` string passed to every option."
msgstr ""

msgid "If no :attr:`~Option.help` string is supplied for an option, it will still be listed in the help message.  To omit an option entirely, use the special value :data:`optparse.SUPPRESS_HELP`."
msgstr ""

msgid ":mod:`optparse` automatically adds a :attr:`~Option.help` option to all OptionParsers, so you do not normally need to create one."
msgstr ""

msgid "from optparse import OptionParser, SUPPRESS_HELP  # usually, a help option is added automatically, but that can # be suppressed using the add_help_option argument parser = OptionParser(add_help_option=False)  parser.add_option(\"-h\", \"--help\", action=\"help\") parser.add_option(\"-v\", action=\"store_true\", dest=\"verbose\",                   help=\"Be moderately verbose\") parser.add_option(\"--file\", dest=\"filename\",                   help=\"Input file to read data from\") parser.add_option(\"--secret\", help=SUPPRESS_HELP)"
msgstr ""

msgid "If :mod:`optparse` sees either ``\"-h\"`` or ``\"--help\"`` on the command line, it will print something like the following help message to stdout (assuming ``sys.argv[0]`` is ``\"foo.py\"``):"
msgstr ""

msgid "usage: foo.py [options]  options:   -h, --help        Show this help message and exit   -v                Be moderately verbose   --file=FILENAME   Input file to read data from"
msgstr ""

msgid "After printing the help message, :mod:`optparse` terminates your process with ``sys.exit(0)``."
msgstr ""

msgid "``\"version\"``"
msgstr ""

msgid "Prints the version number supplied to the OptionParser to stdout and exits. The version number is actually formatted and printed by the ``print_version()`` method of OptionParser.  Generally only relevant if the ``version`` argument is supplied to the OptionParser constructor.  As with :attr:`~Option.help` options, you will rarely create ``version`` options, since :mod:`optparse` automatically adds them when needed."
msgstr ""

msgid "Standard option types"
msgstr ""

msgid ":mod:`optparse` has five built-in option types: ``\"string\"``, ``\"int\"``, ``\"choice\"``, ``\"float\"`` and ``\"complex\"``.  If you need to add new option types, see section :ref:`optparse-extending-optparse`."
msgstr ""

msgid "Arguments to string options are not checked or converted in any way: the text on the command line is stored in the destination (or passed to the callback) as-is."
msgstr ""

msgid "Integer arguments (type ``\"int\"``) are parsed as follows:"
msgstr ""

msgid "if the number starts with ``0x``, it is parsed as a hexadecimal number"
msgstr ""

msgid "if the number starts with ``0``, it is parsed as an octal number"
msgstr ""

msgid "if the number starts with ``0b``, it is parsed as a binary number"
msgstr ""

msgid "otherwise, the number is parsed as a decimal number"
msgstr ""

msgid "The conversion is done by calling :func:`int` with the appropriate base (2, 8, 10, or 16).  If this fails, so will :mod:`optparse`, although with a more useful error message."
msgstr ""

msgid "``\"float\"`` and ``\"complex\"`` option arguments are converted directly with :func:`float` and :func:`complex`, with similar error-handling."
msgstr ""

msgid "``\"choice\"`` options are a subtype of ``\"string\"`` options.  The :attr:`~Option.choices`` option attribute (a sequence of strings) defines the set of allowed option arguments.  :func:`optparse.check_choice` compares user-supplied option arguments against this master list and raises :exc:`OptionValueError` if an invalid string is given."
msgstr ""

msgid "The whole point of creating and populating an OptionParser is to call its :meth:`parse_args` method::"
msgstr ""

msgid "(options, args) = parser.parse_args(args=None, values=None)"
msgstr ""

msgid "where the input parameters are"
msgstr ""

msgid "the list of arguments to process (default: ``sys.argv[1:]``)"
msgstr ""

msgid "object to store option arguments in (default: a new instance of :class:`optparse.Values`)"
msgstr ""

msgid "and the return values are"
msgstr ""

msgid "the same object that was passed in as ``values``, or the optparse.Values instance created by :mod:`optparse`"
msgstr ""

msgid "the leftover positional arguments after all options have been processed"
msgstr ""

msgid "The most common usage is to supply neither keyword argument.  If you supply ``values``, it will be modified with repeated :func:`setattr` calls (roughly one for every option argument stored to an option destination) and returned by :meth:`parse_args`."
msgstr ""

msgid "If :meth:`parse_args` encounters any errors in the argument list, it calls the OptionParser's :meth:`error` method with an appropriate end-user error message. This ultimately terminates your process with an exit status of 2 (the traditional Unix exit status for command-line errors)."
msgstr ""

msgid "Querying and manipulating your option parser"
msgstr ""

msgid "The default behavior of the option parser can be customized slightly, and you can also poke around your option parser and see what's there.  OptionParser provides several methods to help you out:"
msgstr ""

msgid "Set parsing to stop on the first non-option.  For example, if ``\"-a\"`` and ``\"-b\"`` are both simple options that take no arguments, :mod:`optparse` normally accepts this syntax::"
msgstr ""

msgid "prog -a arg1 -b arg2"
msgstr ""

msgid "and treats it as equivalent to  ::"
msgstr ""

msgid "prog -a -b arg1 arg2"
msgstr ""

msgid "To disable this feature, call :meth:`disable_interspersed_args`.  This restores traditional Unix syntax, where option parsing stops with the first non-option argument."
msgstr ""

msgid "Use this if you have a command processor which runs another command which has options of its own and you want to make sure these options don't get confused.  For example, each command might have a different set of options."
msgstr ""

msgid "Set parsing to not stop on the first non-option, allowing interspersing switches with command arguments.  This is the default behavior."
msgstr ""

msgid "Returns the Option instance with the option string *opt_str*, or ``None`` if no options have that option string."
msgstr ""

msgid "Return true if the OptionParser has an option with option string *opt_str* (e.g., ``\"-q\"`` or ``\"--verbose\"``)."
msgstr ""

msgid "If the :class:`OptionParser` has an option corresponding to *opt_str*, that option is removed.  If that option provided any other option strings, all of those option strings become invalid. If *opt_str* does not occur in any option belonging to this :class:`OptionParser`, raises :exc:`ValueError`."
msgstr ""

msgid "Conflicts between options"
msgstr ""

msgid "If you're not careful, it's easy to define options with conflicting option strings::"
msgstr ""

msgid "parser.add_option(\"-n\", \"--dry-run\", ...) [...] parser.add_option(\"-n\", \"--noisy\", ...)"
msgstr ""

msgid "(This is particularly true if you've defined your own OptionParser subclass with some standard options.)"
msgstr ""

msgid "Every time you add an option, :mod:`optparse` checks for conflicts with existing options.  If it finds any, it invokes the current conflict-handling mechanism. You can set the conflict-handling mechanism either in the constructor::"
msgstr ""

msgid "parser = OptionParser(..., conflict_handler=handler)"
msgstr ""

msgid "or with a separate call::"
msgstr ""

msgid "parser.set_conflict_handler(handler)"
msgstr ""

msgid "The available conflict handlers are:"
msgstr ""

msgid "assume option conflicts are a programming error and raise :exc:`OptionConflictError`"
msgstr ""

msgid "resolve option conflicts intelligently (see below)"
msgstr ""

msgid "As an example, let's define an :class:`OptionParser` that resolves conflicts intelligently and add conflicting options to it::"
msgstr ""

msgid "parser = OptionParser(conflict_handler=\"resolve\") parser.add_option(\"-n\", \"--dry-run\", ..., help=\"do no harm\") parser.add_option(\"-n\", \"--noisy\", ..., help=\"be noisy\")"
msgstr ""

msgid "At this point, :mod:`optparse` detects that a previously-added option is already using the ``\"-n\"`` option string.  Since ``conflict_handler`` is ``\"resolve\"``, it resolves the situation by removing ``\"-n\"`` from the earlier option's list of option strings.  Now ``\"--dry-run\"`` is the only way for the user to activate that option.  If the user asks for help, the help message will reflect that::"
msgstr ""

msgid "options:   --dry-run     do no harm   [...]   -n, --noisy   be noisy"
msgstr ""

msgid "It's possible to whittle away the option strings for a previously-added option until there are none left, and the user has no way of invoking that option from the command-line.  In that case, :mod:`optparse` removes that option completely, so it doesn't show up in help text or anywhere else. Carrying on with our existing OptionParser::"
msgstr ""

msgid "parser.add_option(\"--dry-run\", ..., help=\"new dry-run option\")"
msgstr ""

msgid "At this point, the original :option:`-n/--dry-run` option is no longer accessible, so :mod:`optparse` removes it, leaving this help text::"
msgstr ""

msgid "options:   [...]   -n, --noisy   be noisy   --dry-run     new dry-run option"
msgstr ""

msgid "OptionParser instances have several cyclic references.  This should not be a problem for Python's garbage collector, but you may wish to break the cyclic references explicitly by calling :meth:`~OptionParser.destroy` on your OptionParser once you are done with it.  This is particularly useful in long-running applications where large object graphs are reachable from your OptionParser."
msgstr ""

msgid "Other methods"
msgstr ""

msgid "OptionParser supports several other public methods:"
msgstr ""

msgid "Set the usage string according to the rules described above for the ``usage`` constructor keyword argument.  Passing ``None`` sets the default usage string; use :data:`optparse.SUPPRESS_USAGE` to suppress a usage message."
msgstr ""

msgid "Print the usage message for the current program (``self.usage``) to *file* (default stdout).  Any occurrence of the string ``\"%prog\"`` in ``self.usage`` is replaced with the name of the current program.  Does nothing if ``self.usage`` is empty or not defined."
msgstr ""

msgid "Same as :meth:`print_usage` but returns the usage string instead of printing it."
msgstr ""

msgid "Set default values for several option destinations at once.  Using :meth:`set_defaults` is the preferred way to set default values for options, since multiple options can share the same destination.  For example, if several \"mode\" options all set the same destination, any one of them can set the default, and the last one wins::"
msgstr ""

msgid "parser.add_option(\"--advanced\", action=\"store_const\",                   dest=\"mode\", const=\"advanced\",                   default=\"novice\")    # overridden below parser.add_option(\"--novice\", action=\"store_const\",                   dest=\"mode\", const=\"novice\",                   default=\"advanced\")  # overrides above setting"
msgstr ""

msgid "To avoid this confusion, use :meth:`set_defaults`::"
msgstr ""

msgid "parser.set_defaults(mode=\"advanced\") parser.add_option(\"--advanced\", action=\"store_const\",                   dest=\"mode\", const=\"advanced\") parser.add_option(\"--novice\", action=\"store_const\",                   dest=\"mode\", const=\"novice\")"
msgstr ""

msgid "Option Callbacks"
msgstr ""

msgid "When :mod:`optparse`'s built-in actions and types aren't quite enough for your needs, you have two choices: extend :mod:`optparse` or define a callback option. Extending :mod:`optparse` is more general, but overkill for a lot of simple cases.  Quite often a simple callback is all you need."
msgstr ""

msgid "There are two steps to defining a callback option:"
msgstr ""

msgid "define the option itself using the ``\"callback\"`` action"
msgstr ""

msgid "write the callback; this is a function (or method) that takes at least four arguments, as described below"
msgstr ""

msgid "Defining a callback option"
msgstr ""

msgid "As always, the easiest way to define a callback option is by using the :meth:`OptionParser.add_option` method.  Apart from :attr:`~Option.action`, the only option attribute you must specify is ``callback``, the function to call::"
msgstr ""

msgid "parser.add_option(\"-c\", action=\"callback\", callback=my_callback)"
msgstr ""

msgid "``callback`` is a function (or other callable object), so you must have already defined ``my_callback()`` when you create this callback option. In this simple case, :mod:`optparse` doesn't even know if :option:`-c` takes any arguments, which usually means that the option takes no arguments---the mere presence of :option:`-c` on the command-line is all it needs to know.  In some circumstances, though, you might want your callback to consume an arbitrary number of command-line arguments.  This is where writing callbacks gets tricky; it's covered later in this section."
msgstr ""

msgid ":mod:`optparse` always passes four particular arguments to your callback, and it will only pass additional arguments if you specify them via :attr:`~Option.callback_args` and :attr:`~Option.callback_kwargs`.  Thus, the minimal callback function signature is::"
msgstr ""

msgid "def my_callback(option, opt, value, parser):"
msgstr ""

msgid "The four arguments to a callback are described below."
msgstr ""

msgid "There are several other option attributes that you can supply when you define a callback option:"
msgstr ""

msgid "has its usual meaning: as with the ``\"store\"`` or ``\"append\"`` actions, it instructs :mod:`optparse` to consume one argument and convert it to :attr:`~Option.type`.  Rather than storing the converted value(s) anywhere, though, :mod:`optparse` passes it to your callback function."
msgstr ""

msgid "also has its usual meaning: if it is supplied and > 1, :mod:`optparse` will consume :attr:`~Option.nargs` arguments, each of which must be convertible to :attr:`~Option.type`.  It then passes a tuple of converted values to your callback."
msgstr ""

msgid "a tuple of extra positional arguments to pass to the callback"
msgstr ""

msgid "a dictionary of extra keyword arguments to pass to the callback"
msgstr ""

msgid "How callbacks are called"
msgstr ""

msgid "All callbacks are called as follows::"
msgstr ""

msgid "where"
msgstr ""

msgid "is the Option instance that's calling the callback"
msgstr ""

msgid "is the option string seen on the command-line that's triggering the callback. (If an abbreviated long option was used, ``opt_str`` will be the full, canonical option string---e.g. if the user puts ``\"--foo\"`` on the command-line as an abbreviation for ``\"--foobar\"``, then ``opt_str`` will be ``\"--foobar\"``.)"
msgstr ""

msgid "is the argument to this option seen on the command-line.  :mod:`optparse` will only expect an argument if :attr:`~Option.type` is set; the type of ``value`` will be the type implied by the option's type.  If :attr:`~Option.type` for this option is ``None`` (no argument expected), then ``value`` will be ``None``.  If :attr:`~Option.nargs` > 1, ``value`` will be a tuple of values of the appropriate type."
msgstr ""

msgid "is the OptionParser instance driving the whole thing, mainly useful because you can access some other interesting data through its instance attributes:"
msgstr ""

msgid "the current list of leftover arguments, ie. arguments that have been consumed but are neither options nor option arguments. Feel free to modify ``parser.largs``, e.g. by adding more arguments to it.  (This list will become ``args``, the second return value of :meth:`parse_args`.)"
msgstr ""

msgid "the current list of remaining arguments, ie. with ``opt_str`` and ``value`` (if applicable) removed, and only the arguments following them still there.  Feel free to modify ``parser.rargs``, e.g. by consuming more arguments."
msgstr ""

msgid "the object where option values are by default stored (an instance of optparse.OptionValues).  This lets callbacks use the same mechanism as the rest of :mod:`optparse` for storing option values; you don't need to mess around with globals or closures.  You can also access or modify the value(s) of any options already encountered on the command-line."
msgstr ""

msgid "is a tuple of arbitrary positional arguments supplied via the :attr:`~Option.callback_args` option attribute."
msgstr ""

msgid "is a dictionary of arbitrary keyword arguments supplied via :attr:`~Option.callback_kwargs`."
msgstr ""

msgid "Raising errors in a callback"
msgstr ""

msgid "The callback function should raise :exc:`OptionValueError` if there are any problems with the option or its argument(s).  :mod:`optparse` catches this and terminates the program, printing the error message you supply to stderr.  Your message should be clear, concise, accurate, and mention the option at fault. Otherwise, the user will have a hard time figuring out what he did wrong."
msgstr ""

msgid "Callback example 1: trivial callback"
msgstr ""

msgid "Here's an example of a callback option that takes no arguments, and simply records that the option was seen::"
msgstr ""

msgid "def record_foo_seen(option, opt_str, value, parser):     parser.values.saw_foo = True  parser.add_option(\"--foo\", action=\"callback\", callback=record_foo_seen)"
msgstr ""

msgid "Of course, you could do that with the ``\"store_true\"`` action."
msgstr ""

msgid "Callback example 2: check option order"
msgstr ""

msgid "Here's a slightly more interesting example: record the fact that ``\"-a\"`` is seen, but blow up if it comes after ``\"-b\"`` in the command-line.  ::"
msgstr ""

msgid "def check_order(option, opt_str, value, parser):     if parser.values.b:         raise OptionValueError(\"can't use -a after -b\")     parser.values.a = 1 [...] parser.add_option(\"-a\", action=\"callback\", callback=check_order) parser.add_option(\"-b\", action=\"store_true\", dest=\"b\")"
msgstr ""

msgid "Callback example 3: check option order (generalized)"
msgstr ""

msgid "If you want to re-use this callback for several similar options (set a flag, but blow up if ``\"-b\"`` has already been seen), it needs a bit of work: the error message and the flag that it sets must be generalized.  ::"
msgstr ""

msgid "def check_order(option, opt_str, value, parser):     if parser.values.b:         raise OptionValueError(\"can't use %s after -b\" % opt_str)     setattr(parser.values, option.dest, 1) [...] parser.add_option(\"-a\", action=\"callback\", callback=check_order, dest='a') parser.add_option(\"-b\", action=\"store_true\", dest=\"b\") parser.add_option(\"-c\", action=\"callback\", callback=check_order, dest='c')"
msgstr ""

msgid "Callback example 4: check arbitrary condition"
msgstr ""

msgid "Of course, you could put any condition in there---you're not limited to checking the values of already-defined options.  For example, if you have options that should not be called when the moon is full, all you have to do is this::"
msgstr ""

msgid "def check_moon(option, opt_str, value, parser):     if is_moon_full():         raise OptionValueError(\"%s option invalid when moon is full\"                                % opt_str)     setattr(parser.values, option.dest, 1) [...] parser.add_option(\"--foo\",                   action=\"callback\", callback=check_moon, dest=\"foo\")"
msgstr ""

msgid "(The definition of ``is_moon_full()`` is left as an exercise for the reader.)"
msgstr ""

msgid "Callback example 5: fixed arguments"
msgstr ""

msgid "Things get slightly more interesting when you define callback options that take a fixed number of arguments.  Specifying that a callback option takes arguments is similar to defining a ``\"store\"`` or ``\"append\"`` option: if you define :attr:`~Option.type`, then the option takes one argument that must be convertible to that type; if you further define :attr:`~Option.nargs`, then the option takes :attr:`~Option.nargs` arguments."
msgstr ""

msgid "Here's an example that just emulates the standard ``\"store\"`` action::"
msgstr ""

msgid "def store_value(option, opt_str, value, parser):     setattr(parser.values, option.dest, value) [...] parser.add_option(\"--foo\",                   action=\"callback\", callback=store_value,                   type=\"int\", nargs=3, dest=\"foo\")"
msgstr ""

msgid "Note that :mod:`optparse` takes care of consuming 3 arguments and converting them to integers for you; all you have to do is store them.  (Or whatever; obviously you don't need a callback for this example.)"
msgstr ""

msgid "Callback example 6: variable arguments"
msgstr ""

msgid "Things get hairy when you want an option to take a variable number of arguments. For this case, you must write a callback, as :mod:`optparse` doesn't provide any built-in capabilities for it.  And you have to deal with certain intricacies of conventional Unix command-line parsing that :mod:`optparse` normally handles for you.  In particular, callbacks should implement the conventional rules for bare ``\"--\"`` and ``\"-\"`` arguments:"
msgstr ""

msgid "either ``\"--\"`` or ``\"-\"`` can be option arguments"
msgstr ""

msgid "bare ``\"--\"`` (if not the argument to some option): halt command-line processing and discard the ``\"--\"``"
msgstr ""

msgid "bare ``\"-\"`` (if not the argument to some option): halt command-line processing but keep the ``\"-\"`` (append it to ``parser.largs``)"
msgstr ""

msgid "If you want an option that takes a variable number of arguments, there are several subtle, tricky issues to worry about.  The exact implementation you choose will be based on which trade-offs you're willing to make for your application (which is why :mod:`optparse` doesn't support this sort of thing directly)."
msgstr ""

msgid "Nevertheless, here's a stab at a callback for an option with variable arguments::"
msgstr ""

msgid "def vararg_callback(option, opt_str, value, parser):      assert value is None      value = []       def floatable(str):          try:              float(str)              return True          except ValueError:              return False       for arg in parser.rargs:          # stop on --foo like options          if arg[:2] == \"--\" and len(arg) > 2:              break          # stop on -a, but not on -3 or -3.0          if arg[:1] == \"-\" and len(arg) > 1 and not floatable(arg):              break          value.append(arg)       del parser.rargs[:len(value)]      setattr(parser.values, option.dest, value)  [...] parser.add_option(\"-c\", \"--callback\", dest=\"vararg_attr\",                   action=\"callback\", callback=vararg_callback)"
msgstr ""

msgid "Extending :mod:`optparse`"
msgstr ""

msgid "Since the two major controlling factors in how :mod:`optparse` interprets command-line options are the action and type of each option, the most likely direction of extension is to add new actions and new types."
msgstr ""

msgid "Adding new types"
msgstr ""

msgid "To add new types, you need to define your own subclass of :mod:`optparse`'s :class:`Option` class.  This class has a couple of attributes that define :mod:`optparse`'s types: :attr:`~Option.TYPES` and :attr:`~Option.TYPE_CHECKER`."
msgstr ""

msgid "A tuple of type names; in your subclass, simply define a new tuple :attr:`TYPES` that builds on the standard one."
msgstr ""

msgid "A dictionary mapping type names to type-checking functions.  A type-checking function has the following signature::"
msgstr ""

msgid "def check_mytype(option, opt, value)"
msgstr ""

msgid "where ``option`` is an :class:`Option` instance, ``opt`` is an option string (e.g., ``\"-f\"``), and ``value`` is the string from the command line that must be checked and converted to your desired type.  ``check_mytype()`` should return an object of the hypothetical type ``mytype``.  The value returned by a type-checking function will wind up in the OptionValues instance returned by :meth:`OptionParser.parse_args`, or be passed to a callback as the ``value`` parameter."
msgstr ""

msgid "Your type-checking function should raise :exc:`OptionValueError` if it encounters any problems.  :exc:`OptionValueError` takes a single string argument, which is passed as-is to :class:`OptionParser`'s :meth:`error` method, which in turn prepends the program name and the string ``\"error:\"`` and prints everything to stderr before terminating the process."
msgstr ""

msgid "Here's a silly example that demonstrates adding a ``\"complex\"`` option type to parse Python-style complex numbers on the command line.  (This is even sillier than it used to be, because :mod:`optparse` 1.3 added built-in support for complex numbers, but never mind.)"
msgstr ""

msgid "First, the necessary imports::"
msgstr ""

msgid "from copy import copy from optparse import Option, OptionValueError"
msgstr ""

msgid "You need to define your type-checker first, since it's referred to later (in the :attr:`~Option.TYPE_CHECKER` class attribute of your Option subclass)::"
msgstr ""

msgid "def check_complex(option, opt, value):     try:         return complex(value)     except ValueError:         raise OptionValueError(             \"option %s: invalid complex value: %r\" % (opt, value))"
msgstr ""

msgid "Finally, the Option subclass::"
msgstr ""

msgid "class MyOption (Option):     TYPES = Option.TYPES + (\"complex\",)     TYPE_CHECKER = copy(Option.TYPE_CHECKER)     TYPE_CHECKER[\"complex\"] = check_complex"
msgstr ""

msgid "(If we didn't make a :func:`copy` of :attr:`Option.TYPE_CHECKER`, we would end up modifying the :attr:`~Option.TYPE_CHECKER` attribute of :mod:`optparse`'s Option class.  This being Python, nothing stops you from doing that except good manners and common sense.)"
msgstr ""

msgid "That's it!  Now you can write a script that uses the new option type just like any other :mod:`optparse`\\ -based script, except you have to instruct your OptionParser to use MyOption instead of Option::"
msgstr ""

msgid "parser = OptionParser(option_class=MyOption) parser.add_option(\"-c\", type=\"complex\")"
msgstr ""

msgid "Alternately, you can build your own option list and pass it to OptionParser; if you don't use :meth:`add_option` in the above way, you don't need to tell OptionParser which option class to use::"
msgstr ""

msgid "option_list = [MyOption(\"-c\", action=\"store\", type=\"complex\", dest=\"c\")] parser = OptionParser(option_list=option_list)"
msgstr ""

msgid "Adding new actions"
msgstr ""

msgid "Adding new actions is a bit trickier, because you have to understand that :mod:`optparse` has a couple of classifications for actions:"
msgstr ""

msgid "actions that result in :mod:`optparse` storing a value to an attribute of the current OptionValues instance; these options require a :attr:`~Option.dest` attribute to be supplied to the Option constructor."
msgstr ""

msgid "actions that take a value from the command line and expect it to be of a certain type; or rather, a string that can be converted to a certain type. These options require a :attr:`~Option.type` attribute to the Option constructor."
msgstr ""

msgid "These are overlapping sets: some default \"store\" actions are ``\"store\"``, ``\"store_const\"``, ``\"append\"``, and ``\"count\"``, while the default \"typed\" actions are ``\"store\"``, ``\"append\"``, and ``\"callback\"``."
msgstr ""

msgid "When you add an action, you need to categorize it by listing it in at least one of the following class attributes of Option (all are lists of strings):"
msgstr ""

msgid "All actions must be listed in ACTIONS."
msgstr ""

msgid "\"store\" actions are additionally listed here."
msgstr ""

msgid "\"typed\" actions are additionally listed here."
msgstr ""

msgid "Actions that always take a type (i.e. whose options always take a value) are additionally listed here.  The only effect of this is that :mod:`optparse` assigns the default type, ``\"string\"``, to options with no explicit type whose action is listed in :attr:`ALWAYS_TYPED_ACTIONS`."
msgstr ""

msgid "In order to actually implement your new action, you must override Option's :meth:`take_action` method and add a case that recognizes your action."
msgstr ""

msgid "For example, let's add an ``\"extend\"`` action.  This is similar to the standard ``\"append\"`` action, but instead of taking a single value from the command-line and appending it to an existing list, ``\"extend\"`` will take multiple values in a single comma-delimited string, and extend an existing list with them.  That is, if ``\"--names\"`` is an ``\"extend\"`` option of type ``\"string\"``, the command line ::"
msgstr ""

msgid "--names=foo,bar --names blah --names ding,dong"
msgstr ""

msgid "would result in a list  ::"
msgstr ""

msgid "[\"foo\", \"bar\", \"blah\", \"ding\", \"dong\"]"
msgstr ""

msgid "Again we define a subclass of Option::"
msgstr ""

msgid "class MyOption(Option):      ACTIONS = Option.ACTIONS + (\"extend\",)     STORE_ACTIONS = Option.STORE_ACTIONS + (\"extend\",)     TYPED_ACTIONS = Option.TYPED_ACTIONS + (\"extend\",)     ALWAYS_TYPED_ACTIONS = Option.ALWAYS_TYPED_ACTIONS + (\"extend\",)      def take_action(self, action, dest, opt, value, values, parser):         if action == \"extend\":             lvalue = value.split(\",\")             values.ensure_value(dest, []).extend(lvalue)         else:             Option.take_action(                 self, action, dest, opt, value, values, parser)"
msgstr ""

msgid "Features of note:"
msgstr ""

msgid "``\"extend\"`` both expects a value on the command-line and stores that value somewhere, so it goes in both :attr:`~Option.STORE_ACTIONS` and :attr:`~Option.TYPED_ACTIONS`."
msgstr ""

msgid "to ensure that :mod:`optparse` assigns the default type of ``\"string\"`` to ``\"extend\"`` actions, we put the ``\"extend\"`` action in :attr:`~Option.ALWAYS_TYPED_ACTIONS` as well."
msgstr ""

msgid ":meth:`MyOption.take_action` implements just this one new action, and passes control back to :meth:`Option.take_action` for the standard :mod:`optparse` actions."
msgstr ""

msgid "``values`` is an instance of the optparse_parser.Values class, which provides the very useful :meth:`ensure_value` method. :meth:`ensure_value` is essentially :func:`getattr` with a safety valve; it is called as ::"
msgstr ""

msgid "values.ensure_value(attr, value)"
msgstr ""

msgid "If the ``attr`` attribute of ``values`` doesn't exist or is None, then ensure_value() first sets it to ``value``, and then returns 'value. This is very handy for actions like ``\"extend\"``, ``\"append\"``, and ``\"count\"``, all of which accumulate data in a variable and expect that variable to be of a certain type (a list for the first two, an integer for the latter).  Using :meth:`ensure_value` means that scripts using your action don't have to worry about setting a default value for the option destinations in question; they can just leave the default as None and :meth:`ensure_value` will take care of getting it right when it's needed."
msgstr ""

msgid ":mod:`os` --- Miscellaneous operating system interfaces"
msgstr ""

msgid "This module provides a portable way of using operating system dependent functionality.  If you just want to read or write a file see :func:`open`, if you want to manipulate paths, see the :mod:`os.path` module, and if you want to read all the lines in all the files on the command line see the :mod:`fileinput` module.  For creating temporary files and directories see the :mod:`tempfile` module, and for high-level file and directory handling see the :mod:`shutil` module."
msgstr ""

msgid "Notes on the availability of these functions:"
msgstr ""

msgid "The design of all built-in operating system dependent modules of Python is such that as long as the same functionality is available, it uses the same interface; for example, the function ``os.stat(path)`` returns stat information about *path* in the same format (which happens to have originated with the POSIX interface)."
msgstr ""

msgid "Extensions peculiar to a particular operating system are also available through the :mod:`os` module, but using them is of course a threat to portability."
msgstr ""

msgid "All functions accepting path or file names accept both bytes and string objects, and result in an object of the same type, if a path or file name is returned."
msgstr ""

msgid "If not separately noted, all functions that claim \"Availability: Unix\" are supported on Mac OS X, which builds on a Unix core."
msgstr ""

msgid "An \"Availability: Unix\" note means that this function is commonly found on Unix systems.  It does not make any claims about its existence on a specific operating system."
msgstr ""

msgid "All functions in this module raise :exc:`OSError` in the case of invalid or inaccessible file names and paths, or other arguments that have the correct type, but are not accepted by the operating system."
msgstr ""

msgid "An alias for the built-in :exc:`OSError` exception."
msgstr ""

msgid "The name of the operating system dependent module imported.  The following names have currently been registered: ``'posix'``, ``'nt'``, ``'mac'``, ``'os2'``, ``'ce'``, ``'java'``."
msgstr ""

msgid "File Names, Command Line Arguments, and Environment Variables"
msgstr ""

msgid "In Python, file names, command line arguments, and environment variables are represented using the string type. On some systems, decoding these strings to and from bytes is necessary before passing them to the operating system. Python uses the file system encoding to perform this conversion (see :func:`sys.getfilesystemencoding`)."
msgstr ""

msgid "The file system encoding must guarantee to successfully decode all bytes below 128. If the file system encoding fails to provide this guarantee, API functions may raise UnicodeErrors."
msgstr ""

msgid "Process Parameters"
msgstr ""

msgid "These functions and data items provide information and operate on the current process and user."
msgstr ""

msgid "A mapping object representing the string environment. For example, ``environ['HOME']`` is the pathname of your home directory (on some platforms), and is equivalent to ``getenv(\"HOME\")`` in C."
msgstr ""

msgid "This mapping is captured the first time the :mod:`os` module is imported, typically during Python startup as part of processing :file:`site.py`.  Changes to the environment made after this time are not reflected in ``os.environ``, except for changes made by modifying ``os.environ`` directly."
msgstr ""

msgid "If the platform supports the :func:`putenv` function, this mapping may be used to modify the environment as well as query the environment.  :func:`putenv` will be called automatically when the mapping is modified."
msgstr ""

msgid "On Unix, keys and values use :func:`sys.getfilesystemencoding` and ``'surrogateescape'`` error handler. Use :data:`environb` if you would like to use a different encoding."
msgstr ""

msgid "Calling :func:`putenv` directly does not change ``os.environ``, so it's better to modify ``os.environ``."
msgstr ""

msgid "On some platforms, including FreeBSD and Mac OS X, setting ``environ`` may cause memory leaks.  Refer to the system documentation for :cfunc:`putenv`."
msgstr ""

msgid "If :func:`putenv` is not provided, a modified copy of this mapping  may be passed to the appropriate process-creation functions to cause  child processes to use a modified environment."
msgstr ""

msgid "If the platform supports the :func:`unsetenv` function, you can delete items in this mapping to unset environment variables. :func:`unsetenv` will be called automatically when an item is deleted from ``os.environ``, and when one of the :meth:`pop` or :meth:`clear` methods is called."
msgstr ""

msgid "Bytes version of :data:`environ`: a mapping object representing the environment as byte strings. :data:`environ` and :data:`environb` are synchronized (modify :data:`environb` updates :data:`environ`, and vice versa)."
msgstr ""

msgid ":data:`environb` is only available if :data:`supports_bytes_environ` is True."
msgstr ""

msgid "These functions are described in :ref:`os-file-dir`."
msgstr ""

msgid "Encode *value* to bytes for use in the file system, environment variables or the command line. Use :func:`sys.getfilesystemencoding` and ``'surrogateescape'`` error handler for strings and return bytes unchanged. On Windows, use ``'strict'`` error handler for strings if the file system encoding is ``'mbcs'`` (which is the default encoding)."
msgstr ""

msgid "Returns the list of directories that will be searched for a named executable, similar to a shell, when launching a process. *env*, when specified, should be an environment variable dictionary to lookup the PATH in. By default, when *env* is None, :data:`environ` is used."
msgstr ""

msgid "Return the filename corresponding to the controlling terminal of the process."
msgstr ""

msgid "Availability: Unix."
msgstr ""

msgid "Return the effective group id of the current process.  This corresponds to the \"set id\" bit on the file being executed in the current process."
msgstr ""

msgid "Return the current process's effective user id."
msgstr ""

msgid "Return the real group id of the current process."
msgstr ""

msgid "Return list of supplemental group ids associated with the current process."
msgstr ""

msgid "Call the system initgroups() to initialize the group access list with all of the groups of which the specified username is a member, plus the specified group id."
msgstr ""

msgid "Return the name of the user logged in on the controlling terminal of the process.  For most purposes, it is more useful to use the environment variable :envvar:`LOGNAME` to find out who the user is, or ``pwd.getpwuid(os.getuid())[0]`` to get the login name of the currently effective user id."
msgstr ""

msgid "Return the process group id of the process with process id *pid*. If *pid* is 0, the process group id of the current process is returned."
msgstr ""

msgid "Return the id of the current process group."
msgstr ""

msgid "Return the current process id."
msgstr ""

msgid "Availability: Unix, Windows."
msgstr ""

msgid "Return the parent's process id."
msgstr ""

msgid "Return a tuple (ruid, euid, suid) denoting the current process's real, effective, and saved user ids."
msgstr ""

msgid "Return a tuple (rgid, egid, sgid) denoting the current process's real, effective, and saved user ids."
msgstr ""

msgid "Return the current process's user id."
msgstr ""

msgid "Return the value of the environment variable *key* if it exists, or *default* if it doesn't. *key*, *default* and the result are str."
msgstr ""

msgid "On Unix, keys and values are decoded with :func:`sys.getfilesystemencoding` and ``'surrogateescape'`` error handler. Use :func:`os.getenvb` if you would like to use a different encoding."
msgstr ""

msgid "Availability: most flavors of Unix, Windows."
msgstr ""

msgid "Return the value of the environment variable *key* if it exists, or *default* if it doesn't. *key*, *default* and the result are bytes."
msgstr ""

msgid "Availability: most flavors of Unix."
msgstr ""

msgid "Set the environment variable named *key* to the string *value*.  Such changes to the environment affect subprocesses started with :func:`os.system`, :func:`popen` or :func:`fork` and :func:`execv`."
msgstr ""

msgid "On some platforms, including FreeBSD and Mac OS X, setting ``environ`` may cause memory leaks. Refer to the system documentation for putenv."
msgstr ""

msgid "When :func:`putenv` is supported, assignments to items in ``os.environ`` are automatically translated into corresponding calls to :func:`putenv`; however, calls to :func:`putenv` don't update ``os.environ``, so it is actually preferable to assign to items of ``os.environ``."
msgstr ""

msgid "Set the current process's effective group id."
msgstr ""

msgid "Set the current process's effective user id."
msgstr ""

msgid "Set the current process' group id."
msgstr ""

msgid "Set the list of supplemental group ids associated with the current process to *groups*. *groups* must be a sequence, and each element must be an integer identifying a group. This operation is typically available only to the superuser."
msgstr ""

msgid "Call the system call :cfunc:`setpgrp` or :cfunc:`setpgrp(0, 0)` depending on which version is implemented (if any).  See the Unix manual for the semantics."
msgstr ""

msgid "Call the system call :cfunc:`setpgid` to set the process group id of the process with id *pid* to the process group with id *pgrp*.  See the Unix manual for the semantics."
msgstr ""

msgid "Set the current process's real and effective group ids."
msgstr ""

msgid "Set the current process's real, effective, and saved group ids."
msgstr ""

msgid "Set the current process's real, effective, and saved user ids."
msgstr ""

msgid "Availibility: Unix."
msgstr ""

msgid "Set the current process's real and effective user ids."
msgstr ""

msgid "Call the system call :cfunc:`getsid`.  See the Unix manual for the semantics."
msgstr ""

msgid "Call the system call :cfunc:`setsid`.  See the Unix manual for the semantics."
msgstr ""

msgid "Set the current process's user id."
msgstr ""

msgid "Return the error message corresponding to the error code in *code*. On platforms where :cfunc:`strerror` returns ``NULL`` when given an unknown error number, :exc:`ValueError` is raised."
msgstr ""

msgid "True if the native OS type of the environment is bytes (eg. False on Windows)."
msgstr ""

msgid "Set the current numeric umask and return the previous umask."
msgstr ""

msgid "Return a 5-tuple containing information identifying the current operating system.  The tuple contains 5 strings: ``(sysname, nodename, release, version, machine)``.  Some systems truncate the nodename to 8 characters or to the leading component; a better way to get the hostname is :func:`socket.gethostname`  or even ``socket.gethostbyaddr(socket.gethostname())``."
msgstr ""

msgid "Availability: recent flavors of Unix."
msgstr ""

msgid "Unset (delete) the environment variable named *key*. Such changes to the environment affect subprocesses started with :func:`os.system`, :func:`popen` or :func:`fork` and :func:`execv`."
msgstr ""

msgid "When :func:`unsetenv` is supported, deletion of items in ``os.environ`` is automatically translated into a corresponding call to :func:`unsetenv`; however, calls to :func:`unsetenv` don't update ``os.environ``, so it is actually preferable to delete items of ``os.environ``."
msgstr ""

msgid "File Object Creation"
msgstr ""

msgid "These functions create new file objects. (See also :func:`open`.)"
msgstr ""

msgid "Return an open file object connected to the file descriptor *fd*.  The *mode* and *bufsize* arguments have the same meaning as the corresponding arguments to the built-in :func:`open` function."
msgstr ""

msgid "When specified, the *mode* argument must start with one of the letters ``'r'``, ``'w'``, or ``'a'``, otherwise a :exc:`ValueError` is raised."
msgstr ""

msgid "On Unix, when the *mode* argument starts with ``'a'``, the *O_APPEND* flag is set on the file descriptor (which the :cfunc:`fdopen` implementation already does on most platforms)."
msgstr ""

msgid "File Descriptor Operations"
msgstr ""

msgid "These functions operate on I/O streams referenced using file descriptors."
msgstr ""

msgid "File descriptors are small integers corresponding to a file that has been opened by the current process.  For example, standard input is usually file descriptor 0, standard output is 1, and standard error is 2.  Further files opened by a process will then be assigned 3, 4, 5, and so forth.  The name \"file descriptor\" is slightly deceptive; on Unix platforms, sockets and pipes are also referenced by file descriptors."
msgstr ""

msgid "The :meth:`~file.fileno` method can be used to obtain the file descriptor associated with a file object when required.  Note that using the file descriptor directly will bypass the file object methods, ignoring aspects such as internal buffering of data."
msgstr ""

msgid "Close file descriptor *fd*."
msgstr ""

msgid "This function is intended for low-level I/O and must be applied to a file descriptor as returned by :func:`os.open` or :func:`pipe`.  To close a \"file object\" returned by the built-in function :func:`open` or by :func:`popen` or :func:`fdopen`, use its :meth:`~file.close` method."
msgstr ""

msgid "Close all file descriptors from *fd_low* (inclusive) to *fd_high* (exclusive), ignoring errors. Equivalent to::"
msgstr ""

msgid "for fd in range(fd_low, fd_high):     try:         os.close(fd)     except OSError:         pass"
msgstr ""

msgid "Return a string describing the encoding of the device associated with *fd* if it is connected to a terminal; else return :const:`None`."
msgstr ""

msgid "Return a duplicate of file descriptor *fd*."
msgstr ""

msgid "Duplicate file descriptor *fd* to *fd2*, closing the latter first if necessary."
msgstr ""

msgid "Change the mode of the file given by *fd* to the numeric *mode*.  See the docs for :func:`chmod` for possible values of *mode*."
msgstr ""

msgid "Change the owner and group id of the file given by *fd* to the numeric *uid* and *gid*.  To leave one of the ids unchanged, set it to -1."
msgstr ""

msgid "Force write of file with filedescriptor *fd* to disk. Does not force update of metadata."
msgstr ""

msgid "This function is not available on MacOS."
msgstr ""

msgid "Return system configuration information relevant to an open file. *name* specifies the configuration value to retrieve; it may be a string which is the name of a defined system value; these names are specified in a number of standards (POSIX.1, Unix 95, Unix 98, and others).  Some platforms define additional names as well.  The names known to the host operating system are given in the ``pathconf_names`` dictionary.  For configuration variables not included in that mapping, passing an integer for *name* is also accepted."
msgstr ""

msgid "If *name* is a string and is not known, :exc:`ValueError` is raised.  If a specific value for *name* is not supported by the host system, even if it is included in ``pathconf_names``, an :exc:`OSError` is raised with :const:`errno.EINVAL` for the error number."
msgstr ""

msgid "Return status for file descriptor *fd*, like :func:`stat`."
msgstr ""

msgid "Return information about the filesystem containing the file associated with file descriptor *fd*, like :func:`statvfs`."
msgstr ""

msgid "Force write of file with filedescriptor *fd* to disk.  On Unix, this calls the native :cfunc:`fsync` function; on Windows, the MS :cfunc:`_commit` function."
msgstr ""

msgid "If you're starting with a Python file object *f*, first do ``f.flush()``, and then do ``os.fsync(f.fileno())``, to ensure that all internal buffers associated with *f* are written to disk."
msgstr ""

msgid "Availability: Unix, and Windows."
msgstr ""

msgid "Truncate the file corresponding to file descriptor *fd*, so that it is at most *length* bytes in size."
msgstr ""

msgid "Return ``True`` if the file descriptor *fd* is open and connected to a tty(-like) device, else ``False``."
msgstr ""

msgid "Set the current position of file descriptor *fd* to position *pos*, modified by *how*: :const:`SEEK_SET` or ``0`` to set the position relative to the beginning of the file; :const:`SEEK_CUR` or ``1`` to set it relative to the current position; :const:`os.SEEK_END` or ``2`` to set it relative to the end of the file."
msgstr ""

msgid "Parameters to the :func:`lseek` function. Their values are 0, 1, and 2, respectively. Availability: Windows, Unix."
msgstr ""

msgid "Open the file *file* and set various flags according to *flags* and possibly its mode according to *mode*.  The default *mode* is ``0o777`` (octal), and the current umask value is first masked out.  Return the file descriptor for the newly opened file."
msgstr ""

msgid "For a description of the flag and mode values, see the C run-time documentation; flag constants (like :const:`O_RDONLY` and :const:`O_WRONLY`) are defined in this module too (see :ref:`open-constants`).  In particular, on Windows adding :const:`O_BINARY` is needed to open files in binary mode."
msgstr ""

msgid "This function is intended for low-level I/O.  For normal usage, use the built-in function :func:`open`, which returns a \"file object\" with :meth:`~file.read` and :meth:`~file.wprite` methods (and many more).  To wrap a file descriptor in a \"file object\", use :func:`fdopen`."
msgstr ""

msgid "Open a new pseudo-terminal pair. Return a pair of file descriptors ``(master, slave)`` for the pty and the tty, respectively. For a (slightly) more portable approach, use the :mod:`pty` module."
msgstr ""

msgid "Availability: some flavors of Unix."
msgstr ""

msgid "Create a pipe.  Return a pair of file descriptors ``(r, w)`` usable for reading and writing, respectively."
msgstr ""

msgid "Read at most *n* bytes from file descriptor *fd*. Return a bytestring containing the bytes read.  If the end of the file referred to by *fd* has been reached, an empty bytes object is returned."
msgstr ""

msgid "This function is intended for low-level I/O and must be applied to a file descriptor as returned by :func:`os.open` or :func:`pipe`.  To read a \"file object\" returned by the built-in function :func:`open` or by :func:`popen` or :func:`fdopen`, or :data:`sys.stdin`, use its :meth:`~file.read` or :meth:`~file.readline` methods."
msgstr ""

msgid "Return the process group associated with the terminal given by *fd* (an open file descriptor as returned by :func:`os.open`)."
msgstr ""

msgid "Set the process group associated with the terminal given by *fd* (an open file descriptor as returned by :func:`os.open`) to *pg*."
msgstr ""

msgid "Return a string which specifies the terminal device associated with file descriptor *fd*.  If *fd* is not associated with a terminal device, an exception is raised."
msgstr ""

msgid "Write the bytestring in *str* to file descriptor *fd*. Return the number of bytes actually written."
msgstr ""

msgid "This function is intended for low-level I/O and must be applied to a file descriptor as returned by :func:`os.open` or :func:`pipe`.  To write a \"file object\" returned by the built-in function :func:`open` or by :func:`popen` or :func:`fdopen`, or :data:`sys.stdout` or :data:`sys.stderr`, use its :meth:`~file.write` method."
msgstr ""

msgid "``open()`` flag constants"
msgstr ""

msgid "The following constants are options for the *flags* parameter to the :func:`~os.open` function.  They can be combined using the bitwise OR operator ``|``.  Some of them are not available on all platforms.  For descriptions of their availability and use, consult the :manpage:`open(2)` manual page on Unix or `the MSDN <http://msdn.microsoft.com/en-us/library/z0kc8e3z.aspx>`_ on Windows."
msgstr ""

msgid "These constants are available on Unix and Windows."
msgstr ""

msgid "These constants are only available on Unix."
msgstr ""

msgid "These constants are only available on Windows."
msgstr ""

msgid "These constants are GNU extensions and not present if they are not defined by the C library."
msgstr ""

msgid "Files and Directories"
msgstr ""

msgid "Use the real uid/gid to test for access to *path*.  Note that most operations will use the effective uid/gid, therefore this routine can be used in a suid/sgid environment to test if the invoking user has the specified access to *path*.  *mode* should be :const:`F_OK` to test the existence of *path*, or it can be the inclusive OR of one or more of :const:`R_OK`, :const:`W_OK`, and :const:`X_OK` to test permissions.  Return :const:`True` if access is allowed, :const:`False` if not. See the Unix man page :manpage:`access(2)` for more information."
msgstr ""

msgid "Using :func:`access` to check if a user is authorized to e.g. open a file before actually doing so using :func:`open` creates a security hole, because the user might exploit the short time interval between checking and opening the file to manipulate it."
msgstr ""

msgid "I/O operations may fail even when :func:`access` indicates that they would succeed, particularly for operations on network filesystems which may have permissions semantics beyond the usual POSIX permission-bit model."
msgstr ""

msgid "Value to pass as the *mode* parameter of :func:`access` to test the existence of *path*."
msgstr ""

msgid "Value to include in the *mode* parameter of :func:`access` to test the readability of *path*."
msgstr ""

msgid "Value to include in the *mode* parameter of :func:`access` to test the writability of *path*."
msgstr ""

msgid "Value to include in the *mode* parameter of :func:`access` to determine if *path* can be executed."
msgstr ""

msgid "Change the current working directory to *path*."
msgstr ""

msgid "Change the current working directory to the directory represented by the file descriptor *fd*.  The descriptor must refer to an opened directory, not an open file."
msgstr ""

msgid "Return a string representing the current working directory."
msgstr ""

msgid "Return a bytestring representing the current working directory."
msgstr ""

msgid "Set the flags of *path* to the numeric *flags*. *flags* may take a combination (bitwise OR) of the following values (as defined in the :mod:`stat` module):"
msgstr ""

msgid "``UF_NODUMP``"
msgstr ""

msgid "``UF_IMMUTABLE``"
msgstr ""

msgid "``UF_APPEND``"
msgstr ""

msgid "``UF_OPAQUE``"
msgstr ""

msgid "``UF_NOUNLINK``"
msgstr ""

msgid "``SF_ARCHIVED``"
msgstr ""

msgid "``SF_IMMUTABLE``"
msgstr ""

msgid "``SF_APPEND``"
msgstr ""

msgid "``SF_NOUNLINK``"
msgstr ""

msgid "``SF_SNAPSHOT``"
msgstr ""

msgid "Change the root directory of the current process to *path*. Availability: Unix."
msgstr ""

msgid "Change the mode of *path* to the numeric *mode*. *mode* may take one of the following values (as defined in the :mod:`stat` module) or bitwise ORed combinations of them:"
msgstr ""

msgid ":data:`stat.S_ISUID`"
msgstr ""

msgid ":data:`stat.S_ISGID`"
msgstr ""

msgid ":data:`stat.S_ENFMT`"
msgstr ""

msgid ":data:`stat.S_ISVTX`"
msgstr ""

msgid ":data:`stat.S_IREAD`"
msgstr ""

msgid ":data:`stat.S_IWRITE`"
msgstr ""

msgid ":data:`stat.S_IEXEC`"
msgstr ""

msgid ":data:`stat.S_IRWXU`"
msgstr ""

msgid ":data:`stat.S_IRUSR`"
msgstr ""

msgid ":data:`stat.S_IWUSR`"
msgstr ""

msgid ":data:`stat.S_IXUSR`"
msgstr ""

msgid ":data:`stat.S_IRWXG`"
msgstr ""

msgid ":data:`stat.S_IRGRP`"
msgstr ""

msgid ":data:`stat.S_IWGRP`"
msgstr ""

msgid ":data:`stat.S_IXGRP`"
msgstr ""

msgid ":data:`stat.S_IRWXO`"
msgstr ""

msgid ":data:`stat.S_IROTH`"
msgstr ""

msgid ":data:`stat.S_IWOTH`"
msgstr ""

msgid ":data:`stat.S_IXOTH`"
msgstr ""

msgid "Although Windows supports :func:`chmod`, you can only  set the file's read-only flag with it (via the ``stat.S_IWRITE``  and ``stat.S_IREAD`` constants or a corresponding integer value).  All other bits are ignored."
msgstr ""

msgid "Change the owner and group id of *path* to the numeric *uid* and *gid*. To leave one of the ids unchanged, set it to -1."
msgstr ""

msgid "Set the flags of *path* to the numeric *flags*, like :func:`chflags`, but do not follow symbolic links."
msgstr ""

msgid "Change the mode of *path* to the numeric *mode*. If path is a symlink, this affects the symlink rather than the target. See the docs for :func:`chmod` for possible values of *mode*."
msgstr ""

msgid "Change the owner and group id of *path* to the numeric *uid* and *gid*. This function will not follow symbolic links."
msgstr ""

msgid "Create a hard link pointing to *source* named *link_name*."
msgstr ""

msgid "Return a list containing the names of the entries in the directory given by *path*.  The list is in arbitrary order.  It does not include the special entries ``'.'`` and ``'..'`` even if they are present in the directory."
msgstr ""

msgid "This function can be called with a bytes or string argument, and returns filenames of the same datatype."
msgstr ""

msgid "Like :func:`stat`, but do not follow symbolic links.  This is an alias for :func:`stat` on platforms that do not support symbolic links, such as Windows."
msgstr ""

msgid "Create a FIFO (a named pipe) named *path* with numeric mode *mode*.  The default *mode* is ``0o666`` (octal).  The current umask value is first masked out from the mode."
msgstr ""

msgid "FIFOs are pipes that can be accessed like regular files.  FIFOs exist until they are deleted (for example with :func:`os.unlink`). Generally, FIFOs are used as rendezvous between \"client\" and \"server\" type processes: the server opens the FIFO for reading, and the client opens it for writing.  Note that :func:`mkfifo` doesn't open the FIFO --- it just creates the rendezvous point."
msgstr ""

msgid "Create a filesystem node (file, device special file or named pipe) named *filename*. *mode* specifies both the permissions to use and the type of node to be created, being combined (bitwise OR) with one of ``stat.S_IFREG``, ``stat.S_IFCHR``, ``stat.S_IFBLK``, and ``stat.S_IFIFO`` (those constants are available in :mod:`stat`).  For ``stat.S_IFCHR`` and ``stat.S_IFBLK``, *device* defines the newly created device special file (probably using :func:`os.makedev`), otherwise it is ignored."
msgstr ""

msgid "Extract the device major number from a raw device number (usually the :attr:`st_dev` or :attr:`st_rdev` field from :ctype:`stat`)."
msgstr ""

msgid "Extract the device minor number from a raw device number (usually the :attr:`st_dev` or :attr:`st_rdev` field from :ctype:`stat`)."
msgstr ""

msgid "Compose a raw device number from the major and minor device numbers."
msgstr ""

msgid "Create a directory named *path* with numeric mode *mode*. The default *mode* is ``0o777`` (octal).  On some systems, *mode* is ignored.  Where it is used, the current umask value is first masked out.  If the directory already exists, :exc:`OSError` is raised."
msgstr ""

msgid "It is also possible to create temporary directories; see the :mod:`tempfile` module's :func:`tempfile.mkdtemp` function."
msgstr ""

msgid "Recursive directory creation function.  Like :func:`mkdir`, but makes all intermediate-level directories needed to contain the leaf directory.  Throws an :exc:`error` exception if the leaf directory already exists or cannot be created.  The default *mode* is ``0o777`` (octal).  On some systems, *mode* is ignored. Where it is used, the current umask value is first masked out."
msgstr ""

msgid ":func:`makedirs` will become confused if the path elements to create include :data:`os.pardir`."
msgstr ""

msgid "This function handles UNC paths correctly."
msgstr ""

msgid "Return system configuration information relevant to a named file. *name* specifies the configuration value to retrieve; it may be a string which is the name of a defined system value; these names are specified in a number of standards (POSIX.1, Unix 95, Unix 98, and others).  Some platforms define additional names as well.  The names known to the host operating system are given in the ``pathconf_names`` dictionary.  For configuration variables not included in that mapping, passing an integer for *name* is also accepted."
msgstr ""

msgid "Dictionary mapping names accepted by :func:`pathconf` and :func:`fpathconf` to the integer values defined for those names by the host operating system.  This can be used to determine the set of names known to the system. Availability: Unix."
msgstr ""

msgid "Return a string representing the path to which the symbolic link points.  The result may be either an absolute or relative pathname; if it is relative, it may be converted to an absolute pathname using ``os.path.join(os.path.dirname(path), result)``."
msgstr ""

msgid "If the *path* is a string object, the result will also be a string object, and the call may raise an UnicodeDecodeError. If the *path* is a bytes object, the result will be a bytes object."
msgstr ""

msgid "Remove (delete) the file *path*.  If *path* is a directory, :exc:`OSError` is raised; see :func:`rmdir` below to remove a directory.  This is identical to the :func:`unlink` function documented below.  On Windows, attempting to remove a file that is in use causes an exception to be raised; on Unix, the directory entry is removed but the storage allocated to the file is not made available until the original file is no longer in use."
msgstr ""

msgid "Remove directories recursively.  Works like :func:`rmdir` except that, if the leaf directory is successfully removed, :func:`removedirs`  tries to successively remove every parent directory mentioned in  *path* until an error is raised (which is ignored, because it generally means that a parent directory is not empty). For example, ``os.removedirs('foo/bar/baz')`` will first remove the directory ``'foo/bar/baz'``, and then remove ``'foo/bar'`` and ``'foo'`` if they are empty. Raises :exc:`OSError` if the leaf directory could not be successfully removed."
msgstr ""

msgid "Rename the file or directory *src* to *dst*.  If *dst* is a directory, :exc:`OSError` will be raised.  On Unix, if *dst* exists and is a file, it will be replaced silently if the user has permission.  The operation may fail on some Unix flavors if *src* and *dst* are on different filesystems.  If successful, the renaming will be an atomic operation (this is a POSIX requirement).  On Windows, if *dst* already exists, :exc:`OSError` will be raised even if it is a file; there may be no way to implement an atomic rename when *dst* names an existing file."
msgstr ""

msgid "Recursive directory or file renaming function. Works like :func:`rename`, except creation of any intermediate directories needed to make the new pathname good is attempted first. After the rename, directories corresponding to rightmost path segments of the old name will be pruned away using :func:`removedirs`."
msgstr ""

msgid "This function can fail with the new directory structure made if you lack permissions needed to remove the leaf directory or file."
msgstr ""

msgid "Remove (delete) the directory *path*.  Only works when the directory is empty, otherwise, :exc:`OSError` is raised.  In order to remove whole directory trees, :func:`shutil.rmtree` can be used."
msgstr ""

msgid "Perform a :cfunc:`stat` system call on the given path.  The return value is an object whose attributes correspond to the members of the :ctype:`stat` structure, namely: :attr:`st_mode` (protection bits), :attr:`st_ino` (inode number), :attr:`st_dev` (device), :attr:`st_nlink` (number of hard links), :attr:`st_uid` (user id of owner), :attr:`st_gid` (group id of owner), :attr:`st_size` (size of file, in bytes), :attr:`st_atime` (time of most recent access), :attr:`st_mtime` (time of most recent content modification), :attr:`st_ctime` (platform dependent; time of most recent metadata change on Unix, or the time of creation on Windows)::"
msgstr ""

msgid ">>> import os >>> statinfo = os.stat('somefile.txt') >>> statinfo (33188, 422511, 769, 1, 1032, 100, 926, 1105022698,1105022732, 1105022732) >>> statinfo.st_size 926 >>>"
msgstr ""

msgid "On some Unix systems (such as Linux), the following attributes may also be available: :attr:`st_blocks` (number of blocks allocated for file), :attr:`st_blksize` (filesystem blocksize), :attr:`st_rdev` (type of device if an inode device). :attr:`st_flags` (user defined flags for file)."
msgstr ""

msgid "On other Unix systems (such as FreeBSD), the following attributes may be available (but may be only filled out if root tries to use them): :attr:`st_gen` (file generation number), :attr:`st_birthtime` (time of file creation)."
msgstr ""

msgid "On Mac OS systems, the following attributes may also be available: :attr:`st_rsize`, :attr:`st_creator`, :attr:`st_type`."
msgstr ""

msgid "For backward compatibility, the return value of :func:`stat` is also accessible as a tuple of at least 10 integers giving the most important (and portable) members of the :ctype:`stat` structure, in the order :attr:`st_mode`, :attr:`st_ino`, :attr:`st_dev`, :attr:`st_nlink`, :attr:`st_uid`, :attr:`st_gid`, :attr:`st_size`, :attr:`st_atime`, :attr:`st_mtime`, :attr:`st_ctime`. More items may be added at the end by some implementations. The standard module :mod:`stat` defines functions and constants that are useful for extracting information from a :ctype:`stat` structure. (On Windows, some items are filled with dummy values.)"
msgstr ""

msgid "The exact meaning and resolution of the :attr:`st_atime`, :attr:`st_mtime`, and :attr:`st_ctime` members depends on the operating system and the file system. For example, on Windows systems using the FAT or FAT32 file systems, :attr:`st_mtime` has 2-second resolution, and :attr:`st_atime` has only 1-day resolution.  See your operating system documentation for details."
msgstr ""

msgid "Determine whether :class:`stat_result` represents time stamps as float objects. If *newvalue* is ``True``, future calls to :func:`stat` return floats, if it is ``False``, future calls return ints. If *newvalue* is omitted, return the current setting."
msgstr ""

msgid "For compatibility with older Python versions, accessing :class:`stat_result` as a tuple always returns integers."
msgstr ""

msgid "Python now returns float values by default. Applications which do not work correctly with floating point time stamps can use this function to restore the old behaviour."
msgstr ""

msgid "The resolution of the timestamps (that is the smallest possible fraction) depends on the system. Some systems only support second resolution; on these systems, the fraction will always be zero."
msgstr ""

msgid "It is recommended that this setting is only changed at program startup time in the *__main__* module; libraries should never change this setting. If an application uses a library that works incorrectly if floating point time stamps are processed, this application should turn the feature off until the library has been corrected."
msgstr ""

msgid "Perform a :cfunc:`statvfs` system call on the given path.  The return value is an object whose attributes describe the filesystem on the given path, and correspond to the members of the :ctype:`statvfs` structure, namely: :attr:`f_bsize`, :attr:`f_frsize`, :attr:`f_blocks`, :attr:`f_bfree`, :attr:`f_bavail`, :attr:`f_files`, :attr:`f_ffree`, :attr:`f_favail`, :attr:`f_flag`, :attr:`f_namemax`."
msgstr ""

msgid "Create a symbolic link pointing to *source* named *link_name*."
msgstr ""

msgid "Remove (delete) the file *path*.  This is the same function as :func:`remove`; the :func:`unlink` name is its traditional Unix name."
msgstr ""

msgid "Set the access and modified times of the file specified by *path*. If *times* is ``None``, then the file's access and modified times are set to the current time. (The effect is similar to running the Unix program :program:`touch` on the path.)  Otherwise, *times* must be a 2-tuple of numbers, of the form ``(atime, mtime)`` which is used to set the access and modified times, respectively. Whether a directory can be given for *path* depends on whether the operating system implements directories as files (for example, Windows does not).  Note that the exact times you set here may not be returned by a subsequent :func:`stat` call, depending on the resolution with which your operating system records access and modification times; see :func:`stat`."
msgstr ""

msgid "Generate the file names in a directory tree by walking the tree either top-down or bottom-up. For each directory in the tree rooted at directory *top* (including *top* itself), it yields a 3-tuple ``(dirpath, dirnames, filenames)``."
msgstr ""

msgid "*dirpath* is a string, the path to the directory.  *dirnames* is a list of the names of the subdirectories in *dirpath* (excluding ``'.'`` and ``'..'``). *filenames* is a list of the names of the non-directory files in *dirpath*. Note that the names in the lists contain no path components.  To get a full path (which begins with *top*) to a file or directory in *dirpath*, do ``os.path.join(dirpath, name)``."
msgstr ""

msgid "If optional argument *topdown* is ``True`` or not specified, the triple for a directory is generated before the triples for any of its subdirectories (directories are generated top-down).  If *topdown* is ``False``, the triple for a directory is generated after the triples for all of its subdirectories (directories are generated bottom-up)."
msgstr ""

msgid "When *topdown* is ``True``, the caller can modify the *dirnames* list in-place (perhaps using :keyword:`del` or slice assignment), and :func:`walk` will only recurse into the subdirectories whose names remain in *dirnames*; this can be used to prune the search, impose a specific order of visiting, or even to inform :func:`walk` about directories the caller creates or renames before it resumes :func:`walk` again.  Modifying *dirnames* when *topdown* is ``False`` is ineffective, because in bottom-up mode the directories in *dirnames* are generated before *dirpath* itself is generated."
msgstr ""

msgid "By default errors from the :func:`listdir` call are ignored.  If optional argument *onerror* is specified, it should be a function; it will be called with one argument, an :exc:`OSError` instance.  It can report the error to continue with the walk, or raise the exception to abort the walk.  Note that the filename is available as the ``filename`` attribute of the exception object."
msgstr ""

msgid "By default, :func:`walk` will not walk down into symbolic links that resolve to directories. Set *followlinks* to ``True`` to visit directories pointed to by symlinks, on systems that support them."
msgstr ""

msgid "Be aware that setting *followlinks* to ``True`` can lead to infinite recursion if a link points to a parent directory of itself. :func:`walk` does not keep track of the directories it visited already."
msgstr ""

msgid "If you pass a relative pathname, don't change the current working directory between resumptions of :func:`walk`.  :func:`walk` never changes the current directory, and assumes that its caller doesn't either."
msgstr ""

msgid "This example displays the number of bytes taken by non-directory files in each directory under the starting directory, except that it doesn't look under any CVS subdirectory::"
msgstr ""

msgid "import os from os.path import join, getsize for root, dirs, files in os.walk('python/Lib/email'):     print(root, \"consumes\", end=\" \")     print(sum(getsize(join(root, name)) for name in files), end=\" \")     print(\"bytes in\", len(files), \"non-directory files\")     if 'CVS' in dirs:         dirs.remove('CVS')  # don't visit CVS directories"
msgstr ""

msgid "In the next example, walking the tree bottom-up is essential: :func:`rmdir` doesn't allow deleting a directory before the directory is empty::"
msgstr ""

msgid "# Delete everything reachable from the directory named in \"top\", # assuming there are no symbolic links. # CAUTION:  This is dangerous!  For example, if top == '/', it # could delete all your disk files. import os for root, dirs, files in os.walk(top, topdown=False):     for name in files:         os.remove(os.path.join(root, name))     for name in dirs:         os.rmdir(os.path.join(root, name))"
msgstr ""

msgid "Process Management"
msgstr ""

msgid "These functions may be used to create and manage processes."
msgstr ""

msgid "The various :func:`exec\\*` functions take a list of arguments for the new program loaded into the process.  In each case, the first of these arguments is passed to the new program as its own name rather than as an argument a user may have typed on a command line.  For the C programmer, this is the ``argv[0]`` passed to a program's :cfunc:`main`.  For example, ``os.execv('/bin/echo', ['foo', 'bar'])`` will only print ``bar`` on standard output; ``foo`` will seem to be ignored."
msgstr ""

msgid "Generate a :const:`SIGABRT` signal to the current process.  On Unix, the default behavior is to produce a core dump; on Windows, the process immediately returns an exit code of ``3``.  Be aware that programs which use :func:`signal.signal` to register a handler for :const:`SIGABRT` will behave differently."
msgstr ""

msgid "These functions all execute a new program, replacing the current process; they do not return.  On Unix, the new executable is loaded into the current process, and will have the same process id as the caller.  Errors will be reported as :exc:`OSError` exceptions."
msgstr ""

msgid "The current process is replaced immediately. Open file objects and descriptors are not flushed, so if there may be data buffered on these open files, you should flush them using :func:`sys.stdout.flush` or :func:`os.fsync` before calling an :func:`exec\\*` function."
msgstr ""

msgid "The \"l\" and \"v\" variants of the :func:`exec\\*` functions differ in how command-line arguments are passed.  The \"l\" variants are perhaps the easiest to work with if the number of parameters is fixed when the code is written; the individual parameters simply become additional parameters to the :func:`execl\\*` functions.  The \"v\" variants are good when the number of parameters is variable, with the arguments being passed in a list or tuple as the *args* parameter.  In either case, the arguments to the child process should start with the name of the command being run, but this is not enforced."
msgstr ""

msgid "The variants which include a \"p\" near the end (:func:`execlp`, :func:`execlpe`, :func:`execvp`, and :func:`execvpe`) will use the :envvar:`PATH` environment variable to locate the program *file*.  When the environment is being replaced (using one of the :func:`exec\\*e` variants, discussed in the next paragraph), the new environment is used as the source of the :envvar:`PATH` variable. The other variants, :func:`execl`, :func:`execle`, :func:`execv`, and :func:`execve`, will not use the :envvar:`PATH` variable to locate the executable; *path* must contain an appropriate absolute or relative path."
msgstr ""

msgid "For :func:`execle`, :func:`execlpe`, :func:`execve`, and :func:`execvpe` (note that these all end in \"e\"), the *env* parameter must be a mapping which is used to define the environment variables for the new process (these are used instead of the current process' environment); the functions :func:`execl`, :func:`execlp`, :func:`execv`, and :func:`execvp` all cause the new process to inherit the environment of the current process."
msgstr ""

msgid "Exit to the system with status *n*, without calling cleanup handlers, flushing stdio buffers, etc."
msgstr ""

msgid "The standard way to exit is ``sys.exit(n)``. :func:`_exit` should normally only be used in the child process after a :func:`fork`."
msgstr ""

msgid "The following exit codes are defined and can be used with :func:`_exit`, although they are not required.  These are typically used for system programs written in Python, such as a mail server's external command delivery program."
msgstr ""

msgid "Some of these may not be available on all Unix platforms, since there is some variation.  These constants are defined where they are defined by the underlying platform."
msgstr ""

msgid "Exit code that means no error occurred."
msgstr ""

msgid "Exit code that means the command was used incorrectly, such as when the wrong number of arguments are given."
msgstr ""

msgid "Exit code that means the input data was incorrect."
msgstr ""

msgid "Exit code that means an input file did not exist or was not readable."
msgstr ""

msgid "Exit code that means a specified user did not exist."
msgstr ""

msgid "Exit code that means a specified host did not exist."
msgstr ""

msgid "Exit code that means that a required service is unavailable."
msgstr ""

msgid "Exit code that means an internal software error was detected."
msgstr ""

msgid "Exit code that means an operating system error was detected, such as the inability to fork or create a pipe."
msgstr ""

msgid "Exit code that means some system file did not exist, could not be opened, or had some other kind of error."
msgstr ""

msgid "Exit code that means a user specified output file could not be created."
msgstr ""

msgid "Exit code that means that an error occurred while doing I/O on some file."
msgstr ""

msgid "Exit code that means a temporary failure occurred.  This indicates something that may not really be an error, such as a network connection that couldn't be made during a retryable operation."
msgstr ""

msgid "Exit code that means that a protocol exchange was illegal, invalid, or not understood."
msgstr ""

msgid "Exit code that means that there were insufficient permissions to perform the operation (but not intended for file system problems)."
msgstr ""

msgid "Exit code that means that some kind of configuration error occurred."
msgstr ""

msgid "Exit code that means something like \"an entry was not found\"."
msgstr ""

msgid "Fork a child process.  Return ``0`` in the child and the child's process id in the parent.  If an error occurs :exc:`OSError` is raised."
msgstr ""

msgid "Note that some platforms including FreeBSD <= 6.3, Cygwin and OS/2 EMX have known issues when using fork() from a thread."
msgstr ""

msgid "Fork a child process, using a new pseudo-terminal as the child's controlling terminal. Return a pair of ``(pid, fd)``, where *pid* is ``0`` in the child, the new child's process id in the parent, and *fd* is the file descriptor of the master end of the pseudo-terminal.  For a more portable approach, use the :mod:`pty` module.  If an error occurs :exc:`OSError` is raised."
msgstr ""

msgid "Send signal *sig* to the process *pid*.  Constants for the specific signals available on the host platform are defined in the :mod:`signal` module."
msgstr ""

msgid "Windows: The :data:`signal.CTRL_C_EVENT` and :data:`signal.CTRL_BREAK_EVENT` signals are special signals which can only be sent to console processes which share a common console window, e.g., some subprocesses. Any other value for *sig* will cause the process to be unconditionally killed by the TerminateProcess API, and the exit code will be set to *sig*. The Windows version of :func:`kill` additionally takes process handles to be killed."
msgstr ""

msgid "Send the signal *sig* to the process group *pgid*."
msgstr ""

msgid "Add *increment* to the process's \"niceness\".  Return the new niceness."
msgstr ""

msgid "Lock program segments into memory.  The value of *op* (defined in ``<sys/lock.h>``) determines which segments are locked."
msgstr ""

msgid "Run child processes, returning opened pipes for communications.  These functions are described in section :ref:`os-newstreams`."
msgstr ""

msgid "Execute the program *path* in a new process."
msgstr ""

msgid "(Note that the :mod:`subprocess` module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using these functions.  Check especially the :ref:`subprocess-replacements` section.)"
msgstr ""

msgid "If *mode* is :const:`P_NOWAIT`, this function returns the process id of the new process; if *mode* is :const:`P_WAIT`, returns the process's exit code if it exits normally, or ``-signal``, where *signal* is the signal that killed the process.  On Windows, the process id will actually be the process handle, so can be used with the :func:`waitpid` function."
msgstr ""

msgid "The \"l\" and \"v\" variants of the :func:`spawn\\*` functions differ in how command-line arguments are passed.  The \"l\" variants are perhaps the easiest to work with if the number of parameters is fixed when the code is written; the individual parameters simply become additional parameters to the :func:`spawnl\\*` functions.  The \"v\" variants are good when the number of parameters is variable, with the arguments being passed in a list or tuple as the *args* parameter.  In either case, the arguments to the child process must start with the name of the command being run."
msgstr ""

msgid "The variants which include a second \"p\" near the end (:func:`spawnlp`, :func:`spawnlpe`, :func:`spawnvp`, and :func:`spawnvpe`) will use the :envvar:`PATH` environment variable to locate the program *file*.  When the environment is being replaced (using one of the :func:`spawn\\*e` variants, discussed in the next paragraph), the new environment is used as the source of the :envvar:`PATH` variable.  The other variants, :func:`spawnl`, :func:`spawnle`, :func:`spawnv`, and :func:`spawnve`, will not use the :envvar:`PATH` variable to locate the executable; *path* must contain an appropriate absolute or relative path."
msgstr ""

msgid "For :func:`spawnle`, :func:`spawnlpe`, :func:`spawnve`, and :func:`spawnvpe` (note that these all end in \"e\"), the *env* parameter must be a mapping which is used to define the environment variables for the new process (they are used instead of the current process' environment); the functions :func:`spawnl`, :func:`spawnlp`, :func:`spawnv`, and :func:`spawnvp` all cause the new process to inherit the environment of the current process.  Note that keys and values in the *env* dictionary must be strings; invalid keys or values will cause the function to fail, with a return value of ``127``."
msgstr ""

msgid "As an example, the following calls to :func:`spawnlp` and :func:`spawnvpe` are equivalent::"
msgstr ""

msgid "import os os.spawnlp(os.P_WAIT, 'cp', 'cp', 'index.html', '/dev/null')  L = ['cp', 'index.html', '/dev/null'] os.spawnvpe(os.P_WAIT, 'cp', L, os.environ)"
msgstr ""

msgid "Availability: Unix, Windows.  :func:`spawnlp`, :func:`spawnlpe`, :func:`spawnvp` and :func:`spawnvpe` are not available on Windows."
msgstr ""

msgid "Possible values for the *mode* parameter to the :func:`spawn\\*` family of functions.  If either of these values is given, the :func:`spawn\\*` functions will return as soon as the new process has been created, with the process id as the return value."
msgstr ""

msgid "Possible value for the *mode* parameter to the :func:`spawn\\*` family of functions.  If this is given as *mode*, the :func:`spawn\\*` functions will not return until the new process has run to completion and will return the exit code of the process the run is successful, or ``-signal`` if a signal kills the process."
msgstr ""

msgid "Possible values for the *mode* parameter to the :func:`spawn\\*` family of functions.  These are less portable than those listed above. :const:`P_DETACH` is similar to :const:`P_NOWAIT`, but the new process is detached from the console of the calling process. If :const:`P_OVERLAY` is used, the current process will be replaced; the :func:`spawn\\*` function will not return."
msgstr ""

msgid "Availability: Windows."
msgstr ""

msgid "Start a file with its associated application."
msgstr ""

msgid "When *operation* is not specified or ``'open'``, this acts like double-clicking the file in Windows Explorer, or giving the file name as an argument to the :program:`start` command from the interactive command shell: the file is opened with whatever application (if any) its extension is associated."
msgstr ""

msgid "When another *operation* is given, it must be a \"command verb\" that specifies what should be done with the file. Common verbs documented by Microsoft are ``'print'`` and  ``'edit'`` (to be used on files) as well as ``'explore'`` and ``'find'`` (to be used on directories)."
msgstr ""

msgid ":func:`startfile` returns as soon as the associated application is launched. There is no option to wait for the application to close, and no way to retrieve the application's exit status.  The *path* parameter is relative to the current directory.  If you want to use an absolute path, make sure the first character is not a slash (``'/'``); the underlying Win32 :cfunc:`ShellExecute` function doesn't work if it is.  Use the :func:`os.path.normpath` function to ensure that the path is properly encoded for Win32."
msgstr ""

msgid "Execute the command (a string) in a subshell.  This is implemented by calling the Standard C function :cfunc:`system`, and has the same limitations. Changes to :data:`sys.stdin`, etc. are not reflected in the environment of the executed command."
msgstr ""

msgid "On Unix, the return value is the exit status of the process encoded in the format specified for :func:`wait`.  Note that POSIX does not specify the meaning of the return value of the C :cfunc:`system` function, so the return value of the Python function is system-dependent."
msgstr ""

msgid "On Windows, the return value is that returned by the system shell after running *command*, given by the Windows environment variable :envvar:`COMSPEC`: on :program:`command.com` systems (Windows 95, 98 and ME) this is always ``0``; on :program:`cmd.exe` systems (Windows NT, 2000 and XP) this is the exit status of the command run; on systems using a non-native shell, consult your shell documentation."
msgstr ""

msgid "The :mod:`subprocess` module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using this function.  Use the :mod:`subprocess` module.  Check especially the :ref:`subprocess-replacements` section."
msgstr ""

msgid "Return a 5-tuple of floating point numbers indicating accumulated (processor or other) times, in seconds.  The items are: user time, system time, children's user time, children's system time, and elapsed real time since a fixed point in the past, in that order.  See the Unix manual page :manpage:`times(2)` or the corresponding Windows Platform API documentation. On Windows, only the first two items are filled, the others are zero."
msgstr ""

msgid "Availability: Unix, Windows"
msgstr ""

msgid "Wait for completion of a child process, and return a tuple containing its pid and exit status indication: a 16-bit number, whose low byte is the signal number that killed the process, and whose high byte is the exit status (if the signal number is zero); the high bit of the low byte is set if a core file was produced."
msgstr ""

msgid "The details of this function differ on Unix and Windows."
msgstr ""

msgid "On Unix: Wait for completion of a child process given by process id *pid*, and return a tuple containing its process id and exit status indication (encoded as for :func:`wait`).  The semantics of the call are affected by the value of the integer *options*, which should be ``0`` for normal operation."
msgstr ""

msgid "If *pid* is greater than ``0``, :func:`waitpid` requests status information for that specific process.  If *pid* is ``0``, the request is for the status of any child in the process group of the current process.  If *pid* is ``-1``, the request pertains to any child of the current process.  If *pid* is less than ``-1``, status is requested for any process in the process group ``-pid`` (the absolute value of *pid*)."
msgstr ""

msgid "An :exc:`OSError` is raised with the value of errno when the syscall returns -1."
msgstr ""

msgid "On Windows: Wait for completion of a process given by process handle *pid*, and return a tuple containing *pid*, and its exit status shifted left by 8 bits (shifting makes cross-platform use of the function easier). A *pid* less than or equal to ``0`` has no special meaning on Windows, and raises an exception. The value of integer *options* has no effect. *pid* can refer to any process whose id is known, not necessarily a child process. The :func:`spawn` functions called with :const:`P_NOWAIT` return suitable process handles."
msgstr ""

msgid "Similar to :func:`waitpid`, except no process id argument is given and a 3-element tuple containing the child's process id, exit status indication, and resource usage information is returned.  Refer to :mod:`resource`.\\ :func:`getrusage` for details on resource usage information.  The option argument is the same as that provided to :func:`waitpid` and :func:`wait4`."
msgstr ""

msgid "Similar to :func:`waitpid`, except a 3-element tuple, containing the child's process id, exit status indication, and resource usage information is returned. Refer to :mod:`resource`.\\ :func:`getrusage` for details on resource usage information.  The arguments to :func:`wait4` are the same as those provided to :func:`waitpid`."
msgstr ""

msgid "The option for :func:`waitpid` to return immediately if no child process status is available immediately. The function returns ``(0, 0)`` in this case."
msgstr ""

msgid "This option causes child processes to be reported if they have been continued from a job control stop since their status was last reported."
msgstr ""

msgid "Availability: Some Unix systems."
msgstr ""

msgid "This option causes child processes to be reported if they have been stopped but their current state has not been reported since they were stopped."
msgstr ""

msgid "The following functions take a process status code as returned by :func:`system`, :func:`wait`, or :func:`waitpid` as a parameter.  They may be used to determine the disposition of a process."
msgstr ""

msgid "Return ``True`` if a core dump was generated for the process, otherwise return ``False``."
msgstr ""

msgid "Return ``True`` if the process has been continued from a job control stop, otherwise return ``False``."
msgstr ""

msgid "Return ``True`` if the process has been stopped, otherwise return ``False``."
msgstr ""

msgid "Return ``True`` if the process exited due to a signal, otherwise return ``False``."
msgstr ""

msgid "Return ``True`` if the process exited using the :manpage:`exit(2)` system call, otherwise return ``False``."
msgstr ""

msgid "If ``WIFEXITED(status)`` is true, return the integer parameter to the :manpage:`exit(2)` system call.  Otherwise, the return value is meaningless."
msgstr ""

msgid "Return the signal which caused the process to stop."
msgstr ""

msgid "Return the signal which caused the process to exit."
msgstr ""

msgid "Miscellaneous System Information"
msgstr ""

msgid "Return string-valued system configuration values. *name* specifies the configuration value to retrieve; it may be a string which is the name of a defined system value; these names are specified in a number of standards (POSIX, Unix 95, Unix 98, and others).  Some platforms define additional names as well. The names known to the host operating system are given as the keys of the ``confstr_names`` dictionary.  For configuration variables not included in that mapping, passing an integer for *name* is also accepted."
msgstr ""

msgid "If the configuration value specified by *name* isn't defined, ``None`` is returned."
msgstr ""

msgid "If *name* is a string and is not known, :exc:`ValueError` is raised.  If a specific value for *name* is not supported by the host system, even if it is included in ``confstr_names``, an :exc:`OSError` is raised with :const:`errno.EINVAL` for the error number."
msgstr ""

msgid "Availability: Unix"
msgstr ""

msgid "Dictionary mapping names accepted by :func:`confstr` to the integer values defined for those names by the host operating system. This can be used to determine the set of names known to the system."
msgstr ""

msgid "Return the number of processes in the system run queue averaged over the last 1, 5, and 15 minutes or raises :exc:`OSError` if the load average was unobtainable."
msgstr ""

msgid "Return integer-valued system configuration values. If the configuration value specified by *name* isn't defined, ``-1`` is returned.  The comments regarding the *name* parameter for :func:`confstr` apply here as well; the dictionary that provides information on the known names is given by ``sysconf_names``."
msgstr ""

msgid "Dictionary mapping names accepted by :func:`sysconf` to the integer values defined for those names by the host operating system. This can be used to determine the set of names known to the system."
msgstr ""

msgid "The following data values are used to support path manipulation operations.  These are defined for all platforms."
msgstr ""

msgid "Higher-level operations on pathnames are defined in the :mod:`os.path` module."
msgstr ""

msgid "The constant string used by the operating system to refer to the current directory. This is ``'.'`` for Windows and POSIX. Also available via :mod:`os.path`."
msgstr ""

msgid "The constant string used by the operating system to refer to the parent directory. This is ``'..'`` for Windows and POSIX. Also available via :mod:`os.path`."
msgstr ""

msgid "The character used by the operating system to separate pathname components. This is ``'/'`` for POSIX and ``'\\\\'`` for Windows.  Note that knowing this is not sufficient to be able to parse or concatenate pathnames --- use :func:`os.path.split` and :func:`os.path.join` --- but it is occasionally useful. Also available via :mod:`os.path`."
msgstr ""

msgid "An alternative character used by the operating system to separate pathname components, or ``None`` if only one separator character exists.  This is set to ``'/'`` on Windows systems where ``sep`` is a backslash. Also available via :mod:`os.path`."
msgstr ""

msgid "The character which separates the base filename from the extension; for example, the ``'.'`` in :file:`os.py`. Also available via :mod:`os.path`."
msgstr ""

msgid "The character conventionally used by the operating system to separate search path components (as in :envvar:`PATH`), such as ``':'`` for POSIX or ``';'`` for Windows. Also available via :mod:`os.path`."
msgstr ""

msgid "The default search path used by :func:`exec\\*p\\*` and :func:`spawn\\*p\\*` if the environment doesn't have a ``'PATH'`` key. Also available via :mod:`os.path`."
msgstr ""

msgid "The string used to separate (or, rather, terminate) lines on the current platform.  This may be a single character, such as ``'\\n'`` for POSIX, or multiple characters, for example, ``'\\r\\n'`` for Windows. Do not use *os.linesep* as a line terminator when writing files opened in text mode (the default); use a single ``'\\n'`` instead, on all platforms."
msgstr ""

msgid "The file path of the null device. For example: ``'/dev/null'`` for POSIX, ``'nul'`` for Windows.  Also available via :mod:`os.path`."
msgstr ""

msgid "Miscellaneous Functions"
msgstr ""

msgid "Return a string of *n* random bytes suitable for cryptographic use."
msgstr ""

msgid "This function returns random bytes from an OS-specific randomness source.  The returned data should be unpredictable enough for cryptographic applications, though its exact quality depends on the OS implementation.  On a UNIX-like system this will query /dev/urandom, and on Windows it will use CryptGenRandom. If a randomness source is not found, :exc:`NotImplementedError` will be raised."
msgstr ""

msgid ":mod:`os.path` --- Common pathname manipulations"
msgstr ""

msgid "This module implements some useful functions on pathnames. To read or write files see :func:`open`, and for accessing the filesystem see the :mod:`os` module. The path parameters can be passed as either strings, or bytes. Applications are encouraged to represent file names as (Unicode) character strings. Unfortunately, some file names may not be representable as strings on Unix, so applications that need to support arbitrary file names on Unix should use bytes objects to represent path names. Vice versa, using bytes objects cannot represent all file names on Windows (in the standard ``mbcs`` encoding), hence Windows applications should use string objects to access all files."
msgstr ""

msgid "All of these functions accept either only bytes or only string objects as their parameters.  The result is an object of the same type, if a path or file name is returned."
msgstr ""

msgid "Since different operating systems have different path name conventions, there are several versions of this module in the standard library.  The :mod:`os.path` module is always the path module suitable for the operating system Python is running on, and therefore usable for local paths.  However, you can also import and use the individual modules if you want to manipulate a path that is *always* in one of the different formats.  They all have the same interface:"
msgstr ""

msgid ":mod:`posixpath` for UNIX-style paths"
msgstr ""

msgid ":mod:`ntpath` for Windows paths"
msgstr ""

msgid ":mod:`macpath` for old-style MacOS paths"
msgstr ""

msgid ":mod:`os2emxpath` for OS/2 EMX paths"
msgstr ""

msgid "Return a normalized absolutized version of the pathname *path*. On most platforms, this is equivalent to ``normpath(join(os.getcwd(), path))``."
msgstr ""

msgid "Return the base name of pathname *path*.  This is the second half of the pair returned by ``split(path)``.  Note that the result of this function is different from the Unix :program:`basename` program; where :program:`basename` for ``'/foo/bar/'`` returns ``'bar'``, the :func:`basename` function returns an empty string (``''``)."
msgstr ""

msgid "Return the longest path prefix (taken character-by-character) that is a prefix of all paths in  *list*.  If *list* is empty, return the empty string (``''``). Note that this may return invalid paths because it works a character at a time."
msgstr ""

msgid "Return the directory name of pathname *path*.  This is the first half of the pair returned by ``split(path)``."
msgstr ""

msgid "Return ``True`` if *path* refers to an existing path.  Returns ``False`` for broken symbolic links. On some platforms, this function may return ``False`` if permission is not granted to execute :func:`os.stat` on the requested file, even if the *path* physically exists."
msgstr ""

msgid "Return ``True`` if *path* refers to an existing path. Returns ``True`` for broken symbolic links.   Equivalent to :func:`exists` on platforms lacking :func:`os.lstat`."
msgstr ""

msgid "On Unix and Windows, return the argument with an initial component of ``~`` or ``~user`` replaced by that *user*'s home directory."
msgstr ""

msgid "On Unix, an initial ``~`` is replaced by the environment variable :envvar:`HOME` if it is set; otherwise the current user's home directory is looked up in the password directory through the built-in module :mod:`pwd`. An initial ``~user`` is looked up directly in the password directory."
msgstr ""

msgid "On Windows, :envvar:`HOME` and :envvar:`USERPROFILE` will be used if set, otherwise a combination of :envvar:`HOMEPATH` and :envvar:`HOMEDRIVE` will be used.  An initial ``~user`` is handled by stripping the last directory component from the created user path derived above."
msgstr ""

msgid "If the expansion fails or if the path does not begin with a tilde, the path is returned unchanged."
msgstr ""

msgid "Return the argument with environment variables expanded.  Substrings of the form ``$name`` or ``${name}`` are replaced by the value of environment variable *name*.  Malformed variable names and references to non-existing variables are left unchanged."
msgstr ""

msgid "On Windows, ``%name%`` expansions are supported in addition to ``$name`` and ``${name}``."
msgstr ""

msgid "Return the time of last access of *path*.  The return value is a number giving the number of seconds since the epoch (see the  :mod:`time` module).  Raise :exc:`os.error` if the file does not exist or is inaccessible."
msgstr ""

msgid "If :func:`os.stat_float_times` returns True, the result is a floating point number."
msgstr ""

msgid "Return the time of last modification of *path*.  The return value is a number giving the number of seconds since the epoch (see the  :mod:`time` module). Raise :exc:`os.error` if the file does not exist or is inaccessible."
msgstr ""

msgid "Return the system's ctime which, on some systems (like Unix) is the time of the last change, and, on others (like Windows), is the creation time for *path*. The return value is a number giving the number of seconds since the epoch (see the  :mod:`time` module).  Raise :exc:`os.error` if the file does not exist or is inaccessible."
msgstr ""

msgid "Return the size, in bytes, of *path*.  Raise :exc:`os.error` if the file does not exist or is inaccessible."
msgstr ""

msgid "Return ``True`` if *path* is an absolute pathname.  On Unix, that means it begins with a slash, on Windows that it begins with a (back)slash after chopping off a potential drive letter."
msgstr ""

msgid "Return ``True`` if *path* is an existing regular file.  This follows symbolic links, so both :func:`islink` and :func:`isfile` can be true for the same path."
msgstr ""

msgid "Return ``True`` if *path* is an existing directory.  This follows symbolic links, so both :func:`islink` and :func:`isdir` can be true for the same path."
msgstr ""

msgid "Return ``True`` if *path* refers to a directory entry that is a symbolic link. Always ``False`` if symbolic links are not supported."
msgstr ""

msgid "Return ``True`` if pathname *path* is a :dfn:`mount point`: a point in a file system where a different file system has been mounted.  The function checks whether *path*'s parent, :file:`path/..`, is on a different device than *path*, or whether :file:`path/..` and *path* point to the same i-node on the same device --- this should detect mount points for all Unix and POSIX variants."
msgstr ""

msgid "Join one or more path components intelligently.  If any component is an absolute path, all previous components (on Windows, including the previous drive letter, if there was one) are thrown away, and joining continues.  The return value is the concatenation of *path1*, and optionally *path2*, etc., with exactly one directory separator (``os.sep``) inserted between components, unless *path2* is empty.  Note that on Windows, since there is a current directory for each drive, ``os.path.join(\"c:\", \"foo\")`` represents a path relative to the current directory on drive :file:`C:` (:file:`c:foo`), not :file:`c:\\\\foo`."
msgstr ""

msgid "Normalize the case of a pathname.  On Unix and Mac OS X, this returns the path unchanged; on case-insensitive filesystems, it converts the path to lowercase.  On Windows, it also converts forward slashes to backward slashes. Raise a TypeError if the type of *path* is not ``str`` or ``bytes``."
msgstr ""

msgid "Normalize a pathname.  This collapses redundant separators and up-level references so that ``A//B``, ``A/./B`` and ``A/foo/../B`` all become ``A/B``. It does not normalize the case (use :func:`normcase` for that).  On Windows, it converts forward slashes to backward slashes. It should be understood that this may change the meaning of the path if it contains symbolic links!"
msgstr ""

msgid "Return the canonical path of the specified filename, eliminating any symbolic links encountered in the path (if they are supported by the operating system)."
msgstr ""

msgid "Return a relative filepath to *path* either from the current directory or from an optional *start* point."
msgstr ""

msgid "*start* defaults to :attr:`os.curdir`."
msgstr ""

msgid "Availability:  Windows, Unix."
msgstr ""

msgid "Return ``True`` if both pathname arguments refer to the same file or directory (as indicated by device number and i-node number). Raise an exception if a :func:`os.stat` call on either pathname fails."
msgstr ""

msgid "Return ``True`` if the file descriptors *fp1* and *fp2* refer to the same file."
msgstr ""

msgid "Return ``True`` if the stat tuples *stat1* and *stat2* refer to the same file. These structures may have been returned by :func:`fstat`, :func:`lstat`, or :func:`stat`.  This function implements the underlying comparison used by :func:`samefile` and :func:`sameopenfile`."
msgstr ""

msgid "Split the pathname *path* into a pair, ``(head, tail)`` where *tail* is the last pathname component and *head* is everything leading up to that.  The *tail* part will never contain a slash; if *path* ends in a slash, *tail* will be empty.  If there is no slash in *path*, *head* will be empty.  If *path* is empty, both *head* and *tail* are empty.  Trailing slashes are stripped from *head* unless it is the root (one or more slashes only).  In nearly all cases, ``join(head, tail)`` equals *path* (the only exception being when there were multiple slashes separating *head* from *tail*)."
msgstr ""

msgid "Split the pathname *path* into a pair ``(drive, tail)`` where *drive* is either a mount point or the empty string.  On systems which do not use drive specifications, *drive* will always be the empty string.  In all cases, ``drive + tail`` will be the same as *path*."
msgstr ""

msgid "On Windows, splits a pathname into drive/UNC sharepoint and relative path."
msgstr ""

msgid "If the path contains a drive letter, drive will contain everything up to and including the colon. e.g. ``splitdrive(\"c:/dir\")`` returns ``(\"c:\", \"/dir\")``"
msgstr ""

msgid "If the path contains a UNC path, drive will contain the host name and share, up to but not including the fourth separator. e.g. ``splitdrive(\"//host/computer/dir\")`` returns ``(\"//host/computer\", \"/dir\")``"
msgstr ""

msgid "Split the pathname *path* into a pair ``(root, ext)``  such that ``root + ext == path``, and *ext* is empty or begins with a period and contains at most one period. Leading periods on the basename are  ignored; ``splitext('.cshrc')`` returns  ``('.cshrc', '')``."
msgstr ""

msgid "Split the pathname *path* into a pair ``(unc, rest)`` so that *unc* is the UNC mount point (such as ``r'\\\\host\\mount'``), if present, and *rest* the rest of the path (such as  ``r'\\path\\file.ext'``).  For paths containing drive letters, *unc* will always be the empty string."
msgstr ""

msgid "Availability:  Windows."
msgstr ""

msgid "True if arbitrary Unicode strings can be used as file names (within limitations imposed by the file system), and if :func:`os.listdir` returns strings that contain characters that cannot be represented by ASCII."
msgstr ""

msgid ":mod:`ossaudiodev` --- Access to OSS-compatible audio devices"
msgstr ""

msgid "This module allows you to access the OSS (Open Sound System) audio interface. OSS is available for a wide range of open-source and commercial Unices, and is the standard audio interface for Linux and recent versions of FreeBSD."
msgstr ""

msgid "the official documentation for the OSS C API"
msgstr ""

msgid "The module defines a large number of constants supplied by the OSS device driver; see ``<sys/soundcard.h>`` on either Linux or FreeBSD for a listing ."
msgstr ""

msgid ":mod:`ossaudiodev` defines the following variables and functions:"
msgstr ""

msgid "This exception is raised on certain errors.  The argument is a string describing what went wrong."
msgstr ""

msgid "(If :mod:`ossaudiodev` receives an error from a system call such as :cfunc:`open`, :cfunc:`write`, or :cfunc:`ioctl`, it raises :exc:`IOError`. Errors detected directly by :mod:`ossaudiodev` result in :exc:`OSSAudioError`.)"
msgstr ""

msgid "(For backwards compatibility, the exception class is also available as ``ossaudiodev.error``.)"
msgstr ""

msgid "Open an audio device and return an OSS audio device object.  This object supports many file-like methods, such as :meth:`read`, :meth:`write`, and :meth:`fileno` (although there are subtle differences between conventional Unix read/write semantics and those of OSS audio devices).  It also supports a number of audio-specific methods; see below for the complete list of methods."
msgstr ""

msgid "*device* is the audio device filename to use.  If it is not specified, this module first looks in the environment variable :envvar:`AUDIODEV` for a device to use.  If not found, it falls back to :file:`/dev/dsp`."
msgstr ""

msgid "*mode* is one of ``'r'`` for read-only (record) access, ``'w'`` for write-only (playback) access and ``'rw'`` for both. Since many sound cards only allow one process to have the recorder or player open at a time, it is a good idea to open the device only for the activity needed.  Further, some sound cards are half-duplex: they can be opened for reading or writing, but not both at once."
msgstr ""

msgid "Note the unusual calling syntax: the *first* argument is optional, and the second is required.  This is a historical artifact for compatibility with the older :mod:`linuxaudiodev` module which :mod:`ossaudiodev` supersedes."
msgstr ""

msgid "Open a mixer device and return an OSS mixer device object.   *device* is the mixer device filename to use.  If it is not specified, this module first looks in the environment variable :envvar:`MIXERDEV` for a device to use.  If not found, it falls back to :file:`/dev/mixer`."
msgstr ""

msgid "Audio Device Objects"
msgstr ""

msgid "Before you can write to or read from an audio device, you must call three methods in the correct order:"
msgstr ""

msgid ":meth:`setfmt` to set the output format"
msgstr ""

msgid ":meth:`channels` to set the number of channels"
msgstr ""

msgid ":meth:`speed` to set the sample rate"
msgstr ""

msgid "Alternately, you can use the :meth:`setparameters` method to set all three audio parameters at once.  This is more convenient, but may not be as flexible in all cases."
msgstr ""

msgid "The audio device objects returned by :func:`.open` define the following methods and (read-only) attributes:"
msgstr ""

msgid "Explicitly close the audio device.  When you are done writing to or reading from an audio device, you should explicitly close it.  A closed device cannot be used again."
msgstr ""

msgid "Return the file descriptor associated with the device."
msgstr ""

msgid "Read *size* bytes from the audio input and return them as a Python string. Unlike most Unix device drivers, OSS audio devices in blocking mode (the default) will block :func:`read` until the entire requested amount of data is available."
msgstr ""

msgid "Write the Python string *data* to the audio device and return the number of bytes written.  If the audio device is in blocking mode (the default), the entire string is always written (again, this is different from usual Unix device semantics).  If the device is in non-blocking mode, some data may not be written ---see :meth:`writeall`."
msgstr ""

msgid "Write the entire Python string *data* to the audio device: waits until the audio device is able to accept data, writes as much data as it will accept, and repeats until *data* has been completely written. If the device is in blocking mode (the default), this has the same effect as :meth:`write`; :meth:`writeall` is only useful in non-blocking mode.  Has no return value, since the amount of data written is always equal to the amount of data supplied."
msgstr ""

msgid "The following methods each map to exactly one :func:`ioctl` system call.  The correspondence is obvious: for example, :meth:`setfmt` corresponds to the ``SNDCTL_DSP_SETFMT`` ioctl, and :meth:`sync` to ``SNDCTL_DSP_SYNC`` (this can be useful when consulting the OSS documentation).  If the underlying :func:`ioctl` fails, they all raise :exc:`IOError`."
msgstr ""

msgid "Put the device into non-blocking mode.  Once in non-blocking mode, there is no way to return it to blocking mode."
msgstr ""

msgid "Return a bitmask of the audio output formats supported by the soundcard.  Some of the formats supported by OSS are:"
msgstr ""

msgid ":const:`AFMT_MU_LAW`"
msgstr ""

msgid "a logarithmic encoding (used by Sun ``.au`` files and :file:`/dev/audio`)"
msgstr ""

msgid ":const:`AFMT_A_LAW`"
msgstr ""

msgid "a logarithmic encoding"
msgstr ""

msgid ":const:`AFMT_IMA_ADPCM`"
msgstr ""

msgid "a 4:1 compressed format defined by the Interactive Multimedia Association"
msgstr ""

msgid ":const:`AFMT_U8`"
msgstr ""

msgid "Unsigned, 8-bit audio"
msgstr ""

msgid ":const:`AFMT_S16_LE`"
msgstr ""

msgid "Signed, 16-bit audio, little-endian byte order (as used by Intel processors)"
msgstr ""

msgid ":const:`AFMT_S16_BE`"
msgstr ""

msgid "Signed, 16-bit audio, big-endian byte order (as used by 68k, PowerPC, Sparc)"
msgstr ""

msgid ":const:`AFMT_S8`"
msgstr ""

msgid "Signed, 8 bit audio"
msgstr ""

msgid ":const:`AFMT_U16_LE`"
msgstr ""

msgid "Unsigned, 16-bit little-endian audio"
msgstr ""

msgid ":const:`AFMT_U16_BE`"
msgstr ""

msgid "Unsigned, 16-bit big-endian audio"
msgstr ""

msgid "Consult the OSS documentation for a full list of audio formats, and note that most devices support only a subset of these formats.  Some older devices only support :const:`AFMT_U8`; the most common format used today is :const:`AFMT_S16_LE`."
msgstr ""

msgid "Try to set the current audio format to *format*---see :meth:`getfmts` for a list.  Returns the audio format that the device was set to, which may not be the requested format.  May also be used to return the current audio format---do this by passing an \"audio format\" of :const:`AFMT_QUERY`."
msgstr ""

msgid "Set the number of output channels to *nchannels*.  A value of 1 indicates monophonic sound, 2 stereophonic.  Some devices may have more than 2 channels, and some high-end devices may not support mono. Returns the number of channels the device was set to."
msgstr ""

msgid "Try to set the audio sampling rate to *samplerate* samples per second.  Returns the rate actually set.  Most sound devices don't support arbitrary sampling rates.  Common rates are:"
msgstr ""

msgid "Rate"
msgstr ""

msgid "8000"
msgstr ""

msgid "default rate for :file:`/dev/audio`"
msgstr ""

msgid "11025"
msgstr ""

msgid "speech recording"
msgstr ""

msgid "22050"
msgstr ""

msgid "44100"
msgstr ""

msgid "CD quality audio (at 16 bits/sample and 2 channels)"
msgstr ""

msgid "96000"
msgstr ""

msgid "DVD quality audio (at 24 bits/sample)"
msgstr ""

msgid "Wait until the sound device has played every byte in its buffer.  (This happens implicitly when the device is closed.)  The OSS documentation recommends closing and re-opening the device rather than using :meth:`sync`."
msgstr ""

msgid "Immediately stop playing or recording and return the device to a state where it can accept commands.  The OSS documentation recommends closing and re-opening the device after calling :meth:`reset`."
msgstr ""

msgid "Tell the driver that there is likely to be a pause in the output, making it possible for the device to handle the pause more intelligently.  You might use this after playing a spot sound effect, before waiting for user input, or before doing disk I/O."
msgstr ""

msgid "The following convenience methods combine several ioctls, or one ioctl and some simple calculations."
msgstr ""

msgid "Set the key audio sampling parameters---sample format, number of channels, and sampling rate---in one method call.  *format*,  *nchannels*, and *samplerate* should be as specified in the :meth:`setfmt`, :meth:`channels`, and :meth:`speed`  methods.  If *strict* is true, :meth:`setparameters` checks to see if each parameter was actually set to the requested value, and raises :exc:`OSSAudioError` if not.  Returns a tuple (*format*, *nchannels*, *samplerate*) indicating the parameter values that were actually set by the device driver (i.e., the same as the return values of :meth:`setfmt`, :meth:`channels`, and :meth:`speed`)."
msgstr ""

msgid "For example,  ::"
msgstr ""

msgid "(fmt, channels, rate) = dsp.setparameters(fmt, channels, rate)"
msgstr ""

msgid "is equivalent to  ::"
msgstr ""

msgid "fmt = dsp.setfmt(fmt) channels = dsp.channels(channels) rate = dsp.rate(channels)"
msgstr ""

msgid "Returns the size of the hardware buffer, in samples."
msgstr ""

msgid "Returns the number of samples that are in the hardware buffer yet to be played."
msgstr ""

msgid "Returns the number of samples that could be queued into the hardware buffer to be played without blocking."
msgstr ""

msgid "Audio device objects also support several read-only attributes:"
msgstr ""

msgid "Boolean indicating whether the device has been closed."
msgstr ""

msgid "String containing the name of the device file."
msgstr ""

msgid "The I/O mode for the file, either ``\"r\"``, ``\"rw\"``, or ``\"w\"``."
msgstr ""

msgid "Mixer Device Objects"
msgstr ""

msgid "The mixer object provides two file-like methods:"
msgstr ""

msgid "This method closes the open mixer device file.  Any further attempts to use the mixer after this file is closed will raise an :exc:`IOError`."
msgstr ""

msgid "Returns the file handle number of the open mixer device file."
msgstr ""

msgid "The remaining methods are specific to audio mixing:"
msgstr ""

msgid "This method returns a bitmask specifying the available mixer controls (\"Control\" being a specific mixable \"channel\", such as :const:`SOUND_MIXER_PCM` or :const:`SOUND_MIXER_SYNTH`).  This bitmask indicates a subset of all available mixer controls---the :const:`SOUND_MIXER_\\*` constants defined at module level. To determine if, for example, the current mixer object supports a PCM mixer, use the following Python code::"
msgstr ""

msgid "mixer=ossaudiodev.openmixer() if mixer.controls() & (1 << ossaudiodev.SOUND_MIXER_PCM):     # PCM is supported     ... code ..."
msgstr ""

msgid "For most purposes, the :const:`SOUND_MIXER_VOLUME` (master volume) and :const:`SOUND_MIXER_PCM` controls should suffice---but code that uses the mixer should be flexible when it comes to choosing mixer controls.  On the Gravis Ultrasound, for example, :const:`SOUND_MIXER_VOLUME` does not exist."
msgstr ""

msgid "Returns a bitmask indicating stereo mixer controls.  If a bit is set, the corresponding control is stereo; if it is unset, the control is either monophonic or not supported by the mixer (use in combination with :meth:`controls` to determine which)."
msgstr ""

msgid "See the code example for the :meth:`controls` function for an example of getting data from a bitmask."
msgstr ""

msgid "Returns a bitmask specifying the mixer controls that may be used to record.  See the code example for :meth:`controls` for an example of reading from a bitmask."
msgstr ""

msgid "Returns the volume of a given mixer control.  The returned volume is a 2-tuple ``(left_volume,right_volume)``.  Volumes are specified as numbers from 0 (silent) to 100 (full volume).  If the control is monophonic, a 2-tuple is still returned, but both volumes are the same."
msgstr ""

msgid "Raises :exc:`OSSAudioError` if an invalid control was is specified, or :exc:`IOError` if an unsupported control is specified."
msgstr ""

msgid "Sets the volume for a given mixer control to ``(left,right)``. ``left`` and ``right`` must be ints and between 0 (silent) and 100 (full volume).  On success, the new volume is returned as a 2-tuple. Note that this may not be exactly the same as the volume specified, because of the limited resolution of some soundcard's mixers."
msgstr ""

msgid "Raises :exc:`OSSAudioError` if an invalid mixer control was specified, or if the specified volumes were out-of-range."
msgstr ""

msgid "This method returns a bitmask indicating which control(s) are currently being used as a recording source."
msgstr ""

msgid "Call this function to specify a recording source.  Returns a bitmask indicating the new recording source (or sources) if successful; raises :exc:`IOError` if an invalid source was specified.  To set the current recording source to the microphone input::"
msgstr ""

msgid "mixer.setrecsrc (1 << ossaudiodev.SOUND_MIXER_MIC)"
msgstr ""

msgid "Other Graphical User Interface Packages"
msgstr ""

msgid "There are an number of extension widget sets to :mod:`tkinter`."
msgstr ""

msgid "is a toolkit for building high-level compound widgets in Python using the :mod:`tkinter` package.  It consists of a set of base classes and a library of flexible and extensible megawidgets built on this foundation. These megawidgets include notebooks, comboboxes, selection widgets, paned widgets, scrolled widgets, dialog windows, etc.  Also, with the Pmw.Blt interface to BLT, the busy, graph, stripchart, tabset and vector commands are be available."
msgstr ""

msgid "The initial ideas for Pmw were taken from the Tk ``itcl`` extensions ``[incr Tk]`` by Michael McLennan and ``[incr Widgets]`` by Mark Ulferts. Several of the megawidgets are direct translations from the itcl to Python. It offers most of the range of widgets that ``[incr Widgets]`` does, and is almost as complete as Tix, lacking however Tix's fast :class:`HList` widget for drawing trees."
msgstr ""

msgid "is a library that allows you to write new Tkinter widgets in pure Python.  The WCK framework gives you full control over widget creation, configuration, screen appearance, and event handling.  WCK widgets can be very fast and light-weight, since they can operate directly on Python data structures, without having to transfer data through the Tk/Tcl layer."
msgstr ""

msgid "The major cross-platform (Windows, Mac OS X, Unix-like) GUI toolkits that are also available for Python:"
msgstr ""

msgid "is a set of bindings for the `GTK <http://www.gtk.org/>`_ widget set. It provides an object oriented interface that is slightly higher level than the C one. It comes with many more widgets than Tkinter provides, and has good Python-specific reference documentation. There are also bindings to `GNOME <http://www.gnome.org>`_.  One well known PyGTK application is `PythonCAD <http://www.pythoncad.org/>`_. An online `tutorial <http://www.pygtk.org/pygtk2tutorial/index.html>`_ is available."
msgstr ""

msgid "PyQt is a :program:`sip`\\ -wrapped binding to the Qt toolkit.  Qt is an extensive C++ GUI application development framework that is available for Unix, Windows and Mac OS X. :program:`sip` is a tool for generating bindings for C++ libraries as Python classes, and is specifically designed for Python. The *PyQt3* bindings have a book, `GUI Programming with Python: QT Edition <http://www.commandprompt.com/community/pyqt/>`_ by Boudewijn Rempt. The *PyQt4* bindings also have a book, `Rapid GUI Programming with Python and Qt <http://www.qtrac.eu/pyqtbook.html>`_, by Mark Summerfield."
msgstr ""

msgid "wxPython is a cross-platform GUI toolkit for Python that is built around the popular `wxWidgets <http://www.wxwidgets.org/>`_ (formerly wxWindows) C++ toolkit.  It provides a native look and feel for applications on Windows, Mac OS X, and Unix systems by using each platform's native widgets where ever possible, (GTK+ on Unix-like systems).  In addition to an extensive set of widgets, wxPython provides classes for online documentation and context sensitive help, printing, HTML viewing, low-level device context drawing, drag and drop, system clipboard access, an XML-based resource format and more, including an ever growing library of user-contributed modules.  wxPython has a book, `wxPython in Action <http://www.amazon.com/exec/obidos/ASIN/1932394621>`_, by Noel Rappin and Robin Dunn."
msgstr ""

msgid "PyGTK, PyQt, and wxPython, all have a modern look and feel and more widgets than Tkinter. In addition, there are many other GUI toolkits for Python, both cross-platform, and platform-specific. See the `GUI Programming <http://wiki.python.org/moin/GuiProgramming>`_ page in the Python Wiki for a much more complete list, and also for links to documents where the different GUI toolkits are compared."
msgstr ""

msgid ":mod:`parser` --- Access Python parse trees"
msgstr ""

msgid "The :mod:`parser` module provides an interface to Python's internal parser and byte-code compiler.  The primary purpose for this interface is to allow Python code to edit the parse tree of a Python expression and create executable code from this.  This is better than trying to parse and modify an arbitrary Python code fragment as a string because parsing is performed in a manner identical to the code forming the application.  It is also faster."
msgstr ""

msgid "From Python 2.5 onward, it's much more convenient to cut in at the Abstract Syntax Tree (AST) generation and compilation stage, using the :mod:`ast` module."
msgstr ""

msgid "There are a few things to note about this module which are important to making use of the data structures created.  This is not a tutorial on editing the parse trees for Python code, but some examples of using the :mod:`parser` module are presented."
msgstr ""

msgid "Most importantly, a good understanding of the Python grammar processed by the internal parser is required.  For full information on the language syntax, refer to :ref:`reference-index`.  The parser itself is created from a grammar specification defined in the file :file:`Grammar/Grammar` in the standard Python distribution.  The parse trees stored in the ST objects created by this module are the actual output from the internal parser when created by the :func:`expr` or :func:`suite` functions, described below.  The ST objects created by :func:`sequence2st` faithfully simulate those structures.  Be aware that the values of the sequences which are considered \"correct\" will vary from one version of Python to another as the formal grammar for the language is revised.  However, transporting code from one Python version to another as source text will always allow correct parse trees to be created in the target version, with the only restriction being that migrating to an older version of the interpreter will not support more recent language constructs.  The parse trees are not typically compatible from one version to another, whereas source code has always been forward-compatible."
msgstr ""

msgid "Each element of the sequences returned by :func:`st2list` or :func:`st2tuple` has a simple form.  Sequences representing non-terminal elements in the grammar always have a length greater than one.  The first element is an integer which identifies a production in the grammar.  These integers are given symbolic names in the C header file :file:`Include/graminit.h` and the Python module :mod:`symbol`.  Each additional element of the sequence represents a component of the production as recognized in the input string: these are always sequences which have the same form as the parent.  An important aspect of this structure which should be noted is that keywords used to identify the parent node type, such as the keyword :keyword:`if` in an :const:`if_stmt`, are included in the node tree without any special treatment.  For example, the :keyword:`if` keyword is represented by the tuple ``(1, 'if')``, where ``1`` is the numeric value associated with all :const:`NAME` tokens, including variable and function names defined by the user.  In an alternate form returned when line number information is requested, the same token might be represented as ``(1, 'if', 12)``, where the ``12`` represents the line number at which the terminal symbol was found."
msgstr ""

msgid "Terminal elements are represented in much the same way, but without any child elements and the addition of the source text which was identified.  The example of the :keyword:`if` keyword above is representative.  The various types of terminal symbols are defined in the C header file :file:`Include/token.h` and the Python module :mod:`token`."
msgstr ""

msgid "The ST objects are not required to support the functionality of this module, but are provided for three purposes: to allow an application to amortize the cost of processing complex parse trees, to provide a parse tree representation which conserves memory space when compared to the Python list or tuple representation, and to ease the creation of additional modules in C which manipulate parse trees.  A simple \"wrapper\" class may be created in Python to hide the use of ST objects."
msgstr ""

msgid "The :mod:`parser` module defines functions for a few distinct purposes.  The most important purposes are to create ST objects and to convert ST objects to other representations such as parse trees and compiled code objects, but there are also functions which serve to query the type of parse tree represented by an ST object."
msgstr ""

msgid "Useful constants representing internal nodes of the parse tree."
msgstr ""

msgid "Useful constants representing leaf nodes of the parse tree and functions for testing node values."
msgstr ""

msgid "Creating ST Objects"
msgstr ""

msgid "ST objects may be created from source code or from a parse tree. When creating an ST object from source, different functions are used to create the ``'eval'`` and ``'exec'`` forms."
msgstr ""

msgid "The :func:`expr` function parses the parameter *source* as if it were an input to ``compile(source, 'file.py', 'eval')``.  If the parse succeeds, an ST object is created to hold the internal parse tree representation, otherwise an appropriate exception is thrown."
msgstr ""

msgid "The :func:`suite` function parses the parameter *source* as if it were an input to ``compile(source, 'file.py', 'exec')``.  If the parse succeeds, an ST object is created to hold the internal parse tree representation, otherwise an appropriate exception is thrown."
msgstr ""

msgid "This function accepts a parse tree represented as a sequence and builds an internal representation if possible.  If it can validate that the tree conforms to the Python grammar and all nodes are valid node types in the host version of Python, an ST object is created from the internal representation and returned to the called.  If there is a problem creating the internal representation, or if the tree cannot be validated, a :exc:`ParserError` exception is thrown.  An ST object created this way should not be assumed to compile correctly; normal exceptions thrown by compilation may still be initiated when the ST object is passed to :func:`compilest`.  This may indicate problems not related to syntax (such as a :exc:`MemoryError` exception), but may also be due to constructs such as the result of parsing ``del f(0)``, which escapes the Python parser but is checked by the bytecode compiler."
msgstr ""

msgid "Sequences representing terminal tokens may be represented as either two-element lists of the form ``(1, 'name')`` or as three-element lists of the form ``(1, 'name', 56)``.  If the third element is present, it is assumed to be a valid line number.  The line number may be specified for any subset of the terminal symbols in the input tree."
msgstr ""

msgid "This is the same function as :func:`sequence2st`.  This entry point is maintained for backward compatibility."
msgstr ""

msgid "Converting ST Objects"
msgstr ""

msgid "ST objects, regardless of the input used to create them, may be converted to parse trees represented as list- or tuple- trees, or may be compiled into executable code objects.  Parse trees may be extracted with or without line numbering information."
msgstr ""

msgid "This function accepts an ST object from the caller in *st* and returns a Python list representing the equivalent parse tree.  The resulting list representation can be used for inspection or the creation of a new parse tree in list form.  This function does not fail so long as memory is available to build the list representation.  If the parse tree will only be used for inspection, :func:`st2tuple` should be used instead to reduce memory consumption and fragmentation.  When the list representation is required, this function is significantly faster than retrieving a tuple representation and converting that to nested lists."
msgstr ""

msgid "If *line_info* is true, line number information will be included for all terminal tokens as a third element of the list representing the token.  Note that the line number provided specifies the line on which the token *ends*. This information is omitted if the flag is false or omitted."
msgstr ""

msgid "This function accepts an ST object from the caller in *st* and returns a Python tuple representing the equivalent parse tree.  Other than returning a tuple instead of a list, this function is identical to :func:`st2list`."
msgstr ""

msgid "If *line_info* is true, line number information will be included for all terminal tokens as a third element of the list representing the token.  This information is omitted if the flag is false or omitted."
msgstr ""

msgid "The Python byte compiler can be invoked on an ST object to produce code objects which can be used as part of a call to the built-in :func:`exec` or :func:`eval` functions. This function provides the interface to the compiler, passing the internal parse tree from *st* to the parser, using the source file name specified by the *filename* parameter. The default value supplied for *filename* indicates that the source was an ST object."
msgstr ""

msgid "Compiling an ST object may result in exceptions related to compilation; an example would be a :exc:`SyntaxError` caused by the parse tree for ``del f(0)``: this statement is considered legal within the formal grammar for Python but is not a legal language construct.  The :exc:`SyntaxError` raised for this condition is actually generated by the Python byte-compiler normally, which is why it can be raised at this point by the :mod:`parser` module.  Most causes of compilation failure can be diagnosed programmatically by inspection of the parse tree."
msgstr ""

msgid "Queries on ST Objects"
msgstr ""

msgid "Two functions are provided which allow an application to determine if an ST was created as an expression or a suite.  Neither of these functions can be used to determine if an ST was created from source code via :func:`expr` or :func:`suite` or from a parse tree via :func:`sequence2st`."
msgstr ""

msgid "When *st* represents an ``'eval'`` form, this function returns true, otherwise it returns false.  This is useful, since code objects normally cannot be queried for this information using existing built-in functions.  Note that the code objects created by :func:`compilest` cannot be queried like this either, and are identical to those created by the built-in :func:`compile` function."
msgstr ""

msgid "This function mirrors :func:`isexpr` in that it reports whether an ST object represents an ``'exec'`` form, commonly known as a \"suite.\"  It is not safe to assume that this function is equivalent to ``not isexpr(st)``, as additional syntactic fragments may be supported in the future."
msgstr ""

msgid "Exceptions and Error Handling"
msgstr ""

msgid "The parser module defines a single exception, but may also pass other built-in exceptions from other portions of the Python runtime environment.  See each function for information about the exceptions it can raise."
msgstr ""

msgid "Exception raised when a failure occurs within the parser module.  This is generally produced for validation failures rather than the built in :exc:`SyntaxError` thrown during normal parsing. The exception argument is either a string describing the reason of the failure or a tuple containing a sequence causing the failure from a parse tree passed to :func:`sequence2st` and an explanatory string.  Calls to :func:`sequence2st` need to be able to handle either type of exception, while calls to other functions in the module will only need to be aware of the simple string values."
msgstr ""

msgid "Note that the functions :func:`compilest`, :func:`expr`, and :func:`suite` may throw exceptions which are normally thrown by the parsing and compilation process.  These include the built in exceptions :exc:`MemoryError`, :exc:`OverflowError`, :exc:`SyntaxError`, and :exc:`SystemError`.  In these cases, these exceptions carry all the meaning normally associated with them. Refer to the descriptions of each function for detailed information."
msgstr ""

msgid "ST Objects"
msgstr ""

msgid "Ordered and equality comparisons are supported between ST objects. Pickling of ST objects (using the :mod:`pickle` module) is also supported."
msgstr ""

msgid "The type of the objects returned by :func:`expr`, :func:`suite` and :func:`sequence2st`."
msgstr ""

msgid "ST objects have the following methods:"
msgstr ""

msgid "Same as ``compilest(st, filename)``."
msgstr ""

msgid "Same as ``isexpr(st)``."
msgstr ""

msgid "Same as ``issuite(st)``."
msgstr ""

msgid "Same as ``st2list(st, line_info, col_info)``."
msgstr ""

msgid "Same as ``st2tuple(st, line_info, col_info)``."
msgstr ""

msgid "The parser modules allows operations to be performed on the parse tree of Python source code before the :term:`bytecode` is generated, and provides for inspection of the parse tree for information gathering purposes. Two examples are presented.  The simple example demonstrates emulation of the :func:`compile` built-in function and the complex example shows the use of a parse tree for information discovery."
msgstr ""

msgid "Emulation of :func:`compile`"
msgstr ""

msgid "While many useful operations may take place between parsing and bytecode generation, the simplest operation is to do nothing.  For this purpose, using the :mod:`parser` module to produce an intermediate data structure is equivalent to the code ::"
msgstr ""

msgid ">>> code = compile('a + 5', 'file.py', 'eval') >>> a = 5 >>> eval(code) 10"
msgstr ""

msgid "The equivalent operation using the :mod:`parser` module is somewhat longer, and allows the intermediate internal parse tree to be retained as an ST object::"
msgstr ""

msgid ">>> import parser >>> st = parser.expr('a + 5') >>> code = st.compile('file.py') >>> a = 5 >>> eval(code) 10"
msgstr ""

msgid "An application which needs both ST and code objects can package this code into readily available functions::"
msgstr ""

msgid "import parser  def load_suite(source_string):     st = parser.suite(source_string)     return st, st.compile()  def load_expression(source_string):     st = parser.expr(source_string)     return st, st.compile()"
msgstr ""

msgid "Information Discovery"
msgstr ""

msgid "Some applications benefit from direct access to the parse tree.  The remainder of this section demonstrates how the parse tree provides access to module documentation defined in docstrings without requiring that the code being examined be loaded into a running interpreter via :keyword:`import`.  This can be very useful for performing analyses of untrusted code."
msgstr ""

msgid "Generally, the example will demonstrate how the parse tree may be traversed to distill interesting information.  Two functions and a set of classes are developed which provide programmatic access to high level function and class definitions provided by a module.  The classes extract information from the parse tree and provide access to the information at a useful semantic level, one function provides a simple low-level pattern matching capability, and the other function defines a high-level interface to the classes by handling file operations on behalf of the caller.  All source files mentioned here which are not part of the Python installation are located in the :file:`Demo/parser/` directory of the distribution."
msgstr ""

msgid "The dynamic nature of Python allows the programmer a great deal of flexibility, but most modules need only a limited measure of this when defining classes, functions, and methods.  In this example, the only definitions that will be considered are those which are defined in the top level of their context, e.g., a function defined by a :keyword:`def` statement at column zero of a module, but not a function defined within a branch of an :keyword:`if` ... :keyword:`else` construct, though there are some good reasons for doing so in some situations. Nesting of definitions will be handled by the code developed in the example."
msgstr ""

msgid "To construct the upper-level extraction methods, we need to know what the parse tree structure looks like and how much of it we actually need to be concerned about.  Python uses a moderately deep parse tree so there are a large number of intermediate nodes.  It is important to read and understand the formal grammar used by Python.  This is specified in the file :file:`Grammar/Grammar` in the distribution. Consider the simplest case of interest when searching for docstrings: a module consisting of a docstring and nothing else.  (See file :file:`docstring.py`.) ::"
msgstr ""

msgid "\"\"\"Some documentation. \"\"\""
msgstr ""

msgid "Using the interpreter to take a look at the parse tree, we find a bewildering mass of numbers and parentheses, with the documentation buried deep in nested tuples. ::"
msgstr ""

msgid ">>> import parser >>> import pprint >>> st = parser.suite(open('docstring.py').read()) >>> tup = st.totuple() >>> pprint.pprint(tup) (257,  (264,   (265,    (266,     (267,      (307,       (287,        (288,         (289,          (290,           (292,            (293,             (294,              (295,               (296,                (297,                 (298,                  (299,                   (300, (3, '\"\"\"Some documentation.\\n\"\"\"'))))))))))))))))),    (4, ''))),  (4, ''),  (0, ''))"
msgstr ""

msgid "The numbers at the first element of each node in the tree are the node types; they map directly to terminal and non-terminal symbols in the grammar. Unfortunately, they are represented as integers in the internal representation, and the Python structures generated do not change that.  However, the :mod:`symbol` and :mod:`token` modules provide symbolic names for the node types and dictionaries which map from the integers to the symbolic names for the node types."
msgstr ""

msgid "In the output presented above, the outermost tuple contains four elements: the integer ``257`` and three additional tuples.  Node type ``257`` has the symbolic name :const:`file_input`.  Each of these inner tuples contains an integer as the first element; these integers, ``264``, ``4``, and ``0``, represent the node types :const:`stmt`, :const:`NEWLINE`, and :const:`ENDMARKER`, respectively. Note that these values may change depending on the version of Python you are using; consult :file:`symbol.py` and :file:`token.py` for details of the mapping.  It should be fairly clear that the outermost node is related primarily to the input source rather than the contents of the file, and may be disregarded for the moment.  The :const:`stmt` node is much more interesting.  In particular, all docstrings are found in subtrees which are formed exactly as this node is formed, with the only difference being the string itself.  The association between the docstring in a similar tree and the defined entity (class, function, or module) which it describes is given by the position of the docstring subtree within the tree defining the described structure."
msgstr ""

msgid "By replacing the actual docstring with something to signify a variable component of the tree, we allow a simple pattern matching approach to check any given subtree for equivalence to the general pattern for docstrings.  Since the example demonstrates information extraction, we can safely require that the tree be in tuple form rather than list form, allowing a simple variable representation to be ``['variable_name']``.  A simple recursive function can implement the pattern matching, returning a Boolean and a dictionary of variable name to value mappings.  (See file :file:`example.py`.) ::"
msgstr ""

msgid "def match(pattern, data, vars=None):     if vars is None:         vars = {}     if isinstance(pattern, list):         vars[pattern[0]] = data         return True, vars     if not instance(pattern, tuple):         return (pattern == data), vars     if len(data) != len(pattern):         return False, vars     for pattern, data in zip(pattern, data):         same, vars = match(pattern, data, vars)         if not same:             break     return same, vars"
msgstr ""

msgid "Using this simple representation for syntactic variables and the symbolic node types, the pattern for the candidate docstring subtrees becomes fairly readable. (See file :file:`example.py`.) ::"
msgstr ""

msgid "import symbol import token  DOCSTRING_STMT_PATTERN = (     symbol.stmt,     (symbol.simple_stmt,      (symbol.small_stmt,       (symbol.expr_stmt,        (symbol.testlist,         (symbol.test,          (symbol.and_test,           (symbol.not_test,            (symbol.comparison,             (symbol.expr,              (symbol.xor_expr,               (symbol.and_expr,                (symbol.shift_expr,                 (symbol.arith_expr,                  (symbol.term,                   (symbol.factor,                    (symbol.power,                     (symbol.atom,                      (token.STRING, ['docstring'])                      )))))))))))))))),      (token.NEWLINE, '')      ))"
msgstr ""

msgid "Using the :func:`match` function with this pattern, extracting the module docstring from the parse tree created previously is easy::"
msgstr ""

msgid ">>> found, vars = match(DOCSTRING_STMT_PATTERN, tup[1]) >>> found True >>> vars {'docstring': '\"\"\"Some documentation.\\n\"\"\"'}"
msgstr ""

msgid "Once specific data can be extracted from a location where it is expected, the question of where information can be expected needs to be answered.  When dealing with docstrings, the answer is fairly simple: the docstring is the first :const:`stmt` node in a code block (:const:`file_input` or :const:`suite` node types).  A module consists of a single :const:`file_input` node, and class and function definitions each contain exactly one :const:`suite` node.  Classes and functions are readily identified as subtrees of code block nodes which start with ``(stmt, (compound_stmt, (classdef, ...`` or ``(stmt, (compound_stmt, (funcdef, ...``.  Note that these subtrees cannot be matched by :func:`match` since it does not support multiple sibling nodes to match without regard to number.  A more elaborate matching function could be used to overcome this limitation, but this is sufficient for the example."
msgstr ""

msgid "Given the ability to determine whether a statement might be a docstring and extract the actual string from the statement, some work needs to be performed to walk the parse tree for an entire module and extract information about the names defined in each context of the module and associate any docstrings with the names.  The code to perform this work is not complicated, but bears some explanation."
msgstr ""

msgid "The public interface to the classes is straightforward and should probably be somewhat more flexible.  Each \"major\" block of the module is described by an object providing several methods for inquiry and a constructor which accepts at least the subtree of the complete parse tree which it represents.  The :class:`ModuleInfo` constructor accepts an optional *name* parameter since it cannot otherwise determine the name of the module."
msgstr ""

msgid "The public classes include :class:`ClassInfo`, :class:`FunctionInfo`, and :class:`ModuleInfo`.  All objects provide the methods :meth:`get_name`, :meth:`get_docstring`, :meth:`get_class_names`, and :meth:`get_class_info`.  The :class:`ClassInfo` objects support :meth:`get_method_names` and :meth:`get_method_info` while the other classes provide :meth:`get_function_names` and :meth:`get_function_info`."
msgstr ""

msgid "Within each of the forms of code block that the public classes represent, most of the required information is in the same form and is accessed in the same way, with classes having the distinction that functions defined at the top level are referred to as \"methods.\" Since the difference in nomenclature reflects a real semantic distinction from functions defined outside of a class, the implementation needs to maintain the distinction. Hence, most of the functionality of the public classes can be implemented in a common base class, :class:`SuiteInfoBase`, with the accessors for function and method information provided elsewhere. Note that there is only one class which represents function and method information; this parallels the use of the :keyword:`def` statement to define both types of elements."
msgstr ""

msgid "Most of the accessor functions are declared in :class:`SuiteInfoBase` and do not need to be overridden by subclasses.  More importantly, the extraction of most information from a parse tree is handled through a method called by the :class:`SuiteInfoBase` constructor.  The example code for most of the classes is clear when read alongside the formal grammar, but the method which recursively creates new information objects requires further examination.  Here is the relevant part of the :class:`SuiteInfoBase` definition from :file:`example.py`::"
msgstr ""

msgid "class SuiteInfoBase:     _docstring = ''     _name = ''      def __init__(self, tree = None):         self._class_info = {}         self._function_info = {}         if tree:             self._extract_info(tree)      def _extract_info(self, tree):         # extract docstring         if len(tree) == 2:             found, vars = match(DOCSTRING_STMT_PATTERN[1], tree[1])         else:             found, vars = match(DOCSTRING_STMT_PATTERN, tree[3])         if found:             self._docstring = eval(vars['docstring'])         # discover inner definitions         for node in tree[1:]:             found, vars = match(COMPOUND_STMT_PATTERN, node)             if found:                 cstmt = vars['compound']                 if cstmt[0] == symbol.funcdef:                     name = cstmt[2][1]                     self._function_info[name] = FunctionInfo(cstmt)                 elif cstmt[0] == symbol.classdef:                     name = cstmt[2][1]                     self._class_info[name] = ClassInfo(cstmt)"
msgstr ""

msgid "After initializing some internal state, the constructor calls the :meth:`_extract_info` method.  This method performs the bulk of the information extraction which takes place in the entire example.  The extraction has two distinct phases: the location of the docstring for the parse tree passed in, and the discovery of additional definitions within the code block represented by the parse tree."
msgstr ""

msgid "The initial :keyword:`if` test determines whether the nested suite is of the \"short form\" or the \"long form.\"  The short form is used when the code block is on the same line as the definition of the code block, as in ::"
msgstr ""

msgid "def square(x): \"Square an argument.\"; return x ** 2"
msgstr ""

msgid "while the long form uses an indented block and allows nested definitions::"
msgstr ""

msgid "def make_power(exp):     \"Make a function that raises an argument to the exponent `exp`.\"     def raiser(x, y=exp):         return x ** y     return raiser"
msgstr ""

msgid "When the short form is used, the code block may contain a docstring as the first, and possibly only, :const:`small_stmt` element.  The extraction of such a docstring is slightly different and requires only a portion of the complete pattern used in the more common case.  As implemented, the docstring will only be found if there is only one :const:`small_stmt` node in the :const:`simple_stmt` node. Since most functions and methods which use the short form do not provide a docstring, this may be considered sufficient.  The extraction of the docstring proceeds using the :func:`match` function as described above, and the value of the docstring is stored as an attribute of the :class:`SuiteInfoBase` object."
msgstr ""

msgid "After docstring extraction, a simple definition discovery algorithm operates on the :const:`stmt` nodes of the :const:`suite` node.  The special case of the short form is not tested; since there are no :const:`stmt` nodes in the short form, the algorithm will silently skip the single :const:`simple_stmt` node and correctly not discover any nested definitions."
msgstr ""

msgid "Each statement in the code block is categorized as a class definition, function or method definition, or something else.  For the definition statements, the name of the element defined is extracted and a representation object appropriate to the definition is created with the defining subtree passed as an argument to the constructor.  The representation objects are stored in instance variables and may be retrieved by name using the appropriate accessor methods."
msgstr ""

msgid "The public classes provide any accessors required which are more specific than those provided by the :class:`SuiteInfoBase` class, but the real extraction algorithm remains common to all forms of code blocks.  A high-level function can be used to extract the complete set of information from a source file.  (See file :file:`example.py`.) ::"
msgstr ""

msgid "def get_docs(fileName):     import os     import parser      source = open(fileName).read()     basename = os.path.basename(os.path.splitext(fileName)[0])     st = parser.suite(source)     return ModuleInfo(st.totuple(), basename)"
msgstr ""

msgid "This provides an easy-to-use interface to the documentation of a module.  If information is required which is not extracted by the code of this example, the code may be extended at clearly defined points to provide additional capabilities."
msgstr ""

msgid ":mod:`pdb` --- The Python Debugger"
msgstr ""

msgid "The module :mod:`pdb` defines an interactive source code debugger for Python programs.  It supports setting (conditional) breakpoints and single stepping at the source line level, inspection of stack frames, source code listing, and evaluation of arbitrary Python code in the context of any stack frame.  It also supports post-mortem debugging and can be called under program control."
msgstr ""

msgid "The debugger is extensible --- it is actually defined as the class :class:`Pdb`. This is currently undocumented but easily understood by reading the source.  The extension interface uses the modules :mod:`bdb` and :mod:`cmd`."
msgstr ""

msgid "The debugger's prompt is ``(Pdb)``. Typical usage to run a program under control of the debugger is::"
msgstr ""

msgid ">>> import pdb >>> import mymodule >>> pdb.run('mymodule.test()') > <string>(0)?() (Pdb) continue > <string>(1)?() (Pdb) continue NameError: 'spam' > <string>(1)?() (Pdb)"
msgstr ""

msgid ":file:`pdb.py` can also be invoked as a script to debug other scripts.  For example::"
msgstr ""

msgid "python3 -m pdb myscript.py"
msgstr ""

msgid "When invoked as a script, pdb will automatically enter post-mortem debugging if the program being debugged exits abnormally. After post-mortem debugging (or after normal exit of the program), pdb will restart the program. Automatic restarting preserves pdb's state (such as breakpoints) and in most cases is more useful than quitting the debugger upon program's exit."
msgstr ""

msgid "The typical usage to break into the debugger from a running program is to insert ::"
msgstr ""

msgid "import pdb; pdb.set_trace()"
msgstr ""

msgid "at the location you want to break into the debugger.  You can then step through the code following this statement, and continue running without the debugger using the ``c`` command."
msgstr ""

msgid "The typical usage to inspect a crashed program is::"
msgstr ""

msgid ">>> import pdb >>> import mymodule >>> mymodule.test() Traceback (most recent call last):   File \"<stdin>\", line 1, in ?   File \"./mymodule.py\", line 4, in test     test2()   File \"./mymodule.py\", line 3, in test2     print(spam) NameError: spam >>> pdb.pm() > ./mymodule.py(3)test2() -> print(spam) (Pdb)"
msgstr ""

msgid "The module defines the following functions; each enters the debugger in a slightly different way:"
msgstr ""

msgid "Execute the *statement* (given as a string) under debugger control.  The debugger prompt appears before any code is executed; you can set breakpoints and type ``continue``, or you can step through the statement using ``step`` or ``next`` (all these commands are explained below).  The optional *globals* and *locals* arguments specify the environment in which the code is executed; by default the dictionary of the module :mod:`__main__` is used.  (See the explanation of the built-in :func:`exec` or :func:`eval` functions.)"
msgstr ""

msgid "Evaluate the *expression* (given as a string) under debugger control.  When :func:`runeval` returns, it returns the value of the expression.  Otherwise this function is similar to :func:`run`."
msgstr ""

msgid "Call the *function* (a function or method object, not a string) with the given arguments.  When :func:`runcall` returns, it returns whatever the function call returned.  The debugger prompt appears as soon as the function is entered."
msgstr ""

msgid "Enter the debugger at the calling stack frame.  This is useful to hard-code a breakpoint at a given point in a program, even if the code is not otherwise being debugged (e.g. when an assertion fails)."
msgstr ""

msgid "Enter post-mortem debugging of the given *traceback* object.  If no *traceback* is given, it uses the one of the exception that is currently being handled (an exception must be being handled if the default is to be used)."
msgstr ""

msgid "Enter post-mortem debugging of the traceback found in :data:`sys.last_traceback`."
msgstr ""

msgid "The ``run_*`` functions and :func:`set_trace` are aliases for instantiating the :class:`Pdb` class and calling the method of the same name.  If you want to access further features, you have to do this yourself:"
msgstr ""

msgid ":class:`Pdb` is the debugger class."
msgstr ""

msgid "The *completekey*, *stdin* and *stdout* arguments are passed to the underlying :class:`cmd.Cmd` class; see the description there."
msgstr ""

msgid "The *skip* argument, if given, must be an iterable of glob-style module name patterns.  The debugger will not step into frames that originate in a module that matches one of these patterns. [1]_"
msgstr ""

msgid "Example call to enable tracing with *skip*::"
msgstr ""

msgid "import pdb; pdb.Pdb(skip=['django.*']).set_trace()"
msgstr ""

msgid "See the documentation for the functions explained above."
msgstr ""

msgid "Debugger Commands"
msgstr ""

msgid "The debugger recognizes the following commands.  Most commands can be abbreviated to one or two letters; e.g. ``h(elp)`` means that either ``h`` or ``help`` can be used to enter the help command (but not ``he`` or ``hel``, nor ``H`` or ``Help`` or ``HELP``).  Arguments to commands must be separated by whitespace (spaces or tabs).  Optional arguments are enclosed in square brackets (``[]``) in the command syntax; the square brackets must not be typed. Alternatives in the command syntax are separated by a vertical bar (``|``)."
msgstr ""

msgid "Entering a blank line repeats the last command entered.  Exception: if the last command was a ``list`` command, the next 11 lines are listed."
msgstr ""

msgid "Commands that the debugger doesn't recognize are assumed to be Python statements and are executed in the context of the program being debugged.  Python statements can also be prefixed with an exclamation point (``!``).  This is a powerful way to inspect the program being debugged; it is even possible to change a variable or call a function.  When an exception occurs in such a statement, the exception name is printed but the debugger's state is not changed."
msgstr ""

msgid "Multiple commands may be entered on a single line, separated by ``;;``.  (A single ``;`` is not used as it is the separator for multiple commands in a line that is passed to the Python parser.) No intelligence is applied to separating the commands; the input is split at the first ``;;`` pair, even if it is in the middle of a quoted string."
msgstr ""

msgid "The debugger supports aliases.  Aliases can have parameters which allows one a certain level of adaptability to the context under examination."
msgstr ""

msgid "If a file :file:`.pdbrc`  exists in the user's home directory or in the current directory, it is read in and executed as if it had been typed at the debugger prompt. This is particularly useful for aliases.  If both files exist, the one in the home directory is read first and aliases defined there can be overridden by the local file."
msgstr ""

msgid "Without argument, print the list of available commands.  With a *command* as argument, print help about that command.  ``help pdb`` displays the full documentation file; if the environment variable :envvar:`PAGER` is defined, the file is piped through that command instead.  Since the *command* argument must be an identifier, ``help exec`` must be entered to get help on the ``!`` command."
msgstr ""

msgid "Print a stack trace, with the most recent frame at the bottom.  An arrow indicates the current frame, which determines the context of most commands."
msgstr ""

msgid "Move the current frame *count* (default one) levels down in the stack trace (to a newer frame)."
msgstr ""

msgid "Move the current frame *count* (default one) levels up in the stack trace (to an older frame)."
msgstr ""

msgid "With a *lineno* argument, set a break there in the current file.  With a *function* argument, set a break at the first executable statement within that function. The line number may be prefixed with a filename and a colon, to specify a breakpoint in another file (probably one that hasn't been loaded yet). The file is searched on ``sys.path``. Note that each breakpoint is assigned a number to which all the other breakpoint commands refer."
msgstr ""

msgid "If a second argument is present, it is an expression which must evaluate to true before the breakpoint is honored."
msgstr ""

msgid "Without argument, list all breaks, including for each breakpoint, the number of times that breakpoint has been hit, the current ignore count, and the associated condition if any."
msgstr ""

msgid "Temporary breakpoint, which is removed automatically when it is first hit.  The arguments are the same as break."
msgstr ""

msgid "With a space separated list of breakpoint numbers, clear those breakpoints. Without argument, clear all breaks (but first ask confirmation)."
msgstr ""

msgid "Disables the breakpoints given as a space separated list of breakpoint numbers. Disabling a breakpoint means it cannot cause the program to stop execution, but unlike clearing a breakpoint, it remains in the list of breakpoints and can be (re-)enabled."
msgstr ""

msgid "Enables the breakpoints specified."
msgstr ""

msgid "Sets the ignore count for the given breakpoint number.  If count is omitted, the ignore count is set to 0.  A breakpoint becomes active when the ignore count is zero.  When non-zero, the count is decremented each time the breakpoint is reached and the breakpoint is not disabled and any associated condition evaluates to true."
msgstr ""

msgid "Condition is an expression which must evaluate to true before the breakpoint is honored.  If condition is absent, any existing condition is removed; i.e., the breakpoint is made unconditional."
msgstr ""

msgid "Specify a list of commands for breakpoint number *bpnumber*.  The commands themselves appear on the following lines.  Type a line containing just 'end' to terminate the commands. An example::"
msgstr ""

msgid "(Pdb) commands 1 (com) print some_variable (com) end (Pdb)"
msgstr ""

msgid "To remove all commands from a breakpoint, type commands and follow it immediately with  end; that is, give no commands."
msgstr ""

msgid "With no *bpnumber* argument, commands refers to the last breakpoint set."
msgstr ""

msgid "You can use breakpoint commands to start your program up again. Simply use the continue command, or step, or any other command that resumes execution."
msgstr ""

msgid "Specifying any command resuming execution (currently continue, step, next, return, jump, quit and their abbreviations) terminates the command list (as if that command was immediately followed by end). This is because any time you resume execution (even with a simple next or step), you may encounter another breakpoint--which could have its own command list, leading to ambiguities about which list to execute."
msgstr ""

msgid "If you use the 'silent' command in the command list, the usual message about stopping at a breakpoint is not printed.  This may be desirable for breakpoints that are to print a specific message and then continue.  If none of the other commands print anything, you see no sign that the breakpoint was reached."
msgstr ""

msgid "Execute the current line, stop at the first possible occasion (either in a function that is called or on the next line in the current function)."
msgstr ""

msgid "Continue execution until the next line in the current function is reached or it returns.  (The difference between ``next`` and ``step`` is that ``step`` stops inside a called function, while ``next`` executes called functions at (nearly) full speed, only stopping at the next line in the current function.)"
msgstr ""

msgid "Continue execution until the line with the line number greater than the current one is reached or when returning from current frame."
msgstr ""

msgid "Continue execution until the current function returns."
msgstr ""

msgid "Continue execution, only stop when a breakpoint is encountered."
msgstr ""

msgid "Set the next line that will be executed.  Only available in the bottom-most frame.  This lets you jump back and execute code again, or jump forward to skip code that you don't want to run."
msgstr ""

msgid "It should be noted that not all jumps are allowed --- for instance it is not possible to jump into the middle of a :keyword:`for` loop or out of a :keyword:`finally` clause."
msgstr ""

msgid "List source code for the current file.  Without arguments, list 11 lines around the current line or continue the previous listing.  With one argument, list 11 lines around at that line.  With two arguments, list the given range; if the second argument is less than the first, it is interpreted as a count."
msgstr ""

msgid "Print the argument list of the current function."
msgstr ""

msgid "Evaluate the *expression* in the current context and print its value."
msgstr ""

msgid "Like the ``p`` command, except the value of the expression is pretty-printed using the :mod:`pprint` module."
msgstr ""

msgid "Creates an alias called *name* that executes *command*.  The command must *not* be enclosed in quotes.  Replaceable parameters can be indicated by ``%1``, ``%2``, and so on, while ``%*`` is replaced by all the parameters.  If no command is given, the current alias for *name* is shown. If no arguments are given, all aliases are listed."
msgstr ""

msgid "Aliases may be nested and can contain anything that can be legally typed at the pdb prompt.  Note that internal pdb commands *can* be overridden by aliases. Such a command is then hidden until the alias is removed.  Aliasing is recursively applied to the first word of the command line; all other words in the line are left alone."
msgstr ""

msgid "As an example, here are two useful aliases (especially when placed in the :file:`.pdbrc` file)::"
msgstr ""

msgid "#Print instance variables (usage \"pi classInst\") alias pi for k in %1.__dict__.keys(): print(\"%1.\",k,\"=\",%1.__dict__[k]) #Print instance variables in self alias ps pi self"
msgstr ""

msgid "Deletes the specified alias."
msgstr ""

msgid "Execute the (one-line) *statement* in the context of the current stack frame. The exclamation point can be omitted unless the first word of the statement resembles a debugger command. To set a global variable, you can prefix the assignment command with a ``global`` command on the same line, e.g.::"
msgstr ""

msgid "(Pdb) global list_options; list_options = ['-l'] (Pdb)"
msgstr ""

msgid "Restart the debugged Python program. If an argument is supplied, it is split with \"shlex\" and the result is used as the new sys.argv. History, breakpoints, actions and debugger options are preserved. \"restart\" is an alias for \"run\"."
msgstr ""

msgid "Quit from the debugger. The program being executed is aborted."
msgstr ""

msgid "Whether a frame is considered to originate in a certain module is determined by the ``__name__`` in the frame globals."
msgstr ""

msgid "Data Persistence"
msgstr ""

msgid "The modules described in this chapter support storing Python data in a persistent form on disk.  The :mod:`pickle` and :mod:`marshal` modules can turn many Python data types into a stream of bytes and then recreate the objects from the bytes.  The various DBM-related modules support a family of hash-based file formats that store a mapping of strings to other strings."
msgstr ""

msgid ":mod:`pickle` --- Python object serialization"
msgstr ""

msgid "The :mod:`pickle` module implements a fundamental, but powerful algorithm for serializing and de-serializing a Python object structure.  \"Pickling\" is the process whereby a Python object hierarchy is converted into a byte stream, and \"unpickling\" is the inverse operation, whereby a byte stream is converted back into an object hierarchy.  Pickling (and unpickling) is alternatively known as \"serialization\", \"marshalling,\" [#]_ or \"flattening\", however, to avoid confusion, the terms used here are \"pickling\" and \"unpickling\".."
msgstr ""

msgid "Relationship to other Python modules"
msgstr ""

msgid "The :mod:`pickle` module has an transparent optimizer (:mod:`_pickle`) written in C.  It is used whenever available.  Otherwise the pure Python implementation is used."
msgstr ""

msgid "Python has a more primitive serialization module called :mod:`marshal`, but in general :mod:`pickle` should always be the preferred way to serialize Python objects.  :mod:`marshal` exists primarily to support Python's :file:`.pyc` files."
msgstr ""

msgid "The :mod:`pickle` module differs from :mod:`marshal` several significant ways:"
msgstr ""

msgid "The :mod:`pickle` module keeps track of the objects it has already serialized, so that later references to the same object won't be serialized again. :mod:`marshal` doesn't do this."
msgstr ""

msgid "This has implications both for recursive objects and object sharing.  Recursive objects are objects that contain references to themselves.  These are not handled by marshal, and in fact, attempting to marshal recursive objects will crash your Python interpreter.  Object sharing happens when there are multiple references to the same object in different places in the object hierarchy being serialized.  :mod:`pickle` stores such objects only once, and ensures that all other references point to the master copy.  Shared objects remain shared, which can be very important for mutable objects."
msgstr ""

msgid ":mod:`marshal` cannot be used to serialize user-defined classes and their instances.  :mod:`pickle` can save and restore class instances transparently, however the class definition must be importable and live in the same module as when the object was stored."
msgstr ""

msgid "The :mod:`marshal` serialization format is not guaranteed to be portable across Python versions.  Because its primary job in life is to support :file:`.pyc` files, the Python implementers reserve the right to change the serialization format in non-backwards compatible ways should the need arise. The :mod:`pickle` serialization format is guaranteed to be backwards compatible across Python releases."
msgstr ""

msgid "The :mod:`pickle` module is not intended to be secure against erroneous or maliciously constructed data.  Never unpickle data received from an untrusted or unauthenticated source."
msgstr ""

msgid "Note that serialization is a more primitive notion than persistence; although :mod:`pickle` reads and writes file objects, it does not handle the issue of naming persistent objects, nor the (even more complicated) issue of concurrent access to persistent objects.  The :mod:`pickle` module can transform a complex object into a byte stream and it can transform the byte stream into an object with the same internal structure.  Perhaps the most obvious thing to do with these byte streams is to write them onto a file, but it is also conceivable to send them across a network or store them in a database.  The module :mod:`shelve` provides a simple interface to pickle and unpickle objects on DBM-style database files."
msgstr ""

msgid "Data stream format"
msgstr ""

msgid "The data format used by :mod:`pickle` is Python-specific.  This has the advantage that there are no restrictions imposed by external standards such as XDR (which can't represent pointer sharing); however it means that non-Python programs may not be able to reconstruct pickled Python objects."
msgstr ""

msgid "By default, the :mod:`pickle` data format uses a compact binary representation. The module :mod:`pickletools` contains tools for analyzing data streams generated by :mod:`pickle`."
msgstr ""

msgid "There are currently 4 different protocols which can be used for pickling."
msgstr ""

msgid "Protocol version 0 is the original human-readable protocol and is backwards compatible with earlier versions of Python."
msgstr ""

msgid "Protocol version 1 is the old binary format which is also compatible with earlier versions of Python."
msgstr ""

msgid "Protocol version 2 was introduced in Python 2.3.  It provides much more efficient pickling of :term:`new-style class`\\es."
msgstr ""

msgid "Protocol version 3 was added in Python 3.0.  It has explicit support for bytes and cannot be unpickled by Python 2.x pickle modules.  This is the current recommended protocol, use it whenever it is possible."
msgstr ""

msgid "Refer to :pep:`307` for information about improvements brought by protocol 2.  See :mod:`pickletools`'s source code for extensive comments about opcodes used by pickle protocols."
msgstr ""

msgid "To serialize an object hierarchy, you first create a pickler, then you call the pickler's :meth:`dump` method.  To de-serialize a data stream, you first create an unpickler, then you call the unpickler's :meth:`load` method.  The :mod:`pickle` module provides the following constant:"
msgstr ""

msgid "The highest protocol version available.  This value can be passed as a *protocol* value."
msgstr ""

msgid "The default protocol used for pickling.  May be less than HIGHEST_PROTOCOL. Currently the default protocol is 3; a backward-incompatible protocol designed for Python 3.0."
msgstr ""

msgid "The :mod:`pickle` module provides the following functions to make the pickling process more convenient:"
msgstr ""

msgid "Write a pickled representation of *obj* to the open file object *file*.  This is equivalent to ``Pickler(file, protocol).dump(obj)``."
msgstr ""

msgid "The optional *protocol* argument tells the pickler to use the given protocol; supported protocols are 0, 1, 2, 3.  The default protocol is 3; a backward-incompatible protocol designed for Python 3.0."
msgstr ""

msgid "Specifying a negative protocol version selects the highest protocol version supported.  The higher the protocol used, the more recent the version of Python needed to read the pickle produced."
msgstr ""

msgid "The *file* argument must have a write() method that accepts a single bytes argument.  It can thus be a file object opened for binary writing, a io.BytesIO instance, or any other custom object that meets this interface."
msgstr ""

msgid "If *fix_imports* is True and *protocol* is less than 3, pickle will try to map the new Python 3.x names to the old module names used in Python 2.x, so that the pickle data stream is readable with Python 2.x."
msgstr ""

msgid "Return the pickled representation of the object as a :class:`bytes` object, instead of writing it to a file."
msgstr ""

msgid "Read a pickled object representation from the open file object *file* and return the reconstituted object hierarchy specified therein.  This is equivalent to ``Unpickler(file).load()``."
msgstr ""

msgid "The protocol version of the pickle is detected automatically, so no protocol argument is needed.  Bytes past the pickled object's representation are ignored."
msgstr ""

msgid "The argument *file* must have two methods, a read() method that takes an integer argument, and a readline() method that requires no arguments.  Both methods should return bytes.  Thus *file* can be a binary file object opened for reading, a BytesIO object, or any other custom object that meets this interface."
msgstr ""

msgid "Optional keyword arguments are *fix_imports*, *encoding* and *errors*, which are used to control compatiblity support for pickle stream generated by Python 2.x.  If *fix_imports* is True, pickle will try to map the old Python 2.x names to the new names used in Python 3.x.  The *encoding* and *errors* tell pickle how to decode 8-bit string instances pickled by Python 2.x; these default to 'ASCII' and 'strict', respectively."
msgstr ""

msgid "Read a pickled object hierarchy from a :class:`bytes` object and return the reconstituted object hierarchy specified therein"
msgstr ""

msgid "The :mod:`pickle` module defines three exceptions:"
msgstr ""

msgid "Common base class for the other pickling exceptions.  It inherits :exc:`Exception`."
msgstr ""

msgid "Error raised when an unpicklable object is encountered by :class:`Pickler`. It inherits :exc:`PickleError`."
msgstr ""

msgid "Refer to :ref:`pickle-picklable` to learn what kinds of objects can be pickled."
msgstr ""

msgid "Error raised when there a problem unpickling an object, such as a data corruption or a security violation.  It inherits :exc:`PickleError`."
msgstr ""

msgid "Note that other exceptions may also be raised during unpickling, including (but not necessarily limited to) AttributeError, EOFError, ImportError, and IndexError."
msgstr ""

msgid "The :mod:`pickle` module exports two classes, :class:`Pickler` and :class:`Unpickler`:"
msgstr ""

msgid "This takes a binary file for writing a pickle data stream."
msgstr ""

msgid "Write a pickled representation of *obj* to the open file object given in the constructor."
msgstr ""

msgid "Do nothing by default.  This exists so a subclass can override it."
msgstr ""

msgid "If :meth:`persistent_id` returns ``None``, *obj* is pickled as usual.  Any other value causes :class:`Pickler` to emit the returned value as a persistent ID for *obj*.  The meaning of this persistent ID should be defined by :meth:`Unpickler.persistent_load`.  Note that the value returned by :meth:`persistent_id` cannot itself have a persistent ID."
msgstr ""

msgid "See :ref:`pickle-persistent` for details and examples of uses."
msgstr ""

msgid "Deprecated. Enable fast mode if set to a true value.  The fast mode disables the usage of memo, therefore speeding the pickling process by not generating superfluous PUT opcodes.  It should not be used with self-referential objects, doing otherwise will cause :class:`Pickler` to recurse infinitely."
msgstr ""

msgid "Use :func:`pickletools.optimize` if you need more compact pickles."
msgstr ""

msgid "This takes a binary file for reading a pickle data stream."
msgstr ""

msgid "The protocol version of the pickle is detected automatically, so no protocol argument is needed."
msgstr ""

msgid "Read a pickled object representation from the open file object given in the constructor, and return the reconstituted object hierarchy specified therein.  Bytes past the pickled object's representation are ignored."
msgstr ""

msgid "Raise an :exc:`UnpickingError` by default."
msgstr ""

msgid "If defined, :meth:`persistent_load` should return the object specified by the persistent ID *pid*.  If an invalid persistent ID is encountered, an :exc:`UnpickingError` should be raised."
msgstr ""

msgid "Import *module* if necessary and return the object called *name* from it, where the *module* and *name* arguments are :class:`str` objects.  Note, unlike its name suggests, :meth:`find_class` is also used for finding functions."
msgstr ""

msgid "Subclasses may override this to gain control over what type of objects and how they can be loaded, potentially reducing security risks. Refer to :ref:`pickle-restrict` for details."
msgstr ""

msgid "What can be pickled and unpickled?"
msgstr ""

msgid "The following types can be pickled:"
msgstr ""

msgid "``None``, ``True``, and ``False``"
msgstr ""

msgid "integers, floating point numbers, complex numbers"
msgstr ""

msgid "strings, bytes, bytearrays"
msgstr ""

msgid "tuples, lists, sets, and dictionaries containing only picklable objects"
msgstr ""

msgid "functions defined at the top level of a module"
msgstr ""

msgid "built-in functions defined at the top level of a module"
msgstr ""

msgid "classes that are defined at the top level of a module"
msgstr ""

msgid "instances of such classes whose :attr:`__dict__` or :meth:`__setstate__` is picklable  (see section :ref:`pickle-inst` for details)"
msgstr ""

msgid "Attempts to pickle unpicklable objects will raise the :exc:`PicklingError` exception; when this happens, an unspecified number of bytes may have already been written to the underlying file.  Trying to pickle a highly recursive data structure may exceed the maximum recursion depth, a :exc:`RuntimeError` will be raised in this case.  You can carefully raise this limit with :func:`sys.setrecursionlimit`."
msgstr ""

msgid "Note that functions (built-in and user-defined) are pickled by \"fully qualified\" name reference, not by value.  This means that only the function name is pickled, along with the name of module the function is defined in.  Neither the function's code, nor any of its function attributes are pickled.  Thus the defining module must be importable in the unpickling environment, and the module must contain the named object, otherwise an exception will be raised. [#]_"
msgstr ""

msgid "Similarly, classes are pickled by named reference, so the same restrictions in the unpickling environment apply.  Note that none of the class's code or data is pickled, so in the following example the class attribute ``attr`` is not restored in the unpickling environment::"
msgstr ""

msgid "class Foo:     attr = 'A class attribute'  picklestring = pickle.dumps(Foo)"
msgstr ""

msgid "These restrictions are why picklable functions and classes must be defined in the top level of a module."
msgstr ""

msgid "Similarly, when class instances are pickled, their class's code and data are not pickled along with them.  Only the instance data are pickled.  This is done on purpose, so you can fix bugs in a class or add methods to the class and still load objects that were created with an earlier version of the class.  If you plan to have long-lived objects that will see many versions of a class, it may be worthwhile to put a version number in the objects so that suitable conversions can be made by the class's :meth:`__setstate__` method."
msgstr ""

msgid "Pickling Class Instances"
msgstr ""

msgid "In this section, we describe the general mechanisms available to you to define, customize, and control how class instances are pickled and unpickled."
msgstr ""

msgid "In most cases, no additional code is needed to make instances picklable.  By default, pickle will retrieve the class and the attributes of an instance via introspection. When a class instance is unpickled, its :meth:`__init__` method is usually *not* invoked.  The default behaviour first creates an uninitialized instance and then restores the saved attributes.  The following code shows an implementation of this behaviour::"
msgstr ""

msgid "def save(obj):     return (obj.__class__, obj.__dict__)  def load(cls, attributes):     obj = cls.__new__(cls)     obj.__dict__.update(attributes)     return obj"
msgstr ""

msgid "Classes can alter the default behaviour by providing one or severals special methods.  In protocol 2 and newer, classes that implements the :meth:`__getnewargs__` method can dictate the values passed to the :meth:`__new__` method upon unpickling.  This is often needed for classes whose :meth:`__new__` method requires arguments."
msgstr ""

msgid "Classes can further influence how their instances are pickled; if the class defines the method :meth:`__getstate__`, it is called and the returned object is pickled as the contents for the instance, instead of the contents of the instance's dictionary.  If the :meth:`__getstate__` method is absent, the instance's :attr:`__dict__` is pickled as usual."
msgstr ""

msgid "Upon unpickling, if the class defines :meth:`__setstate__`, it is called with the unpickled state.  In that case, there is no requirement for the state object to be a dictionary. Otherwise, the pickled state must be a dictionary and its items are assigned to the new instance's dictionary."
msgstr ""

msgid "If :meth:`__getstate__` returns a false value, the :meth:`__setstate__` method will not be called."
msgstr ""

msgid "Refer to the section :ref:`pickle-state` for more information about how to use the methods :meth:`__getstate__` and :meth:`__setstate__`."
msgstr ""

msgid "At unpickling time, some methods like :meth:`__getattr__`, :meth:`__getattribute__`, or :meth:`__setattr__` may be called upon the instance.  In case those methods rely on some internal invariant being true, the type should implement either :meth:`__getinitargs__` or :meth:`__getnewargs__` to establish such an invariant; otherwise, neither :meth:`__new__` nor :meth:`__init__` will be called."
msgstr ""

msgid "As we shall see, pickle does not use directly the methods described above.  In fact, these methods are part of the copy protocol which implements the :meth:`__reduce__` special method.  The copy protocol provides a unified interface for retrieving the data necessary for pickling and copying objects. [#]_"
msgstr ""

msgid "Although powerful, implementing :meth:`__reduce__` directly in your classes is error prone.  For this reason, class designers should use the high-level interface (i.e., :meth:`__getnewargs__`, :meth:`__getstate__` and :meth:`__setstate__`) whenever possible.  We will show, however, cases where using :meth:`__reduce__` is the only option or leads to more efficient pickling or both."
msgstr ""

msgid "The interface is currently defined as follows. The :meth:`__reduce__` method takes no argument and shall return either a string or preferably a tuple (the returned object is often referred to as the \"reduce value\")."
msgstr ""

msgid "If a string is returned, the string should be interpreted as the name of a global variable.  It should be the object's local name relative to its module; the pickle module searches the module namespace to determine the object's module.  This behaviour is typically useful for singletons."
msgstr ""

msgid "When a tuple is returned, it must be between two and five items long.  Optional items can either be omitted, or ``None`` can be provided as their value.  The semantics of each item are in order:"
msgstr ""

msgid "A callable object that will be called to create the initial version of the object."
msgstr ""

msgid "A tuple of arguments for the callable object. An empty tuple must be given if the callable does not accept any argument."
msgstr ""

msgid "Optionally, the object's state, which will be passed to the object's :meth:`__setstate__` method as previously described.  If the object has no such method then, the value must be a dictionary and it will be added to the object's :attr:`__dict__` attribute."
msgstr ""

msgid "Optionally, an iterator (and not a sequence) yielding successive items.  These items will be appended to the object either using ``obj.append(item)`` or, in batch, using ``obj.extend(list_of_items)``.  This is primarily used for list subclasses, but may be used by other classes as long as they have :meth:`append` and :meth:`extend` methods with the appropriate signature. (Whether :meth:`append` or :meth:`extend` is used depends on which pickle protocol version is used as well as the number of items to append, so both must be supported.)"
msgstr ""

msgid "Optionally, an iterator (not a sequence) yielding successive key-value pairs. These items will be stored to the object using ``obj[key] = value``.  This is primarily used for dictionary subclasses, but may be used by other classes as long as they implement :meth:`__setitem__`."
msgstr ""

msgid "Alternatively, a :meth:`__reduce_ex__` method may be defined.  The only difference is this method should take a single integer argument, the protocol version.  When defined, pickle will prefer it over the :meth:`__reduce__` method.  In addition, :meth:`__reduce__` automatically becomes a synonym for the extended version.  The main use for this method is to provide backwards-compatible reduce values for older Python releases."
msgstr ""

msgid "Persistence of External Objects"
msgstr ""

msgid "For the benefit of object persistence, the :mod:`pickle` module supports the notion of a reference to an object outside the pickled data stream.  Such objects are referenced by a persistent ID, which should be either a string of alphanumeric characters (for protocol 0) [#]_ or just an arbitrary object (for any newer protocol)."
msgstr ""

msgid "The resolution of such persistent IDs is not defined by the :mod:`pickle` module; it will delegate this resolution to the user defined methods on the pickler and unpickler, :meth:`persistent_id` and :meth:`persistent_load` respectively."
msgstr ""

msgid "To pickle objects that have an external persistent id, the pickler must have a custom :meth:`persistent_id` method that takes an object as an argument and returns either ``None`` or the persistent id for that object.  When ``None`` is returned, the pickler simply pickles the object as normal.  When a persistent ID string is returned, the pickler will pickle that object, along with a marker so that the unpickler will recognize it as a persistent ID."
msgstr ""

msgid "To unpickle external objects, the unpickler must have a custom :meth:`persistent_load` method that takes a persistent ID object and returns the referenced object."
msgstr ""

msgid "Here is a comprehensive example presenting how persistent ID can be used to pickle external objects by reference."
msgstr ""

msgid "# Simple example presenting how persistent ID can be used to pickle # external objects by reference.  import pickle import sqlite3 from collections import namedtuple  # Simple class representing a record in our database. MemoRecord = namedtuple(\"MemoRecord\", \"key, task\")  class DBPickler(pickle.Pickler):      def persistent_id(self, obj):         # Instead of pickling MemoRecord as a regular class instance, we emit a         # persistent ID.         if isinstance(obj, MemoRecord):             # Here, our persistent ID is simply a tuple, containing a tag and a             # key, which refers to a specific record in the database.             return (\"MemoRecord\", obj.key)         else:             # If obj does not have a persistent ID, return None. This means obj             # needs to be pickled as usual.             return None   class DBUnpickler(pickle.Unpickler):      def __init__(self, file, connection):         super().__init__(file)         self.connection = connection      def persistent_load(self, pid):         # This method is invoked whenever a persistent ID is encountered.         # Here, pid is the tuple returned by DBPickler.         cursor = self.connection.cursor()         type_tag, key_id = pid         if type_tag == \"MemoRecord\":             # Fetch the referenced record from the database and return it.             cursor.execute(\"SELECT * FROM memos WHERE key=?\", (str(key_id),))             key, task = cursor.fetchone()             return MemoRecord(key, task)         else:             # Always raises an error if you cannot return the correct object.             # Otherwise, the unpickler will think None is the object referenced             # by the persistent ID.             raise pickle.UnpicklingError(\"unsupported persistent object\")   def main():     import io, pprint      # Initialize and populate our database.     conn = sqlite3.connect(\":memory:\")     cursor = conn.cursor()     cursor.execute(\"CREATE TABLE memos(key INTEGER PRIMARY KEY, task TEXT)\")     tasks = (         'give food to fish',         'prepare group meeting',         'fight with a zebra',         )     for task in tasks:         cursor.execute(\"INSERT INTO memos VALUES(NULL, ?)\", (task,))      # Fetch the records to be pickled.     cursor.execute(\"SELECT * FROM memos\")     memos = [MemoRecord(key, task) for key, task in cursor]     # Save the records using our custom DBPickler.     file = io.BytesIO()     DBPickler(file).dump(memos)      print(\"Pickled records:\")     pprint.pprint(memos)      # Update a record, just for good measure.     cursor.execute(\"UPDATE memos SET task='learn italian' WHERE key=1\")      # Load the records from the pickle data stream.     file.seek(0)     memos = DBUnpickler(file, conn).load()      print(\"Unpickled records:\")     pprint.pprint(memos)   if __name__ == '__main__':     main()"
msgstr ""

msgid "Handling Stateful Objects"
msgstr ""

msgid "Here's an example that shows how to modify pickling behavior for a class. The :class:`TextReader` class opens a text file, and returns the line number and line contents each time its :meth:`readline` method is called. If a :class:`TextReader` instance is pickled, all attributes *except* the file object member are saved. When the instance is unpickled, the file is reopened, and reading resumes from the last location. The :meth:`__setstate__` and :meth:`__getstate__` methods are used to implement this behavior. ::"
msgstr ""

msgid "class TextReader:     \"\"\"Print and number lines in a text file.\"\"\"      def __init__(self, filename):         self.filename = filename         self.file = open(filename)         self.lineno = 0      def readline(self):         self.lineno += 1         line = self.file.readline()         if not line:             return None         if line.endswith('\\n'):             line = line[:-1]         return \"%i: %s\" % (self.lineno, line)      def __getstate__(self):         # Copy the object's state from self.__dict__ which contains         # all our instance attributes. Always use the dict.copy()         # method to avoid modifying the original state.         state = self.__dict__.copy()         # Remove the unpicklable entries.         del state['file']         return state      def __setstate__(self, state):         # Restore instance attributes (i.e., filename and lineno).         self.__dict__.update(state)         # Restore the previously opened file's state. To do so, we need to         # reopen it and read from it until the line count is restored.         file = open(self.filename)         for _ in range(self.lineno):             file.readline()         # Finally, save the file.         self.file = file"
msgstr ""

msgid "A sample usage might be something like this::"
msgstr ""

msgid ">>> reader = TextReader(\"hello.txt\") >>> reader.readline() '1: Hello world!' >>> reader.readline() '2: I am line number two.' >>> new_reader = pickle.loads(pickle.dumps(reader)) >>> new_reader.readline() '3: Goodbye!'"
msgstr ""

msgid "Restricting Globals"
msgstr ""

msgid "By default, unpickling will import any class or function that it finds in the pickle data.  For many applications, this behaviour is unacceptable as it permits the unpickler to import and invoke arbitrary code.  Just consider what this hand-crafted pickle data stream does when loaded::"
msgstr ""

msgid ">>> import pickle >>> pickle.loads(b\"cos\\nsystem\\n(S'echo hello world'\\ntR.\") hello world 0"
msgstr ""

msgid "In this example, the unpickler imports the :func:`os.system` function and then apply the string argument \"echo hello world\".  Although this example is inoffensive, it is not difficult to imagine one that could damage your system."
msgstr ""

msgid "For this reason, you may want to control what gets unpickled by customizing :meth:`Unpickler.find_class`.  Unlike its name suggests, :meth:`find_class` is called whenever a global (i.e., a class or a function) is requested.  Thus it is possible to either forbid completely globals or restrict them to a safe subset."
msgstr ""

msgid "Here is an example of an unpickler allowing only few safe classes from the :mod:`builtins` module to be loaded::"
msgstr ""

msgid "import builtins import io import pickle  safe_builtins = {     'range',     'complex',     'set',     'frozenset',     'slice', }  class RestrictedUnpickler(pickle.Unpickler):      def find_class(self, module, name):         # Only allow safe classes from builtins.         if module == \"builtins\" and name in safe_builtins:             return getattr(builtins, name)         # Forbid everything else.         raise pickle.UnpicklingError(\"global '%s.%s' is forbidden\" %                                      (module, name))  def restricted_loads(s):     \"\"\"Helper function analogous to pickle.loads().\"\"\"     return RestrictedUnpickler(io.BytesIO(s)).load()"
msgstr ""

msgid "A sample usage of our unpickler working has intended::"
msgstr ""

msgid ">>> restricted_loads(pickle.dumps([1, 2, range(15)])) [1, 2, range(0, 15)] >>> restricted_loads(b\"cos\\nsystem\\n(S'echo hello world'\\ntR.\") Traceback (most recent call last):   ... pickle.UnpicklingError: global 'os.system' is forbidden >>> restricted_loads(b'cbuiltins\\neval\\n' ...                  b'(S\\'getattr(__import__(\"os\"), \"system\")' ...                  b'(\"echo hello world\")\\'\\ntR.') Traceback (most recent call last):   ... pickle.UnpicklingError: global 'builtins.eval' is forbidden"
msgstr ""

msgid "As our examples shows, you have to be careful with what you allow to be unpickled.  Therefore if security is a concern, you may want to consider alternatives such as the marshalling API in :mod:`xmlrpc.client` or third-party solutions."
msgstr ""

msgid "For the simplest code, use the :func:`dump` and :func:`load` functions. ::"
msgstr ""

msgid "import pickle  # An arbitrary collection of objects supported by pickle. data = {     'a': [1, 2.0, 3, 4+6j],     'b': (\"character string\", b\"byte string\"),     'c': set([None, True, False]) }  with open('data.pickle', 'wb') as f:     # Pickle the 'data' dictionary using the highest protocol available.     pickle.dump(data, f, pickle.HIGHEST_PROTOCOL)"
msgstr ""

msgid "The following example reads the resulting pickled data. ::"
msgstr ""

msgid "import pickle  with open('data.pickle', 'rb') as f:     # The protocol version used is detected automatically, so we do not     # have to specify it.     data = pickle.load(f)"
msgstr ""

msgid "Pickle interface constructor registration for extension types."
msgstr ""

msgid "Tools for working with and analyzing pickled data."
msgstr ""

msgid "Indexed databases of objects; uses :mod:`pickle`."
msgstr ""

msgid "Shallow and deep object copying."
msgstr ""

msgid "High-performance serialization of built-in types."
msgstr ""

msgid "Don't confuse this with the :mod:`marshal` module"
msgstr ""

msgid "The exception raised will likely be an :exc:`ImportError` or an :exc:`AttributeError` but it could be something else."
msgstr ""

msgid "The :mod:`copy` module uses this protocol for shallow and deep copying operations."
msgstr ""

msgid "The limitation on alphanumeric characters is due to the fact the persistent IDs, in protocol 0, are delimited by the newline character.  Therefore if any kind of newline characters occurs in persistent IDs, the resulting pickle will become unreadable."
msgstr ""

msgid ":mod:`pickletools` --- Tools for pickle developers"
msgstr ""

msgid "This module contains various constants relating to the intimate details of the :mod:`pickle` module, some lengthy comments about the implementation, and a few useful functions for analyzing pickled data.  The contents of this module are useful for Python core developers who are working on the :mod:`pickle`; ordinary users of the :mod:`pickle` module probably won't find the :mod:`pickletools` module relevant."
msgstr ""

msgid "Outputs a symbolic disassembly of the pickle to the file-like object *out*, defaulting to ``sys.stdout``.  *pickle* can be a string or a file-like object. *memo* can be a Python dictionary that will be used as the pickle's memo; it can be used to perform disassemblies across multiple pickles created by the same pickler. Successive levels, indicated by ``MARK`` opcodes in the stream, are indented by *indentlevel* spaces."
msgstr ""

msgid "Provides an :term:`iterator` over all of the opcodes in a pickle, returning a sequence of ``(opcode, arg, pos)`` triples.  *opcode* is an instance of an :class:`OpcodeInfo` class; *arg* is the decoded value, as a Python object, of the opcode's argument; *pos* is the position at which this opcode is located. *pickle* can be a string or a file-like object."
msgstr ""

msgid "Returns a new equivalent pickle string after eliminating unused ``PUT`` opcodes. The optimized pickle is shorter, takes less transmission time, requires less storage space, and unpickles more efficiently."
msgstr ""

msgid ":mod:`pipes` --- Interface to shell pipelines"
msgstr ""

msgid "The :mod:`pipes` module defines a class to abstract the concept of a *pipeline* --- a sequence of converters from one file to  another."
msgstr ""

msgid "Because the module uses :program:`/bin/sh` command lines, a POSIX or compatible shell for :func:`os.system` and :func:`os.popen` is required."
msgstr ""

msgid "The :mod:`pipes` module defines the following class:"
msgstr ""

msgid "An abstraction of a pipeline."
msgstr ""

msgid ">>> import pipes >>> t=pipes.Template() >>> t.append('tr a-z A-Z', '--') >>> f=t.open('/tmp/1', 'w') >>> f.write('hello world') >>> f.close() >>> open('/tmp/1').read() 'HELLO WORLD'"
msgstr ""

msgid "Template Objects"
msgstr ""

msgid "Template objects following methods:"
msgstr ""

msgid "Restore a pipeline template to its initial state."
msgstr ""

msgid "Return a new, equivalent, pipeline template."
msgstr ""

msgid "If *flag* is true, turn debugging on. Otherwise, turn debugging off. When debugging is on, commands to be executed are printed, and the shell is given ``set -x`` command to be more verbose."
msgstr ""

msgid "Append a new action at the end. The *cmd* variable must be a valid bourne shell command. The *kind* variable consists of two letters."
msgstr ""

msgid "The first letter can be either of ``'-'`` (which means the command reads its standard input), ``'f'`` (which means the commands reads a given file on the command line) or ``'.'`` (which means the commands reads no input, and hence must be first.)"
msgstr ""

msgid "Similarly, the second letter can be either of ``'-'`` (which means  the command writes to standard output), ``'f'`` (which means the  command writes a file on the command line) or ``'.'`` (which means the command does not write anything, and hence must be last.)"
msgstr ""

msgid "Add a new action at the beginning. See :meth:`append` for explanations of the arguments."
msgstr ""

msgid "Return a file-like object, open to *file*, but read from or written to by the pipeline.  Note that only one of ``'r'``, ``'w'`` may be given."
msgstr ""

msgid "Copy *infile* to *outfile* through the pipe."
msgstr ""

msgid ":mod:`pkgutil` --- Package extension utility"
msgstr ""

msgid "This module provides functions to manipulate packages:"
msgstr ""

msgid "Extend the search path for the modules which comprise a package. Intended use is to place the following code in a package's :file:`__init__.py`::"
msgstr ""

msgid "from pkgutil import extend_path __path__ = extend_path(__path__, __name__)"
msgstr ""

msgid "This will add to the package's ``__path__`` all subdirectories of directories on ``sys.path`` named after the package.  This is useful if one wants to distribute different parts of a single logical package as multiple directories."
msgstr ""

msgid "It also looks for :file:`\\*.pkg` files beginning where ``*`` matches the *name* argument.  This feature is similar to :file:`\\*.pth` files (see the :mod:`site` module for more information), except that it doesn't special-case lines starting with ``import``.  A :file:`\\*.pkg` file is trusted at face value: apart from checking for duplicates, all entries found in a :file:`\\*.pkg` file are added to the path, regardless of whether they exist on the filesystem.  (This is a feature.)"
msgstr ""

msgid "If the input path is not a list (as is the case for frozen packages) it is returned unchanged.  The input path is not modified; an extended copy is returned.  Items are only appended to the copy at the end."
msgstr ""

msgid "It is assumed that ``sys.path`` is a sequence.  Items of ``sys.path`` that are not strings referring to existing directories are ignored. Unicode items on ``sys.path`` that cause errors when used as filenames may cause this function to raise an exception (in line with :func:`os.path.isdir` behavior)."
msgstr ""

msgid "Get a resource from a package."
msgstr ""

msgid "This is a wrapper for the :pep:`302` loader :func:`get_data` API. The package argument should be the name of a package, in standard module format (foo.bar). The resource argument should be in the form of a relative filename, using ``/`` as the path separator. The parent directory name ``..`` is not allowed, and nor is a rooted name (starting with a ``/``)."
msgstr ""

msgid "The function returns a binary string that is the contents of the specified resource."
msgstr ""

msgid "For packages located in the filesystem, which have already been imported, this is the rough equivalent of::"
msgstr ""

msgid "d = os.path.dirname(sys.modules[package].__file__) data = open(os.path.join(d, resource), 'rb').read()"
msgstr ""

msgid "If the package cannot be located or loaded, or it uses a :pep:`302` loader which does not support :func:`get_data`, then None is returned."
msgstr ""

msgid ":mod:`platform` ---  Access to underlying platform's identifying data"
msgstr ""

msgid "Specific platforms listed alphabetically, with Linux included in the Unix section."
msgstr ""

msgid "Cross Platform"
msgstr ""

msgid "Queries the given executable (defaults to the Python interpreter binary) for various architecture information."
msgstr ""

msgid "Returns a tuple ``(bits, linkage)`` which contain information about the bit architecture and the linkage format used for the executable. Both values are returned as strings."
msgstr ""

msgid "Values that cannot be determined are returned as given by the parameter presets. If bits is given as ``''``, the :cfunc:`sizeof(pointer)` (or :cfunc:`sizeof(long)` on Python version < 1.5.2) is used as indicator for the supported pointer size."
msgstr ""

msgid "The function relies on the system's :file:`file` command to do the actual work. This is available on most if not all Unix  platforms and some non-Unix platforms and then only if the executable points to the Python interpreter.  Reasonable defaults are used when the above needs are not met."
msgstr ""

msgid "Returns the machine type, e.g. ``'i386'``. An empty string is returned if the value cannot be determined."
msgstr ""

msgid "Returns the computer's network name (may not be fully qualified!). An empty string is returned if the value cannot be determined."
msgstr ""

msgid "Returns a single string identifying the underlying platform with as much useful information as possible."
msgstr ""

msgid "The output is intended to be *human readable* rather than machine parseable. It may look different on different platforms and this is intended."
msgstr ""

msgid "If *aliased* is true, the function will use aliases for various platforms that report system names which differ from their common names, for example SunOS will be reported as Solaris.  The :func:`system_alias` function is used to implement this."
msgstr ""

msgid "Setting *terse* to true causes the function to return only the absolute minimum information needed to identify the platform."
msgstr ""

msgid "Returns the (real) processor name, e.g. ``'amdk6'``."
msgstr ""

msgid "An empty string is returned if the value cannot be determined. Note that many platforms do not provide this information or simply return the same value as for :func:`machine`.  NetBSD does this."
msgstr ""

msgid "Returns a tuple ``(buildno, builddate)`` stating the Python build number and date as strings."
msgstr ""

msgid "Returns a string identifying the compiler used for compiling Python."
msgstr ""

msgid "Returns a string identifying the Python implementation SCM branch."
msgstr ""

msgid "Returns a string identifying the Python implementation. Possible return values are: 'CPython', 'IronPython', 'Jython'."
msgstr ""

msgid "Returns a string identifying the Python implementation SCM revision."
msgstr ""

msgid "Returns the Python version as string ``'major.minor.patchlevel'``"
msgstr ""

msgid "Note that unlike the Python ``sys.version``, the returned value will always include the patchlevel (it defaults to 0)."
msgstr ""

msgid "Returns the Python version as tuple ``(major, minor, patchlevel)`` of strings."
msgstr ""

msgid "Note that unlike the Python ``sys.version``, the returned value will always include the patchlevel (it defaults to ``'0'``)."
msgstr ""

msgid "Returns the system's release, e.g. ``'2.2.0'`` or ``'NT'`` An empty string is returned if the value cannot be determined."
msgstr ""

msgid "Returns the system/OS name, e.g. ``'Linux'``, ``'Windows'``, or ``'Java'``. An empty string is returned if the value cannot be determined."
msgstr ""

msgid "Returns ``(system, release, version)`` aliased to common marketing names used for some systems.  It also does some reordering of the information in some cases where it would otherwise cause confusion."
msgstr ""

msgid "Returns the system's release version, e.g. ``'#3 on degas'``. An empty string is returned if the value cannot be determined."
msgstr ""

msgid "Fairly portable uname interface. Returns a tuple of strings ``(system, node, release, version, machine, processor)`` identifying the underlying platform."
msgstr ""

msgid "Note that unlike the :func:`os.uname` function this also returns possible processor information as additional tuple entry."
msgstr ""

msgid "Entries which cannot be determined are set to ``''``."
msgstr ""

msgid "Java Platform"
msgstr ""

msgid "Version interface for Jython."
msgstr ""

msgid "Returns a tuple ``(release, vendor, vminfo, osinfo)`` with *vminfo* being a tuple ``(vm_name, vm_release, vm_vendor)`` and *osinfo* being a tuple ``(os_name, os_version, os_arch)``. Values which cannot be determined are set to the defaults given as parameters (which all default to ``''``)."
msgstr ""

msgid "Windows Platform"
msgstr ""

msgid "Get additional version information from the Windows Registry and return a tuple ``(version, csd, ptype)`` referring to version number, CSD level and OS type (multi/single processor)."
msgstr ""

msgid "As a hint: *ptype* is ``'Uniprocessor Free'`` on single processor NT machines and ``'Multiprocessor Free'`` on multi processor machines. The *'Free'* refers to the OS version being free of debugging code. It could also state *'Checked'* which means the OS version uses debugging code, i.e. code that checks arguments, ranges, etc."
msgstr ""

msgid "Note: this function works best with Mark Hammond's :mod:`win32all` package installed, but also on Python 2.3 and later (support for this was added in Python 2.6). It obviously only runs on Win32 compatible platforms."
msgstr ""

msgid "Win95/98 specific"
msgstr ""

msgid "Portable :func:`popen` interface.  Find a working popen implementation preferring :func:`win32pipe.popen`.  On Windows NT, :func:`win32pipe.popen` should work; on Windows 9x it hangs due to bugs in the MS C library."
msgstr ""

msgid "Mac OS Platform"
msgstr ""

msgid "Get Mac OS version information and return it as tuple ``(release, versioninfo, machine)`` with *versioninfo* being a tuple ``(version, dev_stage, non_release_version)``."
msgstr ""

msgid "Entries which cannot be determined are set to ``''``.  All tuple entries are strings."
msgstr ""

msgid "Documentation for the underlying :cfunc:`gestalt` API is available online at http://www.rgaros.nl/gestalt/."
msgstr ""

msgid "Unix Platforms"
msgstr ""

msgid "This is another name for :func:`linux_distribution`."
msgstr ""

msgid "Tries to determine the name of the Linux OS distribution name."
msgstr ""

msgid "``supported_dists`` may be given to define the set of Linux distributions to look for. It defaults to a list of currently supported Linux distributions identified by their release file name."
msgstr ""

msgid "If ``full_distribution_name`` is true (default), the full distribution read from the OS is returned. Otherwise the short name taken from ``supported_dists`` is used."
msgstr ""

msgid "Returns a tuple ``(distname,version,id)`` which defaults to the args given as parameters.  ``id`` is the item in parentheses after the version number.  It is usually the version codename."
msgstr ""

msgid "Tries to determine the libc version against which the file executable (defaults to the Python interpreter) is linked.  Returns a tuple of strings ``(lib, version)`` which default to the given parameters in case the lookup fails."
msgstr ""

msgid "Note that this function has intimate knowledge of how different libc versions add symbols to the executable is probably only usable for executables compiled using :program:`gcc`."
msgstr ""

msgid "The file is read and scanned in chunks of *chunksize* bytes."
msgstr ""

msgid ":mod:`plistlib` --- Generate and parse Mac OS X ``.plist`` files"
msgstr ""

msgid "This module provides an interface for reading and writing the \"property list\" XML files used mainly by Mac OS X."
msgstr ""

msgid "The property list (``.plist``) file format is a simple XML pickle supporting basic object types, like dictionaries, lists, numbers and strings.  Usually the top level object is a dictionary."
msgstr ""

msgid "To write out and to parse a plist file, use the :func:`writePlist` and :func:`readPlist` functions."
msgstr ""

msgid "To work with plist data in bytes objects, use :func:`writePlistToBytes` and :func:`readPlistFromBytes`."
msgstr ""

msgid "Values can be strings, integers, floats, booleans, tuples, lists, dictionaries (but only with string keys), :class:`Data` or :class:`datetime.datetime` objects.  String values (including dictionary keys) have to be unicode strings -- they will be written out as UTF-8."
msgstr ""

msgid "The ``<data>`` plist type is supported through the :class:`Data` class.  This is a thin wrapper around a Python bytes object.  Use :class:`Data` if your strings contain control characters."
msgstr ""

msgid "Apple's documentation of the file format."
msgstr ""

msgid "This module defines the following functions:"
msgstr ""

msgid "Read a plist file. *pathOrFile* may either be a file name or a (readable) file object.  Return the unpacked root object (which usually is a dictionary)."
msgstr ""

msgid "The XML data is parsed using the Expat parser from :mod:`xml.parsers.expat` -- see its documentation for possible exceptions on ill-formed XML. Unknown elements will simply be ignored by the plist parser."
msgstr ""

msgid "Write *rootObject* to a plist file. *pathOrFile* may either be a file name or a (writable) file object."
msgstr ""

msgid "A :exc:`TypeError` will be raised if the object is of an unsupported type or a container that contains objects of unsupported types."
msgstr ""

msgid "Read a plist data from a bytes object.  Return the root object."
msgstr ""

msgid "Return *rootObject* as a plist-formatted bytes object."
msgstr ""

msgid "The following class is available:"
msgstr ""

msgid "Return a \"data\" wrapper object around the bytes object *data*.  This is used in functions converting from/to plists to represent the ``<data>`` type available in plists."
msgstr ""

msgid "It has one attribute, :attr:`data`, that can be used to retrieve the Python bytes object stored in it."
msgstr ""

msgid "Generating a plist::"
msgstr ""

msgid "pl = dict(     aString = \"Doodah\",     aList = [\"A\", \"B\", 12, 32.1, [1, 2, 3]],     aFloat = 0.1,     anInt = 728,     aDict = dict(         anotherString = \"<hello & hi there!>\",         aThirdString = \"M\\xe4ssig, Ma\\xdf\",         aTrueValue = True,         aFalseValue = False,     ),     someData = Data(b\"<binary gunk>\"),     someMoreData = Data(b\"<lots of binary gunk>\" * 10),     aDate = datetime.datetime.fromtimestamp(time.mktime(time.gmtime())), ) writePlist(pl, fileName)"
msgstr ""

msgid "Parsing a plist::"
msgstr ""

msgid "pl = readPlist(pathOrFile) print(pl[\"aKey\"])"
msgstr ""

msgid ":mod:`poplib` --- POP3 protocol client"
msgstr ""

msgid "This module defines a class, :class:`POP3`, which encapsulates a connection to a POP3 server and implements the protocol as defined in :rfc:`1725`.  The :class:`POP3` class supports both the minimal and optional command sets. Additionally, this module provides a class :class:`POP3_SSL`, which provides support for connecting to POP3 servers that use SSL as an underlying protocol layer."
msgstr ""

msgid "Note that POP3, though widely supported, is obsolescent.  The implementation quality of POP3 servers varies widely, and too many are quite poor. If your mailserver supports IMAP, you would be better off using the :class:`imaplib.IMAP4` class, as IMAP servers tend to be better implemented."
msgstr ""

msgid "A single class is provided by the :mod:`poplib` module:"
msgstr ""

msgid "This class implements the actual POP3 protocol.  The connection is created when the instance is initialized. If *port* is omitted, the standard POP3 port (110) is used. The optional *timeout* parameter specifies a timeout in seconds for the connection attempt (if not specified, the global default timeout setting will be used)."
msgstr ""

msgid "This is a subclass of :class:`POP3` that connects to the server over an SSL encrypted socket.  If *port* is not specified, 995, the standard POP3-over-SSL port is used.  *keyfile* and *certfile* are also optional - they can contain a PEM formatted private key and certificate chain file for the SSL connection. *timeout* works as in the :class:`POP3` constructor."
msgstr ""

msgid "One exception is defined as an attribute of the :mod:`poplib` module:"
msgstr ""

msgid "Exception raised on any errors from this module (errors from :mod:`socket` module are not caught). The reason for the exception is passed to the constructor as a string."
msgstr ""

msgid "The standard Python IMAP module."
msgstr ""

msgid "The FAQ for the :program:`fetchmail` POP/IMAP client collects information on POP3 server variations and RFC noncompliance that may be useful if you need to write an application based on the POP protocol."
msgstr ""

msgid "POP3 Objects"
msgstr ""

msgid "All POP3 commands are represented by methods of the same name, in lower-case; most return the response text sent by the server."
msgstr ""

msgid "An :class:`POP3` instance has the following methods:"
msgstr ""

msgid "Returns the greeting string sent by the POP3 server."
msgstr ""

msgid "Send user command, response should indicate that a password is required."
msgstr ""

msgid "Send password, response includes message count and mailbox size. Note: the mailbox on the server is locked until :meth:`quit` is called."
msgstr ""

msgid "Use the more secure APOP authentication to log into the POP3 server."
msgstr ""

msgid "Use RPOP authentication (similar to UNIX r-commands) to log into POP3 server."
msgstr ""

msgid "Get mailbox status.  The result is a tuple of 2 integers: ``(message count, mailbox size)``."
msgstr ""

msgid "Request message list, result is in the form ``(response, ['mesg_num octets', ...], octets)``. If *which* is set, it is the message to list."
msgstr ""

msgid "Retrieve whole message number *which*, and set its seen flag. Result is in form ``(response, ['line', ...], octets)``."
msgstr ""

msgid "Flag message number *which* for deletion.  On most servers deletions are not actually performed until QUIT (the major exception is Eudora QPOP, which deliberately violates the RFCs by doing pending deletes on any disconnect)."
msgstr ""

msgid "Remove any deletion marks for the mailbox."
msgstr ""

msgid "Do nothing.  Might be used as a keep-alive."
msgstr ""

msgid "Signoff:  commit changes, unlock mailbox, drop connection."
msgstr ""

msgid "Retrieves the message header plus *howmuch* lines of the message after the header of message number *which*. Result is in form ``(response, ['line', ...], octets)``."
msgstr ""

msgid "The POP3 TOP command this method uses, unlike the RETR command, doesn't set the message's seen flag; unfortunately, TOP is poorly specified in the RFCs and is frequently broken in off-brand servers. Test this method by hand against the POP3 servers you will use before trusting it."
msgstr ""

msgid "Return message digest (unique id) list. If *which* is specified, result contains the unique id for that message in the form ``'response mesgnum uid``, otherwise result is list ``(response, ['mesgnum uid', ...], octets)``."
msgstr ""

msgid "Instances of :class:`POP3_SSL` have no additional methods. The interface of this subclass is identical to its parent."
msgstr ""

msgid "POP3 Example"
msgstr ""

msgid "import getpass, poplib  M = poplib.POP3('localhost') M.user(getpass.getuser()) M.pass_(getpass.getpass()) numMessages = len(M.list()[1]) for i in range(numMessages):     for j in M.retr(i+1)[1]:         print(j)"
msgstr ""

msgid ":mod:`posix` --- The most common POSIX system calls"
msgstr ""

msgid "This module provides access to operating system functionality that is standardized by the C Standard and the POSIX standard (a thinly disguised Unix interface)."
msgstr ""

msgid "**Do not import this module directly.**  Instead, import the module :mod:`os`, which provides a *portable* version of this interface.  On Unix, the :mod:`os` module provides a superset of the :mod:`posix` interface.  On non-Unix operating systems the :mod:`posix` module is not available, but a subset is always available through the :mod:`os` interface.  Once :mod:`os` is imported, there is *no* performance penalty in using it instead of :mod:`posix`.  In addition, :mod:`os` provides some additional functionality, such as automatically calling :func:`putenv` when an entry in ``os.environ`` is changed."
msgstr ""

msgid "Errors are reported as exceptions; the usual exceptions are given for type errors, while errors reported by the system calls raise :exc:`OSError`."
msgstr ""

msgid "Large File Support"
msgstr ""

msgid "Several operating systems (including AIX, HP-UX, Irix and Solaris) provide support for files that are larger than 2 GB from a C programming model where :ctype:`int` and :ctype:`long` are 32-bit values. This is typically accomplished by defining the relevant size and offset types as 64-bit values. Such files are sometimes referred to as :dfn:`large files`."
msgstr ""

msgid "Large file support is enabled in Python when the size of an :ctype:`off_t` is larger than a :ctype:`long` and the :ctype:`long long` type is available and is at least as large as an :ctype:`off_t`. It may be necessary to configure and compile Python with certain compiler flags to enable this mode. For example, it is enabled by default with recent versions of Irix, but with Solaris 2.6 and 2.7 you need to do something like::"
msgstr ""

msgid "CFLAGS=\"`getconf LFS_CFLAGS`\" OPT=\"-g -O2 $CFLAGS\" \\         ./configure"
msgstr ""

msgid "On large-file-capable Linux systems, this might work::"
msgstr ""

msgid "CFLAGS='-D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64' OPT=\"-g -O2 $CFLAGS\" \\         ./configure"
msgstr ""

msgid "Notable Module Contents"
msgstr ""

msgid "In addition to many functions described in the :mod:`os` module documentation, :mod:`posix` defines the following data item:"
msgstr ""

msgid "A dictionary representing the string environment at the time the interpreter was started. Keys and values are bytes on Unix and str on Windows. For example, ``environ[b'HOME']`` (``environ['HOME']`` on Windows) is the pathname of your home directory, equivalent to ``getenv(\"HOME\")`` in C."
msgstr ""

msgid "Modifying this dictionary does not affect the string environment passed on by :func:`execv`, :func:`popen` or :func:`system`; if you need to change the environment, pass ``environ`` to :func:`execve` or add variable assignments and export statements to the command string for :func:`system` or :func:`popen`."
msgstr ""

msgid "The :mod:`os` module provides an alternate implementation of ``environ`` which updates the environment on modification. Note also that updating :data:`os.environ` will render this dictionary obsolete. Use of the :mod:`os` module version of this is recommended over direct access to the :mod:`posix` module."
msgstr ""

msgid ":mod:`pprint` --- Data pretty printer"
msgstr ""

msgid "The :mod:`pprint` module provides a capability to \"pretty-print\" arbitrary Python data structures in a form which can be used as input to the interpreter. If the formatted structures include objects which are not fundamental Python types, the representation may not be loadable.  This may be the case if objects such as files, sockets, classes, or instances are included, as well as many other built-in objects which are not representable as Python constants."
msgstr ""

msgid "The formatted representation keeps objects on a single line if it can, and breaks them onto multiple lines if they don't fit within the allowed width. Construct :class:`PrettyPrinter` objects explicitly if you need to adjust the width constraint."
msgstr ""

msgid "Dictionaries are sorted by key before the display is computed."
msgstr ""

msgid "The :mod:`pprint` module defines one class:"
msgstr ""

msgid "Construct a :class:`PrettyPrinter` instance.  This constructor understands several keyword parameters.  An output stream may be set using the *stream* keyword; the only method used on the stream object is the file protocol's :meth:`write` method.  If not specified, the :class:`PrettyPrinter` adopts ``sys.stdout``.  Three additional parameters may be used to control the formatted representation.  The keywords are *indent*, *depth*, and *width*.  The amount of indentation added for each recursive level is specified by *indent*; the default is one.  Other values can cause output to look a little odd, but can make nesting easier to spot.  The number of levels which may be printed is controlled by *depth*; if the data structure being printed is too deep, the next contained level is replaced by ``...``.  By default, there is no constraint on the depth of the objects being formatted.  The desired output width is constrained using the *width* parameter; the default is 80 characters.  If a structure cannot be formatted within the constrained width, a best effort will be made."
msgstr ""

msgid ">>> import pprint >>> stuff = ['spam', 'eggs', 'lumberjack', 'knights', 'ni'] >>> stuff.insert(0, stuff[:]) >>> pp = pprint.PrettyPrinter(indent=4) >>> pp.pprint(stuff) [   ['spam', 'eggs', 'lumberjack', 'knights', 'ni'],     'spam',     'eggs',     'lumberjack',     'knights',     'ni'] >>> tup = ('spam', ('eggs', ('lumberjack', ('knights', ('ni', ('dead', ... ('parrot', ('fresh fruit',)))))))) >>> pp = pprint.PrettyPrinter(depth=6) >>> pp.pprint(tup) ('spam', ('eggs', ('lumberjack', ('knights', ('ni', ('dead', (...)))))))"
msgstr ""

msgid "The :class:`PrettyPrinter` class supports several derivative functions:"
msgstr ""

msgid "Return the formatted representation of *object* as a string.  *indent*, *width* and *depth* will be passed to the :class:`PrettyPrinter` constructor as formatting parameters."
msgstr ""

msgid "Prints the formatted representation of *object* on *stream*, followed by a newline.  If *stream* is ``None``, ``sys.stdout`` is used.  This may be used in the interactive interpreter instead of the :func:`print` function for inspecting values (you can even reassign ``print = pprint.pprint`` for use within a scope).  *indent*, *width* and *depth* will be passed to the :class:`PrettyPrinter` constructor as formatting parameters."
msgstr ""

msgid ">>> import pprint >>> stuff = ['spam', 'eggs', 'lumberjack', 'knights', 'ni'] >>> stuff.insert(0, stuff) >>> pprint.pprint(stuff) [<Recursion on list with id=...>,  'spam',  'eggs',  'lumberjack',  'knights',  'ni']"
msgstr ""

msgid "Determine if the formatted representation of *object* is \"readable,\" or can be used to reconstruct the value using :func:`eval`.  This always returns ``False`` for recursive objects."
msgstr ""

msgid ">>> pprint.isreadable(stuff) False"
msgstr ""

msgid "Determine if *object* requires a recursive representation."
msgstr ""

msgid "One more support function is also defined:"
msgstr ""

msgid "Return a string representation of *object*, protected against recursive data structures.  If the representation of *object* exposes a recursive entry, the recursive reference will be represented as ``<Recursion on typename with id=number>``.  The representation is not otherwise formatted."
msgstr ""

msgid ">>> pprint.saferepr(stuff) \"[<Recursion on list with id=...>, 'spam', 'eggs', 'lumberjack', 'knights', 'ni']\""
msgstr ""

msgid "PrettyPrinter Objects"
msgstr ""

msgid ":class:`PrettyPrinter` instances have the following methods:"
msgstr ""

msgid "Return the formatted representation of *object*.  This takes into account the options passed to the :class:`PrettyPrinter` constructor."
msgstr ""

msgid "Print the formatted representation of *object* on the configured stream, followed by a newline."
msgstr ""

msgid "The following methods provide the implementations for the corresponding functions of the same names.  Using these methods on an instance is slightly more efficient since new :class:`PrettyPrinter` objects don't need to be created."
msgstr ""

msgid "Determine if the formatted representation of the object is \"readable,\" or can be used to reconstruct the value using :func:`eval`.  Note that this returns ``False`` for recursive objects.  If the *depth* parameter of the :class:`PrettyPrinter` is set and the object is deeper than allowed, this returns ``False``."
msgstr ""

msgid "Determine if the object requires a recursive representation."
msgstr ""

msgid "This method is provided as a hook to allow subclasses to modify the way objects are converted to strings.  The default implementation uses the internals of the :func:`saferepr` implementation."
msgstr ""

msgid "Returns three values: the formatted version of *object* as a string, a flag indicating whether the result is readable, and a flag indicating whether recursion was detected.  The first argument is the object to be presented.  The second is a dictionary which contains the :func:`id` of objects that are part of the current presentation context (direct and indirect containers for *object* that are affecting the presentation) as the keys; if an object needs to be presented which is already represented in *context*, the third return value should be ``True``.  Recursive calls to the :meth:`format` method should add additional entries for containers to this dictionary.  The third argument, *maxlevels*, gives the requested limit to recursion; this will be ``0`` if there is no requested limit.  This argument should be passed unmodified to recursive calls. The fourth argument, *level*, gives the current level; recursive calls should be passed a value less than that of the current call."
msgstr ""

msgid "pprint Example"
msgstr ""

msgid "This example demonstrates several uses of the :func:`pprint` function and its parameters."
msgstr ""

msgid ">>> import pprint >>> tup = ('spam', ('eggs', ('lumberjack', ('knights', ('ni', ('dead', ... ('parrot', ('fresh fruit',)))))))) >>> stuff = ['a' * 10, tup, ['a' * 30, 'b' * 30], ['c' * 20, 'd' * 20]] >>> pprint.pprint(stuff) ['aaaaaaaaaa',  ('spam',   ('eggs',    ('lumberjack',     ('knights', ('ni', ('dead', ('parrot', ('fresh fruit',)))))))),  ['aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'],  ['cccccccccccccccccccc', 'dddddddddddddddddddd']] >>> pprint.pprint(stuff, depth=3) ['aaaaaaaaaa',  ('spam', ('eggs', (...))),  ['aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'],  ['cccccccccccccccccccc', 'dddddddddddddddddddd']] >>> pprint.pprint(stuff, width=60) ['aaaaaaaaaa',  ('spam',   ('eggs',    ('lumberjack',     ('knights',      ('ni', ('dead', ('parrot', ('fresh fruit',)))))))),  ['aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',   'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'],  ['cccccccccccccccccccc', 'dddddddddddddddddddd']]"
msgstr ""

msgid "The Python Profilers"
msgstr ""

msgid "Copyright © 1994, by InfoSeek Corporation, all rights reserved."
msgstr ""

msgid "Written by James Roskind. [#]_"
msgstr ""

msgid "Permission to use, copy, modify, and distribute this Python software and its associated documentation for any purpose (subject to the restriction in the following sentence) without fee is hereby granted, provided that the above copyright notice appears in all copies, and that both that copyright notice and this permission notice appear in supporting documentation, and that the name of InfoSeek not be used in advertising or publicity pertaining to distribution of the software without specific, written prior permission.  This permission is explicitly restricted to the copying and modification of the software to remain in Python, compiled Python, or other languages (such as C) wherein the modified or derived code is exclusively imported into a Python module."
msgstr ""

msgid "INFOSEEK CORPORATION DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL INFOSEEK CORPORATION BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE."
msgstr ""

msgid "Introduction to the profilers"
msgstr ""

msgid "A :dfn:`profiler` is a program that describes the run time performance of a program, providing a variety of statistics.  This documentation describes the profiler functionality provided in the modules :mod:`cProfile`, :mod:`profile` and :mod:`pstats`.  This profiler provides :dfn:`deterministic profiling` of Python programs.  It also provides a series of report generation tools to allow users to rapidly examine the results of a profile operation."
msgstr ""

msgid "The Python standard library provides two different profilers:"
msgstr ""

msgid ":mod:`cProfile` is recommended for most users; it's a C extension with reasonable overhead that makes it suitable for profiling long-running programs. Based on :mod:`lsprof`, contributed by Brett Rosen and Ted Czotter."
msgstr ""

msgid ":mod:`profile`, a pure Python module whose interface is imitated by :mod:`cProfile`.  Adds significant overhead to profiled programs. If you're trying to extend the profiler in some way, the task might be easier with this module. Copyright © 1994, by InfoSeek Corporation."
msgstr ""

msgid "The :mod:`profile` and :mod:`cProfile` modules export the same interface, so they are mostly interchangeable; :mod:`cProfile` has a much lower overhead but is newer and might not be available on all systems. :mod:`cProfile` is really a compatibility layer on top of the internal :mod:`_lsprof` module."
msgstr ""

msgid "Instant User's Manual"
msgstr ""

msgid "This section is provided for users that \"don't want to read the manual.\" It provides a very brief overview, and allows a user to rapidly perform profiling on an existing application."
msgstr ""

msgid "To profile an application with a main entry point of :func:`foo`, you would add the following to your module::"
msgstr ""

msgid "import cProfile cProfile.run('foo()')"
msgstr ""

msgid "(Use :mod:`profile` instead of :mod:`cProfile` if the latter is not available on your system.)"
msgstr ""

msgid "The above action would cause :func:`foo` to be run, and a series of informative lines (the profile) to be printed.  The above approach is most useful when working with the interpreter.  If you would like to save the results of a profile into a file for later examination, you can supply a file name as the second argument to the :func:`run` function::"
msgstr ""

msgid "import cProfile cProfile.run('foo()', 'fooprof')"
msgstr ""

msgid "The file :file:`cProfile.py` can also be invoked as a script to profile another script.  For example::"
msgstr ""

msgid "python -m cProfile myscript.py"
msgstr ""

msgid ":file:`cProfile.py` accepts two optional arguments on the command line::"
msgstr ""

msgid "cProfile.py [-o output_file] [-s sort_order]"
msgstr ""

msgid "``-s`` only applies to standard output (``-o`` is not supplied). Look in the :class:`Stats` documentation for valid sort values."
msgstr ""

msgid "When you wish to review the profile, you should use the methods in the :mod:`pstats` module.  Typically you would load the statistics data as follows::"
msgstr ""

msgid "import pstats p = pstats.Stats('fooprof')"
msgstr ""

msgid "The class :class:`Stats` (the above code just created an instance of this class) has a variety of methods for manipulating and printing the data that was just read into ``p``.  When you ran :func:`cProfile.run` above, what was printed was the result of three method calls::"
msgstr ""

msgid "p.strip_dirs().sort_stats(-1).print_stats()"
msgstr ""

msgid "The first method removed the extraneous path from all the module names. The second method sorted all the entries according to the standard module/line/name string that is printed. The third method printed out all the statistics.  You might try the following sort calls:"
msgstr ""

msgid "p.sort_stats('name') p.print_stats()"
msgstr ""

msgid "The first call will actually sort the list by function name, and the second call will print out the statistics.  The following are some interesting calls to experiment with::"
msgstr ""

msgid "p.sort_stats('cumulative').print_stats(10)"
msgstr ""

msgid "This sorts the profile by cumulative time in a function, and then only prints the ten most significant lines.  If you want to understand what algorithms are taking time, the above line is what you would use."
msgstr ""

msgid "If you were looking to see what functions were looping a lot, and taking a lot of time, you would do::"
msgstr ""

msgid "p.sort_stats('time').print_stats(10)"
msgstr ""

msgid "to sort according to time spent within each function, and then print the statistics for the top ten functions."
msgstr ""

msgid "You might also try::"
msgstr ""

msgid "p.sort_stats('file').print_stats('__init__')"
msgstr ""

msgid "This will sort all the statistics by file name, and then print out statistics for only the class init methods (since they are spelled with ``__init__`` in them).  As one final example, you could try::"
msgstr ""

msgid "p.sort_stats('time', 'cum').print_stats(.5, 'init')"
msgstr ""

msgid "This line sorts statistics with a primary key of time, and a secondary key of cumulative time, and then prints out some of the statistics. To be specific, the list is first culled down to 50% (re: ``.5``) of its original size, then only lines containing ``init`` are maintained, and that sub-sub-list is printed."
msgstr ""

msgid "If you wondered what functions called the above functions, you could now (``p`` is still sorted according to the last criteria) do::"
msgstr ""

msgid "p.print_callers(.5, 'init')"
msgstr ""

msgid "and you would get a list of callers for each of the listed functions."
msgstr ""

msgid "If you want more functionality, you're going to have to read the manual, or guess what the following functions do::"
msgstr ""

msgid "p.print_callees() p.add('fooprof')"
msgstr ""

msgid "Invoked as a script, the :mod:`pstats` module is a statistics browser for reading and examining profile dumps.  It has a simple line-oriented interface (implemented using :mod:`cmd`) and interactive help."
msgstr ""

msgid "What Is Deterministic Profiling?"
msgstr ""

msgid ":dfn:`Deterministic profiling` is meant to reflect the fact that all *function call*, *function return*, and *exception* events are monitored, and precise timings are made for the intervals between these events (during which time the user's code is executing).  In contrast, :dfn:`statistical profiling` (which is not done by this module) randomly samples the effective instruction pointer, and deduces where time is being spent.  The latter technique traditionally involves less overhead (as the code does not need to be instrumented), but provides only relative indications of where time is being spent."
msgstr ""

msgid "In Python, since there is an interpreter active during execution, the presence of instrumented code is not required to do deterministic profiling.  Python automatically provides a :dfn:`hook` (optional callback) for each event.  In addition, the interpreted nature of Python tends to add so much overhead to execution, that deterministic profiling tends to only add small processing overhead in typical applications.  The result is that deterministic profiling is not that expensive, yet provides extensive run time statistics about the execution of a Python program."
msgstr ""

msgid "Call count statistics can be used to identify bugs in code (surprising counts), and to identify possible inline-expansion points (high call counts).  Internal time statistics can be used to identify \"hot loops\" that should be carefully optimized.  Cumulative time statistics should be used to identify high level errors in the selection of algorithms.  Note that the unusual handling of cumulative times in this profiler allows statistics for recursive implementations of algorithms to be directly compared to iterative implementations."
msgstr ""

msgid "Reference Manual -- :mod:`profile` and :mod:`cProfile`"
msgstr ""

msgid "The primary entry point for the profiler is the global function :func:`profile.run` (resp. :func:`cProfile.run`). It is typically used to create any profile information.  The reports are formatted and printed using methods of the class :class:`pstats.Stats`.  The following is a description of all of these standard entry points and functions.  For a more in-depth view of some of the code, consider reading the later section on Profiler Extensions, which includes discussion of how to derive \"better\" profilers from the classes presented, or reading the source code for these modules."
msgstr ""

msgid "This function takes a single argument that can be passed to the :func:`exec` function, and an optional file name.  In all cases this routine attempts to :func:`exec` its first argument, and gather profiling statistics from the execution. If no file name is present, then this function automatically prints a simple profiling report, sorted by the standard name string (file/line/function-name) that is presented in each line.  The following is a typical output from such a call::"
msgstr ""

msgid "2706 function calls (2004 primitive calls) in 4.504 CPU seconds  Ordered by: standard name  ncalls  tottime  percall  cumtime  percall filename:lineno(function)      2    0.006    0.003    0.953    0.477 pobject.py:75(save_objects)   43/3    0.533    0.012    0.749    0.250 pobject.py:99(evaluate)  ..."
msgstr ""

msgid "The first line indicates that 2706 calls were monitored.  Of those calls, 2004 were :dfn:`primitive`.  We define :dfn:`primitive` to mean that the call was not induced via recursion. The next line: ``Ordered by: standard name``, indicates that the text string in the far right column was used to sort the output. The column headings include:"
msgstr ""

msgid "for the number of calls,"
msgstr ""

msgid "for the total time spent in the given function (and excluding time made in calls to sub-functions),"
msgstr ""

msgid "is the quotient of ``tottime`` divided by ``ncalls``"
msgstr ""

msgid "is the total time spent in this and all subfunctions (from invocation till exit). This figure is accurate *even* for recursive functions."
msgstr ""

msgid "is the quotient of ``cumtime`` divided by primitive calls"
msgstr ""

msgid "provides the respective data of each function"
msgstr ""

msgid "When there are two numbers in the first column (for example, ``43/3``), then the latter is the number of primitive calls, and the former is the actual number of calls.  Note that when the function does not recurse, these two values are the same, and only the single figure is printed."
msgstr ""

msgid "If *sort* is given, it can be one of ``'stdname'`` (sort by filename:lineno), ``'calls'`` (sort by number of calls), ``'time'`` (sort by total time) or ``'cumulative'`` (sort by cumulative time).  The default is ``'stdname'``."
msgstr ""

msgid "This function is similar to :func:`run`, with added arguments to supply the globals and locals dictionaries for the *command* string."
msgstr ""

msgid "Analysis of the profiler data is done using the :class:`pstats.Stats` class."
msgstr ""

msgid "This class constructor creates an instance of a \"statistics object\" from a *filename* (or set of filenames).  :class:`Stats` objects are manipulated by methods, in order to print useful reports.  You may specify an alternate output stream by giving the keyword argument, ``stream``."
msgstr ""

msgid "The file selected by the above constructor must have been created by the corresponding version of :mod:`profile` or :mod:`cProfile`.  To be specific, there is *no* file compatibility guaranteed with future versions of this profiler, and there is no compatibility with files produced by other profilers. If several files are provided, all the statistics for identical functions will be coalesced, so that an overall view of several processes can be considered in a single report.  If additional files need to be combined with data in an existing :class:`Stats` object, the :meth:`add` method can be used."
msgstr ""

msgid "The :class:`Stats` Class"
msgstr ""

msgid ":class:`Stats` objects have the following methods:"
msgstr ""

msgid "This method for the :class:`Stats` class removes all leading path information from file names.  It is very useful in reducing the size of the printout to fit within (close to) 80 columns.  This method modifies the object, and the stripped information is lost.  After performing a strip operation, the object is considered to have its entries in a \"random\" order, as it was just after object initialization and loading.  If :meth:`strip_dirs` causes two function names to be indistinguishable (they are on the same line of the same filename, and have the same function name), then the statistics for these two entries are accumulated into a single entry."
msgstr ""

msgid "This method of the :class:`Stats` class accumulates additional profiling information into the current profiling object.  Its arguments should refer to filenames created by the corresponding version of :func:`profile.run` or :func:`cProfile.run`. Statistics for identically named (re: file, line, name) functions are automatically accumulated into single function statistics."
msgstr ""

msgid "Save the data loaded into the :class:`Stats` object to a file named *filename*. The file is created if it does not exist, and is overwritten if it already exists.  This is equivalent to the method of the same name on the :class:`profile.Profile` and :class:`cProfile.Profile` classes."
msgstr ""

msgid "This method modifies the :class:`Stats` object by sorting it according to the supplied criteria.  The argument is typically a string identifying the basis of a sort (example: ``'time'`` or ``'name'``)."
msgstr ""

msgid "When more than one key is provided, then additional keys are used as secondary criteria when there is equality in all keys selected before them.  For example, ``sort_stats('name', 'file')`` will sort all the entries according to their function name, and resolve all ties (identical function names) by sorting by file name."
msgstr ""

msgid "Abbreviations can be used for any key names, as long as the abbreviation is unambiguous.  The following are the keys currently defined:"
msgstr ""

msgid "Valid Arg"
msgstr ""

msgid "``'calls'``"
msgstr ""

msgid "call count"
msgstr ""

msgid "``'cumulative'``"
msgstr ""

msgid "cumulative time"
msgstr ""

msgid "``'file'``"
msgstr ""

msgid "file name"
msgstr ""

msgid "``'module'``"
msgstr ""

msgid "``'pcalls'``"
msgstr ""

msgid "primitive call count"
msgstr ""

msgid "``'line'``"
msgstr ""

msgid "line number"
msgstr ""

msgid "``'name'``"
msgstr ""

msgid "function name"
msgstr ""

msgid "``'nfl'``"
msgstr ""

msgid "name/file/line"
msgstr ""

msgid "``'stdname'``"
msgstr ""

msgid "standard name"
msgstr ""

msgid "``'time'``"
msgstr ""

msgid "internal time"
msgstr ""

msgid "Note that all sorts on statistics are in descending order (placing most time consuming items first), where as name, file, and line number searches are in ascending order (alphabetical). The subtle distinction between ``'nfl'`` and ``'stdname'`` is that the standard name is a sort of the name as printed, which means that the embedded line numbers get compared in an odd way.  For example, lines 3, 20, and 40 would (if the file names were the same) appear in the string order 20, 3 and 40.  In contrast, ``'nfl'`` does a numeric compare of the line numbers.  In fact, ``sort_stats('nfl')`` is the same as ``sort_stats('name', 'file', 'line')``."
msgstr ""

msgid "For backward-compatibility reasons, the numeric arguments ``-1``, ``0``, ``1``, and ``2`` are permitted.  They are interpreted as ``'stdname'``, ``'calls'``, ``'time'``, and ``'cumulative'`` respectively.  If this old style format (numeric) is used, only one sort key (the numeric key) will be used, and additional arguments will be silently ignored."
msgstr ""

msgid "This method for the :class:`Stats` class reverses the ordering of the basic list within the object.  Note that by default ascending vs descending order is properly selected based on the sort key of choice."
msgstr ""

msgid "This method for the :class:`Stats` class prints out a report as described in the :func:`profile.run` definition."
msgstr ""

msgid "The order of the printing is based on the last :meth:`sort_stats` operation done on the object (subject to caveats in :meth:`add` and :meth:`strip_dirs`)."
msgstr ""

msgid "The arguments provided (if any) can be used to limit the list down to the significant entries.  Initially, the list is taken to be the complete set of profiled functions.  Each restriction is either an integer (to select a count of lines), or a decimal fraction between 0.0 and 1.0 inclusive (to select a percentage of lines), or a regular expression (to pattern match the standard name that is printed; as of Python 1.5b1, this uses the Perl-style regular expression syntax defined by the :mod:`re` module).  If several restrictions are provided, then they are applied sequentially.  For example::"
msgstr ""

msgid "print_stats(.1, 'foo:')"
msgstr ""

msgid "would first limit the printing to first 10% of list, and then only print functions that were part of filename :file:`.\\*foo:`.  In contrast, the command::"
msgstr ""

msgid "print_stats('foo:', .1)"
msgstr ""

msgid "would limit the list to all functions having file names :file:`.\\*foo:`, and then proceed to only print the first 10% of them."
msgstr ""

msgid "This method for the :class:`Stats` class prints a list of all functions that called each function in the profiled database.  The ordering is identical to that provided by :meth:`print_stats`, and the definition of the restricting argument is also identical.  Each caller is reported on its own line.  The format differs slightly depending on the profiler that produced the stats:"
msgstr ""

msgid "With :mod:`profile`, a number is shown in parentheses after each caller to show how many times this specific call was made.  For convenience, a second non-parenthesized number repeats the cumulative time spent in the function at the right."
msgstr ""

msgid "With :mod:`cProfile`, each caller is preceded by three numbers: the number of times this specific call was made, and the total and cumulative times spent in the current function while it was invoked by this specific caller."
msgstr ""

msgid "This method for the :class:`Stats` class prints a list of all function that were called by the indicated function.  Aside from this reversal of direction of calls (re: called vs was called by), the arguments and ordering are identical to the :meth:`print_callers` method."
msgstr ""

msgid "Limitations"
msgstr ""

msgid "One limitation has to do with accuracy of timing information. There is a fundamental problem with deterministic profilers involving accuracy.  The most obvious restriction is that the underlying \"clock\" is only ticking at a rate (typically) of about .001 seconds.  Hence no measurements will be more accurate than the underlying clock.  If enough measurements are taken, then the \"error\" will tend to average out. Unfortunately, removing this first error induces a second source of error."
msgstr ""

msgid "The second problem is that it \"takes a while\" from when an event is dispatched until the profiler's call to get the time actually *gets* the state of the clock.  Similarly, there is a certain lag when exiting the profiler event handler from the time that the clock's value was obtained (and then squirreled away), until the user's code is once again executing.  As a result, functions that are called many times, or call many functions, will typically accumulate this error. The error that accumulates in this fashion is typically less than the accuracy of the clock (less than one clock tick), but it *can* accumulate and become very significant."
msgstr ""

msgid "The problem is more important with :mod:`profile` than with the lower-overhead :mod:`cProfile`.  For this reason, :mod:`profile` provides a means of calibrating itself for a given platform so that this error can be probabilistically (on the average) removed. After the profiler is calibrated, it will be more accurate (in a least square sense), but it will sometimes produce negative numbers (when call counts are exceptionally low, and the gods of probability work against you :-). )  Do *not* be alarmed by negative numbers in the profile.  They should *only* appear if you have calibrated your profiler, and the results are actually better than without calibration."
msgstr ""

msgid "Calibration"
msgstr ""

msgid "The profiler of the :mod:`profile` module subtracts a constant from each event handling time to compensate for the overhead of calling the time function, and socking away the results.  By default, the constant is 0. The following procedure can be used to obtain a better constant for a given platform (see discussion in section Limitations above). ::"
msgstr ""

msgid "import profile pr = profile.Profile() for i in range(5):     print(pr.calibrate(10000))"
msgstr ""

msgid "The method executes the number of Python calls given by the argument, directly and again under the profiler, measuring the time for both. It then computes the hidden overhead per profiler event, and returns that as a float.  For example, on an 800 MHz Pentium running Windows 2000, and using Python's time.clock() as the timer, the magical number is about 12.5e-6."
msgstr ""

msgid "The object of this exercise is to get a fairly consistent result. If your computer is *very* fast, or your timer function has poor resolution, you might have to pass 100000, or even 1000000, to get consistent results."
msgstr ""

msgid "When you have a consistent answer, there are three ways you can use it::"
msgstr ""

msgid "import profile  # 1. Apply computed bias to all Profile instances created hereafter. profile.Profile.bias = your_computed_bias  # 2. Apply computed bias to a specific Profile instance. pr = profile.Profile() pr.bias = your_computed_bias  # 3. Specify computed bias in instance constructor. pr = profile.Profile(bias=your_computed_bias)"
msgstr ""

msgid "If you have a choice, you are better off choosing a smaller constant, and then your results will \"less often\" show up as negative in profile statistics."
msgstr ""

msgid "Extensions --- Deriving Better Profilers"
msgstr ""

msgid "The :class:`Profile` class of both modules, :mod:`profile` and :mod:`cProfile`, were written so that derived classes could be developed to extend the profiler. The details are not described here, as doing this successfully requires an expert understanding of how the :class:`Profile` class works internally.  Study the source code of the module carefully if you want to pursue this."
msgstr ""

msgid "If all you want to do is change how current time is determined (for example, to force use of wall-clock time or elapsed process time), pass the timing function you want to the :class:`Profile` class constructor::"
msgstr ""

msgid "pr = profile.Profile(your_time_func)"
msgstr ""

msgid "The resulting profiler will then call :func:`your_time_func`."
msgstr ""

msgid ":func:`your_time_func` should return a single number, or a list of numbers whose sum is the current time (like what :func:`os.times` returns).  If the function returns a single time number, or the list of returned numbers has length 2, then you will get an especially fast version of the dispatch routine."
msgstr ""

msgid "Be warned that you should calibrate the profiler class for the timer function that you choose.  For most machines, a timer that returns a lone integer value will provide the best results in terms of low overhead during profiling. (:func:`os.times` is *pretty* bad, as it returns a tuple of floating point values).  If you want to substitute a better timer in the cleanest fashion, derive a class and hardwire a replacement dispatch method that best handles your timer call, along with the appropriate calibration constant."
msgstr ""

msgid ":func:`your_time_func` should return a single number.  If it returns integers, you can also invoke the class constructor with a second argument specifying the real duration of one unit of time.  For example, if :func:`your_integer_time_func` returns times measured in thousands of seconds, you would constuct the :class:`Profile` instance as follows::"
msgstr ""

msgid "pr = profile.Profile(your_integer_time_func, 0.001)"
msgstr ""

msgid "As the :mod:`cProfile.Profile` class cannot be calibrated, custom timer functions should be used with care and should be as fast as possible.  For the best results with a custom timer, it might be necessary to hard-code it in the C source of the internal :mod:`_lsprof` module."
msgstr ""

msgid "Updated and converted to LaTeX by Guido van Rossum. Further updated by Armin Rigo to integrate the documentation for the new :mod:`cProfile` module of Python 2.5."
msgstr ""

msgid ":mod:`pty` --- Pseudo-terminal utilities"
msgstr ""

msgid "The :mod:`pty` module defines operations for handling the pseudo-terminal concept: starting another process and being able to write to and read from its controlling terminal programmatically."
msgstr ""

msgid "Because pseudo-terminal handling is highly platform dependent, there is code to do it only for Linux. (The Linux code is supposed to work on other platforms, but hasn't been tested yet.)"
msgstr ""

msgid "The :mod:`pty` module defines the following functions:"
msgstr ""

msgid "Fork. Connect the child's controlling terminal to a pseudo-terminal. Return value is ``(pid, fd)``. Note that the child  gets *pid* 0, and the *fd* is *invalid*. The parent's return value is the *pid* of the child, and *fd* is a file descriptor connected to the child's controlling terminal (and also to the child's standard input and output)."
msgstr ""

msgid "Open a new pseudo-terminal pair, using :func:`os.openpty` if possible, or emulation code for generic Unix systems. Return a pair of file descriptors ``(master, slave)``, for the master and the slave end, respectively."
msgstr ""

msgid "Spawn a process, and connect its controlling terminal with the current process's standard io. This is often used to baffle programs which insist on reading from the controlling terminal."
msgstr ""

msgid "The functions *master_read* and *stdin_read* should be functions which read from a file descriptor. The defaults try to read 1024 bytes each time they are called."
msgstr ""

msgid ":mod:`pwd` --- The password database"
msgstr ""

msgid "This module provides access to the Unix user account and password database.  It is available on all Unix versions."
msgstr ""

msgid "Password database entries are reported as a tuple-like object, whose attributes correspond to the members of the ``passwd`` structure (Attribute field below, see ``<pwd.h>``):"
msgstr ""

msgid "``pw_name``"
msgstr ""

msgid "Login name"
msgstr ""

msgid "``pw_passwd``"
msgstr ""

msgid "Optional encrypted password"
msgstr ""

msgid "``pw_uid``"
msgstr ""

msgid "Numerical user ID"
msgstr ""

msgid "``pw_gid``"
msgstr ""

msgid "Numerical group ID"
msgstr ""

msgid "``pw_gecos``"
msgstr ""

msgid "User name or comment field"
msgstr ""

msgid "``pw_dir``"
msgstr ""

msgid "User home directory"
msgstr ""

msgid "6"
msgstr ""

msgid "``pw_shell``"
msgstr ""

msgid "User command interpreter"
msgstr ""

msgid "The uid and gid items are integers, all others are strings. :exc:`KeyError` is raised if the entry asked for cannot be found."
msgstr ""

msgid "In traditional Unix the field ``pw_passwd`` usually contains a password encrypted with a DES derived algorithm (see module :mod:`crypt`).  However most modern unices  use a so-called *shadow password* system.  On those unices the *pw_passwd* field only contains an asterisk (``'*'``) or the  letter ``'x'`` where the encrypted password is stored in a file :file:`/etc/shadow` which is not world readable.  Whether the *pw_passwd* field contains anything useful is system-dependent.  If available, the :mod:`spwd` module should be used where access to the encrypted password is required."
msgstr ""

msgid "Return the password database entry for the given numeric user ID."
msgstr ""

msgid "Return the password database entry for the given user name."
msgstr ""

msgid "Return a list of all available password database entries, in arbitrary order."
msgstr ""

msgid "An interface to the group database, similar to this."
msgstr ""

msgid ":mod:`py_compile` --- Compile Python source files"
msgstr ""

msgid "The :mod:`py_compile` module provides a function to generate a byte-code file from a source file, and another function used when the module source file is invoked as a script."
msgstr ""

msgid "Though not often needed, this function can be useful when installing modules for shared use, especially if some of the users may not have permission to write the byte-code cache files in the directory containing the source code."
msgstr ""

msgid "Exception raised when an error occurs while attempting to compile the file."
msgstr ""

msgid "Compile a source file to byte-code and write out the byte-code cache  file.  The source code is loaded from the file name *file*.  The  byte-code is written to *cfile*, which defaults to the :PEP:`3147` path, ending in ``.pyc`` (``'.pyo`` if optimization is enabled in the current interpreter).  For example, if *file* is ``/foo/bar/baz.py`` *cfile* will default to ``/foo/bar/__pycache__/baz.cpython-32.pyc`` for Python 3.2.  If *dfile* is specified, it is used as the name of the source file in error messages instead of *file*.  If *doraise* is true, a :exc:`PyCompileError` is raised when an error is encountered while compiling *file*. If *doraise* is false (the default), an error string is written to ``sys.stderr``, but no exception is raised.  This function returns the path to byte-compiled file, i.e. whatever *cfile* value was used."
msgstr ""

msgid "Compile several source files.  The files named in *args* (or on the command line, if *args* is ``None``) are compiled and the resulting bytecode is cached in the normal manner.  This function does not search a directory structure to locate source files; it only compiles files named explicitly."
msgstr ""

msgid "When this module is run as a script, the :func:`main` is used to compile all the files named on the command line.  The exit status is nonzero if one of the files could not be compiled."
msgstr ""

msgid "Utilities to compile all Python source files in a directory tree."
msgstr ""

msgid ":mod:`pyclbr` --- Python class browser support"
msgstr ""

msgid "The :mod:`pyclbr` module can be used to determine some limited information about the classes, methods and top-level functions defined in a module.  The information provided is sufficient to implement a traditional three-pane class browser.  The information is extracted from the source code rather than by importing the module, so this module is safe to use with untrusted code.  This restriction makes it impossible to use this module with modules not implemented in Python, including all standard and optional extension modules."
msgstr ""

msgid "Read a module and return a dictionary mapping class names to class descriptor objects.  The parameter *module* should be the name of a module as a string; it may be the name of a module within a package.  The *path* parameter should be a sequence, and is used to augment the value of ``sys.path``, which is used to locate module source code."
msgstr ""

msgid "Like :func:`readmodule`, but the returned dictionary, in addition to mapping class names to class descriptor objects, also maps top-level function names to function descriptor objects.  Moreover, if the module being read is a package, the key ``'__path__'`` in the returned dictionary has as its value a list which contains the package search path."
msgstr ""

msgid "Class Objects"
msgstr ""

msgid "The :class:`Class` objects used as values in the dictionary returned by :func:`readmodule` and :func:`readmodule_ex` provide the following data members:"
msgstr ""

msgid "The name of the module defining the class described by the class descriptor."
msgstr ""

msgid "The name of the class."
msgstr ""

msgid "A list of :class:`Class` objects which describe the immediate base classes of the class being described.  Classes which are named as superclasses but which are not discoverable by :func:`readmodule` are listed as a string with the class name instead of as :class:`Class` objects."
msgstr ""

msgid "A dictionary mapping method names to line numbers."
msgstr ""

msgid "Name of the file containing the ``class`` statement defining the class."
msgstr ""

msgid "The line number of the ``class`` statement within the file named by :attr:`~Class.file`."
msgstr ""

msgid "Function Objects"
msgstr ""

msgid "The :class:`Function` objects used as values in the dictionary returned by :func:`readmodule_ex` provide the following data members:"
msgstr ""

msgid "The name of the module defining the function described by the function descriptor."
msgstr ""

msgid "The name of the function."
msgstr ""

msgid "Name of the file containing the ``def`` statement defining the function."
msgstr ""

msgid "The line number of the ``def`` statement within the file named by :attr:`~Function.file`."
msgstr ""

msgid ":mod:`pydoc` --- Documentation generator and online help system"
msgstr ""

msgid "The :mod:`pydoc` module automatically generates documentation from Python modules.  The documentation can be presented as pages of text on the console, served to a Web browser, or saved to HTML files."
msgstr ""

msgid "The built-in function :func:`help` invokes the online help system in the interactive interpreter, which uses :mod:`pydoc` to generate its documentation as text on the console.  The same text documentation can also be viewed from outside the Python interpreter by running :program:`pydoc` as a script at the operating system's command prompt. For example, running ::"
msgstr ""

msgid "pydoc sys"
msgstr ""

msgid "at a shell prompt will display documentation on the :mod:`sys` module, in a style similar to the manual pages shown by the Unix :program:`man` command.  The argument to :program:`pydoc` can be the name of a function, module, or package, or a dotted reference to a class, method, or function within a module or module in a package.  If the argument to :program:`pydoc` looks like a path (that is, it contains the path separator for your operating system, such as a slash in Unix), and refers to an existing Python source file, then documentation is produced for that file."
msgstr ""

msgid "In order to find objects and their documentation, :mod:`pydoc` imports the module(s) to be documented.  Therefore, any code on module level will be executed on that occasion.  Use an ``if __name__ == '__main__':`` guard to only execute code when a file is invoked as a script and not just imported."
msgstr ""

msgid "Specifying a :option:`-w` flag before the argument will cause HTML documentation to be written out to a file in the current directory, instead of displaying text on the console."
msgstr ""

msgid "Specifying a :option:`-k` flag before the argument will search the synopsis lines of all available modules for the keyword given as the argument, again in a manner similar to the Unix :program:`man` command.  The synopsis line of a module is the first line of its documentation string."
msgstr ""

msgid "You can also use :program:`pydoc` to start an HTTP server on the local machine that will serve documentation to visiting Web browsers. :program:`pydoc` :option:`-p 1234` will start a HTTP server on port 1234, allowing you to browse the documentation at ``http://localhost:1234/`` in your preferred Web browser. :program:`pydoc` :option:`-g` will start the server and additionally bring up a small :mod:`tkinter`\\ -based graphical interface to help you search for documentation pages."
msgstr ""

msgid "When :program:`pydoc` generates documentation, it uses the current environment and path to locate modules.  Thus, invoking :program:`pydoc` :option:`spam` documents precisely the version of the module you would get if you started the Python interpreter and typed ``import spam``."
msgstr ""

msgid "Module docs for core modules are assumed to reside in http://docs.python.org/library/.  This can be overridden by setting the :envvar:`PYTHONDOCS` environment variable to a different URL or to a local directory containing the Library Reference Manual pages."
msgstr ""

msgid ":mod:`xml.parsers.expat` --- Fast XML parsing using Expat"
msgstr ""

msgid "The :mod:`xml.parsers.expat` module is a Python interface to the Expat non-validating XML parser. The module provides a single extension type, :class:`xmlparser`, that represents the current state of an XML parser.  After an :class:`xmlparser` object has been created, various attributes of the object can be set to handler functions.  When an XML document is then fed to the parser, the handler functions are called for the character data and markup in the XML document."
msgstr ""

msgid "This module uses the :mod:`pyexpat` module to provide access to the Expat parser.  Direct use of the :mod:`pyexpat` module is deprecated."
msgstr ""

msgid "This module provides one exception and one type object:"
msgstr ""

msgid "The exception raised when Expat reports an error.  See section :ref:`expaterror-objects` for more information on interpreting Expat errors."
msgstr ""

msgid "Alias for :exc:`ExpatError`."
msgstr ""

msgid "The type of the return values from the :func:`ParserCreate` function."
msgstr ""

msgid "The :mod:`xml.parsers.expat` module contains two functions:"
msgstr ""

msgid "Returns an explanatory string for a given error number *errno*."
msgstr ""

msgid "Creates and returns a new :class:`xmlparser` object.   *encoding*, if specified, must be a string naming the encoding  used by the XML data.  Expat doesn't support as many encodings as Python does, and its repertoire of encodings can't be extended; it supports UTF-8, UTF-16, ISO-8859-1 (Latin1), and ASCII.  If *encoding* [1]_ is given it will override the implicit or explicit encoding of the document."
msgstr ""

msgid "Expat can optionally do XML namespace processing for you, enabled by providing a value for *namespace_separator*.  The value must be a one-character string; a :exc:`ValueError` will be raised if the string has an illegal length (``None`` is considered the same as omission).  When namespace processing is enabled, element type names and attribute names that belong to a namespace will be expanded.  The element name passed to the element handlers :attr:`StartElementHandler` and :attr:`EndElementHandler` will be the concatenation of the namespace URI, the namespace separator character, and the local part of the name.  If the namespace separator is a zero byte (``chr(0)``) then the namespace URI and the local part will be concatenated without any separator."
msgstr ""

msgid "For example, if *namespace_separator* is set to a space character (``' '``) and the following document is parsed::"
msgstr ""

msgid "<?xml version=\"1.0\"?> <root xmlns    = \"http://default-namespace.org/\"       xmlns:py = \"http://www.python.org/ns/\">   <py:elem1 />   <elem2 xmlns=\"\" /> </root>"
msgstr ""

msgid ":attr:`StartElementHandler` will receive the following strings for each element::"
msgstr ""

msgid "http://default-namespace.org/ root http://www.python.org/ns/ elem1 elem2"
msgstr ""

msgid "Home page of the Expat project."
msgstr ""

msgid "XMLParser Objects"
msgstr ""

msgid ":class:`xmlparser` objects have the following methods:"
msgstr ""

msgid "Parses the contents of the string *data*, calling the appropriate handler functions to process the parsed data.  *isfinal* must be true on the final call to this method.  *data* can be the empty string at any time."
msgstr ""

msgid "Parse XML data reading from the object *file*.  *file* only needs to provide the ``read(nbytes)`` method, returning the empty string when there's no more data."
msgstr ""

msgid "Sets the base to be used for resolving relative URIs in system identifiers in declarations.  Resolving relative identifiers is left to the application: this value will be passed through as the *base* argument to the :func:`ExternalEntityRefHandler`, :func:`NotationDeclHandler`, and :func:`UnparsedEntityDeclHandler` functions."
msgstr ""

msgid "Returns a string containing the base set by a previous call to :meth:`SetBase`, or ``None`` if  :meth:`SetBase` hasn't been called."
msgstr ""

msgid "Returns the input data that generated the current event as a string. The data is in the encoding of the entity which contains the text. When called while an event handler is not active, the return value is ``None``."
msgstr ""

msgid "Create a \"child\" parser which can be used to parse an external parsed entity referred to by content parsed by the parent parser.  The *context* parameter should be the string passed to the :meth:`ExternalEntityRefHandler` handler function, described below. The child parser is created with the :attr:`ordered_attributes` and :attr:`specified_attributes` set to the values of this parser."
msgstr ""

msgid "Calling this with a true value for *flag* (the default) will cause Expat to call the :attr:`ExternalEntityRefHandler` with :const:`None` for all arguments to allow an alternate DTD to be loaded.  If the document does not contain a document type declaration, the :attr:`ExternalEntityRefHandler` will still be called, but the :attr:`StartDoctypeDeclHandler` and :attr:`EndDoctypeDeclHandler` will not be called."
msgstr ""

msgid "Passing a false value for *flag* will cancel a previous call that passed a true value, but otherwise has no effect."
msgstr ""

msgid "This method can only be called before the :meth:`Parse` or :meth:`ParseFile` methods are called; calling it after either of those have been called causes :exc:`ExpatError` to be raised with the :attr:`code` attribute set to :const:`errors.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING`."
msgstr ""

msgid ":class:`xmlparser` objects have the following attributes:"
msgstr ""

msgid "The size of the buffer used when :attr:`buffer_text` is true. A new buffer size can be set by assigning a new integer value to this attribute. When the size is changed, the buffer will be flushed."
msgstr ""

msgid "Setting this to true causes the :class:`xmlparser` object to buffer textual content returned by Expat to avoid multiple calls to the :meth:`CharacterDataHandler` callback whenever possible.  This can improve performance substantially since Expat normally breaks character data into chunks at every line ending.  This attribute is false by default, and may be changed at any time."
msgstr ""

msgid "If :attr:`buffer_text` is enabled, the number of bytes stored in the buffer. These bytes represent UTF-8 encoded text.  This attribute has no meaningful interpretation when :attr:`buffer_text` is false."
msgstr ""

msgid "Setting this attribute to a non-zero integer causes the attributes to be reported as a list rather than a dictionary.  The attributes are presented in the order found in the document text.  For each attribute, two list entries are presented: the attribute name and the attribute value.  (Older versions of this module also used this format.)  By default, this attribute is false; it may be changed at any time."
msgstr ""

msgid "If set to a non-zero integer, the parser will report only those attributes which were specified in the document instance and not those which were derived from attribute declarations.  Applications which set this need to be especially careful to use what additional information is available from the declarations as needed to comply with the standards for the behavior of XML processors.  By default, this attribute is false; it may be changed at any time."
msgstr ""

msgid "The following attributes contain values relating to the most recent error encountered by an :class:`xmlparser` object, and will only have correct values once a call to :meth:`Parse` or :meth:`ParseFile` has raised a :exc:`xml.parsers.expat.ExpatError` exception."
msgstr ""

msgid "Byte index at which an error occurred."
msgstr ""

msgid "Numeric code specifying the problem.  This value can be passed to the :func:`ErrorString` function, or compared to one of the constants defined in the ``errors`` object."
msgstr ""

msgid "Column number at which an error occurred."
msgstr ""

msgid "Line number at which an error occurred."
msgstr ""

msgid "The following attributes contain values relating to the current parse location in an :class:`xmlparser` object.  During a callback reporting a parse event they indicate the location of the first of the sequence of characters that generated the event.  When called outside of a callback, the position indicated will be just past the last parse event (regardless of whether there was an associated callback)."
msgstr ""

msgid "Current byte index in the parser input."
msgstr ""

msgid "Current column number in the parser input."
msgstr ""

msgid "Current line number in the parser input."
msgstr ""

msgid "Here is the list of handlers that can be set.  To set a handler on an :class:`xmlparser` object *o*, use ``o.handlername = func``.  *handlername* must be taken from the following list, and *func* must be a callable object accepting the correct number of arguments.  The arguments are all strings, unless otherwise stated."
msgstr ""

msgid "Called when the XML declaration is parsed.  The XML declaration is the (optional) declaration of the applicable version of the XML recommendation, the encoding of the document text, and an optional \"standalone\" declaration. *version* and *encoding* will be strings, and *standalone* will be ``1`` if the document is declared standalone, ``0`` if it is declared not to be standalone, or ``-1`` if the standalone clause was omitted. This is only available with Expat version 1.95.0 or newer."
msgstr ""

msgid "Called when Expat begins parsing the document type declaration (``<!DOCTYPE ...``).  The *doctypeName* is provided exactly as presented.  The *systemId* and *publicId* parameters give the system and public identifiers if specified, or ``None`` if omitted.  *has_internal_subset* will be true if the document contains and internal document declaration subset. This requires Expat version 1.2 or newer."
msgstr ""

msgid "Called when Expat is done parsing the document type declaration. This requires Expat version 1.2 or newer."
msgstr ""

msgid "Called once for each element type declaration.  *name* is the name of the element type, and *model* is a representation of the content model."
msgstr ""

msgid "Called for each declared attribute for an element type.  If an attribute list declaration declares three attributes, this handler is called three times, once for each attribute.  *elname* is the name of the element to which the declaration applies and *attname* is the name of the attribute declared.  The attribute type is a string passed as *type*; the possible values are ``'CDATA'``, ``'ID'``, ``'IDREF'``, ... *default* gives the default value for the attribute used when the attribute is not specified by the document instance, or ``None`` if there is no default value (``#IMPLIED`` values).  If the attribute is required to be given in the document instance, *required* will be true. This requires Expat version 1.95.0 or newer."
msgstr ""

msgid "Called for the start of every element.  *name* is a string containing the element name, and *attributes* is a dictionary mapping attribute names to their values."
msgstr ""

msgid "Called for the end of every element."
msgstr ""

msgid "Called for every processing instruction."
msgstr ""

msgid "Called for character data.  This will be called for normal character data, CDATA marked content, and ignorable whitespace.  Applications which must distinguish these cases can use the :attr:`StartCdataSectionHandler`, :attr:`EndCdataSectionHandler`, and :attr:`ElementDeclHandler` callbacks to collect the required information."
msgstr ""

msgid "Called for unparsed (NDATA) entity declarations.  This is only present for version 1.2 of the Expat library; for more recent versions, use :attr:`EntityDeclHandler` instead.  (The underlying function in the Expat library has been declared obsolete.)"
msgstr ""

msgid "Called for all entity declarations.  For parameter and internal entities, *value* will be a string giving the declared contents of the entity; this will be ``None`` for external entities.  The *notationName* parameter will be ``None`` for parsed entities, and the name of the notation for unparsed entities. *is_parameter_entity* will be true if the entity is a parameter entity or false for general entities (most applications only need to be concerned with general entities). This is only available starting with version 1.95.0 of the Expat library."
msgstr ""

msgid "Called for notation declarations.  *notationName*, *base*, and *systemId*, and *publicId* are strings if given.  If the public identifier is omitted, *publicId* will be ``None``."
msgstr ""

msgid "Called when an element contains a namespace declaration.  Namespace declarations are processed before the :attr:`StartElementHandler` is called for the element on which declarations are placed."
msgstr ""

msgid "Called when the closing tag is reached for an element  that contained a namespace declaration.  This is called once for each namespace declaration on the element in the reverse of the order for which the :attr:`StartNamespaceDeclHandler` was called to indicate the start of each namespace declaration's scope.  Calls to this handler are made after the corresponding :attr:`EndElementHandler` for the end of the element."
msgstr ""

msgid "Called for comments.  *data* is the text of the comment, excluding the leading '``<!-``\\ ``-``' and trailing '``-``\\ ``->``'."
msgstr ""

msgid "Called at the start of a CDATA section.  This and :attr:`EndCdataSectionHandler` are needed to be able to identify the syntactical start and end for CDATA sections."
msgstr ""

msgid "Called at the end of a CDATA section."
msgstr ""

msgid "Called for any characters in the XML document for which no applicable handler has been specified.  This means characters that are part of a construct which could be reported, but for which no handler has been supplied."
msgstr ""

msgid "This is the same as the :func:`DefaultHandler`,  but doesn't inhibit expansion of internal entities. The entity reference will not be passed to the default handler."
msgstr ""

msgid "Called if the XML document hasn't been declared as being a standalone document. This happens when there is an external subset or a reference to a parameter entity, but the XML declaration does not set standalone to ``yes`` in an XML declaration.  If this handler returns ``0``, then the parser will throw an :const:`XML_ERROR_NOT_STANDALONE` error.  If this handler is not set, no exception is raised by the parser for this condition."
msgstr ""

msgid "Called for references to external entities.  *base* is the current base, as set by a previous call to :meth:`SetBase`.  The public and system identifiers, *systemId* and *publicId*, are strings if given; if the public identifier is not given, *publicId* will be ``None``.  The *context* value is opaque and should only be used as described below."
msgstr ""

msgid "For external entities to be parsed, this handler must be implemented. It is responsible for creating the sub-parser using ``ExternalEntityParserCreate(context)``, initializing it with the appropriate callbacks, and parsing the entity.  This handler should return an integer; if it returns ``0``, the parser will throw an :const:`XML_ERROR_EXTERNAL_ENTITY_HANDLING` error, otherwise parsing will continue."
msgstr ""

msgid "If this handler is not provided, external entities are reported by the :attr:`DefaultHandler` callback, if provided."
msgstr ""

msgid "ExpatError Exceptions"
msgstr ""

msgid ":exc:`ExpatError` exceptions have a number of interesting attributes:"
msgstr ""

msgid "Expat's internal error number for the specific error.  This will match one of the constants defined in the ``errors`` object from this module."
msgstr ""

msgid "Line number on which the error was detected.  The first line is numbered ``1``."
msgstr ""

msgid "Character offset into the line where the error occurred.  The first column is numbered ``0``."
msgstr ""

msgid "The following program defines three handlers that just print out their arguments. ::"
msgstr ""

msgid "import xml.parsers.expat  # 3 handler functions def start_element(name, attrs):     print('Start element:', name, attrs) def end_element(name):     print('End element:', name) def char_data(data):     print('Character data:', repr(data))  p = xml.parsers.expat.ParserCreate()  p.StartElementHandler = start_element p.EndElementHandler = end_element p.CharacterDataHandler = char_data  p.Parse(\"\"\"<?xml version=\"1.0\"?> <parent id=\"top\"><child1 name=\"paul\">Text goes here</child1> <child2 name=\"fred\">More text</child2> </parent>\"\"\", 1)"
msgstr ""

msgid "The output from this program is::"
msgstr ""

msgid "Start element: parent {'id': 'top'} Start element: child1 {'name': 'paul'} Character data: 'Text goes here' End element: child1 Character data: '\\n' Start element: child2 {'name': 'fred'} Character data: 'More text' End element: child2 Character data: '\\n' End element: parent"
msgstr ""

msgid "Content Model Descriptions"
msgstr ""

msgid "Content modules are described using nested tuples.  Each tuple contains four values: the type, the quantifier, the name, and a tuple of children.  Children are simply additional content module descriptions."
msgstr ""

msgid "The values of the first two fields are constants defined in the ``model`` object of the :mod:`xml.parsers.expat` module.  These constants can be collected in two groups: the model type group and the quantifier group."
msgstr ""

msgid "The constants in the model type group are:"
msgstr ""

msgid "The element named by the model name was declared to have a content model of ``ANY``."
msgstr ""

msgid "The named element allows a choice from a number of options; this is used for content models such as ``(A | B | C)``."
msgstr ""

msgid "Elements which are declared to be ``EMPTY`` have this model type."
msgstr ""

msgid "Models which represent a series of models which follow one after the other are indicated with this model type.  This is used for models such as ``(A, B, C)``."
msgstr ""

msgid "The constants in the quantifier group are:"
msgstr ""

msgid "No modifier is given, so it can appear exactly once, as for ``A``."
msgstr ""

msgid "The model is optional: it can appear once or not at all, as for ``A?``."
msgstr ""

msgid "The model must occur one or more times (like ``A+``)."
msgstr ""

msgid "The model must occur zero or more times, as for ``A*``."
msgstr ""

msgid "Expat error constants"
msgstr ""

msgid "The following constants are provided in the ``errors`` object of the :mod:`xml.parsers.expat` module.  These constants are useful in interpreting some of the attributes of the :exc:`ExpatError` exception objects raised when an error has occurred."
msgstr ""

msgid "The ``errors`` object has the following attributes:"
msgstr ""

msgid "An entity reference in an attribute value referred to an external entity instead of an internal entity."
msgstr ""

msgid "A character reference referred to a character which is illegal in XML (for example, character ``0``, or '``&#0;``')."
msgstr ""

msgid "An entity reference referred to an entity which was declared with a notation, so cannot be parsed."
msgstr ""

msgid "An attribute was used more than once in a start tag."
msgstr ""

msgid "Raised when an input byte could not properly be assigned to a character; for example, a NUL byte (value ``0``) in a UTF-8 input stream."
msgstr ""

msgid "Something other than whitespace occurred after the document element."
msgstr ""

msgid "An XML declaration was found somewhere other than the start of the input data."
msgstr ""

msgid "The document contains no elements (XML requires all documents to contain exactly one top-level element).."
msgstr ""

msgid "Expat was not able to allocate memory internally."
msgstr ""

msgid "A parameter entity reference was found where it was not allowed."
msgstr ""

msgid "An incomplete character was found in the input."
msgstr ""

msgid "An entity reference contained another reference to the same entity; possibly via a different name, and possibly indirectly."
msgstr ""

msgid "Some unspecified syntax error was encountered."
msgstr ""

msgid "An end tag did not match the innermost open start tag."
msgstr ""

msgid "Some token (such as a start tag) was not closed before the end of the stream or the next token was encountered."
msgstr ""

msgid "A reference was made to a entity which was not defined."
msgstr ""

msgid "The document encoding is not supported by Expat."
msgstr ""

msgid "A CDATA marked section was not closed."
msgstr ""

msgid "The parser determined that the document was not \"standalone\" though it declared itself to be in the XML declaration, and the :attr:`NotStandaloneHandler` was set and returned ``0``."
msgstr ""

msgid "An operation was requested that requires DTD support to be compiled in, but Expat was configured without DTD support.  This should never be reported by a standard build of the :mod:`xml.parsers.expat` module."
msgstr ""

msgid "A behavioral change was requested after parsing started that can only be changed before parsing has started.  This is (currently) only raised by :meth:`UseForeignDTD`."
msgstr ""

msgid "An undeclared prefix was found when namespace processing was enabled."
msgstr ""

msgid "The document attempted to remove the namespace declaration associated with a prefix."
msgstr ""

msgid "A parameter entity contained incomplete markup."
msgstr ""

msgid "The document contained no document element at all."
msgstr ""

msgid "There was an error parsing a text declaration in an external entity."
msgstr ""

msgid "Characters were found in the public id that are not allowed."
msgstr ""

msgid "The requested operation was made on a suspended parser, but isn't allowed.  This includes attempts to provide additional input or to stop the parser."
msgstr ""

msgid "An attempt to resume the parser was made when the parser had not been suspended."
msgstr ""

msgid "This should not be reported to Python applications."
msgstr ""

msgid "The requested operation was made on a parser which was finished parsing input, but isn't allowed.  This includes attempts to provide additional input or to stop the parser."
msgstr ""

msgid "The encoding string included in XML output should conform to the appropriate standards. For example, \"UTF-8\" is valid, but \"UTF8\" is not. See http://www.w3.org/TR/2006/REC-xml11-20060816/#NT-EncodingDecl and http://www.iana.org/assignments/character-sets ."
msgstr ""

msgid "Python Runtime Services"
msgstr ""

msgid "The modules described in this chapter provide a wide range of services related to the Python interpreter and its interaction with its environment.  Here's an overview:"
msgstr ""

msgid ":mod:`queue` --- A synchronized queue class"
msgstr ""

msgid "The :mod:`queue` module implements multi-producer, multi-consumer queues. It is especially useful in threaded programming when information must be exchanged safely between multiple threads.  The :class:`Queue` class in this module implements all the required locking semantics.  It depends on the availability of thread support in Python; see the :mod:`threading` module."
msgstr ""

msgid "Implements three types of queue whose only difference is the order that the entries are retrieved.  In a FIFO queue, the first tasks added are the first retrieved. In a LIFO queue, the most recently added entry is the first retrieved (operating like a stack).  With a priority queue, the entries are kept sorted (using the :mod:`heapq` module) and the lowest valued entry is retrieved first."
msgstr ""

msgid "The :mod:`queue` module defines the following classes and exceptions:"
msgstr ""

msgid "Constructor for a FIFO queue.  *maxsize* is an integer that sets the upperbound limit on the number of items that can be placed in the queue.  Insertion will block once this size has been reached, until queue items are consumed.  If *maxsize* is less than or equal to zero, the queue size is infinite."
msgstr ""

msgid "Constructor for a LIFO queue.  *maxsize* is an integer that sets the upperbound limit on the number of items that can be placed in the queue.  Insertion will block once this size has been reached, until queue items are consumed.  If *maxsize* is less than or equal to zero, the queue size is infinite."
msgstr ""

msgid "Constructor for a priority queue.  *maxsize* is an integer that sets the upperbound limit on the number of items that can be placed in the queue.  Insertion will block once this size has been reached, until queue items are consumed.  If *maxsize* is less than or equal to zero, the queue size is infinite."
msgstr ""

msgid "The lowest valued entries are retrieved first (the lowest valued entry is the one returned by ``sorted(list(entries))[0]``).  A typical pattern for entries is a tuple in the form: ``(priority_number, data)``."
msgstr ""

msgid "Exception raised when non-blocking :meth:`get` (or :meth:`get_nowait`) is called on a :class:`Queue` object which is empty."
msgstr ""

msgid "Exception raised when non-blocking :meth:`put` (or :meth:`put_nowait`) is called on a :class:`Queue` object which is full."
msgstr ""

msgid ":class:`collections.deque` is an alternative implementation of unbounded queues with fast atomic :func:`append` and :func:`popleft` operations that do not require locking."
msgstr ""

msgid "Queue Objects"
msgstr ""

msgid "Queue objects (:class:`Queue`, :class:`LifoQueue`, or :class:`PriorityQueue`) provide the public methods described below."
msgstr ""

msgid "Return the approximate size of the queue.  Note, qsize() > 0 doesn't guarantee that a subsequent get() will not block, nor will qsize() < maxsize guarantee that put() will not block."
msgstr ""

msgid "Return ``True`` if the queue is empty, ``False`` otherwise.  If empty() returns ``True`` it doesn't guarantee that a subsequent call to put() will not block.  Similarly, if empty() returns ``False`` it doesn't guarantee that a subsequent call to get() will not block."
msgstr ""

msgid "Return ``True`` if the queue is full, ``False`` otherwise.  If full() returns ``True`` it doesn't guarantee that a subsequent call to get() will not block.  Similarly, if full() returns ``False`` it doesn't guarantee that a subsequent call to put() will not block."
msgstr ""

msgid "Put *item* into the queue. If optional args *block* is true and *timeout* is None (the default), block if necessary until a free slot is available. If *timeout* is a positive number, it blocks at most *timeout* seconds and raises the :exc:`Full` exception if no free slot was available within that time. Otherwise (*block* is false), put an item on the queue if a free slot is immediately available, else raise the :exc:`Full` exception (*timeout* is ignored in that case)."
msgstr ""

msgid "Remove and return an item from the queue. If optional args *block* is true and *timeout* is None (the default), block if necessary until an item is available. If *timeout* is a positive number, it blocks at most *timeout* seconds and raises the :exc:`Empty` exception if no item was available within that time. Otherwise (*block* is false), return an item if one is immediately available, else raise the :exc:`Empty` exception (*timeout* is ignored in that case)."
msgstr ""

msgid "Two methods are offered to support tracking whether enqueued tasks have been fully processed by daemon consumer threads."
msgstr ""

msgid "Indicate that a formerly enqueued task is complete.  Used by queue consumer threads.  For each :meth:`get` used to fetch a task, a subsequent call to :meth:`task_done` tells the queue that the processing on the task is complete."
msgstr ""

msgid "If a :meth:`join` is currently blocking, it will resume when all items have been processed (meaning that a :meth:`task_done` call was received for every item that had been :meth:`put` into the queue)."
msgstr ""

msgid "Blocks until all items in the queue have been gotten and processed."
msgstr ""

msgid "The count of unfinished tasks goes up whenever an item is added to the queue. The count goes down whenever a consumer thread calls :meth:`task_done` to indicate that the item was retrieved and all work on it is complete. When the count of unfinished tasks drops to zero, :meth:`join` unblocks."
msgstr ""

msgid "Example of how to wait for enqueued tasks to be completed::"
msgstr ""

msgid "def worker():     while True:         item = q.get()         do_work(item)         q.task_done()  q = Queue() for i in range(num_worker_threads):      t = Thread(target=worker)      t.daemon = True      t.start()  for item in source():     q.put(item)  q.join()       # block until all tasks are done"
msgstr ""

msgid ":mod:`quopri` --- Encode and decode MIME quoted-printable data"
msgstr ""

msgid "This module performs quoted-printable transport encoding and decoding, as defined in :rfc:`1521`: \"MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies\". The quoted-printable encoding is designed for data where there are relatively few nonprintable characters; the base64 encoding scheme available via the :mod:`base64` module is more compact if there are many such characters, as when sending a graphics file."
msgstr ""

msgid "Decode the contents of the *input* file and write the resulting decoded binary data to the *output* file. *input* and *output* must either be file objects or objects that mimic the file object interface. *input* will be read until ``input.readline()`` returns an empty string. If the optional argument *header* is present and true, underscore will be decoded as space. This is used to decode \"Q\"-encoded headers as described in :rfc:`1522`: \"MIME (Multipurpose Internet Mail Extensions) Part Two: Message Header Extensions for Non-ASCII Text\"."
msgstr ""

msgid "Encode the contents of the *input* file and write the resulting quoted-printable data to the *output* file. *input* and *output* must either be file objects or objects that mimic the file object interface. *input* will be read until ``input.readline()`` returns an empty string. *quotetabs* is a flag which controls whether to encode embedded spaces and tabs; when true it encodes such embedded whitespace, and when false it leaves them unencoded.  Note that spaces and tabs appearing at the end of lines are always encoded, as per :rfc:`1521`.  *header* is a flag which controls if spaces are encoded as underscores as per :rfc:`1522`."
msgstr ""

msgid "Like :func:`decode`, except that it accepts a source string and returns the corresponding decoded string."
msgstr ""

msgid "Like :func:`encode`, except that it accepts a source string and returns the corresponding encoded string.  *quotetabs* and *header* are optional (defaulting to ``False``), and are passed straight through to :func:`encode`."
msgstr ""

msgid "Encode and decode MIME base64 data"
msgstr ""

msgid ":mod:`random` --- Generate pseudo-random numbers"
msgstr ""

msgid "This module implements pseudo-random number generators for various distributions."
msgstr ""

msgid "For integers, uniform selection from a range. For sequences, uniform selection of a random element, a function to generate a random permutation of a list in-place, and a function for random sampling without replacement."
msgstr ""

msgid "On the real line, there are functions to compute uniform, normal (Gaussian), lognormal, negative exponential, gamma, and beta distributions. For generating distributions of angles, the von Mises distribution is available."
msgstr ""

msgid "Almost all module functions depend on the basic function :func:`random`, which generates a random float uniformly in the semi-open range [0.0, 1.0).  Python uses the Mersenne Twister as the core generator.  It produces 53-bit precision floats and has a period of 2\\*\\*19937-1.  The underlying implementation in C is both fast and threadsafe.  The Mersenne Twister is one of the most extensively tested random number generators in existence.  However, being completely deterministic, it is not suitable for all purposes, and is completely unsuitable for cryptographic purposes."
msgstr ""

msgid "The functions supplied by this module are actually bound methods of a hidden instance of the :class:`random.Random` class.  You can instantiate your own instances of :class:`Random` to get generators that don't share state."
msgstr ""

msgid "Class :class:`Random` can also be subclassed if you want to use a different basic generator of your own devising: in that case, override the :meth:`random`, :meth:`seed`, :meth:`getstate`, and :meth:`setstate` methods. Optionally, a new generator can supply a :meth:`getrandbits` method --- this allows :meth:`randrange` to produce selections over an arbitrarily large range."
msgstr ""

msgid "As an example of subclassing, the :mod:`random` module provides the :class:`WichmannHill` class that implements an alternative generator in pure Python.  The class provides a backward compatible way to reproduce results from earlier versions of Python, which used the Wichmann-Hill algorithm as the core generator.  Note that this Wichmann-Hill generator can no longer be recommended: its period is too short by contemporary standards, and the sequence generated is known to fail some stringent randomness tests.  See the references below for a recent variant that repairs these flaws."
msgstr ""

msgid "The :mod:`random` module also provides the :class:`SystemRandom` class which uses the system function :func:`os.urandom` to generate random numbers from sources provided by the operating system."
msgstr ""

msgid "Bookkeeping functions:"
msgstr ""

msgid "Initialize the basic random number generator. Optional argument *x* can be any :term:`hashable` object. If *x* is omitted or ``None``, current system time is used; current system time is also used to initialize the generator when the module is first imported.  If randomness sources are provided by the operating system, they are used instead of the system time (see the :func:`os.urandom` function for details on availability)."
msgstr ""

msgid "If *x* is not ``None`` or an int, ``hash(x)`` is used instead. If *x* is an int, *x* is used directly."
msgstr ""

msgid "Return an object capturing the current internal state of the generator.  This object can be passed to :func:`setstate` to restore the state."
msgstr ""

msgid "*state* should have been obtained from a previous call to :func:`getstate`, and :func:`setstate` restores the internal state of the generator to what it was at the time :func:`setstate` was called."
msgstr ""

msgid "Returns a Python integer with *k* random bits. This method is supplied with the MersenneTwister generator and some other generators may also provide it as an optional part of the API. When available, :meth:`getrandbits` enables :meth:`randrange` to handle arbitrarily large ranges."
msgstr ""

msgid "Functions for integers:"
msgstr ""

msgid "Return a randomly selected element from ``range(start, stop, step)``.  This is equivalent to ``choice(range(start, stop, step))``, but doesn't actually build a range object."
msgstr ""

msgid "Return a random integer *N* such that ``a <= N <= b``.  Alias for ``randrange(a, b+1)``."
msgstr ""

msgid "Functions for sequences:"
msgstr ""

msgid "Return a random element from the non-empty sequence *seq*. If *seq* is empty, raises :exc:`IndexError`."
msgstr ""

msgid "Shuffle the sequence *x* in place. The optional argument *random* is a 0-argument function returning a random float in [0.0, 1.0); by default, this is the function :func:`random`."
msgstr ""

msgid "Note that for even rather small ``len(x)``, the total number of permutations of *x* is larger than the period of most random number generators; this implies that most permutations of a long sequence can never be generated."
msgstr ""

msgid "Return a *k* length list of unique elements chosen from the population sequence or set. Used for random sampling without replacement."
msgstr ""

msgid "Returns a new list containing elements from the population while leaving the original population unchanged.  The resulting list is in selection order so that all sub-slices will also be valid random samples.  This allows raffle winners (the sample) to be partitioned into grand prize and second place winners (the subslices)."
msgstr ""

msgid "Members of the population need not be :term:`hashable` or unique.  If the population contains repeats, then each occurrence is a possible selection in the sample."
msgstr ""

msgid "To choose a sample from a range of integers, use an :func:`range` object as an argument.  This is especially fast and space efficient for sampling from a large population:  ``sample(range(10000000), 60)``."
msgstr ""

msgid "The following functions generate specific real-valued distributions. Function parameters are named after the corresponding variables in the distribution's equation, as used in common mathematical practice; most of these equations can be found in any statistics text."
msgstr ""

msgid "Return the next random floating point number in the range [0.0, 1.0)."
msgstr ""

msgid "Return a random floating point number *N* such that ``a <= N <= b`` for ``a <= b`` and ``b <= N <= a`` for ``b < a``."
msgstr ""

msgid "The end-point value ``b`` may or may not be included in the range depending on floating-point rounding in the equation ``a + (b-a) * random()``."
msgstr ""

msgid "Return a random floating point number *N* such that ``low <= N <= high`` and with the specified *mode* between those bounds.  The *low* and *high* bounds default to zero and one.  The *mode* argument defaults to the midpoint between the bounds, giving a symmetric distribution."
msgstr ""

msgid "Beta distribution.  Conditions on the parameters are ``alpha > 0`` and ``beta > 0``. Returned values range between 0 and 1."
msgstr ""

msgid "Exponential distribution.  *lambd* is 1.0 divided by the desired mean.  It should be nonzero.  (The parameter would be called \"lambda\", but that is a reserved word in Python.)  Returned values range from 0 to positive infinity if *lambd* is positive, and from negative infinity to 0 if *lambd* is negative."
msgstr ""

msgid "Gamma distribution.  (*Not* the gamma function!)  Conditions on the parameters are ``alpha > 0`` and ``beta > 0``."
msgstr ""

msgid "Gaussian distribution.  *mu* is the mean, and *sigma* is the standard deviation.  This is slightly faster than the :func:`normalvariate` function defined below."
msgstr ""

msgid "Log normal distribution.  If you take the natural logarithm of this distribution, you'll get a normal distribution with mean *mu* and standard deviation *sigma*.  *mu* can have any value, and *sigma* must be greater than zero."
msgstr ""

msgid "Normal distribution.  *mu* is the mean, and *sigma* is the standard deviation."
msgstr ""

msgid "*mu* is the mean angle, expressed in radians between 0 and 2\\*\\ *pi*, and *kappa* is the concentration parameter, which must be greater than or equal to zero.  If *kappa* is equal to zero, this distribution reduces to a uniform random angle over the range 0 to 2\\*\\ *pi*."
msgstr ""

msgid "Pareto distribution.  *alpha* is the shape parameter."
msgstr ""

msgid "Weibull distribution.  *alpha* is the scale parameter and *beta* is the shape parameter."
msgstr ""

msgid "Alternative Generators:"
msgstr ""

msgid "Class that uses the :func:`os.urandom` function for generating random numbers from sources provided by the operating system. Not available on all systems. Does not rely on software state and sequences are not reproducible. Accordingly, the :meth:`seed` method has no effect and is ignored. The :meth:`getstate` and :meth:`setstate` methods raise :exc:`NotImplementedError` if called."
msgstr ""

msgid "Examples of basic usage::"
msgstr ""

msgid ">>> random.random()        # Random float x, 0.0 <= x < 1.0 0.37444887175646646 >>> random.uniform(1, 10)  # Random float x, 1.0 <= x < 10.0 1.1800146073117523 >>> random.randint(1, 10)  # Integer from 1 to 10, endpoints included 7 >>> random.randrange(0, 101, 2)  # Even integer from 0 to 100 26 >>> random.choice('abcdefghij')  # Choose a random element 'c'  >>> items = [1, 2, 3, 4, 5, 6, 7] >>> random.shuffle(items) >>> items [7, 3, 2, 5, 6, 4, 1]  >>> random.sample([1, 2, 3, 4, 5],  3)  # Choose 3 elements [4, 1, 5]"
msgstr ""

msgid "M. Matsumoto and T. Nishimura, \"Mersenne Twister: A 623-dimensionally equidistributed uniform pseudorandom number generator\", ACM Transactions on Modeling and Computer Simulation Vol. 8, No. 1, January pp.3-30 1998."
msgstr ""

msgid "`Complementary-Multiply-with-Carry recipe <http://code.activestate.com/recipes/576707/>`_ for a compatible alternative random number generator with a long period and comparatively simple update operations."
msgstr ""

msgid ":mod:`re` --- Regular expression operations"
msgstr ""

msgid "This module provides regular expression matching operations similar to those found in Perl."
msgstr ""

msgid "Both patterns and strings to be searched can be Unicode strings as well as 8-bit strings. However, Unicode strings and 8-bit strings cannot be mixed: that is, you cannot match an Unicode string with a byte pattern or vice-versa; similarly, when asking for a substitution, the replacement string must be of the same type as both the pattern and the search string."
msgstr ""

msgid "Regular expressions use the backslash character (``'\\'``) to indicate special forms or to allow special characters to be used without invoking their special meaning.  This collides with Python's usage of the same character for the same purpose in string literals; for example, to match a literal backslash, one might have to write ``'\\\\\\\\'`` as the pattern string, because the regular expression must be ``\\\\``, and each backslash must be expressed as ``\\\\`` inside a regular Python string literal."
msgstr ""

msgid "The solution is to use Python's raw string notation for regular expression patterns; backslashes are not handled in any special way in a string literal prefixed with ``'r'``.  So ``r\"\\n\"`` is a two-character string containing ``'\\'`` and ``'n'``, while ``\"\\n\"`` is a one-character string containing a newline.  Usually patterns will be expressed in Python code using this raw string notation."
msgstr ""

msgid "It is important to note that most regular expression operations are available as module-level functions and :class:`RegexObject` methods.  The functions are shortcuts that don't require you to compile a regex object first, but miss some fine-tuning parameters."
msgstr ""

msgid "Book on regular expressions by Jeffrey Friedl, published by O'Reilly.  The second edition of the book no longer covers Python at all, but the first edition covered writing good regular expression patterns in great detail."
msgstr ""

msgid "Regular Expression Syntax"
msgstr ""

msgid "A regular expression (or RE) specifies a set of strings that matches it; the functions in this module let you check if a particular string matches a given regular expression (or if a given regular expression matches a particular string, which comes down to the same thing)."
msgstr ""

msgid "Regular expressions can be concatenated to form new regular expressions; if *A* and *B* are both regular expressions, then *AB* is also a regular expression. In general, if a string *p* matches *A* and another string *q* matches *B*, the string *pq* will match AB.  This holds unless *A* or *B* contain low precedence operations; boundary conditions between *A* and *B*; or have numbered group references.  Thus, complex expressions can easily be constructed from simpler primitive expressions like the ones described here.  For details of the theory and implementation of regular expressions, consult the Friedl book referenced above, or almost any textbook about compiler construction."
msgstr ""

msgid "A brief explanation of the format of regular expressions follows.  For further information and a gentler presentation, consult the :ref:`regex-howto`."
msgstr ""

msgid "Regular expressions can contain both special and ordinary characters. Most ordinary characters, like ``'A'``, ``'a'``, or ``'0'``, are the simplest regular expressions; they simply match themselves.  You can concatenate ordinary characters, so ``last`` matches the string ``'last'``.  (In the rest of this section, we'll write RE's in ``this special style``, usually without quotes, and strings to be matched ``'in single quotes'``.)"
msgstr ""

msgid "Some characters, like ``'|'`` or ``'('``, are special. Special characters either stand for classes of ordinary characters, or affect how the regular expressions around them are interpreted. Regular expression pattern strings may not contain null bytes, but can specify the null byte using the ``\\number`` notation, e.g., ``'\\x00'``."
msgstr ""

msgid "The special characters are:"
msgstr ""

msgid "(Dot.)  In the default mode, this matches any character except a newline.  If the :const:`DOTALL` flag has been specified, this matches any character including a newline."
msgstr ""

msgid "(Caret.)  Matches the start of the string, and in :const:`MULTILINE` mode also matches immediately after each newline."
msgstr ""

msgid "Matches the end of the string or just before the newline at the end of the string, and in :const:`MULTILINE` mode also matches before a newline.  ``foo`` matches both 'foo' and 'foobar', while the regular expression ``foo$`` matches only 'foo'.  More interestingly, searching for ``foo.$`` in ``'foo1\\nfoo2\\n'`` matches 'foo2' normally, but 'foo1' in :const:`MULTILINE` mode; searching for a single ``$`` in ``'foo\\n'`` will find two (empty) matches: one just before the newline, and one at the end of the string."
msgstr ""

msgid "Causes the resulting RE to match 0 or more repetitions of the preceding RE, as many repetitions as are possible.  ``ab*`` will match 'a', 'ab', or 'a' followed by any number of 'b's."
msgstr ""

msgid "Causes the resulting RE to match 1 or more repetitions of the preceding RE. ``ab+`` will match 'a' followed by any non-zero number of 'b's; it will not match just 'a'."
msgstr ""

msgid "Causes the resulting RE to match 0 or 1 repetitions of the preceding RE. ``ab?`` will match either 'a' or 'ab'."
msgstr ""

msgid "The ``'*'``, ``'+'``, and ``'?'`` qualifiers are all :dfn:`greedy`; they match as much text as possible.  Sometimes this behaviour isn't desired; if the RE ``<.*>`` is matched against ``'<H1>title</H1>'``, it will match the entire string, and not just ``'<H1>'``.  Adding ``'?'`` after the qualifier makes it perform the match in :dfn:`non-greedy` or :dfn:`minimal` fashion; as *few* characters as possible will be matched.  Using ``.*?`` in the previous expression will match only ``'<H1>'``."
msgstr ""

msgid "Specifies that exactly *m* copies of the previous RE should be matched; fewer matches cause the entire RE not to match.  For example, ``a{6}`` will match exactly six ``'a'`` characters, but not five."
msgstr ""

msgid "Causes the resulting RE to match from *m* to *n* repetitions of the preceding RE, attempting to match as many repetitions as possible.  For example, ``a{3,5}`` will match from 3 to 5 ``'a'`` characters.  Omitting *m* specifies a lower bound of zero,  and omitting *n* specifies an infinite upper bound.  As an example, ``a{4,}b`` will match ``aaaab`` or a thousand ``'a'`` characters followed by a ``b``, but not ``aaab``. The comma may not be omitted or the modifier would be confused with the previously described form."
msgstr ""

msgid "Causes the resulting RE to match from *m* to *n* repetitions of the preceding RE, attempting to match as *few* repetitions as possible.  This is the non-greedy version of the previous qualifier.  For example, on the 6-character string ``'aaaaaa'``, ``a{3,5}`` will match 5 ``'a'`` characters, while ``a{3,5}?`` will only match 3 characters."
msgstr ""

msgid "Either escapes special characters (permitting you to match characters like ``'*'``, ``'?'``, and so forth), or signals a special sequence; special sequences are discussed below."
msgstr ""

msgid "If you're not using a raw string to express the pattern, remember that Python also uses the backslash as an escape sequence in string literals; if the escape sequence isn't recognized by Python's parser, the backslash and subsequent character are included in the resulting string.  However, if Python would recognize the resulting sequence, the backslash should be repeated twice.  This is complicated and hard to understand, so it's highly recommended that you use raw strings for all but the simplest expressions."
msgstr ""

msgid "Used to indicate a set of characters.  Characters can be listed individually, or a range of characters can be indicated by giving two characters and separating them by a ``'-'``.  Special characters are not active inside sets.  For example, ``[akm$]`` will match any of the characters ``'a'``, ``'k'``, ``'m'``, or ``'$'``; ``[a-z]`` will match any lowercase letter, and ``[a-zA-Z0-9]`` matches any letter or digit.  Character classes such as ``\\w`` or ``\\S`` (defined below) are also acceptable inside a range, although the characters they match depends on whether :const:`ASCII` or  :const:`LOCALE` mode is in force.  If you want to include a ``']'`` or a ``'-'`` inside a set, precede it with a backslash, or place it as the first character.  The pattern ``[]]`` will match ``']'``, for example."
msgstr ""

msgid "You can match the characters not within a range by :dfn:`complementing` the set. This is indicated by including a ``'^'`` as the first character of the set; ``'^'`` elsewhere will simply match the ``'^'`` character.  For example, ``[^5]`` will match any character except ``'5'``, and ``[^^]`` will match any character except ``'^'``."
msgstr ""

msgid "Note that inside ``[]`` the special forms and special characters lose their meanings and only the syntaxes described here are valid. For example, ``+``, ``*``, ``(``, ``)``, and so on are treated as literals inside ``[]``, and backreferences cannot be used inside ``[]``."
msgstr ""

msgid "``A|B``, where A and B can be arbitrary REs, creates a regular expression that will match either A or B.  An arbitrary number of REs can be separated by the ``'|'`` in this way.  This can be used inside groups (see below) as well.  As the target string is scanned, REs separated by ``'|'`` are tried from left to right. When one pattern completely matches, that branch is accepted. This means that once ``A`` matches, ``B`` will not be tested further, even if it would produce a longer overall match.  In other words, the ``'|'`` operator is never greedy.  To match a literal ``'|'``, use ``\\|``, or enclose it inside a character class, as in ``[|]``."
msgstr ""

msgid "Matches whatever regular expression is inside the parentheses, and indicates the start and end of a group; the contents of a group can be retrieved after a match has been performed, and can be matched later in the string with the ``\\number`` special sequence, described below.  To match the literals ``'('`` or ``')'``, use ``\\(`` or ``\\)``, or enclose them inside a character class: ``[(] [)]``."
msgstr ""

msgid "This is an extension notation (a ``'?'`` following a ``'('`` is not meaningful otherwise).  The first character after the ``'?'`` determines what the meaning and further syntax of the construct is. Extensions usually do not create a new group; ``(?P<name>...)`` is the only exception to this rule. Following are the currently supported extensions."
msgstr ""

msgid "(One or more letters from the set ``'a'``, ``'i'``, ``'L'``, ``'m'``, ``'s'``, ``'u'``, ``'x'``.)  The group matches the empty string; the letters set the corresponding flags: :const:`re.A` (ASCII-only matching), :const:`re.I` (ignore case), :const:`re.L` (locale dependent), :const:`re.M` (multi-line), :const:`re.S` (dot matches all), and :const:`re.X` (verbose), for the entire regular expression. (The flags are described in :ref:`contents-of-module-re`.) This is useful if you wish to include the flags as part of the regular expression, instead of passing a *flag* argument to the :func:`re.compile` function."
msgstr ""

msgid "Note that the ``(?x)`` flag changes how the expression is parsed. It should be used first in the expression string, or after one or more whitespace characters. If there are non-whitespace characters before the flag, the results are undefined."
msgstr ""

msgid "A non-grouping version of regular parentheses. Matches whatever regular expression is inside the parentheses, but the substring matched by the group *cannot* be retrieved after performing a match or referenced later in the pattern."
msgstr ""

msgid "Similar to regular parentheses, but the substring matched by the group is accessible within the rest of the regular expression via the symbolic group name *name*.  Group names must be valid Python identifiers, and each group name must be defined only once within a regular expression.  A symbolic group is also a numbered group, just as if the group were not named.  So the group named ``id`` in the example below can also be referenced as the numbered group ``1``."
msgstr ""

msgid "For example, if the pattern is ``(?P<id>[a-zA-Z_]\\w*)``, the group can be referenced by its name in arguments to methods of match objects, such as ``m.group('id')`` or ``m.end('id')``, and also by name in the regular expression itself (using ``(?P=id)``) and replacement text given to ``.sub()`` (using ``\\g<id>``)."
msgstr ""

msgid "Matches whatever text was matched by the earlier group named *name*."
msgstr ""

msgid "A comment; the contents of the parentheses are simply ignored."
msgstr ""

msgid "Matches if ``...`` matches next, but doesn't consume any of the string.  This is called a lookahead assertion.  For example, ``Isaac (?=Asimov)`` will match ``'Isaac '`` only if it's followed by ``'Asimov'``."
msgstr ""

msgid "Matches if ``...`` doesn't match next.  This is a negative lookahead assertion. For example, ``Isaac (?!Asimov)`` will match ``'Isaac '`` only if it's *not* followed by ``'Asimov'``."
msgstr ""

msgid "Matches if the current position in the string is preceded by a match for ``...`` that ends at the current position.  This is called a :dfn:`positive lookbehind assertion`. ``(?<=abc)def`` will find a match in ``abcdef``, since the lookbehind will back up 3 characters and check if the contained pattern matches. The contained pattern must only match strings of some fixed length, meaning that ``abc`` or ``a|b`` are allowed, but ``a*`` and ``a{3,4}`` are not.  Note that patterns which start with positive lookbehind assertions will never match at the beginning of the string being searched; you will most likely want to use the :func:`search` function rather than the :func:`match` function:"
msgstr ""

msgid ">>> import re >>> m = re.search('(?<=abc)def', 'abcdef') >>> m.group(0) 'def'"
msgstr ""

msgid "This example looks for a word following a hyphen:"
msgstr ""

msgid ">>> m = re.search('(?<=-)\\w+', 'spam-egg') >>> m.group(0) 'egg'"
msgstr ""

msgid "Matches if the current position in the string is not preceded by a match for ``...``.  This is called a :dfn:`negative lookbehind assertion`.  Similar to positive lookbehind assertions, the contained pattern must only match strings of some fixed length.  Patterns which start with negative lookbehind assertions may match at the beginning of the string being searched."
msgstr ""

msgid "Will try to match with ``yes-pattern`` if the group with given *id* or *name* exists, and with ``no-pattern`` if it doesn't. ``no-pattern`` is optional and can be omitted. For example,  ``(<)?(\\w+@\\w+(?:\\.\\w+)+)(?(1)>)`` is a poor email matching pattern, which will match with ``'<user@host.com>'`` as well as ``'user@host.com'``, but not with ``'<user@host.com'``."
msgstr ""

msgid "The special sequences consist of ``'\\'`` and a character from the list below. If the ordinary character is not on the list, then the resulting RE will match the second character.  For example, ``\\$`` matches the character ``'$'``."
msgstr ""

msgid "Matches the contents of the group of the same number.  Groups are numbered starting from 1.  For example, ``(.+) \\1`` matches ``'the the'`` or ``'55 55'``, but not ``'the end'`` (note the space after the group).  This special sequence can only be used to match one of the first 99 groups.  If the first digit of *number* is 0, or *number* is 3 octal digits long, it will not be interpreted as a group match, but as the character with octal value *number*. Inside the ``'['`` and ``']'`` of a character class, all numeric escapes are treated as characters."
msgstr ""

msgid "Matches only at the start of the string."
msgstr ""

msgid "Matches the empty string, but only at the beginning or end of a word. A word is defined as a sequence of Unicode alphanumeric or underscore characters, so the end of a word is indicated by whitespace or a non-alphanumeric, non-underscore Unicode character. Note that formally, ``\\b`` is defined as the boundary between a ``\\w`` and a ``\\W`` character (or vice versa). By default Unicode alphanumerics are the ones used, but this can be changed by using the :const:`ASCII` flag.  Inside a character range, ``\\b`` represents the backspace character, for compatibility with Python's string literals."
msgstr ""

msgid "Matches the empty string, but only when it is *not* at the beginning or end of a word.  This is just the opposite of ``\\b``, so word characters are Unicode alphanumerics or the underscore, although this can be changed by using the :const:`ASCII` flag."
msgstr ""

msgid "Matches any Unicode decimal digit (that is, any character in Unicode character category [Nd]).  This includes ``[0-9]``, and also many other digit characters.  If the :const:`ASCII` flag is used only ``[0-9]`` is matched (but the flag affects the entire regular expression, so in such cases using an explicit ``[0-9]`` may be a better choice)."
msgstr ""

msgid "Matches any decimal digit; this is equivalent to ``[0-9]``."
msgstr ""

msgid "Matches any character which is not a Unicode decimal digit. This is the opposite of ``\\d``. If the :const:`ASCII` flag is used this becomes the equivalent of ``[^0-9]`` (but the flag affects the entire regular expression, so in such cases using an explicit ``[^0-9]`` may be a better choice)."
msgstr ""

msgid "Matches Unicode whitespace characters (which includes ``[ \\t\\n\\r\\f\\v]``, and also many other characters, for example the non-breaking spaces mandated by typography rules in many languages). If the :const:`ASCII` flag is used, only ``[ \\t\\n\\r\\f\\v]`` is matched (but the flag affects the entire regular expression, so in such cases using an explicit ``[ \\t\\n\\r\\f\\v]`` may be a better choice)."
msgstr ""

msgid "Matches characters considered whitespace in the ASCII character set; this is equivalent to ``[ \\t\\n\\r\\f\\v]``."
msgstr ""

msgid "Matches any character which is not a Unicode whitespace character. This is the opposite of ``\\s``. If the :const:`ASCII` flag is used this becomes the equivalent of ``[^ \\t\\n\\r\\f\\v]`` (but the flag affects the entire regular expression, so in such cases using an explicit ``[^ \\t\\n\\r\\f\\v]`` may be a better choice)."
msgstr ""

msgid "Matches Unicode word characters; this includes most characters that can be part of a word in any language, as well as numbers and the underscore. If the :const:`ASCII` flag is used, only ``[a-zA-Z0-9_]`` is matched (but the flag affects the entire regular expression, so in such cases using an explicit ``[a-zA-Z0-9_]`` may be a better choice)."
msgstr ""

msgid "Matches characters considered alphanumeric in the ASCII character set; this is equivalent to ``[a-zA-Z0-9_]``."
msgstr ""

msgid "Matches any character which is not a Unicode word character. This is the opposite of ``\\w``. If the :const:`ASCII` flag is used this becomes the equivalent of ``[^a-zA-Z0-9_]`` (but the flag affects the entire regular expression, so in such cases using an explicit ``[^a-zA-Z0-9_]`` may be a better choice)."
msgstr ""

msgid "Matches only at the end of the string."
msgstr ""

msgid "Most of the standard escapes supported by Python string literals are also accepted by the regular expression parser::"
msgstr ""

msgid "\\a      \\b      \\f      \\n \\r      \\t      \\v      \\x \\\\"
msgstr ""

msgid "Octal escapes are included in a limited form: If the first digit is a 0, or if there are three octal digits, it is considered an octal escape. Otherwise, it is a group reference.  As for string literals, octal escapes are always at most three digits in length."
msgstr ""

msgid "Matching vs Searching"
msgstr ""

msgid "Python offers two different primitive operations based on regular expressions: **match** checks for a match only at the beginning of the string, while **search** checks for a match anywhere in the string (this is what Perl does by default)."
msgstr ""

msgid "Note that match may differ from search even when using a regular expression beginning with ``'^'``: ``'^'`` matches only at the start of the string, or in :const:`MULTILINE` mode also immediately following a newline.  The \"match\" operation succeeds only if the pattern matches at the start of the string regardless of mode, or at the starting position given by the optional *pos* argument regardless of whether a newline precedes it."
msgstr ""

msgid ">>> re.match(\"c\", \"abcdef\")  # No match >>> re.search(\"c\", \"abcdef\") # Match <_sre.SRE_Match object at ...>"
msgstr ""

msgid "The module defines several functions, constants, and an exception. Some of the functions are simplified versions of the full featured methods for compiled regular expressions.  Most non-trivial applications always use the compiled form."
msgstr ""

msgid "Compile a regular expression pattern into a regular expression object, which can be used for matching using its :func:`match` and :func:`search` methods, described below."
msgstr ""

msgid "The expression's behaviour can be modified by specifying a *flags* value. Values can be any of the following variables, combined using bitwise OR (the ``|`` operator)."
msgstr ""

msgid "The sequence ::"
msgstr ""

msgid "prog = re.compile(pattern) result = prog.match(string)"
msgstr ""

msgid "is equivalent to ::"
msgstr ""

msgid "result = re.match(pattern, string)"
msgstr ""

msgid "but using :func:`re.compile` and saving the resulting regular expression object for reuse is more efficient when the expression will be used several times in a single program."
msgstr ""

msgid "The compiled versions of the most recent patterns passed to :func:`re.match`, :func:`re.search` or :func:`re.compile` are cached, so programs that use only a few regular expressions at a time needn't worry about compiling regular expressions."
msgstr ""

msgid "Make ``\\w``, ``\\W``, ``\\b``, ``\\B``, ``\\d``, ``\\D``, ``\\s`` and ``\\S`` perform ASCII-only matching instead of full Unicode matching.  This is only meaningful for Unicode patterns, and is ignored for byte patterns."
msgstr ""

msgid "Note that for backward compatibility, the :const:`re.U` flag still exists (as well as its synonym :const:`re.UNICODE` and its embedded counterpart ``(?u)``), but these are redundant in Python 3.0 since matches are Unicode by default for strings (and Unicode matching isn't allowed for bytes)."
msgstr ""

msgid "Perform case-insensitive matching; expressions like ``[A-Z]`` will match lowercase letters, too.  This is not affected by the current locale and works for Unicode characters as expected."
msgstr ""

msgid "Make ``\\w``, ``\\W``, ``\\b``, ``\\B``, ``\\s`` and ``\\S`` dependent on the current locale. The use of this flag is discouraged as the locale mechanism is very unreliable, and it only handles one \"culture\" at a time anyway; you should use Unicode matching instead, which is the default in Python 3.0 for Unicode (str) patterns."
msgstr ""

msgid "When specified, the pattern character ``'^'`` matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character ``'$'`` matches at the end of the string and at the end of each line (immediately preceding each newline).  By default, ``'^'`` matches only at the beginning of the string, and ``'$'`` only at the end of the string and immediately before the newline (if any) at the end of the string."
msgstr ""

msgid "Make the ``'.'`` special character match any character at all, including a newline; without this flag, ``'.'`` will match anything *except* a newline."
msgstr ""

msgid "This flag allows you to write regular expressions that look nicer. Whitespace within the pattern is ignored, except when in a character class or preceded by an unescaped backslash, and, when a line contains a ``'#'`` neither in a character class or preceded by an unescaped backslash, all characters from the leftmost such ``'#'`` through the end of the line are ignored."
msgstr ""

msgid "That means that the two following regular expression objects that match a decimal number are functionally equal::"
msgstr ""

msgid "a = re.compile(r\"\"\"\\d +  # the integral part                    \\.    # the decimal point                    \\d *  # some fractional digits\"\"\", re.X) b = re.compile(r\"\\d+\\.\\d*\")"
msgstr ""

msgid "Scan through *string* looking for a location where the regular expression *pattern* produces a match, and return a corresponding :class:`MatchObject` instance. Return ``None`` if no position in the string matches the pattern; note that this is different from finding a zero-length match at some point in the string."
msgstr ""

msgid "If zero or more characters at the beginning of *string* match the regular expression *pattern*, return a corresponding :class:`MatchObject` instance. Return ``None`` if the string does not match the pattern; note that this is different from a zero-length match."
msgstr ""

msgid "If you want to locate a match anywhere in *string*, use :func:`search` instead."
msgstr ""

msgid "Split *string* by the occurrences of *pattern*.  If capturing parentheses are used in *pattern*, then the text of all groups in the pattern are also returned as part of the resulting list. If *maxsplit* is nonzero, at most *maxsplit* splits occur, and the remainder of the string is returned as the final element of the list. ::"
msgstr ""

msgid ">>> re.split('\\W+', 'Words, words, words.') ['Words', 'words', 'words', ''] >>> re.split('(\\W+)', 'Words, words, words.') ['Words', ', ', 'words', ', ', 'words', '.', ''] >>> re.split('\\W+', 'Words, words, words.', 1) ['Words', 'words, words.'] >>> re.split('[a-f]+', '0a3B9', flags=re.IGNORECASE) ['0', '3', '9']"
msgstr ""

msgid "If there are capturing groups in the separator and it matches at the start of the string, the result will start with an empty string.  The same holds for the end of the string:"
msgstr ""

msgid ">>> re.split('(\\W+)', '...words, words...') ['', '...', 'words', ', ', 'words', '...', '']"
msgstr ""

msgid "That way, separator components are always found at the same relative indices within the result list (e.g., if there's one capturing group in the separator, the 0th, the 2nd and so forth)."
msgstr ""

msgid "Note that *split* will never split a string on an empty pattern match. For example:"
msgstr ""

msgid ">>> re.split('x*', 'foo') ['foo'] >>> re.split(\"(?m)^$\", \"foo\\n\\nbar\\n\") ['foo\\n\\nbar\\n']"
msgstr ""

msgid "Return all non-overlapping matches of *pattern* in *string*, as a list of strings.  The *string* is scanned left-to-right, and matches are returned in the order found.  If one or more groups are present in the pattern, return a list of groups; this will be a list of tuples if the pattern has more than one group.  Empty matches are included in the result unless they touch the beginning of another match."
msgstr ""

msgid "Return an :term:`iterator` yielding :class:`MatchObject` instances over all non-overlapping matches for the RE *pattern* in *string*.  The *string* is scanned left-to-right, and matches are returned in the order found.  Empty matches are included in the result unless they touch the beginning of another match."
msgstr ""

msgid "Return the string obtained by replacing the leftmost non-overlapping occurrences of *pattern* in *string* by the replacement *repl*.  If the pattern isn't found, *string* is returned unchanged.  *repl* can be a string or a function; if it is a string, any backslash escapes in it are processed.  That is, ``\\n`` is converted to a single newline character, ``\\r`` is converted to a linefeed, and so forth.  Unknown escapes such as ``\\j`` are left alone.  Backreferences, such as ``\\6``, are replaced with the substring matched by group 6 in the pattern. For example:"
msgstr ""

msgid ">>> re.sub(r'def\\s+([a-zA-Z_][a-zA-Z_0-9]*)\\s*\\(\\s*\\):', ...        r'static PyObject*\\npy_\\1(void)\\n{', ...        'def myfunc():') 'static PyObject*\\npy_myfunc(void)\\n{'"
msgstr ""

msgid "If *repl* is a function, it is called for every non-overlapping occurrence of *pattern*.  The function takes a single match object argument, and returns the replacement string.  For example:"
msgstr ""

msgid ">>> def dashrepl(matchobj): ...     if matchobj.group(0) == '-': return ' ' ...     else: return '-' >>> re.sub('-{1,2}', dashrepl, 'pro----gram-files') 'pro--gram files' >>> re.sub(r'\\sAND\\s', ' & ', 'Baked Beans And Spam', flags=re.IGNORECASE) 'Baked Beans & Spam'"
msgstr ""

msgid "The pattern may be a string or an RE object."
msgstr ""

msgid "The optional argument *count* is the maximum number of pattern occurrences to be replaced; *count* must be a non-negative integer.  If omitted or zero, all occurrences will be replaced. Empty matches for the pattern are replaced only when not adjacent to a previous match, so ``sub('x*', '-', 'abc')`` returns ``'-a-b-c-'``."
msgstr ""

msgid "In addition to character escapes and backreferences as described above, ``\\g<name>`` will use the substring matched by the group named ``name``, as defined by the ``(?P<name>...)`` syntax. ``\\g<number>`` uses the corresponding group number; ``\\g<2>`` is therefore equivalent to ``\\2``, but isn't ambiguous in a replacement such as ``\\g<2>0``.  ``\\20`` would be interpreted as a reference to group 20, not a reference to group 2 followed by the literal character ``'0'``.  The backreference ``\\g<0>`` substitutes in the entire substring matched by the RE."
msgstr ""

msgid "Perform the same operation as :func:`sub`, but return a tuple ``(new_string, number_of_subs_made)``."
msgstr ""

msgid "Return *string* with all non-alphanumerics backslashed; this is useful if you want to match an arbitrary literal string that may have regular expression metacharacters in it."
msgstr ""

msgid "Exception raised when a string passed to one of the functions here is not a valid regular expression (for example, it might contain unmatched parentheses) or when some other error occurs during compilation or matching.  It is never an error if a string contains no match for a pattern."
msgstr ""

msgid "Regular Expression Objects"
msgstr ""

msgid "The :class:`RegexObject` class supports the following methods and attributes:"
msgstr ""

msgid "Scan through *string* looking for a location where this regular expression produces a match, and return a corresponding :class:`MatchObject` instance. Return ``None`` if no position in the string matches the pattern; note that this is different from finding a zero-length match at some point in the string."
msgstr ""

msgid "The optional second parameter *pos* gives an index in the string where the search is to start; it defaults to ``0``.  This is not completely equivalent to slicing the string; the ``'^'`` pattern character matches at the real beginning of the string and at positions just after a newline, but not necessarily at the index where the search is to start."
msgstr ""

msgid "The optional parameter *endpos* limits how far the string will be searched; it will be as if the string is *endpos* characters long, so only the characters from *pos* to ``endpos - 1`` will be searched for a match.  If *endpos* is less than *pos*, no match will be found, otherwise, if *rx* is a compiled regular expression object, ``rx.search(string, 0, 50)`` is equivalent to ``rx.search(string[:50], 0)``."
msgstr ""

msgid ">>> pattern = re.compile(\"d\") >>> pattern.search(\"dog\")     # Match at index 0 <_sre.SRE_Match object at ...> >>> pattern.search(\"dog\", 1)  # No match; search doesn't include the \"d\""
msgstr ""

msgid "If zero or more characters at the *beginning* of *string* match this regular expression, return a corresponding :class:`MatchObject` instance.  Return ``None`` if the string does not match the pattern; note that this is different from a zero-length match."
msgstr ""

msgid "The optional *pos* and *endpos* parameters have the same meaning as for the :meth:`~RegexObject.search` method."
msgstr ""

msgid "If you want to locate a match anywhere in *string*, use :meth:`~RegexObject.search` instead."
msgstr ""

msgid ">>> pattern = re.compile(\"o\") >>> pattern.match(\"dog\")      # No match as \"o\" is not at the start of \"dog\". >>> pattern.match(\"dog\", 1)   # Match as \"o\" is the 2nd character of \"dog\". <_sre.SRE_Match object at ...>"
msgstr ""

msgid "Identical to the :func:`split` function, using the compiled pattern."
msgstr ""

msgid "Similar to the :func:`findall` function, using the compiled pattern, but also accepts optional *pos* and *endpos* parameters that limit the search region like for :meth:`match`."
msgstr ""

msgid "Similar to the :func:`finditer` function, using the compiled pattern, but also accepts optional *pos* and *endpos* parameters that limit the search region like for :meth:`match`."
msgstr ""

msgid "Identical to the :func:`sub` function, using the compiled pattern."
msgstr ""

msgid "Identical to the :func:`subn` function, using the compiled pattern."
msgstr ""

msgid "The flags argument used when the RE object was compiled, or ``0`` if no flags were provided."
msgstr ""

msgid "The number of capturing groups in the pattern."
msgstr ""

msgid "A dictionary mapping any symbolic group names defined by ``(?P<id>)`` to group numbers.  The dictionary is empty if no symbolic groups were used in the pattern."
msgstr ""

msgid "The pattern string from which the RE object was compiled."
msgstr ""

msgid "Match Objects"
msgstr ""

msgid "Match Objects always have a boolean value of :const:`True`, so that you can test whether e.g. :func:`match` resulted in a match with a simple if statement.  They support the following methods and attributes:"
msgstr ""

msgid "Return the string obtained by doing backslash substitution on the template string *template*, as done by the :meth:`~RegexObject.sub` method.  Escapes such as ``\\n`` are converted to the appropriate characters, and numeric backreferences (``\\1``, ``\\2``) and named backreferences (``\\g<1>``, ``\\g<name>``) are replaced by the contents of the corresponding group."
msgstr ""

msgid "Returns one or more subgroups of the match.  If there is a single argument, the result is a single string; if there are multiple arguments, the result is a tuple with one item per argument. Without arguments, *group1* defaults to zero (the whole match is returned). If a *groupN* argument is zero, the corresponding return value is the entire matching string; if it is in the inclusive range [1..99], it is the string matching the corresponding parenthesized group.  If a group number is negative or larger than the number of groups defined in the pattern, an :exc:`IndexError` exception is raised. If a group is contained in a part of the pattern that did not match, the corresponding result is ``None``. If a group is contained in a part of the pattern that matched multiple times, the last match is returned."
msgstr ""

msgid ">>> m = re.match(r\"(\\w+) (\\w+)\", \"Isaac Newton, physicist\") >>> m.group(0)       # The entire match 'Isaac Newton' >>> m.group(1)       # The first parenthesized subgroup. 'Isaac' >>> m.group(2)       # The second parenthesized subgroup. 'Newton' >>> m.group(1, 2)    # Multiple arguments give us a tuple. ('Isaac', 'Newton')"
msgstr ""

msgid "If the regular expression uses the ``(?P<name>...)`` syntax, the *groupN* arguments may also be strings identifying groups by their group name.  If a string argument is not used as a group name in the pattern, an :exc:`IndexError` exception is raised."
msgstr ""

msgid "A moderately complicated example:"
msgstr ""

msgid ">>> m = re.match(r\"(?P<first_name>\\w+) (?P<last_name>\\w+)\", \"Malcolm Reynolds\") >>> m.group('first_name') 'Malcolm' >>> m.group('last_name') 'Reynolds'"
msgstr ""

msgid "Named groups can also be referred to by their index:"
msgstr ""

msgid ">>> m.group(1) 'Malcolm' >>> m.group(2) 'Reynolds'"
msgstr ""

msgid "If a group matches multiple times, only the last match is accessible:"
msgstr ""

msgid ">>> m = re.match(r\"(..)+\", \"a1b2c3\")  # Matches 3 times. >>> m.group(1)                        # Returns only the last match. 'c3'"
msgstr ""

msgid "Return a tuple containing all the subgroups of the match, from 1 up to however many groups are in the pattern.  The *default* argument is used for groups that did not participate in the match; it defaults to ``None``.  (Incompatibility note: in the original Python 1.5 release, if the tuple was one element long, a string would be returned instead.  In later versions (from 1.5.1 on), a singleton tuple is returned in such cases.)"
msgstr ""

msgid ">>> m = re.match(r\"(\\d+)\\.(\\d+)\", \"24.1632\") >>> m.groups() ('24', '1632')"
msgstr ""

msgid "If we make the decimal place and everything after it optional, not all groups might participate in the match.  These groups will default to ``None`` unless the *default* argument is given:"
msgstr ""

msgid ">>> m = re.match(r\"(\\d+)\\.?(\\d+)?\", \"24\") >>> m.groups()      # Second group defaults to None. ('24', None) >>> m.groups('0')   # Now, the second group defaults to '0'. ('24', '0')"
msgstr ""

msgid "Return a dictionary containing all the *named* subgroups of the match, keyed by the subgroup name.  The *default* argument is used for groups that did not participate in the match; it defaults to ``None``.  For example:"
msgstr ""

msgid ">>> m = re.match(r\"(?P<first_name>\\w+) (?P<last_name>\\w+)\", \"Malcolm Reynolds\") >>> m.groupdict() {'first_name': 'Malcolm', 'last_name': 'Reynolds'}"
msgstr ""

msgid "Return the indices of the start and end of the substring matched by *group*; *group* defaults to zero (meaning the whole matched substring). Return ``-1`` if *group* exists but did not contribute to the match.  For a match object *m*, and a group *g* that did contribute to the match, the substring matched by group *g* (equivalent to ``m.group(g)``) is ::"
msgstr ""

msgid "m.string[m.start(g):m.end(g)]"
msgstr ""

msgid "Note that ``m.start(group)`` will equal ``m.end(group)`` if *group* matched a null string.  For example, after ``m = re.search('b(c?)', 'cba')``, ``m.start(0)`` is 1, ``m.end(0)`` is 2, ``m.start(1)`` and ``m.end(1)`` are both 2, and ``m.start(2)`` raises an :exc:`IndexError` exception."
msgstr ""

msgid "An example that will remove *remove_this* from email addresses:"
msgstr ""

msgid ">>> email = \"tony@tiremove_thisger.net\" >>> m = re.search(\"remove_this\", email) >>> email[:m.start()] + email[m.end():] 'tony@tiger.net'"
msgstr ""

msgid "For :class:`MatchObject` *m*, return the 2-tuple ``(m.start(group), m.end(group))``. Note that if *group* did not contribute to the match, this is ``(-1, -1)``.  *group* defaults to zero, the entire match."
msgstr ""

msgid "The value of *pos* which was passed to the :meth:`~RegexObject.search` or :meth:`~RegexObject.match` method of the :class:`RegexObject`.  This is the index into the string at which the RE engine started looking for a match."
msgstr ""

msgid "The value of *endpos* which was passed to the :meth:`~RegexObject.search` or :meth:`~RegexObject.match` method of the :class:`RegexObject`.  This is the index into the string beyond which the RE engine will not go."
msgstr ""

msgid "The integer index of the last matched capturing group, or ``None`` if no group was matched at all. For example, the expressions ``(a)b``, ``((a)(b))``, and ``((ab))`` will have ``lastindex == 1`` if applied to the string ``'ab'``, while the expression ``(a)(b)`` will have ``lastindex == 2``, if applied to the same string."
msgstr ""

msgid "The name of the last matched capturing group, or ``None`` if the group didn't have a name, or if no group was matched at all."
msgstr ""

msgid "The regular expression object whose :meth:`~RegexObject.match` or :meth:`~RegexObject.search` method produced this :class:`MatchObject` instance."
msgstr ""

msgid "The string passed to :meth:`~RegexObject.match` or :meth:`~RegexObject.search`."
msgstr ""

msgid "Checking For a Pair"
msgstr ""

msgid "In this example, we'll use the following helper function to display match objects a little more gracefully:"
msgstr ""

msgid "def displaymatch(match):     if match is None:         return None     return '<Match: %r, groups=%r>' % (match.group(), match.groups())"
msgstr ""

msgid "Suppose you are writing a poker program where a player's hand is represented as a 5-character string with each character representing a card, \"a\" for ace, \"k\" for king, \"q\" for queen, j for jack, \"0\" for 10, and \"1\" through \"9\" representing the card with that value."
msgstr ""

msgid "To see if a given string is a valid hand, one could do the following:"
msgstr ""

msgid ">>> valid = re.compile(r\"[0-9akqj]{5}$\") >>> displaymatch(valid.match(\"ak05q\"))  # Valid. \"<Match: 'ak05q', groups=()>\" >>> displaymatch(valid.match(\"ak05e\"))  # Invalid. >>> displaymatch(valid.match(\"ak0\"))    # Invalid. >>> displaymatch(valid.match(\"727ak\"))  # Valid. \"<Match: '727ak', groups=()>\""
msgstr ""

msgid "That last hand, ``\"727ak\"``, contained a pair, or two of the same valued cards. To match this with a regular expression, one could use backreferences as such:"
msgstr ""

msgid ">>> pair = re.compile(r\".*(.).*\\1\") >>> displaymatch(pair.match(\"717ak\"))     # Pair of 7s. \"<Match: '717', groups=('7',)>\" >>> displaymatch(pair.match(\"718ak\"))     # No pairs. >>> displaymatch(pair.match(\"354aa\"))     # Pair of aces. \"<Match: '354aa', groups=('a',)>\""
msgstr ""

msgid "To find out what card the pair consists of, one could use the :meth:`~MatchObject.group` method of :class:`MatchObject` in the following manner:"
msgstr ""

msgid ">>> pair.match(\"717ak\").group(1) '7'  # Error because re.match() returns None, which doesn't have a group() method: >>> pair.match(\"718ak\").group(1) Traceback (most recent call last):   File \"<pyshell#23>\", line 1, in <module>     re.match(r\".*(.).*\\1\", \"718ak\").group(1) AttributeError: 'NoneType' object has no attribute 'group'  >>> pair.match(\"354aa\").group(1) 'a'"
msgstr ""

msgid "Simulating scanf()"
msgstr ""

msgid "Python does not currently have an equivalent to :cfunc:`scanf`.  Regular expressions are generally more powerful, though also more verbose, than :cfunc:`scanf` format strings.  The table below offers some more-or-less equivalent mappings between :cfunc:`scanf` format tokens and regular expressions."
msgstr ""

msgid ":cfunc:`scanf` Token"
msgstr ""

msgid "Regular Expression"
msgstr ""

msgid "``.``"
msgstr ""

msgid "``%5c``"
msgstr ""

msgid "``.{5}``"
msgstr ""

msgid "``[-+]?\\d+``"
msgstr ""

msgid "``%e``, ``%E``, ``%f``, ``%g``"
msgstr ""

msgid "``[-+]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?``"
msgstr ""

msgid "``%i``"
msgstr ""

msgid "``[-+]?(0[xX][\\dA-Fa-f]+|0[0-7]*|\\d+)``"
msgstr ""

msgid "``%o``"
msgstr ""

msgid "``0[0-7]*``"
msgstr ""

msgid "``%s``"
msgstr ""

msgid "``\\S+``"
msgstr ""

msgid "``%u``"
msgstr ""

msgid "``\\d+``"
msgstr ""

msgid "``%x``, ``%X``"
msgstr ""

msgid "``0[xX][\\dA-Fa-f]+``"
msgstr ""

msgid "To extract the filename and numbers from a string like ::"
msgstr ""

msgid "/usr/sbin/sendmail - 0 errors, 4 warnings"
msgstr ""

msgid "you would use a :cfunc:`scanf` format like ::"
msgstr ""

msgid "%s - %d errors, %d warnings"
msgstr ""

msgid "The equivalent regular expression would be ::"
msgstr ""

msgid "(\\S+) - (\\d+) errors, (\\d+) warnings"
msgstr ""

msgid "Avoiding recursion"
msgstr ""

msgid "If you create regular expressions that require the engine to perform a lot of recursion, you may encounter a :exc:`RuntimeError` exception with the message ``maximum recursion limit`` exceeded. For example, ::"
msgstr ""

msgid ">>> s = 'Begin ' + 1000*'a very long string ' + 'end' >>> re.match('Begin (\\w| )*? end', s).end() Traceback (most recent call last):   File \"<stdin>\", line 1, in ?   File \"/usr/local/lib/python2.5/re.py\", line 132, in match     return _compile(pattern, flags).match(string) RuntimeError: maximum recursion limit exceeded"
msgstr ""

msgid "You can often restructure your regular expression to avoid recursion."
msgstr ""

msgid "Simple uses of the ``*?`` pattern are special-cased to avoid recursion.  Thus, the above regular expression can avoid recursion by being recast as ``Begin [a-zA-Z0-9_ ]*?end``.  As a further benefit, such regular expressions will run faster than their recursive equivalents."
msgstr ""

msgid "search() vs. match()"
msgstr ""

msgid "In a nutshell, :func:`match` only attempts to match a pattern at the beginning of a string where :func:`search` will match a pattern anywhere in a string. For example:"
msgstr ""

msgid ">>> re.match(\"o\", \"dog\")  # No match as \"o\" is not the first letter of \"dog\". >>> re.search(\"o\", \"dog\") # Match as search() looks everywhere in the string. <_sre.SRE_Match object at ...>"
msgstr ""

msgid "The following applies only to regular expression objects like those created with ``re.compile(\"pattern\")``, not the primitives ``re.match(pattern, string)`` or ``re.search(pattern, string)``."
msgstr ""

msgid ":func:`match` has an optional second parameter that gives an index in the string where the search is to start::"
msgstr ""

msgid ">>> pattern = re.compile(\"o\") >>> pattern.match(\"dog\")      # No match as \"o\" is not at the start of \"dog.\"  # Equivalent to the above expression as 0 is the default starting index: >>> pattern.match(\"dog\", 0)  # Match as \"o\" is the 2nd character of \"dog\" (index 0 is the first): >>> pattern.match(\"dog\", 1) <_sre.SRE_Match object at ...> >>> pattern.match(\"dog\", 2)   # No match as \"o\" is not the 3rd character of \"dog.\""
msgstr ""

msgid "Making a Phonebook"
msgstr ""

msgid ":func:`split` splits a string into a list delimited by the passed pattern.  The method is invaluable for converting textual data into data structures that can be easily read and modified by Python as demonstrated in the following example that creates a phonebook."
msgstr ""

msgid "First, here is the input.  Normally it may come from a file, here we are using triple-quoted string syntax:"
msgstr ""

msgid ">>> input = \"\"\"Ross McFluff: 834.345.1254 155 Elm Street ... ... Ronald Heathmore: 892.345.3428 436 Finley Avenue ... Frank Burger: 925.541.7625 662 South Dogwood Way ... ... ... Heather Albrecht: 548.326.4584 919 Park Place\"\"\""
msgstr ""

msgid "The entries are separated by one or more newlines. Now we convert the string into a list with each nonempty line having its own entry:"
msgstr ""

msgid ">>> entries = re.split(\"\\n+\", input) >>> entries ['Ross McFluff: 834.345.1254 155 Elm Street', 'Ronald Heathmore: 892.345.3428 436 Finley Avenue', 'Frank Burger: 925.541.7625 662 South Dogwood Way', 'Heather Albrecht: 548.326.4584 919 Park Place']"
msgstr ""

msgid "Finally, split each entry into a list with first name, last name, telephone number, and address.  We use the ``maxsplit`` parameter of :func:`split` because the address has spaces, our splitting pattern, in it:"
msgstr ""

msgid ">>> [re.split(\":? \", entry, 3) for entry in entries] [['Ross', 'McFluff', '834.345.1254', '155 Elm Street'], ['Ronald', 'Heathmore', '892.345.3428', '436 Finley Avenue'], ['Frank', 'Burger', '925.541.7625', '662 South Dogwood Way'], ['Heather', 'Albrecht', '548.326.4584', '919 Park Place']]"
msgstr ""

msgid "The ``:?`` pattern matches the colon after the last name, so that it does not occur in the result list.  With a ``maxsplit`` of ``4``, we could separate the house number from the street name:"
msgstr ""

msgid ">>> [re.split(\":? \", entry, 4) for entry in entries] [['Ross', 'McFluff', '834.345.1254', '155', 'Elm Street'], ['Ronald', 'Heathmore', '892.345.3428', '436', 'Finley Avenue'], ['Frank', 'Burger', '925.541.7625', '662', 'South Dogwood Way'], ['Heather', 'Albrecht', '548.326.4584', '919', 'Park Place']]"
msgstr ""

msgid "Text Munging"
msgstr ""

msgid ":func:`sub` replaces every occurrence of a pattern with a string or the result of a function.  This example demonstrates using :func:`sub` with a function to \"munge\" text, or randomize the order of all the characters in each word of a sentence except for the first and last characters::"
msgstr ""

msgid ">>> def repl(m): ...   inner_word = list(m.group(2)) ...   random.shuffle(inner_word) ...   return m.group(1) + \"\".join(inner_word) + m.group(3) >>> text = \"Professor Abdolmalek, please report your absences promptly.\" >>> re.sub(\"(\\w)(\\w+)(\\w)\", repl, text) 'Poefsrosr Aealmlobdk, pslaee reorpt your abnseces plmrptoy.' >>> re.sub(\"(\\w)(\\w+)(\\w)\", repl, text) 'Pofsroser Aodlambelk, plasee reoprt yuor asnebces potlmrpy.'"
msgstr ""

msgid "Finding all Adverbs"
msgstr ""

msgid ":func:`findall` matches *all* occurrences of a pattern, not just the first one as :func:`search` does.  For example, if one was a writer and wanted to find all of the adverbs in some text, he or she might use :func:`findall` in the following manner:"
msgstr ""

msgid ">>> text = \"He was carefully disguised but captured quickly by police.\" >>> re.findall(r\"\\w+ly\", text) ['carefully', 'quickly']"
msgstr ""

msgid "Finding all Adverbs and their Positions"
msgstr ""

msgid "If one wants more information about all matches of a pattern than the matched text, :func:`finditer` is useful as it provides instances of :class:`MatchObject` instead of strings.  Continuing with the previous example, if one was a writer who wanted to find all of the adverbs *and their positions* in some text, he or she would use :func:`finditer` in the following manner:"
msgstr ""

msgid ">>> text = \"He was carefully disguised but captured quickly by police.\" >>> for m in re.finditer(r\"\\w+ly\", text): ...     print('%02d-%02d: %s' % (m.start(), m.end(), m.group(0))) 07-16: carefully 40-47: quickly"
msgstr ""

msgid "Raw String Notation"
msgstr ""

msgid "Raw string notation (``r\"text\"``) keeps regular expressions sane.  Without it, every backslash (``'\\'``) in a regular expression would have to be prefixed with another one to escape it.  For example, the two following lines of code are functionally identical:"
msgstr ""

msgid ">>> re.match(r\"\\W(.)\\1\\W\", \" ff \") <_sre.SRE_Match object at ...> >>> re.match(\"\\\\W(.)\\\\1\\\\W\", \" ff \") <_sre.SRE_Match object at ...>"
msgstr ""

msgid "When one wants to match a literal backslash, it must be escaped in the regular expression.  With raw string notation, this means ``r\"\\\\\"``.  Without raw string notation, one must use ``\"\\\\\\\\\"``, making the following lines of code functionally identical:"
msgstr ""

msgid ">>> re.match(r\"\\\\\", r\"\\\\\") <_sre.SRE_Match object at ...> >>> re.match(\"\\\\\\\\\", r\"\\\\\") <_sre.SRE_Match object at ...>"
msgstr ""

msgid ":mod:`readline` --- GNU readline interface"
msgstr ""

msgid "The :mod:`readline` module defines a number of functions to facilitate completion and reading/writing of history files from the Python interpreter. This module can be used directly or via the :mod:`rlcompleter` module.  Settings made using  this module affect the behaviour of both the interpreter's interactive prompt  and the prompts offered by the built-in :func:`input` function."
msgstr ""

msgid "On MacOS X the :mod:`readline` module can be implemented using the ``libedit`` library instead of GNU readline."
msgstr ""

msgid "The configuration file for ``libedit`` is different from that of GNU readline. If you programmaticly load configuration strings you can check for the text \"libedit\" in :const:`readline.__doc__` to differentiate between GNU readline and libedit."
msgstr ""

msgid "The :mod:`readline` module defines the following functions:"
msgstr ""

msgid "Parse and execute single line of a readline init file."
msgstr ""

msgid "Return the current contents of the line buffer."
msgstr ""

msgid "Insert text into the command line."
msgstr ""

msgid "Parse a readline initialization file. The default filename is the last filename used."
msgstr ""

msgid "Load a readline history file. The default filename is :file:`~/.history`."
msgstr ""

msgid "Save a readline history file. The default filename is :file:`~/.history`."
msgstr ""

msgid "Clear the current history.  (Note: this function is not available if the installed version of GNU readline doesn't support it.)"
msgstr ""

msgid "Return the desired length of the history file.  Negative values imply unlimited history file size."
msgstr ""

msgid "Set the number of lines to save in the history file. :func:`write_history_file` uses this value to truncate the history file when saving.  Negative values imply unlimited history file size."
msgstr ""

msgid "Return the number of lines currently in the history.  (This is different from :func:`get_history_length`, which returns the maximum number of lines that will be written to a history file.)"
msgstr ""

msgid "Return the current contents of history item at *index*."
msgstr ""

msgid "Remove history item specified by its position from the history."
msgstr ""

msgid "Replace history item specified by its position with the given line."
msgstr ""

msgid "Change what's displayed on the screen to reflect the current contents of the line buffer."
msgstr ""

msgid "Set or remove the startup_hook function.  If *function* is specified, it will be used as the new startup_hook function; if omitted or ``None``, any hook function already installed is removed.  The startup_hook function is called with no arguments just before readline prints the first prompt."
msgstr ""

msgid "Set or remove the pre_input_hook function.  If *function* is specified, it will be used as the new pre_input_hook function; if omitted or ``None``, any hook function already installed is removed.  The pre_input_hook function is called with no arguments after the first prompt has been printed and just before readline starts reading input characters."
msgstr ""

msgid "Set or remove the completer function.  If *function* is specified, it will be used as the new completer function; if omitted or ``None``, any completer function already installed is removed.  The completer function is called as ``function(text, state)``, for *state* in ``0``, ``1``, ``2``, ..., until it returns a non-string value.  It should return the next possible completion starting with *text*."
msgstr ""

msgid "Get the completer function, or ``None`` if no completer function has been set."
msgstr ""

msgid "Get the type of completion being attempted."
msgstr ""

msgid "Get the beginning index of the readline tab-completion scope."
msgstr ""

msgid "Get the ending index of the readline tab-completion scope."
msgstr ""

msgid "Set the readline word delimiters for tab-completion."
msgstr ""

msgid "Get the readline word delimiters for tab-completion."
msgstr ""

msgid "Set or remove the completion display function.  If *function* is specified, it will be used as the new completion display function; if omitted or ``None``, any completion display function already installed is removed.  The completion display function is called as ``function(substitution, [matches], longest_match_length)`` once each time matches need to be displayed."
msgstr ""

msgid "Append a line to the history buffer, as if it was the last line typed."
msgstr ""

msgid "Completion of Python identifiers at the interactive prompt."
msgstr ""

msgid "The following example demonstrates how to use the :mod:`readline` module's history reading and writing functions to automatically load and save a history file named :file:`.pyhist` from the user's home directory.  The code below would normally be executed automatically during interactive sessions from the user's :envvar:`PYTHONSTARTUP` file. ::"
msgstr ""

msgid "import os histfile = os.path.join(os.environ[\"HOME\"], \".pyhist\") try:     readline.read_history_file(histfile) except IOError:     pass import atexit atexit.register(readline.write_history_file, histfile) del os, histfile"
msgstr ""

msgid "The following example extends the :class:`code.InteractiveConsole` class to support history save/restore. ::"
msgstr ""

msgid "import code import readline import atexit import os  class HistoryConsole(code.InteractiveConsole):     def __init__(self, locals=None, filename=\"<console>\",                  histfile=os.path.expanduser(\"~/.console-history\")):         code.InteractiveConsole.__init__(self, locals, filename)         self.init_history(histfile)      def init_history(self, histfile):         readline.parse_and_bind(\"tab: complete\")         if hasattr(readline, \"read_history_file\"):             try:                 readline.read_history_file(histfile)             except IOError:                 pass             atexit.register(self.save_history, histfile)      def save_history(self, histfile):         readline.write_history_file(histfile)"
msgstr ""

msgid ":mod:`reprlib` --- Alternate :func:`repr` implementation"
msgstr ""

msgid "The :mod:`reprlib` module provides a means for producing object representations with limits on the size of the resulting strings. This is used in the Python debugger and may be useful in other contexts as well."
msgstr ""

msgid "This module provides a class, an instance, and a function:"
msgstr ""

msgid "Class which provides formatting services useful in implementing functions similar to the built-in :func:`repr`; size limits for  different object types are added to avoid the generation of representations which are excessively long."
msgstr ""

msgid "This is an instance of :class:`Repr` which is used to provide the :func:`.repr` function described below.  Changing the attributes of this object will affect the size limits used by :func:`.repr` and the Python debugger."
msgstr ""

msgid "This is the :meth:`~Repr.repr` method of ``aRepr``.  It returns a string similar to that returned by the built-in function of the same name, but with limits on most sizes."
msgstr ""

msgid "Repr Objects"
msgstr ""

msgid ":class:`Repr` instances provide several members which can be used to provide size limits for the representations of different object types,  and methods which format specific object types."
msgstr ""

msgid "Depth limit on the creation of recursive representations.  The default is ``6``."
msgstr ""

msgid "Limits on the number of entries represented for the named object type.  The default is ``4`` for :attr:`maxdict`, ``5`` for :attr:`maxarray`, and  ``6`` for the others."
msgstr ""

msgid "Maximum number of characters in the representation for an integer.  Digits are dropped from the middle.  The default is ``40``."
msgstr ""

msgid "Limit on the number of characters in the representation of the string.  Note that the \"normal\" representation of the string is used as the character source: if escape sequences are needed in the representation, these may be mangled when the representation is shortened.  The default is ``30``."
msgstr ""

msgid "This limit is used to control the size of object types for which no specific formatting method is available on the :class:`Repr` object. It is applied in a similar manner as :attr:`maxstring`.  The default is ``20``."
msgstr ""

msgid "The equivalent to the built-in :func:`repr` that uses the formatting imposed by the instance."
msgstr ""

msgid "Recursive implementation used by :meth:`.repr`.  This uses the type of *obj* to determine which formatting method to call, passing it *obj* and *level*.  The type-specific methods should call :meth:`repr1` to perform recursive formatting, with ``level - 1`` for the value of *level* in the recursive  call."
msgstr ""

msgid "Formatting methods for specific types are implemented as methods with a name based on the type name.  In the method name, **TYPE** is replaced by ``string.join(string.split(type(obj).__name__, '_'))``. Dispatch to these methods is handled by :meth:`repr1`. Type-specific methods which need to recursively format a value should call ``self.repr1(subobj, level - 1)``."
msgstr ""

msgid "Subclassing Repr Objects"
msgstr ""

msgid "The use of dynamic dispatching by :meth:`Repr.repr1` allows subclasses of :class:`Repr` to add support for additional built-in object types or to modify the handling of types already supported. This example shows how special support for file objects could be added::"
msgstr ""

msgid "import reprlib import sys  class MyRepr(reprlib.Repr):     def repr_file(self, obj, level):         if obj.name in ['<stdin>', '<stdout>', '<stderr>']:             return obj.name         else:             return repr(obj)  aRepr = MyRepr() print(aRepr.repr(sys.stdin))         # prints '<stdin>'"
msgstr ""

msgid ":mod:`resource` --- Resource usage information"
msgstr ""

msgid "This module provides basic mechanisms for measuring and controlling system resources utilized by a program."
msgstr ""

msgid "Symbolic constants are used to specify particular system resources and to request usage information about either the current process or its children."
msgstr ""

msgid "A single exception is defined for errors:"
msgstr ""

msgid "The functions described below may raise this error if the underlying system call failures unexpectedly."
msgstr ""

msgid "Resource Limits"
msgstr ""

msgid "Resources usage can be limited using the :func:`setrlimit` function described below. Each resource is controlled by a pair of limits: a soft limit and a hard limit. The soft limit is the current limit, and may be lowered or raised by a process over time. The soft limit can never exceed the hard limit. The hard limit can be lowered to any value greater than the soft limit, but not raised. (Only processes with the effective UID of the super-user can raise a hard limit.)"
msgstr ""

msgid "The specific resources that can be limited are system dependent. They are described in the :manpage:`getrlimit(2)` man page.  The resources listed below are supported when the underlying operating system supports them; resources which cannot be checked or controlled by the operating system are not defined in this module for those platforms."
msgstr ""

msgid "Returns a tuple ``(soft, hard)`` with the current soft and hard limits of *resource*. Raises :exc:`ValueError` if an invalid resource is specified, or :exc:`error` if the underlying system call fails unexpectedly."
msgstr ""

msgid "Sets new limits of consumption of *resource*. The *limits* argument must be a tuple ``(soft, hard)`` of two integers describing the new limits. A value of ``-1`` can be used to specify the maximum possible upper limit."
msgstr ""

msgid "Raises :exc:`ValueError` if an invalid resource is specified, if the new soft limit exceeds the hard limit, or if a process tries to raise its hard limit (unless the process has an effective UID of super-user).  Can also raise :exc:`error` if the underlying system call fails."
msgstr ""

msgid "These symbols define resources whose consumption can be controlled using the :func:`setrlimit` and :func:`getrlimit` functions described below. The values of these symbols are exactly the constants used by C programs."
msgstr ""

msgid "The Unix man page for :manpage:`getrlimit(2)` lists the available resources. Note that not all systems use the same symbol or same value to denote the same resource.  This module does not attempt to mask platform differences --- symbols not defined for a platform will not be available from this module on that platform."
msgstr ""

msgid "The maximum size (in bytes) of a core file that the current process can create. This may result in the creation of a partial core file if a larger core would be required to contain the entire process image."
msgstr ""

msgid "The maximum amount of processor time (in seconds) that a process can use. If this limit is exceeded, a :const:`SIGXCPU` signal is sent to the process. (See the :mod:`signal` module documentation for information about how to catch this signal and do something useful, e.g. flush open files to disk.)"
msgstr ""

msgid "The maximum size of a file which the process may create.  This only affects the stack of the main thread in a multi-threaded process."
msgstr ""

msgid "The maximum size (in bytes) of the process's heap."
msgstr ""

msgid "The maximum size (in bytes) of the call stack for the current process."
msgstr ""

msgid "The maximum resident set size that should be made available to the process."
msgstr ""

msgid "The maximum number of processes the current process may create."
msgstr ""

msgid "The maximum number of open file descriptors for the current process."
msgstr ""

msgid "The BSD name for :const:`RLIMIT_NOFILE`."
msgstr ""

msgid "The maximum address space which may be locked in memory."
msgstr ""

msgid "The largest area of mapped memory which the process may occupy."
msgstr ""

msgid "The maximum area (in bytes) of address space which may be taken by the process."
msgstr ""

msgid "Resource Usage"
msgstr ""

msgid "These functions are used to retrieve resource usage information:"
msgstr ""

msgid "This function returns an object that describes the resources consumed by either the current process or its children, as specified by the *who* parameter.  The *who* parameter should be specified using one of the :const:`RUSAGE_\\*` constants described below."
msgstr ""

msgid "The fields of the return value each describe how a particular system resource has been used, e.g. amount of time spent running is user mode or number of times the process was swapped out of main memory. Some values are dependent on the clock tick internal, e.g. the amount of memory the process is using."
msgstr ""

msgid "For backward compatibility, the return value is also accessible as a tuple of 16 elements."
msgstr ""

msgid "The fields :attr:`ru_utime` and :attr:`ru_stime` of the return value are floating point values representing the amount of time spent executing in user mode and the amount of time spent executing in system mode, respectively. The remaining values are integers. Consult the :manpage:`getrusage(2)` man page for detailed information about these values. A brief summary is presented here:"
msgstr ""

msgid "Field"
msgstr ""

msgid "Resource"
msgstr ""

msgid ":attr:`ru_utime`"
msgstr ""

msgid "time in user mode (float)"
msgstr ""

msgid ":attr:`ru_stime`"
msgstr ""

msgid "time in system mode (float)"
msgstr ""

msgid ":attr:`ru_maxrss`"
msgstr ""

msgid "maximum resident set size"
msgstr ""

msgid ":attr:`ru_ixrss`"
msgstr ""

msgid "shared memory size"
msgstr ""

msgid ":attr:`ru_idrss`"
msgstr ""

msgid "unshared memory size"
msgstr ""

msgid "``5``"
msgstr ""

msgid ":attr:`ru_isrss`"
msgstr ""

msgid "unshared stack size"
msgstr ""

msgid "``6``"
msgstr ""

msgid ":attr:`ru_minflt`"
msgstr ""

msgid "page faults not requiring I/O"
msgstr ""

msgid "``7``"
msgstr ""

msgid ":attr:`ru_majflt`"
msgstr ""

msgid "page faults requiring I/O"
msgstr ""

msgid "``8``"
msgstr ""

msgid ":attr:`ru_nswap`"
msgstr ""

msgid "number of swap outs"
msgstr ""

msgid "``9``"
msgstr ""

msgid ":attr:`ru_inblock`"
msgstr ""

msgid "block input operations"
msgstr ""

msgid "``10``"
msgstr ""

msgid ":attr:`ru_oublock`"
msgstr ""

msgid "block output operations"
msgstr ""

msgid "``11``"
msgstr ""

msgid ":attr:`ru_msgsnd`"
msgstr ""

msgid "messages sent"
msgstr ""

msgid "``12``"
msgstr ""

msgid ":attr:`ru_msgrcv`"
msgstr ""

msgid "messages received"
msgstr ""

msgid "``13``"
msgstr ""

msgid ":attr:`ru_nsignals`"
msgstr ""

msgid "signals received"
msgstr ""

msgid "``14``"
msgstr ""

msgid ":attr:`ru_nvcsw`"
msgstr ""

msgid "voluntary context switches"
msgstr ""

msgid "``15``"
msgstr ""

msgid ":attr:`ru_nivcsw`"
msgstr ""

msgid "involuntary context switches"
msgstr ""

msgid "This function will raise a :exc:`ValueError` if an invalid *who* parameter is specified. It may also raise :exc:`error` exception in unusual circumstances."
msgstr ""

msgid "Returns the number of bytes in a system page. (This need not be the same as the hardware page size.) This function is useful for determining the number of bytes of memory a process is using. The third element of the tuple returned by :func:`getrusage` describes memory usage in pages; multiplying by page size produces number of bytes."
msgstr ""

msgid "The following :const:`RUSAGE_\\*` symbols are passed to the :func:`getrusage` function to specify which processes information should be provided for."
msgstr ""

msgid ":const:`RUSAGE_SELF` should be used to request information pertaining only to the process itself."
msgstr ""

msgid "Pass to :func:`getrusage` to request resource information for child processes of the calling process."
msgstr ""

msgid "Pass to :func:`getrusage` to request resources consumed by both the current process and child processes.  May not be available on all systems."
msgstr ""

msgid ":mod:`rlcompleter` --- Completion function for GNU readline"
msgstr ""

msgid "The :mod:`rlcompleter` module defines a completion function suitable for the :mod:`readline` module by completing valid Python identifiers and keywords."
msgstr ""

msgid "When this module is imported on a Unix platform with the :mod:`readline` module available, an instance of the :class:`Completer` class is automatically created and its :meth:`complete` method is set as the :mod:`readline` completer."
msgstr ""

msgid ">>> import rlcompleter >>> import readline >>> readline.parse_and_bind(\"tab: complete\") >>> readline. <TAB PRESSED> readline.__doc__          readline.get_line_buffer(  readline.read_init_file( readline.__file__         readline.insert_text(      readline.set_completer( readline.__name__         readline.parse_and_bind( >>> readline."
msgstr ""

msgid "The :mod:`rlcompleter` module is designed for use with Python's interactive mode.  A user can add the following lines to his or her initialization file (identified by the :envvar:`PYTHONSTARTUP` environment variable) to get automatic :kbd:`Tab` completion::"
msgstr ""

msgid "try:     import readline except ImportError:     print(\"Module readline not available.\") else:     import rlcompleter     readline.parse_and_bind(\"tab: complete\")"
msgstr ""

msgid "On platforms without :mod:`readline`, the :class:`Completer` class defined by this module can still be used for custom purposes."
msgstr ""

msgid "Completer Objects"
msgstr ""

msgid "Completer objects have the following method:"
msgstr ""

msgid "Return the *state*\\ th completion for *text*."
msgstr ""

msgid "If called for *text* that doesn't include a period character (``'.'``), it will complete from names currently defined in :mod:`__main__`, :mod:`builtins` and keywords (as defined by the :mod:`keyword` module)."
msgstr ""

msgid "If called for a dotted name, it will try to evaluate anything without obvious side-effects (functions will not be evaluated, but it can generate calls to :meth:`__getattr__`) up to the last part, and find matches for the rest via the :func:`dir` function.  Any exception raised during the evaluation of the expression is caught, silenced and :const:`None` is returned."
msgstr ""

msgid ":mod:`runpy` --- Locating and executing Python modules"
msgstr ""

msgid "The :mod:`runpy` module is used to locate and run Python modules without importing them first. Its main use is to implement the :option:`-m` command line switch that allows scripts to be located using the Python module namespace rather than the filesystem."
msgstr ""

msgid "The :mod:`runpy` module provides two functions:"
msgstr ""

msgid "Execute the code of the specified module and return the resulting module globals dictionary. The module's code is first located using the standard import mechanism (refer to :pep:`302` for details) and then executed in a fresh module namespace."
msgstr ""

msgid "If the supplied module name refers to a package rather than a normal module, then that package is imported and the ``__main__`` submodule within that package is then executed and the resulting module globals dictionary returned."
msgstr ""

msgid "The optional dictionary argument *init_globals* may be used to pre-populate the module's globals dictionary before the code is executed. The supplied dictionary will not be modified. If any of the special global variables below are defined in the supplied dictionary, those definitions are overridden by :func:`run_module`."
msgstr ""

msgid "The special global variables ``__name__``, ``__file__``, ``__cached__``, ``__loader__`` and ``__package__`` are set in the globals dictionary before the module code is executed (Note that this is a minimal set of variables - other variables may be set implicitly as an interpreter implementation detail)."
msgstr ""

msgid "``__name__`` is set to *run_name* if this optional argument is not :const:`None`, to ``mod_name + '.__main__'`` if the named module is a package and to the *mod_name* argument otherwise."
msgstr ""

msgid "``__file__`` is set to the name provided by the module loader. If the loader does not make filename information available, this variable is set to :const:`None`."
msgstr ""

msgid "``__cached__`` will be set to ``None``."
msgstr ""

msgid "``__loader__`` is set to the :pep:`302` module loader used to retrieve the code for the module (This loader may be a wrapper around the standard import mechanism)."
msgstr ""

msgid "``__package__`` is set to *mod_name* if the named module is a package and to ``mod_name.rpartition('.')[0]`` otherwise."
msgstr ""

msgid "If the argument *alter_sys* is supplied and evaluates to :const:`True`, then ``sys.argv[0]`` is updated with the value of ``__file__`` and ``sys.modules[__name__]`` is updated with a temporary module object for the module being executed. Both ``sys.argv[0]`` and ``sys.modules[__name__]`` are restored to their original values before the function returns."
msgstr ""

msgid "Note that this manipulation of :mod:`sys` is not thread-safe. Other threads may see the partially initialised module, as well as the altered list of arguments. It is recommended that the :mod:`sys` module be left alone when invoking this function from threaded code."
msgstr ""

msgid "Execute the code at the named filesystem location and return the resulting module globals dictionary. As with a script name supplied to the CPython command line, the supplied path may refer to a Python source file, a compiled bytecode file or a valid sys.path entry containing a ``__main__`` module (e.g. a zipfile containing a top-level ``__main__.py`` file)."
msgstr ""

msgid "For a simple script, the specified code is simply executed in a fresh module namespace. For a valid sys.path entry (typically a zipfile or directory), the entry is first added to the beginning of ``sys.path``. The function then looks for and executes a :mod:`__main__` module using the updated path. Note that there is no special protection against invoking an existing :mod:`__main__` entry located elsewhere on ``sys.path`` if there is no such module at the specified location."
msgstr ""

msgid "The optional dictionary argument *init_globals* may be used to pre-populate the module's globals dictionary before the code is executed. The supplied dictionary will not be modified. If any of the special global variables below are defined in the supplied dictionary, those definitions are overridden by :func:`run_path`."
msgstr ""

msgid "The special global variables ``__name__``, ``__file__``, ``__loader__`` and ``__package__`` are set in the globals dictionary before the module code is executed (Note that this is a minimal set of variables - other variables may be set implicitly as an interpreter implementation detail)."
msgstr ""

msgid "``__name__`` is set to *run_name* if this optional argument is not :const:`None` and to ``'<run_path>'`` otherwise."
msgstr ""

msgid "``__file__`` is set to the name provided by the module loader. If the loader does not make filename information available, this variable is set to :const:`None`. For a simple script, this will be set to ``file_path``."
msgstr ""

msgid "``__loader__`` is set to the :pep:`302` module loader used to retrieve the code for the module (This loader may be a wrapper around the standard import mechanism). For a simple script, this will be set to :const:`None`."
msgstr ""

msgid "``__package__`` is set to ``__name__.rpartition('.')[0]``."
msgstr ""

msgid "A number of alterations are also made to the :mod:`sys` module. Firstly, ``sys.path`` may be altered as described above. ``sys.argv[0]`` is updated with the value of ``file_path`` and ``sys.modules[__name__]`` is updated with a temporary module object for the module being executed. All modifications to items in :mod:`sys` are reverted before the function returns."
msgstr ""

msgid "Note that, unlike :func:`run_module`, the alterations made to :mod:`sys` are not optional in this function as these adjustments are essential to allowing the execution of sys.path entries. As the thread safety limitations still apply, use of this function in threaded code should be either serialised with the import lock or delegated to a separate process."
msgstr ""

msgid "PEP written and implemented by Nick Coghlan."
msgstr ""

msgid ":ref:`using-on-general` - CPython command line details"
msgstr ""

msgid ":mod:`sched` --- Event scheduler"
msgstr ""

msgid "The :mod:`sched` module defines a class which implements a general purpose event scheduler:"
msgstr ""

msgid "The :class:`scheduler` class defines a generic interface to scheduling events. It needs two functions to actually deal with the \"outside world\" --- *timefunc* should be callable without arguments, and return  a number (the \"time\", in any units whatsoever).  The *delayfunc* function should be callable with one argument, compatible with the output of *timefunc*, and should delay that many time units. *delayfunc* will also be called with the argument ``0`` after each event is run to allow other threads an opportunity to run in multi-threaded applications."
msgstr ""

msgid ">>> import sched, time >>> s = sched.scheduler(time.time, time.sleep) >>> def print_time(): print(\"From print_time\", time.time()) ... >>> def print_some_times(): ...     print(time.time()) ...     s.enter(5, 1, print_time, ()) ...     s.enter(10, 1, print_time, ()) ...     s.run() ...     print(time.time()) ... >>> print_some_times() 930343690.257 From print_time 930343695.274 From print_time 930343700.273 930343700.276"
msgstr ""

msgid "In multi-threaded environments, the :class:`scheduler` class has limitations with respect to thread-safety, inability to insert a new task before the one currently pending in a running scheduler, and holding up the main thread until the event queue is empty.  Instead, the preferred approach is to use the :class:`threading.Timer` class instead."
msgstr ""

msgid ">>> import time >>> from threading import Timer >>> def print_time(): ...     print(\"From print_time\", time.time()) ... >>> def print_some_times(): ...     print(time.time()) ...     Timer(5, print_time, ()).start() ...     Timer(10, print_time, ()).start() ...     time.sleep(11)  # sleep while time-delay events execute ...     print(time.time()) ... >>> print_some_times() 930343690.257 From print_time 930343695.274 From print_time 930343700.273 930343701.301"
msgstr ""

msgid "Scheduler Objects"
msgstr ""

msgid ":class:`scheduler` instances have the following methods and attributes:"
msgstr ""

msgid "Schedule a new event. The *time* argument should be a numeric type compatible with the return value of the *timefunc* function passed  to the constructor. Events scheduled for the same *time* will be executed in the order of their *priority*."
msgstr ""

msgid "Executing the event means executing ``action(*argument)``.  *argument* must be a sequence holding the parameters for *action*."
msgstr ""

msgid "Return value is an event which may be used for later cancellation of the event (see :meth:`cancel`)."
msgstr ""

msgid "Schedule an event for *delay* more time units. Other then the relative time, the other arguments, the effect and the return value are the same as those for :meth:`enterabs`."
msgstr ""

msgid "Remove the event from the queue. If *event* is not an event currently in the queue, this method will raise a :exc:`ValueError`."
msgstr ""

msgid "Return true if the event queue is empty."
msgstr ""

msgid "Run all scheduled events. This function will wait  (using the :func:`delayfunc` function passed to the constructor) for the next event, then execute it and so on until there are no more scheduled events."
msgstr ""

msgid "Either *action* or *delayfunc* can raise an exception.  In either case, the scheduler will maintain a consistent state and propagate the exception.  If an exception is raised by *action*, the event will not be attempted in future calls to :meth:`run`."
msgstr ""

msgid "If a sequence of events takes longer to run than the time available before the next event, the scheduler will simply fall behind.  No events will be dropped; the calling code is responsible for canceling  events which are no longer pertinent."
msgstr ""

msgid "Read-only attribute returning a list of upcoming events in the order they will be run.  Each event is shown as a :term:`named tuple` with the following fields:  time, priority, action, argument."
msgstr ""

msgid ":mod:`select` --- Waiting for I/O completion"
msgstr ""

msgid "This module provides access to the :cfunc:`select` and :cfunc:`poll` functions available in most operating systems, :cfunc:`epoll` available on Linux 2.5+ and :cfunc:`kqueue` available on most BSD. Note that on Windows, it only works for sockets; on other operating systems, it also works for other file types (in particular, on Unix, it works on pipes). It cannot be used on regular files to determine whether a file has grown since it was last read."
msgstr ""

msgid "The exception raised when an error occurs.  The accompanying value is a pair containing the numeric error code from :cdata:`errno` and the corresponding string, as would be printed by the C function :cfunc:`perror`."
msgstr ""

msgid "(Only supported on Linux 2.5.44 and newer.)  Returns an edge polling object, which can be used as Edge or Level Triggered interface for I/O events; see section :ref:`epoll-objects` below for the methods supported by epolling objects."
msgstr ""

msgid "(Not supported by all operating systems.)  Returns a polling object, which supports registering and unregistering file descriptors, and then polling them for I/O events; see section :ref:`poll-objects` below for the methods supported by polling objects."
msgstr ""

msgid "(Only supported on BSD.)  Returns a kernel queue object object; see section :ref:`kqueue-objects` below for the methods supported by kqueue objects."
msgstr ""

msgid "(Only supported on BSD.)  Returns a kernel event object object; see section :ref:`kevent-objects` below for the methods supported by kqueue objects."
msgstr ""

msgid "This is a straightforward interface to the Unix :cfunc:`select` system call. The first three arguments are sequences of 'waitable objects': either integers representing file descriptors or objects with a parameterless method named :meth:`fileno` returning such an integer:"
msgstr ""

msgid "*rlist*: wait until ready for reading"
msgstr ""

msgid "*wlist*: wait until ready for writing"
msgstr ""

msgid "*xlist*: wait for an \"exceptional condition\" (see the manual page for what your system considers such a condition)"
msgstr ""

msgid "Empty sequences are allowed, but acceptance of three empty sequences is platform-dependent. (It is known to work on Unix but not on Windows.)  The optional *timeout* argument specifies a time-out as a floating point number in seconds.  When the *timeout* argument is omitted the function blocks until at least one file descriptor is ready.  A time-out value of zero specifies a poll and never blocks."
msgstr ""

msgid "The return value is a triple of lists of objects that are ready: subsets of the first three arguments.  When the time-out is reached without a file descriptor becoming ready, three empty lists are returned."
msgstr ""

msgid "Among the acceptable object types in the sequences are Python file objects (e.g. ``sys.stdin``, or objects returned by :func:`open` or :func:`os.popen`), socket objects returned by :func:`socket.socket`.  You may also define a :dfn:`wrapper` class yourself, as long as it has an appropriate :meth:`fileno` method (that really returns a file descriptor, not just a random integer)."
msgstr ""

msgid "File objects on Windows are not acceptable, but sockets are.  On Windows, the underlying :cfunc:`select` function is provided by the WinSock library, and does not handle file descriptors that don't originate from WinSock."
msgstr ""

msgid "Files reported as ready for writing by :func:`select`, :func:`poll` or similar interfaces in this module are guaranteed to not block on a write of up to :const:`PIPE_BUF` bytes. This value is guaranteed by POSIX to be at least 512.  Availability: Unix."
msgstr ""

msgid "Edge and Level Trigger Polling (epoll) Objects"
msgstr ""

msgid "http://linux.die.net/man/4/epoll"
msgstr ""

msgid "*eventmask*"
msgstr ""

msgid ":const:`EPOLLIN`"
msgstr ""

msgid "Available for read"
msgstr ""

msgid ":const:`EPOLLOUT`"
msgstr ""

msgid "Available for write"
msgstr ""

msgid ":const:`EPOLLPRI`"
msgstr ""

msgid "Urgent data for read"
msgstr ""

msgid ":const:`EPOLLERR`"
msgstr ""

msgid "Error condition happened on the assoc. fd"
msgstr ""

msgid ":const:`EPOLLHUP`"
msgstr ""

msgid "Hang up happened on the assoc. fd"
msgstr ""

msgid ":const:`EPOLLET`"
msgstr ""

msgid "Set Edge Trigger behavior, the default is Level Trigger behavior"
msgstr ""

msgid ":const:`EPOLLONESHOT`"
msgstr ""

msgid "Set one-shot behavior. After one event is pulled out, the fd is internally disabled"
msgstr ""

msgid ":const:`EPOLLRDNORM`"
msgstr ""

msgid "???"
msgstr ""

msgid ":const:`EPOLLRDBAND`"
msgstr ""

msgid ":const:`EPOLLWRNORM`"
msgstr ""

msgid ":const:`EPOLLWRBAND`"
msgstr ""

msgid ":const:`EPOLLMSG`"
msgstr ""

msgid "Close the control file descriptor of the epoll object."
msgstr ""

msgid "Return the file descriptor number of the control fd."
msgstr ""

msgid "Create an epoll object from a given file descriptor."
msgstr ""

msgid "Register a fd descriptor with the epoll object."
msgstr ""

msgid "Registering a file descriptor that's already registered raises an IOError -- contrary to :ref:`poll-objects`'s register."
msgstr ""

msgid "Modify a register file descriptor."
msgstr ""

msgid "Remove a registered file descriptor from the epoll object."
msgstr ""

msgid "Wait for events. timeout in seconds (float)"
msgstr ""

msgid "Polling Objects"
msgstr ""

msgid "The :cfunc:`poll` system call, supported on most Unix systems, provides better scalability for network servers that service many, many clients at the same time. :cfunc:`poll` scales better because the system call only requires listing the file descriptors of interest, while :cfunc:`select` builds a bitmap, turns on bits for the fds of interest, and then afterward the whole bitmap has to be linearly scanned again. :cfunc:`select` is O(highest file descriptor), while :cfunc:`poll` is O(number of file descriptors)."
msgstr ""

msgid "Register a file descriptor with the polling object.  Future calls to the :meth:`poll` method will then check whether the file descriptor has any pending I/O events.  *fd* can be either an integer, or an object with a :meth:`fileno` method that returns an integer.  File objects implement :meth:`fileno`, so they can also be used as the argument."
msgstr ""

msgid "*eventmask* is an optional bitmask describing the type of events you want to check for, and can be a combination of the constants :const:`POLLIN`, :const:`POLLPRI`, and :const:`POLLOUT`, described in the table below.  If not specified, the default value used will check for all 3 types of events."
msgstr ""

msgid ":const:`POLLIN`"
msgstr ""

msgid "There is data to read"
msgstr ""

msgid ":const:`POLLPRI`"
msgstr ""

msgid "There is urgent data to read"
msgstr ""

msgid ":const:`POLLOUT`"
msgstr ""

msgid "Ready for output: writing will not block"
msgstr ""

msgid ":const:`POLLERR`"
msgstr ""

msgid "Error condition of some sort"
msgstr ""

msgid ":const:`POLLHUP`"
msgstr ""

msgid "Hung up"
msgstr ""

msgid ":const:`POLLNVAL`"
msgstr ""

msgid "Invalid request: descriptor not open"
msgstr ""

msgid "Registering a file descriptor that's already registered is not an error, and has the same effect as registering the descriptor exactly once."
msgstr ""

msgid "Modifies an already registered fd. This has the same effect as :meth:`register(fd, eventmask)`.  Attempting to modify a file descriptor that was never registered causes an :exc:`IOError` exception with errno :const:`ENOENT` to be raised."
msgstr ""

msgid "Remove a file descriptor being tracked by a polling object.  Just like the :meth:`register` method, *fd* can be an integer or an object with a :meth:`fileno` method that returns an integer."
msgstr ""

msgid "Attempting to remove a file descriptor that was never registered causes a :exc:`KeyError` exception to be raised."
msgstr ""

msgid "Polls the set of registered file descriptors, and returns a possibly-empty list containing ``(fd, event)`` 2-tuples for the descriptors that have events or errors to report. *fd* is the file descriptor, and *event* is a bitmask with bits set for the reported events for that descriptor --- :const:`POLLIN` for waiting input, :const:`POLLOUT` to indicate that the descriptor can be written to, and so forth. An empty list indicates that the call timed out and no file descriptors had any events to report. If *timeout* is given, it specifies the length of time in milliseconds which the system will wait for events before returning. If *timeout* is omitted, negative, or :const:`None`, the call will block until there is an event for this poll object."
msgstr ""

msgid "Kqueue Objects"
msgstr ""

msgid "Close the control file descriptor of the kqueue object."
msgstr ""

msgid "Create a kqueue object from a given file descriptor."
msgstr ""

msgid "Low level interface to kevent"
msgstr ""

msgid "changelist must be an iterable of kevent object or None"
msgstr ""

msgid "max_events must be 0 or a positive integer"
msgstr ""

msgid "timeout in seconds (floats possible)"
msgstr ""

msgid "Kevent Objects"
msgstr ""

msgid "http://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2"
msgstr ""

msgid "Value used to identify the event. The interpretation depends on the filter but it's usually the file descriptor. In the constructor ident can either be an int or an object with a fileno() function. kevent stores the integer internally."
msgstr ""

msgid "Name of the kernel filter."
msgstr ""

msgid ":const:`KQ_FILTER_READ`"
msgstr ""

msgid "Takes a descriptor and returns whenever there is data available to read"
msgstr ""

msgid ":const:`KQ_FILTER_WRITE`"
msgstr ""

msgid "Takes a descriptor and returns whenever there is data available to write"
msgstr ""

msgid ":const:`KQ_FILTER_AIO`"
msgstr ""

msgid "AIO requests"
msgstr ""

msgid ":const:`KQ_FILTER_VNODE`"
msgstr ""

msgid "Returns when one or more of the requested events watched in *fflag* occurs"
msgstr ""

msgid ":const:`KQ_FILTER_PROC`"
msgstr ""

msgid "Watch for events on a process id"
msgstr ""

msgid ":const:`KQ_FILTER_NETDEV`"
msgstr ""

msgid "Watch for events on a network device [not available on Mac OS X]"
msgstr ""

msgid ":const:`KQ_FILTER_SIGNAL`"
msgstr ""

msgid "Returns whenever the watched signal is delivered to the process"
msgstr ""

msgid ":const:`KQ_FILTER_TIMER`"
msgstr ""

msgid "Establishes an arbitrary timer"
msgstr ""

msgid "Filter action."
msgstr ""

msgid ":const:`KQ_EV_ADD`"
msgstr ""

msgid "Adds or modifies an event"
msgstr ""

msgid ":const:`KQ_EV_DELETE`"
msgstr ""

msgid "Removes an event from the queue"
msgstr ""

msgid ":const:`KQ_EV_ENABLE`"
msgstr ""

msgid "Permitscontrol() to returns the event"
msgstr ""

msgid ":const:`KQ_EV_DISABLE`"
msgstr ""

msgid "Disablesevent"
msgstr ""

msgid ":const:`KQ_EV_ONESHOT`"
msgstr ""

msgid "Removes event after first occurrence"
msgstr ""

msgid ":const:`KQ_EV_CLEAR`"
msgstr ""

msgid "Reset the state after an event is retrieved"
msgstr ""

msgid ":const:`KQ_EV_SYSFLAGS`"
msgstr ""

msgid "internal event"
msgstr ""

msgid ":const:`KQ_EV_FLAG1`"
msgstr ""

msgid ":const:`KQ_EV_EOF`"
msgstr ""

msgid "Filter specific EOF condition"
msgstr ""

msgid ":const:`KQ_EV_ERROR`"
msgstr ""

msgid "See return values"
msgstr ""

msgid "Filter specific flags."
msgstr ""

msgid ":const:`KQ_FILTER_READ` and  :const:`KQ_FILTER_WRITE` filter flags:"
msgstr ""

msgid ":const:`KQ_NOTE_LOWAT`"
msgstr ""

msgid "low water mark of a socket buffer"
msgstr ""

msgid ":const:`KQ_FILTER_VNODE` filter flags:"
msgstr ""

msgid ":const:`KQ_NOTE_DELETE`"
msgstr ""

msgid "*unlink()* was called"
msgstr ""

msgid ":const:`KQ_NOTE_WRITE`"
msgstr ""

msgid "a write occurred"
msgstr ""

msgid ":const:`KQ_NOTE_EXTEND`"
msgstr ""

msgid "the file was extended"
msgstr ""

msgid ":const:`KQ_NOTE_ATTRIB`"
msgstr ""

msgid "an attribute was changed"
msgstr ""

msgid ":const:`KQ_NOTE_LINK`"
msgstr ""

msgid "the link count has changed"
msgstr ""

msgid ":const:`KQ_NOTE_RENAME`"
msgstr ""

msgid "the file was renamed"
msgstr ""

msgid ":const:`KQ_NOTE_REVOKE`"
msgstr ""

msgid "access to the file was revoked"
msgstr ""

msgid ":const:`KQ_FILTER_PROC` filter flags:"
msgstr ""

msgid ":const:`KQ_NOTE_EXIT`"
msgstr ""

msgid "the process has exited"
msgstr ""

msgid ":const:`KQ_NOTE_FORK`"
msgstr ""

msgid "the process has called *fork()*"
msgstr ""

msgid ":const:`KQ_NOTE_EXEC`"
msgstr ""

msgid "the process has executed a new process"
msgstr ""

msgid ":const:`KQ_NOTE_PCTRLMASK`"
msgstr ""

msgid "internal filter flag"
msgstr ""

msgid ":const:`KQ_NOTE_PDATAMASK`"
msgstr ""

msgid ":const:`KQ_NOTE_TRACK`"
msgstr ""

msgid "follow a process across *fork()*"
msgstr ""

msgid ":const:`KQ_NOTE_CHILD`"
msgstr ""

msgid "returned on the child process for *NOTE_TRACK*"
msgstr ""

msgid ":const:`KQ_NOTE_TRACKERR`"
msgstr ""

msgid "unable to attach to a child"
msgstr ""

msgid ":const:`KQ_FILTER_NETDEV` filter flags (not available on Mac OS X):"
msgstr ""

msgid ":const:`KQ_NOTE_LINKUP`"
msgstr ""

msgid "link is up"
msgstr ""

msgid ":const:`KQ_NOTE_LINKDOWN`"
msgstr ""

msgid "link is down"
msgstr ""

msgid ":const:`KQ_NOTE_LINKINV`"
msgstr ""

msgid "link state is invalid"
msgstr ""

msgid "Filter specific data."
msgstr ""

msgid "User defined value."
msgstr ""

msgid ":mod:`shelve` --- Python object persistence"
msgstr ""

msgid "A \"shelf\" is a persistent, dictionary-like object.  The difference with \"dbm\" databases is that the values (not the keys!) in a shelf can be essentially arbitrary Python objects --- anything that the :mod:`pickle` module can handle. This includes most class instances, recursive data types, and objects containing lots of shared  sub-objects.  The keys are ordinary strings."
msgstr ""

msgid "Open a persistent dictionary.  The filename specified is the base filename for the underlying database.  As a side-effect, an extension may be added to the filename and more than one file may be created.  By default, the underlying database file is opened for reading and writing.  The optional *flag* parameter has the same interpretation as the *flag* parameter of :func:`dbm.open`."
msgstr ""

msgid "By default, version 3 pickles are used to serialize values.  The version of the pickle protocol can be specified with the *protocol* parameter."
msgstr ""

msgid "Because of Python semantics, a shelf cannot know when a mutable persistent-dictionary entry is modified.  By default modified objects are written *only* when assigned to the shelf (see :ref:`shelve-example`).  If the optional *writeback* parameter is set to *True*, all entries accessed are also cached in memory, and written back on :meth:`~Shelf.sync` and :meth:`~Shelf.close`; this can make it handier to mutate mutable entries in the persistent dictionary, but, if many entries are accessed, it can consume vast amounts of memory for the cache, and it can make the close operation very slow since all accessed entries are written back (there is no way to determine which accessed entries are mutable, nor which ones were actually mutated)."
msgstr ""

msgid "Do not rely on the shelf being closed automatically; always call :meth:`close` explicitly when you don't need it any more, or use a :keyword:`with` statement with :func:`contextlib.closing`."
msgstr ""

msgid "Shelf objects support all methods supported by dictionaries.  This eases the transition from dictionary based scripts to those requiring persistent storage."
msgstr ""

msgid "Two additional methods are supported:"
msgstr ""

msgid "Write back all entries in the cache if the shelf was opened with *writeback* set to :const:`True`.  Also empty the cache and synchronize the persistent dictionary on disk, if feasible.  This is called automatically when the shelf is closed with :meth:`close`."
msgstr ""

msgid "Synchronize and close the persistent *dict* object.  Operations on a closed shelf will fail with a :exc:`ValueError`."
msgstr ""

msgid "`Persistent dictionary recipe <http://code.activestate.com/recipes/576642/>`_ with widely supported storage formats and having the speed of native dictionaries."
msgstr ""

msgid "Restrictions"
msgstr ""

msgid "The choice of which database package will be used (such as :mod:`dbm.ndbm` or :mod:`dbm.gnu`) depends on which interface is available.  Therefore it is not safe to open the database directly using :mod:`dbm`.  The database is also (unfortunately) subject to the limitations of :mod:`dbm`, if it is used --- this means that (the pickled representation of) the objects stored in the database should be fairly small, and in rare cases key collisions may cause the database to refuse updates."
msgstr ""

msgid "The :mod:`shelve` module does not support *concurrent* read/write access to shelved objects.  (Multiple simultaneous read accesses are safe.)  When a program has a shelf open for writing, no other program should have it open for reading or writing.  Unix file locking can be used to solve this, but this differs across Unix versions and requires knowledge about the database implementation used."
msgstr ""

msgid "A subclass of :class:`collections.MutableMapping` which stores pickled values in the *dict* object."
msgstr ""

msgid "By default, version 0 pickles are used to serialize values.  The version of the pickle protocol can be specified with the *protocol* parameter. See the :mod:`pickle` documentation for a discussion of the pickle protocols."
msgstr ""

msgid "If the *writeback* parameter is ``True``, the object will hold a cache of all entries accessed and write them back to the *dict* at sync and close times. This allows natural operations on mutable entries, but can consume much more memory and make sync and close take a long time."
msgstr ""

msgid "A subclass of :class:`Shelf` which exposes :meth:`first`, :meth:`!next`, :meth:`previous`, :meth:`last` and :meth:`set_location` which are available in the third-party :mod:`bsddb` module from `pybsddb <http://www.jcea.es/programacion/pybsddb.htm>`_ but not in other database modules.  The *dict* object passed to the constructor must support those methods.  This is generally accomplished by calling one of :func:`bsddb.hashopen`, :func:`bsddb.btopen` or :func:`bsddb.rnopen`.  The optional *protocol* and *writeback* parameters have the same interpretation as for the :class:`Shelf` class."
msgstr ""

msgid "A subclass of :class:`Shelf` which accepts a *filename* instead of a dict-like object.  The underlying file will be opened using :func:`dbm.open`.  By default, the file will be created and opened for both read and write.  The optional *flag* parameter has the same interpretation as for the :func:`.open` function.  The optional *protocol* and *writeback* parameters have the same interpretation as for the :class:`Shelf` class."
msgstr ""

msgid "To summarize the interface (``key`` is a string, ``data`` is an arbitrary object)::"
msgstr ""

msgid "import shelve  d = shelve.open(filename) # open -- file may get suffix added by low-level                           # library  d[key] = data   # store data at key (overwrites old data if                 # using an existing key) data = d[key]   # retrieve a COPY of data at key (raise KeyError if no                 # such key) del d[key]      # delete data stored at key (raises KeyError                 # if no such key) flag = key in d        # true if the key exists klist = list(d.keys()) # a list of all existing keys (slow!)  # as d was opened WITHOUT writeback=True, beware: d['xx'] = range(4)  # this works as expected, but... d['xx'].append(5)   # *this doesn't!* -- d['xx'] is STILL range(4)!  # having opened d without writeback=True, you need to code carefully: temp = d['xx']      # extracts the copy temp.append(5)      # mutates the copy d['xx'] = temp      # stores the copy right back, to persist it  # or, d=shelve.open(filename,writeback=True) would let you just code # d['xx'].append(5) and have it work as expected, BUT it would also # consume more memory and make the d.close() operation slower.  d.close()       # close it"
msgstr ""

msgid "Generic interface to ``dbm``-style databases."
msgstr ""

msgid "Object serialization used by :mod:`shelve`."
msgstr ""

msgid ":mod:`shlex` --- Simple lexical analysis"
msgstr ""

msgid "The :class:`shlex` class makes it easy to write lexical analyzers for simple syntaxes resembling that of the Unix shell.  This will often be useful for writing minilanguages, (for example, in run control files for Python applications) or for parsing quoted strings."
msgstr ""

msgid "The :mod:`shlex` module defines the following functions:"
msgstr ""

msgid "Split the string *s* using shell-like syntax. If *comments* is :const:`False` (the default), the parsing of comments in the given string will be disabled (setting the :attr:`commenters` member of the :class:`shlex` instance to the empty string).  This function operates in POSIX mode by default, but uses non-POSIX mode if the *posix* argument is false."
msgstr ""

msgid "Since the :func:`split` function instantiates a :class:`shlex` instance, passing ``None`` for *s* will read the string to split from standard input."
msgstr ""

msgid "The :mod:`shlex` module defines the following class:"
msgstr ""

msgid "A :class:`shlex` instance or subclass instance is a lexical analyzer object. The initialization argument, if present, specifies where to read characters from. It must be a file-/stream-like object with :meth:`read` and :meth:`readline` methods, or a string.  If no argument is given, input will be taken from ``sys.stdin``.  The second optional argument is a filename string, which sets the initial value of the :attr:`infile` member.  If the *instream* argument is omitted or equal to ``sys.stdin``, this second argument defaults to \"stdin\".  The *posix* argument defines the operational mode: when *posix* is not true (default), the :class:`shlex` instance will operate in compatibility mode.  When operating in POSIX mode, :class:`shlex` will try to be as close as possible to the POSIX shell parsing rules."
msgstr ""

msgid "Parser for configuration files similar to the Windows :file:`.ini` files."
msgstr ""

msgid "shlex Objects"
msgstr ""

msgid "A :class:`shlex` instance has the following methods:"
msgstr ""

msgid "Return a token.  If tokens have been stacked using :meth:`push_token`, pop a token off the stack.  Otherwise, read one from the input stream.  If reading encounters an immediate end-of-file, :attr:`self.eof` is returned (the empty string (``''``) in non-POSIX mode, and ``None`` in POSIX mode)."
msgstr ""

msgid "Push the argument onto the token stack."
msgstr ""

msgid "Read a raw token.  Ignore the pushback stack, and do not interpret source requests.  (This is not ordinarily a useful entry point, and is documented here only for the sake of completeness.)"
msgstr ""

msgid "When :class:`shlex` detects a source request (see :attr:`source` below) this method is given the following token as argument, and expected to return a tuple consisting of a filename and an open file-like object."
msgstr ""

msgid "Normally, this method first strips any quotes off the argument.  If the result is an absolute pathname, or there was no previous source request in effect, or the previous source was a stream (such as ``sys.stdin``), the result is left alone.  Otherwise, if the result is a relative pathname, the directory part of the name of the file immediately before it on the source inclusion stack is prepended (this behavior is like the way the C preprocessor handles ``#include \"file.h\"``)."
msgstr ""

msgid "The result of the manipulations is treated as a filename, and returned as the first component of the tuple, with :func:`open` called on it to yield the second component. (Note: this is the reverse of the order of arguments in instance initialization!)"
msgstr ""

msgid "This hook is exposed so that you can use it to implement directory search paths, addition of file extensions, and other namespace hacks. There is no corresponding 'close' hook, but a shlex instance will call the :meth:`close` method of the sourced input stream when it returns EOF."
msgstr ""

msgid "For more explicit control of source stacking, use the :meth:`push_source` and :meth:`pop_source` methods."
msgstr ""

msgid "Push an input source stream onto the input stack.  If the filename argument is specified it will later be available for use in error messages.  This is the same method used internally by the :meth:`sourcehook` method."
msgstr ""

msgid "Pop the last-pushed input source from the input stack. This is the same method used internally when the lexer reaches EOF on a stacked input stream."
msgstr ""

msgid "This method generates an error message leader in the format of a Unix C compiler error label; the format is ``'\"%s\", line %d: '``, where the ``%s`` is replaced with the name of the current source file and the ``%d`` with the current input line number (the optional arguments can be used to override these)."
msgstr ""

msgid "This convenience is provided to encourage :mod:`shlex` users to generate error messages in the standard, parseable format understood by Emacs and other Unix tools."
msgstr ""

msgid "Instances of :class:`shlex` subclasses have some public instance variables which either control lexical analysis or can be used for debugging:"
msgstr ""

msgid "The string of characters that are recognized as comment beginners. All characters from the comment beginner to end of line are ignored. Includes just ``'#'`` by default."
msgstr ""

msgid "The string of characters that will accumulate into multi-character tokens.  By default, includes all ASCII alphanumerics and underscore."
msgstr ""

msgid "Characters that will be considered whitespace and skipped.  Whitespace bounds tokens.  By default, includes space, tab, linefeed and carriage-return."
msgstr ""

msgid "Characters that will be considered as escape. This will be only used in POSIX mode, and includes just ``'\\'`` by default."
msgstr ""

msgid "Characters that will be considered string quotes.  The token accumulates until the same quote is encountered again (thus, different quote types protect each other as in the shell.)  By default, includes ASCII single and double quotes."
msgstr ""

msgid "Characters in :attr:`quotes` that will interpret escape characters defined in :attr:`escape`.  This is only used in POSIX mode, and includes just ``'\"'`` by default."
msgstr ""

msgid "If ``True``, tokens will only be split in whitespaces. This is useful, for example, for parsing command lines with :class:`shlex`, getting tokens in a similar way to shell arguments."
msgstr ""

msgid "The name of the current input file, as initially set at class instantiation time or stacked by later source requests.  It may be useful to examine this when constructing error messages."
msgstr ""

msgid "The input stream from which this :class:`shlex` instance is reading characters."
msgstr ""

msgid "This member is ``None`` by default.  If you assign a string to it, that string will be recognized as a lexical-level inclusion request similar to the ``source`` keyword in various shells.  That is, the immediately following token will opened as a filename and input taken from that stream until EOF, at which point the :meth:`close` method of that stream will be called and the input source will again become the original input stream. Source requests may be stacked any number of levels deep."
msgstr ""

msgid "If this member is numeric and ``1`` or more, a :class:`shlex` instance will print verbose progress output on its behavior.  If you need to use this, you can read the module source code to learn the details."
msgstr ""

msgid "Source line number (count of newlines seen so far plus one)."
msgstr ""

msgid "The token buffer.  It may be useful to examine this when catching exceptions."
msgstr ""

msgid "Token used to determine end of file. This will be set to the empty string (``''``), in non-POSIX mode, and to ``None`` in POSIX mode."
msgstr ""

msgid "Parsing Rules"
msgstr ""

msgid "When operating in non-POSIX mode, :class:`shlex` will try to obey to the following rules."
msgstr ""

msgid "Quote characters are not recognized within words (``Do\"Not\"Separate`` is parsed as the single word ``Do\"Not\"Separate``);"
msgstr ""

msgid "Escape characters are not recognized;"
msgstr ""

msgid "Enclosing characters in quotes preserve the literal value of all characters within the quotes;"
msgstr ""

msgid "Closing quotes separate words (``\"Do\"Separate`` is parsed as ``\"Do\"`` and ``Separate``);"
msgstr ""

msgid "If :attr:`whitespace_split` is ``False``, any character not declared to be a word character, whitespace, or a quote will be returned as a single-character token. If it is ``True``, :class:`shlex` will only split words in whitespaces;"
msgstr ""

msgid "EOF is signaled with an empty string (``''``);"
msgstr ""

msgid "It's not possible to parse empty strings, even if quoted."
msgstr ""

msgid "When operating in POSIX mode, :class:`shlex` will try to obey to the following parsing rules."
msgstr ""

msgid "Quotes are stripped out, and do not separate words (``\"Do\"Not\"Separate\"`` is parsed as the single word ``DoNotSeparate``);"
msgstr ""

msgid "Non-quoted escape characters (e.g. ``'\\'``) preserve the literal value of the next character that follows;"
msgstr ""

msgid "Enclosing characters in quotes which are not part of :attr:`escapedquotes` (e.g. ``\"'\"``) preserve the literal value of all characters within the quotes;"
msgstr ""

msgid "Enclosing characters in quotes which are part of :attr:`escapedquotes` (e.g. ``'\"'``) preserves the literal value of all characters within the quotes, with the exception of the characters mentioned in :attr:`escape`. The escape characters retain its special meaning only when followed by the quote in use, or the escape character itself. Otherwise the escape character will be considered a normal character."
msgstr ""

msgid "EOF is signaled with a :const:`None` value;"
msgstr ""

msgid "Quoted empty strings (``''``) are allowed;"
msgstr ""

msgid ":mod:`shutil` --- High-level file operations"
msgstr ""

msgid "The :mod:`shutil` module offers a number of high-level operations on files and collections of files.  In particular, functions are provided  which support file copying and removal. For operations on individual files, see also the :mod:`os` module."
msgstr ""

msgid "Even the higher-level file copying functions (:func:`copy`, :func:`copy2`) can't copy all file metadata."
msgstr ""

msgid "On POSIX platforms, this means that file owner and group are lost as well as ACLs.  On Mac OS, the resource fork and other metadata are not used. This means that resources will be lost and file type and creator codes will not be correct. On Windows, file owners, ACLs and alternate data streams are not copied."
msgstr ""

msgid "Directory and files operations"
msgstr ""

msgid "Copy the contents of the file-like object *fsrc* to the file-like object *fdst*. The integer *length*, if given, is the buffer size. In particular, a negative *length* value means to copy the data without looping over the source data in chunks; by default the data is read in chunks to avoid uncontrolled memory consumption. Note that if the current file position of the *fsrc* object is not 0, only the contents from the current file position to the end of the file will be copied."
msgstr ""

msgid "Copy the contents (no metadata) of the file named *src* to a file named *dst*. *dst* must be the complete target file name; look at :func:`copy` for a copy that accepts a target directory path.  If *src* and *dst* are the same files, :exc:`Error` is raised. The destination location must be writable; otherwise,  an :exc:`IOError` exception will be raised. If *dst* already exists, it will be replaced.   Special files such as character or block devices and pipes cannot be copied with this function.  *src* and *dst* are path names given as strings."
msgstr ""

msgid "Copy the permission bits from *src* to *dst*.  The file contents, owner, and group are unaffected.  *src* and *dst* are path names given as strings."
msgstr ""

msgid "Copy the permission bits, last access time, last modification time, and flags from *src* to *dst*.  The file contents, owner, and group are unaffected.  *src* and *dst* are path names given as strings."
msgstr ""

msgid "Copy the file *src* to the file or directory *dst*.  If *dst* is a directory, a file with the same basename as *src*  is created (or overwritten) in the directory specified.  Permission bits are copied.  *src* and *dst* are path names given as strings."
msgstr ""

msgid "Similar to :func:`copy`, but metadata is copied as well -- in fact, this is just :func:`copy` followed by :func:`copystat`.  This is similar to the Unix command :program:`cp -p`."
msgstr ""

msgid "This factory function creates a function that can be used as a callable for :func:`copytree`\\'s *ignore* argument, ignoring files and directories that match one of the glob-style *patterns* provided.  See the example below."
msgstr ""

msgid "Recursively copy an entire directory tree rooted at *src*.  The destination directory, named by *dst*, must not already exist; it will be created as well as missing parent directories.  Permissions and times of directories are copied with :func:`copystat`, individual files are copied using :func:`copy2`."
msgstr ""

msgid "If *symlinks* is true, symbolic links in the source tree are represented as symbolic links in the new tree; if false or omitted, the contents of the linked files are copied to the new tree."
msgstr ""

msgid "When *symlinks* is false, if the file pointed by the symlink doesn't exist, a exception will be added in the list of errors raised in a :exc:`Error` exception at the end of the copy process. You can set the optional *ignore_dangling_symlinks* flag to true if you want to silence this exception. Notice that this option has no effect on platforms that don't support :func:`os.symlink`."
msgstr ""

msgid "If *ignore* is given, it must be a callable that will receive as its arguments the directory being visited by :func:`copytree`, and a list of its contents, as returned by :func:`os.listdir`.  Since :func:`copytree` is called recursively, the *ignore* callable will be called once for each directory that is copied.  The callable must return a sequence of directory and file names relative to the current directory (i.e. a subset of the items in its second argument); these names will then be ignored in the copy process.  :func:`ignore_patterns` can be used to create such a callable that ignores names based on glob-style patterns."
msgstr ""

msgid "If exception(s) occur, an :exc:`Error` is raised with a list of reasons."
msgstr ""

msgid "If *copy_function* is given, it must be a callable that will be used to copy each file. It will be called with the source path and the destination path as arguments. By default, :func:`copy2` is used, but any function that supports the same signature (like :func:`copy`) can be used."
msgstr ""

msgid "Delete an entire directory tree; *path* must point to a directory (but not a symbolic link to a directory).  If *ignore_errors* is true, errors resulting from failed removals will be ignored; if false or omitted, such errors are handled by calling a handler specified by *onerror* or, if that is omitted, they raise an exception."
msgstr ""

msgid "If *onerror* is provided, it must be a callable that accepts three parameters: *function*, *path*, and *excinfo*. The first parameter, *function*, is the function which raised the exception; it will be :func:`os.path.islink`, :func:`os.listdir`, :func:`os.remove` or :func:`os.rmdir`.  The second parameter, *path*, will be the path name passed to *function*.  The third parameter, *excinfo*, will be the exception information return by :func:`sys.exc_info`.  Exceptions raised by *onerror* will not be caught."
msgstr ""

msgid "Recursively move a file or directory to another location."
msgstr ""

msgid "If the destination is on the current filesystem, then simply use rename. Otherwise, copy src (with :func:`copy2`) to the dst and then remove src."
msgstr ""

msgid "This exception collects exceptions that raised during a multi-file operation. For :func:`copytree`, the exception argument is a list of 3-tuples (*srcname*, *dstname*, *exception*)."
msgstr ""

msgid "copytree example"
msgstr ""

msgid "This example is the implementation of the :func:`copytree` function, described above, with the docstring omitted.  It demonstrates many of the other functions provided by this module. ::"
msgstr ""

msgid "def copytree(src, dst, symlinks=False):     names = os.listdir(src)     os.makedirs(dst)     errors = []     for name in names:         srcname = os.path.join(src, name)         dstname = os.path.join(dst, name)         try:             if symlinks and os.path.islink(srcname):                 linkto = os.readlink(srcname)                 os.symlink(linkto, dstname)             elif os.path.isdir(srcname):                 copytree(srcname, dstname, symlinks)             else:                 copy2(srcname, dstname)             # XXX What about devices, sockets etc.?         except (IOError, os.error) as why:             errors.append((srcname, dstname, str(why)))         # catch the Error from the recursive copytree so that we can         # continue with other files         except Error as err:             errors.extend(err.args[0])     try:         copystat(src, dst)     except WindowsError:         # can't copy file access times on Windows         pass     except OSError as why:         errors.extend((src, dst, str(why)))     if errors:         raise Error(errors)"
msgstr ""

msgid "Another example that uses the :func:`ignore_patterns` helper::"
msgstr ""

msgid "from shutil import copytree, ignore_patterns  copytree(source, destination, ignore=ignore_patterns('*.pyc', 'tmp*'))"
msgstr ""

msgid "This will copy everything except ``.pyc`` files and files or directories whose name starts with ``tmp``."
msgstr ""

msgid "Another example that uses the *ignore* argument to add a logging call::"
msgstr ""

msgid "from shutil import copytree import logging  def _logpath(path, names):     logging.info('Working in %s' % path)     return []   # nothing will be ignored  copytree(source, destination, ignore=_logpath)"
msgstr ""

msgid "Archives operations"
msgstr ""

msgid "Create an archive file (e.g. zip or tar) and returns its name."
msgstr ""

msgid "*base_name* is the name of the file to create, including the path, minus any format-specific extension. *format* is the archive format: one of \"zip\", \"tar\", \"bztar\" (if the :mod:`bz2` module is available) or \"gztar\"."
msgstr ""

msgid "*root_dir* is a directory that will be the root directory of the archive; i.e. we typically chdir into *root_dir* before creating the archive."
msgstr ""

msgid "*base_dir* is the directory where we start archiving from; i.e. *base_dir* will be the common prefix of all files and directories in the archive."
msgstr ""

msgid "*root_dir* and *base_dir* both default to the current directory."
msgstr ""

msgid "*owner* and *group* are used when creating a tar archive. By default, uses the current owner and group."
msgstr ""

msgid "Returns a list of supported formats for archiving. Each element of the returned sequence is a tuple ``(name, description)``"
msgstr ""

msgid "By default :mod:`shutil` provides these formats:"
msgstr ""

msgid "*gztar*: gzip'ed tar-file"
msgstr ""

msgid "*bztar*: bzip2'ed tar-file (if the :mod:`bz2` module is available.)"
msgstr ""

msgid "*tar*: uncompressed tar file"
msgstr ""

msgid "*zip*: ZIP file"
msgstr ""

msgid "You can register new formats or provide your own archiver for any existing formats, by using :func:`register_archive_format`."
msgstr ""

msgid "Registers an archiver for the format *name*. *function* is a callable that will be used to invoke the archiver."
msgstr ""

msgid "If given, *extra_args* is a sequence of ``(name, value)`` that will be used as extra keywords arguments when the archiver callable is used."
msgstr ""

msgid "*description* is used by :func:`get_archive_formats` which returns the list of archivers. Defaults to an empty list."
msgstr ""

msgid "Remove the archive format *name* from the list of supported formats."
msgstr ""

msgid "Unpack an archive. *filename* is the full path of the archive."
msgstr ""

msgid "*extract_dir* is the name of the target directory where the archive is unpacked. If not provided, the current working directory is used."
msgstr ""

msgid "*format* is the archive format: one of \"zip\", \"tar\", or \"gztar\". Or any other format registered with :func:`register_unpack_format`. If not provided, :func:`unpack_archive` will use the archive file name extension and see if an unpacker was registered for that extension. In case none is found, a :exc:`ValueError` is raised."
msgstr ""

msgid "Registers an unpack format. *name* is the name of the format and *extensions* is a list of extensions corresponding to the format, like ``.zip`` for Zip files."
msgstr ""

msgid "*function* is the callable that will be used to unpack archives. The callable will receive the path of the archive, followed by the directory the archive must be extracted to."
msgstr ""

msgid "When provided, *extra_args* is a sequence of ``(name, value)`` tuples that will be passed as keywords arguments to the callable."
msgstr ""

msgid "*description* can be provided to describe the format, and will be returned by the :func:`get_unpack_formats` function."
msgstr ""

msgid "Unregister an unpack format. *name* is the name of the format."
msgstr ""

msgid "Return a list of all registered formats for unpacking. Each element of the returned sequence is a tuple ``(name, extensions, description)``."
msgstr ""

msgid "You can register new formats or provide your own unpacker for any existing formats, by using :func:`register_unpack_format`."
msgstr ""

msgid "Archiving example"
msgstr ""

msgid "In this example, we create a gzip'ed tar-file archive containing all files found in the :file:`.ssh` directory of the user::"
msgstr ""

msgid ">>> from shutil import make_archive >>> import os >>> archive_name = os.path.expanduser(os.path.join('~', 'myarchive')) >>> root_dir = os.path.expanduser(os.path.join('~', '.ssh')) >>> make_archive(archive_name, 'gztar', root_dir) '/Users/tarek/myarchive.tar.gz'"
msgstr ""

msgid "The resulting archive contains::"
msgstr ""

msgid "$ tar -tzvf /Users/tarek/myarchive.tar.gz drwx------ tarek/staff       0 2010-02-01 16:23:40 ./ -rw-r--r-- tarek/staff     609 2008-06-09 13:26:54 ./authorized_keys -rwxr-xr-x tarek/staff      65 2008-06-09 13:26:54 ./config -rwx------ tarek/staff     668 2008-06-09 13:26:54 ./id_dsa -rwxr-xr-x tarek/staff     609 2008-06-09 13:26:54 ./id_dsa.pub -rw------- tarek/staff    1675 2008-06-09 13:26:54 ./id_rsa -rw-r--r-- tarek/staff     397 2008-06-09 13:26:54 ./id_rsa.pub -rw-r--r-- tarek/staff   37192 2010-02-06 18:23:10 ./known_hosts"
msgstr ""

msgid ":mod:`signal` --- Set handlers for asynchronous events"
msgstr ""

msgid "This module provides mechanisms to use signal handlers in Python. Some general rules for working with signals and their handlers:"
msgstr ""

msgid "A handler for a particular signal, once set, remains installed until it is explicitly reset (Python emulates the BSD style interface regardless of the underlying implementation), with the exception of the handler for :const:`SIGCHLD`, which follows the underlying implementation."
msgstr ""

msgid "There is no way to \"block\" signals temporarily from critical sections (since this is not supported by all Unix flavors)."
msgstr ""

msgid "Although Python signal handlers are called asynchronously as far as the Python user is concerned, they can only occur between the \"atomic\" instructions of the Python interpreter.  This means that signals arriving during long calculations implemented purely in C (such as regular expression matches on large bodies of text) may be delayed for an arbitrary amount of time."
msgstr ""

msgid "When a signal arrives during an I/O operation, it is possible that the I/O operation raises an exception after the signal handler returns. This is dependent on the underlying Unix system's semantics regarding interrupted system calls."
msgstr ""

msgid "Because the C signal handler always returns, it makes little sense to catch synchronous errors like :const:`SIGFPE` or :const:`SIGSEGV`."
msgstr ""

msgid "Python installs a small number of signal handlers by default: :const:`SIGPIPE` is ignored (so write errors on pipes and sockets can be reported as ordinary Python exceptions) and :const:`SIGINT` is translated into a :exc:`KeyboardInterrupt` exception.  All of these can be overridden."
msgstr ""

msgid "Some care must be taken if both signals and threads are used in the same program.  The fundamental thing to remember in using signals and threads simultaneously is: always perform :func:`signal` operations in the main thread of execution.  Any thread can perform an :func:`alarm`, :func:`getsignal`, :func:`pause`, :func:`setitimer` or :func:`getitimer`; only the main thread can set a new signal handler, and the main thread will be the only one to receive signals (this is enforced by the Python :mod:`signal` module, even if the underlying thread implementation supports sending signals to individual threads).  This means that signals can't be used as a means of inter-thread communication.  Use locks instead."
msgstr ""

msgid "The variables defined in the :mod:`signal` module are:"
msgstr ""

msgid "This is one of two standard signal handling options; it will simply perform the default function for the signal.  For example, on most systems the default action for :const:`SIGQUIT` is to dump core and exit, while the default action for :const:`SIGCHLD` is to simply ignore it."
msgstr ""

msgid "This is another standard signal handler, which will simply ignore the given signal."
msgstr ""

msgid "All the signal numbers are defined symbolically.  For example, the hangup signal is defined as :const:`signal.SIGHUP`; the variable names are identical to the names used in C programs, as found in ``<signal.h>``. The Unix man page for ':cfunc:`signal`' lists the existing signals (on some systems this is :manpage:`signal(2)`, on others the list is in :manpage:`signal(7)`). Note that not all systems define the same set of signal names; only those names defined by the system are defined by this module."
msgstr ""

msgid "The signal corresponding to the CTRL+C keystroke event. Availability: Windows."
msgstr ""

msgid "The signal corresponding to the CTRL+BREAK keystroke event. Availability: Windows."
msgstr ""

msgid "One more than the number of the highest signal number."
msgstr ""

msgid "Decrements interval timer in real time, and delivers :const:`SIGALRM` upon expiration."
msgstr ""

msgid "Decrements interval timer only when the process is executing, and delivers SIGVTALRM upon expiration."
msgstr ""

msgid "Decrements interval timer both when the process executes and when the system is executing on behalf of the process. Coupled with ITIMER_VIRTUAL, this timer is usually used to profile the time spent by the application in user and kernel space. SIGPROF is delivered upon expiration."
msgstr ""

msgid "The :mod:`signal` module defines one exception:"
msgstr ""

msgid "Raised to signal an error from the underlying :func:`setitimer` or :func:`getitimer` implementation. Expect this error if an invalid interval timer or a negative time is passed to :func:`setitimer`. This error is a subtype of :exc:`IOError`."
msgstr ""

msgid "The :mod:`signal` module defines the following functions:"
msgstr ""

msgid "If *time* is non-zero, this function requests that a :const:`SIGALRM` signal be sent to the process in *time* seconds. Any previously scheduled alarm is canceled (only one alarm can be scheduled at any time).  The returned value is then the number of seconds before any previously set alarm was to have been delivered. If *time* is zero, no alarm is scheduled, and any scheduled alarm is canceled.  If the return value is zero, no alarm is currently scheduled.  (See the Unix man page :manpage:`alarm(2)`.) Availability: Unix."
msgstr ""

msgid "Return the current signal handler for the signal *signalnum*. The returned value may be a callable Python object, or one of the special values :const:`signal.SIG_IGN`, :const:`signal.SIG_DFL` or :const:`None`.  Here, :const:`signal.SIG_IGN` means that the signal was previously ignored, :const:`signal.SIG_DFL` means that the default way of handling the signal was previously in use, and ``None`` means that the previous signal handler was not installed from Python."
msgstr ""

msgid "Cause the process to sleep until a signal is received; the appropriate handler will then be called.  Returns nothing.  Not on Windows. (See the Unix man page :manpage:`signal(2)`.)"
msgstr ""

msgid "Sets given interval timer (one of :const:`signal.ITIMER_REAL`, :const:`signal.ITIMER_VIRTUAL` or :const:`signal.ITIMER_PROF`) specified by *which* to fire after *seconds* (float is accepted, different from :func:`alarm`) and after that every *interval* seconds. The interval timer specified by *which* can be cleared by setting seconds to zero."
msgstr ""

msgid "When an interval timer fires, a signal is sent to the process. The signal sent is dependent on the timer being used; :const:`signal.ITIMER_REAL` will deliver :const:`SIGALRM`, :const:`signal.ITIMER_VIRTUAL` sends :const:`SIGVTALRM`, and :const:`signal.ITIMER_PROF` will deliver :const:`SIGPROF`."
msgstr ""

msgid "The old values are returned as a tuple: (delay, interval)."
msgstr ""

msgid "Attempting to pass an invalid interval timer will cause an :exc:`ItimerError`.  Availability: Unix."
msgstr ""

msgid "Returns current value of a given interval timer specified by *which*. Availability: Unix."
msgstr ""

msgid "Set the wakeup fd to *fd*.  When a signal is received, a ``'\\0'`` byte is written to the fd.  This can be used by a library to wakeup a poll or select call, allowing the signal to be fully processed."
msgstr ""

msgid "The old wakeup fd is returned.  *fd* must be non-blocking.  It is up to the library to remove any bytes before calling poll or select again."
msgstr ""

msgid "When threads are enabled, this function can only be called from the main thread; attempting to call it from other threads will cause a :exc:`ValueError` exception to be raised."
msgstr ""

msgid "Change system call restart behaviour: if *flag* is :const:`False`, system calls will be restarted when interrupted by signal *signalnum*, otherwise system calls will be interrupted.  Returns nothing.  Availability: Unix (see the man page :manpage:`siginterrupt(3)` for further information)."
msgstr ""

msgid "Note that installing a signal handler with :func:`signal` will reset the restart behaviour to interruptible by implicitly calling :cfunc:`siginterrupt` with a true *flag* value for the given signal."
msgstr ""

msgid "Set the handler for signal *signalnum* to the function *handler*.  *handler* can be a callable Python object taking two arguments (see below), or one of the special values :const:`signal.SIG_IGN` or :const:`signal.SIG_DFL`.  The previous signal handler will be returned (see the description of :func:`getsignal` above).  (See the Unix man page :manpage:`signal(2)`.)"
msgstr ""

msgid "The *handler* is called with two arguments: the signal number and the current stack frame (``None`` or a frame object; for a description of frame objects, see the :ref:`description in the type hierarchy <frame-objects>` or see the attribute descriptions in the :mod:`inspect` module)."
msgstr ""

msgid "Here is a minimal example program. It uses the :func:`alarm` function to limit the time spent waiting to open a file; this is useful if the file is for a serial device that may not be turned on, which would normally cause the :func:`os.open` to hang indefinitely.  The solution is to set a 5-second alarm before opening the file; if the operation takes too long, the alarm signal will be sent, and the handler raises an exception. ::"
msgstr ""

msgid "import signal, os  def handler(signum, frame):     print('Signal handler called with signal', signum)     raise IOError(\"Couldn't open device!\")  # Set the signal handler and a 5-second alarm signal.signal(signal.SIGALRM, handler) signal.alarm(5)  # This open() may hang indefinitely fd = os.open('/dev/ttyS0', os.O_RDWR)  signal.alarm(0)          # Disable the alarm"
msgstr ""

msgid ":mod:`site` --- Site-specific configuration hook"
msgstr ""

msgid "**This module is automatically imported during initialization.** The automatic import can be suppressed using the interpreter's :option:`-S` option."
msgstr ""

msgid "Importing this module will append site-specific paths to the module search path."
msgstr ""

msgid "It starts by constructing up to four directories from a head and a tail part. For the head part, it uses ``sys.prefix`` and ``sys.exec_prefix``; empty heads are skipped.  For the tail part, it uses the empty string and then :file:`lib/site-packages` (on Windows) or :file:`lib/python|version|/site-packages` and then :file:`lib/site-python` (on Unix and Macintosh).  For each of the distinct head-tail combinations, it sees if it refers to an existing directory, and if so, adds it to ``sys.path`` and also inspects the newly added path for configuration files."
msgstr ""

msgid "A path configuration file is a file whose name has the form :file:`package.pth` and exists in one of the four directories mentioned above; its contents are additional items (one per line) to be added to ``sys.path``.  Non-existing items are never added to ``sys.path``, but no check is made that the item refers to a directory (rather than a file).  No item is added to ``sys.path`` more than once.  Blank lines and lines beginning with ``#`` are skipped.  Lines starting with ``import`` (followed by space or tab) are executed."
msgstr ""

msgid "For example, suppose ``sys.prefix`` and ``sys.exec_prefix`` are set to :file:`/usr/local`.  The Python X.Y library is then installed in :file:`/usr/local/lib/python{X.Y}` (where only the first three characters of ``sys.version`` are used to form the installation path name).  Suppose this has a subdirectory :file:`/usr/local/lib/python{X.Y}/site-packages` with three subsubdirectories, :file:`foo`, :file:`bar` and :file:`spam`, and two path configuration files, :file:`foo.pth` and :file:`bar.pth`.  Assume :file:`foo.pth` contains the following::"
msgstr ""

msgid "# foo package configuration  foo bar bletch"
msgstr ""

msgid "and :file:`bar.pth` contains::"
msgstr ""

msgid "# bar package configuration  bar"
msgstr ""

msgid "Then the following version-specific directories are added to ``sys.path``, in this order::"
msgstr ""

msgid "/usr/local/lib/pythonX.Y/site-packages/bar /usr/local/lib/pythonX.Y/site-packages/foo"
msgstr ""

msgid "Note that :file:`bletch` is omitted because it doesn't exist; the :file:`bar` directory precedes the :file:`foo` directory because :file:`bar.pth` comes alphabetically before :file:`foo.pth`; and :file:`spam` is omitted because it is not mentioned in either path configuration file."
msgstr ""

msgid "After these path manipulations, an attempt is made to import a module named :mod:`sitecustomize`, which can perform arbitrary site-specific customizations. If this import fails with an :exc:`ImportError` exception, it is silently ignored."
msgstr ""

msgid "Note that for some non-Unix systems, ``sys.prefix`` and ``sys.exec_prefix`` are empty, and the path manipulations are skipped; however the import of :mod:`sitecustomize` is still attempted."
msgstr ""

msgid "A list of prefixes for site package directories"
msgstr ""

msgid "Flag showing the status of the user site directory. True means the user site directory is enabled and added to sys.path. When the flag is None the user site directory is disabled for security reasons."
msgstr ""

msgid "Path to the user site directory for the current Python version or None"
msgstr ""

msgid "Path to the base directory for user site directories"
msgstr ""

msgid "Adds a directory to sys.path and processes its pth files."
msgstr ""

msgid "Returns a list containing all global site-packages directories (and possibly site-python)."
msgstr ""

msgid "Returns the \"user base\" directory path."
msgstr ""

msgid "The \"user base\" directory can be used to store data. If the global variable ``USER_BASE`` is not initialized yet, this function will also set it."
msgstr ""

msgid "Returns the user-specific site-packages directory path."
msgstr ""

msgid "If the global variable ``USER_SITE`` is not initialized yet, this function will also set it."
msgstr ""

msgid ":mod:`smtpd` --- SMTP Server"
msgstr ""

msgid "This module offers several classes to implement SMTP servers.  One is a generic do-nothing implementation, which can be overridden, while the other two offer specific mail-sending strategies."
msgstr ""

msgid "SMTPServer Objects"
msgstr ""

msgid "Create a new :class:`SMTPServer` object, which binds to local address *localaddr*.  It will treat *remoteaddr* as an upstream SMTP relayer.  It inherits from :class:`asyncore.dispatcher`, and so will insert itself into :mod:`asyncore`'s event loop on instantiation."
msgstr ""

msgid "Raise :exc:`NotImplementedError` exception. Override this in subclasses to do something useful with this message. Whatever was passed in the constructor as *remoteaddr* will be available as the :attr:`_remoteaddr` attribute. *peer* is the remote host's address, *mailfrom* is the envelope originator, *rcpttos* are the envelope recipients and *data* is a string containing the contents of the e-mail (which should be in :rfc:`2822` format)."
msgstr ""

msgid "DebuggingServer Objects"
msgstr ""

msgid "Create a new debugging server.  Arguments are as per :class:`SMTPServer`. Messages will be discarded, and printed on stdout."
msgstr ""

msgid "PureProxy Objects"
msgstr ""

msgid "Create a new pure proxy server. Arguments are as per :class:`SMTPServer`. Everything will be relayed to *remoteaddr*.  Note that running this has a good chance to make you into an open relay, so please be careful."
msgstr ""

msgid "MailmanProxy Objects"
msgstr ""

msgid "Create a new pure proxy server. Arguments are as per :class:`SMTPServer`. Everything will be relayed to *remoteaddr*, unless local mailman configurations knows about an address, in which case it will be handled via mailman.  Note that running this has a good chance to make you into an open relay, so please be careful."
msgstr ""

msgid ":mod:`smtplib` --- SMTP protocol client"
msgstr ""

msgid "The :mod:`smtplib` module defines an SMTP client session object that can be used to send mail to any Internet machine with an SMTP or ESMTP listener daemon.  For details of SMTP and ESMTP operation, consult :rfc:`821` (Simple Mail Transfer Protocol) and :rfc:`1869` (SMTP Service Extensions)."
msgstr ""

msgid "A :class:`SMTP` instance encapsulates an SMTP connection.  It has methods that support a full repertoire of SMTP and ESMTP operations. If the optional host and port parameters are given, the SMTP :meth:`connect` method is called with those parameters during initialization.  An :exc:`SMTPConnectError` is raised if the specified host doesn't respond correctly. The optional *timeout* parameter specifies a timeout in seconds for blocking operations like the connection attempt (if not specified, the global default timeout setting will be used)."
msgstr ""

msgid "For normal use, you should only require the initialization/connect, :meth:`sendmail`, and :meth:`quit` methods.  An example is included below."
msgstr ""

msgid "A :class:`SMTP_SSL` instance behaves exactly the same as instances of :class:`SMTP`. :class:`SMTP_SSL` should be used for situations where SSL is required from the beginning of the connection and using :meth:`starttls` is not appropriate. If *host* is not specified, the local host is used. If *port* is zero, the standard SMTP-over-SSL port (465) is used. *keyfile* and *certfile* are also optional, and can contain a PEM formatted private key and certificate chain file for the SSL connection. The optional *timeout* parameter specifies a timeout in seconds for blocking operations like the connection attempt (if not specified, the global default timeout setting will be used)."
msgstr ""

msgid "The LMTP protocol, which is very similar to ESMTP, is heavily based on the standard SMTP client. It's common to use Unix sockets for LMTP, so our :meth:`connect` method must support that as well as a regular host:port server. To specify a Unix socket, you must use an absolute path for *host*, starting with a '/'."
msgstr ""

msgid "Authentication is supported, using the regular SMTP mechanism. When using a Unix socket, LMTP generally don't support or require any authentication, but your mileage might vary."
msgstr ""

msgid "A nice selection of exceptions is defined as well:"
msgstr ""

msgid "Base exception class for all exceptions raised by this module."
msgstr ""

msgid "This exception is raised when the server unexpectedly disconnects, or when an attempt is made to use the :class:`SMTP` instance before connecting it to a server."
msgstr ""

msgid "Base class for all exceptions that include an SMTP error code. These exceptions are generated in some instances when the SMTP server returns an error code.  The error code is stored in the :attr:`smtp_code` attribute of the error, and the :attr:`smtp_error` attribute is set to the error message."
msgstr ""

msgid "Sender address refused.  In addition to the attributes set by on all :exc:`SMTPResponseException` exceptions, this sets 'sender' to the string that the SMTP server refused."
msgstr ""

msgid "All recipient addresses refused.  The errors for each recipient are accessible through the attribute :attr:`recipients`, which is a dictionary of exactly the same sort as :meth:`SMTP.sendmail` returns."
msgstr ""

msgid "The SMTP server refused to accept the message data."
msgstr ""

msgid "Error occurred during establishment of a connection  with the server."
msgstr ""

msgid "The server refused our ``HELO`` message."
msgstr ""

msgid "SMTP authentication went wrong.  Most probably the server didn't accept the username/password combination provided."
msgstr ""

msgid "Protocol definition for SMTP.  This document covers the model, operating procedure, and protocol details for SMTP."
msgstr ""

msgid "Definition of the ESMTP extensions for SMTP.  This describes a framework for extending SMTP with new commands, supporting dynamic discovery of the commands provided by the server, and defines a few additional commands."
msgstr ""

msgid "SMTP Objects"
msgstr ""

msgid "An :class:`SMTP` instance has the following methods:"
msgstr ""

msgid "Set the debug output level.  A true value for *level* results in debug messages for connection and for all messages sent to and received from the server."
msgstr ""

msgid "Connect to a host on a given port.  The defaults are to connect to the local host at the standard SMTP port (25). If the hostname ends with a colon (``':'``) followed by a number, that suffix will be stripped off and the number interpreted as the port number to use. This method is automatically invoked by the constructor if a host is specified during instantiation."
msgstr ""

msgid "Send a command *cmd* to the server.  The optional argument *args* is simply concatenated to the command, separated by a space."
msgstr ""

msgid "This returns a 2-tuple composed of a numeric response code and the actual response line (multiline responses are joined into one long line.)"
msgstr ""

msgid "In normal operation it should not be necessary to call this method explicitly. It is used to implement other methods and may be useful for testing private extensions."
msgstr ""

msgid "If the connection to the server is lost while waiting for the reply, :exc:`SMTPServerDisconnected` will be raised."
msgstr ""

msgid "Identify yourself to the SMTP server using ``HELO``.  The hostname argument defaults to the fully qualified domain name of the local host. The message returned by the server is stored as the :attr:`helo_resp` attribute of the object."
msgstr ""

msgid "In normal operation it should not be necessary to call this method explicitly. It will be implicitly called by the :meth:`sendmail` when necessary."
msgstr ""

msgid "Identify yourself to an ESMTP server using ``EHLO``.  The hostname argument defaults to the fully qualified domain name of the local host.  Examine the response for ESMTP option and store them for use by :meth:`has_extn`. Also sets several informational attributes: the message returned by the server is stored as the :attr:`ehlo_resp` attribute, :attr:`does_esmtp` is set to true or false depending on whether the server supports ESMTP, and :attr:`esmtp_features` will be a dictionary containing the names of the SMTP service extensions this server supports, and their parameters (if any)."
msgstr ""

msgid "Unless you wish to use :meth:`has_extn` before sending mail, it should not be necessary to call this method explicitly.  It will be implicitly called by :meth:`sendmail` when necessary."
msgstr ""

msgid "This method call :meth:`ehlo` and or :meth:`helo` if there has been no previous ``EHLO`` or ``HELO`` command this session.  It tries ESMTP ``EHLO`` first."
msgstr ""

msgid "The server didn't reply properly to the ``HELO`` greeting."
msgstr ""

msgid "Return :const:`True` if *name* is in the set of SMTP service extensions returned by the server, :const:`False` otherwise. Case is ignored."
msgstr ""

msgid "Check the validity of an address on this server using SMTP ``VRFY``. Returns a tuple consisting of code 250 and a full :rfc:`822` address (including human name) if the user address is valid. Otherwise returns an SMTP error code of 400 or greater and an error string."
msgstr ""

msgid "Many sites disable SMTP ``VRFY`` in order to foil spammers."
msgstr ""

msgid "Log in on an SMTP server that requires authentication. The arguments are the username and the password to authenticate with. If there has been no previous ``EHLO`` or ``HELO`` command this session, this method tries ESMTP ``EHLO`` first. This method will return normally if the authentication was successful, or may raise the following exceptions:"
msgstr ""

msgid "The server didn't accept the username/password combination."
msgstr ""

msgid "No suitable authentication method was found."
msgstr ""

msgid "Put the SMTP connection in TLS (Transport Layer Security) mode.  All SMTP commands that follow will be encrypted.  You should then call :meth:`ehlo` again."
msgstr ""

msgid "If *keyfile* and *certfile* are provided, these are passed to the :mod:`socket` module's :func:`ssl` function."
msgstr ""

msgid "If there has been no previous ``EHLO`` or ``HELO`` command this session, this method tries ESMTP ``EHLO`` first."
msgstr ""

msgid "The server does not support the STARTTLS extension."
msgstr ""

msgid "SSL/TLS support is not available to your Python interpreter."
msgstr ""

msgid "Send mail.  The required arguments are an :rfc:`822` from-address string, a list of :rfc:`822` to-address strings (a bare string will be treated as a list with 1 address), and a message string.  The caller may pass a list of ESMTP options (such as ``8bitmime``) to be used in ``MAIL FROM`` commands as *mail_options*. ESMTP options (such as ``DSN`` commands) that should be used with all ``RCPT`` commands can be passed as *rcpt_options*.  (If you need to use different ESMTP options to different recipients you have to use the low-level methods such as :meth:`mail`, :meth:`rcpt` and :meth:`data` to send the message.)"
msgstr ""

msgid "The *from_addr* and *to_addrs* parameters are used to construct the message envelope used by the transport agents. The :class:`SMTP` does not modify the message headers in any way."
msgstr ""

msgid "If there has been no previous ``EHLO`` or ``HELO`` command this session, this method tries ESMTP ``EHLO`` first. If the server does ESMTP, message size and each of the specified options will be passed to it (if the option is in the feature set the server advertises).  If ``EHLO`` fails, ``HELO`` will be tried and ESMTP options suppressed."
msgstr ""

msgid "This method will return normally if the mail is accepted for at least one recipient. Otherwise it will throw an exception.  That is, if this method does not throw an exception, then someone should get your mail. If this method does not throw an exception, it returns a dictionary, with one entry for each recipient that was refused.  Each entry contains a tuple of the SMTP error code and the accompanying error message sent by the server."
msgstr ""

msgid "This method may raise the following exceptions:"
msgstr ""

msgid "All recipients were refused.  Nobody got the mail.  The :attr:`recipients` attribute of the exception object is a dictionary with information about the refused recipients (like the one returned when at least one recipient was accepted)."
msgstr ""

msgid "The server didn't accept the *from_addr*."
msgstr ""

msgid "The server replied with an unexpected error code (other than a refusal of a recipient)."
msgstr ""

msgid "Unless otherwise noted, the connection will be open even after an exception is raised."
msgstr ""

msgid "Terminate the SMTP session and close the connection.  Return the result of the SMTP ``QUIT`` command."
msgstr ""

msgid "Low-level methods corresponding to the standard SMTP/ESMTP commands ``HELP``, ``RSET``, ``NOOP``, ``MAIL``, ``RCPT``, and ``DATA`` are also supported. Normally these do not need to be called directly, so they are not documented here.  For details, consult the module code."
msgstr ""

msgid "SMTP Example"
msgstr ""

msgid "This example prompts the user for addresses needed in the message envelope ('To' and 'From' addresses), and the message to be delivered.  Note that the headers to be included with the message must be included in the message as entered; this example doesn't do any processing of the :rfc:`822` headers.  In particular, the 'To' and 'From' addresses must be included in the message headers explicitly. ::"
msgstr ""

msgid "import smtplib  def prompt(prompt):     return input(prompt).strip()  fromaddr = prompt(\"From: \") toaddrs  = prompt(\"To: \").split() print(\"Enter message, end with ^D (Unix) or ^Z (Windows):\")  # Add the From: and To: headers at the start! msg = (\"From: %s\\r\\nTo: %s\\r\\n\\r\\n\"        % (fromaddr, \", \".join(toaddrs))) while True:     try:         line = input()     except EOFError:         break     if not line:         break     msg = msg + line  print(\"Message length is\", len(msg))  server = smtplib.SMTP('localhost') server.set_debuglevel(1) server.sendmail(fromaddr, toaddrs, msg) server.quit()"
msgstr ""

msgid "In general, you will want to use the :mod:`email` package's features to construct an email message, which you can then convert to a string and send via :meth:`sendmail`; see :ref:`email-examples`."
msgstr ""

msgid ":mod:`sndhdr` --- Determine type of sound file"
msgstr ""

msgid "The :mod:`sndhdr` provides utility functions which attempt to determine the type of sound data which is in a file.  When these functions are able to determine what type of sound data is stored in a file, they return a tuple ``(type, sampling_rate, channels, frames, bits_per_sample)``.  The value for *type* indicates the data type and will be one of the strings ``'aifc'``, ``'aiff'``, ``'au'``, ``'hcom'``, ``'sndr'``, ``'sndt'``, ``'voc'``, ``'wav'``, ``'8svx'``, ``'sb'``, ``'ub'``, or ``'ul'``.  The *sampling_rate* will be either the actual value or ``0`` if unknown or difficult to decode.  Similarly, *channels* will be either the number of channels or ``0`` if it cannot be determined or if the value is difficult to decode.  The value for *frames* will be either the number of frames or ``-1``.  The last item in the tuple, *bits_per_sample*, will either be the sample size in bits or ``'A'`` for A-LAW or ``'U'`` for u-LAW."
msgstr ""

msgid "Determines the type of sound data stored in the file *filename* using :func:`whathdr`.  If it succeeds, returns a tuple as described above, otherwise ``None`` is returned."
msgstr ""

msgid "Determines the type of sound data stored in a file based on the file  header. The name of the file is given by *filename*.  This function returns a tuple as described above on success, or ``None``."
msgstr ""

msgid ":mod:`socket` --- Low-level networking interface"
msgstr ""

msgid "This module provides access to the BSD *socket* interface. It is available on all modern Unix systems, Windows, MacOS, OS/2, and probably additional platforms."
msgstr ""

msgid "Some behavior may be platform dependent, since calls are made to the operating system socket APIs."
msgstr ""

msgid "For an introduction to socket programming (in C), see the following papers: An Introductory 4.3BSD Interprocess Communication Tutorial, by Stuart Sechrest and An Advanced 4.3BSD Interprocess Communication Tutorial, by Samuel J.  Leffler et al, both in the UNIX Programmer's Manual, Supplementary Documents 1 (sections PS1:7 and PS1:8).  The platform-specific reference material for the various socket-related system calls are also a valuable source of information on the details of socket semantics.  For Unix, refer to the manual pages; for Windows, see the WinSock (or Winsock 2) specification. For IPv6-ready APIs, readers may want to refer to :rfc:`3493` titled Basic Socket Interface Extensions for IPv6."
msgstr ""

msgid "The Python interface is a straightforward transliteration of the Unix system call and library interface for sockets to Python's object-oriented style: the :func:`socket` function returns a :dfn:`socket object` whose methods implement the various socket system calls.  Parameter types are somewhat higher-level than in the C interface: as with :meth:`read` and :meth:`write` operations on Python files, buffer allocation on receive operations is automatic, and buffer length is implicit on send operations."
msgstr ""

msgid "Socket addresses are represented as follows: A single string is used for the :const:`AF_UNIX` address family. A pair ``(host, port)`` is used for the :const:`AF_INET` address family, where *host* is a string representing either a hostname in Internet domain notation like ``'daring.cwi.nl'`` or an IPv4 address like ``'100.50.200.5'``, and *port* is an integral port number. For :const:`AF_INET6` address family, a four-tuple ``(host, port, flowinfo, scopeid)`` is used, where *flowinfo* and *scopeid* represents ``sin6_flowinfo`` and ``sin6_scope_id`` member in :const:`struct sockaddr_in6` in C. For :mod:`socket` module methods, *flowinfo* and *scopeid* can be omitted just for backward compatibility. Note, however, omission of *scopeid* can cause problems in manipulating scoped IPv6 addresses. Other address families are currently not supported. The address format required by a particular socket object is automatically selected based on the address family specified when the socket object was created."
msgstr ""

msgid "For IPv4 addresses, two special forms are accepted instead of a host address: the empty string represents :const:`INADDR_ANY`, and the string ``'<broadcast>'`` represents :const:`INADDR_BROADCAST`. The behavior is not available for IPv6 for backward compatibility, therefore, you may want to avoid these if you intend to support IPv6 with your Python programs."
msgstr ""

msgid "If you use a hostname in the *host* portion of IPv4/v6 socket address, the program may show a nondeterministic behavior, as Python uses the first address returned from the DNS resolution.  The socket address will be resolved differently into an actual IPv4/v6 address, depending on the results from DNS resolution and/or the host configuration.  For deterministic behavior use a numeric address in *host* portion."
msgstr ""

msgid "AF_NETLINK sockets are represented as  pairs ``pid, groups``."
msgstr ""

msgid "Linux-only support for TIPC is also available using the :const:`AF_TIPC` address family. TIPC is an open, non-IP based networked protocol designed for use in clustered computer environments.  Addresses are represented by a tuple, and the fields depend on the address type. The general tuple form is ``(addr_type, v1, v2, v3 [, scope])``, where:"
msgstr ""

msgid "*addr_type* is one of TIPC_ADDR_NAMESEQ, TIPC_ADDR_NAME, or TIPC_ADDR_ID."
msgstr ""

msgid "*scope* is one of TIPC_ZONE_SCOPE, TIPC_CLUSTER_SCOPE, and TIPC_NODE_SCOPE."
msgstr ""

msgid "If *addr_type* is TIPC_ADDR_NAME, then *v1* is the server type, *v2* is the port identifier, and *v3* should be 0."
msgstr ""

msgid "If *addr_type* is TIPC_ADDR_NAMESEQ, then *v1* is the server type, *v2* is the lower port number, and *v3* is the upper port number."
msgstr ""

msgid "If *addr_type* is TIPC_ADDR_ID, then *v1* is the node, *v2* is the reference, and *v3* should be set to 0."
msgstr ""

msgid "All errors raise exceptions.  The normal exceptions for invalid argument types and out-of-memory conditions can be raised; errors related to socket or address semantics raise the error :exc:`socket.error`."
msgstr ""

msgid "Non-blocking mode is supported through :meth:`~socket.setblocking`.  A generalization of this based on timeouts is supported through :meth:`~socket.settimeout`."
msgstr ""

msgid "The module :mod:`socket` exports the following constants and functions:"
msgstr ""

msgid "This exception is raised for socket-related errors. The accompanying value is either a string telling what went wrong or a pair ``(errno, string)`` representing an error returned by a system call, similar to the value accompanying :exc:`os.error`. See the module :mod:`errno`, which contains names for the error codes defined by the underlying operating system."
msgstr ""

msgid "This exception is raised for address-related errors, i.e. for functions that use *h_errno* in the C API, including :func:`gethostbyname_ex` and :func:`gethostbyaddr`."
msgstr ""

msgid "The accompanying value is a pair ``(h_errno, string)`` representing an error returned by a library call. *string* represents the description of *h_errno*, as returned by the :cfunc:`hstrerror` C function."
msgstr ""

msgid "This exception is raised for address-related errors, for :func:`getaddrinfo` and :func:`getnameinfo`. The accompanying value is a pair ``(error, string)`` representing an error returned by a library call. *string* represents the description of *error*, as returned by the :cfunc:`gai_strerror` C function. The *error* value will match one of the :const:`EAI_\\*` constants defined in this module."
msgstr ""

msgid "This exception is raised when a timeout occurs on a socket which has had timeouts enabled via a prior call to :meth:`settimeout`.  The accompanying value is a string whose value is currently always \"timed out\"."
msgstr ""

msgid "These constants represent the address (and protocol) families, used for the first argument to :func:`socket`.  If the :const:`AF_UNIX` constant is not defined then this protocol is unsupported."
msgstr ""

msgid "These constants represent the socket types, used for the second argument to :func:`socket`. (Only :const:`SOCK_STREAM` and :const:`SOCK_DGRAM` appear to be generally useful.)"
msgstr ""

msgid "Many constants of these forms, documented in the Unix documentation on sockets and/or the IP protocol, are also defined in the socket module. They are generally used in arguments to the :meth:`setsockopt` and :meth:`getsockopt` methods of socket objects.  In most cases, only those symbols that are defined in the Unix header files are defined; for a few symbols, default values are provided."
msgstr ""

msgid "Constants for Windows' WSAIoctl(). The constants are used as arguments to the :meth:`ioctl` method of socket objects."
msgstr ""

msgid "TIPC related constants, matching the ones exported by the C socket API. See the TIPC documentation for more information."
msgstr ""

msgid "This constant contains a boolean value which indicates if IPv6 is supported on this platform."
msgstr ""

msgid "Convenience function.  Connect to *address* (a 2-tuple ``(host, port)``), and return the socket object.  Passing the optional *timeout* parameter will set the timeout on the socket instance before attempting to connect.  If no *timeout* is supplied, the global default timeout setting returned by :func:`getdefaulttimeout` is used."
msgstr ""

msgid "If supplied, *source_address* must be a 2-tuple ``(host, port)`` for the socket to bind to as its source address before connecting.  If host or port are '' or 0 respectively the OS default behavior will be used."
msgstr ""

msgid "Translate the *host*/*port* argument into a sequence of 5-tuples that contain all the necessary arguments for creating a socket connected to that service. *host* is a domain name, a string representation of an IPv4/v6 address or ``None``. *port* is a string service name such as ``'http'``, a numeric port number or ``None``.  By passing ``None`` as the value of *host* and *port*, you can pass ``NULL`` to the underlying C API."
msgstr ""

msgid "The *family*, *socktype* and *proto* arguments can be optionally specified in order to narrow the list of addresses returned.  Passing zero as a value for each of these arguments selects the full range of results. The *flags* argument can be one or several of the ``AI_*`` constants, and will influence how results are computed and returned. For example, :const:`AI_NUMERICHOST` will disable domain name resolution and will raise an error if *host* is a domain name."
msgstr ""

msgid "The function returns a list of 5-tuples with the following structure:"
msgstr ""

msgid "``(family, socktype, proto, canonname, sockaddr)``"
msgstr ""

msgid "In these tuples, *family*, *socktype*, *proto* are all integers and are meant to be passed to the :func:`socket` function.  *canonname* will be a string representing the canonical name of the *host* if :const:`AI_CANONNAME` is part of the *flags* argument; else *canonname* will be empty.  *sockaddr* is a tuple describing a socket address, whose format depends on the returned *family* (a ``(address, port)`` 2-tuple for :const:`AF_INET`, a ``(address, port, flow info, scope id)`` 4-tuple for :const:`AF_INET6`), and is meant to be passed to the :meth:`socket.connect` method."
msgstr ""

msgid "The following example fetches address information for a hypothetical TCP connection to ``www.python.org`` on port 80 (results may differ on your system if IPv6 isn't enabled)::"
msgstr ""

msgid ">>> socket.getaddrinfo(\"www.python.org\", 80, 0, 0, socket.SOL_TCP) [(2, 1, 6, '', ('82.94.164.162', 80)),  (10, 1, 6, '', ('2001:888:2000:d::a2', 80, 0, 0))]"
msgstr ""

msgid "Return a fully qualified domain name for *name*. If *name* is omitted or empty, it is interpreted as the local host.  To find the fully qualified name, the hostname returned by :func:`gethostbyaddr` is checked, followed by aliases for the host, if available.  The first name which includes a period is selected.  In case no fully qualified domain name is available, the hostname as returned by :func:`gethostname` is returned."
msgstr ""

msgid "Translate a host name to IPv4 address format.  The IPv4 address is returned as a string, such as  ``'100.50.200.5'``.  If the host name is an IPv4 address itself it is returned unchanged.  See :func:`gethostbyname_ex` for a more complete interface. :func:`gethostbyname` does not support IPv6 name resolution, and :func:`getaddrinfo` should be used instead for IPv4/v6 dual stack support."
msgstr ""

msgid "Translate a host name to IPv4 address format, extended interface. Return a triple ``(hostname, aliaslist, ipaddrlist)`` where *hostname* is the primary host name responding to the given *ip_address*, *aliaslist* is a (possibly empty) list of alternative host names for the same address, and *ipaddrlist* is a list of IPv4 addresses for the same interface on the same host (often but not always a single address). :func:`gethostbyname_ex` does not support IPv6 name resolution, and :func:`getaddrinfo` should be used instead for IPv4/v6 dual stack support."
msgstr ""

msgid "Return a string containing the hostname of the machine where  the Python interpreter is currently executing."
msgstr ""

msgid "If you want to know the current machine's IP address, you may want to use ``gethostbyname(gethostname())``. This operation assumes that there is a valid address-to-host mapping for the host, and the assumption does not always hold."
msgstr ""

msgid "Note: :func:`gethostname` doesn't always return the fully qualified domain name; use ``getfqdn()`` (see above)."
msgstr ""

msgid "Return a triple ``(hostname, aliaslist, ipaddrlist)`` where *hostname* is the primary host name responding to the given *ip_address*, *aliaslist* is a (possibly empty) list of alternative host names for the same address, and *ipaddrlist* is a list of IPv4/v6 addresses for the same interface on the same host (most likely containing only a single address). To find the fully qualified domain name, use the function :func:`getfqdn`. :func:`gethostbyaddr` supports both IPv4 and IPv6."
msgstr ""

msgid "Translate a socket address *sockaddr* into a 2-tuple ``(host, port)``. Depending on the settings of *flags*, the result can contain a fully-qualified domain name or numeric address representation in *host*.  Similarly, *port* can contain a string port name or a numeric port number."
msgstr ""

msgid "Translate an Internet protocol name (for example, ``'icmp'``) to a constant suitable for passing as the (optional) third argument to the :func:`socket` function.  This is usually only needed for sockets opened in \"raw\" mode (:const:`SOCK_RAW`); for the normal socket modes, the correct protocol is chosen automatically if the protocol is omitted or zero."
msgstr ""

msgid "Translate an Internet service name and protocol name to a port number for that service.  The optional protocol name, if given, should be ``'tcp'`` or ``'udp'``, otherwise any protocol will match."
msgstr ""

msgid "Translate an Internet port number and protocol name to a service name for that service.  The optional protocol name, if given, should be ``'tcp'`` or ``'udp'``, otherwise any protocol will match."
msgstr ""

msgid "Create a new socket using the given address family, socket type and protocol number.  The address family should be :const:`AF_INET` (the default), :const:`AF_INET6` or :const:`AF_UNIX`.  The socket type should be :const:`SOCK_STREAM` (the default), :const:`SOCK_DGRAM` or perhaps one of the other ``SOCK_`` constants.  The protocol number is usually zero and may be omitted in that case."
msgstr ""

msgid "Build a pair of connected socket objects using the given address family, socket type, and protocol number.  Address family, socket type, and protocol number are as for the :func:`socket` function above. The default family is :const:`AF_UNIX` if defined on the platform; otherwise, the default is :const:`AF_INET`. Availability: Unix."
msgstr ""

msgid "Duplicate the file descriptor *fd* (an integer as returned by a file object's :meth:`fileno` method) and build a socket object from the result.  Address family, socket type and protocol number are as for the :func:`socket` function above. The file descriptor should refer to a socket, but this is not checked --- subsequent operations on the object may fail if the file descriptor is invalid. This function is rarely needed, but can be used to get or set socket options on a socket passed to a program as standard input or output (such as a server started by the Unix inet daemon).  The socket is assumed to be in blocking mode. Availability: Unix."
msgstr ""

msgid "Convert 32-bit positive integers from network to host byte order.  On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 4-byte swap operation."
msgstr ""

msgid "Convert 16-bit positive integers from network to host byte order.  On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 2-byte swap operation."
msgstr ""

msgid "Convert 32-bit positive integers from host to network byte order.  On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 4-byte swap operation."
msgstr ""

msgid "Convert 16-bit positive integers from host to network byte order.  On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 2-byte swap operation."
msgstr ""

msgid "Convert an IPv4 address from dotted-quad string format (for example, '123.45.67.89') to 32-bit packed binary format, as a bytes object four characters in length.  This is useful when conversing with a program that uses the standard C library and needs objects of type :ctype:`struct in_addr`, which is the C type for the 32-bit packed binary this function returns."
msgstr ""

msgid ":func:`inet_aton` also accepts strings with less than three dots; see the Unix manual page :manpage:`inet(3)` for details."
msgstr ""

msgid "If the IPv4 address string passed to this function is invalid, :exc:`socket.error` will be raised. Note that exactly what is valid depends on the underlying C implementation of :cfunc:`inet_aton`."
msgstr ""

msgid ":func:`inet_aton` does not support IPv6, and :func:`inet_pton` should be used instead for IPv4/v6 dual stack support."
msgstr ""

msgid "Convert a 32-bit packed IPv4 address (a bytes object four characters in length) to its standard dotted-quad string representation (for example, '123.45.67.89').  This is useful when conversing with a program that uses the standard C library and needs objects of type :ctype:`struct in_addr`, which is the C type for the 32-bit packed binary data this function takes as an argument."
msgstr ""

msgid "If the byte sequence passed to this function is not exactly 4 bytes in length, :exc:`socket.error` will be raised. :func:`inet_ntoa` does not support IPv6, and :func:`inet_ntop` should be used instead for IPv4/v6 dual stack support."
msgstr ""

msgid "Convert an IP address from its family-specific string format to a packed, binary format. :func:`inet_pton` is useful when a library or network protocol calls for an object of type :ctype:`struct in_addr` (similar to :func:`inet_aton`) or :ctype:`struct in6_addr`."
msgstr ""

msgid "Supported values for *address_family* are currently :const:`AF_INET` and :const:`AF_INET6`. If the IP address string *ip_string* is invalid, :exc:`socket.error` will be raised. Note that exactly what is valid depends on both the value of *address_family* and the underlying implementation of :cfunc:`inet_pton`."
msgstr ""

msgid "Availability: Unix (maybe not all platforms)."
msgstr ""

msgid "Convert a packed IP address (a bytes object of some number of characters) to its standard, family-specific string representation (for example, ``'7.10.0.5'`` or ``'5aef:2b::8'``). :func:`inet_ntop` is useful when a library or network protocol returns an object of type :ctype:`struct in_addr` (similar to :func:`inet_ntoa`) or :ctype:`struct in6_addr`."
msgstr ""

msgid "Supported values for *address_family* are currently :const:`AF_INET` and :const:`AF_INET6`. If the string *packed_ip* is not the correct length for the specified address family, :exc:`ValueError` will be raised.  A :exc:`socket.error` is raised for errors from the call to :func:`inet_ntop`."
msgstr ""

msgid "Return the default timeout in floating seconds for new socket objects. A value of ``None`` indicates that new socket objects have no timeout. When the socket module is first imported, the default is ``None``."
msgstr ""

msgid "Set the default timeout in floating seconds for new socket objects. A value of ``None`` indicates that new socket objects have no timeout. When the socket module is first imported, the default is ``None``."
msgstr ""

msgid "This is a Python type object that represents the socket object type. It is the same as ``type(socket(...))``."
msgstr ""

msgid "Classes that simplify writing network servers."
msgstr ""

msgid "Socket Objects"
msgstr ""

msgid "Socket objects have the following methods.  Except for :meth:`makefile` these correspond to Unix system calls applicable to sockets."
msgstr ""

msgid "Accept a connection. The socket must be bound to an address and listening for connections. The return value is a pair ``(conn, address)`` where *conn* is a *new* socket object usable to send and receive data on the connection, and *address* is the address bound to the socket on the other end of the connection."
msgstr ""

msgid "Bind the socket to *address*.  The socket must not already be bound. (The format of *address* depends on the address family --- see above.)"
msgstr ""

msgid "Close the socket.  All future operations on the socket object will fail. The remote end will receive no more data (after queued data is flushed). Sockets are automatically closed when they are garbage-collected."
msgstr ""

msgid "Connect to a remote socket at *address*. (The format of *address* depends on the address family --- see above.)"
msgstr ""

msgid "Like ``connect(address)``, but return an error indicator instead of raising an exception for errors returned by the C-level :cfunc:`connect` call (other problems, such as \"host not found,\" can still raise exceptions).  The error indicator is ``0`` if the operation succeeded, otherwise the value of the :cdata:`errno` variable.  This is useful to support, for example, asynchronous connects."
msgstr ""

msgid "Return the socket's file descriptor (a small integer).  This is useful with :func:`select.select`."
msgstr ""

msgid "Under Windows the small integer returned by this method cannot be used where a file descriptor can be used (such as :func:`os.fdopen`).  Unix does not have this limitation."
msgstr ""

msgid "Return the remote address to which the socket is connected.  This is useful to find out the port number of a remote IPv4/v6 socket, for instance. (The format of the address returned depends on the address family --- see above.)  On some systems this function is not supported."
msgstr ""

msgid "Return the socket's own address.  This is useful to find out the port number of an IPv4/v6 socket, for instance. (The format of the address returned depends on the address family --- see above.)"
msgstr ""

msgid "Return the value of the given socket option (see the Unix man page :manpage:`getsockopt(2)`).  The needed symbolic constants (:const:`SO_\\*` etc.) are defined in this module.  If *buflen* is absent, an integer option is assumed and its integer value is returned by the function.  If *buflen* is present, it specifies the maximum length of the buffer used to receive the option in, and this buffer is returned as a bytes object.  It is up to the caller to decode the contents of the buffer (see the optional built-in module :mod:`struct` for a way to decode C structures encoded as byte strings)."
msgstr ""

msgid "platform"
msgstr ""

msgid "The :meth:`ioctl` method is a limited interface to the WSAIoctl system interface.  Please refer to the `Win32 documentation <http://msdn.microsoft.com/en-us/library/ms741621%28VS.85%29.aspx>`_ for more information."
msgstr ""

msgid "On other platforms, the generic :func:`fcntl.fcntl` and :func:`fcntl.ioctl` functions may be used; they accept a socket object as their first argument."
msgstr ""

msgid "Return a :dfn:`file object` associated with the socket.  The exact returned type depends on the arguments given to :meth:`makefile`.  These arguments are interpreted the same way as by the built-in :func:`open` function."
msgstr ""

msgid "The returned file object references a :cfunc:`dup`\\ ped version of the socket file descriptor, so the file object and socket object may be closed or garbage-collected independently.  The socket must be in blocking mode (it can not have a timeout)."
msgstr ""

msgid "Receive data from the socket.  The return value is a bytes object representing the data received.  The maximum amount of data to be received at once is specified by *bufsize*.  See the Unix manual page :manpage:`recv(2)` for the meaning of the optional argument *flags*; it defaults to zero."
msgstr ""

msgid "For best match with hardware and network realities, the value of  *bufsize* should be a relatively small power of 2, for example, 4096."
msgstr ""

msgid "Receive data from the socket.  The return value is a pair ``(bytes, address)`` where *bytes* is a bytes object representing the data received and *address* is the address of the socket sending the data.  See the Unix manual page :manpage:`recv(2)` for the meaning of the optional argument *flags*; it defaults to zero. (The format of *address* depends on the address family --- see above.)"
msgstr ""

msgid "Receive data from the socket, writing it into *buffer* instead of creating a new bytestring.  The return value is a pair ``(nbytes, address)`` where *nbytes* is the number of bytes received and *address* is the address of the socket sending the data.  See the Unix manual page :manpage:`recv(2)` for the meaning of the optional argument *flags*; it defaults to zero.  (The format of *address* depends on the address family --- see above.)"
msgstr ""

msgid "Receive up to *nbytes* bytes from the socket, storing the data into a buffer rather than creating a new bytestring.  If *nbytes* is not specified (or 0), receive up to the size available in the given buffer.  Returns the number of bytes received.  See the Unix manual page :manpage:`recv(2)` for the meaning of the optional argument *flags*; it defaults to zero."
msgstr ""

msgid "Send data to the socket.  The socket must be connected to a remote socket.  The optional *flags* argument has the same meaning as for :meth:`recv` above. Returns the number of bytes sent. Applications are responsible for checking that all data has been sent; if only some of the data was transmitted, the application needs to attempt delivery of the remaining data."
msgstr ""

msgid "Send data to the socket.  The socket must be connected to a remote socket.  The optional *flags* argument has the same meaning as for :meth:`recv` above. Unlike :meth:`send`, this method continues to send data from *bytes* until either all data has been sent or an error occurs.  ``None`` is returned on success.  On error, an exception is raised, and there is no way to determine how much data, if any, was successfully sent."
msgstr ""

msgid "Send data to the socket.  The socket should not be connected to a remote socket, since the destination socket is specified by *address*.  The optional *flags* argument has the same meaning as for :meth:`recv` above.  Return the number of bytes sent. (The format of *address* depends on the address family --- see above.)"
msgstr ""

msgid "Set blocking or non-blocking mode of the socket: if *flag* is 0, the socket is set to non-blocking, else to blocking mode.  Initially all sockets are in blocking mode.  In non-blocking mode, if a :meth:`recv` call doesn't find any data, or if a :meth:`send` call can't immediately dispose of the data, a :exc:`error` exception is raised; in blocking mode, the calls block until they can proceed. ``s.setblocking(0)`` is equivalent to ``s.settimeout(0.0)``; ``s.setblocking(1)`` is equivalent to ``s.settimeout(None)``."
msgstr ""

msgid "Set a timeout on blocking socket operations.  The *value* argument can be a nonnegative float expressing seconds, or ``None``. If a float is given, subsequent socket operations will raise a :exc:`timeout` exception if the timeout period *value* has elapsed before the operation has completed.  Setting a timeout of ``None`` disables timeouts on socket operations. ``s.settimeout(0.0)`` is equivalent to ``s.setblocking(0)``; ``s.settimeout(None)`` is equivalent to ``s.setblocking(1)``."
msgstr ""

msgid "Return the timeout in floating seconds associated with socket operations, or ``None`` if no timeout is set.  This reflects the last call to :meth:`setblocking` or :meth:`settimeout`."
msgstr ""

msgid "Some notes on socket blocking and timeouts: A socket object can be in one of three modes: blocking, non-blocking, or timeout.  Sockets are always created in blocking mode.  In blocking mode, operations block until complete or the system returns an error (such as connection timed out).  In non-blocking mode, operations fail (with an error that is unfortunately system-dependent) if they cannot be completed immediately.  In timeout mode, operations fail if they cannot be completed within the timeout specified for the socket or if the system returns an error.  The :meth:`~socket.setblocking` method is simply a shorthand for certain :meth:`~socket.settimeout` calls."
msgstr ""

msgid "Timeout mode internally sets the socket in non-blocking mode.  The blocking and timeout modes are shared between file descriptors and socket objects that refer to the same network endpoint.  A consequence of this is that file objects returned by the :meth:`~socket.makefile` method must only be used when the socket is in blocking mode; in timeout or non-blocking mode file operations that cannot be completed immediately will fail."
msgstr ""

msgid "Note that the :meth:`~socket.connect` operation is subject to the timeout setting, and in general it is recommended to call :meth:`~socket.settimeout` before calling :meth:`~socket.connect` or pass a timeout parameter to :meth:`create_connection`.  The system network stack may return a connection timeout error of its own regardless of any Python socket timeout setting."
msgstr ""

msgid "Set the value of the given socket option (see the Unix manual page :manpage:`setsockopt(2)`).  The needed symbolic constants are defined in the :mod:`socket` module (:const:`SO_\\*` etc.).  The value can be an integer or a bytes object representing a buffer.  In the latter case it is up to the caller to ensure that the bytestring contains the proper bits (see the optional built-in module :mod:`struct` for a way to encode C structures as bytestrings)."
msgstr ""

msgid "Shut down one or both halves of the connection.  If *how* is :const:`SHUT_RD`, further receives are disallowed.  If *how* is :const:`SHUT_WR`, further sends are disallowed.  If *how* is :const:`SHUT_RDWR`, further sends and receives are disallowed."
msgstr ""

msgid "Note that there are no methods :meth:`read` or :meth:`write`; use :meth:`~socket.recv` and :meth:`~socket.send` without *flags* argument instead."
msgstr ""

msgid "Socket objects also have these (read-only) attributes that correspond to the values given to the :class:`socket` constructor."
msgstr ""

msgid "The socket family."
msgstr ""

msgid "The socket type."
msgstr ""

msgid "The socket protocol."
msgstr ""

msgid "Here are four minimal example programs using the TCP/IP protocol: a server that echoes all data that it receives back (servicing only one client), and a client using it.  Note that a server must perform the sequence :func:`socket`, :meth:`~socket.bind`, :meth:`~socket.listen`, :meth:`~socket.accept` (possibly repeating the :meth:`~socket.accept` to service more than one client), while a client only needs the sequence :func:`socket`, :meth:`~socket.connect`.  Also note that the server does not :meth:`~socket.send`/:meth:`~socket.recv` on the socket it is listening on but on the new socket returned by :meth:`~socket.accept`."
msgstr ""

msgid "The first two examples support IPv4 only. ::"
msgstr ""

msgid "# Echo server program import socket  HOST = ''                 # Symbolic name meaning all available interfaces PORT = 50007              # Arbitrary non-privileged port s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind((HOST, PORT)) s.listen(1) conn, addr = s.accept() print('Connected by', addr) while True:     data = conn.recv(1024)     if not data: break     conn.send(data) conn.close()"
msgstr ""

msgid "# Echo client program import socket  HOST = 'daring.cwi.nl'    # The remote host PORT = 50007              # The same port as used by the server s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((HOST, PORT)) s.send(b'Hello, world') data = s.recv(1024) s.close() print('Received', repr(data))"
msgstr ""

msgid "The next two examples are identical to the above two, but support both IPv4 and IPv6. The server side will listen to the first address family available (it should listen to both instead). On most of IPv6-ready systems, IPv6 will take precedence and the server may not accept IPv4 traffic. The client side will try to connect to the all addresses returned as a result of the name resolution, and sends traffic to the first one connected successfully. ::"
msgstr ""

msgid "# Echo server program import socket import sys  HOST = None               # Symbolic name meaning all available interfaces PORT = 50007              # Arbitrary non-privileged port s = None for res in socket.getaddrinfo(HOST, PORT, socket.AF_UNSPEC,                               socket.SOCK_STREAM, 0, socket.AI_PASSIVE):     af, socktype, proto, canonname, sa = res     try:         s = socket.socket(af, socktype, proto)     except socket.error as msg:         s = None         continue     try:         s.bind(sa)         s.listen(1)     except socket.error as msg:         s.close()         s = None         continue     break if s is None:     print('could not open socket')     sys.exit(1) conn, addr = s.accept() print('Connected by', addr) while True:     data = conn.recv(1024)     if not data: break     conn.send(data) conn.close()"
msgstr ""

msgid "# Echo client program import socket import sys  HOST = 'daring.cwi.nl'    # The remote host PORT = 50007              # The same port as used by the server s = None for res in socket.getaddrinfo(HOST, PORT, socket.AF_UNSPEC, socket.SOCK_STREAM):     af, socktype, proto, canonname, sa = res     try:         s = socket.socket(af, socktype, proto)     except socket.error as msg:         s = None         continue     try:         s.connect(sa)     except socket.error as msg:         s.close()         s = None         continue     break if s is None:     print('could not open socket')     sys.exit(1) s.send(b'Hello, world') data = s.recv(1024) s.close() print('Received', repr(data))"
msgstr ""

msgid "The last example shows how to write a very simple network sniffer with raw sockets on Windows. The example requires administrator privileges to modify the interface::"
msgstr ""

msgid "import socket  # the public network interface HOST = socket.gethostbyname(socket.gethostname())  # create a raw socket and bind it to the public interface s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_IP) s.bind((HOST, 0))  # Include IP headers s.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)  # receive all packages s.ioctl(socket.SIO_RCVALL, socket.RCVALL_ON)  # receive a package print(s.recvfrom(65565))  # disabled promiscuous mode s.ioctl(socket.SIO_RCVALL, socket.RCVALL_OFF)"
msgstr ""

msgid ":mod:`socketserver` --- A framework for network servers"
msgstr ""

msgid "The :mod:`socketserver` module simplifies the task of writing network servers."
msgstr ""

msgid "There are four basic server classes: :class:`TCPServer` uses the Internet TCP protocol, which provides for continuous streams of data between the client and server.  :class:`UDPServer` uses datagrams, which are discrete packets of information that may arrive out of order or be lost while in transit.  The more infrequently used :class:`UnixStreamServer` and :class:`UnixDatagramServer` classes are similar, but use Unix domain sockets; they're not available on non-Unix platforms.  For more details on network programming, consult a book such as W. Richard Steven's UNIX Network Programming or Ralph Davis's Win32 Network Programming."
msgstr ""

msgid "These four classes process requests :dfn:`synchronously`; each request must be completed before the next request can be started.  This isn't suitable if each request takes a long time to complete, because it requires a lot of computation, or because it returns a lot of data which the client is slow to process.  The solution is to create a separate process or thread to handle each request; the :class:`ForkingMixIn` and :class:`ThreadingMixIn` mix-in classes can be used to support asynchronous behaviour."
msgstr ""

msgid "Creating a server requires several steps.  First, you must create a request handler class by subclassing the :class:`BaseRequestHandler` class and overriding its :meth:`handle` method; this method will process incoming requests.  Second, you must instantiate one of the server classes, passing it the server's address and the request handler class.  Finally, call the :meth:`handle_request` or :meth:`serve_forever` method of the server object to process one or many requests."
msgstr ""

msgid "When inheriting from :class:`ThreadingMixIn` for threaded connection behavior, you should explicitly declare how you want your threads to behave on an abrupt shutdown. The :class:`ThreadingMixIn` class defines an attribute *daemon_threads*, which indicates whether or not the server should wait for thread termination. You should set the flag explicitly if you would like threads to behave autonomously; the default is :const:`False`, meaning that Python will not exit until all threads created by :class:`ThreadingMixIn` have exited."
msgstr ""

msgid "Server classes have the same external methods and attributes, no matter what network protocol they use."
msgstr ""

msgid "Server Creation Notes"
msgstr ""

msgid "There are five classes in an inheritance diagram, four of which represent synchronous servers of four types::"
msgstr ""

msgid "+------------+ | BaseServer | +------------+       |       v +-----------+        +------------------+ | TCPServer |------->| UnixStreamServer | +-----------+        +------------------+       |       v +-----------+        +--------------------+ | UDPServer |------->| UnixDatagramServer | +-----------+        +--------------------+"
msgstr ""

msgid "Note that :class:`UnixDatagramServer` derives from :class:`UDPServer`, not from :class:`UnixStreamServer` --- the only difference between an IP and a Unix stream server is the address family, which is simply repeated in both Unix server classes."
msgstr ""

msgid "Forking and threading versions of each type of server can be created using the :class:`ForkingMixIn` and :class:`ThreadingMixIn` mix-in classes.  For instance, a threading UDP server class is created as follows::"
msgstr ""

msgid "class ThreadingUDPServer(ThreadingMixIn, UDPServer): pass"
msgstr ""

msgid "The mix-in class must come first, since it overrides a method defined in :class:`UDPServer`.  Setting the various member variables also changes the behavior of the underlying server mechanism."
msgstr ""

msgid "To implement a service, you must derive a class from :class:`BaseRequestHandler` and redefine its :meth:`handle` method.  You can then run various versions of the service by combining one of the server classes with your request handler class.  The request handler class must be different for datagram or stream services.  This can be hidden by using the handler subclasses :class:`StreamRequestHandler` or :class:`DatagramRequestHandler`."
msgstr ""

msgid "Of course, you still have to use your head!  For instance, it makes no sense to use a forking server if the service contains state in memory that can be modified by different requests, since the modifications in the child process would never reach the initial state kept in the parent process and passed to each child.  In this case, you can use a threading server, but you will probably have to use locks to protect the integrity of the shared data."
msgstr ""

msgid "On the other hand, if you are building an HTTP server where all data is stored externally (for instance, in the file system), a synchronous class will essentially render the service \"deaf\" while one request is being handled -- which may be for a very long time if a client is slow to receive all the data it has requested.  Here a threading or forking server is appropriate."
msgstr ""

msgid "In some cases, it may be appropriate to process part of a request synchronously, but to finish processing in a forked child depending on the request data.  This can be implemented by using a synchronous server and doing an explicit fork in the request handler class :meth:`handle` method."
msgstr ""

msgid "Another approach to handling multiple simultaneous requests in an environment that supports neither threads nor :func:`fork` (or where these are too expensive or inappropriate for the service) is to maintain an explicit table of partially finished requests and to use :func:`select` to decide which request to work on next (or whether to handle a new incoming request).  This is particularly important for stream services where each client can potentially be connected for a long time (if threads or subprocesses cannot be used). See :mod:`asyncore` for another way to manage this."
msgstr ""

msgid "Server Objects"
msgstr ""

msgid "This is the superclass of all Server objects in the module.  It defines the interface, given below, but does not implement most of the methods, which is done in subclasses."
msgstr ""

msgid "Return an integer file descriptor for the socket on which the server is listening.  This function is most commonly passed to :func:`select.select`, to allow monitoring multiple servers in the same process."
msgstr ""

msgid "Process a single request.  This function calls the following methods in order: :meth:`get_request`, :meth:`verify_request`, and :meth:`process_request`.  If the user-provided :meth:`handle` method of the handler class raises an exception, the server's :meth:`handle_error` method will be called.  If no request is received within :attr:`self.timeout` seconds, :meth:`handle_timeout` will be called and :meth:`handle_request` will return."
msgstr ""

msgid "Handle requests until an explicit :meth:`shutdown` request.  Polls for shutdown every *poll_interval* seconds."
msgstr ""

msgid "Tells the :meth:`serve_forever` loop to stop and waits until it does."
msgstr ""

msgid "The family of protocols to which the server's socket belongs. Common examples are :const:`socket.AF_INET` and :const:`socket.AF_UNIX`."
msgstr ""

msgid "The user-provided request handler class; an instance of this class is created for each request."
msgstr ""

msgid "The address on which the server is listening.  The format of addresses varies depending on the protocol family; see the documentation for the socket module for details.  For Internet protocols, this is a tuple containing a string giving the address, and an integer port number: ``('127.0.0.1', 80)``, for example."
msgstr ""

msgid "The socket object on which the server will listen for incoming requests."
msgstr ""

msgid "The server classes support the following class variables:"
msgstr ""

msgid "Whether the server will allow the reuse of an address. This defaults to :const:`False`, and can be set in subclasses to change the policy."
msgstr ""

msgid "The size of the request queue.  If it takes a long time to process a single request, any requests that arrive while the server is busy are placed into a queue, up to :attr:`request_queue_size` requests.  Once the queue is full, further requests from clients will get a \"Connection denied\" error.  The default value is usually 5, but this can be overridden by subclasses."
msgstr ""

msgid "The type of socket used by the server; :const:`socket.SOCK_STREAM` and :const:`socket.SOCK_DGRAM` are two common values."
msgstr ""

msgid "Timeout duration, measured in seconds, or :const:`None` if no timeout is desired.  If :meth:`handle_request` receives no incoming requests within the timeout period, the :meth:`handle_timeout` method is called."
msgstr ""

msgid "There are various server methods that can be overridden by subclasses of base server classes like :class:`TCPServer`; these methods aren't useful to external users of the server object."
msgstr ""

msgid "Actually processes the request by instantiating :attr:`RequestHandlerClass` and calling its :meth:`handle` method."
msgstr ""

msgid "Must accept a request from the socket, and return a 2-tuple containing the *new* socket object to be used to communicate with the client, and the client's address."
msgstr ""

msgid "This function is called if the :attr:`RequestHandlerClass`'s :meth:`handle` method raises an exception.  The default action is to print the traceback to standard output and continue handling further requests."
msgstr ""

msgid "This function is called when the :attr:`timeout` attribute has been set to a value other than :const:`None` and the timeout period has passed with no requests being received.  The default action for forking servers is to collect the status of any child processes that have exited, while in threading servers this method does nothing."
msgstr ""

msgid "Calls :meth:`finish_request` to create an instance of the :attr:`RequestHandlerClass`.  If desired, this function can create a new process or thread to handle the request; the :class:`ForkingMixIn` and :class:`ThreadingMixIn` classes do this."
msgstr ""

msgid "Called by the server's constructor to activate the server.  The default behavior just :meth:`listen`\\ s to the server's socket. May be overridden."
msgstr ""

msgid "Called by the server's constructor to bind the socket to the desired address. May be overridden."
msgstr ""

msgid "Must return a Boolean value; if the value is :const:`True`, the request will be processed, and if it's :const:`False`, the request will be denied. This function can be overridden to implement access controls for a server. The default implementation always returns :const:`True`."
msgstr ""

msgid "RequestHandler Objects"
msgstr ""

msgid "The request handler class must define a new :meth:`handle` method, and can override any of the following methods.  A new instance is created for each request."
msgstr ""

msgid "Called after the :meth:`handle` method to perform any clean-up actions required.  The default implementation does nothing.  If :meth:`setup` or :meth:`handle` raise an exception, this function will not be called."
msgstr ""

msgid "This function must do all the work required to service a request.  The default implementation does nothing.  Several instance attributes are available to it; the request is available as :attr:`self.request`; the client address as :attr:`self.client_address`; and the server instance as :attr:`self.server`, in case it needs access to per-server information."
msgstr ""

msgid "The type of :attr:`self.request` is different for datagram or stream services.  For stream services, :attr:`self.request` is a socket object; for datagram services, :attr:`self.request` is a pair of string and socket. However, this can be hidden by using the request handler subclasses :class:`StreamRequestHandler` or :class:`DatagramRequestHandler`, which override the :meth:`setup` and :meth:`finish` methods, and provide :attr:`self.rfile` and :attr:`self.wfile` attributes.  :attr:`self.rfile` and :attr:`self.wfile` can be read or written, respectively, to get the request data or return data to the client."
msgstr ""

msgid "Called before the :meth:`handle` method to perform any initialization actions required.  The default implementation does nothing."
msgstr ""

msgid ":class:`socketserver.TCPServer` Example"
msgstr ""

msgid "This is the server side::"
msgstr ""

msgid "import socketserver  class MyTCPHandler(socketserver.BaseRequestHandler):     \"\"\"     The RequestHandler class for our server.      It is instantiated once per connection to the server, and must     override the handle() method to implement communication to the     client.     \"\"\"      def handle(self):         # self.request is the TCP socket connected to the client         self.data = self.request.recv(1024).strip()         print(\"%s wrote:\" % self.client_address[0])         print(self.data)         # just send back the same data, but upper-cased         self.request.send(self.data.upper())  if __name__ == \"__main__\":     HOST, PORT = \"localhost\", 9999      # Create the server, binding to localhost on port 9999     server = socketserver.TCPServer((HOST, PORT), MyTCPHandler)      # Activate the server; this will keep running until you     # interrupt the program with Ctrl-C     server.serve_forever()"
msgstr ""

msgid "An alternative request handler class that makes use of streams (file-like objects that simplify communication by providing the standard file interface)::"
msgstr ""

msgid "class MyTCPHandler(socketserver.StreamRequestHandler):      def handle(self):         # self.rfile is a file-like object created by the handler;         # we can now use e.g. readline() instead of raw recv() calls         self.data = self.rfile.readline().strip()         print(\"%s wrote:\" % self.client_address[0])         print(self.data)         # Likewise, self.wfile is a file-like object used to write back         # to the client         self.wfile.write(self.data.upper())"
msgstr ""

msgid "The difference is that the ``readline()`` call in the second handler will call ``recv()`` multiple times until it encounters a newline character, while the single ``recv()`` call in the first handler will just return what has been sent from the client in one ``send()`` call."
msgstr ""

msgid "This is the client side::"
msgstr ""

msgid "import socket import sys  HOST, PORT = \"localhost\", 9999 data = \" \".join(sys.argv[1:])  # Create a socket (SOCK_STREAM means a TCP socket) sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  # Connect to server and send data sock.connect((HOST, PORT)) sock.send(bytes(data + \"\\n\",\"utf8\"))  # Receive data from the server and shut down received = sock.recv(1024) sock.close()  print(\"Sent:     %s\" % data) print(\"Received: %s\" % received)"
msgstr ""

msgid "The output of the example should look something like this:"
msgstr ""

msgid "Server::"
msgstr ""

msgid "$ python TCPServer.py 127.0.0.1 wrote: b'hello world with TCP' 127.0.0.1 wrote: b'python is nice'"
msgstr ""

msgid "Client::"
msgstr ""

msgid "$ python TCPClient.py hello world with TCP Sent:     hello world with TCP Received: b'HELLO WORLD WITH TCP' $ python TCPClient.py python is nice Sent:     python is nice Received: b'PYTHON IS NICE'"
msgstr ""

msgid ":class:`socketserver.UDPServer` Example"
msgstr ""

msgid "import socketserver  class MyUDPHandler(socketserver.BaseRequestHandler):     \"\"\"     This class works similar to the TCP handler class, except that     self.request consists of a pair of data and client socket, and since     there is no connection the client address must be given explicitly     when sending data back via sendto().     \"\"\"      def handle(self):         data = self.request[0].strip()         socket = self.request[1]         print(\"%s wrote:\" % self.client_address[0])         print(data)         socket.sendto(data.upper(), self.client_address)  if __name__ == \"__main__\":     HOST, PORT = \"localhost\", 9999     server = socketserver.UDPServer((HOST, PORT), MyUDPHandler)     server.serve_forever()"
msgstr ""

msgid "import socket import sys  HOST, PORT = \"localhost\", 9999 data = \" \".join(sys.argv[1:])  # SOCK_DGRAM is the socket type to use for UDP sockets sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  # As you can see, there is no connect() call; UDP has no connections. # Instead, data is directly sent to the recipient via sendto(). sock.sendto(bytes(data + \"\\n\",\"utf8\"), (HOST, PORT)) received = sock.recv(1024)  print(\"Sent:     %s\" % data) print(\"Received: %s\" % received)"
msgstr ""

msgid "The output of the example should look exactly like for the TCP server example."
msgstr ""

msgid "Asynchronous Mixins"
msgstr ""

msgid "To build asynchronous handlers, use the :class:`ThreadingMixIn` and :class:`ForkingMixIn` classes."
msgstr ""

msgid "An example for the :class:`ThreadingMixIn` class::"
msgstr ""

msgid "import socket import threading import socketserver  class ThreadedTCPRequestHandler(socketserver.BaseRequestHandler):      def handle(self):         data = self.request.recv(1024)         cur_thread = threading.current_thread()         response = bytes(\"%s: %s\" % (cur_thread.getName(), data),'ascii')         self.request.send(response)  class ThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):     pass  def client(ip, port, message):     sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)     sock.connect((ip, port))     sock.send(message)     response = sock.recv(1024)     print(\"Received: %s\" % response)     sock.close()  if __name__ == \"__main__\":     # Port 0 means to select an arbitrary unused port     HOST, PORT = \"localhost\", 0      server = ThreadedTCPServer((HOST, PORT), ThreadedTCPRequestHandler)     ip, port = server.server_address      # Start a thread with the server -- that thread will then start one     # more thread for each request     server_thread = threading.Thread(target=server.serve_forever)     # Exit the server thread when the main thread terminates     server_thread.setDaemon(True)     server_thread.start()     print(\"Server loop running in thread:\", server_thread.name)      client(ip, port, b\"Hello World 1\")     client(ip, port, b\"Hello World 2\")     client(ip, port, b\"Hello World 3\")      server.shutdown()"
msgstr ""

msgid "The output of the example should look something like this::"
msgstr ""

msgid "$ python ThreadedTCPServer.py Server loop running in thread: Thread-1 Received: b\"Thread-2: b'Hello World 1'\" Received: b\"Thread-3: b'Hello World 2'\" Received: b\"Thread-4: b'Hello World 3'\""
msgstr ""

msgid "The :class:`ForkingMixIn` class is used in the same way, except that the server will spawn a new process for each request."
msgstr ""

msgid "Optional Operating System Services"
msgstr ""

msgid "The modules described in this chapter provide interfaces to operating system features that are available on selected operating systems only. The interfaces are generally modeled after the Unix or C interfaces but they are available on some other systems as well (e.g. Windows).  Here's an overview:"
msgstr ""

msgid ":mod:`spwd` --- The shadow password database"
msgstr ""

msgid "This module provides access to the Unix shadow password database. It is available on various Unix versions."
msgstr ""

msgid "You must have enough privileges to access the shadow password database (this usually means you have to be root)."
msgstr ""

msgid "Shadow password database entries are reported as a tuple-like object, whose attributes correspond to the members of the ``spwd`` structure (Attribute field below, see ``<shadow.h>``):"
msgstr ""

msgid "``sp_nam``"
msgstr ""

msgid "``sp_pwd``"
msgstr ""

msgid "Encrypted password"
msgstr ""

msgid "``sp_lstchg``"
msgstr ""

msgid "Date of last change"
msgstr ""

msgid "``sp_min``"
msgstr ""

msgid "Minimal number of days between changes"
msgstr ""

msgid "``sp_max``"
msgstr ""

msgid "Maximum number of days between changes"
msgstr ""

msgid "``sp_warn``"
msgstr ""

msgid "Number of days before password expires to warn user about it"
msgstr ""

msgid "``sp_inact``"
msgstr ""

msgid "Number of days after password expires until account is blocked"
msgstr ""

msgid "7"
msgstr ""

msgid "``sp_expire``"
msgstr ""

msgid "Number of days since 1970-01-01 until account is disabled"
msgstr ""

msgid "``sp_flag``"
msgstr ""

msgid "Reserved"
msgstr ""

msgid "The sp_nam and sp_pwd items are strings, all others are integers. :exc:`KeyError` is raised if the entry asked for cannot be found."
msgstr ""

msgid "The following functions are defined:"
msgstr ""

msgid "Return the shadow password database entry for the given user name."
msgstr ""

msgid "Return a list of all available shadow password database entries, in arbitrary order."
msgstr ""

msgid "An interface to the normal password database, similar to this."
msgstr ""

msgid ":mod:`sqlite3` --- DB-API 2.0 interface for SQLite databases"
msgstr ""

msgid "SQLite is a C library that provides a lightweight disk-based database that doesn't require a separate server process and allows accessing the database using a nonstandard variant of the SQL query language. Some applications can use SQLite for internal data storage.  It's also possible to prototype an application using SQLite and then port the code to a larger database such as PostgreSQL or Oracle."
msgstr ""

msgid "sqlite3 was written by Gerhard Häring and provides a SQL interface compliant with the DB-API 2.0 specification described by :pep:`249`."
msgstr ""

msgid "To use the module, you must first create a :class:`Connection` object that represents the database.  Here the data will be stored in the :file:`/tmp/example` file::"
msgstr ""

msgid "conn = sqlite3.connect('/tmp/example')"
msgstr ""

msgid "You can also supply the special name ``:memory:`` to create a database in RAM."
msgstr ""

msgid "Once you have a :class:`Connection`, you can create a :class:`Cursor`  object and call its :meth:`~Cursor.execute` method to perform SQL commands::"
msgstr ""

msgid "c = conn.cursor()  # Create table c.execute('''create table stocks (date text, trans text, symbol text,  qty real, price real)''')  # Insert a row of data c.execute(\"\"\"insert into stocks           values ('2006-01-05','BUY','RHAT',100,35.14)\"\"\")  # Save (commit) the changes conn.commit()  # We can also close the cursor if we are done with it c.close()"
msgstr ""

msgid "Usually your SQL operations will need to use values from Python variables.  You shouldn't assemble your query using Python's string operations because doing so is insecure; it makes your program vulnerable to an SQL injection attack."
msgstr ""

msgid "Instead, use the DB-API's parameter substitution.  Put ``?`` as a placeholder wherever you want to use a value, and then provide a tuple of values as the second argument to the cursor's :meth:`~Cursor.execute` method.  (Other database modules may use a different placeholder, such as ``%s`` or ``:1``.) For example::"
msgstr ""

msgid "# Never do this -- insecure! symbol = 'IBM' c.execute(\"... where symbol = '%s'\" % symbol)  # Do this instead t = (symbol,) c.execute('select * from stocks where symbol=?', t)  # Larger example for t in [('2006-03-28', 'BUY', 'IBM', 1000, 45.00),           ('2006-04-05', 'BUY', 'MSOFT', 1000, 72.00),           ('2006-04-06', 'SELL', 'IBM', 500, 53.00),          ]:     c.execute('insert into stocks values (?,?,?,?,?)', t)"
msgstr ""

msgid "To retrieve data after executing a SELECT statement, you can either treat the cursor as an :term:`iterator`, call the cursor's :meth:`~Cursor.fetchone` method to retrieve a single matching row, or call :meth:`~Cursor.fetchall` to get a list of the matching rows."
msgstr ""

msgid "This example uses the iterator form::"
msgstr ""

msgid ">>> c = conn.cursor() >>> c.execute('select * from stocks order by price') >>> for row in c: ...     print(row) ... ('2006-01-05', 'BUY', 'RHAT', 100, 35.14) ('2006-03-28', 'BUY', 'IBM', 1000, 45.0) ('2006-04-06', 'SELL', 'IBM', 500, 53.0) ('2006-04-05', 'BUY', 'MSOFT', 1000, 72.0) >>>"
msgstr ""

msgid "The pysqlite web page -- sqlite3 is developed externally under the name \"pysqlite\"."
msgstr ""

msgid "The SQLite web page; the documentation describes the syntax and the available data types for the supported SQL dialect."
msgstr ""

msgid "PEP written by Marc-André Lemburg."
msgstr ""

msgid "Module functions and constants"
msgstr ""

msgid "This constant is meant to be used with the *detect_types* parameter of the :func:`connect` function."
msgstr ""

msgid "Setting it makes the :mod:`sqlite3` module parse the declared type for each column it returns.  It will parse out the first word of the declared type, i. e.  for \"integer primary key\", it will parse out \"integer\", or for \"number(10)\" it will parse out \"number\". Then for that column, it will look into the converters dictionary and use the converter function registered for that type there."
msgstr ""

msgid "Setting this makes the SQLite interface parse the column name for each column it returns.  It will look for a string formed [mytype] in there, and then decide that 'mytype' is the type of the column. It will try to find an entry of 'mytype' in the converters dictionary and then use the converter function found there to return the value. The column name found in :attr:`Cursor.description` is only the first word of the column name, i.  e. if you use something like ``'as \"x [datetime]\"'`` in your SQL, then we will parse out everything until the first blank for the column name: the column name would simply be \"x\"."
msgstr ""

msgid "Opens a connection to the SQLite database file *database*. You can use ``\":memory:\"`` to open a database connection to a database that resides in RAM instead of on disk."
msgstr ""

msgid "When a database is accessed by multiple connections, and one of the processes modifies the database, the SQLite database is locked until that transaction is committed. The *timeout* parameter specifies how long the connection should wait for the lock to go away until raising an exception. The default for the timeout parameter is 5.0 (five seconds)."
msgstr ""

msgid "For the *isolation_level* parameter, please see the :attr:`Connection.isolation_level` property of :class:`Connection` objects."
msgstr ""

msgid "SQLite natively supports only the types TEXT, INTEGER, FLOAT, BLOB and NULL. If you want to use other types you must add support for them yourself. The *detect_types* parameter and the using custom **converters** registered with the module-level :func:`register_converter` function allow you to easily do that."
msgstr ""

msgid "*detect_types* defaults to 0 (i. e. off, no type detection), you can set it to any combination of :const:`PARSE_DECLTYPES` and :const:`PARSE_COLNAMES` to turn type detection on."
msgstr ""

msgid "By default, the :mod:`sqlite3` module uses its :class:`Connection` class for the connect call.  You can, however, subclass the :class:`Connection` class and make :func:`connect` use your class instead by providing your class for the *factory* parameter."
msgstr ""

msgid "Consult the section :ref:`sqlite3-types` of this manual for details."
msgstr ""

msgid "The :mod:`sqlite3` module internally uses a statement cache to avoid SQL parsing overhead. If you want to explicitly set the number of statements that are cached for the connection, you can set the *cached_statements* parameter. The currently implemented default is to cache 100 statements."
msgstr ""

msgid "Registers a callable to convert a bytestring from the database into a custom Python type. The callable will be invoked for all database values that are of the type *typename*. Confer the parameter *detect_types* of the :func:`connect` function for how the type detection works. Note that the case of *typename* and the name of the type in your query must match!"
msgstr ""

msgid "Registers a callable to convert the custom Python type *type* into one of SQLite's supported types. The callable *callable* accepts as single parameter the Python value, and must return a value of the following types: int, float, str or bytes."
msgstr ""

msgid "Returns :const:`True` if the string *sql* contains one or more complete SQL statements terminated by semicolons. It does not verify that the SQL is syntactically correct, only that there are no unclosed string literals and the statement is terminated by a semicolon."
msgstr ""

msgid "This can be used to build a shell for SQLite, as in the following example:"
msgstr ""

msgid "# A minimal SQLite shell for experiments  import sqlite3  con = sqlite3.connect(\":memory:\") con.isolation_level = None cur = con.cursor()  buffer = \"\"  print(\"Enter your SQL commands to execute in sqlite3.\") print(\"Enter a blank line to exit.\")  while True:     line = input()     if line == \"\":         break     buffer += line     if sqlite3.complete_statement(buffer):         try:             buffer = buffer.strip()             cur.execute(buffer)              if buffer.lstrip().upper().startswith(\"SELECT\"):                 print(cur.fetchall())         except sqlite3.Error as e:             print(\"An error occurred:\", e.args[0])         buffer = \"\"  con.close()"
msgstr ""

msgid "By default you will not get any tracebacks in user-defined functions, aggregates, converters, authorizer callbacks etc. If you want to debug them, you can call this function with *flag* as True. Afterwards, you will get tracebacks from callbacks on ``sys.stderr``. Use :const:`False` to disable the feature again."
msgstr ""

msgid "A SQLite database connection has the following attributes and methods:"
msgstr ""

msgid "Get or set the current isolation level. :const:`None` for autocommit mode or one of \"DEFERRED\", \"IMMEDIATE\" or \"EXCLUSIVE\". See section :ref:`sqlite3-controlling-transactions` for a more detailed explanation."
msgstr ""

msgid ":const:`True` if a transaction is active (there are uncommitted changes), :const:`False` otherwise.  Read-only attribute."
msgstr ""

msgid "The cursor method accepts a single optional parameter *cursorClass*. If supplied, this must be a custom cursor class that extends :class:`sqlite3.Cursor`."
msgstr ""

msgid "This method commits the current transaction. If you don't call this method, anything you did since the last call to ``commit()`` is not visible from from other database connections. If you wonder why you don't see the data you've written to the database, please check you didn't forget to call this method."
msgstr ""

msgid "This method rolls back any changes to the database since the last call to :meth:`commit`."
msgstr ""

msgid "This closes the database connection. Note that this does not automatically call :meth:`commit`. If you just close your database connection without calling :meth:`commit` first, your changes will be lost!"
msgstr ""

msgid "This is a nonstandard shortcut that creates an intermediate cursor object by calling the cursor method, then calls the cursor's :meth:`execute<Cursor.execute>` method with the parameters given."
msgstr ""

msgid "This is a nonstandard shortcut that creates an intermediate cursor object by calling the cursor method, then calls the cursor's :meth:`executemany<Cursor.executemany>` method with the parameters given."
msgstr ""

msgid "This is a nonstandard shortcut that creates an intermediate cursor object by calling the cursor method, then calls the cursor's :meth:`executescript<Cursor.executescript>` method with the parameters given."
msgstr ""

msgid "Creates a user-defined function that you can later use from within SQL statements under the function name *name*. *num_params* is the number of parameters the function accepts, and *func* is a Python callable that is called as the SQL function."
msgstr ""

msgid "The function can return any of the types supported by SQLite: bytes, str, int, float and None."
msgstr ""

msgid "import sqlite3 import hashlib  def md5sum(t):     return hashlib.md5(t).hexdigest()  con = sqlite3.connect(\":memory:\") con.create_function(\"md5\", 1, md5sum) cur = con.cursor() cur.execute(\"select md5(?)\", (\"foo\",)) print(cur.fetchone()[0])"
msgstr ""

msgid "Creates a user-defined aggregate function."
msgstr ""

msgid "The aggregate class must implement a ``step`` method, which accepts the number of parameters *num_params*, and a ``finalize`` method which will return the final result of the aggregate."
msgstr ""

msgid "The ``finalize`` method can return any of the types supported by SQLite: bytes, str, int, float and None."
msgstr ""

msgid "import sqlite3  class MySum:     def __init__(self):         self.count = 0      def step(self, value):         self.count += value      def finalize(self):         return self.count  con = sqlite3.connect(\":memory:\") con.create_aggregate(\"mysum\", 1, MySum) cur = con.cursor() cur.execute(\"create table test(i)\") cur.execute(\"insert into test(i) values (1)\") cur.execute(\"insert into test(i) values (2)\") cur.execute(\"select mysum(i) from test\") print(cur.fetchone()[0])"
msgstr ""

msgid "Creates a collation with the specified *name* and *callable*. The callable will be passed two string arguments. It should return -1 if the first is ordered lower than the second, 0 if they are ordered equal and 1 if the first is ordered higher than the second.  Note that this controls sorting (ORDER BY in SQL) so your comparisons don't affect other SQL operations."
msgstr ""

msgid "Note that the callable will get its parameters as Python bytestrings, which will normally be encoded in UTF-8."
msgstr ""

msgid "The following example shows a custom collation that sorts \"the wrong way\":"
msgstr ""

msgid "import sqlite3  def collate_reverse(string1, string2):     if string1 == string2:         return 0     elif string1 < string2:         return 1     else:         return -1  con = sqlite3.connect(\":memory:\") con.create_collation(\"reverse\", collate_reverse)  cur = con.cursor() cur.execute(\"create table test(x)\") cur.executemany(\"insert into test(x) values (?)\", [(\"a\",), (\"b\",)]) cur.execute(\"select x from test order by x collate reverse\") for row in cur:     print(row) con.close()"
msgstr ""

msgid "To remove a collation, call ``create_collation`` with None as callable::"
msgstr ""

msgid "con.create_collation(\"reverse\", None)"
msgstr ""

msgid "You can call this method from a different thread to abort any queries that might be executing on the connection. The query will then abort and the caller will get an exception."
msgstr ""

msgid "This routine registers a callback. The callback is invoked for each attempt to access a column of a table in the database. The callback should return :const:`SQLITE_OK` if access is allowed, :const:`SQLITE_DENY` if the entire SQL statement should be aborted with an error and :const:`SQLITE_IGNORE` if the column should be treated as a NULL value. These constants are available in the :mod:`sqlite3` module."
msgstr ""

msgid "The first argument to the callback signifies what kind of operation is to be authorized. The second and third argument will be arguments or :const:`None` depending on the first argument. The 4th argument is the name of the database (\"main\", \"temp\", etc.) if applicable. The 5th argument is the name of the inner-most trigger or view that is responsible for the access attempt or :const:`None` if this access attempt is directly from input SQL code."
msgstr ""

msgid "Please consult the SQLite documentation about the possible values for the first argument and the meaning of the second and third argument depending on the first one. All necessary constants are available in the :mod:`sqlite3` module."
msgstr ""

msgid "This routine registers a callback. The callback is invoked for every *n* instructions of the SQLite virtual machine. This is useful if you want to get called from SQLite during long-running operations, for example to update a GUI."
msgstr ""

msgid "If you want to clear any previously installed progress handler, call the method with :const:`None` for *handler*."
msgstr ""

msgid "This routine allows/disallows the SQLite engine to load SQLite extensions from shared libraries.  SQLite extensions can define new functions, aggregates or whole new virtual table implementations. One well-known extension is the fulltext-search extension distributed with SQLite."
msgstr ""

msgid "import sqlite3  con = sqlite3.connect(\":memory:\")  # enable extension loading con.enable_load_extension(True)  # Load the fulltext search extension con.execute(\"select load_extension('./fts3.so')\")  # alternatively you can load the extension using an API call: # con.load_extension(\"./fts3.so\")  # disable extension laoding again con.enable_load_extension(False)  # example from SQLite wiki con.execute(\"create virtual table recipe using fts3(name, ingredients)\") con.executescript(\"\"\"     insert into recipe (name, ingredients) values ('broccoli stew', 'broccoli peppers cheese tomatoes');     insert into recipe (name, ingredients) values ('pumpkin stew', 'pumpkin onions garlic celery');     insert into recipe (name, ingredients) values ('broccoli pie', 'broccoli cheese onions flour');     insert into recipe (name, ingredients) values ('pumpkin pie', 'pumpkin sugar flour butter');     \"\"\") for row in con.execute(\"select rowid, name, ingredients from recipe where name match 'pie'\"):     print row"
msgstr ""

msgid "This routine loads a SQLite extension from a shared library. You have to enable extension loading with ``enable_load_extension`` before you can use this routine."
msgstr ""

msgid "You can change this attribute to a callable that accepts the cursor and the original row as a tuple and will return the real result row.  This way, you can implement more advanced ways of returning results, such  as returning an object that can also access columns by name."
msgstr ""

msgid "import sqlite3  def dict_factory(cursor, row):     d = {}     for idx, col in enumerate(cursor.description):         d[col[0]] = row[idx]     return d  con = sqlite3.connect(\":memory:\") con.row_factory = dict_factory cur = con.cursor() cur.execute(\"select 1 as a\") print(cur.fetchone()[\"a\"])"
msgstr ""

msgid "If returning a tuple doesn't suffice and you want name-based access to columns, you should consider setting :attr:`row_factory` to the highly-optimized :class:`sqlite3.Row` type. :class:`Row` provides both index-based and case-insensitive name-based access to columns with almost no memory overhead. It will probably be better than your own custom dictionary-based approach or even a db_row based solution."
msgstr ""

msgid "Using this attribute you can control what objects are returned for the ``TEXT`` data type. By default, this attribute is set to :class:`str` and the :mod:`sqlite3` module will return Unicode objects for ``TEXT``. If you want to return bytestrings instead, you can set it to :class:`bytes`."
msgstr ""

msgid "For efficiency reasons, there's also a way to return :class:`str` objects only for non-ASCII data, and :class:`bytes` otherwise. To activate it, set this attribute to :const:`sqlite3.OptimizedUnicode`."
msgstr ""

msgid "You can also set it to any other callable that accepts a single bytestring parameter and returns the resulting object."
msgstr ""

msgid "See the following example code for illustration:"
msgstr ""

msgid "import sqlite3  con = sqlite3.connect(\":memory:\") cur = con.cursor()  # Create the table con.execute(\"create table person(lastname, firstname)\")  AUSTRIA = \"\\xd6sterreich\"  # by default, rows are returned as Unicode cur.execute(\"select ?\", (AUSTRIA,)) row = cur.fetchone() assert row[0] == AUSTRIA  # but we can make sqlite3 always return bytestrings ... con.text_factory = str cur.execute(\"select ?\", (AUSTRIA,)) row = cur.fetchone() assert type(row[0]) == str # the bytestrings will be encoded in UTF-8, unless you stored garbage in the # database ... assert row[0] == AUSTRIA.encode(\"utf-8\")  # we can also implement a custom text_factory ... # here we implement one that will ignore Unicode characters that cannot be # decoded from UTF-8 con.text_factory = lambda x: str(x, \"utf-8\", \"ignore\") cur.execute(\"select ?\", (\"this is latin1 and would normally create errors\" +                          \"\\xe4\\xf6\\xfc\".encode(\"latin1\"),)) row = cur.fetchone() assert type(row[0]) == str  # sqlite3 offers a built-in optimized text_factory that will return bytestring # objects, if the data is in ASCII only, and otherwise return unicode objects con.text_factory = sqlite3.OptimizedUnicode cur.execute(\"select ?\", (AUSTRIA,)) row = cur.fetchone() assert type(row[0]) == str  cur.execute(\"select ?\", (\"Germany\",)) row = cur.fetchone() assert type(row[0]) == str"
msgstr ""

msgid "Returns the total number of database rows that have been modified, inserted, or deleted since the database connection was opened."
msgstr ""

msgid "Returns an iterator to dump the database in an SQL text format.  Useful when saving an in-memory database for later restoration.  This function provides the same capabilities as the :kbd:`.dump` command in the :program:`sqlite3` shell."
msgstr ""

msgid "# Convert file existing_db.db to SQL dump file dump.sql import sqlite3, os  con = sqlite3.connect('existing_db.db') with open('dump.sql', 'w') as f:     for line in con.iterdump():         f.write('%s\\n' % line)"
msgstr ""

msgid "Cursor Objects"
msgstr ""

msgid "A :class:`Cursor` instance has the following attributes and methods:"
msgstr ""

msgid "A SQLite database cursor has the following attributes and methods:"
msgstr ""

msgid "Executes an SQL statement. The SQL statement may be parametrized (i. e. placeholders instead of SQL literals). The :mod:`sqlite3` module supports two kinds of placeholders: question marks (qmark style) and named placeholders (named style)."
msgstr ""

msgid "This example shows how to use parameters with qmark style:"
msgstr ""

msgid "import sqlite3  con = sqlite3.connect(\"mydb\")  cur = con.cursor()  who = \"Yeltsin\" age = 72  cur.execute(\"select name_last, age from people where name_last=? and age=?\", (who, age)) print(cur.fetchone())"
msgstr ""

msgid "This example shows how to use the named style:"
msgstr ""

msgid "import sqlite3  con = sqlite3.connect(\"mydb\")  cur = con.cursor()  who = \"Yeltsin\" age = 72  cur.execute(\"select name_last, age from people where name_last=:who and age=:age\",     {\"who\": who, \"age\": age}) print(cur.fetchone())"
msgstr ""

msgid ":meth:`execute` will only execute a single SQL statement. If you try to execute more than one statement with it, it will raise a Warning. Use :meth:`executescript` if you want to execute multiple SQL statements with one call."
msgstr ""

msgid "Executes an SQL command against all parameter sequences or mappings found in the sequence *sql*.  The :mod:`sqlite3` module also allows using an :term:`iterator` yielding parameters instead of a sequence."
msgstr ""

msgid "import sqlite3  class IterChars:     def __init__(self):         self.count = ord('a')      def __iter__(self):         return self      def __next__(self):         if self.count > ord('z'):             raise StopIteration         self.count += 1         return (chr(self.count - 1),) # this is a 1-tuple  con = sqlite3.connect(\":memory:\") cur = con.cursor() cur.execute(\"create table characters(c)\")  theIter = IterChars() cur.executemany(\"insert into characters(c) values (?)\", theIter)  cur.execute(\"select c from characters\") print(cur.fetchall())"
msgstr ""

msgid "Here's a shorter example using a :term:`generator`:"
msgstr ""

msgid "import sqlite3  def char_generator():     import string     for c in string.letters[:26]:         yield (c,)  con = sqlite3.connect(\":memory:\") cur = con.cursor() cur.execute(\"create table characters(c)\")  cur.executemany(\"insert into characters(c) values (?)\", char_generator())  cur.execute(\"select c from characters\") print(cur.fetchall())"
msgstr ""

msgid "This is a nonstandard convenience method for executing multiple SQL statements at once. It issues a ``COMMIT`` statement first, then executes the SQL script it gets as a parameter."
msgstr ""

msgid "*sql_script* can be an instance of :class:`str` or :class:`bytes`."
msgstr ""

msgid "import sqlite3  con = sqlite3.connect(\":memory:\") cur = con.cursor() cur.executescript(\"\"\"     create table person(         firstname,         lastname,         age     );      create table book(         title,         author,         published     );      insert into book(title, author, published)     values (         'Dirk Gently''s Holistic Detective Agency',         'Douglas Adams',         1987     );     \"\"\")"
msgstr ""

msgid "Fetches the next row of a query result set, returning a single sequence, or :const:`None` when no more data is available."
msgstr ""

msgid "Fetches the next set of rows of a query result, returning a list.  An empty list is returned when no more rows are available."
msgstr ""

msgid "The number of rows to fetch per call is specified by the *size* parameter. If it is not given, the cursor's arraysize determines the number of rows to be fetched. The method should try to fetch as many rows as indicated by the size parameter. If this is not possible due to the specified number of rows not being available, fewer rows may be returned."
msgstr ""

msgid "Note there are performance considerations involved with the *size* parameter. For optimal performance, it is usually best to use the arraysize attribute. If the *size* parameter is used, then it is best for it to retain the same value from one :meth:`fetchmany` call to the next."
msgstr ""

msgid "Fetches all (remaining) rows of a query result, returning a list.  Note that the cursor's arraysize attribute can affect the performance of this operation. An empty list is returned when no rows are available."
msgstr ""

msgid "Although the :class:`Cursor` class of the :mod:`sqlite3` module implements this attribute, the database engine's own support for the determination of \"rows affected\"/\"rows selected\" is quirky."
msgstr ""

msgid "For ``DELETE`` statements, SQLite reports :attr:`rowcount` as 0 if you make a ``DELETE FROM table`` without any condition."
msgstr ""

msgid "For :meth:`executemany` statements, the number of modifications are summed up into :attr:`rowcount`."
msgstr ""

msgid "As required by the Python DB API Spec, the :attr:`rowcount` attribute \"is -1 in case no ``executeXX()`` has been performed on the cursor or the rowcount of the last operation is not determinable by the interface\"."
msgstr ""

msgid "This includes ``SELECT`` statements because we cannot determine the number of rows a query produced until all rows were fetched."
msgstr ""

msgid "This read-only attribute provides the rowid of the last modified row. It is only set if you issued a ``INSERT`` statement using the :meth:`execute` method. For operations other than ``INSERT`` or when :meth:`executemany` is called, :attr:`lastrowid` is set to :const:`None`."
msgstr ""

msgid "This read-only attribute provides the column names of the last query. To remain compatible with the Python DB API, it returns a 7-tuple for each column where the last six items of each tuple are :const:`None`."
msgstr ""

msgid "It is set for ``SELECT`` statements without any matching rows as well."
msgstr ""

msgid "Row Objects"
msgstr ""

msgid "A :class:`Row` instance serves as a highly optimized :attr:`~Connection.row_factory` for :class:`Connection` objects. It tries to mimic a tuple in most of its features."
msgstr ""

msgid "It supports mapping access by column name and index, iteration, representation, equality testing and :func:`len`."
msgstr ""

msgid "If two :class:`Row` objects have exactly the same columns and their members are equal, they compare equal."
msgstr ""

msgid "This method returns a tuple of column names. Immediately after a query, it is the first member of each tuple in :attr:`Cursor.description`."
msgstr ""

msgid "Let's assume we initialize a table as in the example given above::"
msgstr ""

msgid "conn = sqlite3.connect(\":memory:\") c = conn.cursor() c.execute('''create table stocks (date text, trans text, symbol text,  qty real, price real)''') c.execute(\"\"\"insert into stocks           values ('2006-01-05','BUY','RHAT',100,35.14)\"\"\") conn.commit() c.close()"
msgstr ""

msgid "Now we plug :class:`Row` in::"
msgstr ""

msgid ">>> conn.row_factory = sqlite3.Row >>> c = conn.cursor() >>> c.execute('select * from stocks') <sqlite3.Cursor object at 0x7f4e7dd8fa80> >>> r = c.fetchone() >>> type(r) <class 'sqlite3.Row'> >>> tuple(r) ('2006-01-05', 'BUY', 'RHAT', 100.0, 35.14) >>> len(r) 5 >>> r[2] 'RHAT' >>> r.keys() ['date', 'trans', 'symbol', 'qty', 'price'] >>> r['qty'] 100.0 >>> for member in r: ...     print(member) ... 2006-01-05 BUY RHAT 100.0 35.14"
msgstr ""

msgid "SQLite and Python types"
msgstr ""

msgid "SQLite natively supports the following types: ``NULL``, ``INTEGER``, ``REAL``, ``TEXT``, ``BLOB``."
msgstr ""

msgid "The following Python types can thus be sent to SQLite without any problem:"
msgstr ""

msgid "SQLite type"
msgstr ""

msgid ":const:`None`"
msgstr ""

msgid "``NULL``"
msgstr ""

msgid ":class:`int`"
msgstr ""

msgid "``INTEGER``"
msgstr ""

msgid ":class:`float`"
msgstr ""

msgid "``REAL``"
msgstr ""

msgid ":class:`str`"
msgstr ""

msgid "``TEXT``"
msgstr ""

msgid ":class:`bytes`"
msgstr ""

msgid "``BLOB``"
msgstr ""

msgid "This is how SQLite types are converted to Python types by default:"
msgstr ""

msgid "depends on text_factory, str by default"
msgstr ""

msgid "The type system of the :mod:`sqlite3` module is extensible in two ways: you can store additional Python types in a SQLite database via object adaptation, and you can let the :mod:`sqlite3` module convert SQLite types to different Python types via converters."
msgstr ""

msgid "Using adapters to store additional Python types in SQLite databases"
msgstr ""

msgid "As described before, SQLite supports only a limited set of types natively. To use other Python types with SQLite, you must **adapt** them to one of the sqlite3 module's supported types for SQLite: one of NoneType, int, float, str, bytes."
msgstr ""

msgid "The :mod:`sqlite3` module uses Python object adaptation, as described in :pep:`246` for this.  The protocol to use is :class:`PrepareProtocol`."
msgstr ""

msgid "There are two ways to enable the :mod:`sqlite3` module to adapt a custom Python type to one of the supported ones."
msgstr ""

msgid "Letting your object adapt itself"
msgstr ""

msgid "This is a good approach if you write the class yourself. Let's suppose you have a class like this::"
msgstr ""

msgid "class Point(object):     def __init__(self, x, y):         self.x, self.y = x, y"
msgstr ""

msgid "Now you want to store the point in a single SQLite column.  First you'll have to choose one of the supported types first to be used for representing the point. Let's just use str and separate the coordinates using a semicolon. Then you need to give your class a method ``__conform__(self, protocol)`` which must return the converted value. The parameter *protocol* will be :class:`PrepareProtocol`."
msgstr ""

msgid "import sqlite3  class Point(object):     def __init__(self, x, y):         self.x, self.y = x, y      def __conform__(self, protocol):         if protocol is sqlite3.PrepareProtocol:             return \"%f;%f\" % (self.x, self.y)  con = sqlite3.connect(\":memory:\") cur = con.cursor()  p = Point(4.0, -3.2) cur.execute(\"select ?\", (p,)) print(cur.fetchone()[0])"
msgstr ""

msgid "Registering an adapter callable"
msgstr ""

msgid "The other possibility is to create a function that converts the type to the string representation and register the function with :meth:`register_adapter`."
msgstr ""

msgid "import sqlite3  class Point(object):     def __init__(self, x, y):         self.x, self.y = x, y  def adapt_point(point):     return \"%f;%f\" % (point.x, point.y)  sqlite3.register_adapter(Point, adapt_point)  con = sqlite3.connect(\":memory:\") cur = con.cursor()  p = Point(4.0, -3.2) cur.execute(\"select ?\", (p,)) print(cur.fetchone()[0])"
msgstr ""

msgid "The :mod:`sqlite3` module has two default adapters for Python's built-in :class:`datetime.date` and :class:`datetime.datetime` types.  Now let's suppose we want to store :class:`datetime.datetime` objects not in ISO representation, but as a Unix timestamp."
msgstr ""

msgid "import sqlite3 import datetime, time  def adapt_datetime(ts):     return time.mktime(ts.timetuple())  sqlite3.register_adapter(datetime.datetime, adapt_datetime)  con = sqlite3.connect(\":memory:\") cur = con.cursor()  now = datetime.datetime.now() cur.execute(\"select ?\", (now,)) print(cur.fetchone()[0])"
msgstr ""

msgid "Converting SQLite values to custom Python types"
msgstr ""

msgid "Writing an adapter lets you send custom Python types to SQLite. But to make it really useful we need to make the Python to SQLite to Python roundtrip work."
msgstr ""

msgid "Enter converters."
msgstr ""

msgid "Let's go back to the :class:`Point` class. We stored the x and y coordinates separated via semicolons as strings in SQLite."
msgstr ""

msgid "First, we'll define a converter function that accepts the string as a parameter and constructs a :class:`Point` object from it."
msgstr ""

msgid "Converter functions **always** get called with a string, no matter under which data type you sent the value to SQLite."
msgstr ""

msgid "def convert_point(s):     x, y = map(float, s.split(\";\"))     return Point(x, y)"
msgstr ""

msgid "Now you need to make the :mod:`sqlite3` module know that what you select from the database is actually a point. There are two ways of doing this:"
msgstr ""

msgid "Implicitly via the declared type"
msgstr ""

msgid "Explicitly via the column name"
msgstr ""

msgid "Both ways are described in section :ref:`sqlite3-module-contents`, in the entries for the constants :const:`PARSE_DECLTYPES` and :const:`PARSE_COLNAMES`."
msgstr ""

msgid "The following example illustrates both approaches."
msgstr ""

msgid "import sqlite3  class Point(object):     def __init__(self, x, y):         self.x, self.y = x, y      def __repr__(self):         return \"(%f;%f)\" % (self.x, self.y)  def adapt_point(point):     return \"%f;%f\" % (point.x, point.y)  def convert_point(s):     x, y = list(map(float, s.split(\";\")))     return Point(x, y)  # Register the adapter sqlite3.register_adapter(Point, adapt_point)  # Register the converter sqlite3.register_converter(\"point\", convert_point)  p = Point(4.0, -3.2)  ######################### # 1) Using declared types con = sqlite3.connect(\":memory:\", detect_types=sqlite3.PARSE_DECLTYPES) cur = con.cursor() cur.execute(\"create table test(p point)\")  cur.execute(\"insert into test(p) values (?)\", (p,)) cur.execute(\"select p from test\") print(\"with declared types:\", cur.fetchone()[0]) cur.close() con.close()  ####################### # 1) Using column names con = sqlite3.connect(\":memory:\", detect_types=sqlite3.PARSE_COLNAMES) cur = con.cursor() cur.execute(\"create table test(p)\")  cur.execute(\"insert into test(p) values (?)\", (p,)) cur.execute('select p as \"p [point]\" from test') print(\"with column names:\", cur.fetchone()[0]) cur.close() con.close()"
msgstr ""

msgid "Default adapters and converters"
msgstr ""

msgid "There are default adapters for the date and datetime types in the datetime module. They will be sent as ISO dates/ISO timestamps to SQLite."
msgstr ""

msgid "The default converters are registered under the name \"date\" for :class:`datetime.date` and under the name \"timestamp\" for :class:`datetime.datetime`."
msgstr ""

msgid "This way, you can use date/timestamps from Python without any additional fiddling in most cases. The format of the adapters is also compatible with the experimental SQLite date/time functions."
msgstr ""

msgid "The following example demonstrates this."
msgstr ""

msgid "import sqlite3 import datetime  con = sqlite3.connect(\":memory:\", detect_types=sqlite3.PARSE_DECLTYPES|sqlite3.PARSE_COLNAMES) cur = con.cursor() cur.execute(\"create table test(d date, ts timestamp)\")  today = datetime.date.today() now = datetime.datetime.now()  cur.execute(\"insert into test(d, ts) values (?, ?)\", (today, now)) cur.execute(\"select d, ts from test\") row = cur.fetchone() print(today, \"=>\", row[0], type(row[0])) print(now, \"=>\", row[1], type(row[1]))  cur.execute('select current_date as \"d [date]\", current_timestamp as \"ts [timestamp]\"') row = cur.fetchone() print(\"current_date\", row[0], type(row[0])) print(\"current_timestamp\", row[1], type(row[1]))"
msgstr ""

msgid "Controlling Transactions"
msgstr ""

msgid "By default, the :mod:`sqlite3` module opens transactions implicitly before a Data Modification Language (DML)  statement (i.e. ``INSERT``/``UPDATE``/``DELETE``/``REPLACE``), and commits transactions implicitly before a non-DML, non-query statement (i. e. anything other than ``SELECT`` or the aforementioned)."
msgstr ""

msgid "So if you are within a transaction and issue a command like ``CREATE TABLE ...``, ``VACUUM``, ``PRAGMA``, the :mod:`sqlite3` module will commit implicitly before executing that command. There are two reasons for doing that. The first is that some of these commands don't work within transactions. The other reason is that sqlite3 needs to keep track of the transaction state (if a transaction is active or not).  The current transaction state is exposed through the :attr:`Connection.in_transaction` attribute of the connection object."
msgstr ""

msgid "You can control which kind of ``BEGIN`` statements sqlite3 implicitly executes (or none at all) via the *isolation_level* parameter to the :func:`connect` call, or via the :attr:`isolation_level` property of connections."
msgstr ""

msgid "If you want **autocommit mode**, then set :attr:`isolation_level` to None."
msgstr ""

msgid "Otherwise leave it at its default, which will result in a plain \"BEGIN\" statement, or set it to one of SQLite's supported isolation levels: \"DEFERRED\", \"IMMEDIATE\" or \"EXCLUSIVE\"."
msgstr ""

msgid "Using :mod:`sqlite3` efficiently"
msgstr ""

msgid "Using shortcut methods"
msgstr ""

msgid "Using the nonstandard :meth:`execute`, :meth:`executemany` and :meth:`executescript` methods of the :class:`Connection` object, your code can be written more concisely because you don't have to create the (often superfluous) :class:`Cursor` objects explicitly. Instead, the :class:`Cursor` objects are created implicitly and these shortcut methods return the cursor objects. This way, you can execute a ``SELECT`` statement and iterate over it directly using only a single call on the :class:`Connection` object."
msgstr ""

msgid "import sqlite3  persons = [     (\"Hugo\", \"Boss\"),     (\"Calvin\", \"Klein\")     ]  con = sqlite3.connect(\":memory:\")  # Create the table con.execute(\"create table person(firstname, lastname)\")  # Fill the table con.executemany(\"insert into person(firstname, lastname) values (?, ?)\", persons)  # Print the table contents for row in con.execute(\"select firstname, lastname from person\"):     print(row)  # Using a dummy WHERE clause to not let SQLite take the shortcut table deletes. print(\"I just deleted\", con.execute(\"delete from person where 1=1\").rowcount, \"rows\")"
msgstr ""

msgid "Accessing columns by name instead of by index"
msgstr ""

msgid "One useful feature of the :mod:`sqlite3` module is the built-in :class:`sqlite3.Row` class designed to be used as a row factory."
msgstr ""

msgid "Rows wrapped with this class can be accessed both by index (like tuples) and case-insensitively by name:"
msgstr ""

msgid "import sqlite3  con = sqlite3.connect(\"mydb\") con.row_factory = sqlite3.Row  cur = con.cursor() cur.execute(\"select name_last, age from people\") for row in cur:     assert row[0] == row[\"name_last\"]     assert row[\"name_last\"] == row[\"nAmE_lAsT\"]     assert row[1] == row[\"age\"]     assert row[1] == row[\"AgE\"]"
msgstr ""

msgid "Using the connection as a context manager"
msgstr ""

msgid "Connection objects can be used as context managers that automatically commit or rollback transactions.  In the event of an exception, the transaction is rolled back; otherwise, the transaction is committed:"
msgstr ""

msgid "import sqlite3  con = sqlite3.connect(\":memory:\") con.execute(\"create table person (id integer primary key, firstname varchar unique)\")  # Successful, con.commit() is called automatically afterwards with con:     con.execute(\"insert into person(firstname) values (?)\", (\"Joe\",))  # con.rollback() is called after the with block finishes with an exception, the # exception is still raised and must be catched try:     with con:         con.execute(\"insert into person(firstname) values (?)\", (\"Joe\",)) except sqlite3.IntegrityError:     print(\"couldn't add Joe twice\")"
msgstr ""

msgid ":mod:`ssl` --- SSL wrapper for socket objects"
msgstr ""

msgid "This module provides access to Transport Layer Security (often known as \"Secure Sockets Layer\") encryption and peer authentication facilities for network sockets, both client-side and server-side.  This module uses the OpenSSL library. It is available on all modern Unix systems, Windows, Mac OS X, and probably additional platforms, as long as OpenSSL is installed on that platform."
msgstr ""

msgid "Some behavior may be platform dependent, since calls are made to the operating system socket APIs.  The installed version of OpenSSL may also cause variations in behavior."
msgstr ""

msgid "This section documents the objects and functions in the ``ssl`` module; for more general information about TLS, SSL, and certificates, the reader is referred to the documents in the \"See Also\" section at the bottom."
msgstr ""

msgid "This module provides a class, :class:`ssl.SSLSocket`, which is derived from the :class:`socket.socket` type, and provides a socket-like wrapper that also encrypts and decrypts the data going over the socket with SSL.  It supports additional :meth:`read` and :meth:`write` methods, along with a method, :meth:`getpeercert`, to retrieve the certificate of the other side of the connection, and a method, :meth:`cipher`, to retrieve the cipher being used for the secure connection."
msgstr ""

msgid "For more sophisticated applications, the :class:`ssl.SSLContext` class helps manage settings and certificates, which can then be inherited by SSL sockets created through the :meth:`SSLContext.wrap_socket` method."
msgstr ""

msgid "Functions, Constants, and Exceptions"
msgstr ""

msgid "Raised to signal an error from the underlying SSL implementation.  This signifies some problem in the higher-level encryption and authentication layer that's superimposed on the underlying network connection.  This error is a subtype of :exc:`socket.error`, which in turn is a subtype of :exc:`IOError`."
msgstr ""

msgid "Takes an instance ``sock`` of :class:`socket.socket`, and returns an instance of :class:`ssl.SSLSocket`, a subtype of :class:`socket.socket`, which wraps the underlying socket in an SSL context.  For client-side sockets, the context construction is lazy; if the underlying socket isn't connected yet, the context construction will be performed after :meth:`connect` is called on the socket.  For server-side sockets, if the socket has no remote peer, it is assumed to be a listening socket, and the server-side SSL wrapping is automatically performed on client connections accepted via the :meth:`accept` method.  :func:`wrap_socket` may raise :exc:`SSLError`."
msgstr ""

msgid "The ``keyfile`` and ``certfile`` parameters specify optional files which contain a certificate to be used to identify the local side of the connection.  See the discussion of :ref:`ssl-certificates` for more information on how the certificate is stored in the ``certfile``."
msgstr ""

msgid "The parameter ``server_side`` is a boolean which identifies whether server-side or client-side behavior is desired from this socket."
msgstr ""

msgid "The parameter ``cert_reqs`` specifies whether a certificate is required from the other side of the connection, and whether it will be validated if provided.  It must be one of the three values :const:`CERT_NONE` (certificates ignored), :const:`CERT_OPTIONAL` (not required, but validated if provided), or :const:`CERT_REQUIRED` (required and validated).  If the value of this parameter is not :const:`CERT_NONE`, then the ``ca_certs`` parameter must point to a file of CA certificates."
msgstr ""

msgid "The ``ca_certs`` file contains a set of concatenated \"certification authority\" certificates, which are used to validate certificates passed from the other end of the connection.  See the discussion of :ref:`ssl-certificates` for more information about how to arrange the certificates in this file."
msgstr ""

msgid "The parameter ``ssl_version`` specifies which version of the SSL protocol to use.  Typically, the server chooses a particular protocol version, and the client must adapt to the server's choice.  Most of the versions are not interoperable with the other versions.  If not specified, for client-side operation, the default SSL version is SSLv3; for server-side operation, SSLv23.  These version selections provide the most compatibility with other versions."
msgstr ""

msgid "Here's a table showing which versions in a client (down the side) can connect to which versions in a server (along the top):"
msgstr ""

msgid "*client* / **server**"
msgstr ""

msgid "**SSLv2**"
msgstr ""

msgid "**SSLv3**"
msgstr ""

msgid "**SSLv23**"
msgstr ""

msgid "**TLSv1**"
msgstr ""

msgid "*SSLv2*"
msgstr ""

msgid "yes"
msgstr ""

msgid "no"
msgstr ""

msgid "*SSLv3*"
msgstr ""

msgid "*SSLv23*"
msgstr ""

msgid "*TLSv1*"
msgstr ""

msgid "Which connections succeed will vary depending on the version of OpenSSL.  For instance, in some older versions of OpenSSL (such as 0.9.7l on OS X 10.4), an SSLv2 client could not connect to an SSLv23 server.  Another example: beginning with OpenSSL 1.0.0, an SSLv23 client will not actually attempt SSLv2 connections unless you explicitly enable SSLv2 ciphers; for example, you might specify ``\"ALL\"`` or ``\"SSLv2\"`` as the *ciphers* parameter to enable them."
msgstr ""

msgid "The *ciphers* parameter sets the available ciphers for this SSL object. It should be a string in the `OpenSSL cipher list format <http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT>`_."
msgstr ""

msgid "The parameter ``do_handshake_on_connect`` specifies whether to do the SSL handshake automatically after doing a :meth:`socket.connect`, or whether the application program will call it explicitly, by invoking the :meth:`SSLSocket.do_handshake` method.  Calling :meth:`SSLSocket.do_handshake` explicitly gives the program control over the blocking behavior of the socket I/O involved in the handshake."
msgstr ""

msgid "The parameter ``suppress_ragged_eofs`` specifies how the :meth:`SSLSocket.read` method should signal unexpected EOF from the other end of the connection.  If specified as :const:`True` (the default), it returns a normal EOF in response to unexpected EOF errors raised from the underlying socket; if :const:`False`, it will raise the exceptions back to the caller."
msgstr ""

msgid "Returns True if the SSL pseudo-random number generator has been seeded with 'enough' randomness, and False otherwise.  You can use :func:`ssl.RAND_egd` and :func:`ssl.RAND_add` to increase the randomness of the pseudo-random number generator."
msgstr ""

msgid "If you are running an entropy-gathering daemon (EGD) somewhere, and ``path`` is the pathname of a socket connection open to it, this will read 256 bytes of randomness from the socket, and add it to the SSL pseudo-random number generator to increase the security of generated secret keys.  This is typically only necessary on systems without better sources of randomness."
msgstr ""

msgid "See http://egd.sourceforge.net/ or http://prngd.sourceforge.net/ for sources of entropy-gathering daemons."
msgstr ""

msgid "Mixes the given ``bytes`` into the SSL pseudo-random number generator.  The parameter ``entropy`` (a float) is a lower bound on the entropy contained in string (so you can always use :const:`0.0`).  See :rfc:`1750` for more information on sources of entropy."
msgstr ""

msgid "Returns a floating-point value containing a normal seconds-after-the-epoch time value, given the time-string representing the \"notBefore\" or \"notAfter\" date from a certificate."
msgstr ""

msgid ">>> import ssl >>> ssl.cert_time_to_seconds(\"May  9 00:00:00 2007 GMT\") 1178694000.0 >>> import time >>> time.ctime(ssl.cert_time_to_seconds(\"May  9 00:00:00 2007 GMT\")) 'Wed May  9 00:00:00 2007' >>>"
msgstr ""

msgid "Given the address ``addr`` of an SSL-protected server, as a (*hostname*, *port-number*) pair, fetches the server's certificate, and returns it as a PEM-encoded string.  If ``ssl_version`` is specified, uses that version of the SSL protocol to attempt to connect to the server.  If ``ca_certs`` is specified, it should be a file containing a list of root certificates, the same format as used for the same parameter in :func:`wrap_socket`.  The call will attempt to validate the server certificate against that set of root certificates, and will fail if the validation attempt fails."
msgstr ""

msgid "Given a certificate as a DER-encoded blob of bytes, returns a PEM-encoded string version of the same certificate."
msgstr ""

msgid "Given a certificate as an ASCII PEM string, returns a DER-encoded sequence of bytes for that same certificate."
msgstr ""

msgid "Possible value for :attr:`SSLContext.verify_mode`, or the ``cert_reqs`` parameter to :func:`wrap_socket`.  In this mode (the default), no certificates will be required from the other side of the socket connection. If a certificate is received from the other end, no attempt to validate it is made."
msgstr ""

msgid "See the discussion of :ref:`ssl-security` below."
msgstr ""

msgid "Possible value for :attr:`SSLContext.verify_mode`, or the ``cert_reqs`` parameter to :func:`wrap_socket`.  In this mode no certificates will be required from the other side of the socket connection; but if they are provided, validation will be attempted and an :class:`SSLError` will be raised on failure."
msgstr ""

msgid "Use of this setting requires a valid set of CA certificates to be passed, either to :meth:`SSLContext.load_verify_locations` or as a value of the ``ca_certs`` parameter to :func:`wrap_socket`."
msgstr ""

msgid "Possible value for :attr:`SSLContext.verify_mode`, or the ``cert_reqs`` parameter to :func:`wrap_socket`.  In this mode, certificates are required from the other side of the socket connection; an :class:`SSLError` will be raised if no certificate is provided, or if its validation fails."
msgstr ""

msgid "Selects SSL version 2 as the channel encryption protocol."
msgstr ""

msgid "SSL version 2 is insecure.  Its use is highly discouraged."
msgstr ""

msgid "Selects SSL version 2 or 3 as the channel encryption protocol.  This is a setting to use with servers for maximum compatibility with the other end of an SSL connection, but it may cause the specific ciphers chosen for the encryption to be of fairly low quality."
msgstr ""

msgid "Selects SSL version 3 as the channel encryption protocol.  For clients, this is the maximally compatible SSL variant."
msgstr ""

msgid "Selects TLS version 1 as the channel encryption protocol.  This is the most modern version, and probably the best choice for maximum protection, if both sides can speak it."
msgstr ""

msgid "Enables workarounds for various bugs present in other SSL implementations. This option is set by default."
msgstr ""

msgid "Prevents an SSLv2 connection.  This option is only applicable in conjunction with :const:`PROTOCOL_SSLv23`.  It prevents the peers from choosing SSLv2 as the protocol version."
msgstr ""

msgid "Prevents an SSLv3 connection.  This option is only applicable in conjunction with :const:`PROTOCOL_SSLv23`.  It prevents the peers from choosing SSLv3 as the protocol version."
msgstr ""

msgid "Prevents a TLSv1 connection.  This option is only applicable in conjunction with :const:`PROTOCOL_SSLv23`.  It prevents the peers from choosing TLSv1 as the protocol version."
msgstr ""

msgid "The version string of the OpenSSL library loaded by the interpreter::"
msgstr ""

msgid ">>> ssl.OPENSSL_VERSION 'OpenSSL 0.9.8k 25 Mar 2009'"
msgstr ""

msgid "A tuple of five integers representing version information about the OpenSSL library::"
msgstr ""

msgid ">>> ssl.OPENSSL_VERSION_INFO (0, 9, 8, 11, 15)"
msgstr ""

msgid "The raw version number of the OpenSSL library, as a single integer::"
msgstr ""

msgid ">>> ssl.OPENSSL_VERSION_NUMBER 9470143 >>> hex(ssl.OPENSSL_VERSION_NUMBER) '0x9080bf'"
msgstr ""

msgid "SSL Sockets"
msgstr ""

msgid "Reads up to ``nbytes`` bytes from the SSL-encrypted channel and returns them. If the ``buffer`` is specified, it will attempt to read into the buffer the minimum of the size of the buffer and ``nbytes``, if that is specified.  If no buffer is specified, an immutable buffer is allocated and returned with the data read from the socket."
msgstr ""

msgid "Writes the ``data`` to the other side of the connection, using the SSL channel to encrypt.  Returns the number of bytes written."
msgstr ""

msgid "Performs the SSL setup handshake.  If the socket is non-blocking, this method may raise :exc:`SSLError` with the value of the exception instance's ``args[0]`` being either :const:`SSL_ERROR_WANT_READ` or :const:`SSL_ERROR_WANT_WRITE`, and should be called again until it stops raising those exceptions.  Here's an example of how to do that::"
msgstr ""

msgid "while True:     try:         sock.do_handshake()         break     except ssl.SSLError as err:         if err.args[0] == ssl.SSL_ERROR_WANT_READ:             select.select([sock], [], [])         elif err.args[0] == ssl.SSL_ERROR_WANT_WRITE:             select.select([], [sock], [])         else:             raise"
msgstr ""

msgid "If there is no certificate for the peer on the other end of the connection, returns ``None``."
msgstr ""

msgid "If the parameter ``binary_form`` is :const:`False`, and a certificate was received from the peer, this method returns a :class:`dict` instance.  If the certificate was not validated, the dict is empty.  If the certificate was validated, it returns a dict with the keys ``subject`` (the principal for which the certificate was issued), and ``notAfter`` (the time after which the certificate should not be trusted).  The certificate was already validated, so the ``notBefore`` and ``issuer`` fields are not returned.  If a certificate contains an instance of the *Subject Alternative Name* extension (see :rfc:`3280`), there will also be a ``subjectAltName`` key in the dictionary."
msgstr ""

msgid "The \"subject\" field is a tuple containing the sequence of relative distinguished names (RDNs) given in the certificate's data structure for the principal, and each RDN is a sequence of name-value pairs::"
msgstr ""

msgid "{'notAfter': 'Feb 16 16:54:50 2013 GMT',  'subject': ((('countryName', 'US'),),              (('stateOrProvinceName', 'Delaware'),),              (('localityName', 'Wilmington'),),              (('organizationName', 'Python Software Foundation'),),              (('organizationalUnitName', 'SSL'),),              (('commonName', 'somemachine.python.org'),))}"
msgstr ""

msgid "If the ``binary_form`` parameter is :const:`True`, and a certificate was provided, this method returns the DER-encoded form of the entire certificate as a sequence of bytes, or :const:`None` if the peer did not provide a certificate.  This return value is independent of validation; if validation was required (:const:`CERT_OPTIONAL` or :const:`CERT_REQUIRED`), it will have been validated, but if :const:`CERT_NONE` was used to establish the connection, the certificate, if present, will not have been validated."
msgstr ""

msgid "Returns a three-value tuple containing the name of the cipher being used, the version of the SSL protocol that defines its use, and the number of secret bits being used.  If no connection has been established, returns ``None``."
msgstr ""

msgid "Performs the SSL shutdown handshake, which removes the TLS layer from the underlying socket, and returns the underlying socket object.  This can be used to go from encrypted operation over a connection to unencrypted.  The returned socket should always be used for further communication with the other side of the connection, rather than the original socket."
msgstr ""

msgid "The :class:`SSLContext` object this SSL socket is tied to.  If the SSL socket was created using the top-level :func:`wrap_socket` function (rather than :meth:`SSLContext.wrap_socket`), this is a custom context object created for this SSL socket."
msgstr ""

msgid "SSL Contexts"
msgstr ""

msgid "An object holding various data longer-lived than single SSL connections, such as SSL configuration options, certificate(s) and private key(s). You must pass *protocol* which must be one of the ``PROTOCOL_*`` constants defined in this module.  :data:`PROTOCOL_SSLv23` is recommended for maximum interoperability."
msgstr ""

msgid ":class:`SSLContext` objects have the following methods and attributes:"
msgstr ""

msgid "Load a private key and the corresponding certificate.  The *certfile* string must be the path to a single file in PEM format containing the certificate as well as any number of CA certificates needed to establish the certificate's authenticity.  The *keyfile* string, if present, must point to a file containing the private key in.  Otherwise the private key will be taken from *certfile* as well.  See the discussion of :ref:`ssl-certificates` for more information on how the certificate is stored in the *certfile*."
msgstr ""

msgid "An :class:`SSLError` is raised if the private key doesn't match with the certificate."
msgstr ""

msgid "Load a set of \"certification authority\" (CA) certificates used to validate other peers' certificates when :data:`verify_mode` is other than :data:`CERT_NONE`.  At least one of *cafile* or *capath* must be specified."
msgstr ""

msgid "The *cafile* string, if present, is the path to a file of concatenated CA certificates in PEM format. See the discussion of :ref:`ssl-certificates` for more information about how to arrange the certificates in this file."
msgstr ""

msgid "The *capath* string, if present, is the path to a directory containing several CA certificates in PEM format, following an `OpenSSL specific layout <http://www.openssl.org/docs/ssl/SSL_CTX_load_verify_locations.html>`_."
msgstr ""

msgid "Set the available ciphers for sockets created with this context. It should be a string in the `OpenSSL cipher list format <http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT>`_. If no cipher can be selected (because compile-time options or other configuration forbids use of all the specified ciphers), an :class:`SSLError` will be raised."
msgstr ""

msgid "when connected, the :meth:`SSLSocket.cipher` method of SSL sockets will give the currently selected cipher."
msgstr ""

msgid "Wrap an existing Python socket *sock* and return an :class:`SSLSocket` object.  The SSL socket is tied to the context, its settings and certificates.  The parameters *server_side*, *do_handshake_on_connect* and *suppress_ragged_eofs* have the same meaning as in the top-level :func:`wrap_socket` function."
msgstr ""

msgid "An integer representing the set of SSL options enabled on this context. The default value is :data:`OP_ALL`, but you can specify other options such as :data:`OP_NO_SSLv2` by ORing them together."
msgstr ""

msgid "With versions of OpenSSL older than 0.9.8m, it is only possible to set options, not to clear them.  Attempting to clear an option (by resetting the corresponding bits) will raise a ``ValueError``."
msgstr ""

msgid "The protocol version chosen when constructing the context.  This attribute is read-only."
msgstr ""

msgid "Whether to try to verify other peers' certificates and how to behave if verification fails.  This attribute must be one of :data:`CERT_NONE`, :data:`CERT_OPTIONAL` or :data:`CERT_REQUIRED`."
msgstr ""

msgid "Certificates"
msgstr ""

msgid "Certificates in general are part of a public-key / private-key system.  In this system, each *principal*, (which may be a machine, or a person, or an organization) is assigned a unique two-part encryption key.  One part of the key is public, and is called the *public key*; the other part is kept secret, and is called the *private key*.  The two parts are related, in that if you encrypt a message with one of the parts, you can decrypt it with the other part, and **only** with the other part."
msgstr ""

msgid "A certificate contains information about two principals.  It contains the name of a *subject*, and the subject's public key.  It also contains a statement by a second principal, the *issuer*, that the subject is who he claims to be, and that this is indeed the subject's public key.  The issuer's statement is signed with the issuer's private key, which only the issuer knows.  However, anyone can verify the issuer's statement by finding the issuer's public key, decrypting the statement with it, and comparing it to the other information in the certificate. The certificate also contains information about the time period over which it is valid.  This is expressed as two fields, called \"notBefore\" and \"notAfter\"."
msgstr ""

msgid "In the Python use of certificates, a client or server can use a certificate to prove who they are.  The other side of a network connection can also be required to produce a certificate, and that certificate can be validated to the satisfaction of the client or server that requires such validation.  The connection attempt can be set to raise an exception if the validation fails. Validation is done automatically, by the underlying OpenSSL framework; the application need not concern itself with its mechanics.  But the application does usually need to provide sets of certificates to allow this process to take place."
msgstr ""

msgid "Python uses files to contain certificates.  They should be formatted as \"PEM\" (see :rfc:`1422`), which is a base-64 encoded form wrapped with a header line and a footer line::"
msgstr ""

msgid "-----BEGIN CERTIFICATE----- ... (certificate in base64 PEM encoding) ... -----END CERTIFICATE-----"
msgstr ""

msgid "Certificate chains"
msgstr ""

msgid "The Python files which contain certificates can contain a sequence of certificates, sometimes called a *certificate chain*.  This chain should start with the specific certificate for the principal who \"is\" the client or server, and then the certificate for the issuer of that certificate, and then the certificate for the issuer of *that* certificate, and so on up the chain till you get to a certificate which is *self-signed*, that is, a certificate which has the same subject and issuer, sometimes called a *root certificate*.  The certificates should just be concatenated together in the certificate file.  For example, suppose we had a three certificate chain, from our server certificate to the certificate of the certification authority that signed our server certificate, to the root certificate of the agency which issued the certification authority's certificate::"
msgstr ""

msgid "-----BEGIN CERTIFICATE----- ... (certificate for your server)... -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- ... (the certificate for the CA)... -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- ... (the root certificate for the CA's issuer)... -----END CERTIFICATE-----"
msgstr ""

msgid "CA certificates"
msgstr ""

msgid "If you are going to require validation of the other side of the connection's certificate, you need to provide a \"CA certs\" file, filled with the certificate chains for each issuer you are willing to trust.  Again, this file just contains these chains concatenated together.  For validation, Python will use the first chain it finds in the file which matches.  Some \"standard\" root certificates are available from various certification authorities: `CACert.org <http://www.cacert.org/index.php?id=3>`_, `Thawte <http://www.thawte.com/roots/>`_, `Verisign <http://www.verisign.com/support/roots.html>`_, `Positive SSL <http://www.PositiveSSL.com/ssl-certificate-support/cert_installation/UTN-USERFirst-Hardware.crt>`_ (used by python.org), `Equifax and GeoTrust <http://www.geotrust.com/resources/root_certificates/index.asp>`_."
msgstr ""

msgid "In general, if you are using SSL3 or TLS1, you don't need to put the full chain in your \"CA certs\" file; you only need the root certificates, and the remote peer is supposed to furnish the other certificates necessary to chain from its certificate to a root certificate.  See :rfc:`4158` for more discussion of the way in which certification chains can be built."
msgstr ""

msgid "Combined key and certificate"
msgstr ""

msgid "Often the private key is stored in the same file as the certificate; in this case, only the ``certfile`` parameter to :meth:`SSLContext.load_cert_chain` and :func:`wrap_socket` needs to be passed.  If the private key is stored with the certificate, it should come before the first certificate in the certificate chain::"
msgstr ""

msgid "-----BEGIN RSA PRIVATE KEY----- ... (private key in base64 encoding) ... -----END RSA PRIVATE KEY----- -----BEGIN CERTIFICATE----- ... (certificate in base64 PEM encoding) ... -----END CERTIFICATE-----"
msgstr ""

msgid "Self-signed certificates"
msgstr ""

msgid "If you are going to create a server that provides SSL-encrypted connection services, you will need to acquire a certificate for that service.  There are many ways of acquiring appropriate certificates, such as buying one from a certification authority.  Another common practice is to generate a self-signed certificate.  The simplest way to do this is with the OpenSSL package, using something like the following::"
msgstr ""

msgid "% openssl req -new -x509 -days 365 -nodes -out cert.pem -keyout cert.pem Generating a 1024 bit RSA private key .......++++++ .............................++++++ writing new private key to 'cert.pem' ----- You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [AU]:US State or Province Name (full name) [Some-State]:MyState Locality Name (eg, city) []:Some City Organization Name (eg, company) [Internet Widgits Pty Ltd]:My Organization, Inc. Organizational Unit Name (eg, section) []:My Group Common Name (eg, YOUR name) []:myserver.mygroup.myorganization.com Email Address []:ops@myserver.mygroup.myorganization.com %"
msgstr ""

msgid "The disadvantage of a self-signed certificate is that it is its own root certificate, and no one else will have it in their cache of known (and trusted) root certificates."
msgstr ""

msgid "Testing for SSL support"
msgstr ""

msgid "To test for the presence of SSL support in a Python installation, user code should use the following idiom::"
msgstr ""

msgid "try:    import ssl except ImportError:    pass else:    [ do something that requires SSL support ]"
msgstr ""

msgid "Client-side operation"
msgstr ""

msgid "This example connects to an SSL server, prints the server's address and certificate, sends some bytes, and reads part of the response::"
msgstr ""

msgid "import socket, ssl, pprint  s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  # require a certificate from the server ssl_sock = ssl.wrap_socket(s,                            ca_certs=\"/etc/ca_certs_file\",                            cert_reqs=ssl.CERT_REQUIRED)  ssl_sock.connect(('www.verisign.com', 443))  print(repr(ssl_sock.getpeername())) pprint.pprint(ssl_sock.getpeercert()) print(pprint.pformat(ssl_sock.getpeercert()))  # Set a simple HTTP request -- use http.client in actual code. ssl_sock.write(b\"GET / HTTP/1.0\\r\\nHost: www.verisign.com\\r\\n\\r\\n\")  # Read a chunk of data.  Will not necessarily # read all the data returned by the server. data = ssl_sock.read()  # note that closing the SSLSocket will also close the underlying socket ssl_sock.close()"
msgstr ""

msgid "As of September 6, 2007, the certificate printed by this program looked like this::"
msgstr ""

msgid "{'notAfter': 'May  8 23:59:59 2009 GMT',  'subject': ((('serialNumber', '2497886'),),              (('1.3.6.1.4.1.311.60.2.1.3', 'US'),),              (('1.3.6.1.4.1.311.60.2.1.2', 'Delaware'),),              (('countryName', 'US'),),              (('postalCode', '94043'),),              (('stateOrProvinceName', 'California'),),              (('localityName', 'Mountain View'),),              (('streetAddress', '487 East Middlefield Road'),),              (('organizationName', 'VeriSign, Inc.'),),              (('organizationalUnitName',                'Production Security Services'),),              (('organizationalUnitName',                'Terms of use at www.verisign.com/rpa (c)06'),),              (('commonName', 'www.verisign.com'),))}"
msgstr ""

msgid "which is a fairly poorly-formed ``subject`` field."
msgstr ""

msgid "This other example first creates an SSL context, instructs it to verify certificates sent by peers, and feeds it a set of recognized certificate authorities (CA)::"
msgstr ""

msgid ">>> context = ssl.SSLContext(ssl.PROTOCOL_SSLv23) >>> context.verify_mode = ssl.CERT_OPTIONAL >>> context.load_verify_locations(\"/etc/ssl/certs/ca-bundle.crt\")"
msgstr ""

msgid "(it is assumed your operating system places a bundle of all CA certificates in ``/etc/ssl/certs/ca-bundle.crt``; if not, you'll get an error and have to adjust the location)"
msgstr ""

msgid "When you use the context to connect to a server, :const:`CERT_OPTIONAL` validates the server certificate: it ensures that the server certificate was signed with one of the CA certificates, and checks the signature for correctness::"
msgstr ""

msgid ">>> conn = context.wrap_socket(socket.socket(socket.AF_INET)) >>> conn.connect((\"linuxfr.org\", 443))"
msgstr ""

msgid "You should then fetch the certificate and check its fields for conformity. Here, the ``commonName`` field in the ``subject`` matches the desired HTTPS host ``linuxfr.org``::"
msgstr ""

msgid ">>> pprint.pprint(conn.getpeercert()) {'notAfter': 'Jun 26 21:41:46 2011 GMT',  'subject': ((('commonName', 'linuxfr.org'),),),  'subjectAltName': (('DNS', 'linuxfr.org'), ('othername', '<unsupported>'))}"
msgstr ""

msgid "Now that you are assured of its authenticity, you can proceed to talk with the server::"
msgstr ""

msgid ">>> conn.write(b\"HEAD / HTTP/1.0\\r\\nHost: linuxfr.org\\r\\n\\r\\n\") 38 >>> pprint.pprint(conn.read().split(b\"\\r\\n\")) [b'HTTP/1.1 302 Found',  b'Date: Sun, 16 May 2010 13:43:28 GMT',  b'Server: Apache/2.2',  b'Location: https://linuxfr.org/pub/',  b'Vary: Accept-Encoding',  b'Connection: close',  b'Content-Type: text/html; charset=iso-8859-1',  b'',  b'']"
msgstr ""

msgid "Server-side operation"
msgstr ""

msgid "For server operation, typically you'll need to have a server certificate, and private key, each in a file.  You'll first create a context holding the key and the certificate, so that clients can check your authenticity.  Then you'll open a socket, bind it to a port, call :meth:`listen` on it, and start waiting for clients to connect::"
msgstr ""

msgid "import socket, ssl  context = ssl.SSLContext(ssl.PROTOCOL_TLSv1) context.load_cert_chain(certfile=\"mycertfile\", keyfile=\"mykeyfile\")  bindsocket = socket.socket() bindsocket.bind(('myaddr.mydomain.com', 10023)) bindsocket.listen(5)"
msgstr ""

msgid "When a client connects, you'll call :meth:`accept` on the socket to get the new socket from the other end, and use the context's :meth:`SSLContext.wrap_socket` method to create a server-side SSL socket for the connection::"
msgstr ""

msgid "while True:    newsocket, fromaddr = bindsocket.accept()    connstream = context.wrap_socket(newsocket, server_side=True)    try:       deal_with_client(connstream)    finally:       connstream.close()"
msgstr ""

msgid "Then you'll read data from the ``connstream`` and do something with it till you are finished with the client (or the client is finished with you)::"
msgstr ""

msgid "def deal_with_client(connstream):    data = connstream.read()    # empty data means the client is finished with us    while data:       if not do_something(connstream, data):          # we'll assume do_something returns False          # when we're finished with client          break       data = connstream.read()    # finished with client"
msgstr ""

msgid "And go back to listening for new client connections (of course, a real server would probably handle each client connection in a separate thread, or put the sockets in non-blocking mode and use an event loop)."
msgstr ""

msgid "Security considerations"
msgstr ""

msgid "Verifying certificates"
msgstr ""

msgid ":const:`CERT_NONE` is the default.  Since it does not authenticate the other peer, it can be insecure, especially in client mode where most of time you would like to ensure the authenticity of the server you're talking to. Therefore, when in client mode, it is highly recommended to use :const:`CERT_REQUIRED`.  However, it is in itself not sufficient; you also have to check that the server certificate (obtained with :meth:`SSLSocket.getpeercert`) matches the desired service.  The exact way of doing so depends on the higher-level protocol used; for example, with HTTPS, you'll check that the host name in the URL matches either the ``commonName`` field in the ``subjectName``, or one of the ``DNS`` fields in the ``subjectAltName``."
msgstr ""

msgid "In server mode, if you want to authenticate your clients using the SSL layer (rather than using a higher-level authentication mechanism), you'll also have to specify :const:`CERT_REQUIRED` and similarly check the client certificate."
msgstr ""

msgid "In client mode, :const:`CERT_OPTIONAL` and :const:`CERT_REQUIRED` are equivalent unless anonymous ciphers are enabled (they are disabled by default)."
msgstr ""

msgid "Protocol versions"
msgstr ""

msgid "SSL version 2 is considered insecure and is therefore dangerous to use.  If you want maximum compatibility between clients and servers, it is recommended to use :const:`PROTOCOL_SSLv23` as the protocol version and then disable SSLv2 explicitly using the :data:`SSLContext.options` attribute::"
msgstr ""

msgid "context = ssl.SSLContext(ssl.PROTOCOL_SSLv23) context.options |= ssl.OP_NO_SSLv2"
msgstr ""

msgid "The SSL context created above will allow SSLv3 and TLSv1 connections, but not SSLv2."
msgstr ""

msgid "Documentation of underlying :mod:`socket` class"
msgstr ""

msgid "Frederick J. Hirsch"
msgstr ""

msgid "Steve Kent"
msgstr ""

msgid "D. Eastlake et. al."
msgstr ""

msgid "Housley et. al."
msgstr ""

msgid ":mod:`stat` --- Interpreting :func:`stat` results"
msgstr ""

msgid "The :mod:`stat` module defines constants and functions for interpreting the results of :func:`os.stat`, :func:`os.fstat` and :func:`os.lstat` (if they exist).  For complete details about the :cfunc:`stat`, :cfunc:`fstat` and :cfunc:`lstat` calls, consult the documentation for your system."
msgstr ""

msgid "The :mod:`stat` module defines the following functions to test for specific file types:"
msgstr ""

msgid "Return non-zero if the mode is from a directory."
msgstr ""

msgid "Return non-zero if the mode is from a character special device file."
msgstr ""

msgid "Return non-zero if the mode is from a block special device file."
msgstr ""

msgid "Return non-zero if the mode is from a regular file."
msgstr ""

msgid "Return non-zero if the mode is from a FIFO (named pipe)."
msgstr ""

msgid "Return non-zero if the mode is from a symbolic link."
msgstr ""

msgid "Return non-zero if the mode is from a socket."
msgstr ""

msgid "Two additional functions are defined for more general manipulation of the file's mode:"
msgstr ""

msgid "Return the portion of the file's mode that can be set by :func:`os.chmod`\\ ---that is, the file's permission bits, plus the sticky bit, set-group-id, and set-user-id bits (on systems that support them)."
msgstr ""

msgid "Return the portion of the file's mode that describes the file type (used by the :func:`S_IS\\*` functions above)."
msgstr ""

msgid "Normally, you would use the :func:`os.path.is\\*` functions for testing the type of a file; the functions here are useful when you are doing multiple tests of the same file and wish to avoid the overhead of the :cfunc:`stat` system call for each test.  These are also useful when checking for information about a file that isn't handled by :mod:`os.path`, like the tests for block and character devices."
msgstr ""

msgid "All the variables below are simply symbolic indexes into the 10-tuple returned by :func:`os.stat`, :func:`os.fstat` or :func:`os.lstat`."
msgstr ""

msgid "Inode protection mode."
msgstr ""

msgid "Inode number."
msgstr ""

msgid "Device inode resides on."
msgstr ""

msgid "Number of links to the inode."
msgstr ""

msgid "User id of the owner."
msgstr ""

msgid "Group id of the owner."
msgstr ""

msgid "Size in bytes of a plain file; amount of data waiting on some special files."
msgstr ""

msgid "Time of last access."
msgstr ""

msgid "Time of last modification."
msgstr ""

msgid "The \"ctime\" as reported by the operating system.  On some systems (like Unix) is the time of the last metadata change, and, on others (like Windows), is the creation time (see platform documentation for details)."
msgstr ""

msgid "The interpretation of \"file size\" changes according to the file type.  For plain files this is the size of the file in bytes.  For FIFOs and sockets under most flavors of Unix (including Linux in particular), the \"size\" is the number of bytes waiting to be read at the time of the call to :func:`os.stat`, :func:`os.fstat`, or :func:`os.lstat`; this can sometimes be useful, especially for polling one of these special files after a non-blocking open.  The meaning of the size field for other character and block devices varies more, depending on the implementation of the underlying system call."
msgstr ""

msgid "The variables below define the flags used in the :data:`ST_MODE` field."
msgstr ""

msgid "Use of the functions above is more portable than use of the first set of flags:"
msgstr ""

msgid "Bit mask for the file type bit fields."
msgstr ""

msgid "Socket."
msgstr ""

msgid "Symbolic link."
msgstr ""

msgid "Regular file."
msgstr ""

msgid "Block device."
msgstr ""

msgid "Directory."
msgstr ""

msgid "Character device."
msgstr ""

msgid "FIFO."
msgstr ""

msgid "The following flags can also be used in the *mode* argument of :func:`os.chmod`:"
msgstr ""

msgid "Set UID bit."
msgstr ""

msgid "Set-group-ID bit.  This bit has several special uses.  For a directory it indicates that BSD semantics is to be used for that directory: files created there inherit their group ID from the directory, not from the effective group ID of the creating process, and directories created there will also get the :data:`S_ISGID` bit set.  For a file that does not have the group execution bit (:data:`S_IXGRP`) set, the set-group-ID bit indicates mandatory file/record locking (see also :data:`S_ENFMT`)."
msgstr ""

msgid "Sticky bit.  When this bit is set on a directory it means that a file in that directory can be renamed or deleted only by the owner of the file, by the owner of the directory, or by a privileged process."
msgstr ""

msgid "Mask for file owner permissions."
msgstr ""

msgid "Owner has read permission."
msgstr ""

msgid "Owner has write permission."
msgstr ""

msgid "Owner has execute permission."
msgstr ""

msgid "Mask for group permissions."
msgstr ""

msgid "Group has read permission."
msgstr ""

msgid "Group has write permission."
msgstr ""

msgid "Group has execute permission."
msgstr ""

msgid "Mask for permissions for others (not in group)."
msgstr ""

msgid "Others have read permission."
msgstr ""

msgid "Others have write permission."
msgstr ""

msgid "Others have execute permission."
msgstr ""

msgid "System V file locking enforcement.  This flag is shared with :data:`S_ISGID`: file/record locking is enforced on files that do not have the group execution bit (:data:`S_IXGRP`) set."
msgstr ""

msgid "Unix V7 synonym for :data:`S_IRUSR`."
msgstr ""

msgid "Unix V7 synonym for :data:`S_IWUSR`."
msgstr ""

msgid "Unix V7 synonym for :data:`S_IXUSR`."
msgstr ""

msgid "import os, sys from stat import *  def walktree(top, callback):     '''recursively descend the directory tree rooted at top,        calling the callback function for each regular file'''      for f in os.listdir(top):         pathname = os.path.join(top, f)         mode = os.stat(pathname)[ST_MODE]         if S_ISDIR(mode):             # It's a directory, recurse into it             walktree(pathname, callback)         elif S_ISREG(mode):             # It's a file, call the callback function             callback(pathname)         else:             # Unknown file type, print a message             print('Skipping %s' % pathname)  def visitfile(file):     print('visiting', file)  if __name__ == '__main__':     walktree(sys.argv[1], visitfile)"
msgstr ""

msgid "Built-in Types"
msgstr ""

msgid "The following sections describe the standard types that are built into the interpreter."
msgstr ""

msgid "The principal built-in types are numerics, sequences, mappings, classes, instances and exceptions."
msgstr ""

msgid "Some operations are supported by several object types; in particular, practically all objects can be compared, tested for truth value, and converted to a string (with the :func:`repr` function or the slightly different :func:`str` function).  The latter function is implicitly used when an object is written by the :func:`print` function."
msgstr ""

msgid "Truth Value Testing"
msgstr ""

msgid "Any object can be tested for truth value, for use in an :keyword:`if` or :keyword:`while` condition or as operand of the Boolean operations below. The following values are considered false:"
msgstr ""

msgid "``False``"
msgstr ""

msgid "zero of any numeric type, for example, ``0``, ``0.0``, ``0j``."
msgstr ""

msgid "any empty sequence, for example, ``''``, ``()``, ``[]``."
msgstr ""

msgid "any empty mapping, for example, ``{}``."
msgstr ""

msgid "instances of user-defined classes, if the class defines a :meth:`__bool__` or :meth:`__len__` method, when that method returns the integer zero or :class:`bool` value ``False``. [#]_"
msgstr ""

msgid "All other values are considered true --- so objects of many types are always true."
msgstr ""

msgid "Operations and built-in functions that have a Boolean result always return ``0`` or ``False`` for false and ``1`` or ``True`` for true, unless otherwise stated. (Important exception: the Boolean operations ``or`` and ``and`` always return one of their operands.)"
msgstr ""

msgid "Boolean Operations --- :keyword:`and`, :keyword:`or`, :keyword:`not`"
msgstr ""

msgid "These are the Boolean operations, ordered by ascending priority:"
msgstr ""

msgid "``x or y``"
msgstr ""

msgid "if *x* is false, then *y*, else *x*"
msgstr ""

msgid "``x and y``"
msgstr ""

msgid "if *x* is false, then *x*, else *y*"
msgstr ""

msgid "``not x``"
msgstr ""

msgid "if *x* is false, then ``True``, else ``False``"
msgstr ""

msgid "This is a short-circuit operator, so it only evaluates the second argument if the first one is :const:`False`."
msgstr ""

msgid "This is a short-circuit operator, so it only evaluates the second argument if the first one is :const:`True`."
msgstr ""

msgid "``not`` has a lower priority than non-Boolean operators, so ``not a == b`` is interpreted as ``not (a == b)``, and ``a == not b`` is a syntax error."
msgstr ""

msgid "Comparisons"
msgstr ""

msgid "There are eight comparison operations in Python.  They all have the same priority (which is higher than that of the Boolean operations).  Comparisons can be chained arbitrarily; for example, ``x < y <= z`` is equivalent to ``x < y and y <= z``, except that *y* is evaluated only once (but in both cases *z* is not evaluated at all when ``x < y`` is found to be false)."
msgstr ""

msgid "This table summarizes the comparison operations:"
msgstr ""

msgid "``<``"
msgstr ""

msgid "strictly less than"
msgstr ""

msgid "``<=``"
msgstr ""

msgid "less than or equal"
msgstr ""

msgid "``>``"
msgstr ""

msgid "strictly greater than"
msgstr ""

msgid "``>=``"
msgstr ""

msgid "greater than or equal"
msgstr ""

msgid "``==``"
msgstr ""

msgid "equal"
msgstr ""

msgid "``!=``"
msgstr ""

msgid "not equal"
msgstr ""

msgid "``is``"
msgstr ""

msgid "object identity"
msgstr ""

msgid "``is not``"
msgstr ""

msgid "negated object identity"
msgstr ""

msgid "Objects of different types, except different numeric types, never compare equal. Furthermore, some types (for example, function objects) support only a degenerate notion of comparison where any two objects of that type are unequal.  The ``<``, ``<=``, ``>`` and ``>=`` operators will raise a :exc:`TypeError` exception when comparing a complex number with another built-in numeric type, when the objects are of different types that cannot be compared, or in other cases where there is no defined ordering."
msgstr ""

msgid "Non-identical instances of a class normally compare as non-equal unless the class defines the :meth:`__eq__` method."
msgstr ""

msgid "Instances of a class cannot be ordered with respect to other instances of the same class, or other types of object, unless the class defines enough of the methods :meth:`__lt__`, :meth:`__le__`, :meth:`__gt__`, and :meth:`__ge__` (in general, :meth:`__lt__` and :meth:`__eq__` are sufficient, if you want the conventional meanings of the comparison operators)."
msgstr ""

msgid "The behavior of the :keyword:`is` and :keyword:`is not` operators cannot be customized; also they can be applied to any two objects and never raise an exception."
msgstr ""

msgid "Two more operations with the same syntactic priority, ``in`` and ``not in``, are supported only by sequence types (below)."
msgstr ""

msgid "Numeric Types --- :class:`int`, :class:`float`, :class:`complex`"
msgstr ""

msgid "There are three distinct numeric types: :dfn:`integers`, :dfn:`floating point numbers`, and :dfn:`complex numbers`.  In addition, Booleans are a subtype of integers.  Integers have unlimited precision.  Floating point numbers are implemented using :ctype:`double` in C---all bets on their precision are off unless you happen to know the machine you are working with. Complex numbers have a real and imaginary part, which are each implemented using :ctype:`double` in C.  To extract these parts from a complex number *z*, use ``z.real`` and ``z.imag``. (The standard library includes additional numeric types, :mod:`fractions` that hold rationals, and :mod:`decimal` that hold floating-point numbers with user-definable precision.)"
msgstr ""

msgid "Numbers are created by numeric literals or as the result of built-in functions and operators.  Unadorned integer literals (including hex, octal and binary numbers) yield integers.  Numeric literals containing a decimal point or an exponent sign yield floating point numbers.  Appending ``'j'`` or ``'J'`` to a numeric literal yields an imaginary number (a complex number with a zero real part) which you can add to an integer or float to get a complex number with real and imaginary parts."
msgstr ""

msgid "Python fully supports mixed arithmetic: when a binary arithmetic operator has operands of different numeric types, the operand with the \"narrower\" type is widened to that of the other, where integer is narrower than floating point, which is narrower than complex.  Comparisons between numbers of mixed type use the same rule. [#]_ The constructors :func:`int`, :func:`float`, and :func:`complex` can be used to produce numbers of a specific type."
msgstr ""

msgid "All numeric types (except complex) support the following operations, sorted by ascending priority (operations in the same box have the same priority; all numeric operations have a higher priority than comparison operations):"
msgstr ""

msgid "Full documentation"
msgstr ""

msgid "``x + y``"
msgstr ""

msgid "sum of *x* and *y*"
msgstr ""

msgid "``x - y``"
msgstr ""

msgid "difference of *x* and *y*"
msgstr ""

msgid "``x * y``"
msgstr ""

msgid "product of *x* and *y*"
msgstr ""

msgid "``x / y``"
msgstr ""

msgid "quotient of *x* and *y*"
msgstr ""

msgid "``x // y``"
msgstr ""

msgid "floored quotient of *x* and *y*"
msgstr ""

msgid "``x % y``"
msgstr ""

msgid "remainder of ``x / y``"
msgstr ""

msgid "``-x``"
msgstr ""

msgid "*x* negated"
msgstr ""

msgid "``+x``"
msgstr ""

msgid "*x* unchanged"
msgstr ""

msgid "``abs(x)``"
msgstr ""

msgid "absolute value or magnitude of *x*"
msgstr ""

msgid ":func:`abs`"
msgstr ""

msgid "``int(x)``"
msgstr ""

msgid "*x* converted to integer"
msgstr ""

msgid ":func:`int`"
msgstr ""

msgid "``float(x)``"
msgstr ""

msgid "*x* converted to floating point"
msgstr ""

msgid ":func:`float`"
msgstr ""

msgid "``complex(re, im)``"
msgstr ""

msgid "a complex number with real part *re*, imaginary part *im*. *im* defaults to zero."
msgstr ""

msgid ":func:`complex`"
msgstr ""

msgid "``c.conjugate()``"
msgstr ""

msgid "conjugate of the complex number *c*"
msgstr ""

msgid "``divmod(x, y)``"
msgstr ""

msgid "the pair ``(x // y, x % y)``"
msgstr ""

msgid ":func:`divmod`"
msgstr ""

msgid "``pow(x, y)``"
msgstr ""

msgid "*x* to the power *y*"
msgstr ""

msgid ":func:`pow`"
msgstr ""

msgid "``x ** y``"
msgstr ""

msgid "Also referred to as integer division.  The resultant value is a whole integer, though the result's type is not necessarily int.  The result is always rounded towards minus infinity: ``1//2`` is ``0``, ``(-1)//2`` is ``-1``, ``1//(-2)`` is ``-1``, and ``(-1)//(-2)`` is ``0``."
msgstr ""

msgid "Not for complex numbers.  Instead convert to floats using :func:`abs` if appropriate."
msgstr ""

msgid "Conversion from floating point to integer may round or truncate as in C; see functions :func:`floor` and :func:`ceil` in the :mod:`math` module for well-defined conversions."
msgstr ""

msgid "float also accepts the strings \"nan\" and \"inf\" with an optional prefix \"+\" or \"-\" for Not a Number (NaN) and positive or negative infinity."
msgstr ""

msgid "Python defines ``pow(0, 0)`` and ``0 ** 0`` to be ``1``, as is common for programming languages."
msgstr ""

msgid "All :class:`numbers.Real` types (:class:`int` and :class:`float`) also include the following operations:"
msgstr ""

msgid "``math.trunc(x)``"
msgstr ""

msgid "*x* truncated to Integral"
msgstr ""

msgid "``round(x[, n])``"
msgstr ""

msgid "*x* rounded to n digits, rounding half to even. If n is omitted, it defaults to 0."
msgstr ""

msgid "``math.floor(x)``"
msgstr ""

msgid "the greatest integral float <= *x*"
msgstr ""

msgid "``math.ceil(x)``"
msgstr ""

msgid "the least integral float >= *x*"
msgstr ""

msgid "For additional numeric operations see the :mod:`math` and :mod:`cmath` modules."
msgstr ""

msgid "Bit-string Operations on Integer Types"
msgstr ""

msgid "Integers support additional operations that make sense only for bit-strings. Negative numbers are treated as their 2's complement value (this assumes a sufficiently large number of bits that no overflow occurs during the operation)."
msgstr ""

msgid "The priorities of the binary bitwise operations are all lower than the numeric operations and higher than the comparisons; the unary operation ``~`` has the same priority as the other unary numeric operations (``+`` and ``-``)."
msgstr ""

msgid "This table lists the bit-string operations sorted in ascending priority (operations in the same box have the same priority):"
msgstr ""

msgid "``x | y``"
msgstr ""

msgid "bitwise :dfn:`or` of *x* and *y*"
msgstr ""

msgid "``x ^ y``"
msgstr ""

msgid "bitwise :dfn:`exclusive or` of *x* and *y*"
msgstr ""

msgid "``x & y``"
msgstr ""

msgid "bitwise :dfn:`and` of *x* and *y*"
msgstr ""

msgid "``x << n``"
msgstr ""

msgid "*x* shifted left by *n* bits"
msgstr ""

msgid "(1)(2)"
msgstr ""

msgid "``x >> n``"
msgstr ""

msgid "*x* shifted right by *n* bits"
msgstr ""

msgid "(1)(3)"
msgstr ""

msgid "``~x``"
msgstr ""

msgid "the bits of *x* inverted"
msgstr ""

msgid "Negative shift counts are illegal and cause a :exc:`ValueError` to be raised."
msgstr ""

msgid "A left shift by *n* bits is equivalent to multiplication by ``pow(2, n)`` without overflow check."
msgstr ""

msgid "A right shift by *n* bits is equivalent to division by ``pow(2, n)`` without overflow check."
msgstr ""

msgid "Additional Methods on Integer Types"
msgstr ""

msgid "Return the number of bits necessary to represent an integer in binary, excluding the sign and leading zeros::"
msgstr ""

msgid ">>> n = -37 >>> bin(n) '-0b100101' >>> n.bit_length() 6"
msgstr ""

msgid "More precisely, if ``x`` is nonzero, then ``x.bit_length()`` is the unique positive integer ``k`` such that ``2**(k-1) <= abs(x) < 2**k``. Equivalently, when ``abs(x)`` is small enough to have a correctly rounded logarithm, then ``k = 1 + int(log(abs(x), 2))``. If ``x`` is zero, then ``x.bit_length()`` returns ``0``."
msgstr ""

msgid "def bit_length(self):     s = bin(self)       # binary representation:  bin(-37) --> '-0b100101'     s = s.lstrip('-0b') # remove leading zeros and minus sign     return len(s)       # len('100101') --> 6"
msgstr ""

msgid "Return an array of bytes representing an integer."
msgstr ""

msgid ">>> (1024).to_bytes(2, byteorder='big') b'\\x04\\x00' >>> (1024).to_bytes(10, byteorder='big') b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x04\\x00' >>> (-1024).to_bytes(10, byteorder='big', signed=True) b'\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xfc\\x00' >>> x = 1000 >>> x.to_bytes((x.bit_length() // 8) + 1, byteorder='little') b'\\xe8\\x03'"
msgstr ""

msgid "The integer is represented using *length* bytes.  An :exc:`OverflowError` is raised if the integer is not representable with the given number of bytes."
msgstr ""

msgid "The *byteorder* argument determines the byte order used to represent the integer.  If *byteorder* is ``\"big\"``, the most significant byte is at the beginning of the byte array.  If *byteorder* is ``\"little\"``, the most significant byte is at the end of the byte array.  To request the native byte order of the host system, use :data:`sys.byteorder` as the byte order value."
msgstr ""

msgid "The *signed* argument determines whether two's complement is used to represent the integer.  If *signed* is ``False`` and a negative integer is given, an :exc:`OverflowError` is raised. The default value for *signed* is ``False``."
msgstr ""

msgid "Return the integer represented by the given array of bytes."
msgstr ""

msgid ">>> int.from_bytes(b'\\x00\\x10', byteorder='big') 16 >>> int.from_bytes(b'\\x00\\x10', byteorder='little') 4096 >>> int.from_bytes(b'\\xfc\\x00', byteorder='big', signed=True) -1024 >>> int.from_bytes(b'\\xfc\\x00', byteorder='big', signed=False) 64512 >>> int.from_bytes([255, 0, 0], byteorder='big') 16711680"
msgstr ""

msgid "The argument *bytes* must either support the buffer protocol or be an iterable producing bytes. :class:`bytes` and :class:`bytearray` are examples of built-in objects that support the buffer protocol."
msgstr ""

msgid "The *signed* argument indicates whether two's complement is used to represent the integer."
msgstr ""

msgid "Additional Methods on Float"
msgstr ""

msgid "The float type has some additional methods."
msgstr ""

msgid "Return a pair of integers whose ratio is exactly equal to the original float and with a positive denominator.  Raises :exc:`OverflowError` on infinities and a :exc:`ValueError` on NaNs."
msgstr ""

msgid "Two methods support conversion to and from hexadecimal strings.  Since Python's floats are stored internally as binary numbers, converting a float to or from a *decimal* string usually involves a small rounding error.  In contrast, hexadecimal strings allow exact representation and specification of floating-point numbers.  This can be useful when debugging, and in numerical work."
msgstr ""

msgid "Return a representation of a floating-point number as a hexadecimal string.  For finite floating-point numbers, this representation will always include a leading ``0x`` and a trailing ``p`` and exponent."
msgstr ""

msgid "Class method to return the float represented by a hexadecimal string *s*.  The string *s* may have leading and trailing whitespace."
msgstr ""

msgid "Note that :meth:`float.hex` is an instance method, while :meth:`float.fromhex` is a class method."
msgstr ""

msgid "A hexadecimal string takes the form::"
msgstr ""

msgid "[sign] ['0x'] integer ['.' fraction] ['p' exponent]"
msgstr ""

msgid "where the optional ``sign`` may by either ``+`` or ``-``, ``integer`` and ``fraction`` are strings of hexadecimal digits, and ``exponent`` is a decimal integer with an optional leading sign.  Case is not significant, and there must be at least one hexadecimal digit in either the integer or the fraction.  This syntax is similar to the syntax specified in section 6.4.4.2 of the C99 standard, and also to the syntax used in Java 1.5 onwards.  In particular, the output of :meth:`float.hex` is usable as a hexadecimal floating-point literal in C or Java code, and hexadecimal strings produced by C's ``%a`` format character or Java's ``Double.toHexString`` are accepted by :meth:`float.fromhex`."
msgstr ""

msgid "Note that the exponent is written in decimal rather than hexadecimal, and that it gives the power of 2 by which to multiply the coefficient. For example, the hexadecimal string ``0x3.a7p10`` represents the floating-point number ``(3 + 10./16 + 7./16**2) * 2.0**10``, or ``3740.0``::"
msgstr ""

msgid ">>> float.fromhex('0x3.a7p10') 3740.0"
msgstr ""

msgid "Applying the reverse conversion to ``3740.0`` gives a different hexadecimal string representing the same number::"
msgstr ""

msgid ">>> float.hex(3740.0) '0x1.d380000000000p+11'"
msgstr ""

msgid "Hashing of numeric types"
msgstr ""

msgid "For numbers ``x`` and ``y``, possibly of different types, it's a requirement that ``hash(x) == hash(y)`` whenever ``x == y`` (see the :meth:`__hash__` method documentation for more details).  For ease of implementation and efficiency across a variety of numeric types (including :class:`int`, :class:`float`, :class:`decimal.Decimal` and :class:`fractions.Fraction`) Python's hash for numeric types is based on a single mathematical function that's defined for any rational number, and hence applies to all instances of :class:`int` and :class:`fraction.Fraction`, and all finite instances of :class:`float` and :class:`decimal.Decimal`.  Essentially, this function is given by reduction modulo ``P`` for a fixed prime ``P``.  The value of ``P`` is made available to Python as the :attr:`modulus` attribute of :data:`sys.hash_info`."
msgstr ""

msgid "Currently, the prime used is ``P = 2**31 - 1`` on machines with 32-bit C longs and ``P = 2**61 - 1`` on machines with 64-bit C longs."
msgstr ""

msgid "Here are the rules in detail:"
msgstr ""

msgid "If ``x = m / n`` is a nonnegative rational number and ``n`` is not divisible by ``P``, define ``hash(x)`` as ``m * invmod(n, P) % P``, where ``invmod(n, P)`` gives the inverse of ``n`` modulo ``P``."
msgstr ""

msgid "If ``x = m / n`` is a nonnegative rational number and ``n`` is divisible by ``P`` (but ``m`` is not) then ``n`` has no inverse modulo ``P`` and the rule above doesn't apply; in this case define ``hash(x)`` to be the constant value ``sys.hash_info.inf``."
msgstr ""

msgid "If ``x = m / n`` is a negative rational number define ``hash(x)`` as ``-hash(-x)``.  If the resulting hash is ``-1``, replace it with ``-2``."
msgstr ""

msgid "The particular values ``sys.hash_info.inf``, ``-sys.hash_info.inf`` and ``sys.hash_info.nan`` are used as hash values for positive infinity, negative infinity, or nans (respectively).  (All hashable nans have the same hash value.)"
msgstr ""

msgid "For a :class:`complex` number ``z``, the hash values of the real and imaginary parts are combined by computing ``hash(z.real) + sys.hash_info.imag * hash(z.imag)``, reduced modulo ``2**sys.hash_info.width`` so that it lies in ``range(-2**(sys.hash_info.width - 1), 2**(sys.hash_info.width - 1))``.  Again, if the result is ``-1``, it's replaced with ``-2``."
msgstr ""

msgid "To clarify the above rules, here's some example Python code, equivalent to the builtin hash, for computing the hash of a rational number, :class:`float`, or :class:`complex`::"
msgstr ""

msgid "import sys, math  def hash_fraction(m, n):     \"\"\"Compute the hash of a rational number m / n.      Assumes m and n are integers, with n positive.     Equivalent to hash(fractions.Fraction(m, n)).      \"\"\"     P = sys.hash_info.modulus     # Remove common factors of P.  (Unnecessary if m and n already coprime.)     while m % P == n % P == 0:         m, n = m // P, n // P      if n % P == 0:         hash_ = sys.hash_info.inf     else:         # Fermat's Little Theorem: pow(n, P-1, P) is 1, so         # pow(n, P-2, P) gives the inverse of n modulo P.         hash_ = (abs(m) % P) * pow(n, P - 2, P) % P     if m < 0:         hash_ = -hash_     if hash_ == -1:         hash_ = -2     return hash_  def hash_float(x):     \"\"\"Compute the hash of a float x.\"\"\"      if math.isnan(x):         return sys.hash_info.nan     elif math.isinf(x):         return sys.hash_info.inf if x > 0 else -sys.hash_info.inf     else:         return hash_fraction(*x.as_integer_ratio())  def hash_complex(z):     \"\"\"Compute the hash of a complex number z.\"\"\"      hash_ = hash_float(z.real) + sys.hash_info.imag * hash_float(z.imag)     # do a signed reduction modulo 2**sys.hash_info.width     M = 2**(sys.hash_info.width - 1)     hash_ = (hash_ & (M - 1)) - (hash & M)     if hash_ == -1:         hash_ == -2     return hash_"
msgstr ""

msgid "Iterator Types"
msgstr ""

msgid "Python supports a concept of iteration over containers.  This is implemented using two distinct methods; these are used to allow user-defined classes to support iteration.  Sequences, described below in more detail, always support the iteration methods."
msgstr ""

msgid "One method needs to be defined for container objects to provide iteration support:"
msgstr ""

msgid "Return an iterator object.  The object is required to support the iterator protocol described below.  If a container supports different types of iteration, additional methods can be provided to specifically request iterators for those iteration types.  (An example of an object supporting multiple forms of iteration would be a tree structure which supports both breadth-first and depth-first traversal.)  This method corresponds to the :attr:`tp_iter` slot of the type structure for Python objects in the Python/C API."
msgstr ""

msgid "The iterator objects themselves are required to support the following two methods, which together form the :dfn:`iterator protocol`:"
msgstr ""

msgid "Return the iterator object itself.  This is required to allow both containers and iterators to be used with the :keyword:`for` and :keyword:`in` statements. This method corresponds to the :attr:`tp_iter` slot of the type structure for Python objects in the Python/C API."
msgstr ""

msgid "Return the next item from the container.  If there are no further items, raise the :exc:`StopIteration` exception.  This method corresponds to the :attr:`tp_iternext` slot of the type structure for Python objects in the Python/C API."
msgstr ""

msgid "Python defines several iterator objects to support iteration over general and specific sequence types, dictionaries, and other more specialized forms.  The specific types are not important beyond their implementation of the iterator protocol."
msgstr ""

msgid "Once an iterator's :meth:`__next__` method raises :exc:`StopIteration`, it must continue to do so on subsequent calls.  Implementations that do not obey this property are deemed broken."
msgstr ""

msgid "Generator Types"
msgstr ""

msgid "Python's :term:`generator`\\s provide a convenient way to implement the iterator protocol.  If a container object's :meth:`__iter__` method is implemented as a generator, it will automatically return an iterator object (technically, a generator object) supplying the :meth:`__iter__` and :meth:`__next__` methods. More information about generators can be found in :ref:`the documentation for the yield expression <yieldexpr>`."
msgstr ""

msgid "Sequence Types --- :class:`str`, :class:`bytes`, :class:`bytearray`, :class:`list`, :class:`tuple`, :class:`range`"
msgstr ""

msgid "There are six sequence types: strings, byte sequences (:class:`bytes` objects), byte arrays (:class:`bytearray` objects), lists, tuples, and range objects.  For other containers see the built in :class:`dict` and :class:`set` classes, and the :mod:`collections` module."
msgstr ""

msgid "Strings contain Unicode characters.  Their literals are written in single or double quotes: ``'xyzzy'``, ``\"frobozz\"``.  See :ref:`strings` for more about string literals.  In addition to the functionality described here, there are also string-specific methods described in the :ref:`string-methods` section."
msgstr ""

msgid "Bytes and bytearray objects contain single bytes -- the former is immutable while the latter is a mutable sequence.  Bytes objects can be constructed the constructor, :func:`bytes`, and from literals; use a ``b`` prefix with normal string syntax: ``b'xyzzy'``.  To construct byte arrays, use the :func:`bytearray` function."
msgstr ""

msgid "While string objects are sequences of characters (represented by strings of length 1), bytes and bytearray objects are sequences of *integers* (between 0 and 255), representing the ASCII value of single bytes.  That means that for a bytes or bytearray object *b*, ``b[0]`` will be an integer, while ``b[0:1]`` will be a bytes or bytearray object of length 1.  The representation of bytes objects uses the literal format (``b'...'``) since it is generally more useful than e.g. ``bytes([50, 19, 100])``.  You can always convert a bytes object into a list of integers using ``list(b)``."
msgstr ""

msgid "Also, while in previous Python versions, byte strings and Unicode strings could be exchanged for each other rather freely (barring encoding issues), strings and bytes are now completely separate concepts.  There's no implicit en-/decoding if you pass an object of the wrong type.  A string always compares unequal to a bytes or bytearray object."
msgstr ""

msgid "Lists are constructed with square brackets, separating items with commas: ``[a, b, c]``.  Tuples are constructed by the comma operator (not within square brackets), with or without enclosing parentheses, but an empty tuple must have the enclosing parentheses, such as ``a, b, c`` or ``()``.  A single item tuple must have a trailing comma, such as ``(d,)``."
msgstr ""

msgid "Objects of type range are created using the :func:`range` function.  They don't support slicing, concatenation or repetition, and using ``in``, ``not in``, :func:`min` or :func:`max` on them is inefficient."
msgstr ""

msgid "Most sequence types support the following operations.  The ``in`` and ``not in`` operations have the same priorities as the comparison operations.  The ``+`` and ``*`` operations have the same priority as the corresponding numeric operations. [#]_ Additional methods are provided for :ref:`typesseq-mutable`."
msgstr ""

msgid "This table lists the sequence operations sorted in ascending priority (operations in the same box have the same priority).  In the table, *s* and *t* are sequences of the same type; *n*, *i* and *j* are integers:"
msgstr ""

msgid "``x in s``"
msgstr ""

msgid "``True`` if an item of *s* is equal to *x*, else ``False``"
msgstr ""

msgid "``x not in s``"
msgstr ""

msgid "``False`` if an item of *s* is equal to *x*, else ``True``"
msgstr ""

msgid "``s + t``"
msgstr ""

msgid "the concatenation of *s* and *t*"
msgstr ""

msgid "\\(6)"
msgstr ""

msgid "``s * n, n * s``"
msgstr ""

msgid "*n* shallow copies of *s* concatenated"
msgstr ""

msgid "``s[i]``"
msgstr ""

msgid "*i*'th item of *s*, origin 0"
msgstr ""

msgid "``s[i:j]``"
msgstr ""

msgid "slice of *s* from *i* to *j*"
msgstr ""

msgid "(3)(4)"
msgstr ""

msgid "``s[i:j:k]``"
msgstr ""

msgid "slice of *s* from *i* to *j* with step *k*"
msgstr ""

msgid "(3)(5)"
msgstr ""

msgid "``len(s)``"
msgstr ""

msgid "length of *s*"
msgstr ""

msgid "``min(s)``"
msgstr ""

msgid "smallest item of *s*"
msgstr ""

msgid "``max(s)``"
msgstr ""

msgid "largest item of *s*"
msgstr ""

msgid "Sequence types also support comparisons.  In particular, tuples and lists are compared lexicographically by comparing corresponding elements.  This means that to compare equal, every element must compare equal and the two sequences must be of the same type and have the same length.  (For full details see :ref:`comparisons` in the language reference.)"
msgstr ""

msgid "When *s* is a string object, the ``in`` and ``not in`` operations act like a substring test."
msgstr ""

msgid "Values of *n* less than ``0`` are treated as ``0`` (which yields an empty sequence of the same type as *s*).  Note also that the copies are shallow; nested structures are not copied.  This often haunts new Python programmers; consider:"
msgstr ""

msgid ">>> lists = [[]] * 3 >>> lists [[], [], []] >>> lists[0].append(3) >>> lists [[3], [3], [3]]"
msgstr ""

msgid "What has happened is that ``[[]]`` is a one-element list containing an empty list, so all three elements of ``[[]] * 3`` are (pointers to) this single empty list.  Modifying any of the elements of ``lists`` modifies this single list. You can create a list of different lists this way:"
msgstr ""

msgid ">>> lists = [[] for i in range(3)] >>> lists[0].append(3) >>> lists[1].append(5) >>> lists[2].append(7) >>> lists [[3], [5], [7]]"
msgstr ""

msgid "If *i* or *j* is negative, the index is relative to the end of the string: ``len(s) + i`` or ``len(s) + j`` is substituted.  But note that ``-0`` is still ``0``."
msgstr ""

msgid "The slice of *s* from *i* to *j* is defined as the sequence of items with index *k* such that ``i <= k < j``.  If *i* or *j* is greater than ``len(s)``, use ``len(s)``.  If *i* is omitted or ``None``, use ``0``.  If *j* is omitted or ``None``, use ``len(s)``.  If *i* is greater than or equal to *j*, the slice is empty."
msgstr ""

msgid "The slice of *s* from *i* to *j* with step *k* is defined as the sequence of items with index  ``x = i + n*k`` such that ``0 <= n < (j-i)/k``.  In other words, the indices are ``i``, ``i+k``, ``i+2*k``, ``i+3*k`` and so on, stopping when *j* is reached (but never including *j*).  If *i* or *j* is greater than ``len(s)``, use ``len(s)``.  If *i* or *j* are omitted or ``None``, they become \"end\" values (which end depends on the sign of *k*).  Note, *k* cannot be zero. If *k* is ``None``, it is treated like ``1``."
msgstr ""

msgid "If *s* and *t* are both strings, some Python implementations such as CPython can usually perform an in-place optimization for assignments of the form ``s = s + t`` or ``s += t``.  When applicable, this optimization makes quadratic run-time much less likely.  This optimization is both version and implementation dependent.  For performance sensitive code, it is preferable to use the :meth:`str.join` method which assures consistent linear concatenation performance across versions and implementations."
msgstr ""

msgid "String Methods"
msgstr ""

msgid "String objects support the methods listed below."
msgstr ""

msgid "In addition, Python's strings support the sequence type methods described in the :ref:`typesseq` section. To output formatted strings, see the :ref:`string-formatting` section. Also, see the :mod:`re` module for string functions based on regular expressions."
msgstr ""

msgid "Return a copy of the string with only its first character capitalized."
msgstr ""

msgid "Return centered in a string of length *width*. Padding is done using the specified *fillchar* (default is a space)."
msgstr ""

msgid "Return the number of non-overlapping occurrences of substring *sub* in the range [*start*, *end*].  Optional arguments *start* and *end* are interpreted as in slice notation."
msgstr ""

msgid "Return an encoded version of the string as a bytes object.  Default encoding is the current default string encoding.  *errors* may be given to set a different error handling scheme.  The default for *errors* is ``'strict'``, meaning that encoding errors raise a :exc:`UnicodeError`.  Other possible values are ``'ignore'``, ``'replace'``, ``'xmlcharrefreplace'``, ``'backslashreplace'`` and any other name registered via :func:`codecs.register_error`, see section :ref:`codec-base-classes`. For a list of possible encodings, see section :ref:`standard-encodings`."
msgstr ""

msgid "Return ``True`` if the string ends with the specified *suffix*, otherwise return ``False``.  *suffix* can also be a tuple of suffixes to look for.  With optional *start*, test beginning at that position.  With optional *end*, stop comparing at that position."
msgstr ""

msgid "Return a copy of the string where all tab characters are replaced by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. If *tabsize* is not given, a tab size of ``8`` characters is assumed.  This doesn't understand other non-printing characters or escape sequences."
msgstr ""

msgid "Return the lowest index in the string where substring *sub* is found, such that *sub* is contained in the slice ``s[start:end]``.  Optional arguments *start* and *end* are interpreted as in slice notation.  Return ``-1`` if *sub* is not found."
msgstr ""

msgid "Perform a string formatting operation.  The string on which this method is called can contain literal text or replacement fields delimited by braces ``{}``.  Each replacement field contains either the numeric index of a positional argument, or the name of a keyword argument.  Returns a copy of the string where each replacement field is replaced with the string value of the corresponding argument."
msgstr ""

msgid ">>> \"The sum of 1 + 2 is {0}\".format(1+2) 'The sum of 1 + 2 is 3'"
msgstr ""

msgid "See :ref:`formatstrings` for a description of the various formatting options that can be specified in format strings."
msgstr ""

msgid "Like :meth:`find`, but raise :exc:`ValueError` when the substring is not found."
msgstr ""

msgid "Return true if all characters in the string are alphanumeric and there is at least one character, false otherwise."
msgstr ""

msgid "Return true if all characters in the string are alphabetic and there is at least one character, false otherwise."
msgstr ""

msgid "Return true if all characters in the string are decimal characters and there is at least one character, false otherwise. Decimal characters include digit characters, and all characters that that can be used to form decimal-radix numbers, e.g. U+0660, ARABIC-INDIC DIGIT ZERO."
msgstr ""

msgid "Return true if all characters in the string are digits and there is at least one character, false otherwise."
msgstr ""

msgid "Return true if the string is a valid identifier according to the language definition, section :ref:`identifiers`."
msgstr ""

msgid "Return true if all cased characters in the string are lowercase and there is at least one cased character, false otherwise."
msgstr ""

msgid "Return true if all characters in the string are numeric characters, and there is at least one character, false otherwise. Numeric characters include digit characters, and all characters that have the Unicode numeric value property, e.g. U+2155, VULGAR FRACTION ONE FIFTH."
msgstr ""

msgid "Return true if all characters in the string are printable or the string is empty, false otherwise.  Nonprintable characters are those characters defined in the Unicode character database as \"Other\" or \"Separator\", excepting the ASCII space (0x20) which is considered printable.  (Note that printable characters in this context are those which should not be escaped when :func:`repr` is invoked on a string.  It has no bearing on the handling of strings written to :data:`sys.stdout` or :data:`sys.stderr`.)"
msgstr ""

msgid "Return true if there are only whitespace characters in the string and there is at least one character, false otherwise."
msgstr ""

msgid "Return true if the string is a titlecased string and there is at least one character, for example uppercase characters may only follow uncased characters and lowercase characters only cased ones.  Return false otherwise."
msgstr ""

msgid "Return true if all cased characters in the string are uppercase and there is at least one cased character, false otherwise."
msgstr ""

msgid "Return a string which is the concatenation of the strings in the :term:`iterable` *iterable*.  A :exc:`TypeError` will be raised if there are any non-string values in *seq*, including :class:`bytes` objects.  The separator between elements is the string providing this method."
msgstr ""

msgid "Return the string left justified in a string of length *width*. Padding is done using the specified *fillchar* (default is a space).  The original string is returned if *width* is less than ``len(s)``."
msgstr ""

msgid "Return a copy of the string converted to lowercase."
msgstr ""

msgid "Return a copy of the string with leading characters removed.  The *chars* argument is a string specifying the set of characters to be removed.  If omitted or ``None``, the *chars* argument defaults to removing whitespace.  The *chars* argument is not a prefix; rather, all combinations of its values are stripped:"
msgstr ""

msgid ">>> '   spacious   '.lstrip() 'spacious   ' >>> 'www.example.com'.lstrip('cmowz.') 'example.com'"
msgstr ""

msgid "This static method returns a translation table usable for :meth:`str.translate`."
msgstr ""

msgid "If there is only one argument, it must be a dictionary mapping Unicode ordinals (integers) or characters (strings of length 1) to Unicode ordinals, strings (of arbitrary lengths) or None.  Character keys will then be converted to ordinals."
msgstr ""

msgid "If there are two arguments, they must be strings of equal length, and in the resulting dictionary, each character in x will be mapped to the character at the same position in y.  If there is a third argument, it must be a string, whose characters will be mapped to None in the result."
msgstr ""

msgid "Split the string at the first occurrence of *sep*, and return a 3-tuple containing the part before the separator, the separator itself, and the part after the separator.  If the separator is not found, return a 3-tuple containing the string itself, followed by two empty strings."
msgstr ""

msgid "Return a copy of the string with all occurrences of substring *old* replaced by *new*.  If the optional argument *count* is given, only the first *count* occurrences are replaced."
msgstr ""

msgid "Return the highest index in the string where substring *sub* is found, such that *sub* is contained within ``s[start:end]``.  Optional arguments *start* and *end* are interpreted as in slice notation.  Return ``-1`` on failure."
msgstr ""

msgid "Like :meth:`rfind` but raises :exc:`ValueError` when the substring *sub* is not found."
msgstr ""

msgid "Return the string right justified in a string of length *width*. Padding is done using the specified *fillchar* (default is a space). The original string is returned if *width* is less than ``len(s)``."
msgstr ""

msgid "Split the string at the last occurrence of *sep*, and return a 3-tuple containing the part before the separator, the separator itself, and the part after the separator.  If the separator is not found, return a 3-tuple containing two empty strings, followed by the string itself."
msgstr ""

msgid "Return a list of the words in the string, using *sep* as the delimiter string. If *maxsplit* is given, at most *maxsplit* splits are done, the *rightmost* ones.  If *sep* is not specified or ``None``, any whitespace string is a separator.  Except for splitting from the right, :meth:`rsplit` behaves like :meth:`split` which is described in detail below."
msgstr ""

msgid "Return a copy of the string with trailing characters removed.  The *chars* argument is a string specifying the set of characters to be removed.  If omitted or ``None``, the *chars* argument defaults to removing whitespace.  The *chars* argument is not a suffix; rather, all combinations of its values are stripped:"
msgstr ""

msgid ">>> '   spacious   '.rstrip() '   spacious' >>> 'mississippi'.rstrip('ipz') 'mississ'"
msgstr ""

msgid "Return a list of the words in the string, using *sep* as the delimiter string.  If *maxsplit* is given, at most *maxsplit* splits are done (thus, the list will have at most ``maxsplit+1`` elements).  If *maxsplit* is not specified, then there is no limit on the number of splits (all possible splits are made)."
msgstr ""

msgid "If *sep* is given, consecutive delimiters are not grouped together and are deemed to delimit empty strings (for example, ``'1,,2'.split(',')`` returns ``['1', '', '2']``).  The *sep* argument may consist of multiple characters (for example, ``'1<>2<>3'.split('<>')`` returns ``['1', '2', '3']``). Splitting an empty string with a specified separator returns ``['']``."
msgstr ""

msgid "If *sep* is not specified or is ``None``, a different splitting algorithm is applied: runs of consecutive whitespace are regarded as a single separator, and the result will contain no empty strings at the start or end if the string has leading or trailing whitespace.  Consequently, splitting an empty string or a string consisting of just whitespace with a ``None`` separator returns ``[]``."
msgstr ""

msgid "For example, ``' 1  2   3  '.split()`` returns ``['1', '2', '3']``, and ``'  1  2   3  '.split(None, 1)`` returns ``['1', '2   3  ']``."
msgstr ""

msgid "Return a list of the lines in the string, breaking at line boundaries.  Line breaks are not included in the resulting list unless *keepends* is given and true."
msgstr ""

msgid "Return ``True`` if string starts with the *prefix*, otherwise return ``False``. *prefix* can also be a tuple of prefixes to look for.  With optional *start*, test string beginning at that position.  With optional *end*, stop comparing string at that position."
msgstr ""

msgid "Return a copy of the string with the leading and trailing characters removed. The *chars* argument is a string specifying the set of characters to be removed. If omitted or ``None``, the *chars* argument defaults to removing whitespace. The *chars* argument is not a prefix or suffix; rather, all combinations of its values are stripped:"
msgstr ""

msgid ">>> '   spacious   '.strip() 'spacious' >>> 'www.example.com'.strip('cmowz.') 'example'"
msgstr ""

msgid "Return a copy of the string with uppercase characters converted to lowercase and vice versa."
msgstr ""

msgid "Return a titlecased version of the string where words start with an uppercase character and the remaining characters are lowercase."
msgstr ""

msgid "The algorithm uses a simple language-independent definition of a word as groups of consecutive letters.  The definition works in many contexts but it means that apostrophes in contractions and possessives form word boundaries, which may not be the desired result::"
msgstr ""

msgid ">>> \"they're bill's friends from the UK\".title() \"They'Re Bill'S Friends From The Uk\""
msgstr ""

msgid "A workaround for apostrophes can be constructed using regular expressions::"
msgstr ""

msgid ">>> import re >>> def titlecase(s):         return re.sub(r\"[A-Za-z]+('[A-Za-z]+)?\",                       lambda mo: mo.group(0)[0].upper() +                                  mo.group(0)[1:].lower(),                       s)  >>> titlecase(\"they're bill's friends.\") \"They're Bill's Friends.\""
msgstr ""

msgid "Return a copy of the *s* where all characters have been mapped through the *map* which must be a dictionary of Unicode ordinals (integers) to Unicode ordinals, strings or ``None``.  Unmapped characters are left untouched. Characters mapped to ``None`` are deleted."
msgstr ""

msgid "You can use :meth:`str.maketrans` to create a translation map from character-to-character mappings in different formats."
msgstr ""

msgid "You can use the :func:`~string.maketrans` helper function in the :mod:`string` module to create a translation table. For string objects, set the *table* argument to ``None`` for translations that only delete characters:"
msgstr ""

msgid "An even more flexible approach is to create a custom character mapping codec using the :mod:`codecs` module (see :mod:`encodings.cp1251` for an example)."
msgstr ""

msgid "Return a copy of the string converted to uppercase."
msgstr ""

msgid "Return the numeric string left filled with zeros in a string of length *width*.  A sign prefix is handled correctly.  The original string is returned if *width* is less than ``len(s)``."
msgstr ""

msgid "Old String Formatting Operations"
msgstr ""

msgid "The formatting operations described here are obsolete and may go away in future versions of Python.  Use the new :ref:`string-formatting` in new code."
msgstr ""

msgid "String objects have one unique built-in operation: the ``%`` operator (modulo). This is also known as the string *formatting* or *interpolation* operator. Given ``format % values`` (where *format* is a string), ``%`` conversion specifications in *format* are replaced with zero or more elements of *values*. The effect is similar to the using :cfunc:`sprintf` in the C language."
msgstr ""

msgid "If *format* requires a single argument, *values* may be a single non-tuple object. [#]_  Otherwise, *values* must be a tuple with exactly the number of items specified by the format string, or a single mapping object (for example, a dictionary)."
msgstr ""

msgid "A conversion specifier contains two or more characters and has the following components, which must occur in this order:"
msgstr ""

msgid "The ``'%'`` character, which marks the start of the specifier."
msgstr ""

msgid "Mapping key (optional), consisting of a parenthesised sequence of characters (for example, ``(somename)``)."
msgstr ""

msgid "Conversion flags (optional), which affect the result of some conversion types."
msgstr ""

msgid "Minimum field width (optional).  If specified as an ``'*'`` (asterisk), the actual width is read from the next element of the tuple in *values*, and the object to convert comes after the minimum field width and optional precision."
msgstr ""

msgid "Precision (optional), given as a ``'.'`` (dot) followed by the precision.  If specified as ``'*'`` (an asterisk), the actual width is read from the next element of the tuple in *values*, and the value to convert comes after the precision."
msgstr ""

msgid "Length modifier (optional)."
msgstr ""

msgid "Conversion type."
msgstr ""

msgid "When the right argument is a dictionary (or other mapping type), then the formats in the string *must* include a parenthesised mapping key into that dictionary inserted immediately after the ``'%'`` character. The mapping key selects the value to be formatted from the mapping.  For example:"
msgstr ""

msgid ">>> print('%(language)s has %(#)03d quote types.' % \\ ...       {'language': \"Python\", \"#\": 2}) Python has 002 quote types."
msgstr ""

msgid "In this case no ``*`` specifiers may occur in a format (since they require a sequential parameter list)."
msgstr ""

msgid "The conversion flag characters are:"
msgstr ""

msgid "``'#'``"
msgstr ""

msgid "The value conversion will use the \"alternate form\" (where defined below)."
msgstr ""

msgid "``'0'``"
msgstr ""

msgid "The conversion will be zero padded for numeric values."
msgstr ""

msgid "``'-'``"
msgstr ""

msgid "The converted value is left adjusted (overrides the ``'0'`` conversion if both are given)."
msgstr ""

msgid "``' '``"
msgstr ""

msgid "(a space) A blank should be left before a positive number (or empty string) produced by a signed conversion."
msgstr ""

msgid "A sign character (``'+'`` or ``'-'``) will precede the conversion (overrides a \"space\" flag)."
msgstr ""

msgid "A length modifier (``h``, ``l``, or ``L``) may be present, but is ignored as it is not necessary for Python -- so e.g. ``%ld`` is identical to ``%d``."
msgstr ""

msgid "The conversion types are:"
msgstr ""

msgid "Conversion"
msgstr ""

msgid "Signed integer decimal."
msgstr ""

msgid "``'o'``"
msgstr ""

msgid "Signed octal value."
msgstr ""

msgid "Obsolete type -- it is identical to ``'d'``."
msgstr ""

msgid "\\(7)"
msgstr ""

msgid "``'x'``"
msgstr ""

msgid "Signed hexadecimal (lowercase)."
msgstr ""

msgid "``'X'``"
msgstr ""

msgid "Signed hexadecimal (uppercase)."
msgstr ""

msgid "``'e'``"
msgstr ""

msgid "Floating point exponential format (lowercase)."
msgstr ""

msgid "``'E'``"
msgstr ""

msgid "Floating point exponential format (uppercase)."
msgstr ""

msgid "Floating point decimal format."
msgstr ""

msgid "``'F'``"
msgstr ""

msgid "``'g'``"
msgstr ""

msgid "Floating point format. Uses lowercase exponential format if exponent is less than -4 or not less than precision, decimal format otherwise."
msgstr ""

msgid "``'G'``"
msgstr ""

msgid "Floating point format. Uses uppercase exponential format if exponent is less than -4 or not less than precision, decimal format otherwise."
msgstr ""

msgid "Single character (accepts integer or single character string)."
msgstr ""

msgid "String (converts any Python object using :func:`repr`)."
msgstr ""

msgid "String (converts any Python object using :func:`str`)."
msgstr ""

msgid "``'%'``"
msgstr ""

msgid "No argument is converted, results in a ``'%'`` character in the result."
msgstr ""

msgid "The alternate form causes a leading zero (``'0'``) to be inserted between left-hand padding and the formatting of the number if the leading character of the result is not already a zero."
msgstr ""

msgid "The alternate form causes a leading ``'0x'`` or ``'0X'`` (depending on whether the ``'x'`` or ``'X'`` format was used) to be inserted between left-hand padding and the formatting of the number if the leading character of the result is not already a zero."
msgstr ""

msgid "The alternate form causes the result to always contain a decimal point, even if no digits follow it."
msgstr ""

msgid "The precision determines the number of digits after the decimal point and defaults to 6."
msgstr ""

msgid "The alternate form causes the result to always contain a decimal point, and trailing zeroes are not removed as they would otherwise be."
msgstr ""

msgid "The precision determines the number of significant digits before and after the decimal point and defaults to 6."
msgstr ""

msgid "The precision determines the maximal number of characters used."
msgstr ""

msgid "See :pep:`237`."
msgstr ""

msgid "Since Python strings have an explicit length, ``%s`` conversions do not assume that ``'\\0'`` is the end of the string."
msgstr ""

msgid "Additional string operations are defined in standard modules :mod:`string` and :mod:`re`."
msgstr ""

msgid "Range Type"
msgstr ""

msgid "The :class:`range` type is an immutable sequence which is commonly used for looping.  The advantage of the :class:`range` type is that an :class:`range` object will always take the same amount of memory, no matter the size of the range it represents.  There are no consistent performance advantages."
msgstr ""

msgid "Range objects have very little behavior: they only support indexing, iteration, and the :func:`len` function."
msgstr ""

msgid "Mutable Sequence Types"
msgstr ""

msgid "List and bytearray objects support additional operations that allow in-place modification of the object.  Other mutable sequence types (when added to the language) should also support these operations.  Strings and tuples are immutable sequence types: such objects cannot be modified once created. The following operations are defined on mutable sequence types (where *x* is an arbitrary object)."
msgstr ""

msgid "Note that while lists allow their items to be of any type, bytearray object \"items\" are all integers in the range 0 <= x < 256."
msgstr ""

msgid "``s[i] = x``"
msgstr ""

msgid "item *i* of *s* is replaced by *x*"
msgstr ""

msgid "``s[i:j] = t``"
msgstr ""

msgid "slice of *s* from *i* to *j* is replaced by the contents of the iterable *t*"
msgstr ""

msgid "``del s[i:j]``"
msgstr ""

msgid "same as ``s[i:j] = []``"
msgstr ""

msgid "``s[i:j:k] = t``"
msgstr ""

msgid "the elements of ``s[i:j:k]`` are replaced by those of *t*"
msgstr ""

msgid "``del s[i:j:k]``"
msgstr ""

msgid "removes the elements of ``s[i:j:k]`` from the list"
msgstr ""

msgid "``s.append(x)``"
msgstr ""

msgid "same as ``s[len(s):len(s)] = [x]``"
msgstr ""

msgid "``s.extend(x)``"
msgstr ""

msgid "same as ``s[len(s):len(s)] = x``"
msgstr ""

msgid "``s.count(x)``"
msgstr ""

msgid "return number of *i*'s for which ``s[i] == x``"
msgstr ""

msgid "``s.index(x[, i[, j]])``"
msgstr ""

msgid "return smallest *k* such that ``s[k] == x`` and ``i <= k < j``"
msgstr ""

msgid "``s.insert(i, x)``"
msgstr ""

msgid "same as ``s[i:i] = [x]``"
msgstr ""

msgid "``s.pop([i])``"
msgstr ""

msgid "same as ``x = s[i]; del s[i]; return x``"
msgstr ""

msgid "``s.remove(x)``"
msgstr ""

msgid "same as ``del s[s.index(x)]``"
msgstr ""

msgid "``s.reverse()``"
msgstr ""

msgid "reverses the items of *s* in place"
msgstr ""

msgid "``s.sort([key[, reverse]])``"
msgstr ""

msgid "sort the items of *s* in place"
msgstr ""

msgid "(6), (7), (8)"
msgstr ""

msgid "*t* must have the same length as the slice it is replacing."
msgstr ""

msgid "*x* can be any iterable object."
msgstr ""

msgid "Raises :exc:`ValueError` when *x* is not found in *s*. When a negative index is passed as the second or third parameter to the :meth:`index` method, the sequence length is added, as for slice indices.  If it is still negative, it is truncated to zero, as for slice indices."
msgstr ""

msgid "When a negative index is passed as the first parameter to the :meth:`insert` method, the sequence length is added, as for slice indices.  If it is still negative, it is truncated to zero, as for slice indices."
msgstr ""

msgid "The optional argument *i* defaults to ``-1``, so that by default the last item is removed and returned."
msgstr ""

msgid "The :meth:`sort` and :meth:`reverse` methods modify the sequence in place for economy of space when sorting or reversing a large sequence.  To remind you that they operate by side effect, they don't return the sorted or reversed sequence."
msgstr ""

msgid "The :meth:`sort` method takes optional arguments for controlling the comparisons.  Each must be specified as a keyword argument."
msgstr ""

msgid "*key* specifies a function of one argument that is used to extract a comparison key from each list element: ``key=str.lower``.  The default value is ``None``. Use :func:`functools.cmp_to_key` to convert an old-style *cmp* function to a *key* function."
msgstr ""

msgid "The :meth:`sort` method is guaranteed to be stable.  A sort is stable if it guarantees not to change the relative order of elements that compare equal --- this is helpful for sorting in multiple passes (for example, sort by department, then by salary grade)."
msgstr ""

msgid "While a list is being sorted, the effect of attempting to mutate, or even inspect, the list is undefined.  The C implementation of Python makes the list appear empty for the duration, and raises :exc:`ValueError` if it can detect that the list has been mutated during a sort."
msgstr ""

msgid ":meth:`sort` is not supported by :class:`bytearray` objects."
msgstr ""

msgid "Bytes and Byte Array Methods"
msgstr ""

msgid "Bytes and bytearray objects, being \"strings of bytes\", have all methods found on strings, with the exception of :func:`encode`, :func:`format` and :func:`isidentifier`, which do not make sense with these types.  For converting the objects to strings, they have a :func:`decode` method."
msgstr ""

msgid "Wherever one of these methods needs to interpret the bytes as characters (e.g. the :func:`is...` methods), the ASCII character set is assumed."
msgstr ""

msgid "The methods on bytes and bytearray objects don't accept strings as their arguments, just as the methods on strings don't accept bytes as their arguments.  For example, you have to write ::"
msgstr ""

msgid "a = \"abc\" b = a.replace(\"a\", \"f\")"
msgstr ""

msgid "and ::"
msgstr ""

msgid "a = b\"abc\" b = a.replace(b\"a\", b\"f\")"
msgstr ""

msgid "Return a string decoded from the given bytes.  Default encoding is the current default string encoding.  *errors* may be given to set a different error handling scheme.  The default for *errors* is ``'strict'``, meaning that encoding errors raise a :exc:`UnicodeError`.  Other possible values are ``'ignore'``, ``'replace'`` and any other name registered via :func:`codecs.register_error`, see section :ref:`codec-base-classes`. For a list of possible encodings, see section :ref:`standard-encodings`."
msgstr ""

msgid "The bytes and bytearray types have an additional class method:"
msgstr ""

msgid "This :class:`bytes` class method returns a bytes or bytearray object, decoding the given string object.  The string must contain two hexadecimal digits per byte, spaces are ignored."
msgstr ""

msgid ">>> bytes.fromhex('f0 f1f2  ') b'\\xf0\\xf1\\xf2'"
msgstr ""

msgid "The maketrans and translate methods differ in semantics from the versions available on strings:"
msgstr ""

msgid "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument *delete* are removed, and the remaining bytes have been mapped through the given translation table, which must be a bytes object of length 256."
msgstr ""

msgid "You can use the :func:`bytes.maketrans` method to create a translation table."
msgstr ""

msgid "Set the *table* argument to ``None`` for translations that only delete characters::"
msgstr ""

msgid ">>> b'read this short text'.translate(None, b'aeiou') b'rd ths shrt txt'"
msgstr ""

msgid "This static method returns a translation table usable for :meth:`bytes.translate` that will map each character in *from* into the character at the same position in *to*; *from* and *to* must be bytes objects and have the same length."
msgstr ""

msgid "Set Types --- :class:`set`, :class:`frozenset`"
msgstr ""

msgid "A :dfn:`set` object is an unordered collection of distinct :term:`hashable` objects. Common uses include membership testing, removing duplicates from a sequence, and computing mathematical operations such as intersection, union, difference, and symmetric difference. (For other containers see the built in :class:`dict`, :class:`list`, and :class:`tuple` classes, and the :mod:`collections` module.)"
msgstr ""

msgid "Like other collections, sets support ``x in set``, ``len(set)``, and ``for x in set``.  Being an unordered collection, sets do not record element position or order of insertion.  Accordingly, sets do not support indexing, slicing, or other sequence-like behavior."
msgstr ""

msgid "There are currently two built-in set types, :class:`set` and :class:`frozenset`. The :class:`set` type is mutable --- the contents can be changed using methods like :meth:`add` and :meth:`remove`.  Since it is mutable, it has no hash value and cannot be used as either a dictionary key or as an element of another set. The :class:`frozenset` type is immutable and :term:`hashable` --- its contents cannot be altered after it is created; it can therefore be used as a dictionary key or as an element of another set."
msgstr ""

msgid "Non-empty sets (not frozensets) can be created by placing a comma-separated list of elements within braces, for example: ``{'jack', 'sjoerd'}``, in addition to the :class:`set` constructor."
msgstr ""

msgid "The constructors for both classes work the same:"
msgstr ""

msgid "Return a new set or frozenset object whose elements are taken from *iterable*.  The elements of a set must be hashable.  To represent sets of sets, the inner sets must be :class:`frozenset` objects.  If *iterable* is not specified, a new empty set is returned."
msgstr ""

msgid "Instances of :class:`set` and :class:`frozenset` provide the following operations:"
msgstr ""

msgid "Return the cardinality of set *s*."
msgstr ""

msgid "Test *x* for membership in *s*."
msgstr ""

msgid "Test *x* for non-membership in *s*."
msgstr ""

msgid "Return True if the set has no elements in common with *other*.  Sets are disjoint if and only if their intersection is the empty set."
msgstr ""

msgid "Test whether every element in the set is in *other*."
msgstr ""

msgid "Test whether the set is a true subset of *other*, that is, ``set <= other and set != other``."
msgstr ""

msgid "Test whether every element in *other* is in the set."
msgstr ""

msgid "Test whether the set is a true superset of *other*, that is, ``set >= other and set != other``."
msgstr ""

msgid "Return a new set with elements from the set and all others."
msgstr ""

msgid "Return a new set with elements common to the set and all others."
msgstr ""

msgid "Return a new set with elements in the set that are not in the others."
msgstr ""

msgid "Return a new set with elements in either the set or *other* but not both."
msgstr ""

msgid "Return a new set with a shallow copy of *s*."
msgstr ""

msgid "Note, the non-operator versions of :meth:`union`, :meth:`intersection`, :meth:`difference`, and :meth:`symmetric_difference`, :meth:`issubset`, and :meth:`issuperset` methods will accept any iterable as an argument.  In contrast, their operator based counterparts require their arguments to be sets.  This precludes error-prone constructions like ``set('abc') & 'cbs'`` in favor of the more readable ``set('abc').intersection('cbs')``."
msgstr ""

msgid "Both :class:`set` and :class:`frozenset` support set to set comparisons. Two sets are equal if and only if every element of each set is contained in the other (each is a subset of the other). A set is less than another set if and only if the first set is a proper subset of the second set (is a subset, but is not equal). A set is greater than another set if and only if the first set is a proper superset of the second set (is a superset, but is not equal)."
msgstr ""

msgid "Instances of :class:`set` are compared to instances of :class:`frozenset` based on their members.  For example, ``set('abc') == frozenset('abc')`` returns ``True`` and so does ``set('abc') in set([frozenset('abc')])``."
msgstr ""

msgid "The subset and equality comparisons do not generalize to a complete ordering function.  For example, any two disjoint sets are not equal and are not subsets of each other, so *all* of the following return ``False``: ``a<b``, ``a==b``, or ``a>b``."
msgstr ""

msgid "Since sets only define partial ordering (subset relationships), the output of the :meth:`list.sort` method is undefined for lists of sets."
msgstr ""

msgid "Set elements, like dictionary keys, must be :term:`hashable`."
msgstr ""

msgid "Binary operations that mix :class:`set` instances with :class:`frozenset` return the type of the first operand.  For example: ``frozenset('ab') | set('bc')`` returns an instance of :class:`frozenset`."
msgstr ""

msgid "The following table lists operations available for :class:`set` that do not apply to immutable instances of :class:`frozenset`:"
msgstr ""

msgid "Update the set, adding elements from all others."
msgstr ""

msgid "Update the set, keeping only elements found in it and all others."
msgstr ""

msgid "Update the set, removing elements found in others."
msgstr ""

msgid "Update the set, keeping only elements found in either set, but not in both."
msgstr ""

msgid "Add element *elem* to the set."
msgstr ""

msgid "Remove element *elem* from the set.  Raises :exc:`KeyError` if *elem* is not contained in the set."
msgstr ""

msgid "Remove element *elem* from the set if it is present."
msgstr ""

msgid "Remove and return an arbitrary element from the set.  Raises :exc:`KeyError` if the set is empty."
msgstr ""

msgid "Remove all elements from the set."
msgstr ""

msgid "Note, the non-operator versions of the :meth:`update`, :meth:`intersection_update`, :meth:`difference_update`, and :meth:`symmetric_difference_update` methods will accept any iterable as an argument."
msgstr ""

msgid "Note, the *elem* argument to the :meth:`__contains__`, :meth:`remove`, and :meth:`discard` methods may be a set.  To support searching for an equivalent frozenset, the *elem* set is temporarily mutated during the search and then restored.  During the search, the *elem* set should not be read or mutated since it does not have a meaningful value."
msgstr ""

msgid "Mapping Types --- :class:`dict`"
msgstr ""

msgid "A :dfn:`mapping` object maps :term:`hashable` values to arbitrary objects. Mappings are mutable objects.  There is currently only one standard mapping type, the :dfn:`dictionary`.  (For other containers see the built in :class:`list`, :class:`set`, and :class:`tuple` classes, and the :mod:`collections` module.)"
msgstr ""

msgid "A dictionary's keys are *almost* arbitrary values.  Values that are not :term:`hashable`, that is, values containing lists, dictionaries or other mutable types (that are compared by value rather than by object identity) may not be used as keys.  Numeric types used for keys obey the normal rules for numeric comparison: if two numbers compare equal (such as ``1`` and ``1.0``) then they can be used interchangeably to index the same dictionary entry.  (Note however, that since computers store floating-point numbers as approximations it is usually unwise to use them as dictionary keys.)"
msgstr ""

msgid "Dictionaries can be created by placing a comma-separated list of ``key: value`` pairs within braces, for example: ``{'jack': 4098, 'sjoerd': 4127}`` or ``{4098: 'jack', 4127: 'sjoerd'}``, or by the :class:`dict` constructor."
msgstr ""

msgid "Return a new dictionary initialized from an optional positional argument or from a set of keyword arguments.  If no arguments are given, return a new empty dictionary.  If the positional argument *arg* is a mapping object, return a dictionary mapping the same keys to the same values as does the mapping object.  Otherwise the positional argument must be a sequence, a container that supports iteration, or an iterator object.  The elements of the argument must each also be of one of those kinds, and each must in turn contain exactly two objects.  The first is used as a key in the new dictionary, and the second as the key's value.  If a given key is seen more than once, the last value associated with it is retained in the new dictionary."
msgstr ""

msgid "If keyword arguments are given, the keywords themselves with their associated values are added as items to the dictionary.  If a key is specified both in the positional argument and as a keyword argument, the value associated with the keyword is retained in the dictionary.  For example, these all return a dictionary equal to ``{\"one\": 2, \"two\": 3}``:"
msgstr ""

msgid "``dict(one=2, two=3)``"
msgstr ""

msgid "``dict({'one': 2, 'two': 3})``"
msgstr ""

msgid "``dict(zip(('one', 'two'), (2, 3)))``"
msgstr ""

msgid "``dict([['two', 3], ['one', 2]])``"
msgstr ""

msgid "The first example only works for keys that are valid Python identifiers; the others work with any valid keys."
msgstr ""

msgid "These are the operations that dictionaries support (and therefore, custom mapping types should support too):"
msgstr ""

msgid "Return the number of items in the dictionary *d*."
msgstr ""

msgid "Return the item of *d* with key *key*.  Raises a :exc:`KeyError` if *key* is not in the map."
msgstr ""

msgid "If a subclass of dict defines a method :meth:`__missing__`, if the key *key* is not present, the ``d[key]`` operation calls that method with the key *key* as argument.  The ``d[key]`` operation then returns or raises whatever is returned or raised by the ``__missing__(key)`` call if the key is not present. No other operations or methods invoke :meth:`__missing__`. If :meth:`__missing__` is not defined, :exc:`KeyError` is raised. :meth:`__missing__` must be a method; it cannot be an instance variable. For an example, see :class:`collections.defaultdict`."
msgstr ""

msgid "Set ``d[key]`` to *value*."
msgstr ""

msgid "Remove ``d[key]`` from *d*.  Raises a :exc:`KeyError` if *key* is not in the map."
msgstr ""

msgid "Return ``True`` if *d* has a key *key*, else ``False``."
msgstr ""

msgid "Equivalent to ``not key in d``."
msgstr ""

msgid "Return an iterator over the keys of the dictionary.  This is a shortcut for ``iter(d.keys())``."
msgstr ""

msgid "Remove all items from the dictionary."
msgstr ""

msgid "Return a shallow copy of the dictionary."
msgstr ""

msgid "Create a new dictionary with keys from *seq* and values set to *value*."
msgstr ""

msgid ":meth:`fromkeys` is a class method that returns a new dictionary. *value* defaults to ``None``."
msgstr ""

msgid "Return the value for *key* if *key* is in the dictionary, else *default*. If *default* is not given, it defaults to ``None``, so that this method never raises a :exc:`KeyError`."
msgstr ""

msgid "Return a new view of the dictionary's items (``(key, value)`` pairs).  See below for documentation of view objects."
msgstr ""

msgid "Return a new view of the dictionary's keys.  See below for documentation of view objects."
msgstr ""

msgid "If *key* is in the dictionary, remove it and return its value, else return *default*.  If *default* is not given and *key* is not in the dictionary, a :exc:`KeyError` is raised."
msgstr ""

msgid "Remove and return an arbitrary ``(key, value)`` pair from the dictionary."
msgstr ""

msgid ":meth:`popitem` is useful to destructively iterate over a dictionary, as often used in set algorithms.  If the dictionary is empty, calling :meth:`popitem` raises a :exc:`KeyError`."
msgstr ""

msgid "If *key* is in the dictionary, return its value.  If not, insert *key* with a value of *default* and return *default*.  *default* defaults to ``None``."
msgstr ""

msgid "Update the dictionary with the key/value pairs from *other*, overwriting existing keys.  Return ``None``."
msgstr ""

msgid ":meth:`update` accepts either another dictionary object or an iterable of key/value pairs (as a tuple or other iterable of length two).  If keyword arguments are specified, the dictionary is then updated with those key/value pairs: ``d.update(red=1, blue=2)``."
msgstr ""

msgid "Return a new view of the dictionary's values.  See below for documentation of view objects."
msgstr ""

msgid "Dictionary view objects"
msgstr ""

msgid "The objects returned by :meth:`dict.keys`, :meth:`dict.values` and :meth:`dict.items` are *view objects*.  They provide a dynamic view on the dictionary's entries, which means that when the dictionary changes, the view reflects these changes."
msgstr ""

msgid "Dictionary views can be iterated over to yield their respective data, and support membership tests:"
msgstr ""

msgid "Return the number of entries in the dictionary."
msgstr ""

msgid "Return an iterator over the keys, values or items (represented as tuples of ``(key, value)``) in the dictionary."
msgstr ""

msgid "Keys and values are iterated over in an arbitrary order which is non-random, varies across Python implementations, and depends on the dictionary's history of insertions and deletions. If keys, values and items views are iterated over with no intervening modifications to the dictionary, the order of items will directly correspond.  This allows the creation of ``(value, key)`` pairs using :func:`zip`: ``pairs = zip(d.values(), d.keys())``.  Another way to create the same list is ``pairs = [(v, k) for (k, v) in d.items()]``."
msgstr ""

msgid "Iterating views while adding or deleting entries in the dictionary may raise a :exc:`RuntimeError` or fail to iterate over all entries."
msgstr ""

msgid "Return ``True`` if *x* is in the underlying dictionary's keys, values or items (in the latter case, *x* should be a ``(key, value)`` tuple)."
msgstr ""

msgid "Keys views are set-like since their entries are unique and hashable.  If all values are hashable, so that (key, value) pairs are unique and hashable, then the items view is also set-like.  (Values views are not treated as set-like since the entries are generally not unique.)  Then these set operations are available (\"other\" refers either to another view or a set):"
msgstr ""

msgid "Return the intersection of the dictview and the other object as a new set."
msgstr ""

msgid "Return the union of the dictview and the other object as a new set."
msgstr ""

msgid "Return the difference between the dictview and the other object (all elements in *dictview* that aren't in *other*) as a new set."
msgstr ""

msgid "Return the symmetric difference (all elements either in *dictview* or *other*, but not in both) of the dictview and the other object as a new set."
msgstr ""

msgid "An example of dictionary view usage::"
msgstr ""

msgid ">>> dishes = {'eggs': 2, 'sausage': 1, 'bacon': 1, 'spam': 500} >>> keys = dishes.keys() >>> values = dishes.values()  >>> # iteration >>> n = 0 >>> for val in values: ...     n += val >>> print(n) 504  >>> # keys and values are iterated over in the same order >>> list(keys) ['eggs', 'bacon', 'sausage', 'spam'] >>> list(values) [2, 1, 1, 500]  >>> # view objects are dynamic and reflect dict changes >>> del dishes['eggs'] >>> del dishes['sausage'] >>> list(keys) ['spam', 'bacon']  >>> # set operations >>> keys & {'eggs', 'bacon', 'salad'} {'bacon'}"
msgstr ""

msgid "memoryview type"
msgstr ""

msgid ":class:`memoryview` objects allow Python code to access the internal data of an object that supports the buffer protocol without copying.  Memory is generally interpreted as simple bytes."
msgstr ""

msgid "Create a :class:`memoryview` that references *obj*.  *obj* must support the buffer protocol.  Builtin objects that support the buffer protocol include :class:`bytes` and :class:`bytearray`."
msgstr ""

msgid "``len(view)`` returns the total number of bytes in the memoryview, *view*."
msgstr ""

msgid "A :class:`memoryview` supports slicing to expose its data.  Taking a single index will return a single byte.  Full slicing will result in a subview::"
msgstr ""

msgid ">>> v = memoryview(b'abcefg') >>> v[1] b'b' >>> v[-1] b'g' >>> v[1:4] <memory at 0x77ab28> >>> bytes(v[1:4]) b'bce' >>> v[3:-1] <memory at 0x744f18> >>> bytes(v[4:-1])"
msgstr ""

msgid "If the object the memory view is over supports changing its data, the memoryview supports slice assignment::"
msgstr ""

msgid ">>> data = bytearray(b'abcefg') >>> v = memoryview(data) >>> v.readonly False >>> v[0] = b'z' >>> data bytearray(b'zbcefg') >>> v[1:4] = b'123' >>> data bytearray(b'a123fg') >>> v[2] = b'spam' Traceback (most recent call last): File \"<stdin>\", line 1, in <module> ValueError: cannot modify size of memoryview object"
msgstr ""

msgid "Notice how the size of the memoryview object cannot be changed."
msgstr ""

msgid ":class:`memoryview` has two methods:"
msgstr ""

msgid "Return the data in the buffer as a bytestring."
msgstr ""

msgid "Return the data in the buffer as a list of integers. ::"
msgstr ""

msgid ">>> memoryview(b'abc').tolist() [97, 98, 99]"
msgstr ""

msgid "There are also several readonly attributes available:"
msgstr ""

msgid "A string containing the format (in :mod:`struct` module style) for each element in the view.  This defaults to ``'B'``, a simple bytestring."
msgstr ""

msgid "The size in bytes of each element of the memoryview."
msgstr ""

msgid "A tuple of integers the length of :attr:`ndim` giving the shape of the memory as a N-dimensional array."
msgstr ""

msgid "An integer indicating how many dimensions of a multi-dimensional array the memory represents."
msgstr ""

msgid "A tuple of integers the length of :attr:`ndim` giving the size in bytes to access each element for each dimension of the array."
msgstr ""

msgid "Context Manager Types"
msgstr ""

msgid "Python's :keyword:`with` statement supports the concept of a runtime context defined by a context manager.  This is implemented using two separate methods that allow user-defined classes to define a runtime context that is entered before the statement body is executed and exited when the statement ends."
msgstr ""

msgid "The :dfn:`context management protocol` consists of a pair of methods that need to be provided for a context manager object to define a runtime context:"
msgstr ""

msgid "Enter the runtime context and return either this object or another object related to the runtime context. The value returned by this method is bound to the identifier in the :keyword:`as` clause of :keyword:`with` statements using this context manager."
msgstr ""

msgid "An example of a context manager that returns itself is a file object. File objects return themselves from __enter__() to allow :func:`open` to be used as the context expression in a :keyword:`with` statement."
msgstr ""

msgid "An example of a context manager that returns a related object is the one returned by :func:`decimal.localcontext`. These managers set the active decimal context to a copy of the original decimal context and then return the copy. This allows changes to be made to the current decimal context in the body of the :keyword:`with` statement without affecting code outside the :keyword:`with` statement."
msgstr ""

msgid "Exit the runtime context and return a Boolean flag indicating if any exception that occurred should be suppressed. If an exception occurred while executing the body of the :keyword:`with` statement, the arguments contain the exception type, value and traceback information. Otherwise, all three arguments are ``None``."
msgstr ""

msgid "Returning a true value from this method will cause the :keyword:`with` statement to suppress the exception and continue execution with the statement immediately following the :keyword:`with` statement. Otherwise the exception continues propagating after this method has finished executing. Exceptions that occur during execution of this method will replace any exception that occurred in the body of the :keyword:`with` statement."
msgstr ""

msgid "The exception passed in should never be reraised explicitly - instead, this method should return a false value to indicate that the method completed successfully and does not want to suppress the raised exception. This allows context management code (such as ``contextlib.nested``) to easily detect whether or not an :meth:`__exit__` method has actually failed."
msgstr ""

msgid "Python defines several context managers to support easy thread synchronisation, prompt closure of files or other objects, and simpler manipulation of the active decimal arithmetic context. The specific types are not treated specially beyond their implementation of the context management protocol. See the :mod:`contextlib` module for some examples."
msgstr ""

msgid "Python's :term:`generator`\\s and the ``contextlib.contextmanager`` :term:`decorator` provide a convenient way to implement these protocols.  If a generator function is decorated with the ``contextlib.contextmanager`` decorator, it will return a context manager implementing the necessary :meth:`__enter__` and :meth:`__exit__` methods, rather than the iterator produced by an undecorated generator function."
msgstr ""

msgid "Note that there is no specific slot for any of these methods in the type structure for Python objects in the Python/C API. Extension types wanting to define these methods must provide them as a normal Python accessible method. Compared to the overhead of setting up the runtime context, the overhead of a single class dictionary lookup is negligible."
msgstr ""

msgid "Other Built-in Types"
msgstr ""

msgid "The interpreter supports several other kinds of objects. Most of these support only one or two operations."
msgstr ""

msgid "Modules"
msgstr ""

msgid "The only special operation on a module is attribute access: ``m.name``, where *m* is a module and *name* accesses a name defined in *m*'s symbol table. Module attributes can be assigned to.  (Note that the :keyword:`import` statement is not, strictly speaking, an operation on a module object; ``import foo`` does not require a module object named *foo* to exist, rather it requires an (external) *definition* for a module named *foo* somewhere.)"
msgstr ""

msgid "A special member of every module is :attr:`__dict__`. This is the dictionary containing the module's symbol table. Modifying this dictionary will actually change the module's symbol table, but direct assignment to the :attr:`__dict__` attribute is not possible (you can write ``m.__dict__['a'] = 1``, which defines ``m.a`` to be ``1``, but you can't write ``m.__dict__ = {}``).  Modifying :attr:`__dict__` directly is not recommended."
msgstr ""

msgid "Modules built into the interpreter are written like this: ``<module 'sys' (built-in)>``.  If loaded from a file, they are written as ``<module 'os' from '/usr/local/lib/pythonX.Y/os.pyc'>``."
msgstr ""

msgid "Classes and Class Instances"
msgstr ""

msgid "See :ref:`objects` and :ref:`class` for these."
msgstr ""

msgid "Function objects are created by function definitions.  The only operation on a function object is to call it: ``func(argument-list)``."
msgstr ""

msgid "There are really two flavors of function objects: built-in functions and user-defined functions.  Both support the same operation (to call the function), but the implementation is different, hence the different object types."
msgstr ""

msgid "See :ref:`function` for more information."
msgstr ""

msgid "Methods"
msgstr ""

msgid "Methods are functions that are called using the attribute notation. There are two flavors: built-in methods (such as :meth:`append` on lists) and class instance methods.  Built-in methods are described with the types that support them."
msgstr ""

msgid "If you access a method (a function defined in a class namespace) through an instance, you get a special object: a :dfn:`bound method` (also called :dfn:`instance method`) object. When called, it will add the ``self`` argument to the argument list.  Bound methods have two special read-only attributes: ``m.__self__`` is the object on which the method operates, and ``m.__func__`` is the function implementing the method.  Calling ``m(arg-1, arg-2, ..., arg-n)`` is completely equivalent to calling ``m.__func__(m.__self__, arg-1, arg-2, ..., arg-n)``."
msgstr ""

msgid "Like function objects, bound method objects support getting arbitrary attributes.  However, since method attributes are actually stored on the underlying function object (``meth.__func__``), setting method attributes on bound methods is disallowed.  Attempting to set a method attribute results in a :exc:`TypeError` being raised.  In order to set a method attribute, you need to explicitly set it on the underlying function object::"
msgstr ""

msgid "class C:     def method(self):         pass  c = C() c.method.__func__.whoami = 'my name is c'"
msgstr ""

msgid "See :ref:`types` for more information."
msgstr ""

msgid "Code Objects"
msgstr ""

msgid "Code objects are used by the implementation to represent \"pseudo-compiled\" executable Python code such as a function body. They differ from function objects because they don't contain a reference to their global execution environment.  Code objects are returned by the built-in :func:`compile` function and can be extracted from function objects through their :attr:`__code__` attribute. See also the :mod:`code` module."
msgstr ""

msgid "A code object can be executed or evaluated by passing it (instead of a source string) to the :func:`exec` or :func:`eval`  built-in functions."
msgstr ""

msgid "Type Objects"
msgstr ""

msgid "Type objects represent the various object types.  An object's type is accessed by the built-in function :func:`type`.  There are no special operations on types.  The standard module :mod:`types` defines names for all standard built-in types."
msgstr ""

msgid "Types are written like this: ``<class 'int'>``."
msgstr ""

msgid "The Null Object"
msgstr ""

msgid "This object is returned by functions that don't explicitly return a value.  It supports no special operations.  There is exactly one null object, named ``None`` (a built-in name)."
msgstr ""

msgid "It is written as ``None``."
msgstr ""

msgid "The Ellipsis Object"
msgstr ""

msgid "This object is commonly used by slicing (see :ref:`slicings`).  It supports no special operations.  There is exactly one ellipsis object, named :const:`Ellipsis` (a built-in name)."
msgstr ""

msgid "It is written as ``Ellipsis`` or ``...``."
msgstr ""

msgid "Boolean Values"
msgstr ""

msgid "Boolean values are the two constant objects ``False`` and ``True``.  They are used to represent truth values (although other values can also be considered false or true).  In numeric contexts (for example when used as the argument to an arithmetic operator), they behave like the integers 0 and 1, respectively. The built-in function :func:`bool` can be used to cast any value to a Boolean, if the value can be interpreted as a truth value (see section Truth Value Testing above)."
msgstr ""

msgid "They are written as ``False`` and ``True``, respectively."
msgstr ""

msgid "Internal Objects"
msgstr ""

msgid "See :ref:`types` for this information.  It describes stack frame objects, traceback objects, and slice objects."
msgstr ""

msgid "Special Attributes"
msgstr ""

msgid "The implementation adds a few special read-only attributes to several object types, where they are relevant.  Some of these are not reported by the :func:`dir` built-in function."
msgstr ""

msgid "A dictionary or other mapping object used to store an object's (writable) attributes."
msgstr ""

msgid "The class to which a class instance belongs."
msgstr ""

msgid "The tuple of base classes of a class object."
msgstr ""

msgid "The name of the class or type."
msgstr ""

msgid "The following attributes are only supported by :term:`new-style class`\\ es."
msgstr ""

msgid "This attribute is a tuple of classes that are considered when looking for base classes during method resolution."
msgstr ""

msgid "This method can be overridden by a metaclass to customize the method resolution order for its instances.  It is called at class instantiation, and its result is stored in :attr:`__mro__`."
msgstr ""

msgid "Each new-style class keeps a list of weak references to its immediate subclasses.  This method returns a list of all those references still alive. Example::"
msgstr ""

msgid ">>> int.__subclasses__() [<type 'bool'>]"
msgstr ""

msgid "Additional information on these special methods may be found in the Python Reference Manual (:ref:`customization`)."
msgstr ""

msgid "As a consequence, the list ``[1, 2]`` is considered equal to ``[1.0, 2.0]``, and similarly for tuples."
msgstr ""

msgid "They must have since the parser can't tell the type of the operands."
msgstr ""

msgid "To format only a tuple you should therefore provide a singleton tuple whose only element is the tuple to be formatted."
msgstr ""

msgid ":mod:`string` --- Common string operations"
msgstr ""

msgid "The :mod:`string` module contains a number of useful constants and classes, as well as some deprecated legacy functions that are also available as methods on strings. In addition, Python's built-in string classes support the sequence type methods described in the :ref:`typesseq` section, and also the string-specific methods described in the :ref:`string-methods` section. To output formatted strings, see the :ref:`string-formatting` section. Also, see the :mod:`re` module for string functions based on regular expressions."
msgstr ""

msgid "String constants"
msgstr ""

msgid "The concatenation of the :const:`ascii_lowercase` and :const:`ascii_uppercase` constants described below.  This value is not locale-dependent."
msgstr ""

msgid "The lowercase letters ``'abcdefghijklmnopqrstuvwxyz'``.  This value is not locale-dependent and will not change."
msgstr ""

msgid "The uppercase letters ``'ABCDEFGHIJKLMNOPQRSTUVWXYZ'``.  This value is not locale-dependent and will not change."
msgstr ""

msgid "The string ``'0123456789'``."
msgstr ""

msgid "The string ``'0123456789abcdefABCDEF'``."
msgstr ""

msgid "The string ``'01234567'``."
msgstr ""

msgid "String of ASCII characters which are considered punctuation characters in the ``C`` locale."
msgstr ""

msgid "String of ASCII characters which are considered printable.  This is a combination of :const:`digits`, :const:`ascii_letters`, :const:`punctuation`, and :const:`whitespace`."
msgstr ""

msgid "A string containing all ASCII characters that are considered whitespace. This includes the characters space, tab, linefeed, return, formfeed, and vertical tab."
msgstr ""

msgid "The built-in string class provides the ability to do complex variable substitutions and value formatting via the :func:`format` method described in :pep:`3101`.  The :class:`Formatter` class in the :mod:`string` module allows you to create and customize your own string formatting behaviors using the same implementation as the built-in :meth:`format` method."
msgstr ""

msgid "The :class:`Formatter` class has the following public methods:"
msgstr ""

msgid ":meth:`format` is the primary API method.  It takes a format template string, and an arbitrary set of positional and keyword argument. :meth:`format` is just a wrapper that calls :meth:`vformat`."
msgstr ""

msgid "This function does the actual work of formatting.  It is exposed as a separate function for cases where you want to pass in a predefined dictionary of arguments, rather than unpacking and repacking the dictionary as individual arguments using the ``*args`` and ``**kwds`` syntax.  :meth:`vformat` does the work of breaking up the format template string into character data and replacement fields.  It calls the various methods described below."
msgstr ""

msgid "In addition, the :class:`Formatter` defines a number of methods that are intended to be replaced by subclasses:"
msgstr ""

msgid "Loop over the format_string and return an iterable of tuples (*literal_text*, *field_name*, *format_spec*, *conversion*).  This is used by :meth:`vformat` to break the string in to either literal text, or replacement fields."
msgstr ""

msgid "The values in the tuple conceptually represent a span of literal text followed by a single replacement field.  If there is no literal text (which can happen if two replacement fields occur consecutively), then *literal_text* will be a zero-length string.  If there is no replacement field, then the values of *field_name*, *format_spec* and *conversion* will be ``None``."
msgstr ""

msgid "Given *field_name* as returned by :meth:`parse` (see above), convert it to an object to be formatted.  Returns a tuple (obj, used_key).  The default version takes strings of the form defined in :pep:`3101`, such as \"0[name]\" or \"label.title\".  *args* and *kwargs* are as passed in to :meth:`vformat`.  The return value *used_key* has the same meaning as the *key* parameter to :meth:`get_value`."
msgstr ""

msgid "Retrieve a given field value.  The *key* argument will be either an integer or a string.  If it is an integer, it represents the index of the positional argument in *args*; if it is a string, then it represents a named argument in *kwargs*."
msgstr ""

msgid "The *args* parameter is set to the list of positional arguments to :meth:`vformat`, and the *kwargs* parameter is set to the dictionary of keyword arguments."
msgstr ""

msgid "For compound field names, these functions are only called for the first component of the field name; Subsequent components are handled through normal attribute and indexing operations."
msgstr ""

msgid "So for example, the field expression '0.name' would cause :meth:`get_value` to be called with a *key* argument of 0.  The ``name`` attribute will be looked up after :meth:`get_value` returns by calling the built-in :func:`getattr` function."
msgstr ""

msgid "If the index or keyword refers to an item that does not exist, then an :exc:`IndexError` or :exc:`KeyError` should be raised."
msgstr ""

msgid "Implement checking for unused arguments if desired.  The arguments to this function is the set of all argument keys that were actually referred to in the format string (integers for positional arguments, and strings for named arguments), and a reference to the *args* and *kwargs* that was passed to vformat.  The set of unused args can be calculated from these parameters.  :meth:`check_unused_args` is assumed to throw an exception if the check fails."
msgstr ""

msgid ":meth:`format_field` simply calls the global :func:`format` built-in.  The method is provided so that subclasses can override it."
msgstr ""

msgid "Converts the value (returned by :meth:`get_field`) given a conversion type (as in the tuple returned by the :meth:`parse` method.)  The default version understands 'r' (repr) and 's' (str) conversion types."
msgstr ""

msgid "Format String Syntax"
msgstr ""

msgid "The :meth:`str.format` method and the :class:`Formatter` class share the same syntax for format strings (although in the case of :class:`Formatter`, subclasses can define their own format string syntax.)"
msgstr ""

msgid "Format strings contain \"replacement fields\" surrounded by curly braces ``{}``. Anything that is not contained in braces is considered literal text, which is copied unchanged to the output.  If you need to include a brace character in the literal text, it can be escaped by doubling: ``{{`` and ``}}``."
msgstr ""

msgid "The grammar for a replacement field is as follows:"
msgstr ""

msgid "In less formal terms, the replacement field can start with a *field_name* that specifies the object whose value is to be formatted and inserted into the output instead of the replacement field. The *field_name* is optionally followed by a  *conversion* field, which is preceded by an exclamation point ``'!'``, and a *format_spec*, which is preceded by a colon ``':'``.  These specify a non-default format for the replacement value."
msgstr ""

msgid "The *field_name* itself begins with an *arg_name* that is either either a number or a keyword.  If it's a number, it refers to a positional argument, and if it's a keyword, it refers to a named keyword argument.  If the numerical arg_names in a format string are 0, 1, 2, ... in sequence, they can all be omitted (not just some) and the numbers 0, 1, 2, ... will be automatically inserted in that order. The *arg_name* can be followed by any number of index or attribute expressions. An expression of the form ``'.name'`` selects the named attribute using :func:`getattr`, while an expression of the form ``'[index]'`` does an index lookup using :func:`__getitem__`."
msgstr ""

msgid "Some simple format string examples::"
msgstr ""

msgid "\"First, thou shalt count to {0}\" # References first positional argument \"Bring me a {}\"                  # Implicitly references the first positional argument \"From {} to {}\"                  # Same as \"From {0} to {1}\" \"My quest is {name}\"             # References keyword argument 'name' \"Weight in tons {0.weight}\"      # 'weight' attribute of first positional arg \"Units destroyed: {players[0]}\"  # First element of keyword argument 'players'."
msgstr ""

msgid "The *conversion* field causes a type coercion before formatting.  Normally, the job of formatting a value is done by the :meth:`__format__` method of the value itself.  However, in some cases it is desirable to force a type to be formatted as a string, overriding its own definition of formatting.  By converting the value to a string before calling :meth:`__format__`, the normal formatting logic is bypassed."
msgstr ""

msgid "Three conversion flags are currently supported: ``'!s'`` which calls :func:`str` on the value, ``'!r'`` which calls :func:`repr` and ``'!a'`` which calls :func:`ascii`."
msgstr ""

msgid "Some examples::"
msgstr ""

msgid "\"Harold's a clever {0!s}\"        # Calls str() on the argument first \"Bring out the holy {name!r}\"    # Calls repr() on the argument first \"More {!a}\"                      # Calls ascii() on the argument first"
msgstr ""

msgid "The *format_spec* field contains a specification of how the value should be presented, including such details as field width, alignment, padding, decimal precision and so on.  Each value type can define its own \"formatting mini-language\" or interpretation of the *format_spec*."
msgstr ""

msgid "Most built-in types support a common formatting mini-language, which is described in the next section."
msgstr ""

msgid "A *format_spec* field can also include nested replacement fields within it. These nested replacement fields can contain only a field name; conversion flags and format specifications are not allowed.  The replacement fields within the format_spec are substituted before the *format_spec* string is interpreted. This allows the formatting of a value to be dynamically specified."
msgstr ""

msgid "For example, suppose you wanted to have a replacement field whose field width is determined by another variable::"
msgstr ""

msgid "\"A man with two {0:{1}}\".format(\"noses\", 10)"
msgstr ""

msgid "This would first evaluate the inner replacement field, making the format string effectively::"
msgstr ""

msgid "\"A man with two {0:10}\""
msgstr ""

msgid "Then the outer replacement field would be evaluated, producing::"
msgstr ""

msgid "\"noses     \""
msgstr ""

msgid "Which is substituted into the string, yielding::"
msgstr ""

msgid "\"A man with two noses     \""
msgstr ""

msgid "(The extra space is because we specified a field width of 10, and because left alignment is the default for strings.)"
msgstr ""

msgid "Format Specification Mini-Language"
msgstr ""

msgid "\"Format specifications\" are used within replacement fields contained within a format string to define how individual values are presented (see :ref:`formatstrings`.)  They can also be passed directly to the built-in :func:`format` function.  Each formattable type may define how the format specification is to be interpreted."
msgstr ""

msgid "Most built-in types implement the following options for format specifications, although some of the formatting options are only supported by the numeric types."
msgstr ""

msgid "A general convention is that an empty format string (``\"\"``) produces the same result as if you had called :func:`str` on the value. A non-empty format string typically modifies the result."
msgstr ""

msgid "The general form of a *standard format specifier* is:"
msgstr ""

msgid "The *fill* character can be any character other than '}' (which signifies the end of the field).  The presence of a fill character is signaled by the *next* character, which must be one of the alignment options. If the second character of *format_spec* is not a valid alignment option, then it is assumed that both the fill character and the alignment option are absent."
msgstr ""

msgid "The meaning of the various alignment options is as follows:"
msgstr ""

msgid "Option"
msgstr ""

msgid "``'<'``"
msgstr ""

msgid "Forces the field to be left-aligned within the available space (This is the default.)"
msgstr ""

msgid "``'>'``"
msgstr ""

msgid "Forces the field to be right-aligned within the available space."
msgstr ""

msgid "``'='``"
msgstr ""

msgid "Forces the padding to be placed after the sign (if any) but before the digits.  This is used for printing fields in the form '+000000120'. This alignment option is only valid for numeric types."
msgstr ""

msgid "``'^'``"
msgstr ""

msgid "Forces the field to be centered within the available space."
msgstr ""

msgid "Note that unless a minimum field width is defined, the field width will always be the same size as the data to fill it, so that the alignment option has no meaning in this case."
msgstr ""

msgid "The *sign* option is only valid for number types, and can be one of the following:"
msgstr ""

msgid "indicates that a sign should be used for both positive as well as negative numbers."
msgstr ""

msgid "indicates that a sign should be used only for negative numbers (this is the default behavior)."
msgstr ""

msgid "space"
msgstr ""

msgid "indicates that a leading space should be used on positive numbers, and a minus sign on negative numbers."
msgstr ""

msgid "The ``'#'`` option is only valid for integers, and only for binary, octal, or hexadecimal output.  If present, it specifies that the output will be prefixed by ``'0b'``, ``'0o'``, or ``'0x'``, respectively."
msgstr ""

msgid "The ``','`` option signals the use of a comma for a thousands separator. For a locale aware separator, use the ``'n'`` integer presentation type instead."
msgstr ""

msgid "*width* is a decimal integer defining the minimum field width.  If not specified, then the field width will be determined by the content."
msgstr ""

msgid "If the *width* field is preceded by a zero (``'0'``) character, this enables zero-padding.  This is equivalent to an *alignment* type of ``'='`` and a *fill* character of ``'0'``."
msgstr ""

msgid "The *precision* is a decimal number indicating how many digits should be displayed after the decimal point for a floating point value formatted with ``'f'`` and ``'F'``, or before and after the decimal point for a floating point value formatted with ``'g'`` or ``'G'``.  For non-number types the field indicates the maximum field size - in other words, how many characters will be used from the field content. The *precision* is not allowed for integer values."
msgstr ""

msgid "Finally, the *type* determines how the data should be presented."
msgstr ""

msgid "The available string presentation types are:"
msgstr ""

msgid "String format. This is the default type for strings and may be omitted."
msgstr ""

msgid "The same as ``'s'``."
msgstr ""

msgid "The available integer presentation types are:"
msgstr ""

msgid "Binary format. Outputs the number in base 2."
msgstr ""

msgid "Character. Converts the integer to the corresponding unicode character before printing."
msgstr ""

msgid "Decimal Integer. Outputs the number in base 10."
msgstr ""

msgid "Octal format. Outputs the number in base 8."
msgstr ""

msgid "Hex format. Outputs the number in base 16, using lower- case letters for the digits above 9."
msgstr ""

msgid "Hex format. Outputs the number in base 16, using upper- case letters for the digits above 9."
msgstr ""

msgid "Number. This is the same as ``'d'``, except that it uses the current locale setting to insert the appropriate number separator characters."
msgstr ""

msgid "The same as ``'d'``."
msgstr ""

msgid "In addition to the above presentation types, integers can be formatted with the floating point presentation types listed below (except ``'n'`` and None). When doing so, :func:`float` is used to convert the integer to a floating point number before formatting."
msgstr ""

msgid "The available presentation types for floating point and decimal values are:"
msgstr ""

msgid "Exponent notation. Prints the number in scientific notation using the letter 'e' to indicate the exponent."
msgstr ""

msgid "Exponent notation. Same as ``'e'`` except it uses an upper case 'E' as the separator character."
msgstr ""

msgid "Fixed point. Displays the number as a fixed-point number."
msgstr ""

msgid "Fixed point. Same as ``'f'``, but converts ``nan`` to ``NAN`` and ``inf`` to ``INF``."
msgstr ""

msgid "General format.  For a given precision ``p >= 1``, this rounds the number to ``p`` significant digits and then formats the result in either fixed-point format or in scientific notation, depending on its magnitude."
msgstr ""

msgid "The precise rules are as follows: suppose that the result formatted with presentation type ``'e'`` and precision ``p-1`` would have exponent ``exp``.  Then if ``-4 <= exp < p``, the number is formatted with presentation type ``'f'`` and precision ``p-1-exp``.  Otherwise, the number is formatted with presentation type ``'e'`` and precision ``p-1``. In both cases insignificant trailing zeros are removed from the significand, and the decimal point is also removed if there are no remaining digits following it."
msgstr ""

msgid "Postive and negative infinity, positive and negative zero, and nans, are formatted as ``inf``, ``-inf``, ``0``, ``-0`` and ``nan`` respectively, regardless of the precision."
msgstr ""

msgid "A precision of ``0`` is treated as equivalent to a precision of ``1``."
msgstr ""

msgid "General format. Same as ``'g'`` except switches to ``'E'`` if the number gets too large. The representations of infinity and NaN are uppercased, too."
msgstr ""

msgid "Number. This is the same as ``'g'``, except that it uses the current locale setting to insert the appropriate number separator characters."
msgstr ""

msgid "Percentage. Multiplies the number by 100 and displays in fixed (``'f'``) format, followed by a percent sign."
msgstr ""

msgid "Similar to ``'g'``, except with at least one digit past the decimal point and a default precision of 12. This is intended to match :func:`str`, except you can add the other format modifiers."
msgstr ""

msgid "Template strings"
msgstr ""

msgid "Templates provide simpler string substitutions as described in :pep:`292`. Instead of the normal ``%``\\ -based substitutions, Templates support ``$``\\ -based substitutions, using the following rules:"
msgstr ""

msgid "``$$`` is an escape; it is replaced with a single ``$``."
msgstr ""

msgid "``$identifier`` names a substitution placeholder matching a mapping key of ``\"identifier\"``.  By default, ``\"identifier\"`` must spell a Python identifier.  The first non-identifier character after the ``$`` character terminates this placeholder specification."
msgstr ""

msgid "``${identifier}`` is equivalent to ``$identifier``.  It is required when valid identifier characters follow the placeholder but are not part of the placeholder, such as ``\"${noun}ification\"``."
msgstr ""

msgid "Any other appearance of ``$`` in the string will result in a :exc:`ValueError` being raised."
msgstr ""

msgid "The :mod:`string` module provides a :class:`Template` class that implements these rules.  The methods of :class:`Template` are:"
msgstr ""

msgid "The constructor takes a single argument which is the template string."
msgstr ""

msgid "Performs the template substitution, returning a new string.  *mapping* is any dictionary-like object with keys that match the placeholders in the template.  Alternatively, you can provide keyword arguments, where the keywords are the placeholders.  When both *mapping* and *kwds* are given and there are duplicates, the placeholders from *kwds* take precedence."
msgstr ""

msgid "Like :meth:`substitute`, except that if placeholders are missing from *mapping* and *kwds*, instead of raising a :exc:`KeyError` exception, the original placeholder will appear in the resulting string intact.  Also, unlike with :meth:`substitute`, any other appearances of the ``$`` will simply return ``$`` instead of raising :exc:`ValueError`."
msgstr ""

msgid "While other exceptions may still occur, this method is called \"safe\" because substitutions always tries to return a usable string instead of raising an exception.  In another sense, :meth:`safe_substitute` may be anything other than safe, since it will silently ignore malformed templates containing dangling delimiters, unmatched braces, or placeholders that are not valid Python identifiers."
msgstr ""

msgid ":class:`Template` instances also provide one public data attribute:"
msgstr ""

msgid "This is the object passed to the constructor's *template* argument.  In general, you shouldn't change it, but read-only access is not enforced."
msgstr ""

msgid "Here is an example of how to use a Template:"
msgstr ""

msgid ">>> from string import Template >>> s = Template('$who likes $what') >>> s.substitute(who='tim', what='kung pao') 'tim likes kung pao' >>> d = dict(who='tim') >>> Template('Give $who $100').substitute(d) Traceback (most recent call last): [...] ValueError: Invalid placeholder in string: line 1, col 10 >>> Template('$who likes $what').substitute(d) Traceback (most recent call last): [...] KeyError: 'what' >>> Template('$who likes $what').safe_substitute(d) 'tim likes $what'"
msgstr ""

msgid "Advanced usage: you can derive subclasses of :class:`Template` to customize the placeholder syntax, delimiter character, or the entire regular expression used to parse template strings.  To do this, you can override these class attributes:"
msgstr ""

msgid "*delimiter* -- This is the literal string describing a placeholder introducing delimiter.  The default value ``$``.  Note that this should *not* be a regular expression, as the implementation will call :meth:`re.escape` on this string as needed."
msgstr ""

msgid "*idpattern* -- This is the regular expression describing the pattern for non-braced placeholders (the braces will be added automatically as appropriate).  The default value is the regular expression ``[_a-z][_a-z0-9]*``."
msgstr ""

msgid "Alternatively, you can provide the entire regular expression pattern by overriding the class attribute *pattern*.  If you do this, the value must be a regular expression object with four named capturing groups.  The capturing groups correspond to the rules given above, along with the invalid placeholder rule:"
msgstr ""

msgid "*escaped* -- This group matches the escape sequence, e.g. ``$$``, in the default pattern."
msgstr ""

msgid "*named* -- This group matches the unbraced placeholder name; it should not include the delimiter in capturing group."
msgstr ""

msgid "*braced* -- This group matches the brace enclosed placeholder name; it should not include either the delimiter or braces in the capturing group."
msgstr ""

msgid "*invalid* -- This group matches any other delimiter pattern (usually a single delimiter), and it should appear last in the regular expression."
msgstr ""

msgid "Helper functions"
msgstr ""

msgid "Split the argument into words using :meth:`str.split`, capitalize each word using :meth:`str.capitalize`, and join the capitalized words using :meth:`str.join`.  If the optional second argument *sep* is absent or ``None``, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise *sep* is used to split and join the words."
msgstr ""

msgid ":mod:`stringprep` --- Internet String Preparation"
msgstr ""

msgid "When identifying things (such as host names) in the internet, it is often necessary to compare such identifications for \"equality\". Exactly how this comparison is executed may depend on the application domain, e.g. whether it should be case-insensitive or not. It may be also necessary to restrict the possible identifications, to allow only identifications consisting of \"printable\" characters."
msgstr ""

msgid ":rfc:`3454` defines a procedure for \"preparing\" Unicode strings in internet protocols. Before passing strings onto the wire, they are processed with the preparation procedure, after which they have a certain normalized form. The RFC defines a set of tables, which can be combined into profiles. Each profile must define which tables it uses, and what other optional parts of the ``stringprep`` procedure are part of the profile. One example of a ``stringprep`` profile is ``nameprep``, which is used for internationalized domain names."
msgstr ""

msgid "The module :mod:`stringprep` only exposes the tables from RFC 3454. As these tables would be very large to represent them as dictionaries or lists, the module uses the Unicode character database internally. The module source code itself was generated using the ``mkstringprep.py`` utility."
msgstr ""

msgid "As a result, these tables are exposed as functions, not as data structures. There are two kinds of tables in the RFC: sets and mappings. For a set, :mod:`stringprep` provides the \"characteristic function\", i.e. a function that returns true if the parameter is part of the set. For mappings, it provides the mapping function: given the key, it returns the associated value. Below is a list of all functions available in the module."
msgstr ""

msgid "Determine whether *code* is in tableA.1 (Unassigned code points in Unicode 3.2)."
msgstr ""

msgid "Determine whether *code* is in tableB.1 (Commonly mapped to nothing)."
msgstr ""

msgid "Return the mapped value for *code* according to tableB.2 (Mapping for case-folding used with NFKC)."
msgstr ""

msgid "Return the mapped value for *code* according to tableB.3 (Mapping for case-folding used with no normalization)."
msgstr ""

msgid "Determine whether *code* is in tableC.1.1  (ASCII space characters)."
msgstr ""

msgid "Determine whether *code* is in tableC.1.2  (Non-ASCII space characters)."
msgstr ""

msgid "Determine whether *code* is in tableC.1  (Space characters, union of C.1.1 and C.1.2)."
msgstr ""

msgid "Determine whether *code* is in tableC.2.1  (ASCII control characters)."
msgstr ""

msgid "Determine whether *code* is in tableC.2.2  (Non-ASCII control characters)."
msgstr ""

msgid "Determine whether *code* is in tableC.2  (Control characters, union of C.2.1 and C.2.2)."
msgstr ""

msgid "Determine whether *code* is in tableC.3  (Private use)."
msgstr ""

msgid "Determine whether *code* is in tableC.4  (Non-character code points)."
msgstr ""

msgid "Determine whether *code* is in tableC.5  (Surrogate codes)."
msgstr ""

msgid "Determine whether *code* is in tableC.6  (Inappropriate for plain text)."
msgstr ""

msgid "Determine whether *code* is in tableC.7  (Inappropriate for canonical representation)."
msgstr ""

msgid "Determine whether *code* is in tableC.8  (Change display properties or are deprecated)."
msgstr ""

msgid "Determine whether *code* is in tableC.9  (Tagging characters)."
msgstr ""

msgid "Determine whether *code* is in tableD.1  (Characters with bidirectional property \"R\" or \"AL\")."
msgstr ""

msgid "Determine whether *code* is in tableD.2  (Characters with bidirectional property \"L\")."
msgstr ""

msgid "String Services"
msgstr ""

msgid "The modules described in this chapter provide a wide range of string manipulation operations."
msgstr ""

msgid "In addition, Python's built-in string classes support the sequence type methods described in the :ref:`typesseq` section, and also the string-specific methods described in the :ref:`string-methods` section.  To output formatted strings, see the :ref:`string-formatting` section. Also, see the :mod:`re` module for string functions based on regular expressions."
msgstr ""

msgid ":mod:`struct` --- Interpret bytes as packed binary data"
msgstr ""

msgid "This module performs conversions between Python values and C structs represented as Python :class:`bytes` objects.  This can be used in handling binary data stored in files or from network connections, among other sources.  It uses :ref:`struct-format-strings` as compact descriptions of the layout of the C structs and the intended conversion to/from Python values."
msgstr ""

msgid "By default, the result of packing a given C struct includes pad bytes in order to maintain proper alignment for the C types involved; similarly, alignment is taken into account when unpacking.  This behavior is chosen so that the bytes of a packed struct correspond exactly to the layout in memory of the corresponding C struct.  To handle platform-independent data formats or omit implicit pad bytes, use `standard` size and alignment instead of `native` size and alignment: see :ref:`struct-alignment` for details."
msgstr ""

msgid "Functions and Exceptions"
msgstr ""

msgid "The module defines the following exception and functions:"
msgstr ""

msgid "Exception raised on various occasions; argument is a string describing what is wrong."
msgstr ""

msgid "Return a bytes object containing the values *v1*, *v2*, ... packed according to the format string *fmt*.  The arguments must match the values required by the format exactly."
msgstr ""

msgid "Pack the values *v1*, *v2*, ... according to the format string *fmt* and write the packed bytes into the writable buffer *buffer* starting at position *offset*. Note that *offset* is a required argument."
msgstr ""

msgid "Unpack from the buffer *buffer* (presumably packed by ``pack(fmt, ...)``) according to the format string *fmt*.  The result is a tuple even if it contains exactly one item.  The buffer must contain exactly the amount of data required by the format (``len(bytes)`` must equal ``calcsize(fmt)``)."
msgstr ""

msgid "Unpack from *buffer* starting at position *offset*, according to the format string *fmt*.  The result is a tuple even if it contains exactly one item.  *buffer* must contain at least the amount of data required by the format (``len(buffer[offset:])`` must be at least ``calcsize(fmt)``)."
msgstr ""

msgid "Return the size of the struct (and hence of the bytes object produced by ``pack(fmt, ...)``) corresponding to the format string *fmt*."
msgstr ""

msgid "Format Strings"
msgstr ""

msgid "Format strings are the mechanism used to specify the expected layout when packing and unpacking data.  They are built up from :ref:`format-characters`, which specify the type of data being packed/unpacked.  In addition, there are special characters for controlling the :ref:`struct-alignment`."
msgstr ""

msgid "Byte Order, Size, and Alignment"
msgstr ""

msgid "By default, C types are represented in the machine's native format and byte order, and properly aligned by skipping pad bytes if necessary (according to the rules used by the C compiler)."
msgstr ""

msgid "Alternatively, the first character of the format string can be used to indicate the byte order, size and alignment of the packed data, according to the following table:"
msgstr ""

msgid "Byte order"
msgstr ""

msgid "Size"
msgstr ""

msgid "Alignment"
msgstr ""

msgid "``@``"
msgstr ""

msgid "native"
msgstr ""

msgid "``=``"
msgstr ""

msgid "standard"
msgstr ""

msgid "none"
msgstr ""

msgid "little-endian"
msgstr ""

msgid "big-endian"
msgstr ""

msgid "``!``"
msgstr ""

msgid "network (= big-endian)"
msgstr ""

msgid "If the first character is not one of these, ``'@'`` is assumed."
msgstr ""

msgid "Native byte order is big-endian or little-endian, depending on the host system. For example, Intel x86 and AMD64 (x86-64) are little-endian; Motorola 68000 and PowerPC G5 are big-endian; ARM and Intel Itanium feature switchable endianness (bi-endian). Use ``sys.byteorder`` to check the endianness of your system."
msgstr ""

msgid "Native size and alignment are determined using the C compiler's ``sizeof`` expression.  This is always combined with native byte order."
msgstr ""

msgid "Standard size depends only on the format character;  see the table in the :ref:`format-characters` section."
msgstr ""

msgid "Note the difference between ``'@'`` and ``'='``: both use native byte order, but the size and alignment of the latter is standardized."
msgstr ""

msgid "The form ``'!'`` is available for those poor souls who claim they can't remember whether network byte order is big-endian or little-endian."
msgstr ""

msgid "There is no way to indicate non-native byte order (force byte-swapping); use the appropriate choice of ``'<'`` or ``'>'``."
msgstr ""

msgid "Padding is only automatically added between successive structure members. No padding is added at the beginning or the end of the encoded struct."
msgstr ""

msgid "No padding is added when using non-native size and alignment, e.g. with '<', '>', '=', and '!'."
msgstr ""

msgid "To align the end of a structure to the alignment requirement of a particular type, end the format with the code for that type with a repeat count of zero.  See :ref:`struct-examples`."
msgstr ""

msgid "Format Characters"
msgstr ""

msgid "Format characters have the following meaning; the conversion between C and Python values should be obvious given their types.  The 'Standard size' column refers to the size of the packed value in bytes when using standard size; that is, when the format string starts with one of ``'<'``, ``'>'``, ``'!'`` or ``'='``.  When using native size, the size of the packed value is platform-dependent."
msgstr ""

msgid "Standard size"
msgstr ""

msgid "``x``"
msgstr ""

msgid "pad byte"
msgstr ""

msgid "no value"
msgstr ""

msgid "``c``"
msgstr ""

msgid "bytes of length 1"
msgstr ""

msgid "``b``"
msgstr ""

msgid ":ctype:`signed char`"
msgstr ""

msgid "integer"
msgstr ""

msgid "\\(1),\\(4)"
msgstr ""

msgid "``B``"
msgstr ""

msgid ":ctype:`_Bool`"
msgstr ""

msgid "bool"
msgstr ""

msgid "``h``"
msgstr ""

msgid "``H``"
msgstr ""

msgid "``i``"
msgstr ""

msgid "``I``"
msgstr ""

msgid "``l``"
msgstr ""

msgid "``L``"
msgstr ""

msgid "``q``"
msgstr ""

msgid ":ctype:`long long`"
msgstr ""

msgid "\\(3), \\(4)"
msgstr ""

msgid "``Q``"
msgstr ""

msgid ":ctype:`unsigned long long`"
msgstr ""

msgid "``f``"
msgstr ""

msgid "``d``"
msgstr ""

msgid "``s``"
msgstr ""

msgid ":ctype:`char[]`"
msgstr ""

msgid "bytes"
msgstr ""

msgid "``p``"
msgstr ""

msgid "``P``"
msgstr ""

msgid ":ctype:`void \\*`"
msgstr ""

msgid "The ``c``, ``s`` and ``p`` conversion codes operate on :class:`bytes` objects, but packing with such codes also supports :class:`str` objects, which are encoded using UTF-8."
msgstr ""

msgid "The ``'?'`` conversion code corresponds to the :ctype:`_Bool` type defined by C99. If this type is not available, it is simulated using a :ctype:`char`. In standard mode, it is always represented by one byte."
msgstr ""

msgid "The ``'q'`` and ``'Q'`` conversion codes are available in native mode only if the platform C compiler supports C :ctype:`long long`, or, on Windows, :ctype:`__int64`.  They are always available in standard modes."
msgstr ""

msgid "When attempting to pack a non-integer using any of the integer conversion codes, if the non-integer has a :meth:`__index__` method then that method is called to convert the argument to an integer before packing."
msgstr ""

msgid "For the ``'f'`` and ``'d'`` conversion codes, the packed representation uses the IEEE 754 binary32 (for ``'f'``) or binary64 (for ``'d'``) format, regardless of the floating-point format used by the platform."
msgstr ""

msgid "The ``'P'`` format character is only available for the native byte ordering (selected as the default or with the ``'@'`` byte order character). The byte order character ``'='`` chooses to use little- or big-endian ordering based on the host system. The struct module does not interpret this as native ordering, so the ``'P'`` format is not available."
msgstr ""

msgid "A format character may be preceded by an integral repeat count.  For example, the format string ``'4h'`` means exactly the same as ``'hhhh'``."
msgstr ""

msgid "Whitespace characters between formats are ignored; a count and its format must not contain whitespace though."
msgstr ""

msgid "For the ``'s'`` format character, the count is interpreted as the length of the bytes, not a repeat count like for the other format characters; for example, ``'10s'`` means a single 10-byte string, while ``'10c'`` means 10 characters. For packing, the string is truncated or padded with null bytes as appropriate to make it fit. For unpacking, the resulting bytes object always has exactly the specified number of bytes.  As a special case, ``'0s'`` means a single, empty string (while ``'0c'`` means 0 characters)."
msgstr ""

msgid "When packing a value ``x`` using one of the integer formats (``'b'``, ``'B'``, ``'h'``, ``'H'``, ``'i'``, ``'I'``, ``'l'``, ``'L'``, ``'q'``, ``'Q'``), if ``x`` is outside the valid range for that format then :exc:`struct.error` is raised."
msgstr ""

msgid "The ``'p'`` format character encodes a \"Pascal string\", meaning a short variable-length string stored in a fixed number of bytes. The count is the total number of bytes stored.  The first byte stored is the length of the string, or 255, whichever is smaller.  The bytes of the string follow.  If the string passed in to :func:`pack` is too long (longer than the count minus 1), only the leading count-1 bytes of the string are stored.  If the string is shorter than count-1, it is padded with null bytes so that exactly count bytes in all are used.  Note that for :func:`unpack`, the ``'p'`` format character consumes count bytes, but that the string returned can never contain more than 255 bytes."
msgstr ""

msgid "For the ``'?'`` format character, the return value is either :const:`True` or :const:`False`. When packing, the truth value of the argument object is used. Either 0 or 1 in the native or standard bool representation will be packed, and any non-zero value will be True when unpacking."
msgstr ""

msgid "All examples assume a native byte order, size, and alignment with a big-endian machine."
msgstr ""

msgid "A basic example of packing/unpacking three integers::"
msgstr ""

msgid ">>> from struct import * >>> pack('hhl', 1, 2, 3) b'\\x00\\x01\\x00\\x02\\x00\\x00\\x00\\x03' >>> unpack('hhl', b'\\x00\\x01\\x00\\x02\\x00\\x00\\x00\\x03') (1, 2, 3) >>> calcsize('hhl') 8"
msgstr ""

msgid "Unpacked fields can be named by assigning them to variables or by wrapping the result in a named tuple::"
msgstr ""

msgid ">>> record = b'raymond   \\x32\\x12\\x08\\x01\\x08' >>> name, serialnum, school, gradelevel = unpack('<10sHHb', record)  >>> from collections import namedtuple >>> Student = namedtuple('Student', 'name serialnum school gradelevel') >>> Student._make(unpack('<10sHHb', record)) Student(name=b'raymond   ', serialnum=4658, school=264, gradelevel=8)"
msgstr ""

msgid "The ordering of format characters may have an impact on size since the padding needed to satisfy alignment requirements is different::"
msgstr ""

msgid ">>> pack('ci', '*', 0x12131415) b'*\\x00\\x00\\x00\\x12\\x13\\x14\\x15' >>> pack('ic', 0x12131415, '*') b'\\x12\\x13\\x14\\x15*' >>> calcsize('ci') 8 >>> calcsize('ic') 5"
msgstr ""

msgid "The following format ``'llh0l'`` specifies two pad bytes at the end, assuming longs are aligned on 4-byte boundaries::"
msgstr ""

msgid ">>> pack('llh0l', 1, 2, 3) b'\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x02\\x00\\x03\\x00\\x00'"
msgstr ""

msgid "This only works when native size and alignment are in effect; standard size and alignment does not enforce any alignment."
msgstr ""

msgid "Packed binary storage of homogeneous data."
msgstr ""

msgid "Packing and unpacking of XDR data."
msgstr ""

msgid "Classes"
msgstr ""

msgid "The :mod:`struct` module also defines the following type:"
msgstr ""

msgid "Return a new Struct object which writes and reads binary data according to the format string *format*.  Creating a Struct object once and calling its methods is more efficient than calling the :mod:`struct` functions with the same format since the format string only needs to be compiled once."
msgstr ""

msgid "Compiled Struct objects support the following methods and attributes:"
msgstr ""

msgid "Identical to the :func:`pack` function, using the compiled format. (``len(result)`` will equal :attr:`self.size`.)"
msgstr ""

msgid "Identical to the :func:`pack_into` function, using the compiled format."
msgstr ""

msgid "Identical to the :func:`unpack` function, using the compiled format. (``len(buffer)`` must equal :attr:`self.size`)."
msgstr ""

msgid "Identical to the :func:`unpack_from` function, using the compiled format. (``len(buffer[offset:])`` must be at least :attr:`self.size`)."
msgstr ""

msgid "The format string used to construct this Struct object."
msgstr ""

msgid "The calculated size of the struct (and hence of the bytes object produced by the :meth:`pack` method) corresponding to :attr:`format`."
msgstr ""

msgid ":mod:`subprocess` --- Subprocess management"
msgstr ""

msgid "The :mod:`subprocess` module allows you to spawn new processes, connect to their input/output/error pipes, and obtain their return codes.  This module intends to replace several other, older modules and functions, such as::"
msgstr ""

msgid "os.system os.spawn*"
msgstr ""

msgid "Information about how the :mod:`subprocess` module can be used to replace these modules and functions can be found in the following sections."
msgstr ""

msgid ":pep:`324` -- PEP proposing the subprocess module"
msgstr ""

msgid "Using the subprocess Module"
msgstr ""

msgid "This module defines one class called :class:`Popen`:"
msgstr ""

msgid "Arguments are:"
msgstr ""

msgid "*args* should be a string, or a sequence of program arguments.  The program to execute is normally the first item in the args sequence or the string if a string is given, but can be explicitly set by using the *executable* argument.  When *executable* is given, the first item in the args sequence is still treated by most programs as the command name, which can then be different from the actual executable name.  On Unix, it becomes the display name for the executing program in utilities such as :program:`ps`."
msgstr ""

msgid "On Unix, with *shell=False* (default): In this case, the Popen class uses :meth:`os.execvp` like behavior to execute the child program. *args* should normally be a sequence.  If a string is specified for *args*, it will be used as the name or path of the program to execute; this will only work if the program is being given no arguments."
msgstr ""

msgid ":meth:`shlex.split` can be useful when determining the correct tokenization for *args*, especially in complex cases::"
msgstr ""

msgid ">>> import shlex, subprocess >>> command_line = input() /bin/vikings -input eggs.txt -output \"spam spam.txt\" -cmd \"echo '$MONEY'\" >>> args = shlex.split(command_line) >>> print(args) ['/bin/vikings', '-input', 'eggs.txt', '-output', 'spam spam.txt', '-cmd', \"echo '$MONEY'\"] >>> p = subprocess.Popen(args) # Success!"
msgstr ""

msgid "Note in particular that options (such as *-input*) and arguments (such as *eggs.txt*) that are separated by whitespace in the shell go in separate list elements, while arguments that need quoting or backslash escaping when used in the shell (such as filenames containing spaces or the *echo* command shown above) are single list elements."
msgstr ""

msgid "On Unix, with *shell=True*: If args is a string, it specifies the command string to execute through the shell.  This means that the string must be formatted exactly as it would be when typed at the shell prompt.  This includes, for example, quoting or backslash escaping filenames with spaces in them.  If *args* is a sequence, the first item specifies the command string, and any additional items will be treated as additional arguments to the shell itself.  That is to say, *Popen* does the equivalent of::"
msgstr ""

msgid "Popen(['/bin/sh', '-c', args[0], args[1], ...])"
msgstr ""

msgid "On Windows: the :class:`Popen` class uses CreateProcess() to execute the child program, which operates on strings.  If *args* is a sequence, it will be converted to a string using the :meth:`list2cmdline` method.  Please note that not all MS Windows applications interpret the command line the same way: :meth:`list2cmdline` is designed for applications using the same rules as the MS C runtime."
msgstr ""

msgid "*bufsize*, if given, has the same meaning as the corresponding argument to the built-in open() function: :const:`0` means unbuffered, :const:`1` means line buffered, any other positive value means use a buffer of (approximately) that size.  A negative *bufsize* means to use the system default, which usually means fully buffered.  The default value for *bufsize* is :const:`0` (unbuffered)."
msgstr ""

msgid "If you experience performance issues, it is recommended that you try to enable buffering by setting *bufsize* to either -1 or a large enough positive value (such as 4096)."
msgstr ""

msgid "The *executable* argument specifies the program to execute. It is very seldom needed: Usually, the program to execute is defined by the *args* argument. If ``shell=True``, the *executable* argument specifies which shell to use. On Unix, the default shell is :file:`/bin/sh`.  On Windows, the default shell is specified by the :envvar:`COMSPEC` environment variable. The only reason you would need to specify ``shell=True`` on Windows is where the command you wish to execute is actually built in to the shell, eg ``dir``, ``copy``. You don't need ``shell=True`` to run a batch file, nor to run a console-based executable."
msgstr ""

msgid "*stdin*, *stdout* and *stderr* specify the executed programs' standard input, standard output and standard error file handles, respectively.  Valid values are :data:`PIPE`, an existing file descriptor (a positive integer), an existing file object, and ``None``.  :data:`PIPE` indicates that a new pipe to the child should be created.  With ``None``, no redirection will occur; the child's file handles will be inherited from the parent.  Additionally, *stderr* can be :data:`STDOUT`, which indicates that the stderr data from the applications should be captured into the same file handle as for stdout."
msgstr ""

msgid "If *preexec_fn* is set to a callable object, this object will be called in the child process just before the child is executed. (Unix only)"
msgstr ""

msgid "The *preexec_fn* parameter is not safe to use in the presence of threads in your application.  The child process could deadlock before exec is called. If you must use it, keep it trivial!  Minimize the number of libraries you call into."
msgstr ""

msgid "If you need to modify the environment for the child use the *env* parameter rather than doing it in a *preexec_fn*. The *start_new_session* parameter can take the place of a previously common use of *preexec_fn* to call os.setsid() in the child."
msgstr ""

msgid "If *close_fds* is true, all file descriptors except :const:`0`, :const:`1` and :const:`2` will be closed before the child process is executed. (Unix only). Or, on Windows, if *close_fds* is true then no handles will be inherited by the child process.  Note that on Windows, you cannot set *close_fds* to true and also redirect the standard handles by setting *stdin*, *stdout* or *stderr*."
msgstr ""

msgid "If *shell* is :const:`True`, the specified command will be executed through the shell."
msgstr ""

msgid "If *cwd* is not ``None``, the child's current directory will be changed to *cwd* before it is executed.  Note that this directory is not considered when searching the executable, so you can't specify the program's path relative to *cwd*."
msgstr ""

msgid "If *restore_signals* is True (the default) all signals that Python has set to SIG_IGN are restored to SIG_DFL in the child process before the exec. Currently this includes the SIGPIPE, SIGXFZ and SIGXFSZ signals. (Unix only)"
msgstr ""

msgid "If *start_new_session* is True the setsid() system call will be made in the child process prior to the execution of the subprocess.  (Unix only)"
msgstr ""

msgid "If *env* is not ``None``, it must be a mapping that defines the environment variables for the new process; these are used instead of the default behavior of inheriting the current process' environment."
msgstr ""

msgid "If specified, *env* must provide any variables required for the program to execute.  On Windows, in order to run a `side-by-side assembly`_ the specified *env* **must** include a valid :envvar:`SystemRoot`."
msgstr ""

msgid "If *universal_newlines* is :const:`True`, the file objects stdout and stderr are opened as text files, but lines may be terminated by any of ``'\\n'``, the Unix end-of-line convention, ``'\\r'``, the old Macintosh convention or ``'\\r\\n'``, the Windows convention. All of these external representations are seen as ``'\\n'`` by the Python program."
msgstr ""

msgid "This feature is only available if Python is built with universal newline support (the default).  Also, the newlines attribute of the file objects :attr:`stdout`, :attr:`stdin` and :attr:`stderr` are not updated by the :meth:`communicate` method."
msgstr ""

msgid "The *startupinfo* and *creationflags*, if given, will be passed to the underlying CreateProcess() function.  They can specify things such as appearance of the main window and priority for the new process.  (Windows only)"
msgstr ""

msgid "Special value that can be used as the *stdin*, *stdout* or *stderr* argument to :class:`Popen` and indicates that a pipe to the standard stream should be opened."
msgstr ""

msgid "Special value that can be used as the *stderr* argument to :class:`Popen` and indicates that standard error should go into the same handle as standard output."
msgstr ""

msgid "Convenience Functions"
msgstr ""

msgid "This module also defines four shortcut functions:"
msgstr ""

msgid "Run command with arguments.  Wait for command to complete, then return the :attr:`returncode` attribute."
msgstr ""

msgid "The arguments are the same as for the :class:`Popen` constructor.  Example::"
msgstr ""

msgid ">>> retcode = subprocess.call([\"ls\", \"-l\"])"
msgstr ""

msgid "Like :meth:`Popen.wait`, this will deadlock when using ``stdout=PIPE`` and/or ``stderr=PIPE`` and the child process generates enough output to a pipe such that it blocks waiting for the OS pipe buffer to accept more data."
msgstr ""

msgid "Run command with arguments.  Wait for command to complete. If the exit code was zero then return, otherwise raise :exc:`CalledProcessError`. The :exc:`CalledProcessError` object will have the return code in the :attr:`returncode` attribute."
msgstr ""

msgid ">>> subprocess.check_call([\"ls\", \"-l\"]) 0"
msgstr ""

msgid "See the warning for :func:`call`."
msgstr ""

msgid "Run command with arguments and return its output as a byte string."
msgstr ""

msgid "If the exit code was non-zero it raises a :exc:`CalledProcessError`.  The :exc:`CalledProcessError` object will have the return code in the :attr:`returncode` attribute and output in the :attr:`output` attribute."
msgstr ""

msgid ">>> subprocess.check_output([\"ls\", \"-l\", \"/dev/null\"]) b'crw-rw-rw- 1 root root 1, 3 Oct 18  2007 /dev/null\\n'"
msgstr ""

msgid "The stdout argument is not allowed as it is used internally. To capture standard error in the result, use ``stderr=subprocess.STDOUT``::"
msgstr ""

msgid ">>> subprocess.check_output( ...     [\"/bin/sh\", \"-c\", \"ls non_existent_file; exit 0\"], ...     stderr=subprocess.STDOUT) b'ls: non_existent_file: No such file or directory\\n'"
msgstr ""

msgid "Execute the string *cmd* in a shell with :func:`os.popen` and return a 2-tuple ``(status, output)``.  *cmd* is actually run as ``{ cmd ; } 2>&1``, so that the returned output will contain output or error messages.  A trailing newline is stripped from the output.  The exit status for the command can be interpreted according to the rules for the C function :cfunc:`wait`.  Example::"
msgstr ""

msgid ">>> subprocess.getstatusoutput('ls /bin/ls') (0, '/bin/ls') >>> subprocess.getstatusoutput('cat /bin/junk') (256, 'cat: /bin/junk: No such file or directory') >>> subprocess.getstatusoutput('/bin/junk') (256, 'sh: /bin/junk: not found')"
msgstr ""

msgid "Availability: UNIX."
msgstr ""

msgid "Like :func:`getstatusoutput`, except the exit status is ignored and the return value is a string containing the command's output.  Example::"
msgstr ""

msgid ">>> subprocess.getoutput('ls /bin/ls') '/bin/ls'"
msgstr ""

msgid "Exceptions raised in the child process, before the new program has started to execute, will be re-raised in the parent.  Additionally, the exception object will have one extra attribute called :attr:`child_traceback`, which is a string containing traceback information from the childs point of view."
msgstr ""

msgid "The most common exception raised is :exc:`OSError`.  This occurs, for example, when trying to execute a non-existent file.  Applications should prepare for :exc:`OSError` exceptions."
msgstr ""

msgid "A :exc:`ValueError` will be raised if :class:`Popen` is called with invalid arguments."
msgstr ""

msgid "check_call() will raise :exc:`CalledProcessError`, if the called process returns a non-zero return code."
msgstr ""

msgid "Security"
msgstr ""

msgid "Unlike some other popen functions, this implementation will never call /bin/sh implicitly.  This means that all characters, including shell metacharacters, can safely be passed to child processes."
msgstr ""

msgid "Popen Objects"
msgstr ""

msgid "Instances of the :class:`Popen` class have the following methods:"
msgstr ""

msgid "Check if child process has terminated.  Set and return :attr:`returncode` attribute."
msgstr ""

msgid "Wait for child process to terminate.  Set and return :attr:`returncode` attribute."
msgstr ""

msgid "This will deadlock when using ``stdout=PIPE`` and/or ``stderr=PIPE`` and the child process generates enough output to a pipe such that it blocks waiting for the OS pipe buffer to accept more data.  Use :meth:`communicate` to avoid that."
msgstr ""

msgid "Interact with process: Send data to stdin.  Read data from stdout and stderr, until end-of-file is reached.  Wait for process to terminate. The optional *input* argument should be a byte string to be sent to the child process, or ``None``, if no data should be sent to the child."
msgstr ""

msgid ":meth:`communicate` returns a tuple ``(stdoutdata, stderrdata)``."
msgstr ""

msgid "Note that if you want to send data to the process's stdin, you need to create the Popen object with ``stdin=PIPE``.  Similarly, to get anything other than ``None`` in the result tuple, you need to give ``stdout=PIPE`` and/or ``stderr=PIPE`` too."
msgstr ""

msgid "The data read is buffered in memory, so do not use this method if the data size is large or unlimited."
msgstr ""

msgid "Sends the signal *signal* to the child."
msgstr ""

msgid "On Windows, SIGTERM is an alias for :meth:`terminate`. CTRL_C_EVENT and CTRL_BREAK_EVENT can be sent to processes started with a `creationflags` parameter which includes `CREATE_NEW_PROCESS_GROUP`."
msgstr ""

msgid "Stop the child. On Posix OSs the method sends SIGTERM to the child. On Windows the Win32 API function :cfunc:`TerminateProcess` is called to stop the child."
msgstr ""

msgid "Kills the child. On Posix OSs the function sends SIGKILL to the child. On Windows :meth:`kill` is an alias for :meth:`terminate`."
msgstr ""

msgid "The following attributes are also available:"
msgstr ""

msgid "Use :meth:`communicate` rather than :attr:`.stdin.write <stdin>`, :attr:`.stdout.read <stdout>` or :attr:`.stderr.read <stderr>` to avoid deadlocks due to any of the other OS pipe buffers filling up and blocking the child process."
msgstr ""

msgid "If the *stdin* argument was :data:`PIPE`, this attribute is a file object that provides input to the child process.  Otherwise, it is ``None``."
msgstr ""

msgid "If the *stdout* argument was :data:`PIPE`, this attribute is a file object that provides output from the child process.  Otherwise, it is ``None``."
msgstr ""

msgid "If the *stderr* argument was :data:`PIPE`, this attribute is a file object that provides error output from the child process.  Otherwise, it is ``None``."
msgstr ""

msgid "The process ID of the child process."
msgstr ""

msgid "Note that if you set the *shell* argument to ``True``, this is the process ID of the spawned shell."
msgstr ""

msgid "The child return code, set by :meth:`poll` and :meth:`wait` (and indirectly by :meth:`communicate`).  A ``None`` value indicates that the process hasn't terminated yet."
msgstr ""

msgid "A negative value ``-N`` indicates that the child was terminated by signal ``N`` (Unix only)."
msgstr ""

msgid "Replacing Older Functions with the subprocess Module"
msgstr ""

msgid "In this section, \"a ==> b\" means that b can be used as a replacement for a."
msgstr ""

msgid "All functions in this section fail (more or less) silently if the executed program cannot be found; this module raises an :exc:`OSError` exception."
msgstr ""

msgid "In the following examples, we assume that the subprocess module is imported with \"from subprocess import \\*\"."
msgstr ""

msgid "Replacing /bin/sh shell backquote"
msgstr ""

msgid "output=`mycmd myarg` ==> output = Popen([\"mycmd\", \"myarg\"], stdout=PIPE).communicate()[0]"
msgstr ""

msgid "Replacing shell pipeline"
msgstr ""

msgid "output=`dmesg | grep hda` ==> p1 = Popen([\"dmesg\"], stdout=PIPE) p2 = Popen([\"grep\", \"hda\"], stdin=p1.stdout, stdout=PIPE) output = p2.communicate()[0]"
msgstr ""

msgid "Replacing :func:`os.system`"
msgstr ""

msgid "sts = os.system(\"mycmd\" + \" myarg\") ==> p = Popen(\"mycmd\" + \" myarg\", shell=True) sts = os.waitpid(p.pid, 0)[1]"
msgstr ""

msgid "Calling the program through the shell is usually not required."
msgstr ""

msgid "It's easier to look at the :attr:`returncode` attribute than the exit status."
msgstr ""

msgid "A more realistic example would look like this::"
msgstr ""

msgid "try:     retcode = call(\"mycmd\" + \" myarg\", shell=True)     if retcode < 0:         print(\"Child was terminated by signal\", -retcode, file=sys.stderr)     else:         print(\"Child returned\", retcode, file=sys.stderr) except OSError as e:     print(\"Execution failed:\", e, file=sys.stderr)"
msgstr ""

msgid "Replacing the :func:`os.spawn <os.spawnl>` family"
msgstr ""

msgid "P_NOWAIT example::"
msgstr ""

msgid "pid = os.spawnlp(os.P_NOWAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\") ==> pid = Popen([\"/bin/mycmd\", \"myarg\"]).pid"
msgstr ""

msgid "P_WAIT example::"
msgstr ""

msgid "retcode = os.spawnlp(os.P_WAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\") ==> retcode = call([\"/bin/mycmd\", \"myarg\"])"
msgstr ""

msgid "Vector example::"
msgstr ""

msgid "os.spawnvp(os.P_NOWAIT, path, args) ==> Popen([path] + args[1:])"
msgstr ""

msgid "Environment example::"
msgstr ""

msgid "os.spawnlpe(os.P_NOWAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\", env) ==> Popen([\"/bin/mycmd\", \"myarg\"], env={\"PATH\": \"/usr/bin\"})"
msgstr ""

msgid "Replacing :func:`os.popen`, :func:`os.popen2`, :func:`os.popen3`"
msgstr ""

msgid "(child_stdin, child_stdout) = os.popen2(cmd, mode, bufsize) ==> p = Popen(cmd, shell=True, bufsize=bufsize,           stdin=PIPE, stdout=PIPE, close_fds=True) (child_stdin, child_stdout) = (p.stdin, p.stdout)"
msgstr ""

msgid "(child_stdin,  child_stdout,  child_stderr) = os.popen3(cmd, mode, bufsize) ==> p = Popen(cmd, shell=True, bufsize=bufsize,           stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True) (child_stdin,  child_stdout,  child_stderr) = (p.stdin, p.stdout, p.stderr)"
msgstr ""

msgid "(child_stdin, child_stdout_and_stderr) = os.popen4(cmd, mode, bufsize) ==> p = Popen(cmd, shell=True, bufsize=bufsize,           stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=True) (child_stdin, child_stdout_and_stderr) = (p.stdin, p.stdout)"
msgstr ""

msgid "Return code handling translates as follows::"
msgstr ""

msgid "pipe = os.popen(cmd, 'w') ... rc = pipe.close() if rc is not None and rc % 256:     print(\"There were some errors\") ==> process = Popen(cmd, 'w', stdin=PIPE) ... process.stdin.close() if process.wait() != 0:     print(\"There were some errors\")"
msgstr ""

msgid "Replacing functions from the :mod:`popen2` module"
msgstr ""

msgid "If the cmd argument to popen2 functions is a string, the command is executed through /bin/sh.  If it is a list, the command is directly executed."
msgstr ""

msgid "(child_stdout, child_stdin) = popen2.popen2(\"somestring\", bufsize, mode) ==> p = Popen([\"somestring\"], shell=True, bufsize=bufsize,           stdin=PIPE, stdout=PIPE, close_fds=True) (child_stdout, child_stdin) = (p.stdout, p.stdin)"
msgstr ""

msgid "(child_stdout, child_stdin) = popen2.popen2([\"mycmd\", \"myarg\"], bufsize, mode) ==> p = Popen([\"mycmd\", \"myarg\"], bufsize=bufsize,           stdin=PIPE, stdout=PIPE, close_fds=True) (child_stdout, child_stdin) = (p.stdout, p.stdin)"
msgstr ""

msgid ":class:`popen2.Popen3` and :class:`popen2.Popen4` basically work as :class:`subprocess.Popen`, except that:"
msgstr ""

msgid ":class:`Popen` raises an exception if the execution fails."
msgstr ""

msgid "the *capturestderr* argument is replaced with the *stderr* argument."
msgstr ""

msgid "``stdin=PIPE`` and ``stdout=PIPE`` must be specified."
msgstr ""

msgid "popen2 closes all file descriptors by default, but you have to specify ``close_fds=True`` with :class:`Popen`."
msgstr ""

msgid ":mod:`sunau` --- Read and write Sun AU files"
msgstr ""

msgid "The :mod:`sunau` module provides a convenient interface to the Sun AU sound format.  Note that this module is interface-compatible with the modules :mod:`aifc` and :mod:`wave`."
msgstr ""

msgid "An audio file consists of a header followed by the data.  The fields of the header are:"
msgstr ""

msgid "magic word"
msgstr ""

msgid "The four bytes ``.snd``."
msgstr ""

msgid "header size"
msgstr ""

msgid "Size of the header, including info, in bytes."
msgstr ""

msgid "data size"
msgstr ""

msgid "Physical size of the data, in bytes."
msgstr ""

msgid "encoding"
msgstr ""

msgid "Indicates how the audio samples are encoded."
msgstr ""

msgid "sample rate"
msgstr ""

msgid "The sampling rate."
msgstr ""

msgid "# of channels"
msgstr ""

msgid "The number of channels in the samples."
msgstr ""

msgid "info"
msgstr ""

msgid "ASCII string giving a description of the audio file (padded with null bytes)."
msgstr ""

msgid "Apart from the info field, all header fields are 4 bytes in size. They are all 32-bit unsigned integers encoded in big-endian byte order."
msgstr ""

msgid "The :mod:`sunau` module defines the following functions:"
msgstr ""

msgid "If *file* is a string, open the file by that name, otherwise treat it as a seekable file-like object. *mode* can be any of"
msgstr ""

msgid "Read only mode."
msgstr ""

msgid "Write only mode."
msgstr ""

msgid "Note that it does not allow read/write files."
msgstr ""

msgid "A *mode* of ``'r'`` returns a :class:`AU_read` object, while a *mode* of ``'w'`` or ``'wb'`` returns a :class:`AU_write` object."
msgstr ""

msgid "A synonym for :func:`.open`, maintained for backwards compatibility."
msgstr ""

msgid "The :mod:`sunau` module defines the following exception:"
msgstr ""

msgid "An error raised when something is impossible because of Sun AU specs or implementation deficiency."
msgstr ""

msgid "The :mod:`sunau` module defines the following data items:"
msgstr ""

msgid "An integer every valid Sun AU file begins with, stored in big-endian form.  This is the string ``.snd`` interpreted as an integer."
msgstr ""

msgid "Values of the encoding field from the AU header which are supported by this module."
msgstr ""

msgid "Additional known values of the encoding field from the AU header, but which are not supported by this module."
msgstr ""

msgid "AU_read Objects"
msgstr ""

msgid "AU_read objects, as returned by :func:`.open` above, have the following methods:"
msgstr ""

msgid "Close the stream, and make the instance unusable. (This is  called automatically on deletion.)"
msgstr ""

msgid "Returns number of audio channels (1 for mone, 2 for stereo)."
msgstr ""

msgid "Returns sample width in bytes."
msgstr ""

msgid "Returns sampling frequency."
msgstr ""

msgid "Returns number of audio frames."
msgstr ""

msgid "Returns compression type. Supported compression types are ``'ULAW'``, ``'ALAW'`` and ``'NONE'``."
msgstr ""

msgid "Human-readable version of :meth:`getcomptype`.  The supported types have the respective names ``'CCITT G.711 u-law'``, ``'CCITT G.711 A-law'`` and ``'not compressed'``."
msgstr ""

msgid "Returns a tuple ``(nchannels, sampwidth, framerate, nframes, comptype, compname)``, equivalent to output of the :meth:`get\\*` methods."
msgstr ""

msgid "Reads and returns at most *n* frames of audio, as a string of bytes.  The data will be returned in linear format.  If the original data is in u-LAW format, it will be converted."
msgstr ""

msgid "Rewind the file pointer to the beginning of the audio stream."
msgstr ""

msgid "The following two methods define a term \"position\" which is compatible between them, and is otherwise implementation dependent."
msgstr ""

msgid "Set the file pointer to the specified position.  Only values returned from :meth:`tell` should be used for *pos*."
msgstr ""

msgid "Return current file pointer position.  Note that the returned value has nothing to do with the actual position in the file."
msgstr ""

msgid "The following two functions are defined for compatibility with the  :mod:`aifc`, and don't do anything interesting."
msgstr ""

msgid "Returns ``None``."
msgstr ""

msgid "Raise an error."
msgstr ""

msgid "AU_write Objects"
msgstr ""

msgid "AU_write objects, as returned by :func:`.open` above, have the following methods:"
msgstr ""

msgid "Set the number of channels."
msgstr ""

msgid "Set the sample width (in bytes.)"
msgstr ""

msgid "Set the frame rate."
msgstr ""

msgid "Set the number of frames. This can be later changed, when and if more  frames are written."
msgstr ""

msgid "Set the compression type and description. Only ``'NONE'`` and ``'ULAW'`` are supported on output."
msgstr ""

msgid "The *tuple* should be ``(nchannels, sampwidth, framerate, nframes, comptype, compname)``, with values valid for the :meth:`set\\*` methods.  Set all parameters."
msgstr ""

msgid "Return current position in the file, with the same disclaimer for the :meth:`AU_read.tell` and :meth:`AU_read.setpos` methods."
msgstr ""

msgid "Write audio frames, without correcting *nframes*."
msgstr ""

msgid "Write audio frames and make sure *nframes* is correct."
msgstr ""

msgid "Make sure *nframes* is correct, and close the file."
msgstr ""

msgid "This method is called upon deletion."
msgstr ""

msgid "Note that it is invalid to set any parameters after calling  :meth:`writeframes` or :meth:`writeframesraw`."
msgstr ""

msgid ":mod:`symbol` --- Constants used with Python parse trees"
msgstr ""

msgid "This module provides constants which represent the numeric values of internal nodes of the parse tree.  Unlike most Python constants, these use lower-case names.  Refer to the file :file:`Grammar/Grammar` in the Python distribution for the definitions of the names in the context of the language grammar.  The specific numeric values which the names map to may change between Python versions."
msgstr ""

msgid "This module also provides one additional data object:"
msgstr ""

msgid "Dictionary mapping the numeric values of the constants defined in this module back to name strings, allowing more human-readable representation of parse trees to be generated."
msgstr ""

msgid "The second example for the :mod:`parser` module shows how to use the :mod:`symbol` module."
msgstr ""

msgid ":mod:`symtable` --- Access to the compiler's symbol tables"
msgstr ""

msgid "Symbol tables are generated by the compiler from AST just before bytecode is generated.  The symbol table is responsible for calculating the scope of every identifier in the code.  :mod:`symtable` provides an interface to examine these tables."
msgstr ""

msgid "Generating Symbol Tables"
msgstr ""

msgid "Return the toplevel :class:`SymbolTable` for the Python source *code*. *filename* is the name of the file containing the code.  *compile_type* is like the *mode* argument to :func:`compile`."
msgstr ""

msgid "Examining Symbol Tables"
msgstr ""

msgid "A namespace table for a block.  The constructor is not public."
msgstr ""

msgid "Return the type of the symbol table.  Possible values are ``'class'``, ``'module'``, and ``'function'``."
msgstr ""

msgid "Return the table's identifier."
msgstr ""

msgid "Return the table's name.  This is the name of the class if the table is for a class, the name of the function if the table is for a function, or ``'top'`` if the table is global (:meth:`get_type` returns ``'module'``)."
msgstr ""

msgid "Return the number of the first line in the block this table represents."
msgstr ""

msgid "Return ``True`` if the locals in this table can be optimized."
msgstr ""

msgid "Return ``True`` if the block is a nested class or function."
msgstr ""

msgid "Return ``True`` if the block has nested namespaces within it.  These can be obtained with :meth:`get_children`."
msgstr ""

msgid "Return ``True`` if the block uses ``exec``."
msgstr ""

msgid "Return ``True`` if the block uses a starred from-import."
msgstr ""

msgid "Return a list of names of symbols in this table."
msgstr ""

msgid "Lookup *name* in the table and return a :class:`Symbol` instance."
msgstr ""

msgid "Return a list of :class:`Symbol` instances for names in the table."
msgstr ""

msgid "Return a list of the nested symbol tables."
msgstr ""

msgid "A namespace for a function or method.  This class inherits :class:`SymbolTable`."
msgstr ""

msgid "Return a tuple containing names of parameters to this function."
msgstr ""

msgid "Return a tuple containing names of locals in this function."
msgstr ""

msgid "Return a tuple containing names of globals in this function."
msgstr ""

msgid "Return a tuple containing names of free variables in this function."
msgstr ""

msgid "A namespace of a class.  This class inherits :class:`SymbolTable`."
msgstr ""

msgid "Return a tuple containing the names of methods declared in the class."
msgstr ""

msgid "An entry in a :class:`SymbolTable` corresponding to an identifier in the source.  The constructor is not public."
msgstr ""

msgid "Return the symbol's name."
msgstr ""

msgid "Return ``True`` if the symbol is used in its block."
msgstr ""

msgid "Return ``True`` if the symbol is created from an import statement."
msgstr ""

msgid "Return ``True`` if the symbol is a parameter."
msgstr ""

msgid "Return ``True`` if the symbol is global."
msgstr ""

msgid "Return ``True`` if the symbol is declared global with a global statement."
msgstr ""

msgid "Return ``True`` if the symbol is local to its block."
msgstr ""

msgid "Return ``True`` if the symbol is referenced in its block, but not assigned to."
msgstr ""

msgid "Return ``True`` if the symbol is assigned to in its block."
msgstr ""

msgid "Return ``True`` if name binding introduces new namespace."
msgstr ""

msgid "If the name is used as the target of a function or class statement, this will be true."
msgstr ""

msgid ">>> table = symtable.symtable(\"def some_func(): pass\", \"string\", \"exec\") >>> table.lookup(\"some_func\").is_namespace() True"
msgstr ""

msgid "Note that a single name can be bound to multiple objects.  If the result is ``True``, the name may also be bound to other objects, like an int or list, that does not introduce a new namespace."
msgstr ""

msgid "Return a list of namespaces bound to this name."
msgstr ""

msgid "Return the namespace bound to this name.  If more than one namespace is bound, a :exc:`ValueError` is raised."
msgstr ""

msgid ":mod:`sys` --- System-specific parameters and functions"
msgstr ""

msgid "This module provides access to some variables used or maintained by the interpreter and to functions that interact strongly with the interpreter. It is always available."
msgstr ""

msgid "The list of command line arguments passed to a Python script. ``argv[0]`` is the script name (it is operating system dependent whether this is a full pathname or not).  If the command was executed using the :option:`-c` command line option to the interpreter, ``argv[0]`` is set to the string ``'-c'``.  If no script name was passed to the Python interpreter, ``argv[0]`` is the empty string."
msgstr ""

msgid "To loop over the standard input, or the list of files given on the command line, see the :mod:`fileinput` module."
msgstr ""

msgid "An indicator of the native byte order.  This will have the value ``'big'`` on big-endian (most-significant byte first) platforms, and ``'little'`` on little-endian (least-significant byte first) platforms."
msgstr ""

msgid "A triple (repo, branch, version) representing the Subversion information of the Python interpreter. *repo* is the name of the repository, ``'CPython'``. *branch* is a string of one of the forms ``'trunk'``, ``'branches/name'`` or ``'tags/name'``. *version* is the output of ``svnversion``, if the interpreter was built from a Subversion checkout; it contains the revision number (range) and possibly a trailing 'M' if there were local modifications. If the tree was exported (or svnversion was not available), it is the revision of ``Include/patchlevel.h`` if the branch is a tag. Otherwise, it is ``None``."
msgstr ""

msgid "A tuple of strings giving the names of all modules that are compiled into this Python interpreter.  (This information is not available in any other way --- ``modules.keys()`` only lists the imported modules.)"
msgstr ""

msgid "A string containing the copyright pertaining to the Python interpreter."
msgstr ""

msgid "Clear the internal type cache. The type cache is used to speed up attribute and method lookups. Use the function *only* to drop unnecessary references during reference leak debugging."
msgstr ""

msgid "This function should be used for internal and specialized purposes only."
msgstr ""

msgid "Return a dictionary mapping each thread's identifier to the topmost stack frame currently active in that thread at the time the function is called. Note that functions in the :mod:`traceback` module can build the call stack given such a frame."
msgstr ""

msgid "This is most useful for debugging deadlock:  this function does not require the deadlocked threads' cooperation, and such threads' call stacks are frozen for as long as they remain deadlocked.  The frame returned for a non-deadlocked thread may bear no relationship to that thread's current activity by the time calling code examines the frame."
msgstr ""

msgid "Integer specifying the handle of the Python DLL. Availability: Windows."
msgstr ""

msgid "If *value* is not ``None``, this function prints it to ``sys.stdout``, and saves it in ``builtins._``."
msgstr ""

msgid "``sys.displayhook`` is called on the result of evaluating an :term:`expression` entered in an interactive Python session.  The display of these values can be customized by assigning another one-argument function to ``sys.displayhook``."
msgstr ""

msgid "This function prints out a given traceback and exception to ``sys.stderr``."
msgstr ""

msgid "When an exception is raised and uncaught, the interpreter calls ``sys.excepthook`` with three arguments, the exception class, exception instance, and a traceback object.  In an interactive session this happens just before control is returned to the prompt; in a Python program this happens just before the program exits.  The handling of such top-level exceptions can be customized by assigning another three-argument function to ``sys.excepthook``."
msgstr ""

msgid "These objects contain the original values of ``displayhook`` and ``excepthook`` at the start of the program.  They are saved so that ``displayhook`` and ``excepthook`` can be restored in case they happen to get replaced with broken objects."
msgstr ""

msgid "This function returns a tuple of three values that give information about the exception that is currently being handled.  The information returned is specific both to the current thread and to the current stack frame.  If the current stack frame is not handling an exception, the information is taken from the calling stack frame, or its caller, and so on until a stack frame is found that is handling an exception.  Here, \"handling an exception\" is defined as \"executing an except clause.\"  For any stack frame, only information about the exception being currently handled is accessible."
msgstr ""

msgid "If no exception is being handled anywhere on the stack, a tuple containing three ``None`` values is returned.  Otherwise, the values returned are ``(type, value, traceback)``.  Their meaning is: *type* gets the type of the exception being handled (a subclass of :exc:`BaseException`); *value* gets the exception instance (an instance of the exception type); *traceback* gets a traceback object (see the Reference Manual) which encapsulates the call stack at the point where the exception originally occurred."
msgstr ""

msgid "Assigning the *traceback* return value to a local variable in a function that is handling an exception will cause a circular reference.  Since most functions don't need access to the traceback, the best solution is to use something like ``exctype, value = sys.exc_info()[:2]`` to extract only the exception type and value.  If you do need the traceback, make sure to delete it after use (best done with a :keyword:`try` ... :keyword:`finally` statement) or to call :func:`exc_info` in a function that does not itself handle an exception."
msgstr ""

msgid "Such cycles are normally automatically reclaimed when garbage collection is enabled and they become unreachable, but it remains more efficient to avoid creating cycles."
msgstr ""

msgid "A string giving the site-specific directory prefix where the platform-dependent Python files are installed; by default, this is also ``'/usr/local'``.  This can be set at build time with the :option:`--exec-prefix` argument to the :program:`configure` script.  Specifically, all configuration files (e.g. the :file:`pyconfig.h` header file) are installed in the directory ``exec_prefix + '/lib/pythonversion/config'``, and shared library modules are installed in ``exec_prefix + '/lib/pythonversion/lib-dynload'``, where *version* is equal to ``version[:3]``."
msgstr ""

msgid "A string giving the name of the executable binary for the Python interpreter, on systems where this makes sense."
msgstr ""

msgid "Exit from Python.  This is implemented by raising the :exc:`SystemExit` exception, so cleanup actions specified by finally clauses of :keyword:`try` statements are honored, and it is possible to intercept the exit attempt at an outer level.  The optional argument *arg* can be an integer giving the exit status (defaulting to zero), or another type of object.  If it is an integer, zero is considered \"successful termination\" and any nonzero value is considered \"abnormal termination\" by shells and the like.  Most systems require it to be in the range 0-127, and produce undefined results otherwise.  Some systems have a convention for assigning specific meanings to specific exit codes, but these are generally underdeveloped; Unix programs generally use 2 for command line syntax errors and 1 for all other kind of errors.  If another type of object is passed, ``None`` is equivalent to passing zero, and any other object is printed to ``sys.stderr`` and results in an exit code of 1.  In particular, ``sys.exit(\"some error message\")`` is a quick way to exit a program when an error occurs."
msgstr ""

msgid "The struct sequence *flags* exposes the status of command line flags. The attributes are read only."
msgstr ""

msgid "attribute"
msgstr ""

msgid "flag"
msgstr ""

msgid ":const:`debug`"
msgstr ""

msgid "-d"
msgstr ""

msgid ":const:`division_warning`"
msgstr ""

msgid "-Q"
msgstr ""

msgid ":const:`inspect`"
msgstr ""

msgid "-i"
msgstr ""

msgid ":const:`interactive`"
msgstr ""

msgid ":const:`optimize`"
msgstr ""

msgid "-O or -OO"
msgstr ""

msgid ":const:`dont_write_bytecode`"
msgstr ""

msgid "-B"
msgstr ""

msgid ":const:`no_user_site`"
msgstr ""

msgid "-s"
msgstr ""

msgid ":const:`no_site`"
msgstr ""

msgid "-S"
msgstr ""

msgid ":const:`ignore_environment`"
msgstr ""

msgid "-E"
msgstr ""

msgid ":const:`verbose`"
msgstr ""

msgid "-v"
msgstr ""

msgid ":const:`bytes_warning`"
msgstr ""

msgid "-b"
msgstr ""

msgid "A structseq holding information about the float type. It contains low level information about the precision and internal representation. Please study your system's :file:`float.h` for more information."
msgstr ""

msgid "explanation"
msgstr ""

msgid ":const:`epsilon`"
msgstr ""

msgid "Difference between 1 and the next representable floating point number"
msgstr ""

msgid ":const:`dig`"
msgstr ""

msgid "digits (see :file:`float.h`)"
msgstr ""

msgid ":const:`mant_dig`"
msgstr ""

msgid "mantissa digits (see :file:`float.h`)"
msgstr ""

msgid ":const:`max`"
msgstr ""

msgid "maximum representable finite float"
msgstr ""

msgid ":const:`max_exp`"
msgstr ""

msgid "maximum int e such that radix**(e-1) is in the range of finite representable floats"
msgstr ""

msgid ":const:`max_10_exp`"
msgstr ""

msgid "maximum int e such that 10**e is in the range of finite representable floats"
msgstr ""

msgid ":const:`min`"
msgstr ""

msgid "Minimum positive normalizer float"
msgstr ""

msgid ":const:`min_exp`"
msgstr ""

msgid "minimum int e such that radix**(e-1) is a normalized float"
msgstr ""

msgid ":const:`min_10_exp`"
msgstr ""

msgid "minimum int e such that 10**e is a normalized float"
msgstr ""

msgid ":const:`radix`"
msgstr ""

msgid "radix of exponent"
msgstr ""

msgid ":const:`rounds`"
msgstr ""

msgid "addition rounds (see :file:`float.h`)"
msgstr ""

msgid "The information in the table is simplified."
msgstr ""

msgid "A string indicating how the :func:`repr` function behaves for floats.  If the string has value ``'short'`` then for a finite float ``x``, ``repr(x)`` aims to produce a short string with the property that ``float(repr(x)) == x``.  This is the usual behaviour in Python 3.1 and later.  Otherwise, ``float_repr_style`` has value ``'legacy'`` and ``repr(x)`` behaves in the same way as it did in versions of Python prior to 3.1."
msgstr ""

msgid "Return the interpreter's \"check interval\"; see :func:`setcheckinterval`."
msgstr ""

msgid "Return the name of the current default string encoding used by the Unicode implementation."
msgstr ""

msgid "Return the current value of the flags that are used for :cfunc:`dlopen` calls. The flag constants are defined in the :mod:`ctypes` and :mod:`DLFCN` modules. Availability: Unix."
msgstr ""

msgid "Return the name of the encoding used to convert Unicode filenames into system file names. The result value depends on the operating system:"
msgstr ""

msgid "On Mac OS X, the encoding is ``'utf-8'``."
msgstr ""

msgid "On Unix, the encoding is the user's preference according to the result of nl_langinfo(CODESET), or ``'utf-8'`` if ``nl_langinfo(CODESET)`` failed."
msgstr ""

msgid "On Windows NT+, file names are Unicode natively, so no conversion is performed. :func:`getfilesystemencoding` still returns ``'mbcs'``, as this is the encoding that applications should use when they explicitly want to convert Unicode strings to byte strings that are equivalent when used as file names."
msgstr ""

msgid "On Windows 9x, the encoding is ``'mbcs'``."
msgstr ""

msgid "Return the reference count of the *object*.  The count returned is generally one higher than you might expect, because it includes the (temporary) reference as an argument to :func:`getrefcount`."
msgstr ""

msgid "Return the current value of the recursion limit, the maximum depth of the Python interpreter stack.  This limit prevents infinite recursion from causing an overflow of the C stack and crashing Python.  It can be set by :func:`setrecursionlimit`."
msgstr ""

msgid "Return the size of an object in bytes. The object can be any type of object. All built-in objects will return correct results, but this does not have to hold true for third-party extensions as it is implementation specific."
msgstr ""

msgid "If given, *default* will be returned if the object does not provide means to retrieve the size.  Otherwise a :exc:`TypeError` will be raised."
msgstr ""

msgid ":func:`getsizeof` calls the object's ``__sizeof__`` method and adds an additional garbage collector overhead if the object is managed by the garbage collector."
msgstr ""

msgid "Return the interpreter's \"thread switch interval\"; see :func:`setswitchinterval`."
msgstr ""

msgid "Return a frame object from the call stack.  If optional integer *depth* is given, return the frame object that many calls below the top of the stack.  If that is deeper than the call stack, :exc:`ValueError` is raised.  The default for *depth* is zero, returning the frame at the top of the call stack."
msgstr ""

msgid "This function should be used for internal and specialized purposes only. It is not guaranteed to exist in all implementations of Python."
msgstr ""

msgid "Get the profiler function as set by :func:`setprofile`."
msgstr ""

msgid "Get the trace function as set by :func:`settrace`."
msgstr ""

msgid "The :func:`gettrace` function is intended only for implementing debuggers, profilers, coverage tools and the like.  Its behavior is part of the implementation platform, rather than part of the language definition, and thus may not be available in all Python implementations."
msgstr ""

msgid "Return a named tuple describing the Windows version currently running.  The named elements are *major*, *minor*, *build*, *platform*, *service_pack*, *service_pack_minor*, *service_pack_major*, *suite_mask*, and *product_type*. *service_pack* contains a string while all other values are integers. The components can also be accessed by name, so ``sys.getwindowsversion()[0]`` is equivalent to ``sys.getwindowsversion().major``. For compatibility with prior versions, only the first 5 elements are retrievable by indexing."
msgstr ""

msgid "*platform* may be one of the following values:"
msgstr ""

msgid "Platform"
msgstr ""

msgid ":const:`0 (VER_PLATFORM_WIN32s)`"
msgstr ""

msgid "Win32s on Windows 3.1"
msgstr ""

msgid ":const:`1 (VER_PLATFORM_WIN32_WINDOWS)`"
msgstr ""

msgid "Windows 95/98/ME"
msgstr ""

msgid ":const:`2 (VER_PLATFORM_WIN32_NT)`"
msgstr ""

msgid "Windows NT/2000/XP/x64"
msgstr ""

msgid ":const:`3 (VER_PLATFORM_WIN32_CE)`"
msgstr ""

msgid "Windows CE"
msgstr ""

msgid "*product_type* may be one of the following values:"
msgstr ""

msgid ":const:`1 (VER_NT_WORKSTATION)`"
msgstr ""

msgid "The system is a workstation."
msgstr ""

msgid ":const:`2 (VER_NT_DOMAIN_CONTROLLER)`"
msgstr ""

msgid "The system is a domain controller."
msgstr ""

msgid ":const:`3 (VER_NT_SERVER)`"
msgstr ""

msgid "The system is a server, but not a domain controller."
msgstr ""

msgid "This function wraps the Win32 :cfunc:`GetVersionEx` function; see the Microsoft documentation on :cfunc:`OSVERSIONINFOEX` for more information about these fields."
msgstr ""

msgid "A structseq giving parameters of the numeric hash implementation.  For more details about hashing of numeric types, see :ref:`numeric-hash`."
msgstr ""

msgid ":const:`width`"
msgstr ""

msgid "width in bits used for hash values"
msgstr ""

msgid ":const:`modulus`"
msgstr ""

msgid "prime modulus P used for numeric hash scheme"
msgstr ""

msgid ":const:`inf`"
msgstr ""

msgid "hash value returned for a positive infinity"
msgstr ""

msgid ":const:`nan`"
msgstr ""

msgid "hash value returned for a nan"
msgstr ""

msgid ":const:`imag`"
msgstr ""

msgid "multiplier used for the imaginary part of a complex number"
msgstr ""

msgid "The version number encoded as a single integer.  This is guaranteed to increase with each version, including proper support for non-production releases.  For example, to test that the Python interpreter is at least version 1.5.2, use::"
msgstr ""

msgid "if sys.hexversion >= 0x010502F0:     # use some advanced feature     ... else:     # use an alternative implementation or warn the user     ..."
msgstr ""

msgid "This is called ``hexversion`` since it only really looks meaningful when viewed as the result of passing it to the built-in :func:`hex` function.  The ``version_info`` value may be used for a more human-friendly encoding of the same information."
msgstr ""

msgid "A struct sequence that holds information about Python's internal representation of integers.  The attributes are read only."
msgstr ""

msgid ":const:`bits_per_digit`"
msgstr ""

msgid "number of bits held in each digit.  Python integers are stored internally in base ``2**int_info.bits_per_digit``"
msgstr ""

msgid ":const:`sizeof_digit`"
msgstr ""

msgid "size in bytes of the C type used to represent a digit"
msgstr ""

msgid "Enter *string* in the table of \"interned\" strings and return the interned string -- which is *string* itself or a copy. Interning strings is useful to gain a little performance on dictionary lookup -- if the keys in a dictionary are interned, and the lookup key is interned, the key comparisons (after hashing) can be done by a pointer compare instead of a string compare.  Normally, the names used in Python programs are automatically interned, and the dictionaries used to hold module, class or instance attributes have interned keys."
msgstr ""

msgid "Interned strings are not immortal; you must keep a reference to the return value of :func:`intern` around to benefit from it."
msgstr ""

msgid "These three variables are not always defined; they are set when an exception is not handled and the interpreter prints an error message and a stack traceback. Their intended use is to allow an interactive user to import a debugger module and engage in post-mortem debugging without having to re-execute the command that caused the error.  (Typical use is ``import pdb; pdb.pm()`` to enter the post-mortem debugger; see chapter :ref:`debugger` for more information.)"
msgstr ""

msgid "The meaning of the variables is the same as that of the return values from :func:`exc_info` above."
msgstr ""

msgid "An integer giving the maximum value a variable of type :ctype:`Py_ssize_t` can take.  It's usually ``2**31 - 1`` on a 32-bit platform and ``2**63 - 1`` on a 64-bit platform."
msgstr ""

msgid "An integer giving the largest supported code point for a Unicode character.  The value of this depends on the configuration option that specifies whether Unicode characters are stored as UCS-2 or UCS-4."
msgstr ""

msgid "A list of :term:`finder` objects that have their :meth:`find_module` methods called to see if one of the objects can find the module to be imported. The :meth:`find_module` method is called at least with the absolute name of the module being imported. If the module to be imported is contained in package then the parent package's :attr:`__path__` attribute is passed in as a second argument. The method returns :keyword:`None` if the module cannot be found, else returns a :term:`loader`."
msgstr ""

msgid ":data:`sys.meta_path` is searched before any implicit default finders or :data:`sys.path`."
msgstr ""

msgid "See :pep:`302` for the original specification."
msgstr ""

msgid "This is a dictionary that maps module names to modules which have already been loaded.  This can be manipulated to force reloading of modules and other tricks."
msgstr ""

msgid "A list of strings that specifies the search path for modules. Initialized from the environment variable :envvar:`PYTHONPATH`, plus an installation-dependent default."
msgstr ""

msgid "As initialized upon program startup, the first item of this list, ``path[0]``, is the directory containing the script that was used to invoke the Python interpreter.  If the script directory is not available (e.g.  if the interpreter is invoked interactively or if the script is read from standard input), ``path[0]`` is the empty string, which directs Python to search modules in the current directory first.  Notice that the script directory is inserted *before* the entries inserted as a result of :envvar:`PYTHONPATH`."
msgstr ""

msgid "A program is free to modify this list for its own purposes."
msgstr ""

msgid "A list of callables that take a path argument to try to create a :term:`finder` for the path. If a finder can be created, it is to be returned by the callable, else raise :exc:`ImportError`."
msgstr ""

msgid "Originally specified in :pep:`302`."
msgstr ""

msgid "A dictionary acting as a cache for :term:`finder` objects. The keys are paths that have been passed to :data:`sys.path_hooks` and the values are the finders that are found. If a path is a valid file system path but no explicit finder is found on :data:`sys.path_hooks` then :keyword:`None` is stored to represent the implicit default finder should be used. If the path is not an existing path then :class:`imp.NullImporter` is set."
msgstr ""

msgid "This string contains a platform identifier that can be used to append platform-specific components to :data:`sys.path`, for instance."
msgstr ""

msgid "For Unix systems, this is the lowercased OS name as returned by ``uname -s`` with the first part of the version as returned by ``uname -r`` appended, e.g. ``'sunos5'`` or ``'linux2'``, *at the time when Python was built*. For other systems, the values are:"
msgstr ""

msgid "System"
msgstr ""

msgid ":data:`platform` value"
msgstr ""

msgid "``'win32'``"
msgstr ""

msgid "Windows/Cygwin"
msgstr ""

msgid "``'cygwin'``"
msgstr ""

msgid "Mac OS X"
msgstr ""

msgid "``'darwin'``"
msgstr ""

msgid "OS/2"
msgstr ""

msgid "``'os2'``"
msgstr ""

msgid "OS/2 EMX"
msgstr ""

msgid "``'os2emx'``"
msgstr ""

msgid "A string giving the site-specific directory prefix where the platform independent Python files are installed; by default, this is the string ``'/usr/local'``.  This can be set at build time with the :option:`--prefix` argument to the :program:`configure` script.  The main collection of Python library modules is installed in the directory ``prefix + '/lib/pythonversion'`` while the platform independent header files (all except :file:`pyconfig.h`) are stored in ``prefix + '/include/pythonversion'``, where *version* is equal to ``version[:3]``."
msgstr ""

msgid "Strings specifying the primary and secondary prompt of the interpreter.  These are only defined if the interpreter is in interactive mode.  Their initial values in this case are ``'>>> '`` and ``'... '``.  If a non-string object is assigned to either variable, its :func:`str` is re-evaluated each time the interpreter prepares to read a new interactive command; this can be used to implement a dynamic prompt."
msgstr ""

msgid "If this is true, Python won't try to write ``.pyc`` or ``.pyo`` files on the import of source modules.  This value is initially set to ``True`` or ``False`` depending on the ``-B`` command line option and the ``PYTHONDONTWRITEBYTECODE`` environment variable, but you can set it yourself to control bytecode file generation."
msgstr ""

msgid "Set the interpreter's \"check interval\".  This integer value determines how often the interpreter checks for periodic things such as thread switches and signal handlers.  The default is ``100``, meaning the check is performed every 100 Python virtual instructions. Setting it to a larger value may increase performance for programs using threads.  Setting it to a value ``<=`` 0 checks every virtual instruction, maximizing responsiveness as well as overhead."
msgstr ""

msgid "Set the current default string encoding used by the Unicode implementation.  If *name* does not match any available encoding, :exc:`LookupError` is raised. This function is only intended to be used by the :mod:`site` module implementation and, where needed, by :mod:`sitecustomize`.  Once used by the :mod:`site` module, it is removed from the :mod:`sys` module's namespace."
msgstr ""

msgid "Set the flags used by the interpreter for :cfunc:`dlopen` calls, such as when the interpreter loads extension modules.  Among other things, this will enable a lazy resolving of symbols when importing a module, if called as ``sys.setdlopenflags(0)``.  To share symbols across extension modules, call as ``sys.setdlopenflags(ctypes.RTLD_GLOBAL)``.  Symbolic names for the flag modules can be either found in the :mod:`ctypes` module, or in the :mod:`DLFCN` module. If :mod:`DLFCN` is not available, it can be generated from :file:`/usr/include/dlfcn.h` using the :program:`h2py` script. Availability: Unix."
msgstr ""

msgid "Set the encoding used when converting Python strings to file names to *enc*. By default, Python tries to determine the encoding it should use automatically on Unix; on Windows, it avoids such conversion completely. This function can be used when Python's determination of the encoding needs to be overwritten, e.g. when not all file names on disk can be decoded using the encoding that Python had chosen."
msgstr ""

msgid "Set the system's profile function, which allows you to implement a Python source code profiler in Python.  See chapter :ref:`profile` for more information on the Python profiler.  The system's profile function is called similarly to the system's trace function (see :func:`settrace`), but it isn't called for each executed line of code (only on call and return, but the return event is reported even when an exception has been set).  The function is thread-specific, but there is no way for the profiler to know about context switches between threads, so it does not make sense to use this in the presence of multiple threads. Also, its return value is not used, so it can simply return ``None``."
msgstr ""

msgid "Set the maximum depth of the Python interpreter stack to *limit*.  This limit prevents infinite recursion from causing an overflow of the C stack and crashing Python."
msgstr ""

msgid "The highest possible limit is platform-dependent.  A user may need to set the limit higher when she has a program that requires deep recursion and a platform that supports a higher limit.  This should be done with care, because a too-high limit can lead to a crash."
msgstr ""

msgid "Set the interpreter's thread switch interval (in seconds).  This floating-point value determines the ideal duration of the \"timeslices\" allocated to concurrently running Python threads.  Please note that the actual value can be higher, especially if long-running internal functions or methods are used.  Also, which thread becomes scheduled at the end of the interval is the operating system's decision.  The interpreter doesn't have its own scheduler."
msgstr ""

msgid "Set the system's trace function, which allows you to implement a Python source code debugger in Python.  The function is thread-specific; for a debugger to support multiple threads, it must be registered using :func:`settrace` for each thread being debugged."
msgstr ""

msgid "Trace functions should have three arguments: *frame*, *event*, and *arg*. *frame* is the current stack frame.  *event* is a string: ``'call'``, ``'line'``, ``'return'``, ``'exception'``, ``'c_call'``, ``'c_return'``, or ``'c_exception'``. *arg* depends on the event type."
msgstr ""

msgid "The trace function is invoked (with *event* set to ``'call'``) whenever a new local scope is entered; it should return a reference to a local trace function to be used that scope, or ``None`` if the scope shouldn't be traced."
msgstr ""

msgid "The local trace function should return a reference to itself (or to another function for further tracing in that scope), or ``None`` to turn off tracing in that scope."
msgstr ""

msgid "The events have the following meaning:"
msgstr ""

msgid "A function is called (or some other code block entered).  The global trace function is called; *arg* is ``None``; the return value specifies the local trace function."
msgstr ""

msgid "The interpreter is about to execute a new line of code or re-execute the condition of a loop.  The local trace function is called; *arg* is ``None``; the return value specifies the new local trace function.  See :file:`Objects/lnotab_notes.txt` for a detailed explanation of how this works."
msgstr ""

msgid "A function (or other code block) is about to return.  The local trace function is called; *arg* is the value that will be returned.  The trace function's return value is ignored."
msgstr ""

msgid "An exception has occurred.  The local trace function is called; *arg* is a tuple ``(exception, value, traceback)``; the return value specifies the new local trace function."
msgstr ""

msgid "A C function is about to be called.  This may be an extension function or a built-in.  *arg* is the C function object."
msgstr ""

msgid "A C function has returned. *arg* is ``None``."
msgstr ""

msgid "A C function has thrown an exception.  *arg* is ``None``."
msgstr ""

msgid "Note that as an exception is propagated down the chain of callers, an ``'exception'`` event is generated at each level."
msgstr ""

msgid "For more information on code and frame objects, refer to :ref:`types`."
msgstr ""

msgid "The :func:`settrace` function is intended only for implementing debuggers, profilers, coverage tools and the like.  Its behavior is part of the implementation platform, rather than part of the language definition, and thus may not be available in all Python implementations."
msgstr ""

msgid "Activate dumping of VM measurements using the Pentium timestamp counter, if *on_flag* is true. Deactivate these dumps if *on_flag* is off. The function is available only if Python was compiled with :option:`--with-tsc`. To understand the output of this dump, read :file:`Python/ceval.c` in the Python sources."
msgstr ""

msgid "File objects corresponding to the interpreter's standard input, output and error streams.  ``stdin`` is used for all interpreter input except for scripts but including calls to :func:`input`.  ``stdout`` is used for the output of :func:`print` and :term:`expression` statements and for the prompts of :func:`input`. The interpreter's own prompts and (almost all of) its error messages go to ``stderr``.  ``stdout`` and ``stderr`` needn't be built-in file objects: any object is acceptable as long as it has a :meth:`write` method that takes a string argument.  (Changing these objects doesn't affect the standard I/O streams of processes executed by :func:`os.popen`, :func:`os.system` or the :func:`exec\\*` family of functions in the :mod:`os` module.)"
msgstr ""

msgid "The standard streams are in text mode by default.  To write or read binary data to these, use the underlying binary buffer.  For example, to write bytes to :data:`stdout`, use ``sys.stdout.buffer.write(b'abc')``.  Using :meth:`io.TextIOBase.detach` streams can be made binary by default.  This function sets :data:`stdin` and :data:`stdout` to binary::"
msgstr ""

msgid "def make_streams_binary():     sys.stdin = sys.stdin.detach()     sys.stdout = sys.stdout.detach()"
msgstr ""

msgid "Note that the streams can be replaced with objects (like :class:`io.StringIO`) that do not support the :attr:`~io.BufferedIOBase.buffer` attribute or the :meth:`~io.BufferedIOBase.detach` method and can raise :exc:`AttributeError` or :exc:`io.UnsupportedOperation`."
msgstr ""

msgid "These objects contain the original values of ``stdin``, ``stderr`` and ``stdout`` at the start of the program.  They are used during finalization, and could be useful to print to the actual standard stream no matter if the ``sys.std*`` object has been redirected."
msgstr ""

msgid "It can also be used to restore the actual files to known working file objects in case they have been overwritten with a broken object.  However, the preferred way to do this is to explicitly save the previous stream before replacing it, and restore the saved object."
msgstr ""

msgid "Under some conditions ``stdin``, ``stdout`` and ``stderr`` as well as the original values ``__stdin__``, ``__stdout__`` and ``__stderr__`` can be None. It is usually the case for Windows GUI apps that aren't connected to a console and Python apps started with :program:`pythonw`."
msgstr ""

msgid "When this variable is set to an integer value, it determines the maximum number of levels of traceback information printed when an unhandled exception occurs. The default is ``1000``.  When set to ``0`` or less, all traceback information is suppressed and only the exception type and value are printed."
msgstr ""

msgid "A string containing the version number of the Python interpreter plus additional information on the build number and compiler used. It has a value of the form ``'version (#build_number, build_date, build_time) [compiler]'``.  The first three characters are used to identify the version in the installation directories (where appropriate on each platform).  An example::"
msgstr ""

msgid ">>> import sys >>> sys.version '1.5.2 (#0 Apr 13 1999, 10:51:12) [MSC 32 bit (Intel)]'"
msgstr ""

msgid "The C API version for this interpreter.  Programmers may find this useful when debugging version conflicts between Python and extension modules."
msgstr ""

msgid "A tuple containing the five components of the version number: *major*, *minor*, *micro*, *releaselevel*, and *serial*.  All values except *releaselevel* are integers; the release level is ``'alpha'``, ``'beta'``, ``'candidate'``, or ``'final'``.  The ``version_info`` value corresponding to the Python version 2.0 is ``(2, 0, 0, 'final', 0)``.  The components can also be accessed by name, so ``sys.version_info[0]`` is equivalent to ``sys.version_info.major`` and so on."
msgstr ""

msgid "This is an implementation detail of the warnings framework; do not modify this value.  Refer to the :mod:`warnings` module for more information on the warnings framework."
msgstr ""

msgid "The version number used to form registry keys on Windows platforms. This is stored as string resource 1000 in the Python DLL.  The value is normally the first three characters of :const:`version`.  It is provided in the :mod:`sys` module for informational purposes; modifying this value has no effect on the registry keys used by Python. Availability: Windows."
msgstr ""

msgid ":mod:`sysconfig` --- Provide access to Python's configuration information"
msgstr ""

msgid "The :mod:`sysconfig` module provides access to Python's configuration information like the list of installation paths and the configuration variables relevant for the current platform."
msgstr ""

msgid "Configuration variables"
msgstr ""

msgid "A Python distribution contains a :file:`Makefile` and a :file:`pyconfig.h` header file that are necessary to build both the Python binary itself and third-party C extensions compiled using :mod:`distutils`."
msgstr ""

msgid ":mod:`sysconfig` puts all variables found in these files in a dictionary that can be accessed using :func:`get_config_vars` or :func:`get_config_var`."
msgstr ""

msgid "Notice that on Windows, it's a much smaller set."
msgstr ""

msgid "With no arguments, return a dictionary of all configuration variables relevant for the current platform."
msgstr ""

msgid "With arguments, return a list of values that result from looking up each argument in the configuration variable dictionary."
msgstr ""

msgid "For each argument, if the value is not found, return ``None``."
msgstr ""

msgid "Return the value of a single variable *name*. Equivalent to ``get_config_vars().get(name)``."
msgstr ""

msgid "If *name* is not found, return ``None``."
msgstr ""

msgid "Example of usage::"
msgstr ""

msgid ">>> import sysconfig >>> sysconfig.get_config_var('Py_ENABLE_SHARED') 0 >>> sysconfig.get_config_var('LIBDIR') '/usr/local/lib' >>> sysconfig.get_config_vars('AR', 'CXX') ['ar', 'g++']"
msgstr ""

msgid "Installation paths"
msgstr ""

msgid "Python uses an installation scheme that differs depending on the platform and on the installation options.  These schemes are stored in :mod:`sysconfig` under unique identifiers based on the value returned by :const:`os.name`."
msgstr ""

msgid "Every new component that is installed using :mod:`distutils` or a Distutils-based system will follow the same scheme to copy its file in the right places."
msgstr ""

msgid "Python currently supports seven schemes:"
msgstr ""

msgid "*posix_prefix*: scheme for Posix platforms like Linux or Mac OS X.  This is the default scheme used when Python or a component is installed."
msgstr ""

msgid "*posix_home*: scheme for Posix platforms used when a *home* option is used upon installation.  This scheme is used when a component is installed through Distutils with a specific home prefix."
msgstr ""

msgid "*posix_user*: scheme for Posix platforms used when a component is installed through Distutils and the *user* option is used.  This scheme defines paths located under the user home directory."
msgstr ""

msgid "*nt*: scheme for NT platforms like Windows."
msgstr ""

msgid "*nt_user*: scheme for NT platforms, when the *user* option is used."
msgstr ""

msgid "*os2*: scheme for OS/2 platforms."
msgstr ""

msgid "*os2_home*: scheme for OS/2 patforms, when the *user* option is used."
msgstr ""

msgid "Each scheme is itself composed of a series of paths and each path has a unique identifier.  Python currently uses eight paths:"
msgstr ""

msgid "*stdlib*: directory containing the standard Python library files that are not platform-specific."
msgstr ""

msgid "*platstdlib*: directory containing the standard Python library files that are platform-specific."
msgstr ""

msgid "*platlib*: directory for site-specific, platform-specific files."
msgstr ""

msgid "*purelib*: directory for site-specific, non-platform-specific files."
msgstr ""

msgid "*include*: directory for non-platform-specific header files."
msgstr ""

msgid "*platinclude*: directory for platform-specific header files."
msgstr ""

msgid "*scripts*: directory for script files."
msgstr ""

msgid "*data*: directory for data files."
msgstr ""

msgid ":mod:`sysconfig` provides some functions to determine these paths."
msgstr ""

msgid "Return a tuple containing all schemes currently supported in :mod:`sysconfig`."
msgstr ""

msgid "Return a tuple containing all path names currently supported in :mod:`sysconfig`."
msgstr ""

msgid "Return an installation path corresponding to the path *name*, from the install scheme named *scheme*."
msgstr ""

msgid "*name* has to be a value from the list returned by :func:`get_path_names`."
msgstr ""

msgid ":mod:`sysconfig` stores installation paths corresponding to each path name, for each platform, with variables to be expanded.  For instance the *stdlib* path for the *nt* scheme is: ``{base}/Lib``."
msgstr ""

msgid ":func:`get_path` will use the variables returned by :func:`get_config_vars` to expand the path.  All variables have default values for each platform so one may call this function and get the default value."
msgstr ""

msgid "If *scheme* is provided, it must be a value from the list returned by :func:`get_path_names`.  Otherwise, the default scheme for the current platform is used."
msgstr ""

msgid "If *vars* is provided, it must be a dictionary of variables that will update the dictionary return by :func:`get_config_vars`."
msgstr ""

msgid "If *expand* is set to ``False``, the path will not be expanded using the variables."
msgstr ""

msgid "Return a dictionary containing all installation paths corresponding to an installation scheme. See :func:`get_path` for more information."
msgstr ""

msgid "If *scheme* is not provided, will use the default scheme for the current platform."
msgstr ""

msgid "If *vars* is provided, it must be a dictionary of variables that will update the dictionary used to expand the paths."
msgstr ""

msgid "If *expand* is set to False, the paths will not be expanded."
msgstr ""

msgid "If *scheme* is not an existing scheme, :func:`get_paths` will raise a :exc:`KeyError`."
msgstr ""

msgid "Other functions"
msgstr ""

msgid "Return the ``MAJOR.MINOR`` Python version number as a string.  Similar to ``sys.version[:3]``."
msgstr ""

msgid "Return a string that identifies the current platform."
msgstr ""

msgid "This is used mainly to distinguish platform-specific build directories and platform-specific built distributions.  Typically includes the OS name and version and the architecture (as supplied by :func:`os.uname`), although the exact information included depends on the OS; e.g. for IRIX the architecture isn't particularly important (IRIX only runs on SGI hardware), but for Linux the kernel version isn't particularly important."
msgstr ""

msgid "Examples of returned values:"
msgstr ""

msgid "linux-i586"
msgstr ""

msgid "linux-alpha (?)"
msgstr ""

msgid "solaris-2.6-sun4u"
msgstr ""

msgid "irix-5.3"
msgstr ""

msgid "irix64-6.2"
msgstr ""

msgid "Windows will return one of:"
msgstr ""

msgid "win-amd64 (64bit Windows on AMD64 (aka x86_64, Intel64, EM64T, etc)"
msgstr ""

msgid "win-ia64 (64bit Windows on Itanium)"
msgstr ""

msgid "win32 (all others - specifically, sys.platform is returned)"
msgstr ""

msgid "Mac OS X can return:"
msgstr ""

msgid "macosx-10.6-ppc"
msgstr ""

msgid "macosx-10.4-ppc64"
msgstr ""

msgid "macosx-10.3-i386"
msgstr ""

msgid "macosx-10.4-fat"
msgstr ""

msgid "For other non-POSIX platforms, currently just returns :data:`sys.platform`."
msgstr ""

msgid "Return ``True`` if the current Python installation was built from source."
msgstr ""

msgid "Parse a :file:`config.h`\\-style file."
msgstr ""

msgid "*fp* is a file-like object pointing to the :file:`config.h`\\-like file."
msgstr ""

msgid "A dictionary containing name/value pairs is returned.  If an optional dictionary is passed in as the second argument, it is used instead of a new dictionary, and updated with the values read in the file."
msgstr ""

msgid "Return the path of :file:`pyconfig.h`."
msgstr ""

msgid "Using :mod:`sysconfig` as a script"
msgstr ""

msgid "You can use :mod:`sysconfig` as a script with Python's *-m* option::"
msgstr ""

msgid "$ python -m sysconfig Platform: \"macosx-10.4-i386\" Python version: \"3.2\" Current installation scheme: \"posix_prefix\"  Paths:         data = \"/usr/local\"         include = \"/Users/tarek/Dev/svn.python.org/py3k/Include\"         platinclude = \".\"         platlib = \"/usr/local/lib/python3.2/site-packages\"         platstdlib = \"/usr/local/lib/python3.2\"         purelib = \"/usr/local/lib/python3.2/site-packages\"         scripts = \"/usr/local/bin\"         stdlib = \"/usr/local/lib/python3.2\"  Variables:         AC_APPLE_UNIVERSAL_BUILD = \"0\"         AIX_GENUINE_CPLUSPLUS = \"0\"         AR = \"ar\"         ARFLAGS = \"rc\"         ASDLGEN = \"./Parser/asdl_c.py\"         ..."
msgstr ""

msgid "This call will print in the standard output the information returned by :func:`get_platform`, :func:`get_python_version`, :func:`get_path` and :func:`get_config_vars`."
msgstr ""

msgid ":mod:`syslog` --- Unix syslog library routines"
msgstr ""

msgid "This module provides an interface to the Unix ``syslog`` library routines. Refer to the Unix manual pages for a detailed description of the ``syslog`` facility."
msgstr ""

msgid "This module wraps the system ``syslog`` family of routines.  A pure Python library that can speak to a syslog server is available in the :mod:`logging.handlers` module as :class:`SysLogHandler`."
msgstr ""

msgid "Send the string *message* to the system logger.  A trailing newline is added if necessary.  Each message is tagged with a priority composed of a *facility* and a *level*.  The optional *priority* argument, which defaults to :const:`LOG_INFO`, determines the message priority.  If the facility is not encoded in *priority* using logical-or (``LOG_INFO | LOG_USER``), the value given in the :func:`openlog` call is used."
msgstr ""

msgid "If :func:`openlog` has not been called prior to the call to :func:`syslog`, ``openlog()`` will be called with no arguments."
msgstr ""

msgid "Logging options of subsequent :func:`syslog` calls can be set by calling :func:`openlog`.  :func:`syslog` will call :func:`openlog` with no arguments if the log is not currently open."
msgstr ""

msgid "The optional *ident* keyword argument is a string which is prepended to every message, and defaults to ``sys.argv[0]`` with leading path components stripped.  The optional *logopt* keyword argument (default is 0) is a bit field -- see below for possible values to combine.  The optional *facility* keyword argument (default is :const:`LOG_USER`) sets the default facility for messages which do not have a facility explicitly encoded."
msgstr ""

msgid "Reset the syslog module values and call the system library ``closelog()``."
msgstr ""

msgid "This causes the module to behave as it does when initially imported.  For example, :func:`openlog` will be called on the first :func:`syslog` call (if :func:`openlog` hasn't already been called), and *ident* and other :func:`openlog` parameters are reset to defaults."
msgstr ""

msgid "Set the priority mask to *maskpri* and return the previous mask value.  Calls to :func:`syslog` with a priority level not set in *maskpri* are ignored. The default is to log all priorities.  The function ``LOG_MASK(pri)`` calculates the mask for the individual priority *pri*.  The function ``LOG_UPTO(pri)`` calculates the mask for all priorities up to and including *pri*."
msgstr ""

msgid "The module defines the following constants:"
msgstr ""

msgid ":const:`LOG_EMERG`, :const:`LOG_ALERT`, :const:`LOG_CRIT`, :const:`LOG_ERR`, :const:`LOG_WARNING`, :const:`LOG_NOTICE`, :const:`LOG_INFO`, :const:`LOG_DEBUG`."
msgstr ""

msgid ":const:`LOG_KERN`, :const:`LOG_USER`, :const:`LOG_MAIL`, :const:`LOG_DAEMON`, :const:`LOG_AUTH`, :const:`LOG_LPR`, :const:`LOG_NEWS`, :const:`LOG_UUCP`, :const:`LOG_CRON` and :const:`LOG_LOCAL0` to :const:`LOG_LOCAL7`."
msgstr ""

msgid ":const:`LOG_PID`, :const:`LOG_CONS`, :const:`LOG_NDELAY`, :const:`LOG_NOWAIT` and :const:`LOG_PERROR` if defined in ``<syslog.h>``."
msgstr ""

msgid "Simple example"
msgstr ""

msgid "A simple set of examples::"
msgstr ""

msgid "import syslog  syslog.syslog('Processing started') if error:     syslog.syslog(syslog.LOG_ERR, 'Processing started')"
msgstr ""

msgid "An example of setting some log options, these would include the process ID in logged messages, and write the messages to the destination facility used for mail logging::"
msgstr ""

msgid "syslog.openlog(logopt=syslog.LOG_PID, facility=syslog.LOG_MAIL) syslog.syslog('E-mail processing initiated...')"
msgstr ""

msgid ":mod:`tabnanny` --- Detection of ambiguous indentation"
msgstr ""

msgid "For the time being this module is intended to be called as a script. However it is possible to import it into an IDE and use the function :func:`check` described below."
msgstr ""

msgid "The API provided by this module is likely to change in future releases; such changes may not be backward compatible."
msgstr ""

msgid "If *file_or_dir* is a directory and not a symbolic link, then recursively descend the directory tree named by *file_or_dir*, checking all :file:`.py` files along the way.  If *file_or_dir* is an ordinary Python source file, it is checked for whitespace related problems.  The diagnostic messages are written to standard output using the :func:`print` function."
msgstr ""

msgid "Flag indicating whether to print verbose messages. This is incremented by the ``-v`` option if called as a script."
msgstr ""

msgid "Flag indicating whether to print only the filenames of files containing whitespace related problems.  This is set to true by the ``-q`` option if called as a script."
msgstr ""

msgid "Raised by :func:`tokeneater` if detecting an ambiguous indent. Captured and handled in :func:`check`."
msgstr ""

msgid "This function is used by :func:`check` as a callback parameter to the function :func:`tokenize.tokenize`."
msgstr ""

msgid "Lexical scanner for Python source code."
msgstr ""

msgid ":mod:`tarfile` --- Read and write tar archive files"
msgstr ""

msgid "The :mod:`tarfile` module makes it possible to read and write tar archives, including those using gzip or bz2 compression. (:file:`.zip` files can be read and written using the :mod:`zipfile` module.)"
msgstr ""

msgid "Some facts and figures:"
msgstr ""

msgid "reads and writes :mod:`gzip` and :mod:`bz2` compressed archives."
msgstr ""

msgid "read/write support for the POSIX.1-1988 (ustar) format."
msgstr ""

msgid "read/write support for the GNU tar format including *longname* and *longlink* extensions, read-only support for the *sparse* extension."
msgstr ""

msgid "read/write support for the POSIX.1-2001 (pax) format."
msgstr ""

msgid "handles directories, regular files, hardlinks, symbolic links, fifos, character devices and block devices and is able to acquire and restore file information like timestamp, access permissions and owner."
msgstr ""

msgid "Return a :class:`TarFile` object for the pathname *name*. For detailed information on :class:`TarFile` objects and the keyword arguments that are allowed, see :ref:`tarfile-objects`."
msgstr ""

msgid "*mode* has to be a string of the form ``'filemode[:compression]'``, it defaults to ``'r'``. Here is a full list of mode combinations:"
msgstr ""

msgid "mode"
msgstr ""

msgid "``'r' or 'r:*'``"
msgstr ""

msgid "Open for reading with transparent compression (recommended)."
msgstr ""

msgid "``'r:'``"
msgstr ""

msgid "Open for reading exclusively without compression."
msgstr ""

msgid "``'r:gz'``"
msgstr ""

msgid "Open for reading with gzip compression."
msgstr ""

msgid "``'r:bz2'``"
msgstr ""

msgid "Open for reading with bzip2 compression."
msgstr ""

msgid "``'a' or 'a:'``"
msgstr ""

msgid "Open for appending with no compression. The file is created if it does not exist."
msgstr ""

msgid "``'w' or 'w:'``"
msgstr ""

msgid "Open for uncompressed writing."
msgstr ""

msgid "``'w:gz'``"
msgstr ""

msgid "Open for gzip compressed writing."
msgstr ""

msgid "``'w:bz2'``"
msgstr ""

msgid "Open for bzip2 compressed writing."
msgstr ""

msgid "Note that ``'a:gz'`` or ``'a:bz2'`` is not possible. If *mode* is not suitable to open a certain (compressed) file for reading, :exc:`ReadError` is raised. Use *mode* ``'r'`` to avoid this.  If a compression method is not supported, :exc:`CompressionError` is raised."
msgstr ""

msgid "If *fileobj* is specified, it is used as an alternative to a file object opened for *name*. It is supposed to be at position 0."
msgstr ""

msgid "For special purposes, there is a second format for *mode*: ``'filemode|[compression]'``.  :func:`tarfile.open` will return a :class:`TarFile` object that processes its data as a stream of blocks.  No random seeking will be done on the file. If given, *fileobj* may be any object that has a :meth:`read` or :meth:`write` method (depending on the *mode*). *bufsize* specifies the blocksize and defaults to ``20 * 512`` bytes. Use this variant in combination with e.g. ``sys.stdin``, a socket file object or a tape device. However, such a :class:`TarFile` object is limited in that it does not allow to be accessed randomly, see :ref:`tar-examples`.  The currently possible modes:"
msgstr ""

msgid "Mode"
msgstr ""

msgid "``'r|*'``"
msgstr ""

msgid "Open a *stream* of tar blocks for reading with transparent compression."
msgstr ""

msgid "``'r|'``"
msgstr ""

msgid "Open a *stream* of uncompressed tar blocks for reading."
msgstr ""

msgid "``'r|gz'``"
msgstr ""

msgid "Open a gzip compressed *stream* for reading."
msgstr ""

msgid "``'r|bz2'``"
msgstr ""

msgid "Open a bzip2 compressed *stream* for reading."
msgstr ""

msgid "``'w|'``"
msgstr ""

msgid "Open an uncompressed *stream* for writing."
msgstr ""

msgid "``'w|gz'``"
msgstr ""

msgid "Open an gzip compressed *stream* for writing."
msgstr ""

msgid "``'w|bz2'``"
msgstr ""

msgid "Open an bzip2 compressed *stream* for writing."
msgstr ""

msgid "Class for reading and writing tar archives. Do not use this class directly, better use :func:`tarfile.open` instead. See :ref:`tarfile-objects`."
msgstr ""

msgid "Return :const:`True` if *name* is a tar archive file, that the :mod:`tarfile` module can read."
msgstr ""

msgid "The :mod:`tarfile` module defines the following exceptions:"
msgstr ""

msgid "Base class for all :mod:`tarfile` exceptions."
msgstr ""

msgid "Is raised when a tar archive is opened, that either cannot be handled by the :mod:`tarfile` module or is somehow invalid."
msgstr ""

msgid "Is raised when a compression method is not supported or when the data cannot be decoded properly."
msgstr ""

msgid "Is raised for the limitations that are typical for stream-like :class:`TarFile` objects."
msgstr ""

msgid "Is raised for *non-fatal* errors when using :meth:`TarFile.extract`, but only if :attr:`TarFile.errorlevel`\\ ``== 2``."
msgstr ""

msgid "Is raised by :meth:`TarInfo.frombuf` if the buffer it gets is invalid."
msgstr ""

msgid "Each of the following constants defines a tar archive format that the :mod:`tarfile` module is able to create. See section :ref:`tar-formats` for details."
msgstr ""

msgid "POSIX.1-1988 (ustar) format."
msgstr ""

msgid "GNU tar format."
msgstr ""

msgid "POSIX.1-2001 (pax) format."
msgstr ""

msgid "The default format for creating archives. This is currently :const:`GNU_FORMAT`."
msgstr ""

msgid "The following variables are available on module level:"
msgstr ""

msgid "The default character encoding: ``'utf-8'`` on Windows, :func:`sys.getfilesystemencoding` otherwise."
msgstr ""

msgid "Documentation of the :mod:`zipfile` standard module."
msgstr ""

msgid "Documentation for tar archive files, including GNU tar extensions."
msgstr ""

msgid "TarFile Objects"
msgstr ""

msgid "The :class:`TarFile` object provides an interface to a tar archive. A tar archive is a sequence of blocks. An archive member (a stored file) is made up of a header block followed by data blocks. It is possible to store a file in a tar archive several times. Each archive member is represented by a :class:`TarInfo` object, see :ref:`tarinfo-objects` for details."
msgstr ""

msgid "A :class:`TarFile` object can be used as a context manager in a :keyword:`with` statement. It will automatically be closed when the block is completed. Please note that in the event of an exception an archive opened for writing will not be finalized; only the internally used file object will be closed. See the :ref:`tar-examples` section for a use case."
msgstr ""

msgid "All following arguments are optional and can be accessed as instance attributes as well."
msgstr ""

msgid "*name* is the pathname of the archive. It can be omitted if *fileobj* is given. In this case, the file object's :attr:`name` attribute is used if it exists."
msgstr ""

msgid "*mode* is either ``'r'`` to read from an existing archive, ``'a'`` to append data to an existing file or ``'w'`` to create a new file overwriting an existing one."
msgstr ""

msgid "If *fileobj* is given, it is used for reading or writing data. If it can be determined, *mode* is overridden by *fileobj*'s mode. *fileobj* will be used from position 0."
msgstr ""

msgid "*fileobj* is not closed, when :class:`TarFile` is closed."
msgstr ""

msgid "*format* controls the archive format. It must be one of the constants :const:`USTAR_FORMAT`, :const:`GNU_FORMAT` or :const:`PAX_FORMAT` that are defined at module level."
msgstr ""

msgid "The *tarinfo* argument can be used to replace the default :class:`TarInfo` class with a different one."
msgstr ""

msgid "If *dereference* is :const:`False`, add symbolic and hard links to the archive. If it is :const:`True`, add the content of the target files to the archive. This has no effect on systems that do not support symbolic links."
msgstr ""

msgid "If *ignore_zeros* is :const:`False`, treat an empty block as the end of the archive. If it is :const:`True`, skip empty (and invalid) blocks and try to get as many members as possible. This is only useful for reading concatenated or damaged archives."
msgstr ""

msgid "*debug* can be set from ``0`` (no debug messages) up to ``3`` (all debug messages). The messages are written to ``sys.stderr``."
msgstr ""

msgid "If *errorlevel* is ``0``, all errors are ignored when using :meth:`TarFile.extract`. Nevertheless, they appear as error messages in the debug output, when debugging is enabled.  If ``1``, all *fatal* errors are raised as :exc:`OSError` or :exc:`IOError` exceptions. If ``2``, all *non-fatal* errors are raised as :exc:`TarError` exceptions as well."
msgstr ""

msgid "The *encoding* and *errors* arguments define the character encoding to be used for reading or writing the archive and how conversion errors are going to be handled. The default settings will work for most users. See section :ref:`tar-unicode` for in-depth information."
msgstr ""

msgid "The *pax_headers* argument is an optional dictionary of strings which will be added as a pax global header if *format* is :const:`PAX_FORMAT`."
msgstr ""

msgid "Alternative constructor. The :func:`tarfile.open` function is actually a shortcut to this classmethod."
msgstr ""

msgid "Return a :class:`TarInfo` object for member *name*. If *name* can not be found in the archive, :exc:`KeyError` is raised."
msgstr ""

msgid "If a member occurs more than once in the archive, its last occurrence is assumed to be the most up-to-date version."
msgstr ""

msgid "Return the members of the archive as a list of :class:`TarInfo` objects. The list has the same order as the members in the archive."
msgstr ""

msgid "Return the members as a list of their names. It has the same order as the list returned by :meth:`getmembers`."
msgstr ""

msgid "Print a table of contents to ``sys.stdout``. If *verbose* is :const:`False`, only the names of the members are printed. If it is :const:`True`, output similar to that of :program:`ls -l` is produced."
msgstr ""

msgid "Return the next member of the archive as a :class:`TarInfo` object, when :class:`TarFile` is opened for reading. Return :const:`None` if there is no more available."
msgstr ""

msgid "Extract all members from the archive to the current working directory or directory *path*. If optional *members* is given, it must be a subset of the list returned by :meth:`getmembers`. Directory information like owner, modification time and permissions are set after all members have been extracted. This is done to work around two problems: A directory's modification time is reset each time a file is created in it. And, if a directory's permissions do not allow writing, extracting files to it will fail."
msgstr ""

msgid "Never extract archives from untrusted sources without prior inspection. It is possible that files are created outside of *path*, e.g. members that have absolute filenames starting with ``\"/\"`` or filenames with two dots ``\"..\"``."
msgstr ""

msgid "Extract a member from the archive to the current working directory, using its full name. Its file information is extracted as accurately as possible. *member* may be a filename or a :class:`TarInfo` object. You can specify a different directory using *path*."
msgstr ""

msgid "The :meth:`extract` method does not take care of several extraction issues. In most cases you should consider using the :meth:`extractall` method."
msgstr ""

msgid "See the warning for :meth:`extractall`."
msgstr ""

msgid "Extract a member from the archive as a file object. *member* may be a filename or a :class:`TarInfo` object. If *member* is a regular file, a file-like object is returned. If *member* is a link, a file-like object is constructed from the link's target. If *member* is none of the above, :const:`None` is returned."
msgstr ""

msgid "The file-like object is read-only.  It provides the methods :meth:`read`, :meth:`readline`, :meth:`readlines`, :meth:`seek`, :meth:`tell`, and :meth:`close`, and also supports iteration over its lines."
msgstr ""

msgid "Add the file *name* to the archive. *name* may be any type of file (directory, fifo, symbolic link, etc.). If given, *arcname* specifies an alternative name for the file in the archive. Directories are added recursively by default. This can be avoided by setting *recursive* to :const:`False`. If *exclude* is given, it must be a function that takes one filename argument and returns a boolean value. Depending on this value the respective file is either excluded (:const:`True`) or added (:const:`False`). If *filter* is specified it must be a function that takes a :class:`TarInfo` object argument and returns the changed :class:`TarInfo` object. If it instead returns :const:`None` the :class:`TarInfo` object will be excluded from the archive. See :ref:`tar-examples` for an example."
msgstr ""

msgid "Add the :class:`TarInfo` object *tarinfo* to the archive. If *fileobj* is given, ``tarinfo.size`` bytes are read from it and added to the archive.  You can create :class:`TarInfo` objects using :meth:`gettarinfo`."
msgstr ""

msgid "On Windows platforms, *fileobj* should always be opened with mode ``'rb'`` to avoid irritation about the file size."
msgstr ""

msgid "Create a :class:`TarInfo` object for either the file *name* or the file object *fileobj* (using :func:`os.fstat` on its file descriptor).  You can modify some of the :class:`TarInfo`'s attributes before you add it using :meth:`addfile`. If given, *arcname* specifies an alternative name for the file in the archive."
msgstr ""

msgid "Close the :class:`TarFile`. In write mode, two finishing zero blocks are appended to the archive."
msgstr ""

msgid "A dictionary containing key-value pairs of pax global headers."
msgstr ""

msgid "TarInfo Objects"
msgstr ""

msgid "A :class:`TarInfo` object represents one member in a :class:`TarFile`. Aside from storing all required attributes of a file (like file type, size, time, permissions, owner etc.), it provides some useful methods to determine its type. It does *not* contain the file's data itself."
msgstr ""

msgid ":class:`TarInfo` objects are returned by :class:`TarFile`'s methods :meth:`getmember`, :meth:`getmembers` and :meth:`gettarinfo`."
msgstr ""

msgid "Create a :class:`TarInfo` object."
msgstr ""

msgid "Create and return a :class:`TarInfo` object from string buffer *buf*."
msgstr ""

msgid "Raises :exc:`HeaderError` if the buffer is invalid.."
msgstr ""

msgid "Read the next member from the :class:`TarFile` object *tarfile* and return it as a :class:`TarInfo` object."
msgstr ""

msgid "Create a string buffer from a :class:`TarInfo` object. For information on the arguments see the constructor of the :class:`TarFile` class."
msgstr ""

msgid "A ``TarInfo`` object has the following public data attributes:"
msgstr ""

msgid "Name of the archive member."
msgstr ""

msgid "Size in bytes."
msgstr ""

msgid "Permission bits."
msgstr ""

msgid "File type.  *type* is usually one of these constants: :const:`REGTYPE`, :const:`AREGTYPE`, :const:`LNKTYPE`, :const:`SYMTYPE`, :const:`DIRTYPE`, :const:`FIFOTYPE`, :const:`CONTTYPE`, :const:`CHRTYPE`, :const:`BLKTYPE`, :const:`GNUTYPE_SPARSE`.  To determine the type of a :class:`TarInfo` object more conveniently, use the ``is_*()`` methods below."
msgstr ""

msgid "Name of the target file name, which is only present in :class:`TarInfo` objects of type :const:`LNKTYPE` and :const:`SYMTYPE`."
msgstr ""

msgid "User ID of the user who originally stored this member."
msgstr ""

msgid "Group ID of the user who originally stored this member."
msgstr ""

msgid "User name."
msgstr ""

msgid "Group name."
msgstr ""

msgid "A dictionary containing key-value pairs of an associated pax extended header."
msgstr ""

msgid "A :class:`TarInfo` object also provides some convenient query methods:"
msgstr ""

msgid "Return :const:`True` if the :class:`Tarinfo` object is a regular file."
msgstr ""

msgid "Same as :meth:`isfile`."
msgstr ""

msgid "Return :const:`True` if it is a directory."
msgstr ""

msgid "Return :const:`True` if it is a symbolic link."
msgstr ""

msgid "Return :const:`True` if it is a hard link."
msgstr ""

msgid "Return :const:`True` if it is a character device."
msgstr ""

msgid "Return :const:`True` if it is a block device."
msgstr ""

msgid "Return :const:`True` if it is a FIFO."
msgstr ""

msgid "Return :const:`True` if it is one of character device, block device or FIFO."
msgstr ""

msgid "How to extract an entire tar archive to the current working directory::"
msgstr ""

msgid "import tarfile tar = tarfile.open(\"sample.tar.gz\") tar.extractall() tar.close()"
msgstr ""

msgid "How to extract a subset of a tar archive with :meth:`TarFile.extractall` using a generator function instead of a list::"
msgstr ""

msgid "import os import tarfile  def py_files(members):     for tarinfo in members:         if os.path.splitext(tarinfo.name)[1] == \".py\":             yield tarinfo  tar = tarfile.open(\"sample.tar.gz\") tar.extractall(members=py_files(tar)) tar.close()"
msgstr ""

msgid "How to create an uncompressed tar archive from a list of filenames::"
msgstr ""

msgid "import tarfile tar = tarfile.open(\"sample.tar\", \"w\") for name in [\"foo\", \"bar\", \"quux\"]:     tar.add(name) tar.close()"
msgstr ""

msgid "The same example using the :keyword:`with` statement::"
msgstr ""

msgid "import tarfile with tarfile.open(\"sample.tar\", \"w\") as tar:     for name in [\"foo\", \"bar\", \"quux\"]:         tar.add(name)"
msgstr ""

msgid "How to read a gzip compressed tar archive and display some member information::"
msgstr ""

msgid "import tarfile tar = tarfile.open(\"sample.tar.gz\", \"r:gz\") for tarinfo in tar:     print(tarinfo.name, \"is\", tarinfo.size, \"bytes in size and is\", end=\"\")     if tarinfo.isreg():         print(\"a regular file.\")     elif tarinfo.isdir():         print(\"a directory.\")     else:         print(\"something else.\") tar.close()"
msgstr ""

msgid "How to create an archive and reset the user information using the *filter* parameter in :meth:`TarFile.add`::"
msgstr ""

msgid "import tarfile def reset(tarinfo):     tarinfo.uid = tarinfo.gid = 0     tarinfo.uname = tarinfo.gname = \"root\"     return tarinfo tar = tarfile.open(\"sample.tar.gz\", \"w:gz\") tar.add(\"foo\", filter=reset) tar.close()"
msgstr ""

msgid "Supported tar formats"
msgstr ""

msgid "There are three tar formats that can be created with the :mod:`tarfile` module:"
msgstr ""

msgid "The POSIX.1-1988 ustar format (:const:`USTAR_FORMAT`). It supports filenames up to a length of at best 256 characters and linknames up to 100 characters. The maximum file size is 8 gigabytes. This is an old and limited but widely supported format."
msgstr ""

msgid "The GNU tar format (:const:`GNU_FORMAT`). It supports long filenames and linknames, files bigger than 8 gigabytes and sparse files. It is the de facto standard on GNU/Linux systems. :mod:`tarfile` fully supports the GNU tar extensions for long names, sparse file support is read-only."
msgstr ""

msgid "The POSIX.1-2001 pax format (:const:`PAX_FORMAT`). It is the most flexible format with virtually no limits. It supports long filenames and linknames, large files and stores pathnames in a portable way. However, not all tar implementations today are able to handle pax archives properly."
msgstr ""

msgid "The *pax* format is an extension to the existing *ustar* format. It uses extra headers for information that cannot be stored otherwise. There are two flavours of pax headers: Extended headers only affect the subsequent file header, global headers are valid for the complete archive and affect all following files. All the data in a pax header is encoded in *UTF-8* for portability reasons."
msgstr ""

msgid "There are some more variants of the tar format which can be read, but not created:"
msgstr ""

msgid "The ancient V7 format. This is the first tar format from Unix Seventh Edition, storing only regular files and directories. Names must not be longer than 100 characters, there is no user/group name information. Some archives have miscalculated header checksums in case of fields with non-ASCII characters."
msgstr ""

msgid "The SunOS tar extended format. This format is a variant of the POSIX.1-2001 pax format, but is not compatible."
msgstr ""

msgid "Unicode issues"
msgstr ""

msgid "The tar format was originally conceived to make backups on tape drives with the main focus on preserving file system information. Nowadays tar archives are commonly used for file distribution and exchanging archives over networks. One problem of the original format (which is the basis of all other formats) is that there is no concept of supporting different character encodings. For example, an ordinary tar archive created on a *UTF-8* system cannot be read correctly on a *Latin-1* system if it contains non-*ASCII* characters. Textual metadata (like filenames, linknames, user/group names) will appear damaged. Unfortunately, there is no way to autodetect the encoding of an archive. The pax format was designed to solve this problem. It stores non-ASCII metadata using the universal character encoding *UTF-8*."
msgstr ""

msgid "The details of character conversion in :mod:`tarfile` are controlled by the *encoding* and *errors* keyword arguments of the :class:`TarFile` class."
msgstr ""

msgid "*encoding* defines the character encoding to use for the metadata in the archive. The default value is :func:`sys.getfilesystemencoding` or ``'ascii'`` as a fallback. Depending on whether the archive is read or written, the metadata must be either decoded or encoded. If *encoding* is not set appropriately, this conversion may fail."
msgstr ""

msgid "The *errors* argument defines how characters are treated that cannot be converted. Possible values are listed in section :ref:`codec-base-classes`. The default scheme is ``'surrogateescape'`` which Python also uses for its file system calls, see :ref:`os-filenames`."
msgstr ""

msgid "In case of :const:`PAX_FORMAT` archives, *encoding* is generally not needed because all the metadata is stored using *UTF-8*. *encoding* is only used in the rare cases when binary pax headers are decoded or when strings with surrogate characters are stored."
msgstr ""

msgid ":mod:`telnetlib` --- Telnet client"
msgstr ""

msgid "The :mod:`telnetlib` module provides a :class:`Telnet` class that implements the Telnet protocol.  See :rfc:`854` for details about the protocol. In addition, it provides symbolic constants for the protocol characters (see below), and for the telnet options. The symbolic names of the telnet options follow the definitions in ``arpa/telnet.h``, with the leading ``TELOPT_`` removed. For symbolic names of options which are traditionally not included in ``arpa/telnet.h``, see the module source itself."
msgstr ""

msgid "The symbolic constants for the telnet commands are: IAC, DONT, DO, WONT, WILL, SE (Subnegotiation End), NOP (No Operation), DM (Data Mark), BRK (Break), IP (Interrupt process), AO (Abort output), AYT (Are You There), EC (Erase Character), EL (Erase Line), GA (Go Ahead), SB (Subnegotiation Begin)."
msgstr ""

msgid ":class:`Telnet` represents a connection to a Telnet server. The instance is initially not connected by default; the :meth:`open` method must be used to establish a connection.  Alternatively, the host name and optional port number can be passed to the constructor, to, in which case the connection to the server will be established before the constructor returns.  The optional *timeout* parameter specifies a timeout in seconds for blocking operations like the connection attempt (if not specified, the global default timeout setting will be used)."
msgstr ""

msgid "Do not reopen an already connected instance."
msgstr ""

msgid "This class has many :meth:`read_\\*` methods.  Note that some of them  raise :exc:`EOFError` when the end of the connection is read, because they can return an empty string for other reasons.  See the individual descriptions below."
msgstr ""

msgid "Definition of the Telnet protocol."
msgstr ""

msgid "Telnet Objects"
msgstr ""

msgid ":class:`Telnet` instances have the following methods:"
msgstr ""

msgid "Read until a given byte string, *expected*, is encountered or until *timeout* seconds have passed."
msgstr ""

msgid "When no match is found, return whatever is available instead, possibly empty bytes.  Raise :exc:`EOFError` if the connection is closed and no cooked data is available."
msgstr ""

msgid "Read all data until EOF as bytes; block until connection closed."
msgstr ""

msgid "Read at least one byte of cooked data unless EOF is hit. Return ``b''`` if EOF is hit.  Block if no data is immediately available."
msgstr ""

msgid "Read everything that can be without blocking in I/O (eager)."
msgstr ""

msgid "Raise :exc:`EOFError` if connection closed and no cooked data available. Return ``b''`` if no cooked data available otherwise. Do not block unless in the midst of an IAC sequence."
msgstr ""

msgid "Read readily available data."
msgstr ""

msgid "Process and return data already in the queues (lazy)."
msgstr ""

msgid "Raise :exc:`EOFError` if connection closed and no data available. Return ``b''`` if no cooked data available otherwise.  Do not block unless in the midst of an IAC sequence."
msgstr ""

msgid "Return any data available in the cooked queue (very lazy)."
msgstr ""

msgid "Raise :exc:`EOFError` if connection closed and no data available. Return ``b''`` if no cooked data available otherwise.  This method never blocks."
msgstr ""

msgid "Return the data collected between a SB/SE pair (suboption begin/end). The callback should access these data when it was invoked with a ``SE`` command. This method never blocks."
msgstr ""

msgid "Connect to a host. The optional second argument is the port number, which defaults to the standard Telnet port (23). The optional *timeout* parameter specifies a timeout in seconds for blocking operations like the connection attempt (if not specified, the global default timeout setting will be used)."
msgstr ""

msgid "Do not try to reopen an already connected instance."
msgstr ""

msgid "Print a debug message when the debug level is ``>`` 0. If extra arguments are present, they are substituted in the message using the standard string formatting operator."
msgstr ""

msgid "Set the debug level.  The higher the value of *debuglevel*, the more debug output you get (on ``sys.stdout``)."
msgstr ""

msgid "Return the socket object used internally."
msgstr ""

msgid "Return the file descriptor of the socket object used internally."
msgstr ""

msgid "Write a byte string to the socket, doubling any IAC characters. This can block if the connection is blocked.  May raise :exc:`socket.error` if the connection is closed."
msgstr ""

msgid "Interaction function, emulates a very dumb Telnet client."
msgstr ""

msgid "Multithreaded version of :meth:`interact`."
msgstr ""

msgid "Read until one from a list of a regular expressions matches."
msgstr ""

msgid "The first argument is a list of regular expressions, either compiled (:class:`re.RegexObject` instances) or uncompiled (byte strings). The optional second argument is a timeout, in seconds; the default is to block indefinitely."
msgstr ""

msgid "Return a tuple of three items: the index in the list of the first regular expression that matches; the match object returned; and the bytes read up till and including the match."
msgstr ""

msgid "If end of file is found and no bytes were read, raise :exc:`EOFError`. Otherwise, when nothing matches, return ``(-1, None, data)`` where *data* is the bytes received so far (may be empty bytes if a timeout happened)."
msgstr ""

msgid "If a regular expression ends with a greedy match (such as ``.*``) or if more than one expression can match the same input, the results are indeterministic, and may depend on the I/O timing."
msgstr ""

msgid "Each time a telnet option is read on the input flow, this *callback* (if set) is called with the following parameters : callback(telnet socket, command (DO/DONT/WILL/WONT), option).  No other action is done afterwards by telnetlib."
msgstr ""

msgid "Telnet Example"
msgstr ""

msgid "import getpass import telnetlib  HOST = \"localhost\" user = input(\"Enter your remote account: \") password = getpass.getpass()  tn = telnetlib.Telnet(HOST)  tn.read_until(b\"login: \") tn.write(user.encode('ascii') + b\"\\n\") if password:     tn.read_until(b\"Password: \")     tn.write(password.encode('ascii') + b\"\\n\")  tn.write(b\"ls\\n\") tn.write(b\"exit\\n\")  print(tn.read_all().decode('ascii'))"
msgstr ""

msgid ":mod:`tempfile` --- Generate temporary files and directories"
msgstr ""

msgid "This module generates temporary files and directories.  It works on all supported platforms.  It provides three new functions, :func:`NamedTemporaryFile`, :func:`mkstemp`, and :func:`mkdtemp`, which should eliminate all remaining need to use the insecure :func:`mktemp` function. Temporary file names created by this module no longer contain the process ID; instead a string of six random characters is used."
msgstr ""

msgid "Also, all the user-callable functions now take additional arguments which allow direct control over the location and name of temporary files.  It is no longer necessary to use the global *tempdir* and *template* variables. To maintain backward compatibility, the argument order is somewhat odd; it is recommended to use keyword arguments for clarity."
msgstr ""

msgid "The module defines the following user-callable functions:"
msgstr ""

msgid "Return a file-like object that can be used as a temporary storage area. The file is created using :func:`mkstemp`. It will be destroyed as soon as it is closed (including an implicit close when the object is garbage collected).  Under Unix, the directory entry for the file is removed immediately after the file is created.  Other platforms do not support this; your code should not rely on a temporary file created using this function having or not having a visible name in the file system."
msgstr ""

msgid "The *mode* parameter defaults to ``'w+b'`` so that the file created can be read and written without being closed.  Binary mode is used so that it behaves consistently on all platforms without regard for the data that is stored.  *buffering*, *encoding* and *newline* are interpreted as for :func:`open`."
msgstr ""

msgid "The *dir*, *prefix* and *suffix* parameters are passed to :func:`mkstemp`."
msgstr ""

msgid "The returned object is a true file object on POSIX platforms.  On other platforms, it is a file-like object whose :attr:`!file` attribute is the underlying true file object. This file-like object can be used in a :keyword:`with` statement, just like a normal file."
msgstr ""

msgid "This function operates exactly as :func:`TemporaryFile` does, except that the file is guaranteed to have a visible name in the file system (on Unix, the directory entry is not unlinked).  That name can be retrieved from the :attr:`name` member of the file object.  Whether the name can be used to open the file a second time, while the named temporary file is still open, varies across platforms (it can be so used on Unix; it cannot on Windows NT or later).  If *delete* is true (the default), the file is deleted as soon as it is closed. The returned object is always a file-like object whose :attr:`!file` attribute is the underlying true file object. This file-like object can be used in a :keyword:`with` statement, just like a normal file."
msgstr ""

msgid "This function operates exactly as :func:`TemporaryFile` does, except that data is spooled in memory until the file size exceeds *max_size*, or until the file's :func:`fileno` method is called, at which point the contents are written to disk and operation proceeds as with :func:`TemporaryFile`."
msgstr ""

msgid "The resulting file has one additional method, :func:`rollover`, which causes the file to roll over to an on-disk file regardless of its size."
msgstr ""

msgid "The returned object is a file-like object whose :attr:`_file` attribute is either a :class:`StringIO` object or a true file object, depending on whether :func:`rollover` has been called. This file-like object can be used in a :keyword:`with` statement, just like a normal file."
msgstr ""

msgid "Creates a temporary file in the most secure manner possible.  There are no race conditions in the file's creation, assuming that the platform properly implements the :const:`os.O_EXCL` flag for :func:`os.open`.  The file is readable and writable only by the creating user ID.  If the platform uses permission bits to indicate whether a file is executable, the file is executable by no one.  The file descriptor is not inherited by child processes."
msgstr ""

msgid "Unlike :func:`TemporaryFile`, the user of :func:`mkstemp` is responsible for deleting the temporary file when done with it."
msgstr ""

msgid "If *suffix* is specified, the file name will end with that suffix, otherwise there will be no suffix.  :func:`mkstemp` does not put a dot between the file name and the suffix; if you need one, put it at the beginning of *suffix*."
msgstr ""

msgid "If *prefix* is specified, the file name will begin with that prefix; otherwise, a default prefix is used."
msgstr ""

msgid "If *dir* is specified, the file will be created in that directory; otherwise, a default directory is used.  The default directory is chosen from a platform-dependent list, but the user of the application can control the directory location by setting the *TMPDIR*, *TEMP* or *TMP* environment variables.  There is thus no guarantee that the generated filename will have any nice properties, such as not requiring quoting when passed to external commands via ``os.popen()``."
msgstr ""

msgid "If *text* is specified, it indicates whether to open the file in binary mode (the default) or text mode.  On some platforms, this makes no difference."
msgstr ""

msgid ":func:`mkstemp` returns a tuple containing an OS-level handle to an open file (as would be returned by :func:`os.open`) and the absolute pathname of that file, in that order."
msgstr ""

msgid "Creates a temporary directory in the most secure manner possible. There are no race conditions in the directory's creation.  The directory is readable, writable, and searchable only by the creating user ID."
msgstr ""

msgid "The user of :func:`mkdtemp` is responsible for deleting the temporary directory and its contents when done with it."
msgstr ""

msgid "The *prefix*, *suffix*, and *dir* arguments are the same as for :func:`mkstemp`."
msgstr ""

msgid ":func:`mkdtemp` returns the absolute pathname of the new directory."
msgstr ""

msgid "Return an absolute pathname of a file that did not exist at the time the call is made.  The *prefix*, *suffix*, and *dir* arguments are the same as for :func:`mkstemp`."
msgstr ""

msgid "Use of this function may introduce a security hole in your program.  By the time you get around to doing anything with the file name it returns, someone else may have beaten you to the punch.  :func:`mktemp` usage can be replaced easily with :func:`NamedTemporaryFile`, passing it the ``delete=False`` parameter::"
msgstr ""

msgid ">>> f = NamedTemporaryFile(delete=False) >>> f <open file '<fdopen>', mode 'w+b' at 0x384698> >>> f.name '/var/folders/5q/5qTPn6xq2RaWqk+1Ytw3-U+++TI/-Tmp-/tmpG7V1Y0' >>> f.write(\"Hello World!\\n\") >>> f.close() >>> os.unlink(f.name) >>> os.path.exists(f.name) False"
msgstr ""

msgid "The module uses two global variables that tell it how to construct a temporary name.  They are initialized at the first call to any of the functions above.  The caller may change them, but this is discouraged; use the appropriate function arguments, instead."
msgstr ""

msgid "When set to a value other than ``None``, this variable defines the default value for the *dir* argument to all the functions defined in this module."
msgstr ""

msgid "If ``tempdir`` is unset or ``None`` at any call to any of the above functions, Python searches a standard list of directories and sets *tempdir* to the first one which the calling user can create files in. The list is:"
msgstr ""

msgid "The directory named by the :envvar:`TMPDIR` environment variable."
msgstr ""

msgid "The directory named by the :envvar:`TEMP` environment variable."
msgstr ""

msgid "The directory named by the :envvar:`TMP` environment variable."
msgstr ""

msgid "A platform-specific location:"
msgstr ""

msgid "On Windows, the directories :file:`C:\\\\TEMP`, :file:`C:\\\\TMP`, :file:`\\\\TEMP`, and :file:`\\\\TMP`, in that order."
msgstr ""

msgid "On all other platforms, the directories :file:`/tmp`, :file:`/var/tmp`, and :file:`/usr/tmp`, in that order."
msgstr ""

msgid "As a last resort, the current working directory."
msgstr ""

msgid "Return the directory currently selected to create temporary files in. If :data:`tempdir` is not ``None``, this simply returns its contents; otherwise, the search described above is performed, and the result returned."
msgstr ""

msgid "Return the filename prefix used to create temporary files.  This does not contain the directory component."
msgstr ""

msgid ":mod:`termios` --- POSIX style tty control"
msgstr ""

msgid "This module provides an interface to the POSIX calls for tty I/O control.  For a complete description of these calls, see the POSIX or Unix manual pages.  It is only available for those Unix versions that support POSIX *termios* style tty I/O control (and then only if configured at installation time)."
msgstr ""

msgid "All functions in this module take a file descriptor *fd* as their first argument.  This can be an integer file descriptor, such as returned by ``sys.stdin.fileno()``, or a file object, such as ``sys.stdin`` itself."
msgstr ""

msgid "This module also defines all the constants needed to work with the functions provided here; these have the same name as their counterparts in C.  Please refer to your system documentation for more information on using these terminal control interfaces."
msgstr ""

msgid "Return a list containing the tty attributes for file descriptor *fd*, as follows: ``[iflag, oflag, cflag, lflag, ispeed, ospeed, cc]`` where *cc* is a list of the tty special characters (each a string of length 1, except the items with indices :const:`VMIN` and :const:`VTIME`, which are integers when these fields are defined).  The interpretation of the flags and the speeds as well as the indexing in the *cc* array must be done using the symbolic constants defined in the :mod:`termios` module."
msgstr ""

msgid "Set the tty attributes for file descriptor *fd* from the *attributes*, which is a list like the one returned by :func:`tcgetattr`.  The *when* argument determines when the attributes are changed: :const:`TCSANOW` to change immediately, :const:`TCSADRAIN` to change after transmitting all queued output, or :const:`TCSAFLUSH` to change after transmitting all queued output and discarding all queued input."
msgstr ""

msgid "Send a break on file descriptor *fd*.  A zero *duration* sends a break for 0.25 --0.5 seconds; a nonzero *duration* has a system dependent meaning."
msgstr ""

msgid "Wait until all output written to file descriptor *fd* has been transmitted."
msgstr ""

msgid "Discard queued data on file descriptor *fd*.  The *queue* selector specifies which queue: :const:`TCIFLUSH` for the input queue, :const:`TCOFLUSH` for the output queue, or :const:`TCIOFLUSH` for both queues."
msgstr ""

msgid "Suspend or resume input or output on file descriptor *fd*.  The *action* argument can be :const:`TCOOFF` to suspend output, :const:`TCOON` to restart output, :const:`TCIOFF` to suspend input, or :const:`TCION` to restart input."
msgstr ""

msgid "Convenience functions for common terminal control operations."
msgstr ""

msgid "Here's a function that prompts for a password with echoing turned off.  Note the technique using a separate :func:`tcgetattr` call and a :keyword:`try` ... :keyword:`finally` statement to ensure that the old tty attributes are restored exactly no matter what happens::"
msgstr ""

msgid "def getpass(prompt=\"Password: \"):     import termios, sys     fd = sys.stdin.fileno()     old = termios.tcgetattr(fd)     new = termios.tcgetattr(fd)     new[3] = new[3] & ~termios.ECHO          # lflags     try:         termios.tcsetattr(fd, termios.TCSADRAIN, new)         passwd = input(prompt)     finally:         termios.tcsetattr(fd, termios.TCSADRAIN, old)     return passwd"
msgstr ""

msgid ":mod:`test` --- Regression tests package for Python"
msgstr ""

msgid "The :mod:`test` package contains all regression tests for Python as well as the modules :mod:`test.support` and :mod:`test.regrtest`. :mod:`test.support` is used to enhance your tests while :mod:`test.regrtest` drives the testing suite."
msgstr ""

msgid "Each module in the :mod:`test` package whose name starts with ``test_`` is a testing suite for a specific module or feature. All new tests should be written using the :mod:`unittest` or :mod:`doctest` module.  Some older tests are written using a \"traditional\" testing style that compares output printed to ``sys.stdout``; this style of test is considered deprecated."
msgstr ""

msgid "Writing PyUnit regression tests."
msgstr ""

msgid "Tests embedded in documentation strings."
msgstr ""

msgid "Writing Unit Tests for the :mod:`test` package"
msgstr ""

msgid "It is preferred that tests that use the :mod:`unittest` module follow a few guidelines. One is to name the test module by starting it with ``test_`` and end it with the name of the module being tested. The test methods in the test module should start with ``test_`` and end with a description of what the method is testing. This is needed so that the methods are recognized by the test driver as test methods. Also, no documentation string for the method should be included. A comment (such as ``# Tests function returns only True or False``) should be used to provide documentation for test methods. This is done because documentation strings get printed out if they exist and thus what test is being run is not stated."
msgstr ""

msgid "A basic boilerplate is often used::"
msgstr ""

msgid "import unittest from test import support  class MyTestCase1(unittest.TestCase):      # Only use setUp() and tearDown() if necessary      def setUp(self):         ... code to execute in preparation for tests ...      def tearDown(self):         ... code to execute to clean up after tests ...      def test_feature_one(self):         # Test feature one.         ... testing code ...      def test_feature_two(self):         # Test feature two.         ... testing code ...      ... more test methods ...  class MyTestCase2(unittest.TestCase):     ... same structure as MyTestCase1 ...  ... more test classes ...  def test_main():     support.run_unittest(MyTestCase1,                               MyTestCase2,                               ... list other tests ...                              )  if __name__ == '__main__':     test_main()"
msgstr ""

msgid "This boilerplate code allows the testing suite to be run by :mod:`test.regrtest` as well as on its own as a script."
msgstr ""

msgid "The goal for regression testing is to try to break code. This leads to a few guidelines to be followed:"
msgstr ""

msgid "The testing suite should exercise all classes, functions, and constants. This includes not just the external API that is to be presented to the outside world but also \"private\" code."
msgstr ""

msgid "Whitebox testing (examining the code being tested when the tests are being written) is preferred. Blackbox testing (testing only the published user interface) is not complete enough to make sure all boundary and edge cases are tested."
msgstr ""

msgid "Make sure all possible values are tested including invalid ones. This makes sure that not only all valid values are acceptable but also that improper values are handled correctly."
msgstr ""

msgid "Exhaust as many code paths as possible. Test where branching occurs and thus tailor input to make sure as many different paths through the code are taken."
msgstr ""

msgid "Add an explicit test for any bugs discovered for the tested code. This will make sure that the error does not crop up again if the code is changed in the future."
msgstr ""

msgid "Make sure to clean up after your tests (such as close and remove all temporary files)."
msgstr ""

msgid "If a test is dependent on a specific condition of the operating system then verify the condition already exists before attempting the test."
msgstr ""

msgid "Import as few modules as possible and do it as soon as possible. This minimizes external dependencies of tests and also minimizes possible anomalous behavior from side-effects of importing a module."
msgstr ""

msgid "Try to maximize code reuse. On occasion, tests will vary by something as small as what type of input is used. Minimize code duplication by subclassing a basic test class with a class that specifies the input::"
msgstr ""

msgid "class TestFuncAcceptsSequences(unittest.TestCase):      func = mySuperWhammyFunction      def test_func(self):         self.func(self.arg)  class AcceptLists(TestFuncAcceptsSequences):     arg = [1, 2, 3]  class AcceptStrings(TestFuncAcceptsSequences):     arg = 'abc'  class AcceptTuples(TestFuncAcceptsSequences):     arg = (1, 2, 3)"
msgstr ""

msgid "A book by Kent Beck on writing tests before code."
msgstr ""

msgid "Running tests using :mod:`test.regrtest`"
msgstr ""

msgid ":mod:`test.regrtest` can be used as a script to drive Python's regression test suite. Running the script by itself automatically starts running all regression tests in the :mod:`test` package. It does this by finding all modules in the package whose name starts with ``test_``, importing them, and executing the function :func:`test_main` if present. The names of tests to execute may also be passed to the script. Specifying a single regression test (:program:`python regrtest.py` :option:`test_spam.py`) will minimize output and only print whether the test passed or failed and thus minimize output."
msgstr ""

msgid "Running :mod:`test.regrtest` directly allows what resources are available for tests to use to be set. You do this by using the :option:`-u` command-line option. Run :program:`python regrtest.py` :option:`-uall` to turn on all resources; specifying :option:`all` as an option for :option:`-u` enables all possible resources. If all but one resource is desired (a more common case), a comma-separated list of resources that are not desired may be listed after :option:`all`. The command :program:`python regrtest.py` :option:`-uall,-audio,-largefile` will run :mod:`test.regrtest` with all resources except the :option:`audio` and :option:`largefile` resources. For a list of all resources and more command-line options, run :program:`python regrtest.py` :option:`-h`."
msgstr ""

msgid "Some other ways to execute the regression tests depend on what platform the tests are being executed on. On Unix, you can run :program:`make` :option:`test` at the top-level directory where Python was built. On Windows, executing :program:`rt.bat` from your :file:`PCBuild` directory will run all regression tests."
msgstr ""

msgid ":mod:`test.support` --- Utility functions for tests"
msgstr ""

msgid "The :mod:`test.support` module provides support for Python's regression tests."
msgstr ""

msgid "This module defines the following exceptions:"
msgstr ""

msgid "Exception to be raised when a test fails. This is deprecated in favor of :mod:`unittest`\\ -based tests and :class:`unittest.TestCase`'s assertion methods."
msgstr ""

msgid "Subclass of :exc:`unittest.SkipTest`. Raised when a resource (such as a network connection) is not available. Raised by the :func:`requires` function."
msgstr ""

msgid "The :mod:`test.support` module defines the following constants:"
msgstr ""

msgid ":const:`True` when verbose output is enabled. Should be checked when more detailed information is desired about a running test. *verbose* is set by :mod:`test.regrtest`."
msgstr ""

msgid ":const:`True` if the running interpreter is Jython."
msgstr ""

msgid "Set to a name that is safe to use as the name of a temporary file.  Any temporary file that is created should be closed and unlinked (removed)."
msgstr ""

msgid "The :mod:`test.support` module defines the following functions:"
msgstr ""

msgid "Remove the module named *module_name* from ``sys.modules`` and delete any byte-compiled files of the module."
msgstr ""

msgid "Return :const:`True` if *resource* is enabled and available. The list of available resources is only set when :mod:`test.regrtest` is executing the tests."
msgstr ""

msgid "Raise :exc:`ResourceDenied` if *resource* is not available. *msg* is the argument to :exc:`ResourceDenied` if it is raised. Always returns :const:`True` if called by a function whose ``__name__`` is ``'__main__'``. Used when tests are executed by :mod:`test.regrtest`."
msgstr ""

msgid "Return the path to the file named *filename*. If no match is found *filename* is returned. This does not equal a failure since it could be the path to the file."
msgstr ""

msgid "Execute :class:`unittest.TestCase` subclasses passed to the function. The function scans the classes for methods starting with the prefix ``test_`` and executes the tests individually."
msgstr ""

msgid "It is also legal to pass strings as parameters; these should be keys in ``sys.modules``. Each associated module will be scanned by ``unittest.TestLoader.loadTestsFromModule()``. This is usually seen in the following :func:`test_main` function::"
msgstr ""

msgid "def test_main():     support.run_unittest(__name__)"
msgstr ""

msgid "This will run all tests defined in the named module."
msgstr ""

msgid "A convenience wrapper for :func:`warnings.catch_warnings()` that makes it easier to test that a warning was correctly raised.  It is approximately equivalent to calling ``warnings.catch_warnings(record=True)`` with :meth:`warnings.simplefilter` set to ``always`` and with the option to automatically validate the results that are recorded."
msgstr ""

msgid "``check_warnings`` accepts 2-tuples of the form ``(\"message regexp\", WarningCategory)`` as positional arguments. If one or more *filters* are provided, or if the optional keyword argument *quiet* is :const:`False`, it checks to make sure the warnings are as expected:  each specified filter must match at least one of the warnings raised by the enclosed code or the test fails, and if any warnings are raised that do not match any of the specified filters the test fails.  To disable the first of these checks, set *quiet* to :const:`True`."
msgstr ""

msgid "If no arguments are specified, it defaults to::"
msgstr ""

msgid "check_warnings((\"\", Warning), quiet=True)"
msgstr ""

msgid "In this case all warnings are caught and no errors are raised."
msgstr ""

msgid "On entry to the context manager, a :class:`WarningRecorder` instance is returned. The underlying warnings list from :func:`~warnings.catch_warnings` is available via the recorder object's :attr:`warnings` attribute.  As a convenience, the attributes of the object representing the most recent warning can also be accessed directly through the recorder object (see example below).  If no warning has been raised, then any of the attributes that would otherwise be expected on an object representing a warning will return :const:`None`."
msgstr ""

msgid "The recorder object also has a :meth:`reset` method, which clears the warnings list."
msgstr ""

msgid "The context manager is designed to be used like this::"
msgstr ""

msgid "with check_warnings((\"assertion is always true\", SyntaxWarning),                     (\"\", UserWarning)):     exec('assert(False, \"Hey!\")')     warnings.warn(UserWarning(\"Hide me!\"))"
msgstr ""

msgid "In this case if either warning was not raised, or some other warning was raised, :func:`check_warnings` would raise an error."
msgstr ""

msgid "When a test needs to look more deeply into the warnings, rather than just checking whether or not they occurred, code like this can be used::"
msgstr ""

msgid "with check_warnings(quiet=True) as w:     warnings.warn(\"foo\")     assert str(w.args[0]) == \"foo\"     warnings.warn(\"bar\")     assert str(w.args[0]) == \"bar\"     assert str(w.warnings[0].args[0]) == \"foo\"     assert str(w.warnings[1].args[0]) == \"bar\"     w.reset()     assert len(w.warnings) == 0"
msgstr ""

msgid "Here all warnings will be caught, and the test code tests the captured warnings directly."
msgstr ""

msgid "This is a context manager that runs the :keyword:`with` statement body using a :class:`StringIO.StringIO` object as sys.stdout.  That object can be retrieved using the ``as`` clause of the :keyword:`with` statement."
msgstr ""

msgid "Example use::"
msgstr ""

msgid "with captured_stdout() as s:     print(\"hello\") assert s.getvalue() == \"hello\""
msgstr ""

msgid "This function imports and returns the named module. Unlike a normal import, this function raises :exc:`unittest.SkipTest` if the module cannot be imported."
msgstr ""

msgid "Module and package deprecation messages are suppressed during this import if *deprecated* is :const:`True`."
msgstr ""

msgid "This function imports and returns a fresh copy of the named Python module by removing the named module from ``sys.modules`` before doing the import. Note that unlike :func:`reload`, the original module is not affected by this operation."
msgstr ""

msgid "*fresh* is an iterable of additional module names that are also removed from the ``sys.modules`` cache before doing the import."
msgstr ""

msgid "*blocked* is an iterable of module names that are replaced with :const:`0` in the module cache during the import to ensure that attempts to import them raise :exc:`ImportError`."
msgstr ""

msgid "The named module and any modules named in the *fresh* and *blocked* parameters are saved before starting the import and then reinserted into ``sys.modules`` when the fresh import is complete."
msgstr ""

msgid "This function will raise :exc:`unittest.SkipTest` is the named module cannot be imported."
msgstr ""

msgid "# Get copies of the warnings module for testing without # affecting the version being used by the rest of the test suite # One copy uses the C implementation, the other is forced to use # the pure Python fallback implementation py_warnings = import_fresh_module('warnings', blocked=['_warnings']) c_warnings = import_fresh_module('warnings', fresh=['_warnings'])"
msgstr ""

msgid "The :mod:`test.support` module defines the following classes:"
msgstr ""

msgid "Instances are a context manager that raises :exc:`ResourceDenied` if the specified exception type is raised.  Any keyword arguments are treated as attribute/value pairs to be compared against any exception raised within the :keyword:`with` statement.  Only if all pairs match properly against attributes on the exception is :exc:`ResourceDenied` raised."
msgstr ""

msgid "Class used to temporarily set or unset environment variables.  Instances can be used as a context manager and have a complete dictionary interface for querying/modifying the underlying ``os.environ``. After exit from the context manager all changes to environment variables done through this instance will be rolled back."
msgstr ""

msgid "Temporarily set the environment variable ``envvar`` to the value of ``value``."
msgstr ""

msgid "Temporarily unset the environment variable ``envvar``."
msgstr ""

msgid "Class used to record warnings for unit tests. See documentation of :func:`check_warnings` above for more details."
msgstr ""

msgid ":mod:`textwrap` --- Text wrapping and filling"
msgstr ""

msgid "The :mod:`textwrap` module provides two convenience functions, :func:`wrap` and :func:`fill`, as well as :class:`TextWrapper`, the class that does all the work, and a utility function  :func:`dedent`.  If you're just wrapping or filling one or two  text strings, the convenience functions should be good enough; otherwise,  you should use an instance of :class:`TextWrapper` for efficiency."
msgstr ""

msgid "Wraps the single paragraph in *text* (a string) so every line is at most *width* characters long.  Returns a list of output lines, without final newlines."
msgstr ""

msgid "Optional keyword arguments correspond to the instance attributes of :class:`TextWrapper`, documented below.  *width* defaults to ``70``."
msgstr ""

msgid "Wraps the single paragraph in *text*, and returns a single string containing the wrapped paragraph.  :func:`fill` is shorthand for  ::"
msgstr ""

msgid "\"\\n\".join(wrap(text, ...))"
msgstr ""

msgid "In particular, :func:`fill` accepts exactly the same keyword arguments as :func:`wrap`."
msgstr ""

msgid "Both :func:`wrap` and :func:`fill` work by creating a :class:`TextWrapper` instance and calling a single method on it.  That instance is not reused, so for applications that wrap/fill many text strings, it will be more efficient for you to create your own :class:`TextWrapper` object."
msgstr ""

msgid "Text is preferably wrapped on whitespaces and right after the hyphens in hyphenated words; only then will long words be broken if necessary, unless :attr:`TextWrapper.break_long_words` is set to false."
msgstr ""

msgid "An additional utility function, :func:`dedent`, is provided to remove indentation from strings that have unwanted whitespace to the left of the text."
msgstr ""

msgid "Remove any common leading whitespace from every line in *text*."
msgstr ""

msgid "This can be used to make triple-quoted strings line up with the left edge of the display, while still presenting them in the source code in indented form."
msgstr ""

msgid "Note that tabs and spaces are both treated as whitespace, but they are not equal: the lines ``\"  hello\"`` and ``\"\\thello\"`` are considered to have no common leading whitespace."
msgstr ""

msgid "def test():     # end first line with \\ to avoid the empty line!     s = '''\\     hello       world     '''     print(repr(s))          # prints '    hello\\n      world\\n    '     print(repr(dedent(s)))  # prints 'hello\\n  world\\n'"
msgstr ""

msgid "The :class:`TextWrapper` constructor accepts a number of optional keyword arguments.  Each keyword argument corresponds to an instance attribute, so for example ::"
msgstr ""

msgid "wrapper = TextWrapper(initial_indent=\"* \")"
msgstr ""

msgid "is the same as  ::"
msgstr ""

msgid "wrapper = TextWrapper() wrapper.initial_indent = \"* \""
msgstr ""

msgid "You can re-use the same :class:`TextWrapper` object many times, and you can change any of its options through direct assignment to instance attributes between uses."
msgstr ""

msgid "The :class:`TextWrapper` instance attributes (and keyword arguments to the constructor) are as follows:"
msgstr ""

msgid "(default: ``70``) The maximum length of wrapped lines.  As long as there are no individual words in the input text longer than :attr:`width`, :class:`TextWrapper` guarantees that no output line will be longer than :attr:`width` characters."
msgstr ""

msgid "(default: ``True``) If true, then all tab characters in *text* will be expanded to spaces using the :meth:`expandtabs` method of *text*."
msgstr ""

msgid "(default: ``True``) If true, each whitespace character (as defined by ``string.whitespace``) remaining after tab expansion will be replaced by a single space."
msgstr ""

msgid "If :attr:`expand_tabs` is false and :attr:`replace_whitespace` is true, each tab character will be replaced by a single space, which is *not* the same as tab expansion."
msgstr ""

msgid "(default: ``True``) If true, whitespace that, after wrapping, happens to end up at the beginning or end of a line is dropped (leading whitespace in the first line is always preserved, though)."
msgstr ""

msgid "(default: ``''``) String that will be prepended to the first line of wrapped output.  Counts towards the length of the first line."
msgstr ""

msgid "(default: ``''``) String that will be prepended to all lines of wrapped output except the first.  Counts towards the length of each line except the first."
msgstr ""

msgid "(default: ``False``) If true, :class:`TextWrapper` attempts to detect sentence endings and ensure that sentences are always separated by exactly two spaces.  This is generally desired for text in a monospaced font. However, the sentence detection algorithm is imperfect: it assumes that a sentence ending consists of a lowercase letter followed by one of ``'.'``, ``'!'``, or ``'?'``, possibly followed by one of ``'\"'`` or ``\"'\"``, followed by a space.  One problem with this is algorithm is that it is unable to detect the difference between \"Dr.\" in ::"
msgstr ""

msgid "[...] Dr. Frankenstein's monster [...]"
msgstr ""

msgid "and \"Spot.\" in ::"
msgstr ""

msgid "[...] See Spot. See Spot run [...]"
msgstr ""

msgid ":attr:`fix_sentence_endings` is false by default."
msgstr ""

msgid "Since the sentence detection algorithm relies on ``string.lowercase`` for the definition of \"lowercase letter,\" and a convention of using two spaces after a period to separate sentences on the same line, it is specific to English-language texts."
msgstr ""

msgid "(default: ``True``) If true, then words longer than :attr:`width` will be broken in order to ensure that no lines are longer than :attr:`width`.  If it is false, long words will not be broken, and some lines may be longer than :attr:`width`.  (Long words will be put on a line by themselves, in order to minimize the amount by which :attr:`width` is exceeded.)"
msgstr ""

msgid "(default: ``True``) If true, wrapping will occur preferably on whitespaces and right after hyphens in compound words, as it is customary in English. If false, only whitespaces will be considered as potentially good places for line breaks, but you need to set :attr:`break_long_words` to false if you want truly insecable words.  Default behaviour in previous versions was to always allow breaking hyphenated words."
msgstr ""

msgid ":class:`TextWrapper` also provides two public methods, analogous to the module-level convenience functions:"
msgstr ""

msgid "Wraps the single paragraph in *text* (a string) so every line is at most :attr:`width` characters long.  All wrapping options are taken from instance attributes of the :class:`TextWrapper` instance. Returns a list of output lines, without final newlines."
msgstr ""

msgid "Wraps the single paragraph in *text*, and returns a single string containing the wrapped paragraph."
msgstr ""

msgid ":mod:`threading` --- Higher-level threading interface"
msgstr ""

msgid "This module constructs higher-level threading interfaces on top of the lower level :mod:`_thread` module.  See also the :mod:`queue` module."
msgstr ""

msgid "The :mod:`dummy_threading` module is provided for situations where :mod:`threading` cannot be used because :mod:`_thread` is missing."
msgstr ""

msgid "While they are not listed below, the ``camelCase`` names used for some methods and functions in this module in the Python 2.x series are still supported by this module."
msgstr ""

msgid "This module defines the following functions and objects:"
msgstr ""

msgid "Return the number of :class:`Thread` objects currently alive.  The returned count is equal to the length of the list returned by :func:`.enumerate`."
msgstr ""

msgid "A factory function that returns a new condition variable object. A condition variable allows one or more threads to wait until they are notified by another thread."
msgstr ""

msgid "Return the current :class:`Thread` object, corresponding to the caller's thread of control.  If the caller's thread of control was not created through the :mod:`threading` module, a dummy thread object with limited functionality is returned."
msgstr ""

msgid "Return a list of all :class:`Thread` objects currently alive.  The list includes daemonic threads, dummy thread objects created by :func:`current_thread`, and the main thread.  It excludes terminated threads and threads that have not yet been started."
msgstr ""

msgid "A factory function that returns a new event object.  An event manages a flag that can be set to true with the :meth:`~Event.set` method and reset to false with the :meth:`clear` method.  The :meth:`wait` method blocks until the flag is true."
msgstr ""

msgid "A class that represents thread-local data.  Thread-local data are data whose values are thread specific.  To manage thread-local data, just create an instance of :class:`local` (or a subclass) and store attributes on it::"
msgstr ""

msgid "mydata = threading.local() mydata.x = 1"
msgstr ""

msgid "The instance's values will be different for separate threads."
msgstr ""

msgid "For more details and extensive examples, see the documentation string of the :mod:`_threading_local` module."
msgstr ""

msgid "A factory function that returns a new primitive lock object.  Once a thread has acquired it, subsequent attempts to acquire it block, until it is released; any thread may release it."
msgstr ""

msgid "A factory function that returns a new reentrant lock object. A reentrant lock must be released by the thread that acquired it. Once a thread has acquired a reentrant lock, the same thread may acquire it again without blocking; the thread must release it once for each time it has acquired it."
msgstr ""

msgid "A factory function that returns a new semaphore object.  A semaphore manages a counter representing the number of :meth:`release` calls minus the number of :meth:`acquire` calls, plus an initial value. The :meth:`acquire` method blocks if necessary until it can return without making the counter negative.  If not given, *value* defaults to 1."
msgstr ""

msgid "A factory function that returns a new bounded semaphore object.  A bounded semaphore checks to make sure its current value doesn't exceed its initial value.  If it does, :exc:`ValueError` is raised. In most situations semaphores are used to guard resources with limited capacity.  If the semaphore is released too many times it's a sign of a bug.  If not given, *value* defaults to 1."
msgstr ""

msgid "A class that represents a thread of control.  This class can be safely subclassed in a limited fashion."
msgstr ""

msgid "A thread that executes a function after a specified interval has passed."
msgstr ""

msgid "Set a trace function for all threads started from the :mod:`threading` module. The *func* will be passed to  :func:`sys.settrace` for each thread, before its :meth:`run` method is called."
msgstr ""

msgid "Set a profile function for all threads started from the :mod:`threading` module. The *func* will be passed to  :func:`sys.setprofile` for each thread, before its :meth:`run` method is called."
msgstr ""

msgid "This module also defines the following constant:"
msgstr ""

msgid "The maximum value allowed for the *timeout* parameter of blocking functions (:meth:`Lock.acquire`, :meth:`RLock.acquire`, :meth:`Condition.wait`, etc.). Specifiying a timeout greater than this value will raise an :exc:`OverflowError`."
msgstr ""

msgid "Detailed interfaces for the objects are documented below."
msgstr ""

msgid "The design of this module is loosely based on Java's threading model. However, where Java makes locks and condition variables basic behavior of every object, they are separate objects in Python.  Python's :class:`Thread` class supports a subset of the behavior of Java's Thread class; currently, there are no priorities, no thread groups, and threads cannot be destroyed, stopped, suspended, resumed, or interrupted.  The static methods of Java's Thread class, when implemented, are mapped to module-level functions."
msgstr ""

msgid "All of the methods described below are executed atomically."
msgstr ""

msgid "Thread Objects"
msgstr ""

msgid "This class represents an activity that is run in a separate thread of control. There are two ways to specify the activity: by passing a callable object to the constructor, or by overriding the :meth:`run` method in a subclass.  No other methods (except for the constructor) should be overridden in a subclass.  In other words,  *only*  override the :meth:`__init__` and :meth:`run` methods of this class."
msgstr ""

msgid "Once a thread object is created, its activity must be started by calling the thread's :meth:`start` method.  This invokes the :meth:`run` method in a separate thread of control."
msgstr ""

msgid "Once the thread's activity is started, the thread is considered 'alive'. It stops being alive when its :meth:`run` method terminates -- either normally, or by raising an unhandled exception.  The :meth:`is_alive` method tests whether the thread is alive."
msgstr ""

msgid "Other threads can call a thread's :meth:`join` method.  This blocks the calling thread until the thread whose :meth:`join` method is called is terminated."
msgstr ""

msgid "A thread has a name.  The name can be passed to the constructor, and read or changed through the :attr:`name` attribute."
msgstr ""

msgid "A thread can be flagged as a \"daemon thread\".  The significance of this flag is that the entire Python program exits when only daemon threads are left.  The initial value is inherited from the creating thread.  The flag can be set through the :attr:`daemon` property."
msgstr ""

msgid "There is a \"main thread\" object; this corresponds to the initial thread of control in the Python program.  It is not a daemon thread."
msgstr ""

msgid "There is the possibility that \"dummy thread objects\" are created. These are thread objects corresponding to \"alien threads\", which are threads of control started outside the threading module, such as directly from C code.  Dummy thread objects have limited functionality; they are always considered alive and daemonic, and cannot be :meth:`join`\\ ed.  They are never deleted, since it is impossible to detect the termination of alien threads."
msgstr ""

msgid "This constructor should always be called with keyword arguments.  Arguments are:"
msgstr ""

msgid "*group* should be ``None``; reserved for future extension when a :class:`ThreadGroup` class is implemented."
msgstr ""

msgid "*target* is the callable object to be invoked by the :meth:`run` method. Defaults to ``None``, meaning nothing is called."
msgstr ""

msgid "*name* is the thread name.  By default, a unique name is constructed of the form \"Thread-*N*\" where *N* is a small decimal number."
msgstr ""

msgid "*args* is the argument tuple for the target invocation.  Defaults to ``()``."
msgstr ""

msgid "*kwargs* is a dictionary of keyword arguments for the target invocation. Defaults to ``{}``."
msgstr ""

msgid "If the subclass overrides the constructor, it must make sure to invoke the base class constructor (``Thread.__init__()``) before doing anything else to the thread."
msgstr ""

msgid "Start the thread's activity."
msgstr ""

msgid "It must be called at most once per thread object.  It arranges for the object's :meth:`run` method to be invoked in a separate thread of control."
msgstr ""

msgid "This method will raise a :exc:`RuntimeException` if called more than once on the same thread object."
msgstr ""

msgid "Method representing the thread's activity."
msgstr ""

msgid "You may override this method in a subclass.  The standard :meth:`run` method invokes the callable object passed to the object's constructor as the *target* argument, if any, with sequential and keyword arguments taken from the *args* and *kwargs* arguments, respectively."
msgstr ""

msgid "Wait until the thread terminates. This blocks the calling thread until the thread whose :meth:`join` method is called terminates -- either normally or through an unhandled exception -- or until the optional timeout occurs."
msgstr ""

msgid "When the *timeout* argument is present and not ``None``, it should be a floating point number specifying a timeout for the operation in seconds (or fractions thereof). As :meth:`join` always returns ``None``, you must call :meth:`is_alive` after :meth:`join` to decide whether a timeout happened -- if the thread is still alive, the :meth:`join` call timed out."
msgstr ""

msgid "When the *timeout* argument is not present or ``None``, the operation will block until the thread terminates."
msgstr ""

msgid "A thread can be :meth:`join`\\ ed many times."
msgstr ""

msgid ":meth:`join` raises a :exc:`RuntimeError` if an attempt is made to join the current thread as that would cause a deadlock. It is also an error to :meth:`join` a thread before it has been started and attempts to do so raises the same exception."
msgstr ""

msgid "A string used for identification purposes only. It has no semantics. Multiple threads may be given the same name.  The initial name is set by the constructor."
msgstr ""

msgid "Old getter/setter API for :attr:`~Thread.name`; use it directly as a property instead."
msgstr ""

msgid "The 'thread identifier' of this thread or ``None`` if the thread has not been started.  This is a nonzero integer.  See the :func:`thread.get_ident()` function.  Thread identifiers may be recycled when a thread exits and another thread is created.  The identifier is available even after the thread has exited."
msgstr ""

msgid "Return whether the thread is alive."
msgstr ""

msgid "Roughly, a thread is alive from the moment the :meth:`start` method returns until its :meth:`run` method terminates. The module function :func:`.enumerate` returns a list of all alive threads."
msgstr ""

msgid "A boolean value indicating whether this thread is a daemon thread (True) or not (False).  This must be set before :meth:`start` is called, otherwise :exc:`RuntimeError` is raised.  Its initial value is inherited from the creating thread; the main thread is not a daemon thread and therefore all threads created in the main thread default to :attr:`daemon` = ``False``."
msgstr ""

msgid "The entire Python program exits when no alive non-daemon threads are left."
msgstr ""

msgid "Old getter/setter API for :attr:`~Thread.daemon`; use it directly as a property instead."
msgstr ""

msgid "Lock Objects"
msgstr ""

msgid "A primitive lock is a synchronization primitive that is not owned by a particular thread when locked.  In Python, it is currently the lowest level synchronization primitive available, implemented directly by the :mod:`_thread` extension module."
msgstr ""

msgid "A primitive lock is in one of two states, \"locked\" or \"unlocked\". It is created in the unlocked state.  It has two basic methods, :meth:`acquire` and :meth:`release`.  When the state is unlocked, :meth:`acquire` changes the state to locked and returns immediately.  When the state is locked, :meth:`acquire` blocks until a call to :meth:`release` in another thread changes it to unlocked, then the :meth:`acquire` call resets it to locked and returns.  The :meth:`release` method should only be called in the locked state; it changes the state to unlocked and returns immediately. If an attempt is made to release an unlocked lock, a :exc:`RuntimeError` will be raised."
msgstr ""

msgid "When more than one thread is blocked in :meth:`acquire` waiting for the state to turn to unlocked, only one thread proceeds when a :meth:`release` call resets the state to unlocked; which one of the waiting threads proceeds is not defined, and may vary across implementations."
msgstr ""

msgid "All methods are executed atomically."
msgstr ""

msgid "Acquire a lock, blocking or non-blocking."
msgstr ""

msgid "When invoked without arguments, block until the lock is unlocked, then set it to locked, and return true."
msgstr ""

msgid "When invoked with the *blocking* argument set to true, do the same thing as when called without arguments, and return true."
msgstr ""

msgid "When invoked with the *blocking* argument set to false, do not block.  If a call without an argument would block, return false immediately; otherwise, do the same thing as when called without arguments, and return true."
msgstr ""

msgid "When invoked with the floating-point *timeout* argument set to a positive value, block for at most the number of seconds specified by *timeout* and as long as the lock cannot be acquired.  A negative *timeout* argument specifies an unbounded wait.  It is forbidden to specify a *timeout* when *blocking* is false."
msgstr ""

msgid "The return value is ``True`` if the lock is acquired successfully, ``False`` if not (for example if the *timeout* expired)."
msgstr ""

msgid "Release a lock."
msgstr ""

msgid "When the lock is locked, reset it to unlocked, and return.  If any other threads are blocked waiting for the lock to become unlocked, allow exactly one of them to proceed."
msgstr ""

msgid "Do not call this method when the lock is unlocked."
msgstr ""

msgid "There is no return value."
msgstr ""

msgid "RLock Objects"
msgstr ""

msgid "A reentrant lock is a synchronization primitive that may be acquired multiple times by the same thread.  Internally, it uses the concepts of \"owning thread\" and \"recursion level\" in addition to the locked/unlocked state used by primitive locks.  In the locked state, some thread owns the lock; in the unlocked state, no thread owns it."
msgstr ""

msgid "To lock the lock, a thread calls its :meth:`acquire` method; this returns once the thread owns the lock.  To unlock the lock, a thread calls its :meth:`release` method. :meth:`acquire`/:meth:`release` call pairs may be nested; only the final :meth:`release` (the :meth:`release` of the outermost pair) resets the lock to unlocked and allows another thread blocked in :meth:`acquire` to proceed."
msgstr ""

msgid "When invoked without arguments: if this thread already owns the lock, increment the recursion level by one, and return immediately.  Otherwise, if another thread owns the lock, block until the lock is unlocked.  Once the lock is unlocked (not owned by any thread), then grab ownership, set the recursion level to one, and return.  If more than one thread is blocked waiting until the lock is unlocked, only one at a time will be able to grab ownership of the lock. There is no return value in this case."
msgstr ""

msgid "When invoked with the floating-point *timeout* argument set to a positive value, block for at most the number of seconds specified by *timeout* and as long as the lock cannot be acquired.  Return true if the lock has been acquired, false if the timeout has elapsed."
msgstr ""

msgid "Release a lock, decrementing the recursion level.  If after the decrement it is zero, reset the lock to unlocked (not owned by any thread), and if any other threads are blocked waiting for the lock to become unlocked, allow exactly one of them to proceed.  If after the decrement the recursion level is still nonzero, the lock remains locked and owned by the calling thread."
msgstr ""

msgid "Only call this method when the calling thread owns the lock. A :exc:`RuntimeError` is raised if this method is called when the lock is unlocked."
msgstr ""

msgid "Condition Objects"
msgstr ""

msgid "A condition variable is always associated with some kind of lock; this can be passed in or one will be created by default.  (Passing one in is useful when several condition variables must share the same lock.)"
msgstr ""

msgid "A condition variable has :meth:`acquire` and :meth:`release` methods that call the corresponding methods of the associated lock. It also has a :meth:`wait` method, and :meth:`notify` and :meth:`notify_all` methods.  These three must only be called when the calling thread has acquired the lock, otherwise a :exc:`RuntimeError` is raised."
msgstr ""

msgid "The :meth:`wait` method releases the lock, and then blocks until it is awakened by a :meth:`notify` or :meth:`notify_all` call for the same condition variable in another thread.  Once awakened, it re-acquires the lock and returns.  It is also possible to specify a timeout."
msgstr ""

msgid "The :meth:`notify` method wakes up one of the threads waiting for the condition variable, if any are waiting.  The :meth:`notify_all` method wakes up all threads waiting for the condition variable."
msgstr ""

msgid "Note: the :meth:`notify` and :meth:`notify_all` methods don't release the lock; this means that the thread or threads awakened will not return from their :meth:`wait` call immediately, but only when the thread that called :meth:`notify` or :meth:`notify_all` finally relinquishes ownership of the lock."
msgstr ""

msgid "Tip: the typical programming style using condition variables uses the lock to synchronize access to some shared state; threads that are interested in a particular change of state call :meth:`wait` repeatedly until they see the desired state, while threads that modify the state call :meth:`notify` or :meth:`notify_all` when they change the state in such a way that it could possibly be a desired state for one of the waiters.  For example, the following code is a generic producer-consumer situation with unlimited buffer capacity::"
msgstr ""

msgid "# Consume one item cv.acquire() while not an_item_is_available():     cv.wait() get_an_available_item() cv.release()  # Produce one item cv.acquire() make_an_item_available() cv.notify() cv.release()"
msgstr ""

msgid "To choose between :meth:`notify` and :meth:`notify_all`, consider whether one state change can be interesting for only one or several waiting threads.  E.g. in a typical producer-consumer situation, adding one item to the buffer only needs to wake up one consumer thread."
msgstr ""

msgid "If the *lock* argument is given and not ``None``, it must be a :class:`Lock` or :class:`RLock` object, and it is used as the underlying lock.  Otherwise, a new :class:`RLock` object is created and used as the underlying lock."
msgstr ""

msgid "Acquire the underlying lock. This method calls the corresponding method on the underlying lock; the return value is whatever that method returns."
msgstr ""

msgid "Release the underlying lock. This method calls the corresponding method on the underlying lock; there is no return value."
msgstr ""

msgid "Wait until notified or until a timeout occurs. If the calling thread has not acquired the lock when this method is called, a :exc:`RuntimeError` is raised."
msgstr ""

msgid "This method releases the underlying lock, and then blocks until it is awakened by a :meth:`notify` or :meth:`notify_all` call for the same condition variable in another thread, or until the optional timeout occurs.  Once awakened or timed out, it re-acquires the lock and returns."
msgstr ""

msgid "When the *timeout* argument is present and not ``None``, it should be a floating point number specifying a timeout for the operation in seconds (or fractions thereof)."
msgstr ""

msgid "When the underlying lock is an :class:`RLock`, it is not released using its :meth:`release` method, since this may not actually unlock the lock when it was acquired multiple times recursively.  Instead, an internal interface of the :class:`RLock` class is used, which really unlocks it even when it has been recursively acquired several times. Another internal interface is then used to restore the recursion level when the lock is reacquired."
msgstr ""

msgid "Wake up a thread waiting on this condition, if any.  If the calling thread has not acquired the lock when this method is called, a :exc:`RuntimeError` is raised."
msgstr ""

msgid "This method wakes up one of the threads waiting for the condition variable, if any are waiting; it is a no-op if no threads are waiting."
msgstr ""

msgid "The current implementation wakes up exactly one thread, if any are waiting.  However, it's not safe to rely on this behavior.  A future, optimized implementation may occasionally wake up more than one thread."
msgstr ""

msgid "Note: the awakened thread does not actually return from its :meth:`wait` call until it can reacquire the lock.  Since :meth:`notify` does not release the lock, its caller should."
msgstr ""

msgid "Wake up all threads waiting on this condition.  This method acts like :meth:`notify`, but wakes up all waiting threads instead of one. If the calling thread has not acquired the lock when this method is called, a :exc:`RuntimeError` is raised."
msgstr ""

msgid "Semaphore Objects"
msgstr ""

msgid "This is one of the oldest synchronization primitives in the history of computer science, invented by the early Dutch computer scientist Edsger W. Dijkstra (he used :meth:`P` and :meth:`V` instead of :meth:`acquire` and :meth:`release`)."
msgstr ""

msgid "A semaphore manages an internal counter which is decremented by each :meth:`acquire` call and incremented by each :meth:`release` call.  The counter can never go below zero; when :meth:`acquire` finds that it is zero, it blocks, waiting until some other thread calls :meth:`release`."
msgstr ""

msgid "The optional argument gives the initial *value* for the internal counter; it defaults to ``1``. If the *value* given is less than 0, :exc:`ValueError` is raised."
msgstr ""

msgid "Acquire a semaphore."
msgstr ""

msgid "When invoked without arguments: if the internal counter is larger than zero on entry, decrement it by one and return immediately.  If it is zero on entry, block, waiting until some other thread has called :meth:`release` to make it larger than zero.  This is done with proper interlocking so that if multiple :meth:`acquire` calls are blocked, :meth:`release` will wake exactly one of them up.  The implementation may pick one at random, so the order in which blocked threads are awakened should not be relied on.  Returns true (or blocks indefinitely)."
msgstr ""

msgid "When invoked with *blocking* set to false, do not block.  If a call without an argument would block, return false immediately; otherwise, do the same thing as when called without arguments, and return true."
msgstr ""

msgid "When invoked with a *timeout* other than None, it will block for at most *timeout* seconds.  If acquire does not complete successfully in that interval, return false.  Return true otherwise."
msgstr ""

msgid "Release a semaphore, incrementing the internal counter by one.  When it was zero on entry and another thread is waiting for it to become larger than zero again, wake up that thread."
msgstr ""

msgid ":class:`Semaphore` Example"
msgstr ""

msgid "Semaphores are often used to guard resources with limited capacity, for example, a database server.  In any situation where the size of the resource size is fixed, you should use a bounded semaphore.  Before spawning any worker threads, your main thread would initialize the semaphore::"
msgstr ""

msgid "maxconnections = 5 ... pool_sema = BoundedSemaphore(value=maxconnections)"
msgstr ""

msgid "Once spawned, worker threads call the semaphore's acquire and release methods when they need to connect to the server::"
msgstr ""

msgid "pool_sema.acquire() conn = connectdb() ... use connection ... conn.close() pool_sema.release()"
msgstr ""

msgid "The use of a bounded semaphore reduces the chance that a programming error which causes the semaphore to be released more than it's acquired will go undetected."
msgstr ""

msgid "Event Objects"
msgstr ""

msgid "This is one of the simplest mechanisms for communication between threads: one thread signals an event and other threads wait for it."
msgstr ""

msgid "An event object manages an internal flag that can be set to true with the :meth:`~Event.set` method and reset to false with the :meth:`clear` method.  The :meth:`wait` method blocks until the flag is true."
msgstr ""

msgid "The internal flag is initially false."
msgstr ""

msgid "Return true if and only if the internal flag is true."
msgstr ""

msgid "Set the internal flag to true. All threads waiting for it to become true are awakened. Threads that call :meth:`wait` once the flag is true will not block at all."
msgstr ""

msgid "Reset the internal flag to false. Subsequently, threads calling :meth:`wait` will block until :meth:`.set` is called to set the internal flag to true again."
msgstr ""

msgid "Block until the internal flag is true.  If the internal flag is true on entry, return immediately.  Otherwise, block until another thread calls :meth:`set` to set the flag to true, or until the optional timeout occurs."
msgstr ""

msgid "When the timeout argument is present and not ``None``, it should be a floating point number specifying a timeout for the operation in seconds (or fractions thereof)."
msgstr ""

msgid "This method returns the internal flag on exit, so it will always return ``True`` except if a timeout is given and the operation times out."
msgstr ""

msgid "Timer Objects"
msgstr ""

msgid "This class represents an action that should be run only after a certain amount of time has passed --- a timer.  :class:`Timer` is a subclass of :class:`Thread` and as such also functions as an example of creating custom threads."
msgstr ""

msgid "Timers are started, as with threads, by calling their :meth:`start` method.  The timer can be stopped (before its action has begun) by calling the :meth:`cancel` method.  The interval the timer will wait before executing its action may not be exactly the same as the interval specified by the user."
msgstr ""

msgid "def hello():     print(\"hello, world\")  t = Timer(30.0, hello) t.start() # after 30 seconds, \"hello, world\" will be printed"
msgstr ""

msgid "Create a timer that will run *function* with arguments *args* and  keyword arguments *kwargs*, after *interval* seconds have passed."
msgstr ""

msgid "Stop the timer, and cancel the execution of the timer's action.  This will only work if the timer is still in its waiting stage."
msgstr ""

msgid "Using locks, conditions, and semaphores in the :keyword:`with` statement"
msgstr ""

msgid "All of the objects provided by this module that have :meth:`acquire` and :meth:`release` methods can be used as context managers for a :keyword:`with` statement.  The :meth:`acquire` method will be called when the block is entered, and :meth:`release` will be called when the block is exited."
msgstr ""

msgid "Currently, :class:`Lock`, :class:`RLock`, :class:`Condition`, :class:`Semaphore`, and :class:`BoundedSemaphore` objects may be used as :keyword:`with` statement context managers.  For example::"
msgstr ""

msgid "import threading  some_rlock = threading.RLock()  with some_rlock:     print(\"some_rlock is locked while this executes\")"
msgstr ""

msgid "Importing in threaded code"
msgstr ""

msgid "While the import machinery is thread safe, there are two key restrictions on threaded imports due to inherent limitations in the way that thread safety is provided:"
msgstr ""

msgid "Firstly, other than in the main module, an import should not have the side effect of spawning a new thread and then waiting for that thread in any way. Failing to abide by this restriction can lead to a deadlock if the spawned thread directly or indirectly attempts to import a module."
msgstr ""

msgid "Secondly, all import attempts must be completed before the interpreter starts shutting itself down. This can be most easily achieved by only performing imports from non-daemon threads created through the threading module. Daemon threads and threads created directly with the thread module will require some other form of synchronization to ensure they do not attempt imports after system shutdown has commenced. Failure to abide by this restriction will lead to intermittent exceptions and crashes during interpreter shutdown (as the late imports attempt to access machinery which is no longer in a valid state)."
msgstr ""

msgid ":mod:`time` --- Time access and conversions"
msgstr ""

msgid "This module provides various time-related functions. For related functionality, see also the :mod:`datetime` and :mod:`calendar` modules."
msgstr ""

msgid "Although this module is always available, not all functions are available on all platforms.  Most of the functions defined in this module call platform C library functions with the same name.  It may sometimes be helpful to consult the platform documentation, because the semantics of these functions varies among platforms."
msgstr ""

msgid "An explanation of some terminology and conventions is in order."
msgstr ""

msgid "The :dfn:`epoch` is the point where the time starts.  On January 1st of that year, at 0 hours, the \"time since the epoch\" is zero.  For Unix, the epoch is 1970.  To find out what the epoch is, look at ``gmtime(0)``."
msgstr ""

msgid "The functions in this module do not handle dates and times before the epoch or far in the future.  The cut-off point in the future is determined by the C library; for Unix, it is typically in 2038."
msgstr ""

msgid "**Year 2000 (Y2K) issues**:  Python depends on the platform's C library, which generally doesn't have year 2000 issues, since all dates and times are represented internally as seconds since the epoch.  Functions accepting a :class:`struct_time` (see below) generally require a 4-digit year.  For backward compatibility, 2-digit years are supported if the module variable ``accept2dyear`` is a non-zero integer; this variable is initialized to ``1`` unless the environment variable :envvar:`PYTHONY2K` is set to a non-empty string, in which case it is initialized to ``0``.  Thus, you can set :envvar:`PYTHONY2K` to a non-empty string in the environment to require 4-digit years for all year input.  When 2-digit years are accepted, they are converted according to the POSIX or X/Open standard: values 69-99 are mapped to 1969-1999, and values 0--68 are mapped to 2000--2068. Values 100--1899 are always illegal. Note that this is new as of Python 1.5.2(a2); earlier versions, up to Python 1.5.1 and 1.5.2a1, would add 1900 to year values below 1900."
msgstr ""

msgid "UTC is Coordinated Universal Time (formerly known as Greenwich Mean Time, or GMT).  The acronym UTC is not a mistake but a compromise between English and French."
msgstr ""

msgid "DST is Daylight Saving Time, an adjustment of the timezone by (usually) one hour during part of the year.  DST rules are magic (determined by local law) and can change from year to year.  The C library has a table containing the local rules (often it is read from a system file for flexibility) and is the only source of True Wisdom in this respect."
msgstr ""

msgid "The precision of the various real-time functions may be less than suggested by the units in which their value or argument is expressed. E.g. on most Unix systems, the clock \"ticks\" only 50 or 100 times a second."
msgstr ""

msgid "On the other hand, the precision of :func:`time` and :func:`sleep` is better than their Unix equivalents: times are expressed as floating point numbers, :func:`time` returns the most accurate time available (using Unix :cfunc:`gettimeofday` where available), and :func:`sleep` will accept a time with a nonzero fraction (Unix :cfunc:`select` is used to implement this, where available)."
msgstr ""

msgid "The time value as returned by :func:`gmtime`, :func:`localtime`, and :func:`strptime`, and accepted by :func:`asctime`, :func:`mktime` and :func:`strftime`, is a sequence of 9 integers.  The return values of :func:`gmtime`, :func:`localtime`, and :func:`strptime` also offer attribute names for individual fields."
msgstr ""

msgid "Values"
msgstr ""

msgid ":attr:`tm_year`"
msgstr ""

msgid "(for example, 1993)"
msgstr ""

msgid ":attr:`tm_mon`"
msgstr ""

msgid "range [1, 12]"
msgstr ""

msgid ":attr:`tm_mday`"
msgstr ""

msgid "range [1, 31]"
msgstr ""

msgid ":attr:`tm_hour`"
msgstr ""

msgid "range [0, 23]"
msgstr ""

msgid ":attr:`tm_min`"
msgstr ""

msgid "range [0, 59]"
msgstr ""

msgid ":attr:`tm_sec`"
msgstr ""

msgid "range [0, 61]; see **(1)** in :func:`strftime` description"
msgstr ""

msgid ":attr:`tm_wday`"
msgstr ""

msgid "range [0, 6], Monday is 0"
msgstr ""

msgid ":attr:`tm_yday`"
msgstr ""

msgid "range [1, 366]"
msgstr ""

msgid ":attr:`tm_isdst`"
msgstr ""

msgid "0, 1 or -1; see below"
msgstr ""

msgid "Note that unlike the C structure, the month value is a range of [1, 12], not [0, 11]. A year value will be handled as described under \"Year 2000 (Y2K) issues\" above. A ``-1`` argument as the daylight savings flag, passed to :func:`mktime` will usually result in the correct daylight savings state to be filled in."
msgstr ""

msgid "When a tuple with an incorrect length is passed to a function expecting a :class:`struct_time`, or having elements of the wrong type, a :exc:`TypeError` is raised."
msgstr ""

msgid "Use the following functions to convert between time representations:"
msgstr ""

msgid "From"
msgstr ""

msgid "To"
msgstr ""

msgid "Use"
msgstr ""

msgid "seconds since the epoch"
msgstr ""

msgid ":class:`struct_time` in UTC"
msgstr ""

msgid ":func:`gmtime`"
msgstr ""

msgid ":class:`struct_time` in local time"
msgstr ""

msgid ":func:`localtime`"
msgstr ""

msgid ":func:`calendar.timegm`"
msgstr ""

msgid ":func:`mktime`"
msgstr ""

msgid "The module defines the following functions and data items:"
msgstr ""

msgid "Boolean value indicating whether two-digit year values will be accepted.  This is true by default, but will be set to false if the environment variable :envvar:`PYTHONY2K` has been set to a non-empty string.  It may also be modified at run time."
msgstr ""

msgid "The offset of the local DST timezone, in seconds west of UTC, if one is defined. This is negative if the local DST timezone is east of UTC (as in Western Europe, including the UK).  Only use this if ``daylight`` is nonzero."
msgstr ""

msgid "Convert a tuple or :class:`struct_time` representing a time as returned by :func:`gmtime` or :func:`localtime` to a 24-character string of the following form: ``'Sun Jun 20 23:21:05 1993'``.  If *t* is not provided, the current time as returned by :func:`localtime` is used. Locale information is not used by :func:`asctime`."
msgstr ""

msgid "Unlike the C function of the same name, there is no trailing newline."
msgstr ""

msgid "On Unix, return the current processor time as a floating point number expressed in seconds.  The precision, and in fact the very definition of the meaning of \"processor time\", depends on that of the C function of the same name, but in any case, this is the function to use for benchmarking Python or timing algorithms."
msgstr ""

msgid "On Windows, this function returns wall-clock seconds elapsed since the first call to this function, as a floating point number, based on the Win32 function :cfunc:`QueryPerformanceCounter`. The resolution is typically better than one microsecond."
msgstr ""

msgid "Convert a time expressed in seconds since the epoch to a string representing local time. If *secs* is not provided or :const:`None`, the current time as returned by :func:`time` is used.  ``ctime(secs)`` is equivalent to ``asctime(localtime(secs))``. Locale information is not used by :func:`ctime`."
msgstr ""

msgid "Nonzero if a DST timezone is defined."
msgstr ""

msgid "Convert a time expressed in seconds since the epoch to a :class:`struct_time` in UTC in which the dst flag is always zero.  If *secs* is not provided or :const:`None`, the current time as returned by :func:`time` is used.  Fractions of a second are ignored.  See above for a description of the :class:`struct_time` object. See :func:`calendar.timegm` for the inverse of this function."
msgstr ""

msgid "Like :func:`gmtime` but converts to local time.  If *secs* is not provided or :const:`None`, the current time as returned by :func:`time` is used.  The dst flag is set to ``1`` when DST applies to the given time."
msgstr ""

msgid "This is the inverse function of :func:`localtime`.  Its argument is the :class:`struct_time` or full 9-tuple (since the dst flag is needed; use ``-1`` as the dst flag if it is unknown) which expresses the time in *local* time, not UTC.  It returns a floating point number, for compatibility with :func:`time`. If the input value cannot be represented as a valid time, either :exc:`OverflowError` or :exc:`ValueError` will be raised (which depends on whether the invalid value is caught by Python or the underlying C libraries). The earliest date for which it can generate a time is platform-dependent."
msgstr ""

msgid "Suspend execution for the given number of seconds.  The argument may be a floating point number to indicate a more precise sleep time. The actual suspension time may be less than that requested because any caught signal will terminate the :func:`sleep` following execution of that signal's catching routine.  Also, the suspension time may be longer than requested by an arbitrary amount because of the scheduling of other activity in the system."
msgstr ""

msgid "Convert a tuple or :class:`struct_time` representing a time as returned by :func:`gmtime` or :func:`localtime` to a string as specified by the *format* argument.  If *t* is not provided, the current time as returned by :func:`localtime` is used.  *format* must be a string.  :exc:`ValueError` is raised if any field in *t* is outside of the allowed range."
msgstr ""

msgid "0 is a legal argument for any position in the time tuple; if it is normally illegal the value is forced to a correct one."
msgstr ""

msgid "The following directives can be embedded in the *format* string. They are shown without the optional field width and precision specification, and are replaced by the indicated characters in the :func:`strftime` result:"
msgstr ""

msgid "Week number of the year (Sunday as the first day of the week) as a decimal number [00,53]. All days in a new year preceding the first Sunday are considered to be in week 0."
msgstr ""

msgid "Week number of the year (Monday as the first day of the week) as a decimal number [00,53]. All days in a new year preceding the first Monday are considered to be in week 0."
msgstr ""

msgid "Time zone name (no characters if no time zone exists)."
msgstr ""

msgid "When used with the :func:`strptime` function, the ``%p`` directive only affects the output hour field if the ``%I`` directive is used to parse the hour."
msgstr ""

msgid "The range really is ``0`` to ``61``; this accounts for leap seconds and the (very rare) double leap seconds."
msgstr ""

msgid "When used with the :func:`strptime` function, ``%U`` and ``%W`` are only used in calculations when the day of the week and the year are specified."
msgstr ""

msgid "Here is an example, a format for dates compatible with that specified  in the :rfc:`2822` Internet email standard.  [#]_ ::"
msgstr ""

msgid ">>> from time import gmtime, strftime >>> strftime(\"%a, %d %b %Y %H:%M:%S +0000\", gmtime()) 'Thu, 28 Jun 2001 14:17:15 +0000'"
msgstr ""

msgid "Additional directives may be supported on certain platforms, but only the ones listed here have a meaning standardized by ANSI C."
msgstr ""

msgid "On some platforms, an optional field width and precision specification can immediately follow the initial ``'%'`` of a directive in the following order; this is also not portable. The field width is normally 2 except for ``%j`` where it is 3."
msgstr ""

msgid "Parse a string representing a time according to a format.  The return value is a :class:`struct_time` as returned by :func:`gmtime` or :func:`localtime`."
msgstr ""

msgid "The *format* parameter uses the same directives as those used by :func:`strftime`; it defaults to ``\"%a %b %d %H:%M:%S %Y\"`` which matches the formatting returned by :func:`ctime`. If *string* cannot be parsed according to *format*, or if it has excess data after parsing, :exc:`ValueError` is raised. The default values used to fill in any missing data when more accurate values cannot be inferred are ``(1900, 1, 1, 0, 0, 0, 0, 1, -1)``. Both *string* and *format* must be strings."
msgstr ""

msgid ">>> import time >>> time.strptime(\"30 Nov 00\", \"%d %b %y\")   # doctest: +NORMALIZE_WHITESPACE time.struct_time(tm_year=2000, tm_mon=11, tm_mday=30, tm_hour=0, tm_min=0,                  tm_sec=0, tm_wday=3, tm_yday=335, tm_isdst=-1)"
msgstr ""

msgid "Support for the ``%Z`` directive is based on the values contained in ``tzname`` and whether ``daylight`` is true.  Because of this, it is platform-specific except for recognizing UTC and GMT which are always known (and are considered to be non-daylight savings timezones)."
msgstr ""

msgid "Only the directives specified in the documentation are supported.  Because ``strftime()`` is implemented per platform it can sometimes offer more directives than those listed.  But ``strptime()`` is independent of any platform and thus does not necessarily support all directives available that are not documented as supported."
msgstr ""

msgid "The type of the time value sequence returned by :func:`gmtime`, :func:`localtime`, and :func:`strptime`."
msgstr ""

msgid "Return the time as a floating point number expressed in seconds since the epoch, in UTC.  Note that even though the time is always returned as a floating point number, not all systems provide time with a better precision than 1 second. While this function normally returns non-decreasing values, it can return a lower value than a previous call if the system clock has been set back between the two calls."
msgstr ""

msgid "The offset of the local (non-DST) timezone, in seconds west of UTC (negative in most of Western Europe, positive in the US, zero in the UK)."
msgstr ""

msgid "A tuple of two strings: the first is the name of the local non-DST timezone, the second is the name of the local DST timezone.  If no DST timezone is defined, the second string should not be used."
msgstr ""

msgid "Resets the time conversion rules used by the library routines. The environment variable :envvar:`TZ` specifies how this is done."
msgstr ""

msgid "Although in many cases, changing the :envvar:`TZ` environment variable may affect the output of functions like :func:`localtime` without calling :func:`tzset`, this behavior should not be relied on."
msgstr ""

msgid "The :envvar:`TZ` environment variable should contain no whitespace."
msgstr ""

msgid "The standard format of the :envvar:`TZ` environment variable is (whitespace added for clarity)::"
msgstr ""

msgid "std offset [dst [offset [,start[/time], end[/time]]]]"
msgstr ""

msgid "Where the components are:"
msgstr ""

msgid "Three or more alphanumerics giving the timezone abbreviations. These will be propagated into time.tzname"
msgstr ""

msgid "The offset has the form: ``± hh[:mm[:ss]]``. This indicates the value added the local time to arrive at UTC.  If preceded by a '-', the timezone is east of the Prime Meridian; otherwise, it is west. If no offset follows dst, summer time is assumed to be one hour ahead of standard time."
msgstr ""

msgid "Indicates when to change to and back from DST. The format of the start and end dates are one of the following:"
msgstr ""

msgid "The Julian day *n* (1 <= *n* <= 365). Leap days are not counted, so in all years February 28 is day 59 and March 1 is day 60."
msgstr ""

msgid "The zero-based Julian day (0 <= *n* <= 365). Leap days are counted, and it is possible to refer to February 29."
msgstr ""

msgid "The *d*'th day (0 <= *d* <= 6) or week *n* of month *m* of the year (1 <= *n* <= 5, 1 <= *m* <= 12, where week 5 means \"the last *d* day in month *m*\" which may occur in either the fourth or the fifth week). Week 1 is the first week in which the *d*'th day occurs. Day zero is Sunday."
msgstr ""

msgid "``time`` has the same format as ``offset`` except that no leading sign ('-' or '+') is allowed. The default, if time is not given, is 02:00:00."
msgstr ""

msgid ">>> os.environ['TZ'] = 'EST+05EDT,M4.1.0,M10.5.0' >>> time.tzset() >>> time.strftime('%X %x %Z') '02:07:36 05/08/03 EDT' >>> os.environ['TZ'] = 'AEST-10AEDT-11,M10.5.0,M3.5.0' >>> time.tzset() >>> time.strftime('%X %x %Z') '16:08:12 05/08/03 AEST'"
msgstr ""

msgid "On many Unix systems (including \\*BSD, Linux, Solaris, and Darwin), it is more convenient to use the system's zoneinfo (:manpage:`tzfile(5)`)  database to specify the timezone rules. To do this, set the  :envvar:`TZ` environment variable to the path of the required timezone  datafile, relative to the root of the systems 'zoneinfo' timezone database, usually located at :file:`/usr/share/zoneinfo`. For example,  ``'US/Eastern'``, ``'Australia/Melbourne'``, ``'Egypt'`` or  ``'Europe/Amsterdam'``. ::"
msgstr ""

msgid ">>> os.environ['TZ'] = 'US/Eastern' >>> time.tzset() >>> time.tzname ('EST', 'EDT') >>> os.environ['TZ'] = 'Egypt' >>> time.tzset() >>> time.tzname ('EET', 'EEST')"
msgstr ""

msgid "More object-oriented interface to dates and times."
msgstr ""

msgid "Internationalization services.  The locale settings can affect the return values for some of  the functions in the :mod:`time` module."
msgstr ""

msgid "General calendar-related functions.   :func:`timegm` is the inverse of :func:`gmtime` from this module."
msgstr ""

msgid "The use of ``%Z`` is now deprecated, but the ``%z`` escape that expands to the preferred  hour/minute offset is not supported by all ANSI C libraries. Also, a strict reading of the original 1982 :rfc:`822` standard calls for a two-digit year (%y rather than %Y), but practice moved to 4-digit years long before the year 2000.  The 4-digit year has been mandated by :rfc:`2822`, which obsoletes :rfc:`822`."
msgstr ""

msgid ":mod:`timeit` --- Measure execution time of small code snippets"
msgstr ""

msgid "This module provides a simple way to time small bits of Python code. It has both command line as well as callable interfaces.  It avoids a number of common traps for measuring execution times.  See also Tim Peters' introduction to the \"Algorithms\" chapter in the Python Cookbook, published by O'Reilly."
msgstr ""

msgid "The module defines the following public class:"
msgstr ""

msgid "Class for timing execution speed of small code snippets."
msgstr ""

msgid "The constructor takes a statement to be timed, an additional statement used for setup, and a timer function.  Both statements default to ``'pass'``; the timer function is platform-dependent (see the module doc string).  *stmt* and *setup* may also contain multiple statements separated by ``;`` or newlines, as long as they don't contain multi-line string literals."
msgstr ""

msgid "To measure the execution time of the first statement, use the :meth:`timeit` method.  The :meth:`repeat` method is a convenience to call :meth:`timeit` multiple times and return a list of results."
msgstr ""

msgid "The *stmt* and *setup* parameters can also take objects that are callable without arguments. This will embed calls to them in a timer function that will then be executed by :meth:`timeit`.  Note that the timing overhead is a little larger in this case because of the extra function calls."
msgstr ""

msgid "Helper to print a traceback from the timed code."
msgstr ""

msgid "Typical use::"
msgstr ""

msgid "t = Timer(...)       # outside the try/except try:     t.timeit(...)    # or t.repeat(...) except:     t.print_exc()"
msgstr ""

msgid "The advantage over the standard traceback is that source lines in the compiled template will be displayed. The optional *file* argument directs where the traceback is sent; it defaults to ``sys.stderr``."
msgstr ""

msgid "Call :meth:`timeit` a few times."
msgstr ""

msgid "This is a convenience function that calls the :meth:`timeit` repeatedly, returning a list of results.  The first argument specifies how many times to call :meth:`timeit`.  The second argument specifies the *number* argument for :func:`timeit`."
msgstr ""

msgid "It's tempting to calculate mean and standard deviation from the result vector and report these.  However, this is not very useful.  In a typical case, the lowest value gives a lower bound for how fast your machine can run the given code snippet; higher values in the result vector are typically not caused by variability in Python's speed, but by other processes interfering with your timing accuracy.  So the :func:`min` of the result is probably the only number you should be interested in.  After that, you should look at the entire vector and apply common sense rather than statistics."
msgstr ""

msgid "Time *number* executions of the main statement. This executes the setup statement once, and then returns the time it takes to execute the main statement a number of times, measured in seconds as a float.  The argument is the number of times through the loop, defaulting to one million.  The main statement, the setup statement and the timer function to be used are passed to the constructor."
msgstr ""

msgid "By default, :meth:`timeit` temporarily turns off :term:`garbage collection` during the timing.  The advantage of this approach is that it makes independent timings more comparable.  This disadvantage is that GC may be an important component of the performance of the function being measured. If so, GC can be re-enabled as the first statement in the *setup* string. For example::"
msgstr ""

msgid "timeit.Timer('for i in range(10): oct(i)', 'gc.enable()').timeit()"
msgstr ""

msgid "The module also defines two convenience functions:"
msgstr ""

msgid "Create a :class:`Timer` instance with the given statement, setup code and timer function and run its :meth:`repeat` method with the given repeat count and *number* executions."
msgstr ""

msgid "Create a :class:`Timer` instance with the given statement, setup code and timer function and run its :meth:`timeit` method with *number* executions."
msgstr ""

msgid "Command Line Interface"
msgstr ""

msgid "When called as a program from the command line, the following form is used::"
msgstr ""

msgid "python -m timeit [-n N] [-r N] [-s S] [-t] [-c] [-h] [statement ...]"
msgstr ""

msgid "where the following options are understood:"
msgstr ""

msgid "how many times to execute 'statement'"
msgstr ""

msgid "how many times to repeat the timer (default 3)"
msgstr ""

msgid "statement to be executed once initially (default ``'pass'``)"
msgstr ""

msgid "use :func:`time.time` (default on all platforms but Windows)"
msgstr ""

msgid "use :func:`time.clock` (default on Windows)"
msgstr ""

msgid "print raw timing results; repeat for more digits precision"
msgstr ""

msgid "print a short usage message and exit"
msgstr ""

msgid "A multi-line statement may be given by specifying each line as a separate statement argument; indented lines are possible by enclosing an argument in quotes and using leading spaces.  Multiple :option:`-s` options are treated similarly."
msgstr ""

msgid "If :option:`-n` is not given, a suitable number of loops is calculated by trying successive powers of 10 until the total time is at least 0.2 seconds."
msgstr ""

msgid "The default timer function is platform dependent.  On Windows, :func:`time.clock` has microsecond granularity but :func:`time.time`'s granularity is 1/60th of a second; on Unix, :func:`time.clock` has 1/100th of a second granularity and :func:`time.time` is much more precise.  On either platform, the default timer functions measure wall clock time, not the CPU time. This means that other processes running on the same computer may interfere with the timing.  The best thing to do when accurate timing is necessary is to repeat the timing a few times and use the best time.  The :option:`-r` option is good for this; the default of 3 repetitions is probably enough in most cases.  On Unix, you can use :func:`time.clock` to measure CPU time."
msgstr ""

msgid "There is a certain baseline overhead associated with executing a pass statement. The code here doesn't try to hide it, but you should be aware of it.  The baseline overhead can be measured by invoking the program without arguments."
msgstr ""

msgid "The baseline overhead differs between Python versions!  Also, to fairly compare older Python versions to Python 2.3, you may want to use Python's :option:`-O` option for the older versions to avoid timing ``SET_LINENO`` instructions."
msgstr ""

msgid "Here are two example sessions (one using the command line, one using the module interface) that compare the cost of using :func:`hasattr` vs. :keyword:`try`/:keyword:`except` to test for missing and present object attributes. ::"
msgstr ""

msgid "% timeit.py 'try:' '  str.__bool__' 'except AttributeError:' '  pass' 100000 loops, best of 3: 15.7 usec per loop % timeit.py 'if hasattr(str, \"__bool__\"): pass' 100000 loops, best of 3: 4.26 usec per loop % timeit.py 'try:' '  int.__bool__' 'except AttributeError:' '  pass' 1000000 loops, best of 3: 1.43 usec per loop % timeit.py 'if hasattr(int, \"__bool__\"): pass' 100000 loops, best of 3: 2.23 usec per loop"
msgstr ""

msgid ">>> import timeit >>> s = \"\"\"\\ ... try: ...     str.__bool__ ... except AttributeError: ...     pass ... \"\"\" >>> t = timeit.Timer(stmt=s) >>> print(\"%.2f usec/pass\" % (1000000 * t.timeit(number=100000)/100000)) 17.09 usec/pass >>> s = \"\"\"\\ ... if hasattr(str, '__bool__'): pass ... \"\"\" >>> t = timeit.Timer(stmt=s) >>> print(\"%.2f usec/pass\" % (1000000 * t.timeit(number=100000)/100000)) 4.85 usec/pass >>> s = \"\"\"\\ ... try: ...     int.__bool__ ... except AttributeError: ...     pass ... \"\"\" >>> t = timeit.Timer(stmt=s) >>> print(\"%.2f usec/pass\" % (1000000 * t.timeit(number=100000)/100000)) 1.97 usec/pass >>> s = \"\"\"\\ ... if hasattr(int, '__bool__'): pass ... \"\"\" >>> t = timeit.Timer(stmt=s) >>> print(\"%.2f usec/pass\" % (1000000 * t.timeit(number=100000)/100000)) 3.15 usec/pass"
msgstr ""

msgid "To give the :mod:`timeit` module access to functions you define, you can pass a ``setup`` parameter which contains an import statement::"
msgstr ""

msgid "def test():     \"Stupid test function\"     L = [i for i in range(100)]  if __name__=='__main__':     from timeit import Timer     t = Timer(\"test()\", \"from __main__ import test\")     print(t.timeit())"
msgstr ""

msgid "Graphical User Interfaces with Tk"
msgstr ""

msgid "Tk/Tcl has long been an integral part of Python.  It provides a robust and platform independent windowing toolkit, that is available to Python programmers using the :mod:`tkinter` package, and its extension, the :mod:`tkinter.tix` and the :mod:`tkinter.ttk` modules."
msgstr ""

msgid "The :mod:`tkinter` package is a thin object-oriented layer on top of Tcl/Tk. To use :mod:`tkinter`, you don't need to write Tcl code, but you will need to consult the Tk documentation, and occasionally the Tcl documentation. :mod:`tkinter` is a set of wrappers that implement the Tk widgets as Python classes.  In addition, the internal module :mod:`_tkinter` provides a threadsafe mechanism which allows Python and Tcl to interact."
msgstr ""

msgid ":mod:`tkinter`'s chief virtues are that it is fast, and that it usually comes bundled with Python. Although its standard documentation is weak, good material is available, which includes: references, tutorials, a book and others. :mod:`tkinter` is also famous for having an outdated look and feel, which has been vastly improved in Tk 8.5. Nevertheless, there are many other GUI libraries that you could be interested in. For more information about alternatives, see the :ref:`other-gui-packages` section."
msgstr ""

msgid ":mod:`tkinter` --- Python interface to Tcl/Tk"
msgstr ""

msgid "The :mod:`tkinter` package (\"Tk interface\") is the standard Python interface to the Tk GUI toolkit.  Both Tk and :mod:`tkinter` are available on most Unix platforms, as well as on Windows systems.  (Tk itself is not part of Python; it is maintained at ActiveState.)"
msgstr ""

msgid "The Python Tkinter Topic Guide provides a great deal of information on using Tk from Python and links to other sources of information on Tk."
msgstr ""

msgid "Fredrik Lundh's on-line reference material."
msgstr ""

msgid "On-line reference material."
msgstr ""

msgid "The book by John Grayson (ISBN 1-884777-81-3)."
msgstr ""

msgid "Tkinter Modules"
msgstr ""

msgid "Most of the time, :mod:`tkinter` is all you really need, but a number of additional modules are available as well.  The Tk interface is located in a binary module named :mod:`_tkinter`. This module contains the low-level interface to Tk, and should never be used directly by application programmers. It is usually a shared library (or DLL), but might in some cases be statically linked with the Python interpreter."
msgstr ""

msgid "In addition to the Tk interface module, :mod:`tkinter` includes a number of Python modules, :mod:`tkinter.constants` being one of the most important. Importing :mod:`tkinter` will automatically import :mod:`tkinter.constants`, so, usually, to use Tkinter all you need is a simple import statement::"
msgstr ""

msgid "import tkinter"
msgstr ""

msgid "Or, more often::"
msgstr ""

msgid "from tkinter import *"
msgstr ""

msgid "The :class:`Tk` class is instantiated without arguments. This creates a toplevel widget of Tk which usually is the main window of an application. Each instance has its own associated Tcl interpreter."
msgstr ""

msgid "The :func:`Tcl` function is a factory function which creates an object much like that created by the :class:`Tk` class, except that it does not initialize the Tk subsystem.  This is most often useful when driving the Tcl interpreter in an environment where one doesn't want to create extraneous toplevel windows, or where one cannot (such as Unix/Linux systems without an X server).  An object created by the :func:`Tcl` object can have a Toplevel window created (and the Tk subsystem initialized) by calling its :meth:`loadtk` method."
msgstr ""

msgid "Other modules that provide Tk support include:"
msgstr ""

msgid "Text widget with a vertical scroll bar built in."
msgstr ""

msgid "Dialog to let the user choose a color."
msgstr ""

msgid "Base class for the dialogs defined in the other modules listed here."
msgstr ""

msgid "Common dialogs to allow the user to specify a file to open or save."
msgstr ""

msgid "Utilities to help work with fonts."
msgstr ""

msgid "Access to standard Tk dialog boxes."
msgstr ""

msgid "Basic dialogs and convenience functions."
msgstr ""

msgid "Drag-and-drop support for :mod:`tkinter`. This is experimental and should become deprecated when it is replaced  with the Tk DND."
msgstr ""

msgid "Turtle graphics in a Tk window."
msgstr ""

msgid "Tkinter Life Preserver"
msgstr ""

msgid "This section is not designed to be an exhaustive tutorial on either Tk or Tkinter.  Rather, it is intended as a stop gap, providing some introductory orientation on the system."
msgstr ""

msgid "Credits:"
msgstr ""

msgid "Tk was written by John Ousterhout while at Berkeley."
msgstr ""

msgid "Tkinter was written by Steen Lumholt and Guido van Rossum."
msgstr ""

msgid "This Life Preserver was written by Matt Conway at the University of Virginia."
msgstr ""

msgid "The HTML rendering, and some liberal editing, was produced from a FrameMaker version by Ken Manheimer."
msgstr ""

msgid "Fredrik Lundh elaborated and revised the class interface descriptions, to get them current with Tk 4.2."
msgstr ""

msgid "Mike Clarkson converted the documentation to LaTeX, and compiled the  User Interface chapter of the reference manual."
msgstr ""

msgid "How To Use This Section"
msgstr ""

msgid "This section is designed in two parts: the first half (roughly) covers background material, while the second half can be taken to the keyboard as a handy reference."
msgstr ""

msgid "When trying to answer questions of the form \"how do I do blah\", it is often best to find out how to do\"blah\" in straight Tk, and then convert this back into the corresponding :mod:`tkinter` call. Python programmers can often guess at the correct Python command by looking at the Tk documentation. This means that in order to use Tkinter, you will have to know a little bit about Tk. This document can't fulfill that role, so the best we can do is point you to the best documentation that exists. Here are some hints:"
msgstr ""

msgid "The authors strongly suggest getting a copy of the Tk man pages. Specifically, the man pages in the ``manN`` directory are most useful. The ``man3`` man pages describe the C interface to the Tk library and thus are not especially helpful for script writers."
msgstr ""

msgid "Addison-Wesley publishes a book called Tcl and the Tk Toolkit by John Ousterhout (ISBN 0-201-63337-X) which is a good introduction to Tcl and Tk for the novice.  The book is not exhaustive, and for many details it defers to the man pages."
msgstr ""

msgid ":file:`tkinter/__init__.py` is a last resort for most, but can be a good place to go when nothing else makes sense."
msgstr ""

msgid "The Tcl/Tk manual on www.tcl.tk."
msgstr ""

msgid "The Tk/Tcl development is largely taking place at ActiveState."
msgstr ""

msgid "The book by John Ousterhout, the inventor of Tcl ."
msgstr ""

msgid "Brent Welch's encyclopedic book."
msgstr ""

msgid "A Simple Hello World Program"
msgstr ""

msgid "from tkinter import *  class Application(Frame):     def say_hi(self):         print(\"hi there, everyone!\")      def createWidgets(self):         self.QUIT = Button(self)         self.QUIT[\"text\"] = \"QUIT\"         self.QUIT[\"fg\"] = \"red\"         self.QUIT[\"command\"] = self.quit          self.QUIT.pack({\"side\": \"left\"})          self.hi_there = Button(self)         self.hi_there[\"text\"] = \"Hello\",         self.hi_there[\"command\"] = self.say_hi          self.hi_there.pack({\"side\": \"left\"})      def __init__(self, master=None):         Frame.__init__(self, master)         self.pack()         self.createWidgets()  root = Tk() app = Application(master=root) app.mainloop() root.destroy()"
msgstr ""

msgid "A (Very) Quick Look at Tcl/Tk"
msgstr ""

msgid "The class hierarchy looks complicated, but in actual practice, application programmers almost always refer to the classes at the very bottom of the hierarchy."
msgstr ""

msgid "These classes are provided for the purposes of organizing certain functions under one namespace. They aren't meant to be instantiated independently."
msgstr ""

msgid "The :class:`Tk` class is meant to be instantiated only once in an application. Application programmers need not instantiate one explicitly, the system creates one whenever any of the other classes are instantiated."
msgstr ""

msgid "The :class:`Widget` class is not meant to be instantiated, it is meant only for subclassing to make \"real\" widgets (in C++, this is called an 'abstract class')."
msgstr ""

msgid "To make use of this reference material, there will be times when you will need to know how to read short passages of Tk and how to identify the various parts of a Tk command.   (See section :ref:`tkinter-basic-mapping` for the :mod:`tkinter` equivalents of what's below.)"
msgstr ""

msgid "Tk scripts are Tcl programs.  Like all Tcl programs, Tk scripts are just lists of tokens separated by spaces.  A Tk widget is just its *class*, the *options* that help configure it, and the *actions* that make it do useful things."
msgstr ""

msgid "To make a widget in Tk, the command is always of the form::"
msgstr ""

msgid "classCommand newPathname options"
msgstr ""

msgid "denotes which kind of widget to make (a button, a label, a menu...)"
msgstr ""

msgid "is the new name for this widget.  All names in Tk must be unique.  To help enforce this, widgets in Tk are named with *pathnames*, just like files in a file system.  The top level widget, the *root*, is called ``.`` (period) and children are delimited by more periods.  For example, ``.myApp.controlPanel.okButton`` might be the name of a widget."
msgstr ""

msgid "configure the widget's appearance and in some cases, its behavior.  The options come in the form of a list of flags and values. Flags are preceded by a '-', like Unix shell command flags, and values are put in quotes if they are more than one word."
msgstr ""

msgid "button   .fred   -fg red -text \"hi there\"    ^       ^     \\______________________/    |       |                |  class    new            options command  widget  (-opt val -opt val ...)"
msgstr ""

msgid "Once created, the pathname to the widget becomes a new command.  This new *widget command* is the programmer's handle for getting the new widget to perform some *action*.  In C, you'd express this as someAction(fred, someOptions), in C++, you would express this as fred.someAction(someOptions), and in Tk, you say::"
msgstr ""

msgid ".fred someAction someOptions"
msgstr ""

msgid "Note that the object name, ``.fred``, starts with a dot."
msgstr ""

msgid "As you'd expect, the legal values for *someAction* will depend on the widget's class: ``.fred disable`` works if fred is a button (fred gets greyed out), but does not work if fred is a label (disabling of labels is not supported in Tk)."
msgstr ""

msgid "The legal values of *someOptions* is action dependent.  Some actions, like ``disable``, require no arguments, others, like a text-entry box's ``delete`` command, would need arguments to specify what range of text to delete."
msgstr ""

msgid "Mapping Basic Tk into Tkinter"
msgstr ""

msgid "Class commands in Tk correspond to class constructors in Tkinter. ::"
msgstr ""

msgid "button .fred                =====>  fred = Button()"
msgstr ""

msgid "The master of an object is implicit in the new name given to it at creation time.  In Tkinter, masters are specified explicitly. ::"
msgstr ""

msgid "button .panel.fred          =====>  fred = Button(panel)"
msgstr ""

msgid "The configuration options in Tk are given in lists of hyphened tags followed by values.  In Tkinter, options are specified as keyword-arguments in the instance constructor, and keyword-args for configure calls or as instance indices, in dictionary style, for established instances.  See section :ref:`tkinter-setting-options` on setting options. ::"
msgstr ""

msgid "button .fred -fg red        =====>  fred = Button(panel, fg=\"red\") .fred configure -fg red     =====>  fred[\"fg\"] = red                             OR ==>  fred.config(fg=\"red\")"
msgstr ""

msgid "In Tk, to perform an action on a widget, use the widget name as a command, and follow it with an action name, possibly with arguments (options).  In Tkinter, you call methods on the class instance to invoke actions on the widget.  The actions (methods) that a given widget can perform are listed in :file:`tkinter/__init__.py`. ::"
msgstr ""

msgid ".fred invoke                =====>  fred.invoke()"
msgstr ""

msgid "To give a widget to the packer (geometry manager), you call pack with optional arguments.  In Tkinter, the Pack class holds all this functionality, and the various forms of the pack command are implemented as methods.  All widgets in :mod:`tkinter` are subclassed from the Packer, and so inherit all the packing methods. See the :mod:`tkinter.tix` module documentation for additional information on the Form geometry manager. ::"
msgstr ""

msgid "pack .fred -side left       =====>  fred.pack(side=\"left\")"
msgstr ""

msgid "How Tk and Tkinter are Related"
msgstr ""

msgid "From the top down:"
msgstr ""

msgid "A Python application makes a :mod:`tkinter` call."
msgstr ""

msgid "This call (say, for example, creating a button widget), is implemented in the :mod:`tkinter` package, which is written in Python.  This Python function will parse the commands and the arguments and convert them into a form that makes them look as if they had come from a Tk script instead of a Python script."
msgstr ""

msgid "These commands and their arguments will be passed to a C function in the :mod:`_tkinter` - note the underscore - extension module."
msgstr ""

msgid "This C function is able to make calls into other C modules, including the C functions that make up the Tk library.  Tk is implemented in C and some Tcl. The Tcl part of the Tk widgets is used to bind certain default behaviors to widgets, and is executed once at the point where the Python :mod:`tkinter` package is imported. (The user never sees this stage)."
msgstr ""

msgid "The Tk part of the Tk Widgets implement the final mapping to ..."
msgstr ""

msgid "the Xlib library to draw graphics on the screen."
msgstr ""

msgid "Handy Reference"
msgstr ""

msgid "Setting Options"
msgstr ""

msgid "Options control things like the color and border width of a widget. Options can be set in three ways:"
msgstr ""

msgid "fred = Button(self, fg=\"red\", bg=\"blue\")"
msgstr ""

msgid "fred[\"fg\"] = \"red\" fred[\"bg\"] = \"blue\""
msgstr ""

msgid "fred.config(fg=\"red\", bg=\"blue\")"
msgstr ""

msgid "For a complete explanation of a given option and its behavior, see the Tk man pages for the widget in question."
msgstr ""

msgid "Note that the man pages list \"STANDARD OPTIONS\" and \"WIDGET SPECIFIC OPTIONS\" for each widget.  The former is a list of options that are common to many widgets, the latter are the options that are idiosyncratic to that particular widget.  The Standard Options are documented on the :manpage:`options(3)` man page."
msgstr ""

msgid "No distinction between standard and widget-specific options is made in this document.  Some options don't apply to some kinds of widgets. Whether a given widget responds to a particular option depends on the class of the widget; buttons have a ``command`` option, labels do not."
msgstr ""

msgid "The options supported by a given widget are listed in that widget's man page, or can be queried at runtime by calling the :meth:`config` method without arguments, or by calling the :meth:`keys` method on that widget.  The return value of these calls is a dictionary whose key is the name of the option as a string (for example, ``'relief'``) and whose values are 5-tuples."
msgstr ""

msgid "Some options, like ``bg`` are synonyms for common options with long names (``bg`` is shorthand for \"background\"). Passing the ``config()`` method the name of a shorthand option will return a 2-tuple, not 5-tuple. The 2-tuple passed back will contain the name of the synonym and the \"real\" option (such as ``('bg', 'background')``)."
msgstr ""

msgid "option name"
msgstr ""

msgid "``'relief'``"
msgstr ""

msgid "option name for database lookup"
msgstr ""

msgid "option class for database lookup"
msgstr ""

msgid "``'Relief'``"
msgstr ""

msgid "default value"
msgstr ""

msgid "``'raised'``"
msgstr ""

msgid "current value"
msgstr ""

msgid "``'groove'``"
msgstr ""

msgid ">>> print(fred.config()) {'relief' : ('relief', 'relief', 'Relief', 'raised', 'groove')}"
msgstr ""

msgid "Of course, the dictionary printed will include all the options available and their values.  This is meant only as an example."
msgstr ""

msgid "The Packer"
msgstr ""

msgid "The packer is one of Tk's geometry-management mechanisms.    Geometry managers are used to specify the relative positioning of the positioning of widgets within their container - their mutual *master*.  In contrast to the more cumbersome *placer* (which is used less commonly, and we do not cover here), the packer takes qualitative relationship specification - *above*, *to the left of*, *filling*, etc - and works everything out to determine the exact placement coordinates for you."
msgstr ""

msgid "The size of any *master* widget is determined by the size of the \"slave widgets\" inside.  The packer is used to control where slave widgets appear inside the master into which they are packed.  You can pack widgets into frames, and frames into other frames, in order to achieve the kind of layout you desire. Additionally, the arrangement is dynamically adjusted to accommodate incremental changes to the configuration, once it is packed."
msgstr ""

msgid "Note that widgets do not appear until they have had their geometry specified with a geometry manager.  It's a common early mistake to leave out the geometry specification, and then be surprised when the widget is created but nothing appears.  A widget will appear only after it has had, for example, the packer's :meth:`pack` method applied to it."
msgstr ""

msgid "The pack() method can be called with keyword-option/value pairs that control where the widget is to appear within its container, and how it is to behave when the main application window is resized.  Here are some examples::"
msgstr ""

msgid "fred.pack()                     # defaults to side = \"top\" fred.pack(side=\"left\") fred.pack(expand=1)"
msgstr ""

msgid "Packer Options"
msgstr ""

msgid "For more extensive information on the packer and the options that it can take, see the man pages and page 183 of John Ousterhout's book."
msgstr ""

msgid "Anchor type.  Denotes where the packer is to place each slave in its parcel."
msgstr ""

msgid "Boolean, ``0`` or ``1``."
msgstr ""

msgid "Legal values: ``'x'``, ``'y'``, ``'both'``, ``'none'``."
msgstr ""

msgid "A distance - designating internal padding on each side of the slave widget."
msgstr ""

msgid "A distance - designating external padding on each side of the slave widget."
msgstr ""

msgid "Legal values are: ``'left'``, ``'right'``, ``'top'``, ``'bottom'``."
msgstr ""

msgid "Coupling Widget Variables"
msgstr ""

msgid "The current-value setting of some widgets (like text entry widgets) can be connected directly to application variables by using special options.  These options are ``variable``, ``textvariable``, ``onvalue``, ``offvalue``, and ``value``.  This connection works both ways: if the variable changes for any reason, the widget it's connected to will be updated to reflect the new value."
msgstr ""

msgid "Unfortunately, in the current implementation of :mod:`tkinter` it is not possible to hand over an arbitrary Python variable to a widget through a ``variable`` or ``textvariable`` option.  The only kinds of variables for which this works are variables that are subclassed from a class called Variable, defined in :mod:`tkinter`."
msgstr ""

msgid "There are many useful subclasses of Variable already defined: :class:`StringVar`, :class:`IntVar`, :class:`DoubleVar`, and :class:`BooleanVar`.  To read the current value of such a variable, call the :meth:`get` method on it, and to change its value you call the :meth:`!set` method.  If you follow this protocol, the widget will always track the value of the variable, with no further intervention on your part."
msgstr ""

msgid "class App(Frame):     def __init__(self, master=None):         Frame.__init__(self, master)         self.pack()          self.entrythingy = Entry()         self.entrythingy.pack()          # here is the application variable         self.contents = StringVar()         # set it to some value         self.contents.set(\"this is a variable\")         # tell the entry widget to watch this variable         self.entrythingy[\"textvariable\"] = self.contents          # and here we get a callback when the user hits return.         # we will have the program print out the value of the         # application variable when the user hits return         self.entrythingy.bind('<Key-Return>',                               self.print_contents)      def print_contents(self, event):         print(\"hi. contents of entry is now ---->\",               self.contents.get())"
msgstr ""

msgid "The Window Manager"
msgstr ""

msgid "In Tk, there is a utility command, ``wm``, for interacting with the window manager.  Options to the ``wm`` command allow you to control things like titles, placement, icon bitmaps, and the like.  In :mod:`tkinter`, these commands have been implemented as methods on the :class:`Wm` class.  Toplevel widgets are subclassed from the :class:`Wm` class, and so can call the :class:`Wm` methods directly."
msgstr ""

msgid "To get at the toplevel window that contains a given widget, you can often just refer to the widget's master.  Of course if the widget has been packed inside of a frame, the master won't represent a toplevel window.  To get at the toplevel window that contains an arbitrary widget, you can call the :meth:`_root` method. This method begins with an underscore to denote the fact that this function is part of the implementation, and not an interface to Tk functionality."
msgstr ""

msgid "Here are some examples of typical usage::"
msgstr ""

msgid "from tkinter import * class App(Frame):     def __init__(self, master=None):         Frame.__init__(self, master)         self.pack()   # create the application myapp = App()  # # here are method calls to the window manager class # myapp.master.title(\"My Do-Nothing Application\") myapp.master.maxsize(1000, 400)  # start the program myapp.mainloop()"
msgstr ""

msgid "Tk Option Data Types"
msgstr ""

msgid "Legal values are points of the compass: ``\"n\"``, ``\"ne\"``, ``\"e\"``, ``\"se\"``, ``\"s\"``, ``\"sw\"``, ``\"w\"``, ``\"nw\"``, and also ``\"center\"``."
msgstr ""

msgid "There are eight built-in, named bitmaps: ``'error'``, ``'gray25'``, ``'gray50'``, ``'hourglass'``, ``'info'``, ``'questhead'``, ``'question'``, ``'warning'``.  To specify an X bitmap filename, give the full path to the file, preceded with an ``@``, as in ``\"@/usr/contrib/bitmap/gumby.bit\"``."
msgstr ""

msgid "You can pass integers 0 or 1 or the strings ``\"yes\"`` or ``\"no\"`` ."
msgstr ""

msgid "This is any Python function that takes no arguments.  For example::"
msgstr ""

msgid "def print_it():     print(\"hi there\") fred[\"command\"] = print_it"
msgstr ""

msgid "Colors can be given as the names of X colors in the rgb.txt file, or as strings representing RGB values in 4 bit: ``\"#RGB\"``, 8 bit: ``\"#RRGGBB\"``, 12 bit\" ``\"#RRRGGGBBB\"``, or 16 bit ``\"#RRRRGGGGBBBB\"`` ranges, where R,G,B here represent any legal hex digit.  See page 160 of Ousterhout's book for details."
msgstr ""

msgid "The standard X cursor names from :file:`cursorfont.h` can be used, without the ``XC_`` prefix.  For example to get a hand cursor (:const:`XC_hand2`), use the string ``\"hand2\"``.  You can also specify a bitmap and mask file of your own. See page 179 of Ousterhout's book."
msgstr ""

msgid "Screen distances can be specified in either pixels or absolute distances. Pixels are given as numbers and absolute distances as strings, with the trailing character denoting units: ``c`` for centimetres, ``i`` for inches, ``m`` for millimetres, ``p`` for printer's points.  For example, 3.5 inches is expressed as ``\"3.5i\"``."
msgstr ""

msgid "Tk uses a list font name format, such as ``{courier 10 bold}``. Font sizes with positive numbers are measured in points; sizes with negative numbers are measured in pixels."
msgstr ""

msgid "This is a string of the form ``widthxheight``, where width and height are measured in pixels for most widgets (in characters for widgets displaying text). For example: ``fred[\"geometry\"] = \"200x100\"``."
msgstr ""

msgid "Legal values are the strings: ``\"left\"``, ``\"center\"``, ``\"right\"``, and ``\"fill\"``."
msgstr ""

msgid "This is a string with four space-delimited elements, each of which is a legal distance (see above).  For example: ``\"2 3 4 5\"`` and ``\"3i 2i 4.5i 2i\"`` and ``\"3c 2c 4c 10.43c\"``  are all legal regions."
msgstr ""

msgid "Determines what the border style of a widget will be.  Legal values are: ``\"raised\"``, ``\"sunken\"``, ``\"flat\"``, ``\"groove\"``, and ``\"ridge\"``."
msgstr ""

msgid "This is almost always the :meth:`!set` method of some scrollbar widget, but can be any widget method that takes a single argument.   Refer to the file :file:`Demo/tkinter/matt/canvas-with-scrollbars.py` in the Python source distribution for an example."
msgstr ""

msgid "Must be one of: ``\"none\"``, ``\"char\"``, or ``\"word\"``."
msgstr ""

msgid "Bindings and Events"
msgstr ""

msgid "The bind method from the widget command allows you to watch for certain events and to have a callback function trigger when that event type occurs.  The form of the bind method is::"
msgstr ""

msgid "def bind(self, sequence, func, add=''):"
msgstr ""

msgid "where:"
msgstr ""

msgid "is a string that denotes the target kind of event.  (See the bind man page and page 201 of John Ousterhout's book for details)."
msgstr ""

msgid "is a Python function, taking one argument, to be invoked when the event occurs. An Event instance will be passed as the argument. (Functions deployed this way are commonly known as *callbacks*.)"
msgstr ""

msgid "is optional, either ``''`` or ``'+'``.  Passing an empty string denotes that this binding is to replace any other bindings that this event is associated with.  Passing a ``'+'`` means that this function is to be added to the list of functions bound to this event type."
msgstr ""

msgid "def turnRed(self, event):     event.widget[\"activeforeground\"] = \"red\"  self.button.bind(\"<Enter>\", self.turnRed)"
msgstr ""

msgid "Notice how the widget field of the event is being accessed in the :meth:`turnRed` callback.  This field contains the widget that caught the X event.  The following table lists the other event fields you can access, and how they are denoted in Tk, which can be useful when referring to the Tk man pages."
msgstr ""

msgid "Tk"
msgstr ""

msgid "Tkinter Event Field"
msgstr ""

msgid "%f"
msgstr ""

msgid "focus"
msgstr ""

msgid "%A"
msgstr ""

msgid "char"
msgstr ""

msgid "%h"
msgstr ""

msgid "height"
msgstr ""

msgid "%E"
msgstr ""

msgid "send_event"
msgstr ""

msgid "%k"
msgstr ""

msgid "keycode"
msgstr ""

msgid "%K"
msgstr ""

msgid "keysym"
msgstr ""

msgid "%s"
msgstr ""

msgid "state"
msgstr ""

msgid "%N"
msgstr ""

msgid "keysym_num"
msgstr ""

msgid "%t"
msgstr ""

msgid "time"
msgstr ""

msgid "%T"
msgstr ""

msgid "%w"
msgstr ""

msgid "width"
msgstr ""

msgid "%W"
msgstr ""

msgid "widget"
msgstr ""

msgid "%x"
msgstr ""

msgid "x"
msgstr ""

msgid "%X"
msgstr ""

msgid "x_root"
msgstr ""

msgid "%y"
msgstr ""

msgid "y"
msgstr ""

msgid "%Y"
msgstr ""

msgid "y_root"
msgstr ""

msgid "The index Parameter"
msgstr ""

msgid "A number of widgets require \"index\" parameters to be passed.  These are used to point at a specific place in a Text widget, or to particular characters in an Entry widget, or to particular menu items in a Menu widget."
msgstr ""

msgid "Entry widgets have options that refer to character positions in the text being displayed.  You can use these :mod:`tkinter` functions to access these special points in text widgets:"
msgstr ""

msgid "refers to the last position in the text"
msgstr ""

msgid "refers to the point where the text cursor is"
msgstr ""

msgid "indicates the beginning point of the selected text"
msgstr ""

msgid "denotes the last point of the selected text and finally"
msgstr ""

msgid "refers to the character at pixel location *x*, *y* (with *y* not used in the case of a text entry widget, which contains a single line of text)."
msgstr ""

msgid "The index notation for Text widgets is very rich and is best described in the Tk man pages."
msgstr ""

msgid "Some options and methods for menus manipulate specific menu entries. Anytime a menu index is needed for an option or a parameter, you may pass in:"
msgstr ""

msgid "an integer which refers to the numeric position of the entry in the widget, counted from the top, starting with 0;"
msgstr ""

msgid "the string ``\"active\"``, which refers to the menu position that is currently under the cursor;"
msgstr ""

msgid "the string ``\"last\"`` which refers to the last menu item;"
msgstr ""

msgid "An integer preceded by ``@``, as in ``@6``, where the integer is interpreted as a y pixel coordinate in the menu's coordinate system;"
msgstr ""

msgid "the string ``\"none\"``, which indicates no menu entry at all, most often used with menu.activate() to deactivate all entries, and finally,"
msgstr ""

msgid "a text string that is pattern matched against the label of the menu entry, as scanned from the top of the menu to the bottom.  Note that this index type is considered after all the others, which means that matches for menu items labelled ``last``, ``active``, or ``none`` may be interpreted as the above literals, instead."
msgstr ""

msgid "Images"
msgstr ""

msgid "Bitmap/Pixelmap images can be created through the subclasses of :class:`tkinter.Image`:"
msgstr ""

msgid ":class:`BitmapImage` can be used for X11 bitmap data."
msgstr ""

msgid ":class:`PhotoImage` can be used for GIF and PPM/PGM color bitmaps."
msgstr ""

msgid "Either type of image is created through either the ``file`` or the ``data`` option (other options are available as well)."
msgstr ""

msgid "The image object can then be used wherever an ``image`` option is supported by some widget (e.g. labels, buttons, menus). In these cases, Tk will not keep a reference to the image. When the last Python reference to the image object is deleted, the image data is deleted as well, and Tk will display an empty box wherever the image was used."
msgstr ""

msgid ":mod:`tkinter.scrolledtext` --- Scrolled Text Widget"
msgstr ""

msgid "The :mod:`tkinter.scrolledtext` module provides a class of the same name which implements a basic text widget which has a vertical scroll bar configured to do the \"right thing.\"  Using the :class:`ScrolledText` class is a lot easier than setting up a text widget and scroll bar directly.  The constructor is the same as that of the :class:`tkinter.Text` class."
msgstr ""

msgid "The text widget and scrollbar are packed together in a :class:`Frame`, and the methods of the :class:`Grid` and :class:`Pack` geometry managers are acquired from the :class:`Frame` object.  This allows the :class:`ScrolledText` widget to be used directly to achieve most normal geometry management behavior."
msgstr ""

msgid "Should more specific control be necessary, the following attributes are available:"
msgstr ""

msgid "The frame which surrounds the text and scroll bar widgets."
msgstr ""

msgid "The scroll bar widget."
msgstr ""

msgid ":mod:`tkinter.tix` --- Extension widgets for Tk"
msgstr ""

msgid "The :mod:`tkinter.tix` (Tk Interface Extension) module provides an additional rich set of widgets. Although the standard Tk library has many useful widgets, they are far from complete. The :mod:`tkinter.tix` library provides most of the commonly needed widgets that are missing from standard Tk: :class:`HList`, :class:`ComboBox`, :class:`Control` (a.k.a. SpinBox) and an assortment of scrollable widgets. :mod:`tkinter.tix` also includes many more widgets that are generally useful in a wide range of applications: :class:`NoteBook`, :class:`FileEntry`, :class:`PanedWindow`, etc; there are more than 40 of them."
msgstr ""

msgid "With all these new widgets, you can introduce new interaction techniques into applications, creating more useful and more intuitive user interfaces. You can design your application by choosing the most appropriate widgets to match the special needs of your application and users."
msgstr ""

msgid "The home page for :mod:`Tix`.  This includes links to additional documentation and downloads."
msgstr ""

msgid "On-line version of the man pages and reference material."
msgstr ""

msgid "On-line version of the programmer's reference material."
msgstr ""

msgid "Tix applications for development of Tix and Tkinter programs. Tide applications work under Tk or Tkinter, and include :program:`TixInspect`, an inspector to remotely modify and debug Tix/Tk/Tkinter applications."
msgstr ""

msgid "Using Tix"
msgstr ""

msgid "Toplevel widget of Tix which represents mostly the main window of an application. It has an associated Tcl interpreter."
msgstr ""

msgid "Classes in the :mod:`tkinter.tix` module subclasses the classes in the :mod:`tkinter`. The former imports the latter, so to use :mod:`tkinter.tix` with Tkinter, all you need to do is to import one module. In general, you can just import :mod:`tkinter.tix`, and replace the toplevel call to :class:`tkinter.Tk` with :class:`tix.Tk`::"
msgstr ""

msgid "from tkinter import tix from tkinter.constants import * root = tix.Tk()"
msgstr ""

msgid "To use :mod:`tkinter.tix`, you must have the Tix widgets installed, usually alongside your installation of the Tk widgets. To test your installation, try the following::"
msgstr ""

msgid "from tkinter import tix root = tix.Tk() root.tk.eval('package require Tix')"
msgstr ""

msgid "If this fails, you have a Tk installation problem which must be resolved before proceeding. Use the environment variable :envvar:`TIX_LIBRARY` to point to the installed Tix library directory, and make sure you have the dynamic object library (:file:`tix8183.dll` or :file:`libtix8183.so`) in  the same directory that contains your Tk dynamic object library (:file:`tk8183.dll` or :file:`libtk8183.so`). The directory with the dynamic object library should also have a file called :file:`pkgIndex.tcl` (case sensitive), which contains the line::"
msgstr ""

msgid "package ifneeded Tix 8.1 [list load \"[file join $dir tix8183.dll]\" Tix]"
msgstr ""

msgid "Tix Widgets"
msgstr ""

msgid "`Tix <http://tix.sourceforge.net/dist/current/man/html/TixCmd/TixIntro.htm>`_ introduces over 40 widget classes to the :mod:`tkinter` repertoire.  There is a demo of all the :mod:`tkinter.tix` widgets in the :file:`Demo/tix` directory of the standard distribution."
msgstr ""

msgid "Basic Widgets"
msgstr ""

msgid "A `Balloon <http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixBalloon.htm>`_ that pops up over a widget to provide help.  When the user moves the cursor inside a widget to which a Balloon widget has been bound, a small pop-up window with a descriptive message will be shown on the screen."
msgstr ""

msgid "The `ButtonBox <http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixButtonBox.htm>`_ widget creates a box of buttons, such as is commonly used for ``Ok Cancel``."
msgstr ""

msgid "The `ComboBox <http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixComboBox.htm>`_ widget is similar to the combo box control in MS Windows. The user can select a choice by either typing in the entry subwdget or selecting from the listbox subwidget."
msgstr ""

msgid "The `Control <http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixControl.htm>`_ widget is also known as the :class:`SpinBox` widget. The user can adjust the value by pressing the two arrow buttons or by entering the value directly into the entry. The new value will be checked against the user-defined upper and lower limits."
msgstr ""

msgid "The `LabelEntry <http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixLabelEntry.htm>`_ widget packages an entry widget and a label into one mega widget. It can be used be used to simplify the creation of \"entry-form\" type of interface."
msgstr ""

msgid "The `LabelFrame <http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixLabelFrame.htm>`_ widget packages a frame widget and a label into one mega widget.  To create widgets inside a LabelFrame widget, one creates the new widgets relative to the :attr:`frame` subwidget and manage them inside the :attr:`frame` subwidget."
msgstr ""

msgid "The `Meter <http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixMeter.htm>`_ widget can be used to show the progress of a background job which may take a long time to execute."
msgstr ""

msgid "The `OptionMenu <http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixOptionMenu.htm>`_ creates a menu button of options."
msgstr ""

msgid "The `PopupMenu <http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixPopupMenu.htm>`_ widget can be used as a replacement of the ``tk_popup`` command. The advantage of the :mod:`Tix` :class:`PopupMenu` widget is it requires less application code to manipulate."
msgstr ""

msgid "The `Select <http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixSelect.htm>`_ widget is a container of button subwidgets. It can be used to provide radio-box or check-box style of selection options for the user."
msgstr ""

msgid "The `StdButtonBox <http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixStdButtonBox.htm>`_ widget is a group of standard buttons for Motif-like dialog boxes."
msgstr ""

msgid "File Selectors"
msgstr ""

msgid "The `DirList <http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixDirList.htm>`_ widget displays a list view of a directory, its previous directories and its sub-directories. The user can choose one of the directories displayed in the list or change to another directory."
msgstr ""

msgid "The `DirTree <http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixDirTree.htm>`_ widget displays a tree view of a directory, its previous directories and its sub-directories. The user can choose one of the directories displayed in the list or change to another directory."
msgstr ""

msgid "The `DirSelectDialog <http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixDirSelectDialog.htm>`_ widget presents the directories in the file system in a dialog window.  The user can use this dialog window to navigate through the file system to select the desired directory."
msgstr ""

msgid "The :class:`DirSelectBox` is similar to the standard Motif(TM) directory-selection box. It is generally used for the user to choose a directory.  DirSelectBox stores the directories mostly recently selected into a ComboBox widget so that they can be quickly selected again."
msgstr ""

msgid "The `ExFileSelectBox <http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixExFileSelectBox.htm>`_ widget is usually embedded in a tixExFileSelectDialog widget. It provides an convenient method for the user to select files. The style of the :class:`ExFileSelectBox` widget is very similar to the standard file dialog on MS Windows 3.1."
msgstr ""

msgid "The `FileSelectBox <http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixFileSelectBox.htm>`_ is similar to the standard Motif(TM) file-selection box. It is generally used for the user to choose a file. FileSelectBox stores the files mostly recently selected into a :class:`ComboBox` widget so that they can be quickly selected again."
msgstr ""

msgid "The `FileEntry <http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixFileEntry.htm>`_ widget can be used to input a filename. The user can type in the filename manually. Alternatively, the user can press the button widget that sits next to the entry, which will bring up a file selection dialog."
msgstr ""

msgid "Hierarchical ListBox"
msgstr ""

msgid "The `HList <http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixHList.htm>`_ widget can be used to display any data that have a hierarchical structure, for example, file system directory trees. The list entries are indented and connected by branch lines according to their places in the hierarchy."
msgstr ""

msgid "The `CheckList <http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixCheckList.htm>`_ widget displays a list of items to be selected by the user. CheckList acts similarly to the Tk checkbutton or radiobutton widgets, except it is capable of handling many more items than checkbuttons or radiobuttons."
msgstr ""

msgid "The `Tree <http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixTree.htm>`_ widget can be used to display hierarchical data in a tree form. The user can adjust the view of the tree by opening or closing parts of the tree."
msgstr ""

msgid "Tabular ListBox"
msgstr ""

msgid "The `TList <http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixTList.htm>`_ widget can be used to display data in a tabular format. The list entries of a :class:`TList` widget are similar to the entries in the Tk listbox widget.  The main differences are (1) the :class:`TList` widget can display the list entries in a two dimensional format and (2) you can use graphical images as well as multiple colors and fonts for the list entries."
msgstr ""

msgid "Manager Widgets"
msgstr ""

msgid "The `PanedWindow <http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixPanedWindow.htm>`_ widget allows the user to interactively manipulate the sizes of several panes. The panes can be arranged either vertically or horizontally.  The user changes the sizes of the panes by dragging the resize handle between two panes."
msgstr ""

msgid "The `ListNoteBook <http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixListNoteBook.htm>`_ widget is very similar to the :class:`TixNoteBook` widget: it can be used to display many windows in a limited space using a notebook metaphor. The notebook is divided into a stack of pages (windows). At one time only one of these pages can be shown. The user can navigate through these pages by choosing the name of the desired page in the :attr:`hlist` subwidget."
msgstr ""

msgid "The `NoteBook <http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixNoteBook.htm>`_ widget can be used to display many windows in a limited space using a notebook metaphor. The notebook is divided into a stack of pages. At one time only one of these pages can be shown. The user can navigate through these pages by choosing the visual \"tabs\" at the top of the NoteBook widget."
msgstr ""

msgid "Image Types"
msgstr ""

msgid "The :mod:`tkinter.tix` module adds:"
msgstr ""

msgid "`pixmap <http://tix.sourceforge.net/dist/current/man/html/TixCmd/pixmap.htm>`_ capabilities to all :mod:`tkinter.tix` and :mod:`tkinter` widgets to create color images from XPM files."
msgstr ""

msgid "`Compound <http://tix.sourceforge.net/dist/current/man/html/TixCmd/compound.htm>`_ image types can be used to create images that consists of multiple horizontal lines; each line is composed of a series of items (texts, bitmaps, images or spaces) arranged from left to right. For example, a compound image can be used to display a bitmap and a text string simultaneously in a Tk :class:`Button` widget."
msgstr ""

msgid "Miscellaneous Widgets"
msgstr ""

msgid "The `InputOnly <http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixInputOnly.htm>`_ widgets are to accept inputs from the user, which can be done with the ``bind`` command (Unix only)."
msgstr ""

msgid "Form Geometry Manager"
msgstr ""

msgid "In addition, :mod:`tkinter.tix` augments :mod:`tkinter` by providing:"
msgstr ""

msgid "The `Form <http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixForm.htm>`_ geometry manager based on attachment rules for all Tk widgets."
msgstr ""

msgid "Tix Commands"
msgstr ""

msgid "The `tix commands <http://tix.sourceforge.net/dist/current/man/html/TixCmd/tix.htm>`_ provide access to miscellaneous elements of :mod:`Tix`'s internal state and the :mod:`Tix` application context.  Most of the information manipulated by these methods pertains to the application as a whole, or to a screen or display, rather than to a particular window."
msgstr ""

msgid "To view the current settings, the common usage is::"
msgstr ""

msgid "import Tix root = Tix.Tk() print(root.tix_configure())"
msgstr ""

msgid "Query or modify the configuration options of the Tix application context. If no option is specified, returns a dictionary all of the available options.  If option is specified with no value, then the method returns a list describing the one named option (this list will be identical to the corresponding sublist of the value returned if no option is specified).  If one or more option-value pairs are specified, then the method modifies the given option(s) to have the given value(s); in this case the method returns an empty string. Option may be any of the configuration options."
msgstr ""

msgid "Returns the current value of the configuration option given by *option*. Option may be any of the configuration options."
msgstr ""

msgid "Locates a bitmap file of the name ``name.xpm`` or ``name`` in one of the bitmap directories (see the :meth:`tix_addbitmapdir` method).  By using :meth:`tix_getbitmap`, you can avoid hard coding the pathnames of the bitmap files in your application. When successful, it returns the complete pathname of the bitmap file, prefixed with the character ``@``.  The returned value can be used to configure the ``bitmap`` option of the Tk and Tix widgets."
msgstr ""

msgid "Tix maintains a list of directories under which the :meth:`tix_getimage` and :meth:`tix_getbitmap` methods will search for image files.  The standard bitmap directory is :file:`$TIX_LIBRARY/bitmaps`. The :meth:`tix_addbitmapdir` method adds *directory* into this list. By using this method, the image files of an applications can also be located using the :meth:`tix_getimage` or :meth:`tix_getbitmap` method."
msgstr ""

msgid "Returns the file selection dialog that may be shared among different calls from this application.  This method will create a file selection dialog widget when it is called the first time. This dialog will be returned by all subsequent calls to :meth:`tix_filedialog`.  An optional dlgclass parameter can be passed as a string to specified what type of file selection dialog widget is desired. Possible options are ``tix``, ``FileSelectDialog`` or ``tixExFileSelectDialog``."
msgstr ""

msgid "Locates an image file of the name :file:`name.xpm`, :file:`name.xbm` or :file:`name.ppm` in one of the bitmap directories (see the :meth:`tix_addbitmapdir` method above). If more than one file with the same name (but different extensions) exist, then the image type is chosen according to the depth of the X display: xbm images are chosen on monochrome displays and color images are chosen on color displays. By using :meth:`tix_getimage`, you can avoid hard coding the pathnames of the image files in your application. When successful, this method returns the name of the newly created image, which can be used to configure the ``image`` option of the Tk and Tix widgets."
msgstr ""

msgid "Gets the options maintained by the Tix scheme mechanism."
msgstr ""

msgid "Resets the scheme and fontset of the Tix application to *newScheme* and *newFontSet*, respectively.  This affects only those widgets created after this call.  Therefore, it is best to call the resetoptions method before the creation of any widgets in a Tix application."
msgstr ""

msgid "The optional parameter *newScmPrio* can be given to reset the priority level of the Tk options set by the Tix schemes."
msgstr ""

msgid "Because of the way Tk handles the X option database, after Tix has been has imported and inited, it is not possible to reset the color schemes and font sets using the :meth:`tix_config` method. Instead, the :meth:`tix_resetoptions` method must be used."
msgstr ""

msgid ":mod:`tkinter.ttk` --- Tk themed widgets"
msgstr ""

msgid "The :mod:`tkinter.ttk` module provides access to the Tk themed widget set, introduced in Tk 8.5. If Python has not been compiled against Tk 8.5, this module can still be accessed if *Tile* has been installed.  The former method using Tk 8.5 provides additional benefits including anti-aliased font rendering under X11 and window transparency (requiring a composition window manager on X11)."
msgstr ""

msgid "The basic idea for :mod:`tkinter.ttk` is to separate, to the extent possible, the code implementing a widget's behavior from the code implementing its appearance."
msgstr ""

msgid "A document introducing theming support for Tk"
msgstr ""

msgid "Using Ttk"
msgstr ""

msgid "To start using Ttk, import its module::"
msgstr ""

msgid "from tkinter import ttk"
msgstr ""

msgid "To override the basic Tk widgets, the import should follow the Tk import::"
msgstr ""

msgid "from tkinter import * from tkinter.ttk import *"
msgstr ""

msgid "That code causes several :mod:`tkinter.ttk` widgets (:class:`Button`, :class:`Checkbutton`, :class:`Entry`, :class:`Frame`, :class:`Label`, :class:`LabelFrame`, :class:`Menubutton`, :class:`PanedWindow`, :class:`Radiobutton`, :class:`Scale` and :class:`Scrollbar`) to automatically replace the Tk widgets."
msgstr ""

msgid "This has the direct benefit of using the new widgets which gives a better look and feel across platforms; however, the replacement widgets are not completely compatible. The main difference is that widget options such as \"fg\", \"bg\" and others related to widget styling are no longer present in Ttk widgets.  Instead, use  the :class:`ttk.Style` class for improved styling effects."
msgstr ""

msgid "A monograph (using Tcl terminology) about differences typically encountered when moving applications to use the new widgets."
msgstr ""

msgid "Ttk Widgets"
msgstr ""

msgid "Ttk comes with 17 widgets, eleven of which already existed in tkinter: :class:`Button`, :class:`Checkbutton`, :class:`Entry`, :class:`Frame`, :class:`Label`, :class:`LabelFrame`, :class:`Menubutton`, :class:`PanedWindow`, :class:`Radiobutton`, :class:`Scale` and :class:`Scrollbar`. The other six are new: :class:`Combobox`, :class:`Notebook`, :class:`Progressbar`, :class:`Separator`, :class:`Sizegrip` and :class:`Treeview`. And all them are subclasses of :class:`Widget`."
msgstr ""

msgid "Using the Ttk widgets gives the application an improved look and feel. As discussed above, there are differences in how the styling is coded."
msgstr ""

msgid "Tk code::"
msgstr ""

msgid "l1 = tkinter.Label(text=\"Test\", fg=\"black\", bg=\"white\") l2 = tkinter.Label(text=\"Test\", fg=\"black\", bg=\"white\")"
msgstr ""

msgid "Ttk code::"
msgstr ""

msgid "style = ttk.Style() style.configure(\"BW.TLabel\", foreground=\"black\", background=\"white\")  l1 = ttk.Label(text=\"Test\", style=\"BW.TLabel\") l2 = ttk.Label(text=\"Test\", style=\"BW.TLabel\")"
msgstr ""

msgid "For more information about TtkStyling_, see the :class:`Style` class documentation."
msgstr ""

msgid "Widget"
msgstr ""

msgid ":class:`ttk.Widget` defines standard options and methods supported by Tk themed widgets and is not supposed to be directly instantiated."
msgstr ""

msgid "Standard Options"
msgstr ""

msgid "All the :mod:`ttk` Widgets accepts the following options:"
msgstr ""

msgid "Specifies the window class. The class is used when querying the option database for the window's other options, to determine the default bindtags for the window, and to select the widget's default layout and style. This is a read-only which may only be specified when the window is created"
msgstr ""

msgid "cursor"
msgstr ""

msgid "Specifies the mouse cursor to be used for the widget. If set to the empty string (the default), the cursor is inherited for the parent widget."
msgstr ""

msgid "takefocus"
msgstr ""

msgid "Determines whether the window accepts the focus during keyboard traversal. 0, 1 or an empty string is returned. If 0 is returned, it means that the window should be skipped entirely during keyboard traversal. If 1, it means that the window should receive the input focus as long as it is viewable. And an empty string means that the traversal scripts make the decision about whether or not to focus on the window."
msgstr ""

msgid "style"
msgstr ""

msgid "May be used to specify a custom widget style."
msgstr ""

msgid "Scrollable Widget Options"
msgstr ""

msgid "The following options are supported by widgets that are controlled by a scrollbar."
msgstr ""

msgid "option"
msgstr ""

msgid "xscrollcommand"
msgstr ""

msgid "Used to communicate with horizontal scrollbars."
msgstr ""

msgid "When the view in the widget's window change, the widget will generate a Tcl command based on the scrollcommand."
msgstr ""

msgid "Usually this option consists of the method :meth:`Scrollbar.set` of some scrollbar. This will cause the scrollbar to be updated whenever the view in the window changes."
msgstr ""

msgid "yscrollcommand"
msgstr ""

msgid "Used to communicate with vertical scrollbars. For some more information, see above."
msgstr ""

msgid "Label Options"
msgstr ""

msgid "The following options are supported by labels, buttons and other button-like widgets."
msgstr ""

msgid "text"
msgstr ""

msgid "Specifies a text string to be displayed inside the widget."
msgstr ""

msgid "textvariable"
msgstr ""

msgid "Specifies a name whose value will be used in place of the text option resource."
msgstr ""

msgid "underline"
msgstr ""

msgid "If set, specifies the index (0-based) of a character to underline in the text string. The underline character is used for mnemonic activation."
msgstr ""

msgid "image"
msgstr ""

msgid "Specifies an image to display. This is a list of 1 or more elements. The first element is the default image name. The rest of the list if a sequence of statespec/value pairs as defined by :meth:`Style.map`, specifying different images to use when the widget is in a particular state or a combination of states. All images in the list should have the same size."
msgstr ""

msgid "compound"
msgstr ""

msgid "Specifies how to display the image relative to the text, in the case both text and images options are present. Valid values are:"
msgstr ""

msgid "text: display text only"
msgstr ""

msgid "image: display image only"
msgstr ""

msgid "top, bottom, left, right: display image above, below, left of, or right of the text, respectively."
msgstr ""

msgid "none: the default. display the image if present, otherwise the text."
msgstr ""

msgid "If greater than zero, specifies how much space, in character widths, to allocate for the text label, if less than zero, specifies a minimum width. If zero or unspecified, the natural width of the text label is used."
msgstr ""

msgid "Compatibility Options"
msgstr ""

msgid "May be set to \"normal\" or \"disabled\" to control the \"disabled\" state bit. This is a write-only option: setting it changes the widget state, but the :meth:`Widget.state` method does not affect this option."
msgstr ""

msgid "Widget States"
msgstr ""

msgid "The widget state is a bitmap of independent state flags."
msgstr ""

msgid "active"
msgstr ""

msgid "The mouse cursor is over the widget and pressing a mouse button will cause some action to occur"
msgstr ""

msgid "disabled"
msgstr ""

msgid "Widget is disabled under program control"
msgstr ""

msgid "Widget has keyboard focus"
msgstr ""

msgid "pressed"
msgstr ""

msgid "Widget is being pressed"
msgstr ""

msgid "selected"
msgstr ""

msgid "\"On\", \"true\", or \"current\" for things like Checkbuttons and radiobuttons"
msgstr ""

msgid "background"
msgstr ""

msgid "Windows and Mac have a notion of an \"active\" or foreground window. The *background* state is set for widgets in a background window, and cleared for those in the foreground window"
msgstr ""

msgid "readonly"
msgstr ""

msgid "Widget should not allow user modification"
msgstr ""

msgid "alternate"
msgstr ""

msgid "A widget-specific alternate display format"
msgstr ""

msgid "invalid"
msgstr ""

msgid "The widget's value is invalid"
msgstr ""

msgid "A state specification is a sequence of state names, optionally prefixed with an exclamation point indicating that the bit is off."
msgstr ""

msgid "ttk.Widget"
msgstr ""

msgid "Besides the methods described below, the :class:`ttk.Widget` supports the methods :meth:`tkinter.Widget.cget` and :meth:`tkinter.Widget.configure`."
msgstr ""

msgid "Returns the name of the element at position *x* *y*, or the empty string if the point does not lie within any element."
msgstr ""

msgid "*x* and *y* are pixel coordinates relative to the widget."
msgstr ""

msgid "Test the widget's state. If a callback is not specified, returns True if the widget state matches *statespec* and False otherwise. If callback is specified then it is called with args if widget state matches *statespec*."
msgstr ""

msgid "Modify or inquire widget state. If *statespec* is specified, sets the widget state according to it and return a new *statespec* indicating which flags were changed. If *statespec* is not specified, returns the currently-enabled state flags."
msgstr ""

msgid "*statespec* will usually be a list or a tuple."
msgstr ""

msgid "Combobox"
msgstr ""

msgid "The :class:`ttk.Combobox` widget combines a text field with a pop-down list of values. This widget is a subclass of :class:`Entry`."
msgstr ""

msgid "Besides the methods inherited from :class:`Widget`: :meth:`Widget.cget`, :meth:`Widget.configure`, :meth:`Widget.identify`, :meth:`Widget.instate` and :meth:`Widget.state`, and the following inherited from :class:`Entry`: :meth:`Entry.bbox`, :meth:`Entry.delete`, :meth:`Entry.icursor`, :meth:`Entry.index`, :meth:`Entry.inset`, :meth:`Entry.selection`, :meth:`Entry.xview`, it has some other methods, described at :class:`ttk.Combobox`."
msgstr ""

msgid "This widget accepts the following specific options:"
msgstr ""

msgid "exportselection"
msgstr ""

msgid "Boolean value. If set, the widget selection is linked to the Window Manager selection (which can be returned by invoking Misc.selection_get, for example)."
msgstr ""

msgid "justify"
msgstr ""

msgid "Specifies how the text is aligned within the widget. One of \"left\", \"center\", or \"right\"."
msgstr ""

msgid "Specifies the height of the pop-down listbox, in rows."
msgstr ""

msgid "postcommand"
msgstr ""

msgid "A script (possibly registered with Misc.register) that is called immediately before displaying the values. It may specify which values to display."
msgstr ""

msgid "One of \"normal\", \"readonly\", or \"disabled\". In the \"readonly\" state, the value may not be edited directly, and the user can only selection of the values from the dropdown list. In the \"normal\" state, the text field is directly editable. In the \"disabled\" state, no interaction is possible."
msgstr ""

msgid "Specifies a name whose value is linked to the widget value. Whenever the value associated with that name changes, the widget value is updated, and vice versa. See :class:`tkinter.StringVar`."
msgstr ""

msgid "values"
msgstr ""

msgid "Specifies the list of values to display in the drop-down listbox."
msgstr ""

msgid "Specifies an integer value indicating the desired width of the entry window, in average-size characters of the widget's font."
msgstr ""

msgid "Virtual events"
msgstr ""

msgid "The combobox widgets generates a **<<ComboboxSelected>>** virtual event when the user selects an element from the list of values."
msgstr ""

msgid "ttk.Combobox"
msgstr ""

msgid "If *newindex* is specified, sets the combobox value to the element position *newindex*. Otherwise, returns the index of the current value or -1 if the current value is not in the values list."
msgstr ""

msgid "Returns the current value of the combobox."
msgstr ""

msgid "Sets the value of the combobox to *value*."
msgstr ""

msgid "Notebook"
msgstr ""

msgid "Ttk Notebook widget manages a collection of windows and displays a single one at a time. Each child window is associated with a tab, which the user may select to change the currently-displayed window."
msgstr ""

msgid "If present and greater than zero, specifies the desired height of the pane area (not including internal padding or tabs). Otherwise, the maximum height of all panes is used."
msgstr ""

msgid "padding"
msgstr ""

msgid "Specifies the amount of extra space to add around the outside of the notebook. The padding is a list up to four length specifications left top right bottom. If fewer than four elements are specified, bottom defaults to top, right defaults to left, and top defaults to left."
msgstr ""

msgid "If present and greater than zero, specified the desired width of the pane area (not including internal padding). Otherwise, the maximum width of all panes is used."
msgstr ""

msgid "Tab Options"
msgstr ""

msgid "There are also specific options for tabs:"
msgstr ""

msgid "Either \"normal\", \"disabled\" or \"hidden\". If \"disabled\", then the tab is not selectable. If \"hidden\", then the tab is not shown."
msgstr ""

msgid "sticky"
msgstr ""

msgid "Specifies how the child window is positioned within the pane area. Value is a string containing zero or more of the characters \"n\", \"s\", \"e\" or \"w\". Each letter refers to a side (north, south, east or west) that the child window will stick to, as per the :meth:`grid` geometry manager."
msgstr ""

msgid "Specifies the amount of extra space to add between the notebook and this pane. Syntax is the same as for the option padding used by this widget."
msgstr ""

msgid "Specifies a text to be displayed in the tab."
msgstr ""

msgid "Specifies an image to display in the tab. See the option image described in :class:`Widget`."
msgstr ""

msgid "Specifies how to display the image relative to the text, in the case both options text and image are present. See `Label Options`_ for legal values."
msgstr ""

msgid "Specifies the index (0-based) of a character to underline in the text string. The underlined character is used for mnemonic activation if :meth:`Notebook.enable_traversal` is called."
msgstr ""

msgid "Tab Identifiers"
msgstr ""

msgid "The tab_id present in several methods of :class:`ttk.Notebook` may take any of the following forms:"
msgstr ""

msgid "An integer between zero and the number of tabs"
msgstr ""

msgid "The name of a child window"
msgstr ""

msgid "A positional specification of the form \"@x,y\", which identifies the tab"
msgstr ""

msgid "The literal string \"current\", which identifies the currently-selected tab"
msgstr ""

msgid "The literal string \"end\", which returns the number of tabs (only valid for :meth:`Notebook.index`)"
msgstr ""

msgid "Virtual Events"
msgstr ""

msgid "This widget generates a **<<NotebookTabChanged>>** virtual event after a new tab is selected."
msgstr ""

msgid "ttk.Notebook"
msgstr ""

msgid "Adds a new tab to the notebook."
msgstr ""

msgid "If window is currently managed by the notebook but hidden, it is restored to its previous position."
msgstr ""

msgid "See `Tab Options`_ for the list of available options."
msgstr ""

msgid "Removes the tab specified by *tab_id*, unmaps and unmanages the associated window."
msgstr ""

msgid "Hides the tab specified by *tab_id*."
msgstr ""

msgid "The tab will not be displayed, but the associated window remains managed by the notebook and its configuration remembered. Hidden tabs may be restored with the :meth:`add` command."
msgstr ""

msgid "Returns the name of the tab element at position *x*, *y*, or the empty string if none."
msgstr ""

msgid "Returns the numeric index of the tab specified by *tab_id*, or the total number of tabs if *tab_id* is the string \"end\"."
msgstr ""

msgid "Inserts a pane at the specified position."
msgstr ""

msgid "*pos* is either the string \"end\", an integer index, or the name of a managed child. If *child* is already managed by the notebook, moves it to the specified position."
msgstr ""

msgid "Selects the specified *tab_id*."
msgstr ""

msgid "The associated child window will be displayed, and the previously-selected window (if different) is unmapped. If *tab_id* is omitted, returns the widget name of the currently selected pane."
msgstr ""

msgid "Query or modify the options of the specific *tab_id*."
msgstr ""

msgid "If *kw* is not given, returns a dictionary of the tab option values. If *option* is specified, returns the value of that *option*. Otherwise, sets the options to the corresponding values."
msgstr ""

msgid "Returns a list of windows managed by the notebook."
msgstr ""

msgid "Enable keyboard traversal for a toplevel window containing this notebook."
msgstr ""

msgid "This will extend the bindings for the toplevel window containing the notebook as follows:"
msgstr ""

msgid "Control-Tab: selects the tab following the currently selected one."
msgstr ""

msgid "Shift-Control-Tab: selects the tab preceding the currently selected one."
msgstr ""

msgid "Alt-K: where K is the mnemonic (underlined) character of any tab, will select that tab."
msgstr ""

msgid "Multiple notebooks in a single toplevel may be enabled for traversal, including nested notebooks. However, notebook traversal only works properly if all panes have the notebook they are in as master."
msgstr ""

msgid "Progressbar"
msgstr ""

msgid "The :class:`ttk.Progressbar` widget shows the status of a long-running operation. It can operate in two modes:  1) the determinate mode which shows the amount completed relative to the total amount of work to be done and 2) the indeterminate mode which provides an animated display to let the user know that work is progressing."
msgstr ""

msgid "orient"
msgstr ""

msgid "One of \"horizontal\" or \"vertical\". Specifies the orientation of the progress bar."
msgstr ""

msgid "length"
msgstr ""

msgid "Specifies the length of the long axis of the progress bar (width if horizontal, height if vertical)."
msgstr ""

msgid "One of \"determinate\" or \"indeterminate\"."
msgstr ""

msgid "maximum"
msgstr ""

msgid "A number specifying the maximum value. Defaults to 100."
msgstr ""

msgid "value"
msgstr ""

msgid "The current value of the progress bar. In \"determinate\" mode, this represents the amount of work completed. In \"indeterminate\" mode, it is interpreted as modulo *maximum*; that is, the progress bar completes one \"cycle\" when its value increases by *maximum*."
msgstr ""

msgid "variable"
msgstr ""

msgid "A name which is linked to the option value. If specified, the value of the progress bar is automatically set to the value of this name whenever the latter is modified."
msgstr ""

msgid "phase"
msgstr ""

msgid "Read-only option. The widget periodically increments the value of this option whenever its value is greater than 0 and, in determinate mode, less than maximum. This option may be used by the current theme to provide additional animation effects."
msgstr ""

msgid "ttk.Progressbar"
msgstr ""

msgid "Begin autoincrement mode: schedules a recurring timer event that calls :meth:`Progressbar.step` every *interval* milliseconds. If omitted, *interval* defaults to 50 milliseconds."
msgstr ""

msgid "Increments the progress bar's value by *amount*."
msgstr ""

msgid "*amount* defaults to 1.0 if omitted."
msgstr ""

msgid "Stop autoincrement mode: cancels any recurring timer event initiated by :meth:`Progressbar.start` for this progress bar."
msgstr ""

msgid "Separator"
msgstr ""

msgid "The :class:`ttk.Separator` widget displays a horizontal or vertical separator bar."
msgstr ""

msgid "It has no other methods besides the ones inherited from :class:`ttk.Widget`."
msgstr ""

msgid "This widget accepts the following specific option:"
msgstr ""

msgid "One of \"horizontal\" or \"vertical\". Specifies the orientation of the separator."
msgstr ""

msgid "Sizegrip"
msgstr ""

msgid "The :class:`ttk.Sizegrip` widget (also known as a grow box) allows the user to resize the containing toplevel window by pressing and dragging the grip."
msgstr ""

msgid "This widget has neither specific options nor specific methods, besides the ones inherited from :class:`ttk.Widget`."
msgstr ""

msgid "Platform-specific notes"
msgstr ""

msgid "On MacOS X, toplevel windows automatically include a built-in size grip by default. Adding a :class:`Sizegrip` is harmless, since the built-in grip will just mask the widget."
msgstr ""

msgid "Bugs"
msgstr ""

msgid "If the containing toplevel's position was specified relative to the right or bottom of the screen (e.g. ....), the :class:`Sizegrip` widget will not resize the window."
msgstr ""

msgid "This widget supports only \"southeast\" resizing."
msgstr ""

msgid "Treeview"
msgstr ""

msgid "The :class:`ttk.Treeview` widget displays a hierarchical collection of items. Each item has a textual label, an optional image, and an optional list of data values. The data values are displayed in successive columns after the tree label."
msgstr ""

msgid "The order in which data values are displayed may be controlled by setting the widget option ``displaycolumns``. The tree widget can also display column headings. Columns may be accessed by number or symbolic names listed in the widget option columns. See `Column Identifiers`_."
msgstr ""

msgid "Each item is identified by an unique name. The widget will generate item IDs if they are not supplied by the caller. There is a distinguished root item, named ``{}``. The root item itself is not displayed; its children appear at the top level of the hierarchy."
msgstr ""

msgid "Each item also has a list of tags, which can be used to associate event bindings with individual items and control the appearance of the item."
msgstr ""

msgid "The Treeview widget supports horizontal and vertical scrolling, according to the options described in `Scrollable Widget Options`_ and the methods :meth:`Treeview.xview` and :meth:`Treeview.yview`."
msgstr ""

msgid "columns"
msgstr ""

msgid "A list of column identifiers, specifying the number of columns and their names."
msgstr ""

msgid "displaycolumns"
msgstr ""

msgid "A list of column identifiers (either symbolic or integer indices) specifying which data columns are displayed and the order in which they appear, or the string \"#all\"."
msgstr ""

msgid "Specifies the number of rows which should be visible. Note: the requested width is determined from the sum of the column widths."
msgstr ""

msgid "Specifies the internal padding for the widget. The padding is a list of up to four length specifications."
msgstr ""

msgid "selectmode"
msgstr ""

msgid "Controls how the built-in class bindings manage the selection. One of \"extended\", \"browse\" or \"none\". If set to \"extended\" (the default), multiple items may be selected. If \"browse\", only a single item will be selected at a time. If \"none\", the selection will not be changed."
msgstr ""

msgid "Note that the application code and tag bindings can set the selection however they wish, regardless of the value  of this option."
msgstr ""

msgid "show"
msgstr ""

msgid "A list containing zero or more of the following values, specifying which elements of the tree to display."
msgstr ""

msgid "tree: display tree labels in column #0."
msgstr ""

msgid "headings: display the heading row."
msgstr ""

msgid "The default is \"tree headings\", i.e., show all elements."
msgstr ""

msgid "**Note**: Column #0 always refers to the tree column, even if show=\"tree\" is not specified."
msgstr ""

msgid "Item Options"
msgstr ""

msgid "The following item options may be specified for items in the insert and item widget commands."
msgstr ""

msgid "The textual label to display for the item."
msgstr ""

msgid "A Tk Image, displayed to the left of the label."
msgstr ""

msgid "The list of values associated with the item."
msgstr ""

msgid "Each item should have the same number of values as the widget option columns. If there are fewer values than columns, the remaining values are assumed empty. If there are more values than columns, the extra values are ignored."
msgstr ""

msgid "open"
msgstr ""

msgid "True/False value indicating whether the item's children should be displayed or hidden."
msgstr ""

msgid "tags"
msgstr ""

msgid "A list of tags associated with this item."
msgstr ""

msgid "Tag Options"
msgstr ""

msgid "The following options may be specified on tags:"
msgstr ""

msgid "foreground"
msgstr ""

msgid "Specifies the text foreground color."
msgstr ""

msgid "Specifies the cell or item background color."
msgstr ""

msgid "font"
msgstr ""

msgid "Specifies the font to use when drawing text."
msgstr ""

msgid "Specifies the item image, in case the item's image option is empty."
msgstr ""

msgid "Column Identifiers"
msgstr ""

msgid "Column identifiers take any of the following forms:"
msgstr ""

msgid "A symbolic name from the list of columns option."
msgstr ""

msgid "An integer n, specifying the nth data column."
msgstr ""

msgid "A string of the form #n, where n is an integer, specifying the nth display column."
msgstr ""

msgid "Item's option values may be displayed in a different order than the order in which they are stored."
msgstr ""

msgid "Column #0 always refers to the tree column, even if show=\"tree\" is not specified."
msgstr ""

msgid "A data column number is an index into an item's option values list; a display column number is the column number in the tree where the values are displayed. Tree labels are displayed in column #0. If option displaycolumns is not set, then data column n is displayed in column #n+1. Again, **column #0 always refers to the tree column**."
msgstr ""

msgid "The Treeview widget generates the following virtual events."
msgstr ""

msgid "event"
msgstr ""

msgid "<<TreeviewSelect>>"
msgstr ""

msgid "Generated whenever the selection changes."
msgstr ""

msgid "<<TreeviewOpen>>"
msgstr ""

msgid "Generated just before settings the focus item to open=True."
msgstr ""

msgid "<<TreeviewClose>>"
msgstr ""

msgid "Generated just after setting the focus item to open=False."
msgstr ""

msgid "The :meth:`Treeview.focus` and :meth:`Treeview.selection` methods can be used to determine the affected item or items."
msgstr ""

msgid "ttk.Treeview"
msgstr ""

msgid "Returns the bounding box (relative to the treeview widget's window) of the specified *item* in the form (x, y, width, height)."
msgstr ""

msgid "If *column* is specified, returns the bounding box of that cell. If the *item* is not visible (i.e., if it is a descendant of a closed item or is scrolled offscreen), returns an empty string."
msgstr ""

msgid "Returns the list of children belonging to *item*."
msgstr ""

msgid "If *item* is not specified, returns root children."
msgstr ""

msgid "Replaces *item*'s child with *newchildren*."
msgstr ""

msgid "Children present in *item* that are not present in *newchildren* are detached from the tree. No items in *newchildren* may be an ancestor of *item*. Note that not specifying *newchildren* results in detaching *item*'s children."
msgstr ""

msgid "Query or modify the options for the specified *column*."
msgstr ""

msgid "If *kw* is not given, returns a dict of the column option values. If *option* is specified then the value for that *option* is returned. Otherwise, sets the options to the corresponding values."
msgstr ""

msgid "The valid options/values are:"
msgstr ""

msgid "Returns the column name. This is a read-only option."
msgstr ""

msgid "Specifies how the text in this column should be aligned with respect to the cell."
msgstr ""

msgid "The minimum width of the column in pixels. The treeview widget will not make the column any smaller than specified by this option when the widget is resized or the user drags a column."
msgstr ""

msgid "Specifies whether the column's width should be adjusted when the widget is resized."
msgstr ""

msgid "The width of the column in pixels."
msgstr ""

msgid "To configure the tree column, call this with column = \"#0\""
msgstr ""

msgid "Delete all specified *items* and all their descendants."
msgstr ""

msgid "The root item may not be deleted."
msgstr ""

msgid "Unlinks all of the specified *items* from the tree."
msgstr ""

msgid "The items and all of their descendants are still present, and may be reinserted at another point in the tree, but will not be displayed."
msgstr ""

msgid "The root item may not be detached."
msgstr ""

msgid "Returns True if the specified *item* is present in the tree."
msgstr ""

msgid "If *item* is specified, sets the focus item to *item*. Otherwise, returns the current focus item, or '' if there is none."
msgstr ""

msgid "Query or modify the heading options for the specified *column*."
msgstr ""

msgid "If *kw* is not given, returns a dict of the heading option values. If *option* is specified then the value for that *option* is returned. Otherwise, sets the options to the corresponding values."
msgstr ""

msgid "The text to display in the column heading."
msgstr ""

msgid "Specifies an image to display to the right of the column heading."
msgstr ""

msgid "Specifies how the heading text should be aligned. One of the standard Tk anchor values."
msgstr ""

msgid "A callback to be invoked when the heading label is pressed."
msgstr ""

msgid "To configure the tree column heading, call this with column = \"#0\"."
msgstr ""

msgid "Returns a description of the specified *component* under the point given by *x* and *y*, or the empty string if no such *component* is present at that position."
msgstr ""

msgid "Returns the item ID of the item at position *y*."
msgstr ""

msgid "Returns the data column identifier of the cell at position *x*."
msgstr ""

msgid "The tree column has ID #0."
msgstr ""

msgid "Returns one of:"
msgstr ""

msgid "region"
msgstr ""

msgid "meaning"
msgstr ""

msgid "heading"
msgstr ""

msgid "Tree heading area."
msgstr ""

msgid "separator"
msgstr ""

msgid "Space between two columns headings."
msgstr ""

msgid "tree"
msgstr ""

msgid "The tree area."
msgstr ""

msgid "cell"
msgstr ""

msgid "A data cell."
msgstr ""

msgid "Availability: Tk 8.6."
msgstr ""

msgid "Returns the element at position *x*, *y*."
msgstr ""

msgid "Returns the integer index of *item* within its parent's list of children."
msgstr ""

msgid "Creates a new item and returns the item identifier of the newly created item."
msgstr ""

msgid "*parent* is the item ID of the parent item, or the empty string to create a new top-level item. *index* is an integer, or the value \"end\", specifying where in the list of parent's children to insert the new item. If *index* is less than or equal to zero, the new node is inserted at the beginning; if *index* is greater than or equal to the current number of children, it is inserted at the end. If *iid* is specified, it is used as the item identifier; *iid* must not already exist in the tree. Otherwise, a new unique identifier is generated."
msgstr ""

msgid "See `Item Options`_ for the list of available points."
msgstr ""

msgid "Query or modify the options for the specified *item*."
msgstr ""

msgid "If no options are given, a dict with options/values for the item is returned. If *option* is specified then the value for that option is returned. Otherwise, sets the options to the corresponding values as given by *kw*."
msgstr ""

msgid "Moves *item* to position *index* in *parent*'s list of children."
msgstr ""

msgid "It is illegal to move an item under one of its descendants. If *index* is less than or equal to zero, *item* is moved to the beginning; if greater than or equal to the number of children, it is moved to the end. If *item* was detached it is reattached."
msgstr ""

msgid "Returns the identifier of *item*'s next sibling, or '' if *item* is the last child of its parent."
msgstr ""

msgid "Returns the ID of the parent of *item*, or '' if *item* is at the top level of the hierarchy."
msgstr ""

msgid "Returns the identifier of *item*'s previous sibling, or '' if *item* is the first child of its parent."
msgstr ""

msgid "An alias for :meth:`Treeview.move`."
msgstr ""

msgid "Ensure that *item* is visible."
msgstr ""

msgid "Sets all of *item*'s ancestors open option to True, and scrolls the widget if necessary so that *item* is within the visible portion of the tree."
msgstr ""

msgid "If *selop* is not specified, returns selected items. Otherwise, it will act according to the following selection methods."
msgstr ""

msgid "*items* becomes the new selection."
msgstr ""

msgid "Add *items* to the selection."
msgstr ""

msgid "Remove *items* from the selection."
msgstr ""

msgid "Toggle the selection state of each item in *items*."
msgstr ""

msgid "With one argument, returns a dictionary of column/value pairs for the specified *item*. With two arguments, returns the current value of the specified *column*. With three arguments, sets the value of given *column* in given *item* to the specified *value*."
msgstr ""

msgid "Bind a callback for the given event *sequence* to the tag *tagname*. When an event is delivered to an item, the callbacks for each of the item's tags option are called."
msgstr ""

msgid "Query or modify the options for the specified *tagname*."
msgstr ""

msgid "If *kw* is not given, returns a dict of the option settings for *tagname*. If *option* is specified, returns the value for that *option* for the specified *tagname*. Otherwise, sets the options to the corresponding values for the given *tagname*."
msgstr ""

msgid "If *item* is specified, returns 1 or 0 depending on whether the specified *item* has the given *tagname*. Otherwise, returns a list of all items that have the specified tag."
msgstr ""

msgid "Availability: Tk 8.6"
msgstr ""

msgid "Query or modify horizontal position of the treeview."
msgstr ""

msgid "Query or modify vertical position of the treeview."
msgstr ""

msgid "Ttk Styling"
msgstr ""

msgid "Each widget in :mod:`ttk` is assigned a style, which specifies the set of elements making up the widget and how they are arranged, along with dynamic and default settings for element options. By default the style name is the same as the widget's class name, but it may be overriden by the widget's style option. If you don't know the class name of a widget, use the method :meth:`Misc.winfo_class` (somewidget.winfo_class())."
msgstr ""

msgid "This document explains how the theme engine works"
msgstr ""

msgid "This class is used to manipulate the style database."
msgstr ""

msgid "Query or set the default value of the specified option(s) in *style*."
msgstr ""

msgid "Each key in *kw* is an option and each value is a string identifying the value for that option."
msgstr ""

msgid "For example, to change every default button to be a flat button with some padding and a different background color::"
msgstr ""

msgid "from tkinter import ttk import tkinter  root = tkinter.Tk()  ttk.Style().configure(\"TButton\", padding=6, relief=\"flat\",    background=\"#ccc\")  btn = ttk.Button(text=\"Sample\") btn.pack()  root.mainloop()"
msgstr ""

msgid "Query or sets dynamic values of the specified option(s) in *style*."
msgstr ""

msgid "Each key in *kw* is an option and each value should be a list or a tuple (usually) containing statespecs grouped in tuples, lists, or some other preference. A statespec is a compound of one or more states and then a value."
msgstr ""

msgid "An example may make it more understandable::"
msgstr ""

msgid "import tkinter from tkinter import ttk  root = tkinter.Tk()  style = ttk.Style() style.map(\"C.TButton\",     foreground=[('pressed', 'red'), ('active', 'blue')],     background=[('pressed', '!disabled', 'black'), ('active', 'white')]     )  colored_btn = ttk.Button(text=\"Test\", style=\"C.TButton\").pack()  root.mainloop()"
msgstr ""

msgid "Note that the order of the (states, value) sequences for an option does matter, if the order is changed to ``[('active', 'blue'), ('pressed', 'red')]`` in the foreground option, for example, the result would be a blue foreground when the widget were in active or pressed states."
msgstr ""

msgid "Returns the value specified for *option* in *style*."
msgstr ""

msgid "If *state* is specified, it is expected to be a sequence of one or more states. If the *default* argument is set, it is used as a fallback value in case no specification for option is found."
msgstr ""

msgid "To check what font a Button uses by default::"
msgstr ""

msgid "from tkinter import ttk  print(ttk.Style().lookup(\"TButton\", \"font\"))"
msgstr ""

msgid "Define the widget layout for given *style*. If *layoutspec* is omitted, return the layout specification for given style."
msgstr ""

msgid "*layoutspec*, if specified, is expected to be a list or some other sequence type (excluding strings), where each item should be a tuple and the first item is the layout name and the second item should have the format described described in `Layouts`_."
msgstr ""

msgid "To understand the format, see the following example (it is not intended to do anything useful)::"
msgstr ""

msgid "from tkinter import ttk import tkinter  root = tkinter.Tk()  style = ttk.Style() style.layout(\"TMenubutton\", [    (\"Menubutton.background\", None),    (\"Menubutton.button\", {\"children\":        [(\"Menubutton.focus\", {\"children\":            [(\"Menubutton.padding\", {\"children\":                [(\"Menubutton.label\", {\"side\": \"left\", \"expand\": 1})]            })]        })]    }), ])  mbtn = ttk.Menubutton(text='Text') mbtn.pack() root.mainloop()"
msgstr ""

msgid "Create a new element in the current theme, of the given *etype* which is expected to be either \"image\", \"from\" or \"vsapi\". The latter is only available in Tk 8.6a for Windows XP and Vista and is not described here."
msgstr ""

msgid "If \"image\" is used, *args* should contain the default image name followed by statespec/value pairs (this is the imagespec), and *kw* may have the following options:"
msgstr ""

msgid "padding is a list of up to four integers, specifying the left, top, right, and bottom borders, respectively."
msgstr ""

msgid "Specifies a minimum height for the element. If less than zero, the base image's height is used as a default."
msgstr ""

msgid "Specifies the element's interior padding. Defaults to border's value if not specified."
msgstr ""

msgid "Specifies how the image is placed within the final parcel. spec contains zero or more characters “n”, “s”, “w”, or “e”."
msgstr ""

msgid "Specifies a minimum width for the element. If less than zero, the base image's width is used as a default."
msgstr ""

msgid "If \"from\" is used as the value of *etype*, :meth:`element_create` will clone an existing element. *args* is expected to contain a themename, from which the element will be cloned, and optionally an element to clone from. If this element to clone from is not specified, an empty element will be used. *kw* is discarded."
msgstr ""

msgid "Returns the list of elements defined in the current theme."
msgstr ""

msgid "Returns the list of *elementname*'s options."
msgstr ""

msgid "Create a new theme."
msgstr ""

msgid "It is an error if *themename* already exists. If *parent* is specified, the new theme will inherit styles, elements and layouts from the parent theme. If *settings* are present they are expected to have the same syntax used for :meth:`theme_settings`."
msgstr ""

msgid "Temporarily sets the current theme to *themename*, apply specified *settings* and then restore the previous theme."
msgstr ""

msgid "Each key in *settings* is a style and each value may contain the keys 'configure', 'map', 'layout' and 'element create' and they are expected to have the same format as specified by the methods :meth:`Style.configure`, :meth:`Style.map`, :meth:`Style.layout` and :meth:`Style.element_create` respectively."
msgstr ""

msgid "As an example, let's change the Combobox for the default theme a bit::"
msgstr ""

msgid "from tkinter import ttk import tkinter  root = tkinter.Tk()  style = ttk.Style() style.theme_settings(\"default\", {    \"TCombobox\": {        \"configure\": {\"padding\": 5},        \"map\": {            \"background\": [(\"active\", \"green2\"),                           (\"!disabled\", \"green4\")],            \"fieldbackground\": [(\"!disabled\", \"green3\")],            \"foreground\": [(\"focus\", \"OliveDrab1\"),                           (\"!disabled\", \"OliveDrab2\")]        }    } })  combo = ttk.Combobox().pack()  root.mainloop()"
msgstr ""

msgid "Returns a list of all known themes."
msgstr ""

msgid "If *themename* is not given, returns the theme in use.  Otherwise, sets the current theme to *themename*, refreshes all widgets and emits a <<ThemeChanged>> event."
msgstr ""

msgid "Layouts"
msgstr ""

msgid "A layout can be just None, if it takes no options, or a dict of options specifying how to arrange the element. The layout mechanism uses a simplified version of the pack geometry manager: given an initial cavity, each element is allocated a parcel. Valid options/values are:"
msgstr ""

msgid "Specifies which side of the cavity to place the element; one of top, right, bottom or left. If omitted, the element occupies the entire cavity."
msgstr ""

msgid "Specifies where the element is placed inside its allocated parcel."
msgstr ""

msgid "If set to 1, causes the element and all of its descendants to be treated as a single element for the purposes of :meth:`Widget.identify` et al. It's used for things like scrollbar thumbs with grips."
msgstr ""

msgid "Specifies a list of elements to place inside the element. Each element is a tuple (or other sequence type) where the first item is the layout name, and the other is a `Layout`_."
msgstr ""

msgid ":mod:`token` --- Constants used with Python parse trees"
msgstr ""

msgid "This module provides constants which represent the numeric values of leaf nodes of the parse tree (terminal tokens).  Refer to the file :file:`Grammar/Grammar` in the Python distribution for the definitions of the names in the context of the language grammar.  The specific numeric values which the names map to may change between Python versions."
msgstr ""

msgid "This module also provides one data object and some functions.  The functions mirror definitions in the Python C header files."
msgstr ""

msgid "Return true for terminal token values."
msgstr ""

msgid "Return true for non-terminal token values."
msgstr ""

msgid "Return true if *x* is the marker indicating the end of input."
msgstr ""

msgid ":mod:`tokenize` --- Tokenizer for Python source"
msgstr ""

msgid "The :mod:`tokenize` module provides a lexical scanner for Python source code, implemented in Python.  The scanner in this module returns comments as tokens as well, making it useful for implementing \"pretty-printers,\" including colorizers for on-screen displays."
msgstr ""

msgid "The primary entry point is a :term:`generator`:"
msgstr ""

msgid "The :func:`tokenize` generator requires one argument, *readline*, which must be a callable object which provides the same interface as the :meth:`io.IOBase.readline` method of file objects.  Each call to the function should return one line of input as bytes."
msgstr ""

msgid "The generator produces 5-tuples with these members: the token type; the token string; a 2-tuple ``(srow, scol)`` of ints specifying the row and column where the token begins in the source; a 2-tuple ``(erow, ecol)`` of ints specifying the row and column where the token ends in the source; and the line on which the token was found. The line passed (the last tuple item) is the *logical* line; continuation lines are included.  The 5 tuple is returned as a :term:`named tuple` with the field names: ``type string start end line``."
msgstr ""

msgid ":func:`tokenize` determines the source encoding of the file by looking for a UTF-8 BOM or encoding cookie, according to :pep:`263`."
msgstr ""

msgid "All constants from the :mod:`token` module are also exported from :mod:`tokenize`, as are three additional token type values:"
msgstr ""

msgid "Token value used to indicate a comment."
msgstr ""

msgid "Token value used to indicate a non-terminating newline.  The NEWLINE token indicates the end of a logical line of Python code; NL tokens are generated when a logical line of code is continued over multiple physical lines."
msgstr ""

msgid "Token value that indicates the encoding used to decode the source bytes into text. The first token returned by :func:`tokenize` will always be an ENCODING token."
msgstr ""

msgid "Another function is provided to reverse the tokenization process. This is useful for creating tools that tokenize a script, modify the token stream, and write back the modified script."
msgstr ""

msgid "Converts tokens back into Python source code.  The *iterable* must return sequences with at least two elements, the token type and the token string. Any additional sequence elements are ignored."
msgstr ""

msgid "The reconstructed script is returned as a single string.  The result is guaranteed to tokenize back to match the input so that the conversion is lossless and round-trips are assured.  The guarantee applies only to the token type and token string as the spacing between tokens (column positions) may change."
msgstr ""

msgid "It returns bytes, encoded using the ENCODING token, which is the first token sequence output by :func:`tokenize`."
msgstr ""

msgid ":func:`tokenize` needs to detect the encoding of source files it tokenizes. The function it uses to do this is available:"
msgstr ""

msgid "The :func:`detect_encoding` function is used to detect the encoding that should be used to decode a Python source file. It requires one argument, readline, in the same way as the :func:`tokenize` generator."
msgstr ""

msgid "It will call readline a maximum of twice, and return the encoding used (as a string) and a list of any lines (not decoded from bytes) it has read in."
msgstr ""

msgid "It detects the encoding from the presence of a UTF-8 BOM or an encoding cookie as specified in :pep:`263`. If both a BOM and a cookie are present, but disagree, a SyntaxError will be raised. Note that if the BOM is found, ``'utf-8-sig'`` will be returned as an encoding."
msgstr ""

msgid "If no encoding is specified, then the default of ``'utf-8'`` will be returned."
msgstr ""

msgid ":func:`detect_encoding` is useful for robustly reading Python source files. A common pattern for this follows::"
msgstr ""

msgid "def read_python_source(file_name):     with open(file_name, \"rb\") as fp:         encoding = tokenize.detect_encoding(fp.readline)[0]     with open(file_name, \"r\", encoding=encoding) as fp:         return fp.read()"
msgstr ""

msgid "Example of a script re-writer that transforms float literals into Decimal objects::"
msgstr ""

msgid "from tokenize import tokenize, untokenize, NUMBER, STRING, NAME, OP from io import BytesIO  def decistmt(s):     \"\"\"Substitute Decimals for floats in a string of statements.      >>> from decimal import Decimal     >>> s = 'print(+21.3e-5*-.1234/81.7)'     >>> decistmt(s)     \"print (+Decimal ('21.3e-5')*-Decimal ('.1234')/Decimal ('81.7'))\"      The format of the exponent is inherited from the platform C library.     Known cases are \"e-007\" (Windows) and \"e-07\" (not Windows).  Since     we're only showing 12 digits, and the 13th isn't close to 5, the     rest of the output should be platform-independent.      >>> exec(s) #doctest: +ELLIPSIS     -3.21716034272e-0...7      Output from calculations with Decimal should be identical across all     platforms.      >>> exec(decistmt(s))     -3.217160342717258261933904529E-7     \"\"\"     result = []     g = tokenize(BytesIO(s.encode('utf-8')).readline) # tokenize the string     for toknum, tokval, _, _, _  in g:         if toknum == NUMBER and '.' in tokval:  # replace NUMBER tokens             result.extend([                 (NAME, 'Decimal'),                 (OP, '('),                 (STRING, repr(tokval)),                 (OP, ')')             ])         else:             result.append((toknum, tokval))     return untokenize(result).decode('utf-8')"
msgstr ""

msgid ":mod:`trace` --- Trace or track Python statement execution"
msgstr ""

msgid "The :mod:`trace` module allows you to trace program execution, generate annotated statement coverage listings, print caller/callee relationships and list functions executed during a program run.  It can be used in another program or from the command line."
msgstr ""

msgid "Command Line Usage"
msgstr ""

msgid "The :mod:`trace` module can be invoked from the command line.  It can be as simple as ::"
msgstr ""

msgid "python -m trace --count somefile.py ..."
msgstr ""

msgid "The above will generate annotated listings of all Python modules imported during the execution of :file:`somefile.py`."
msgstr ""

msgid "The following command-line arguments are supported:"
msgstr ""

msgid "Display lines as they are executed."
msgstr ""

msgid "Produce a set of  annotated listing files upon program completion that shows how many times each statement was executed."
msgstr ""

msgid "Produce an annotated list from an earlier program run that used the :option:`--count` and :option:`--file` arguments."
msgstr ""

msgid "Do not generate annotated listings.  This is useful if you intend to make several runs with :option:`--count` then produce a single set of annotated listings at the end."
msgstr ""

msgid "List the functions executed by running the program."
msgstr ""

msgid "Generate calling relationships exposed by running the program."
msgstr ""

msgid "Name a file containing (or to contain) counts."
msgstr ""

msgid "Name a directory in which to save annotated listing files."
msgstr ""

msgid "When generating annotated listings, mark lines which were not executed with '``>>>>>>``'."
msgstr ""

msgid "When using :option:`--count` or :option:`--report`, write a brief summary to stdout for each file processed."
msgstr ""

msgid "Accepts comma separated list of module names. Ignore each of the named module and its submodules (if it is a package).  May be given multiple times."
msgstr ""

msgid "Ignore all modules and packages in the named directory and subdirectories (multiple directories can be joined by os.pathsep).  May be given multiple times."
msgstr ""

msgid "Programming Interface"
msgstr ""

msgid "Create an object to trace execution of a single statement or expression. All parameters are optional.  *count* enables counting of line numbers. *trace* enables line execution tracing.  *countfuncs* enables listing of the functions called during the run.  *countcallers* enables call relationship tracking. *ignoremods* is a list of modules or packages to ignore.  *ignoredirs* is a list of directories whose modules or packages should be ignored.  *infile* is the file from which to read stored count information.  *outfile* is a file in which to write updated count information. *timing* enables a timestamp relative to when tracing was started to be displayed."
msgstr ""

msgid "Run *cmd* under control of the Trace object with the current tracing parameters."
msgstr ""

msgid "Run *cmd* under control of the Trace object with the current tracing parameters in the defined global and local environments.  If not defined, *globals* and *locals* default to empty dictionaries."
msgstr ""

msgid "Call *func* with the given arguments under control of the :class:`Trace` object with the current tracing parameters."
msgstr ""

msgid "This is a simple example showing the use of this module::"
msgstr ""

msgid "import sys import trace  # create a Trace object, telling it what to ignore, and whether to # do tracing or line-counting or both. tracer = trace.Trace(     ignoredirs=[sys.prefix, sys.exec_prefix],     trace=0,     count=1)  # run the new command using the given tracer tracer.run('main()')  # make a report, placing output in /tmp r = tracer.results() r.write_results(show_missing=True, coverdir=\"/tmp\")"
msgstr ""

msgid ":mod:`traceback` --- Print or retrieve a stack traceback"
msgstr ""

msgid "This module provides a standard interface to extract, format and print stack traces of Python programs.  It exactly mimics the behavior of the Python interpreter when it prints a stack trace.  This is useful when you want to print stack traces under program control, such as in a \"wrapper\" around the interpreter."
msgstr ""

msgid "The module uses traceback objects --- this is the object type that is stored in the :data:`sys.last_traceback` variable and returned as the third item from :func:`sys.exc_info`."
msgstr ""

msgid "Print up to *limit* stack trace entries from *traceback*.  If *limit* is omitted or ``None``, all entries are printed. If *file* is omitted or ``None``, the output goes to ``sys.stderr``; otherwise it should be an open file or file-like object to receive the output."
msgstr ""

msgid "Print exception information and up to *limit* stack trace entries from *traceback* to *file*. This differs from :func:`print_tb` in the following ways:"
msgstr ""

msgid "if *traceback* is not ``None``, it prints a header ``Traceback (most recent call last):``"
msgstr ""

msgid "it prints the exception *type* and *value* after the stack trace"
msgstr ""

msgid "if *type* is :exc:`SyntaxError` and *value* has the appropriate format, it prints the line where the syntax error occurred with a caret indicating the approximate position of the error."
msgstr ""

msgid "If *chain* is true (the default), then chained exceptions (the :attr:`__cause__` or :attr:`__context__` attributes of the exception) will be printed as well, like the interpreter itself does when printing an unhandled exception."
msgstr ""

msgid "This is a shorthand for ``print_exception(*sys.exc_info())``."
msgstr ""

msgid "This is a shorthand for ``print_exception(sys.last_type, sys.last_value, sys.last_traceback, limit, file)``.  In general it will work only after an exception has reached an interactive prompt (see :data:`sys.last_type`)."
msgstr ""

msgid "This function prints a stack trace from its invocation point.  The optional *f* argument can be used to specify an alternate stack frame to start.  The optional *limit* and *file* arguments have the same meaning as for :func:`print_exception`."
msgstr ""

msgid "Return a list of up to *limit* \"pre-processed\" stack trace entries extracted from the traceback object *traceback*.  It is useful for alternate formatting of stack traces.  If *limit* is omitted or ``None``, all entries are extracted.  A \"pre-processed\" stack trace entry is a quadruple (*filename*, *line number*, *function name*, *text*) representing the information that is usually printed for a stack trace.  The *text* is a string with leading and trailing whitespace stripped; if the source is not available it is ``None``."
msgstr ""

msgid "Extract the raw traceback from the current stack frame.  The return value has the same format as for :func:`extract_tb`.  The optional *f* and *limit* arguments have the same meaning as for :func:`print_stack`."
msgstr ""

msgid "Given a list of tuples as returned by :func:`extract_tb` or :func:`extract_stack`, return a list of strings ready for printing.  Each string in the resulting list corresponds to the item with the same index in the argument list.  Each string ends in a newline; the strings may contain internal newlines as well, for those items whose source text line is not ``None``."
msgstr ""

msgid "Format the exception part of a traceback.  The arguments are the exception type and value such as given by ``sys.last_type`` and ``sys.last_value``.  The return value is a list of strings, each ending in a newline.  Normally, the list contains a single string; however, for :exc:`SyntaxError` exceptions, it contains several lines that (when printed) display detailed information about where the syntax error occurred.  The message indicating which exception occurred is the always last string in the list."
msgstr ""

msgid "Format a stack trace and the exception information.  The arguments  have the same meaning as the corresponding arguments to :func:`print_exception`.  The return value is a list of strings, each ending in a newline and some containing internal newlines.  When these lines are concatenated and printed, exactly the same text is printed as does :func:`print_exception`."
msgstr ""

msgid "This is like ``print_exc(limit)`` but returns a string instead of printing to a file."
msgstr ""

msgid "A shorthand for ``format_list(extract_tb(tb, limit))``."
msgstr ""

msgid "A shorthand for ``format_list(extract_stack(f, limit))``."
msgstr ""

msgid "Traceback Examples"
msgstr ""

msgid "This simple example implements a basic read-eval-print loop, similar to (but less useful than) the standard Python interactive interpreter loop.  For a more complete implementation of the interpreter loop, refer to the :mod:`code` module. ::"
msgstr ""

msgid "import sys, traceback  def run_user_code(envdir):     source = input(\">>> \")     try:         exec(source, envdir)     except:         print(\"Exception in user code:\")         print(\"-\"*60)         traceback.print_exc(file=sys.stdout)         print(\"-\"*60)  envdir = {} while True:     run_user_code(envdir)"
msgstr ""

msgid "The following example demonstrates the different ways to print and format the exception and traceback:"
msgstr ""

msgid "import sys, traceback  def lumberjack():     bright_side_of_death()  def bright_side_of_death():     return tuple()[0]  try:     lumberjack() except IndexError:     exc_type, exc_value, exc_traceback = sys.exc_info()     print(\"*** print_tb:\")     traceback.print_tb(exc_traceback, limit=1, file=sys.stdout)     print(\"*** print_exception:\")     traceback.print_exception(exc_type, exc_value, exc_traceback,                               limit=2, file=sys.stdout)     print(\"*** print_exc:\")     traceback.print_exc()     print(\"*** format_exc, first and last line:\")     formatted_lines = traceback.format_exc().splitlines()     print(formatted_lines[0])     print(formatted_lines[-1])     print(\"*** format_exception:\")     print(repr(traceback.format_exception(exc_type, exc_value,                                           exc_traceback)))     print(\"*** extract_tb:\")     print(repr(traceback.extract_tb(exc_traceback)))     print(\"*** format_tb:\")     print(repr(traceback.format_tb(exc_traceback)))     print(\"*** tb_lineno:\", exc_traceback.tb_lineno)"
msgstr ""

msgid "The output for the example would look similar to this:"
msgstr ""

msgid "*** print_tb:   File \"<doctest...>\", line 10, in <module>     lumberjack() *** print_exception: Traceback (most recent call last):   File \"<doctest...>\", line 10, in <module>     lumberjack()   File \"<doctest...>\", line 4, in lumberjack     bright_side_of_death() IndexError: tuple index out of range *** print_exc: Traceback (most recent call last):   File \"<doctest...>\", line 10, in <module>     lumberjack()   File \"<doctest...>\", line 4, in lumberjack     bright_side_of_death() IndexError: tuple index out of range *** format_exc, first and last line: Traceback (most recent call last): IndexError: tuple index out of range *** format_exception: ['Traceback (most recent call last):\\n',  '  File \"<doctest...>\", line 10, in <module>\\n    lumberjack()\\n',  '  File \"<doctest...>\", line 4, in lumberjack\\n    bright_side_of_death()\\n',  '  File \"<doctest...>\", line 7, in bright_side_of_death\\n    return tuple()[0]\\n',  'IndexError: tuple index out of range\\n'] *** extract_tb: [('<doctest...>', 10, '<module>', 'lumberjack()'),  ('<doctest...>', 4, 'lumberjack', 'bright_side_of_death()'),  ('<doctest...>', 7, 'bright_side_of_death', 'return tuple()[0]')] *** format_tb: ['  File \"<doctest...>\", line 10, in <module>\\n    lumberjack()\\n',  '  File \"<doctest...>\", line 4, in lumberjack\\n    bright_side_of_death()\\n',  '  File \"<doctest...>\", line 7, in bright_side_of_death\\n    return tuple()[0]\\n'] *** tb_lineno: 10"
msgstr ""

msgid "The following example shows the different ways to print and format the stack::"
msgstr ""

msgid ">>> import traceback >>> def another_function(): ...     lumberstack() ... >>> def lumberstack(): ...     traceback.print_stack() ...     print(repr(traceback.extract_stack())) ...     print(repr(traceback.format_stack())) ... >>> another_function()   File \"<doctest>\", line 10, in <module>     another_function()   File \"<doctest>\", line 3, in another_function     lumberstack()   File \"<doctest>\", line 6, in lumberstack     traceback.print_stack() [('<doctest>', 10, '<module>', 'another_function()'),  ('<doctest>', 3, 'another_function', 'lumberstack()'),  ('<doctest>', 7, 'lumberstack', 'print(repr(traceback.extract_stack()))')] ['  File \"<doctest>\", line 10, in <module>\\n    another_function()\\n',  '  File \"<doctest>\", line 3, in another_function\\n    lumberstack()\\n',  '  File \"<doctest>\", line 8, in lumberstack\\n    print(repr(traceback.format_stack()))\\n']"
msgstr ""

msgid "This last example demonstrates the final few formatting functions:"
msgstr ""

msgid ">>> import traceback >>> traceback.format_list([('spam.py', 3, '<module>', 'spam.eggs()'), ...                        ('eggs.py', 42, 'eggs', 'return \"bacon\"')]) ['  File \"spam.py\", line 3, in <module>\\n    spam.eggs()\\n',  '  File \"eggs.py\", line 42, in eggs\\n    return \"bacon\"\\n'] >>> an_error = IndexError('tuple index out of range') >>> traceback.format_exception_only(type(an_error), an_error) ['IndexError: tuple index out of range\\n']"
msgstr ""

msgid ":mod:`tty` --- Terminal control functions"
msgstr ""

msgid "The :mod:`tty` module defines functions for putting the tty into cbreak and raw modes."
msgstr ""

msgid "Because it requires the :mod:`termios` module, it will work only on Unix."
msgstr ""

msgid "The :mod:`tty` module defines the following functions:"
msgstr ""

msgid "Change the mode of the file descriptor *fd* to raw. If *when* is omitted, it defaults to :const:`termios.TCSAFLUSH`, and is passed to :func:`termios.tcsetattr`."
msgstr ""

msgid "Change the mode of file descriptor *fd* to cbreak. If *when* is omitted, it defaults to :const:`termios.TCSAFLUSH`, and is passed to :func:`termios.tcsetattr`."
msgstr ""

msgid "Low-level terminal control interface."
msgstr ""

msgid ":mod:`turtle` --- Turtle graphics for Tk"
msgstr ""

msgid "Turtle graphics is a popular way for introducing programming to kids.  It was part of the original Logo programming language developed by Wally Feurzig and Seymour Papert in 1966."
msgstr ""

msgid "Imagine a robotic turtle starting at (0, 0) in the x-y plane.  Give it the command ``turtle.forward(15)``, and it moves (on-screen!) 15 pixels in the direction it is facing, drawing a line as it moves.  Give it the command ``turtle.left(25)``, and it rotates in-place 25 degrees clockwise."
msgstr ""

msgid "By combining together these and similar commands, intricate shapes and pictures can easily be drawn."
msgstr ""

msgid "The :mod:`turtle` module is an extended reimplementation of the same-named module from the Python standard distribution up to version Python 2.5."
msgstr ""

msgid "It tries to keep the merits of the old turtle module and to be (nearly) 100% compatible with it.  This means in the first place to enable the learning programmer to use all the commands, classes and methods interactively when using the module from within IDLE run with the ``-n`` switch."
msgstr ""

msgid "The turtle module provides turtle graphics primitives, in both object-oriented and procedure-oriented ways.  Because it uses :mod:`tkinter` for the underlying graphics, it needs a version of Python installed with Tk support."
msgstr ""

msgid "The object-oriented interface uses essentially two+two classes:"
msgstr ""

msgid "The :class:`TurtleScreen` class defines graphics windows as a playground for the drawing turtles.  Its constructor needs a :class:`tkinter.Canvas` or a :class:`ScrolledCanvas` as argument.  It should be used when :mod:`turtle` is used as part of some application."
msgstr ""

msgid "The function :func:`Screen` returns a singleton object of a :class:`TurtleScreen` subclass. This function should be used when :mod:`turtle` is used as a standalone tool for doing graphics. As a singleton object, inheriting from its class is not possible."
msgstr ""

msgid "All methods of TurtleScreen/Screen also exist as functions, i.e. as part of the procedure-oriented interface."
msgstr ""

msgid ":class:`RawTurtle` (alias: :class:`RawPen`) defines Turtle objects which draw on a :class:`TurtleScreen`.  Its constructor needs a Canvas, ScrolledCanvas or TurtleScreen as argument, so the RawTurtle objects know where to draw."
msgstr ""

msgid "Derived from RawTurtle is the subclass :class:`Turtle` (alias: :class:`Pen`), which draws on \"the\" :class:`Screen` - instance which is automatically created, if not already present."
msgstr ""

msgid "All methods of RawTurtle/Turtle also exist as functions, i.e. part of the procedure-oriented interface."
msgstr ""

msgid "The procedural interface provides functions which are derived from the methods of the classes :class:`Screen` and :class:`Turtle`.  They have the same names as the corresponding methods.  A screen object is automatically created whenever a function derived from a Screen method is called.  An (unnamed) turtle object is automatically created whenever any of the functions derived from a Turtle method is called."
msgstr ""

msgid "To use multiple turtles an a screen one has to use the object-oriented interface."
msgstr ""

msgid "In the following documentation the argument list for functions is given. Methods, of course, have the additional first argument *self* which is omitted here."
msgstr ""

msgid "Overview over available Turtle and Screen methods"
msgstr ""

msgid "Turtle methods"
msgstr ""

msgid ":func:`forward` | :func:`fd`"
msgstr ""

msgid ":func:`backward` | :func:`bk` | :func:`back`"
msgstr ""

msgid ":func:`right` | :func:`rt`"
msgstr ""

msgid ":func:`left` | :func:`lt`"
msgstr ""

msgid ":func:`goto` | :func:`setpos` | :func:`setposition`"
msgstr ""

msgid ":func:`setx`"
msgstr ""

msgid ":func:`sety`"
msgstr ""

msgid ":func:`setheading` | :func:`seth`"
msgstr ""

msgid ":func:`home`"
msgstr ""

msgid ":func:`circle`"
msgstr ""

msgid ":func:`dot`"
msgstr ""

msgid ":func:`stamp`"
msgstr ""

msgid ":func:`clearstamp`"
msgstr ""

msgid ":func:`clearstamps`"
msgstr ""

msgid ":func:`undo`"
msgstr ""

msgid ":func:`speed`"
msgstr ""

msgid ":func:`position` | :func:`pos`"
msgstr ""

msgid ":func:`towards`"
msgstr ""

msgid ":func:`xcor`"
msgstr ""

msgid ":func:`ycor`"
msgstr ""

msgid ":func:`heading`"
msgstr ""

msgid ":func:`distance`"
msgstr ""

msgid ":func:`degrees`"
msgstr ""

msgid ":func:`radians`"
msgstr ""

msgid ":func:`pendown` | :func:`pd` | :func:`down`"
msgstr ""

msgid ":func:`penup` | :func:`pu` | :func:`up`"
msgstr ""

msgid ":func:`pensize` | :func:`width`"
msgstr ""

msgid ":func:`pen`"
msgstr ""

msgid ":func:`isdown`"
msgstr ""

msgid ":func:`color`"
msgstr ""

msgid ":func:`pencolor`"
msgstr ""

msgid ":func:`fillcolor`"
msgstr ""

msgid ":func:`filling`"
msgstr ""

msgid ":func:`begin_fill`"
msgstr ""

msgid ":func:`end_fill`"
msgstr ""

msgid ":func:`reset`"
msgstr ""

msgid ":func:`clear`"
msgstr ""

msgid ":func:`write`"
msgstr ""

msgid ":func:`showturtle` | :func:`st`"
msgstr ""

msgid ":func:`hideturtle` | :func:`ht`"
msgstr ""

msgid ":func:`isvisible`"
msgstr ""

msgid ":func:`shape`"
msgstr ""

msgid ":func:`resizemode`"
msgstr ""

msgid ":func:`shapesize` | :func:`turtlesize`"
msgstr ""

msgid ":func:`shearfactor`"
msgstr ""

msgid ":func:`settiltangle`"
msgstr ""

msgid ":func:`tiltangle`"
msgstr ""

msgid ":func:`tilt`"
msgstr ""

msgid ":func:`shapetransform`"
msgstr ""

msgid ":func:`get_shapepoly`"
msgstr ""

msgid ":func:`onclick`"
msgstr ""

msgid ":func:`onrelease`"
msgstr ""

msgid ":func:`ondrag`"
msgstr ""

msgid ":func:`begin_poly`"
msgstr ""

msgid ":func:`end_poly`"
msgstr ""

msgid ":func:`get_poly`"
msgstr ""

msgid ":func:`clone`"
msgstr ""

msgid ":func:`getturtle` | :func:`getpen`"
msgstr ""

msgid ":func:`getscreen`"
msgstr ""

msgid ":func:`setundobuffer`"
msgstr ""

msgid ":func:`undobufferentries`"
msgstr ""

msgid "Methods of TurtleScreen/Screen"
msgstr ""

msgid ":func:`bgcolor`"
msgstr ""

msgid ":func:`bgpic`"
msgstr ""

msgid ":func:`clear` | :func:`clearscreen`"
msgstr ""

msgid ":func:`reset` | :func:`resetscreen`"
msgstr ""

msgid ":func:`screensize`"
msgstr ""

msgid ":func:`setworldcoordinates`"
msgstr ""

msgid ":func:`delay`"
msgstr ""

msgid ":func:`tracer`"
msgstr ""

msgid ":func:`update`"
msgstr ""

msgid ":func:`listen`"
msgstr ""

msgid ":func:`onkey` | :func:`onkeyrelease`"
msgstr ""

msgid ":func:`onkeypress`"
msgstr ""

msgid ":func:`onclick` | :func:`onscreenclick`"
msgstr ""

msgid ":func:`ontimer`"
msgstr ""

msgid ":func:`mainloop`"
msgstr ""

msgid ":func:`mode`"
msgstr ""

msgid ":func:`colormode`"
msgstr ""

msgid ":func:`getcanvas`"
msgstr ""

msgid ":func:`getshapes`"
msgstr ""

msgid ":func:`register_shape` | :func:`addshape`"
msgstr ""

msgid ":func:`turtles`"
msgstr ""

msgid ":func:`window_height`"
msgstr ""

msgid ":func:`window_width`"
msgstr ""

msgid ":func:`textinput`"
msgstr ""

msgid ":func:`numinput`"
msgstr ""

msgid ":func:`bye`"
msgstr ""

msgid ":func:`exitonclick`"
msgstr ""

msgid ":func:`setup`"
msgstr ""

msgid ":func:`title`"
msgstr ""

msgid "Methods of RawTurtle/Turtle and corresponding functions"
msgstr ""

msgid "Most of the examples in this section refer to a Turtle instance called ``turtle``."
msgstr ""

msgid "Turtle motion"
msgstr ""

msgid "Move the turtle forward by the specified *distance*, in the direction the turtle is headed."
msgstr ""

msgid ">>> turtle.position() (0.00,0.00) >>> turtle.forward(25) >>> turtle.position() (25.00,0.00) >>> turtle.forward(-75) >>> turtle.position() (-50.00,0.00)"
msgstr ""

msgid "Move the turtle backward by *distance*, opposite to the direction the turtle is headed.  Do not change the turtle's heading."
msgstr ""

msgid ">>> turtle.position() (0.00,0.00) >>> turtle.backward(30) >>> turtle.position() (-30.00,0.00)"
msgstr ""

msgid "Turn turtle right by *angle* units.  (Units are by default degrees, but can be set via the :func:`degrees` and :func:`radians` functions.)  Angle orientation depends on the turtle mode, see :func:`mode`."
msgstr ""

msgid ">>> turtle.heading() 22.0 >>> turtle.right(45) >>> turtle.heading() 337.0"
msgstr ""

msgid "Turn turtle left by *angle* units.  (Units are by default degrees, but can be set via the :func:`degrees` and :func:`radians` functions.)  Angle orientation depends on the turtle mode, see :func:`mode`."
msgstr ""

msgid ">>> turtle.heading() 22.0 >>> turtle.left(45) >>> turtle.heading() 67.0"
msgstr ""

msgid "If *y* is ``None``, *x* must be a pair of coordinates or a :class:`Vec2D` (e.g. as returned by :func:`pos`)."
msgstr ""

msgid "Move turtle to an absolute position.  If the pen is down, draw line.  Do not change the turtle's orientation."
msgstr ""

msgid ">>> tp = turtle.pos() >>> tp (0.00,0.00) >>> turtle.setpos(60,30) >>> turtle.pos() (60.00,30.00) >>> turtle.setpos((20,80)) >>> turtle.pos() (20.00,80.00) >>> turtle.setpos(tp) >>> turtle.pos() (0.00,0.00)"
msgstr ""

msgid "Set the turtle's first coordinate to *x*, leave second coordinate unchanged."
msgstr ""

msgid ">>> turtle.position() (0.00,240.00) >>> turtle.setx(10) >>> turtle.position() (10.00,240.00)"
msgstr ""

msgid "Set the turtle's second coordinate to *y*, leave first coordinate unchanged."
msgstr ""

msgid ">>> turtle.position() (0.00,40.00) >>> turtle.sety(-10) >>> turtle.position() (0.00,-10.00)"
msgstr ""

msgid "Set the orientation of the turtle to *to_angle*.  Here are some common directions in degrees:"
msgstr ""

msgid "standard mode"
msgstr ""

msgid "logo mode"
msgstr ""

msgid "0 - east"
msgstr ""

msgid "0 - north"
msgstr ""

msgid "90 - north"
msgstr ""

msgid "90 - east"
msgstr ""

msgid "180 - west"
msgstr ""

msgid "180 - south"
msgstr ""

msgid "270 - south"
msgstr ""

msgid "270 - west"
msgstr ""

msgid ">>> turtle.setheading(90) >>> turtle.heading() 90.0"
msgstr ""

msgid "Move turtle to the origin -- coordinates (0,0) -- and set its heading to its start-orientation (which depends on the mode, see :func:`mode`)."
msgstr ""

msgid ">>> turtle.heading() 90.0 >>> turtle.position() (0.00,-10.00) >>> turtle.home() >>> turtle.position() (0.00,0.00) >>> turtle.heading() 0.0"
msgstr ""

msgid "Draw a circle with given *radius*.  The center is *radius* units left of the turtle; *extent* -- an angle -- determines which part of the circle is drawn.  If *extent* is not given, draw the entire circle.  If *extent* is not a full circle, one endpoint of the arc is the current pen position.  Draw the arc in counterclockwise direction if *radius* is positive, otherwise in clockwise direction.  Finally the direction of the turtle is changed by the amount of *extent*."
msgstr ""

msgid "As the circle is approximated by an inscribed regular polygon, *steps* determines the number of steps to use.  If not given, it will be calculated automatically.  May be used to draw regular polygons."
msgstr ""

msgid ">>> turtle.home() >>> turtle.position() (0.00,0.00) >>> turtle.heading() 0.0 >>> turtle.circle(50) >>> turtle.position() (-0.00,0.00) >>> turtle.heading() 0.0 >>> turtle.circle(120, 180)  # draw a semicircle >>> turtle.position() (0.00,240.00) >>> turtle.heading() 180.0"
msgstr ""

msgid "Draw a circular dot with diameter *size*, using *color*.  If *size* is not given, the maximum of pensize+4 and 2*pensize is used."
msgstr ""

msgid ">>> turtle.home() >>> turtle.dot() >>> turtle.fd(50); turtle.dot(20, \"blue\"); turtle.fd(50) >>> turtle.position() (100.00,-0.00) >>> turtle.heading() 0.0"
msgstr ""

msgid "Stamp a copy of the turtle shape onto the canvas at the current turtle position.  Return a stamp_id for that stamp, which can be used to delete it by calling ``clearstamp(stamp_id)``."
msgstr ""

msgid ">>> turtle.color(\"blue\") >>> turtle.stamp() 11 >>> turtle.fd(50)"
msgstr ""

msgid "Delete stamp with given *stampid*."
msgstr ""

msgid ">>> turtle.position() (150.00,-0.00) >>> turtle.color(\"blue\") >>> astamp = turtle.stamp() >>> turtle.fd(50) >>> turtle.position() (200.00,-0.00) >>> turtle.clearstamp(astamp) >>> turtle.position() (200.00,-0.00)"
msgstr ""

msgid "Delete all or first/last *n* of turtle's stamps.  If *n* is None, delete all stamps, if *n* > 0 delete first *n* stamps, else if *n* < 0 delete last *n* stamps."
msgstr ""

msgid ">>> for i in range(8): ...     turtle.stamp(); turtle.fd(30) 13 14 15 16 17 18 19 20 >>> turtle.clearstamps(2) >>> turtle.clearstamps(-2) >>> turtle.clearstamps()"
msgstr ""

msgid "Undo (repeatedly) the last turtle action(s).  Number of available undo actions is determined by the size of the undobuffer."
msgstr ""

msgid ">>> for i in range(4): ...     turtle.fd(50); turtle.lt(80) ... >>> for i in range(8): ...     turtle.undo()"
msgstr ""

msgid "Set the turtle's speed to an integer value in the range 0..10.  If no argument is given, return current speed."
msgstr ""

msgid "If input is a number greater than 10 or smaller than 0.5, speed is set to 0.  Speedstrings are mapped to speedvalues as follows:"
msgstr ""

msgid "\"fastest\":  0"
msgstr ""

msgid "\"fast\":  10"
msgstr ""

msgid "\"normal\":  6"
msgstr ""

msgid "\"slow\":  3"
msgstr ""

msgid "\"slowest\":  1"
msgstr ""

msgid "Speeds from 1 to 10 enforce increasingly faster animation of line drawing and turtle turning."
msgstr ""

msgid "Attention: *speed* = 0 means that *no* animation takes place. forward/back makes turtle jump and likewise left/right make the turtle turn instantly."
msgstr ""

msgid ">>> turtle.speed() 3 >>> turtle.speed('normal') >>> turtle.speed() 6 >>> turtle.speed(9) >>> turtle.speed() 9"
msgstr ""

msgid "Tell Turtle's state"
msgstr ""

msgid "Return the turtle's current location (x,y) (as a :class:`Vec2D` vector)."
msgstr ""

msgid ">>> turtle.pos() (440.00,-0.00)"
msgstr ""

msgid "Return the angle between the line from turtle position to position specified by (x,y), the vector or the other turtle.  This depends on the turtle's start orientation which depends on the mode - \"standard\"/\"world\" or \"logo\")."
msgstr ""

msgid ">>> turtle.goto(10, 10) >>> turtle.towards(0,0) 225.0"
msgstr ""

msgid "Return the turtle's x coordinate."
msgstr ""

msgid ">>> turtle.home() >>> turtle.left(50) >>> turtle.forward(100) >>> turtle.pos() (64.28,76.60) >>> print(turtle.xcor()) 64.2787609687"
msgstr ""

msgid "Return the turtle's y coordinate."
msgstr ""

msgid ">>> turtle.home() >>> turtle.left(60) >>> turtle.forward(100) >>> print(turtle.pos()) (50.00,86.60) >>> print(turtle.ycor()) 86.6025403784"
msgstr ""

msgid "Return the turtle's current heading (value depends on the turtle mode, see :func:`mode`)."
msgstr ""

msgid ">>> turtle.home() >>> turtle.left(67) >>> turtle.heading() 67.0"
msgstr ""

msgid "Return the distance from the turtle to (x,y), the given vector, or the given other turtle, in turtle step units."
msgstr ""

msgid ">>> turtle.home() >>> turtle.distance(30,40) 50.0 >>> turtle.distance((30,40)) 50.0 >>> joe = Turtle() >>> joe.forward(77) >>> turtle.distance(joe) 77.0"
msgstr ""

msgid "Settings for measurement"
msgstr ""

msgid "Set angle measurement units, i.e. set number of \"degrees\" for a full circle. Default value is 360 degrees."
msgstr ""

msgid ">>> turtle.home() >>> turtle.left(90) >>> turtle.heading() 90.0 >>> turtle.degrees(400.0)  # angle measurement in gon >>> turtle.heading() 100.0 >>> turtle.degrees(360) >>> turtle.heading() 90.0"
msgstr ""

msgid "Set the angle measurement units to radians.  Equivalent to ``degrees(2*math.pi)``."
msgstr ""

msgid ">>> turtle.home() >>> turtle.left(90) >>> turtle.heading() 90.0 >>> turtle.radians() >>> turtle.heading() 1.5707963267948966"
msgstr ""

msgid "Pen control"
msgstr ""

msgid "Drawing state"
msgstr ""

msgid "Pull the pen down -- drawing when moving."
msgstr ""

msgid "Pull the pen up -- no drawing when moving."
msgstr ""

msgid "Set the line thickness to *width* or return it.  If resizemode is set to \"auto\" and turtleshape is a polygon, that polygon is drawn with the same line thickness.  If no argument is given, the current pensize is returned."
msgstr ""

msgid ">>> turtle.pensize() 1 >>> turtle.pensize(10)   # from here on lines of width 10 are drawn"
msgstr ""

msgid "Return or set the pen's attributes in a \"pen-dictionary\" with the following key/value pairs:"
msgstr ""

msgid "\"shown\": True/False"
msgstr ""

msgid "\"pendown\": True/False"
msgstr ""

msgid "\"pencolor\": color-string or color-tuple"
msgstr ""

msgid "\"fillcolor\": color-string or color-tuple"
msgstr ""

msgid "\"pensize\": positive number"
msgstr ""

msgid "\"speed\": number in range 0..10"
msgstr ""

msgid "\"resizemode\": \"auto\" or \"user\" or \"noresize\""
msgstr ""

msgid "\"stretchfactor\": (positive number, positive number)"
msgstr ""

msgid "\"outline\": positive number"
msgstr ""

msgid "\"tilt\": number"
msgstr ""

msgid "This dictionary can be used as argument for a subsequent call to :func:`pen` to restore the former pen-state.  Moreover one or more of these attributes can be provided as keyword-arguments.  This can be used to set several pen attributes in one statement."
msgstr ""

msgid ">>> turtle.pen(fillcolor=\"black\", pencolor=\"red\", pensize=10) >>> sorted(turtle.pen().items()) [('fillcolor', 'black'), ('outline', 1), ('pencolor', 'red'),  ('pendown', True), ('pensize', 10), ('resizemode', 'noresize'),  ('shown', True), ('speed', 9), ('stretchfactor', (1, 1)), ('tilt', 0)] >>> penstate=turtle.pen() >>> turtle.color(\"yellow\", \"\") >>> turtle.penup() >>> sorted(turtle.pen().items()) [('fillcolor', ''), ('outline', 1), ('pencolor', 'yellow'),  ('pendown', False), ('pensize', 10), ('resizemode', 'noresize'),  ('shown', True), ('speed', 9), ('stretchfactor', (1, 1)), ('tilt', 0)] >>> turtle.pen(penstate, fillcolor=\"green\") >>> sorted(turtle.pen().items()) [('fillcolor', 'green'), ('outline', 1), ('pencolor', 'red'),  ('pendown', True), ('pensize', 10), ('resizemode', 'noresize'),  ('shown', True), ('speed', 9), ('stretchfactor', (1, 1)), ('tilt', 0)]"
msgstr ""

msgid "Return ``True`` if pen is down, ``False`` if it's up."
msgstr ""

msgid ">>> turtle.penup() >>> turtle.isdown() False >>> turtle.pendown() >>> turtle.isdown() True"
msgstr ""

msgid "Color control"
msgstr ""

msgid "Return or set the pencolor."
msgstr ""

msgid "Four input formats are allowed:"
msgstr ""

msgid "Return the current pencolor as color specification string or as a tuple (see example).  May be used as input to another color/pencolor/fillcolor call."
msgstr ""

msgid "Set pencolor to *colorstring*, which is a Tk color specification string, such as ``\"red\"``, ``\"yellow\"``, or ``\"#33cc8c\"``."
msgstr ""

msgid "Set pencolor to the RGB color represented by the tuple of *r*, *g*, and *b*.  Each of *r*, *g*, and *b* must be in the range 0..colormode, where colormode is either 1.0 or 255 (see :func:`colormode`)."
msgstr ""

msgid "Set pencolor to the RGB color represented by *r*, *g*, and *b*.  Each of *r*, *g*, and *b* must be in the range 0..colormode."
msgstr ""

msgid "If turtleshape is a polygon, the outline of that polygon is drawn with the newly set pencolor."
msgstr ""

msgid ">>> colormode() 1.0 >>> turtle.pencolor() 'red' >>> turtle.pencolor(\"brown\") >>> turtle.pencolor() 'brown' >>> tup = (0.2, 0.8, 0.55) >>> turtle.pencolor(tup) >>> turtle.pencolor() (0.2, 0.8, 0.5490196078431373) >>> colormode(255) >>> turtle.pencolor() (51, 204, 140) >>> turtle.pencolor('#32c18f') >>> turtle.pencolor() (50, 193, 143)"
msgstr ""

msgid "Return or set the fillcolor."
msgstr ""

msgid "Return the current fillcolor as color specification string, possibly in tuple format (see example).  May be used as input to another color/pencolor/fillcolor call."
msgstr ""

msgid "Set fillcolor to *colorstring*, which is a Tk color specification string, such as ``\"red\"``, ``\"yellow\"``, or ``\"#33cc8c\"``."
msgstr ""

msgid "Set fillcolor to the RGB color represented by the tuple of *r*, *g*, and *b*.  Each of *r*, *g*, and *b* must be in the range 0..colormode, where colormode is either 1.0 or 255 (see :func:`colormode`)."
msgstr ""

msgid "Set fillcolor to the RGB color represented by *r*, *g*, and *b*.  Each of *r*, *g*, and *b* must be in the range 0..colormode."
msgstr ""

msgid "If turtleshape is a polygon, the interior of that polygon is drawn with the newly set fillcolor."
msgstr ""

msgid ">>> turtle.fillcolor(\"violet\") >>> turtle.fillcolor() 'violet' >>> col = turtle.pencolor() >>> col (50, 193, 143) >>> turtle.fillcolor(col) >>> turtle.fillcolor() (50, 193, 143) >>> turtle.fillcolor('#ffffff') >>> turtle.fillcolor() (255, 255, 255)"
msgstr ""

msgid "Return or set pencolor and fillcolor."
msgstr ""

msgid "Several input formats are allowed.  They use 0 to 3 arguments as follows:"
msgstr ""

msgid "Return the current pencolor and the current fillcolor as a pair of color specification strings or tuples as returned by :func:`pencolor` and :func:`fillcolor`."
msgstr ""

msgid "Inputs as in :func:`pencolor`, set both, fillcolor and pencolor, to the given value."
msgstr ""

msgid "Equivalent to ``pencolor(colorstring1)`` and ``fillcolor(colorstring2)`` and analogously if the other input format is used."
msgstr ""

msgid "If turtleshape is a polygon, outline and interior of that polygon is drawn with the newly set colors."
msgstr ""

msgid ">>> turtle.color(\"red\", \"green\") >>> turtle.color() ('red', 'green') >>> color(\"#285078\", \"#a0c8f0\") >>> color() ((40, 80, 120), (160, 200, 240))"
msgstr ""

msgid "See also: Screen method :func:`colormode`."
msgstr ""

msgid "Filling"
msgstr ""

msgid "Return fillstate (``True`` if filling, ``False`` else)."
msgstr ""

msgid ">>> turtle.begin_fill() >>> if turtle.filling(): ...    turtle.pensize(5) ... else: ...    turtle.pensize(3)"
msgstr ""

msgid "To be called just before drawing a shape to be filled."
msgstr ""

msgid "Fill the shape drawn after the last call to :func:`begin_fill`."
msgstr ""

msgid ">>> turtle.color(\"black\", \"red\") >>> turtle.begin_fill() >>> turtle.circle(80) >>> turtle.end_fill()"
msgstr ""

msgid "More drawing control"
msgstr ""

msgid "Delete the turtle's drawings from the screen, re-center the turtle and set variables to the default values."
msgstr ""

msgid ">>> turtle.goto(0,-22) >>> turtle.left(100) >>> turtle.position() (0.00,-22.00) >>> turtle.heading() 100.0 >>> turtle.reset() >>> turtle.position() (0.00,0.00) >>> turtle.heading() 0.0"
msgstr ""

msgid "Delete the turtle's drawings from the screen.  Do not move turtle.  State and position of the turtle as well as drawings of other turtles are not affected."
msgstr ""

msgid "Write text - the string representation of *arg* - at the current turtle position according to *align* (\"left\", \"center\" or right\") and with the given font.  If *move* is True, the pen is moved to the bottom-right corner of the text.  By default, *move* is False."
msgstr ""

msgid ">>> turtle.write(\"Home = \", True, align=\"center\") >>> turtle.write((0,0), True)"
msgstr ""

msgid "Turtle state"
msgstr ""

msgid "Visibility"
msgstr ""

msgid "Make the turtle invisible.  It's a good idea to do this while you're in the middle of doing some complex drawing, because hiding the turtle speeds up the drawing observably."
msgstr ""

msgid ">>> turtle.hideturtle()"
msgstr ""

msgid "Make the turtle visible."
msgstr ""

msgid ">>> turtle.showturtle()"
msgstr ""

msgid "Return True if the Turtle is shown, False if it's hidden."
msgstr ""

msgid ">>> turtle.hideturtle() >>> turtle.isvisible() False >>> turtle.showturtle() >>> turtle.isvisible() True"
msgstr ""

msgid "Appearance"
msgstr ""

msgid "Set turtle shape to shape with given *name* or, if name is not given, return name of current shape.  Shape with *name* must exist in the TurtleScreen's shape dictionary.  Initially there are the following polygon shapes: \"arrow\", \"turtle\", \"circle\", \"square\", \"triangle\", \"classic\".  To learn about how to deal with shapes see Screen method :func:`register_shape`."
msgstr ""

msgid ">>> turtle.shape() 'classic' >>> turtle.shape(\"turtle\") >>> turtle.shape() 'turtle'"
msgstr ""

msgid "Set resizemode to one of the values: \"auto\", \"user\", \"noresize\".  If *rmode* is not given, return current resizemode.  Different resizemodes have the following effects:"
msgstr ""

msgid "\"auto\": adapts the appearance of the turtle corresponding to the value of pensize."
msgstr ""

msgid "\"user\": adapts the appearance of the turtle according to the values of stretchfactor and outlinewidth (outline), which are set by :func:`shapesize`."
msgstr ""

msgid "\"noresize\": no adaption of the turtle's appearance takes place."
msgstr ""

msgid "resizemode(\"user\") is called by :func:`shapesize` when used with arguments."
msgstr ""

msgid ">>> turtle.resizemode() 'noresize' >>> turtle.resizemode(\"auto\") >>> turtle.resizemode() 'auto'"
msgstr ""

msgid "Return or set the pen's attributes x/y-stretchfactors and/or outline.  Set resizemode to \"user\".  If and only if resizemode is set to \"user\", the turtle will be displayed stretched according to its stretchfactors: *stretch_wid* is stretchfactor perpendicular to its orientation, *stretch_len* is stretchfactor in direction of its orientation, *outline* determines the width of the shapes's outline."
msgstr ""

msgid ">>> turtle.shapesize() (1, 1, 1) >>> turtle.resizemode(\"user\") >>> turtle.shapesize(5, 5, 12) >>> turtle.shapesize() (5, 5, 12) >>> turtle.shapesize(outline=8) >>> turtle.shapesize() (5, 5, 8)"
msgstr ""

msgid "Set or return the current shearfactor. Shear the turtleshape according to the given shearfactor shear, which is the tangent of the shear angle. Do *not* change the turtle's heading (direction of movement). If shear is not given: return the current shearfactor, i. e. the tangent of the shear angle, by which lines parallel to the heading of the turtle are sheared."
msgstr ""

msgid ">>> turtle.shape(\"circle\") >>> turtle.shapesize(5,2) >>> turtle.shearfactor(0.5) >>> turtle.shearfactor() >>> 0.5"
msgstr ""

msgid "Rotate the turtleshape by *angle* from its current tilt-angle, but do *not* change the turtle's heading (direction of movement)."
msgstr ""

msgid ">>> turtle.reset() >>> turtle.shape(\"circle\") >>> turtle.shapesize(5,2) >>> turtle.tilt(30) >>> turtle.fd(50) >>> turtle.tilt(30) >>> turtle.fd(50)"
msgstr ""

msgid "Rotate the turtleshape to point in the direction specified by *angle*, regardless of its current tilt-angle.  *Do not* change the turtle's heading (direction of movement)."
msgstr ""

msgid ">>> turtle.reset() >>> turtle.shape(\"circle\") >>> turtle.shapesize(5,2) >>> turtle.settiltangle(45) >>> turtle.fd(50) >>> turtle.settiltangle(-45) >>> turtle.fd(50)"
msgstr ""

msgid "Set or return the current tilt-angle. If angle is given, rotate the turtleshape to point in the direction specified by angle, regardless of its current tilt-angle. Do *not* change the turtle's heading (direction of movement). If angle is not given: return the current tilt-angle, i. e. the angle between the orientation of the turtleshape and the heading of the turtle (its direction of movement)."
msgstr ""

msgid ">>> turtle.reset() >>> turtle.shape(\"circle\") >>> turtle.shapesize(5,2) >>> turtle.tilt(45) >>> turtle.tiltangle() 45.0"
msgstr ""

msgid "Set or return the current transformation matrix of the turtle shape."
msgstr ""

msgid "If none of the matrix elements are given, return the transformation matrix as a tuple of 4 elements. Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row t11, t12 and second row t21, 22. The determinant t11 * t22 - t12 * t21 must not be zero, otherwise an error is raised. Modify stretchfactor, shearfactor and tiltangle according to the given matrix."
msgstr ""

msgid ">>> turtle.shape(\"square\") >>> turtle.shapesize(4,2) >>> turtle.shearfactor(-0.5) >>> turtle.shapetransform() >>> (4.0, -1.0, -0.0, 2.0)"
msgstr ""

msgid "Return the current shape polygon as tuple of coordinate pairs. This can be used to define a new shape or components of a compound shape."
msgstr ""

msgid ">>> turtle.shape(\"square\") >>> turtle.shapetransform(4, -1, 0, 2) >>> turtle.get_shapepoly() ((50, -20), (30, 20), (-50, 20), (-30, -20))"
msgstr ""

msgid "Using events"
msgstr ""

msgid "Bind *fun* to mouse-click events on this turtle.  If *fun* is ``None``, existing bindings are removed.  Example for the anonymous turtle, i.e. the procedural way:"
msgstr ""

msgid ">>> def turn(x, y): ...     left(180) ... >>> onclick(turn)  # Now clicking into the turtle will turn it. >>> onclick(None)  # event-binding will be removed"
msgstr ""

msgid "Bind *fun* to mouse-button-release events on this turtle.  If *fun* is ``None``, existing bindings are removed."
msgstr ""

msgid ">>> class MyTurtle(Turtle): ...     def glow(self,x,y): ...         self.fillcolor(\"red\") ...     def unglow(self,x,y): ...         self.fillcolor(\"\") ... >>> turtle = MyTurtle() >>> turtle.onclick(turtle.glow)     # clicking on turtle turns fillcolor red, >>> turtle.onrelease(turtle.unglow) # releasing turns it to transparent."
msgstr ""

msgid "Bind *fun* to mouse-move events on this turtle.  If *fun* is ``None``, existing bindings are removed."
msgstr ""

msgid "Remark: Every sequence of mouse-move-events on a turtle is preceded by a mouse-click event on that turtle."
msgstr ""

msgid ">>> turtle.ondrag(turtle.goto)"
msgstr ""

msgid "Subsequently, clicking and dragging the Turtle will move it across the screen thereby producing handdrawings (if pen is down)."
msgstr ""

msgid "Special Turtle methods"
msgstr ""

msgid "Start recording the vertices of a polygon.  Current turtle position is first vertex of polygon."
msgstr ""

msgid "Stop recording the vertices of a polygon.  Current turtle position is last vertex of polygon.  This will be connected with the first vertex."
msgstr ""

msgid "Return the last recorded polygon."
msgstr ""

msgid ">>> turtle.home() >>> turtle.begin_poly() >>> turtle.fd(100) >>> turtle.left(20) >>> turtle.fd(30) >>> turtle.left(60) >>> turtle.fd(50) >>> turtle.end_poly() >>> p = turtle.get_poly() >>> register_shape(\"myFavouriteShape\", p)"
msgstr ""

msgid "Create and return a clone of the turtle with same position, heading and turtle properties."
msgstr ""

msgid ">>> mick = Turtle() >>> joe = mick.clone()"
msgstr ""

msgid "Return the Turtle object itself.  Only reasonable use: as a function to return the \"anonymous turtle\":"
msgstr ""

msgid ">>> pet = getturtle() >>> pet.fd(50) >>> pet <turtle.Turtle object at 0x...>"
msgstr ""

msgid "Return the :class:`TurtleScreen` object the turtle is drawing on. TurtleScreen methods can then be called for that object."
msgstr ""

msgid ">>> ts = turtle.getscreen() >>> ts <turtle._Screen object at 0x...> >>> ts.bgcolor(\"pink\")"
msgstr ""

msgid "Set or disable undobuffer.  If *size* is an integer an empty undobuffer of given size is installed.  *size* gives the maximum number of turtle actions that can be undone by the :func:`undo` method/function.  If *size* is ``None``, the undobuffer is disabled."
msgstr ""

msgid ">>> turtle.setundobuffer(42)"
msgstr ""

msgid "Return number of entries in the undobuffer."
msgstr ""

msgid ">>> while undobufferentries(): ...     undo()"
msgstr ""

msgid "Excursus about the use of compound shapes"
msgstr ""

msgid "To use compound turtle shapes, which consist of several polygons of different color, you must use the helper class :class:`Shape` explicitly as described below:"
msgstr ""

msgid "Create an empty Shape object of type \"compound\"."
msgstr ""

msgid "Add as many components to this object as desired, using the :meth:`addcomponent` method."
msgstr ""

msgid ">>> s = Shape(\"compound\") >>> poly1 = ((0,0),(10,-5),(0,10),(-10,-5)) >>> s.addcomponent(poly1, \"red\", \"blue\") >>> poly2 = ((0,0),(10,-5),(-10,-5)) >>> s.addcomponent(poly2, \"blue\", \"red\")"
msgstr ""

msgid "Now add the Shape to the Screen's shapelist and use it:"
msgstr ""

msgid ">>> register_shape(\"myshape\", s) >>> shape(\"myshape\")"
msgstr ""

msgid "The :class:`Shape` class is used internally by the :func:`register_shape` method in different ways.  The application programmer has to deal with the Shape class *only* when using compound shapes like shown above!"
msgstr ""

msgid "Methods of TurtleScreen/Screen and corresponding functions"
msgstr ""

msgid "Most of the examples in this section refer to a TurtleScreen instance called ``screen``."
msgstr ""

msgid "Window control"
msgstr ""

msgid "Set or return background color of the TurtleScreen."
msgstr ""

msgid ">>> screen.bgcolor(\"orange\") >>> screen.bgcolor() 'orange' >>> screen.bgcolor(\"#800080\") >>> screen.bgcolor() (128, 0, 128)"
msgstr ""

msgid "Set background image or return name of current backgroundimage.  If *picname* is a filename, set the corresponding image as background.  If *picname* is ``\"nopic\"``, delete background image, if present.  If *picname* is ``None``, return the filename of the current backgroundimage. ::"
msgstr ""

msgid ">>> screen.bgpic() 'nopic' >>> screen.bgpic(\"landscape.gif\") >>> screen.bgpic() \"landscape.gif\""
msgstr ""

msgid "Delete all drawings and all turtles from the TurtleScreen.  Reset the now empty TurtleScreen to its initial state: white background, no background image, no event bindings and tracing on."
msgstr ""

msgid "This TurtleScreen method is available as a global function only under the name ``clearscreen``.  The global function ``clear`` is another one derived from the Turtle method ``clear``."
msgstr ""

msgid "Reset all Turtles on the Screen to their initial state."
msgstr ""

msgid "This TurtleScreen method is available as a global function only under the name ``resetscreen``.  The global function ``reset`` is another one derived from the Turtle method ``reset``."
msgstr ""

msgid "If no arguments are given, return current (canvaswidth, canvasheight).  Else resize the canvas the turtles are drawing on.  Do not alter the drawing window.  To observe hidden parts of the canvas, use the scrollbars. With this method, one can make visible those parts of a drawing which were outside the canvas before."
msgstr ""

msgid ">>> screen.screensize() (400, 300) >>> screen.screensize(2000,1500) >>> screen.screensize() (2000, 1500)"
msgstr ""

msgid "e.g. to search for an erroneously escaped turtle ;-)"
msgstr ""

msgid "Set up user-defined coordinate system and switch to mode \"world\" if necessary.  This performs a ``screen.reset()``.  If mode \"world\" is already active, all drawings are redrawn according to the new coordinates."
msgstr ""

msgid "**ATTENTION**: in user-defined coordinate systems angles may appear distorted."
msgstr ""

msgid ">>> screen.reset() >>> screen.setworldcoordinates(-50,-7.5,50,7.5) >>> for _ in range(72): ...     left(10) ... >>> for _ in range(8): ...     left(45); fd(2)   # a regular octagon"
msgstr ""

msgid "Animation control"
msgstr ""

msgid "Set or return the drawing *delay* in milliseconds.  (This is approximately the time interval between two consecutive canvas updates.)  The longer the drawing delay, the slower the animation."
msgstr ""

msgid "Optional argument:"
msgstr ""

msgid ">>> screen.delay() 10 >>> screen.delay(5) >>> screen.delay() 5"
msgstr ""

msgid "Turn turtle animation on/off and set delay for update drawings.  If *n* is given, only each n-th regular screen update is really performed.  (Can be used to accelerate the drawing of complex graphics.)  Second argument sets delay value (see :func:`delay`)."
msgstr ""

msgid ">>> screen.tracer(8, 25) >>> dist = 2 >>> for i in range(200): ...     fd(dist) ...     rt(90) ...     dist += 2"
msgstr ""

msgid "Perform a TurtleScreen update. To be used when tracer is turned off."
msgstr ""

msgid "See also the RawTurtle/Turtle method :func:`speed`."
msgstr ""

msgid "Using screen events"
msgstr ""

msgid "Set focus on TurtleScreen (in order to collect key-events).  Dummy arguments are provided in order to be able to pass :func:`listen` to the onclick method."
msgstr ""

msgid "Bind *fun* to key-release event of key.  If *fun* is ``None``, event bindings are removed. Remark: in order to be able to register key-events, TurtleScreen must have the focus. (See method :func:`listen`.)"
msgstr ""

msgid ">>> def f(): ...     fd(50) ...     lt(60) ... >>> screen.onkey(f, \"Up\") >>> screen.listen()"
msgstr ""

msgid "Bind *fun* to key-press event of key if key is given, or to any key-press-event if no key is given. Remark: in order to be able to register key-events, TurtleScreen must have focus. (See method :func:`listen`.)"
msgstr ""

msgid ">>> def f(): ...     fd(50) ... >>> screen.onkey(f, \"Up\") >>> screen.listen()"
msgstr ""

msgid "Bind *fun* to mouse-click events on this screen.  If *fun* is ``None``, existing bindings are removed."
msgstr ""

msgid "Example for a TurtleScreen instance named ``screen`` and a Turtle instance named turtle:"
msgstr ""

msgid ">>> screen.onclick(turtle.goto) # Subsequently clicking into the TurtleScreen will >>>                             # make the turtle move to the clicked point. >>> screen.onclick(None)        # remove event binding again"
msgstr ""

msgid "This TurtleScreen method is available as a global function only under the name ``onscreenclick``.  The global function ``onclick`` is another one derived from the Turtle method ``onclick``."
msgstr ""

msgid "Install a timer that calls *fun* after *t* milliseconds."
msgstr ""

msgid ">>> running = True >>> def f(): ...     if running: ...         fd(50) ...         lt(60) ...         screen.ontimer(f, 250) >>> f()   ### makes the turtle march around >>> running = False"
msgstr ""

msgid "Starts event loop - calling Tkinter's mainloop function. Must be the last statement in a turtle graphics program. Must *not* be used if a script is run from within IDLE in -n mode (No subprocess) - for interactive use of turtle graphics. ::"
msgstr ""

msgid ">>> screen.mainloop()"
msgstr ""

msgid "Input methods"
msgstr ""

msgid "Pop up a dialog window for input of a string. Parameter title is the title of the dialog window, propmt is a text mostly describing what information to input. Return the string input. If the dialog is canceled, return None. ::"
msgstr ""

msgid ">>> screen.textinput(\"NIM\", \"Name of first player:\")"
msgstr ""

msgid "Pop up a dialog window for input of a number. title is the title of the dialog window, prompt is a text mostly describing what numerical information to input. default: default value, minval: minimum value for imput, maxval: maximum value for input The number input must be in the range minval .. maxval if these are given. If not, a hint is issued and the dialog remains open for correction. Return the number input. If the dialog is canceled,  return None. ::"
msgstr ""

msgid ">>> screen.numinput(\"Poker\", \"Your stakes:\", 1000, minval=10, maxval=10000)"
msgstr ""

msgid "Settings and special methods"
msgstr ""

msgid "Set turtle mode (\"standard\", \"logo\" or \"world\") and perform reset.  If mode is not given, current mode is returned."
msgstr ""

msgid "Mode \"standard\" is compatible with old :mod:`turtle`.  Mode \"logo\" is compatible with most Logo turtle graphics.  Mode \"world\" uses user-defined \"world coordinates\". **Attention**: in this mode angles appear distorted if ``x/y`` unit-ratio doesn't equal 1."
msgstr ""

msgid "Initial turtle heading"
msgstr ""

msgid "positive angles"
msgstr ""

msgid "\"standard\""
msgstr ""

msgid "to the right (east)"
msgstr ""

msgid "counterclockwise"
msgstr ""

msgid "\"logo\""
msgstr ""

msgid "upward    (north)"
msgstr ""

msgid "clockwise"
msgstr ""

msgid ">>> mode(\"logo\")   # resets turtle heading to north >>> mode() 'logo'"
msgstr ""

msgid "Return the colormode or set it to 1.0 or 255.  Subsequently *r*, *g*, *b* values of color triples have to be in the range 0..\\ *cmode*."
msgstr ""

msgid ">>> screen.colormode(1) >>> turtle.pencolor(240, 160, 80) Traceback (most recent call last):      ... TurtleGraphicsError: bad color sequence: (240, 160, 80) >>> screen.colormode() 1.0 >>> screen.colormode(255) >>> screen.colormode() 255 >>> turtle.pencolor(240,160,80)"
msgstr ""

msgid "Return the Canvas of this TurtleScreen.  Useful for insiders who know what to do with a Tkinter Canvas."
msgstr ""

msgid ">>> cv = screen.getcanvas() >>> cv <turtle.ScrolledCanvas instance at 0x...>"
msgstr ""

msgid "Return a list of names of all currently available turtle shapes."
msgstr ""

msgid ">>> screen.getshapes() ['arrow', 'blank', 'circle', ..., 'turtle']"
msgstr ""

msgid "There are three different ways to call this function:"
msgstr ""

msgid "*name* is the name of a gif-file and *shape* is ``None``: Install the corresponding image shape. ::"
msgstr ""

msgid ">>> screen.register_shape(\"turtle.gif\")"
msgstr ""

msgid "Image shapes *do not* rotate when turning the turtle, so they do not display the heading of the turtle!"
msgstr ""

msgid "*name* is an arbitrary string and *shape* is a tuple of pairs of coordinates: Install the corresponding polygon shape."
msgstr ""

msgid ">>> screen.register_shape(\"triangle\", ((5,-3), (0,5), (-5,-3)))"
msgstr ""

msgid "*name* is an arbitrary string and shape is a (compound) :class:`Shape` object: Install the corresponding compound shape."
msgstr ""

msgid "Add a turtle shape to TurtleScreen's shapelist.  Only thusly registered shapes can be used by issuing the command ``shape(shapename)``."
msgstr ""

msgid "Return the list of turtles on the screen."
msgstr ""

msgid ">>> for turtle in screen.turtles(): ...     turtle.color(\"red\")"
msgstr ""

msgid "Return the height of the turtle window. ::"
msgstr ""

msgid ">>> screen.window_height() 480"
msgstr ""

msgid "Return the width of the turtle window. ::"
msgstr ""

msgid ">>> screen.window_width() 640"
msgstr ""

msgid "Methods specific to Screen, not inherited from TurtleScreen"
msgstr ""

msgid "Shut the turtlegraphics window."
msgstr ""

msgid "Bind bye() method to mouse clicks on the Screen."
msgstr ""

msgid "If the value \"using_IDLE\" in the configuration dictionary is ``False`` (default value), also enter mainloop.  Remark: If IDLE with the ``-n`` switch (no subprocess) is used, this value should be set to ``True`` in :file:`turtle.cfg`.  In this case IDLE's own mainloop is active also for the client script."
msgstr ""

msgid "Set the size and position of the main window.  Default values of arguments are stored in the configuration dicionary and can be changed via a :file:`turtle.cfg` file."
msgstr ""

msgid ">>> screen.setup (width=200, height=200, startx=0, starty=0) >>>              # sets window to 200x200 pixels, in upper left of screen >>> screen.setup(width=.75, height=0.5, startx=None, starty=None) >>>              # sets window to 75% of screen by 50% of screen and centers"
msgstr ""

msgid "Set title of turtle window to *titlestring*."
msgstr ""

msgid ">>> screen.title(\"Welcome to the turtle zoo!\")"
msgstr ""

msgid "The public classes of the module :mod:`turtle`"
msgstr ""

msgid "Create a turtle.  The turtle has all methods described above as \"methods of Turtle/RawTurtle\"."
msgstr ""

msgid "Subclass of RawTurtle, has the same interface but draws on a default :class:`Screen` object created automatically when needed for the first time."
msgstr ""

msgid "Provides screen oriented methods like :func:`setbg` etc. that are described above."
msgstr ""

msgid "Subclass of TurtleScreen, with :ref:`four methods added <screenspecific>`."
msgstr ""

msgid "Used by class Screen, which thus automatically provides a ScrolledCanvas as playground for the turtles."
msgstr ""

msgid "Data structure modeling shapes.  The pair ``(type_, data)`` must follow this specification:"
msgstr ""

msgid "*type_*"
msgstr ""

msgid "*data*"
msgstr ""

msgid "\"polygon\""
msgstr ""

msgid "a polygon-tuple, i.e. a tuple of pairs of coordinates"
msgstr ""

msgid "\"image\""
msgstr ""

msgid "an image  (in this form only used internally!)"
msgstr ""

msgid "\"compound\""
msgstr ""

msgid "``None`` (a compound shape has to be constructed using the :meth:`addcomponent` method)"
msgstr ""

msgid ">>> poly = ((0,0),(10,-5),(0,10),(-10,-5)) >>> s = Shape(\"compound\") >>> s.addcomponent(poly, \"red\", \"blue\") >>> # ... add more components and then use register_shape()"
msgstr ""

msgid "See :ref:`compoundshapes`."
msgstr ""

msgid "A two-dimensional vector class, used as a helper class for implementing turtle graphics.  May be useful for turtle graphics programs too.  Derived from tuple, so a vector is a tuple!"
msgstr ""

msgid "Provides (for *a*, *b* vectors, *k* number):"
msgstr ""

msgid "``a + b`` vector addition"
msgstr ""

msgid "``a - b`` vector subtraction"
msgstr ""

msgid "``a * b`` inner product"
msgstr ""

msgid "``k * a`` and ``a * k`` multiplication with scalar"
msgstr ""

msgid "``abs(a)`` absolute value of a"
msgstr ""

msgid "``a.rotate(angle)`` rotation"
msgstr ""

msgid "Help and configuration"
msgstr ""

msgid "How to use help"
msgstr ""

msgid "The public methods of the Screen and Turtle classes are documented extensively via docstrings.  So these can be used as online-help via the Python help facilities:"
msgstr ""

msgid "When using IDLE, tooltips show the signatures and first lines of the docstrings of typed in function-/method calls."
msgstr ""

msgid "Calling :func:`help` on methods or functions displays the docstrings::"
msgstr ""

msgid ">>> help(Screen.bgcolor) Help on method bgcolor in module turtle:  bgcolor(self, *args) unbound turtle.Screen method     Set or return backgroundcolor of the TurtleScreen.      Arguments (if given): a color string or three numbers     in the range 0..colormode or a 3-tuple of such numbers.         >>> screen.bgcolor(\"orange\")       >>> screen.bgcolor()       \"orange\"       >>> screen.bgcolor(0.5,0,0.5)       >>> screen.bgcolor()       \"#800080\"  >>> help(Turtle.penup) Help on method penup in module turtle:  penup(self) unbound turtle.Turtle method     Pull the pen up -- no drawing when moving.      Aliases: penup | pu | up      No argument      >>> turtle.penup()"
msgstr ""

msgid "The docstrings of the functions which are derived from methods have a modified form::"
msgstr ""

msgid ">>> help(bgcolor) Help on function bgcolor in module turtle:  bgcolor(*args)     Set or return backgroundcolor of the TurtleScreen.      Arguments (if given): a color string or three numbers     in the range 0..colormode or a 3-tuple of such numbers.      Example::        >>> bgcolor(\"orange\")       >>> bgcolor()       \"orange\"       >>> bgcolor(0.5,0,0.5)       >>> bgcolor()       \"#800080\"  >>> help(penup) Help on function penup in module turtle:  penup()     Pull the pen up -- no drawing when moving.      Aliases: penup | pu | up      No argument      Example:     >>> penup()"
msgstr ""

msgid "These modified docstrings are created automatically together with the function definitions that are derived from the methods at import time."
msgstr ""

msgid "Translation of docstrings into different languages"
msgstr ""

msgid "There is a utility to create a dictionary the keys of which are the method names and the values of which are the docstrings of the public methods of the classes Screen and Turtle."
msgstr ""

msgid "Create and write docstring-dictionary to a Python script with the given filename.  This function has to be called explicitly (it is not used by the turtle graphics classes).  The docstring dictionary will be written to the Python script :file:`{filename}.py`.  It is intended to serve as a template for translation of the docstrings into different languages."
msgstr ""

msgid "If you (or your students) want to use :mod:`turtle` with online help in your native language, you have to translate the docstrings and save the resulting file as e.g. :file:`turtle_docstringdict_german.py`."
msgstr ""

msgid "If you have an appropriate entry in your :file:`turtle.cfg` file this dictionary will be read in at import time and will replace the original English docstrings."
msgstr ""

msgid "At the time of this writing there are docstring dictionaries in German and in Italian.  (Requests please to glingl@aon.at.)"
msgstr ""

msgid "How to configure Screen and Turtles"
msgstr ""

msgid "The built-in default configuration mimics the appearance and behaviour of the old turtle module in order to retain best possible compatibility with it."
msgstr ""

msgid "If you want to use a different configuration which better reflects the features of this module or which better fits to your needs, e.g. for use in a classroom, you can prepare a configuration file ``turtle.cfg`` which will be read at import time and modify the configuration according to its settings."
msgstr ""

msgid "The built in configuration would correspond to the following turtle.cfg::"
msgstr ""

msgid "width = 0.5 height = 0.75 leftright = None topbottom = None canvwidth = 400 canvheight = 300 mode = standard colormode = 1.0 delay = 10 undobuffersize = 1000 shape = classic pencolor = black fillcolor = black resizemode = noresize visible = True language = english exampleturtle = turtle examplescreen = screen title = Python Turtle Graphics using_IDLE = False"
msgstr ""

msgid "Short explanation of selected entries:"
msgstr ""

msgid "The first four lines correspond to the arguments of the :meth:`Screen.setup` method."
msgstr ""

msgid "Line 5 and 6 correspond to the arguments of the method :meth:`Screen.screensize`."
msgstr ""

msgid "*shape* can be any of the built-in shapes, e.g: arrow, turtle, etc.  For more info try ``help(shape)``."
msgstr ""

msgid "If you want to use no fillcolor (i.e. make the turtle transparent), you have to write ``fillcolor = \"\"`` (but all nonempty strings must not have quotes in the cfg-file)."
msgstr ""

msgid "If you want to reflect the turtle its state, you have to use ``resizemode = auto``."
msgstr ""

msgid "If you set e.g. ``language = italian`` the docstringdict :file:`turtle_docstringdict_italian.py` will be loaded at import time (if present on the import path, e.g. in the same directory as :mod:`turtle`."
msgstr ""

msgid "The entries *exampleturtle* and *examplescreen* define the names of these objects as they occur in the docstrings.  The transformation of method-docstrings to function-docstrings will delete these names from the docstrings."
msgstr ""

msgid "*using_IDLE*: Set this to ``True`` if you regularly work with IDLE and its -n switch (\"no subprocess\").  This will prevent :func:`exitonclick` to enter the mainloop."
msgstr ""

msgid "There can be a :file:`turtle.cfg` file in the directory where :mod:`turtle` is stored and an additional one in the current working directory.  The latter will override the settings of the first one."
msgstr ""

msgid "The :file:`Demo/turtle` directory contains a :file:`turtle.cfg` file.  You can study it as an example and see its effects when running the demos (preferably not from within the demo-viewer)."
msgstr ""

msgid "Demo scripts"
msgstr ""

msgid "There is a set of demo scripts in the turtledemo directory located in the :file:`Demo/turtle` directory in the source distribution."
msgstr ""

msgid "It contains:"
msgstr ""

msgid "a set of 15 demo scripts demonstrating different features of the new module :mod:`turtle`"
msgstr ""

msgid "a demo viewer :file:`turtleDemo.py` which can be used to view the sourcecode of the scripts and run them at the same time. 14 of the examples can be accessed via the Examples menu; all of them can also be run standalone."
msgstr ""

msgid "The example :file:`turtledemo_two_canvases.py` demonstrates the simultaneous use of two canvases with the turtle module.  Therefore it only can be run standalone."
msgstr ""

msgid "There is a :file:`turtle.cfg` file in this directory, which also serves as an example for how to write and use such files."
msgstr ""

msgid "The demoscripts are:"
msgstr ""

msgid "bytedesign"
msgstr ""

msgid "complex classical turtlegraphics pattern"
msgstr ""

msgid ":func:`tracer`, delay, :func:`update`"
msgstr ""

msgid "chaos"
msgstr ""

msgid "graphs verhust dynamics, proves that you must not trust computers' computations"
msgstr ""

msgid "world coordinates"
msgstr ""

msgid "clock"
msgstr ""

msgid "analog clock showing time of your computer"
msgstr ""

msgid "turtles as clock's hands, ontimer"
msgstr ""

msgid "colormixer"
msgstr ""

msgid "experiment with r, g, b"
msgstr ""

msgid "fractalcurves"
msgstr ""

msgid "Hilbert & Koch curves"
msgstr ""

msgid "recursion"
msgstr ""

msgid "lindenmayer"
msgstr ""

msgid "ethnomathematics (indian kolams)"
msgstr ""

msgid "L-System"
msgstr ""

msgid "minimal_hanoi"
msgstr ""

msgid "Towers of Hanoi"
msgstr ""

msgid "Rectangular Turtles as Hanoi discs (shape, shapesize)"
msgstr ""

msgid "nim"
msgstr ""

msgid "play the classical nim game with three heaps of sticks against the computer."
msgstr ""

msgid "turtles as nimsticks, event driven (mouse, keyboard)"
msgstr ""

msgid "paint"
msgstr ""

msgid "super minimalistic drawing program"
msgstr ""

msgid "peace"
msgstr ""

msgid "elementary"
msgstr ""

msgid "turtle: appearance and animation"
msgstr ""

msgid "penrose"
msgstr ""

msgid "aperiodic tiling with kites and darts"
msgstr ""

msgid "planet_and_moon"
msgstr ""

msgid "simulation of gravitational system"
msgstr ""

msgid "compound shapes, :class:`Vec2D`"
msgstr ""

msgid "round_dance"
msgstr ""

msgid "dancing turtles rotating pairwise in opposite direction"
msgstr ""

msgid "compound shapes, clone shapesize, tilt, get_polyshape, update"
msgstr ""

msgid "a (graphical) breadth first tree (using generators)"
msgstr ""

msgid "wikipedia"
msgstr ""

msgid "a pattern from the wikipedia article on turtle graphics"
msgstr ""

msgid ":func:`clone`, :func:`undo`"
msgstr ""

msgid "yingyang"
msgstr ""

msgid "another elementary example"
msgstr ""

msgid "Have fun!"
msgstr ""

msgid "Changes since Python 2.6"
msgstr ""

msgid "The methods :meth:`Turtle.tracer`, :meth:`Turtle.window_width` and :meth:`Turtle.window_height` have been eliminated. Methods with these names and functionality are now available only as methods of :class:`Screen`. The functions derived from these remain available. (In fact already in Python 2.6 these methods were merely duplications of the corresponding :class:`TurtleScreen`/:class:`Screen`-methods.)"
msgstr ""

msgid "The method :meth:`Turtle.fill` has been eliminated. The behaviour of :meth:`begin_fill` and :meth:`end_fill` have changed slightly: now  every filling-process must be completed with an ``end_fill()`` call."
msgstr ""

msgid "A method :meth:`Turtle.filling` has been added. It returns a boolean value: ``True`` if a filling process is under way, ``False`` otherwise. This behaviour corresponds to a ``fill()`` call without arguments in Python 2.6."
msgstr ""

msgid "Changes since Python 3.0"
msgstr ""

msgid "The methods :meth:`Turtle.shearfactor`, :meth:`Turtle.shapetransform` and :meth:`Turtle.get_shapepoly` have been added. Thus the full range of regular linear transforms is now available for transforming turtle shapes. :meth:`Turtle.tiltangle` has been enhanced in functionality: it now can be used to get or set the tiltangle. :meth:`Turtle.settiltangle` has been deprecated."
msgstr ""

msgid "The method :meth:`Screen.onkeypress` has been added as a complement to :meth:`Screen.onkey` which in fact binds actions to the keyrelease event. Accordingly the latter has got an alias: :meth:`Screen.onkeyrelease`."
msgstr ""

msgid "The method  :meth:`Screen.mainloop` has been added. So when working only with Screen and Turtle objects one must not additonally import :func:`mainloop` anymore."
msgstr ""

msgid "Two input methods has been added :meth:`Screen.textinput` and :meth:`Screen.numinput`. These popup input dialogs and return strings and numbers respectively."
msgstr ""

msgid "Two example scripts :file:`tdemo_nim.py` and :file:`tdemo_round_dance.py` have been added to the Demo directory (source distribution only). As usual they can be viewed and executed within the demo viewer :file:`turtleDemo.py`."
msgstr ""

msgid ":mod:`types` --- Names for built-in types"
msgstr ""

msgid "This module defines names for some object types that are used by the standard Python interpreter, but not exposed as builtins like :class:`int` or :class:`str` are.  Also, it does not include some of the types that arise transparently during processing such as the ``listiterator`` type."
msgstr ""

msgid "Typical use is for :func:`isinstance` or :func:`issubclass` checks."
msgstr ""

msgid "The module defines the following names:"
msgstr ""

msgid "The type of user-defined functions and functions created by :keyword:`lambda` expressions."
msgstr ""

msgid "The type of :term:`generator`-iterator objects, produced by calling a generator function."
msgstr ""

msgid "The type for code objects such as returned by :func:`compile`."
msgstr ""

msgid "The type of methods of user-defined class instances."
msgstr ""

msgid "The type of built-in functions like :func:`len` or :func:`sys.exit`, and methods of built-in classes.  (Here, the term \"built-in\" means \"written in C\".)"
msgstr ""

msgid "The type of modules."
msgstr ""

msgid "The type of traceback objects such as found in ``sys.exc_info()[2]``."
msgstr ""

msgid "The type of frame objects such as found in ``tb.tb_frame`` if ``tb`` is a traceback object."
msgstr ""

msgid "The type of objects defined in extension modules with ``PyGetSetDef``, such as ``FrameType.f_locals`` or ``array.array.typecode``.  This type is used as descriptor for object attributes; it has the same purpose as the :class:`property` type, but for classes defined in extension modules."
msgstr ""

msgid "The type of objects defined in extension modules with ``PyMemberDef``, such as ``datetime.timedelta.days``.  This type is used as descriptor for simple C data members which use standard conversion functions; it has the same purpose as the :class:`property` type, but for classes defined in extension modules."
msgstr ""

msgid "In other implementations of Python, this type may be identical to ``GetSetDescriptorType``."
msgstr ""

msgid "Undocumented Modules"
msgstr ""

msgid "Here's a quick listing of modules that are currently undocumented, but that should be documented.  Feel free to contribute documentation for them!  (Send via email to docs@python.org.)"
msgstr ""

msgid "The idea and original contents for this chapter were taken from a posting by Fredrik Lundh; the specific contents of this chapter have been substantially revised."
msgstr ""

msgid "Platform specific modules"
msgstr ""

msgid "These modules are used to implement the :mod:`os.path` module, and are not documented beyond this mention.  There's little need to document these."
msgstr ""

msgid "--- Implementation of :mod:`os.path` on Win32, Win64, WinCE, and OS/2 platforms."
msgstr ""

msgid "--- Implementation of :mod:`os.path` on POSIX."
msgstr ""

msgid ":mod:`unicodedata` --- Unicode Database"
msgstr ""

msgid "This module provides access to the Unicode Character Database which defines character properties for all Unicode characters. The data in this database is based on the :file:`UnicodeData.txt` file version 5.2.0 which is publicly available from ftp://ftp.unicode.org/."
msgstr ""

msgid "The module uses the same names and symbols as defined by the UnicodeData File Format 5.2.0 (see http://www.unicode.org/reports/tr44/tr44-4.html). It defines the following functions:"
msgstr ""

msgid "Look up character by name.  If a character with the given name is found, return the corresponding character.  If not found, :exc:`KeyError` is raised."
msgstr ""

msgid "Returns the name assigned to the character *chr* as a string. If no name is defined, *default* is returned, or, if not given, :exc:`ValueError` is raised."
msgstr ""

msgid "Returns the decimal value assigned to the character *chr* as integer. If no such value is defined, *default* is returned, or, if not given, :exc:`ValueError` is raised."
msgstr ""

msgid "Returns the digit value assigned to the character *chr* as integer. If no such value is defined, *default* is returned, or, if not given, :exc:`ValueError` is raised."
msgstr ""

msgid "Returns the numeric value assigned to the character *chr* as float. If no such value is defined, *default* is returned, or, if not given, :exc:`ValueError` is raised."
msgstr ""

msgid "Returns the general category assigned to the character *chr* as string."
msgstr ""

msgid "Returns the bidirectional category assigned to the character *chr* as string. If no such value is defined, an empty string is returned."
msgstr ""

msgid "Returns the canonical combining class assigned to the character *chr* as integer. Returns ``0`` if no combining class is defined."
msgstr ""

msgid "Returns the east asian width assigned to the character *chr* as string."
msgstr ""

msgid "Returns the mirrored property assigned to the character *chr* as integer. Returns ``1`` if the character has been identified as a \"mirrored\" character in bidirectional text, ``0`` otherwise."
msgstr ""

msgid "Returns the character decomposition mapping assigned to the character *chr* as string. An empty string is returned in case no such mapping is defined."
msgstr ""

msgid "Return the normal form *form* for the Unicode string *unistr*. Valid values for *form* are 'NFC', 'NFKC', 'NFD', and 'NFKD'."
msgstr ""

msgid "The Unicode standard defines various normalization forms of a Unicode string, based on the definition of canonical equivalence and compatibility equivalence. In Unicode, several characters can be expressed in various way. For example, the character U+00C7 (LATIN CAPITAL LETTER C WITH CEDILLA) can also be expressed as the sequence U+0327 (COMBINING CEDILLA) U+0043 (LATIN CAPITAL LETTER C)."
msgstr ""

msgid "For each character, there are two normal forms: normal form C and normal form D. Normal form D (NFD) is also known as canonical decomposition, and translates each character into its decomposed form. Normal form C (NFC) first applies a canonical decomposition, then composes pre-combined characters again."
msgstr ""

msgid "In addition to these two forms, there are two additional normal forms based on compatibility equivalence. In Unicode, certain characters are supported which normally would be unified with other characters. For example, U+2160 (ROMAN NUMERAL ONE) is really the same thing as U+0049 (LATIN CAPITAL LETTER I). However, it is supported in Unicode for compatibility with existing character sets (e.g. gb2312)."
msgstr ""

msgid "The normal form KD (NFKD) will apply the compatibility decomposition, i.e. replace all compatibility characters with their equivalents. The normal form KC (NFKC) first applies the compatibility decomposition, followed by the canonical composition."
msgstr ""

msgid "Even if two unicode strings are normalized and look the same to a human reader, if one has combining characters and the other doesn't, they may not compare equal."
msgstr ""

msgid "In addition, the module exposes the following constant:"
msgstr ""

msgid "The version of the Unicode database used in this module."
msgstr ""

msgid "This is an object that has the same methods as the entire module, but uses the Unicode database version 3.2 instead, for applications that require this specific version of the Unicode database (such as IDNA)."
msgstr ""

msgid "Examples:"
msgstr ""

msgid ">>> import unicodedata >>> unicodedata.lookup('LEFT CURLY BRACKET') '{' >>> unicodedata.name('/') 'SOLIDUS' >>> unicodedata.decimal('9') 9 >>> unicodedata.decimal('a') Traceback (most recent call last):   File \"<stdin>\", line 1, in ? ValueError: not a decimal >>> unicodedata.category('A')  # 'L'etter, 'u'ppercase 'Lu' >>> unicodedata.bidirectional('\\u0660') # 'A'rabic, 'N'umber 'AN'"
msgstr ""

msgid ":mod:`unittest` --- Unit testing framework"
msgstr ""

msgid "The Python unit testing framework, sometimes referred to as \"PyUnit,\" is a Python language version of JUnit, by Kent Beck and Erich Gamma. JUnit is, in turn, a Java version of Kent's Smalltalk testing framework.  Each is the de facto standard unit testing framework for its respective language."
msgstr ""

msgid ":mod:`unittest` supports test automation, sharing of setup and shutdown code for tests, aggregation of tests into collections, and independence of the tests from the reporting framework.  The :mod:`unittest` module provides classes that make it easy to support these qualities for a set of tests."
msgstr ""

msgid "To achieve this, :mod:`unittest` supports some important concepts:"
msgstr ""

msgid "A :dfn:`test fixture` represents the preparation needed to perform one or more tests, and any associate cleanup actions.  This may involve, for example, creating temporary or proxy databases, directories, or starting a server process."
msgstr ""

msgid "A :dfn:`test case` is the smallest unit of testing.  It checks for a specific response to a particular set of inputs.  :mod:`unittest` provides a base class, :class:`TestCase`, which may be used to create new test cases."
msgstr ""

msgid "A :dfn:`test suite` is a collection of test cases, test suites, or both.  It is used to aggregate tests that should be executed together."
msgstr ""

msgid "A :dfn:`test runner` is a component which orchestrates the execution of tests and provides the outcome to the user.  The runner may use a graphical interface, a textual interface, or return a special value to indicate the results of executing the tests."
msgstr ""

msgid "The test case and test fixture concepts are supported through the :class:`TestCase` and :class:`FunctionTestCase` classes; the former should be used when creating new tests, and the latter can be used when integrating existing test code with a :mod:`unittest`\\ -driven framework. When building test fixtures using :class:`TestCase`, the :meth:`~TestCase.setUp` and :meth:`~TestCase.tearDown` methods can be overridden to provide initialization and cleanup for the fixture.  With :class:`FunctionTestCase`, existing functions can be passed to the constructor for these purposes.  When the test is run, the fixture initialization is run first; if it succeeds, the cleanup method is run after the test has been executed, regardless of the outcome of the test.  Each instance of the :class:`TestCase` will only be used to run a single test method, so a new fixture is created for each test."
msgstr ""

msgid "Test suites are implemented by the :class:`TestSuite` class.  This class allows individual tests and test suites to be aggregated; when the suite is executed, all tests added directly to the suite and in \"child\" test suites are run."
msgstr ""

msgid "A test runner is an object that provides a single method, :meth:`~TestRunner.run`, which accepts a :class:`TestCase` or :class:`TestSuite` object as a parameter, and returns a result object.  The class :class:`TestResult` is provided for use as the result object. :mod:`unittest` provides the :class:`TextTestRunner` as an example test runner which reports test results on the standard error stream by default.  Alternate runners can be implemented for other environments (such as graphical environments) without any need to derive from a specific class."
msgstr ""

msgid "Another test-support module with a very different flavor."
msgstr ""

msgid "Many new features were added to unittest in Python 2.7, including test discovery. unittest2 allows you to use these features with earlier versions of Python."
msgstr ""

msgid "Kent Beck's original paper on testing frameworks using the pattern shared by :mod:`unittest`."
msgstr ""

msgid "Third-party unittest frameworks with a lighter-weight syntax for writing tests.  For example, ``assert func(10) == 42``."
msgstr ""

msgid "An extensive list of Python testing tools including functional testing frameworks and mock object libraries."
msgstr ""

msgid "A special-interest-group for discussion of testing, and testing tools, in Python."
msgstr ""

msgid "The :mod:`unittest` module provides a rich set of tools for constructing and running tests.  This section demonstrates that a small subset of the tools suffice to meet the needs of most users."
msgstr ""

msgid "Here is a short script to test three functions from the :mod:`random` module::"
msgstr ""

msgid "import random import unittest  class TestSequenceFunctions(unittest.TestCase):      def setUp(self):         self.seq = list(range(10))      def test_shuffle(self):         # make sure the shuffled sequence does not lose any elements         random.shuffle(self.seq)         self.seq.sort()         self.assertEqual(self.seq, list(range(10)))          # should raise an exception for an immutable sequence         self.assertRaises(TypeError, random.shuffle, (1,2,3))      def test_choice(self):         element = random.choice(self.seq)         self.assertTrue(element in self.seq)      def test_sample(self):         with self.assertRaises(ValueError):             random.sample(self.seq, 20)         for element in random.sample(self.seq, 5):             self.assertTrue(element in self.seq)  if __name__ == '__main__':     unittest.main()"
msgstr ""

msgid "A testcase is created by subclassing :class:`unittest.TestCase`.  The three individual tests are defined with methods whose names start with the letters ``test``.  This naming convention informs the test runner about which methods represent tests."
msgstr ""

msgid "The crux of each test is a call to :meth:`~TestCase.assertEqual` to check for an expected result; :meth:`~TestCase.assertTrue` to verify a condition; or :meth:`~TestCase.assertRaises` to verify that an expected exception gets raised. These methods are used instead of the :keyword:`assert` statement so the test runner can accumulate all test results and produce a report."
msgstr ""

msgid "When a :meth:`~TestCase.setUp` method is defined, the test runner will run that method prior to each test.  Likewise, if a :meth:`~TestCase.tearDown` method is defined, the test runner will invoke that method after each test.  In the example, :meth:`~TestCase.setUp` was used to create a fresh sequence for each test."
msgstr ""

msgid "The final block shows a simple way to run the tests. :func:`unittest.main` provides a command line interface to the test script.  When run from the command line, the above script produces an output that looks like this::"
msgstr ""

msgid "... ---------------------------------------------------------------------- Ran 3 tests in 0.000s  OK"
msgstr ""

msgid "Instead of :func:`unittest.main`, there are other ways to run the tests with a finer level of control, less terse output, and no requirement to be run from the command line.  For example, the last two lines may be replaced with::"
msgstr ""

msgid "suite = unittest.TestLoader().loadTestsFromTestCase(TestSequenceFunctions) unittest.TextTestRunner(verbosity=2).run(suite)"
msgstr ""

msgid "Running the revised script from the interpreter or another script produces the following output::"
msgstr ""

msgid "test_choice (__main__.TestSequenceFunctions) ... ok test_sample (__main__.TestSequenceFunctions) ... ok test_shuffle (__main__.TestSequenceFunctions) ... ok  ---------------------------------------------------------------------- Ran 3 tests in 0.110s  OK"
msgstr ""

msgid "The above examples show the most commonly used :mod:`unittest` features which are sufficient to meet many everyday testing needs.  The remainder of the documentation explores the full feature set from first principles."
msgstr ""

msgid "The unittest module can be used from the command line to run tests from modules, classes or even individual test methods::"
msgstr ""

msgid "python -m unittest test_module1 test_module2 python -m unittest test_module.TestClass python -m unittest test_module.TestClass.test_method"
msgstr ""

msgid "You can pass in a list with any combination of module names, and fully qualified class or method names."
msgstr ""

msgid "You can run tests with more detail (higher verbosity) by passing in the -v flag::"
msgstr ""

msgid "python -m unittest -v test_module"
msgstr ""

msgid "For a list of all the command line options::"
msgstr ""

msgid "python -m unittest -h"
msgstr ""

msgid "failfast, catch and buffer command line options"
msgstr ""

msgid "unittest supports three command options."
msgstr ""

msgid ":option:`-b` / :option:`--buffer`"
msgstr ""

msgid "The standard output and standard error streams are buffered during the test run. Output during a passing test is discarded. Output is echoed normally on test fail or error and is added to the failure messages."
msgstr ""

msgid ":option:`-c` / :option:`--catch`"
msgstr ""

msgid "Control-C during the test run waits for the current test to end and then reports all the results so far. A second control-C raises the normal :exc:`KeyboardInterrupt` exception."
msgstr ""

msgid "See `Signal Handling`_ for the functions that provide this functionality."
msgstr ""

msgid ":option:`-f` / :option:`--failfast`"
msgstr ""

msgid "Stop the test run on the first error or failure."
msgstr ""

msgid "The command line can also be used for test discovery, for running all of the tests in a project or just a subset."
msgstr ""

msgid "Test Discovery"
msgstr ""

msgid "Unittest supports simple test discovery. For a project's tests to be compatible with test discovery they must all be importable from the top level directory of the project (in other words, they must all be in Python packages)."
msgstr ""

msgid "Test discovery is implemented in :meth:`TestLoader.discover`, but can also be used from the command line. The basic command line usage is::"
msgstr ""

msgid "cd project_directory python -m unittest discover"
msgstr ""

msgid "The ``discover`` sub-command has the following options:"
msgstr ""

msgid "--verbose"
msgstr ""

msgid "Verbose output"
msgstr ""

msgid "directory"
msgstr ""

msgid "Directory to start discovery ('.' default)"
msgstr ""

msgid "-p"
msgstr ""

msgid "pattern"
msgstr ""

msgid "Pattern to match test files ('test*.py' default)"
msgstr ""

msgid "-t"
msgstr ""

msgid "Top level directory of project (default to start directory)"
msgstr ""

msgid "The :option:`-s`, :option:`-p`, and :option:`-t` options can be passed in as positional arguments in that order. The following two command lines are equivalent::"
msgstr ""

msgid "python -m unittest discover -s project_directory -p '*_test.py' python -m unittest discover project_directory '*_test.py'"
msgstr ""

msgid "As well as being a path it is possible to pass a package name, for example ``myproject.subpackage.test``, as the start directory. The package name you supply will then be imported and its location on the filesystem will be used as the start directory."
msgstr ""

msgid "Test discovery loads tests by importing them. Once test discovery has found all the test files from the start directory you specify it turns the paths into package names to import. For example `foo/bar/baz.py` will be imported as ``foo.bar.baz``."
msgstr ""

msgid "If you have a package installed globally and attempt test discovery on a different copy of the package then the import *could* happen from the wrong place. If this happens test discovery will warn you and exit."
msgstr ""

msgid "If you supply the start directory as a package name rather than a path to a directory then discover assumes that whichever location it imports from is the location you intended, so you will not get the warning."
msgstr ""

msgid "Test modules and packages can customize test loading and discovery by through the `load_tests protocol`_."
msgstr ""

msgid "Organizing test code"
msgstr ""

msgid "The basic building blocks of unit testing are :dfn:`test cases` --- single scenarios that must be set up and checked for correctness.  In :mod:`unittest`, test cases are represented by instances of :mod:`unittest`'s :class:`TestCase` class. To make your own test cases you must write subclasses of :class:`TestCase`, or use :class:`FunctionTestCase`."
msgstr ""

msgid "An instance of a :class:`TestCase`\\ -derived class is an object that can completely run a single test method, together with optional set-up and tidy-up code."
msgstr ""

msgid "The testing code of a :class:`TestCase` instance should be entirely self contained, such that it can be run either in isolation or in arbitrary combination with any number of other test cases."
msgstr ""

msgid "The simplest :class:`TestCase` subclass will simply override the :meth:`~TestCase.runTest` method in order to perform specific testing code::"
msgstr ""

msgid "import unittest  class DefaultWidgetSizeTestCase(unittest.TestCase):     def runTest(self):         widget = Widget('The widget')         self.assertEqual(widget.size(), (50, 50), 'incorrect default size')"
msgstr ""

msgid "Note that in order to test something, we use the one of the :meth:`assert\\*` methods provided by the :class:`TestCase` base class.  If the test fails, an exception will be raised, and :mod:`unittest` will identify the test case as a :dfn:`failure`.  Any other exceptions will be treated as :dfn:`errors`. This helps you identify where the problem is: :dfn:`failures` are caused by incorrect results - a 5 where you expected a 6. :dfn:`Errors` are caused by incorrect code - e.g., a :exc:`TypeError` caused by an incorrect function call."
msgstr ""

msgid "The way to run a test case will be described later.  For now, note that to construct an instance of such a test case, we call its constructor without arguments::"
msgstr ""

msgid "testCase = DefaultWidgetSizeTestCase()"
msgstr ""

msgid "Now, such test cases can be numerous, and their set-up can be repetitive.  In the above case, constructing a :class:`Widget` in each of 100 Widget test case subclasses would mean unsightly duplication."
msgstr ""

msgid "Luckily, we can factor out such set-up code by implementing a method called :meth:`~TestCase.setUp`, which the testing framework will automatically call for us when we run the test::"
msgstr ""

msgid "import unittest  class SimpleWidgetTestCase(unittest.TestCase):     def setUp(self):         self.widget = Widget('The widget')  class DefaultWidgetSizeTestCase(SimpleWidgetTestCase):     def runTest(self):         self.assertEqual(self.widget.size(), (50,50),                          'incorrect default size')  class WidgetResizeTestCase(SimpleWidgetTestCase):     def runTest(self):         self.widget.resize(100,150)         self.assertEqual(self.widget.size(), (100,150),                          'wrong size after resize')"
msgstr ""

msgid "If the :meth:`~TestCase.setUp` method raises an exception while the test is running, the framework will consider the test to have suffered an error, and the :meth:`~TestCase.runTest` method will not be executed."
msgstr ""

msgid "Similarly, we can provide a :meth:`~TestCase.tearDown` method that tidies up after the :meth:`~TestCase.runTest` method has been run::"
msgstr ""

msgid "import unittest  class SimpleWidgetTestCase(unittest.TestCase):     def setUp(self):         self.widget = Widget('The widget')      def tearDown(self):         self.widget.dispose()         self.widget = None"
msgstr ""

msgid "If :meth:`~TestCase.setUp` succeeded, the :meth:`~TestCase.tearDown` method will be run whether :meth:`~TestCase.runTest` succeeded or not."
msgstr ""

msgid "Such a working environment for the testing code is called a :dfn:`fixture`."
msgstr ""

msgid "Often, many small test cases will use the same fixture.  In this case, we would end up subclassing :class:`SimpleWidgetTestCase` into many small one-method classes such as :class:`DefaultWidgetSizeTestCase`.  This is time-consuming and discouraging, so in the same vein as JUnit, :mod:`unittest` provides a simpler mechanism::"
msgstr ""

msgid "import unittest  class WidgetTestCase(unittest.TestCase):     def setUp(self):         self.widget = Widget('The widget')      def tearDown(self):         self.widget.dispose()         self.widget = None      def test_default_size(self):         self.assertEqual(self.widget.size(), (50,50),                          'incorrect default size')      def test_resize(self):         self.widget.resize(100,150)         self.assertEqual(self.widget.size(), (100,150),                          'wrong size after resize')"
msgstr ""

msgid "Here we have not provided a :meth:`~TestCase.runTest` method, but have instead provided two different test methods.  Class instances will now each run one of the :meth:`test_\\*` methods, with ``self.widget`` created and destroyed separately for each instance.  When creating an instance we must specify the test method it is to run.  We do this by passing the method name in the constructor::"
msgstr ""

msgid "defaultSizeTestCase = WidgetTestCase('test_default_size') resizeTestCase = WidgetTestCase('test_resize')"
msgstr ""

msgid "Test case instances are grouped together according to the features they test. :mod:`unittest` provides a mechanism for this: the :dfn:`test suite`, represented by :mod:`unittest`'s :class:`TestSuite` class::"
msgstr ""

msgid "widgetTestSuite = unittest.TestSuite() widgetTestSuite.addTest(WidgetTestCase('test_default_size')) widgetTestSuite.addTest(WidgetTestCase('test_resize'))"
msgstr ""

msgid "For the ease of running tests, as we will see later, it is a good idea to provide in each test module a callable object that returns a pre-built test suite::"
msgstr ""

msgid "def suite():     suite = unittest.TestSuite()     suite.addTest(WidgetTestCase('test_default_size'))     suite.addTest(WidgetTestCase('test_resize'))     return suite"
msgstr ""

msgid "or even::"
msgstr ""

msgid "def suite():     tests = ['test_default_size', 'test_resize']      return unittest.TestSuite(map(WidgetTestCase, tests))"
msgstr ""

msgid "Since it is a common pattern to create a :class:`TestCase` subclass with many similarly named test functions, :mod:`unittest` provides a :class:`TestLoader` class that can be used to automate the process of creating a test suite and populating it with individual tests. For example, ::"
msgstr ""

msgid "suite = unittest.TestLoader().loadTestsFromTestCase(WidgetTestCase)"
msgstr ""

msgid "will create a test suite that will run ``WidgetTestCase.test_default_size()`` and ``WidgetTestCase.test_resize``. :class:`TestLoader` uses the ``'test'`` method name prefix to identify test methods automatically."
msgstr ""

msgid "Note that the order in which the various test cases will be run is determined by sorting the test function names with respect to the built-in ordering for strings."
msgstr ""

msgid "Often it is desirable to group suites of test cases together, so as to run tests for the whole system at once.  This is easy, since :class:`TestSuite` instances can be added to a :class:`TestSuite` just as :class:`TestCase` instances can be added to a :class:`TestSuite`::"
msgstr ""

msgid "suite1 = module1.TheTestSuite() suite2 = module2.TheTestSuite() alltests = unittest.TestSuite([suite1, suite2])"
msgstr ""

msgid "You can place the definitions of test cases and test suites in the same modules as the code they are to test (such as :file:`widget.py`), but there are several advantages to placing the test code in a separate module, such as :file:`test_widget.py`:"
msgstr ""

msgid "The test module can be run standalone from the command line."
msgstr ""

msgid "The test code can more easily be separated from shipped code."
msgstr ""

msgid "There is less temptation to change test code to fit the code it tests without a good reason."
msgstr ""

msgid "Test code should be modified much less frequently than the code it tests."
msgstr ""

msgid "Tested code can be refactored more easily."
msgstr ""

msgid "Tests for modules written in C must be in separate modules anyway, so why not be consistent?"
msgstr ""

msgid "If the testing strategy changes, there is no need to change the source code."
msgstr ""

msgid "Re-using old test code"
msgstr ""

msgid "Some users will find that they have existing test code that they would like to run from :mod:`unittest`, without converting every old test function to a :class:`TestCase` subclass."
msgstr ""

msgid "For this reason, :mod:`unittest` provides a :class:`FunctionTestCase` class. This subclass of :class:`TestCase` can be used to wrap an existing test function.  Set-up and tear-down functions can also be provided."
msgstr ""

msgid "Given the following test function::"
msgstr ""

msgid "def testSomething():     something = makeSomething()     assert something.name is not None     # ..."
msgstr ""

msgid "one can create an equivalent test case instance as follows::"
msgstr ""

msgid "testcase = unittest.FunctionTestCase(testSomething)"
msgstr ""

msgid "If there are additional set-up and tear-down methods that should be called as part of the test case's operation, they can also be provided like so::"
msgstr ""

msgid "testcase = unittest.FunctionTestCase(testSomething,                                      setUp=makeSomethingDB,                                      tearDown=deleteSomethingDB)"
msgstr ""

msgid "To make migrating existing test suites easier, :mod:`unittest` supports tests raising :exc:`AssertionError` to indicate test failure. However, it is recommended that you use the explicit :meth:`TestCase.fail\\*` and :meth:`TestCase.assert\\*` methods instead, as future versions of :mod:`unittest` may treat :exc:`AssertionError` differently."
msgstr ""

msgid "Even though :class:`FunctionTestCase` can be used to quickly convert an existing test base over to a :mod:`unittest`\\ -based system, this approach is not recommended.  Taking the time to set up proper :class:`TestCase` subclasses will make future test refactorings infinitely easier."
msgstr ""

msgid "In some cases, the existing tests may have been written using the :mod:`doctest` module.  If so, :mod:`doctest` provides a :class:`DocTestSuite` class that can automatically build :class:`unittest.TestSuite` instances from the existing :mod:`doctest`\\ -based tests."
msgstr ""

msgid "Skipping tests and expected failures"
msgstr ""

msgid "Unittest supports skipping individual test methods and even whole classes of tests.  In addition, it supports marking a test as a \"expected failure,\" a test that is broken and will fail, but shouldn't be counted as a failure on a :class:`TestResult`."
msgstr ""

msgid "Skipping a test is simply a matter of using the :func:`skip` :term:`decorator` or one of its conditional variants."
msgstr ""

msgid "Basic skipping looks like this: ::"
msgstr ""

msgid "class MyTestCase(unittest.TestCase):      @unittest.skip(\"demonstrating skipping\")     def test_nothing(self):         self.fail(\"shouldn't happen\")      @unittest.skipIf(mylib.__version__ < (1, 3),                      \"not supported in this library version\")     def test_format(self):         # Tests that work for only a certain version of the library.         pass      @unittest.skipUnless(sys.platform.startswith(\"win\"), \"requires Windows\")     def test_windows_support(self):         # windows specific testing code         pass"
msgstr ""

msgid "This is the output of running the example above in verbose mode: ::"
msgstr ""

msgid "test_format (__main__.MyTestCase) ... skipped 'not supported in this library version' test_nothing (__main__.MyTestCase) ... skipped 'demonstrating skipping' test_windows_support (__main__.MyTestCase) ... skipped 'requires Windows'  ---------------------------------------------------------------------- Ran 3 tests in 0.005s  OK (skipped=3)"
msgstr ""

msgid "Classes can be skipped just like methods: ::"
msgstr ""

msgid "@skip(\"showing class skipping\") class MySkippedTestCase(unittest.TestCase):     def test_not_run(self):         pass"
msgstr ""

msgid ":meth:`TestCase.setUp` can also skip the test.  This is useful when a resource that needs to be set up is not available."
msgstr ""

msgid "Expected failures use the :func:`expectedFailure` decorator. ::"
msgstr ""

msgid "class ExpectedFailureTestCase(unittest.TestCase):     @unittest.expectedFailure     def test_fail(self):         self.assertEqual(1, 0, \"broken\")"
msgstr ""

msgid "It's easy to roll your own skipping decorators by making a decorator that calls :func:`skip` on the test when it wants it to be skipped.  This decorator skips the test unless the passed object has a certain attribute: ::"
msgstr ""

msgid "def skipUnlessHasattr(obj, attr):     if hasattr(obj, attr):         return lambda func: func     return unittest.skip(\"{0!r} doesn't have {1!r}\".format(obj, attr))"
msgstr ""

msgid "The following decorators implement test skipping and expected failures:"
msgstr ""

msgid "Unconditionally skip the decorated test.  *reason* should describe why the test is being skipped."
msgstr ""

msgid "Skip the decorated test if *condition* is true."
msgstr ""

msgid "Skip the decoratored test unless *condition* is true."
msgstr ""

msgid "Mark the test as an expected failure.  If the test fails when run, the test is not counted as a failure."
msgstr ""

msgid "Skipped tests will not have :meth:`setUp` or :meth:`tearDown` run around them. Skipped classes will not have :meth:`setUpClass` or :meth:`tearDownClass` run."
msgstr ""

msgid "This section describes in depth the API of :mod:`unittest`."
msgstr ""

msgid "Test cases"
msgstr ""

msgid "Instances of the :class:`TestCase` class represent the smallest testable units in the :mod:`unittest` universe.  This class is intended to be used as a base class, with specific tests being implemented by concrete subclasses.  This class implements the interface needed by the test runner to allow it to drive the test, and methods that the test code can use to check for and report various kinds of failure."
msgstr ""

msgid "Each instance of :class:`TestCase` will run a single test method: the method named *methodName*.  If you remember, we had an earlier example that went something like this::"
msgstr ""

msgid "Here, we create two instances of :class:`WidgetTestCase`, each of which runs a single test."
msgstr ""

msgid "*methodName* defaults to :meth:`runTest`."
msgstr ""

msgid ":class:`TestCase` instances provide three groups of methods: one group used to run the test, another used by the test implementation to check conditions and report failures, and some inquiry methods allowing information about the test itself to be gathered."
msgstr ""

msgid "Methods in the first group (running the test) are:"
msgstr ""

msgid "Method called to prepare the test fixture.  This is called immediately before calling the test method; any exception raised by this method will be considered an error rather than a test failure. The default implementation does nothing."
msgstr ""

msgid "Method called immediately after the test method has been called and the result recorded.  This is called even if the test method raised an exception, so the implementation in subclasses may need to be particularly careful about checking internal state.  Any exception raised by this method will be considered an error rather than a test failure.  This method will only be called if the :meth:`setUp` succeeds, regardless of the outcome of the test method. The default implementation does nothing."
msgstr ""

msgid "A class method called before tests in an individual class run. ``setUpClass`` is called with the class as the only argument and must be decorated as a :func:`classmethod`::"
msgstr ""

msgid "@classmethod def setUpClass(cls):     ..."
msgstr ""

msgid "See `Class and Module Fixtures`_ for more details."
msgstr ""

msgid "A class method called after tests in an individual class have run. ``tearDownClass`` is called with the class as the only argument and must be decorated as a :meth:`classmethod`::"
msgstr ""

msgid "@classmethod def tearDownClass(cls):     ..."
msgstr ""

msgid "Run the test, collecting the result into the test result object passed as *result*.  If *result* is omitted or :const:`None`, a temporary result object is created (by calling the :meth:`defaultTestResult` method) and used. The result object is not returned to :meth:`run`'s caller."
msgstr ""

msgid "The same effect may be had by simply calling the :class:`TestCase` instance."
msgstr ""

msgid "Calling this during a test method or :meth:`setUp` skips the current test.  See :ref:`unittest-skipping` for more information."
msgstr ""

msgid "Run the test without collecting the result.  This allows exceptions raised by the test to be propagated to the caller, and can be used to support running tests under a debugger."
msgstr ""

msgid "The test code can use any of the following methods to check for and report failures."
msgstr ""

msgid "Signal a test failure if *expr* is false; the explanation for the failure will be *msg* if given, otherwise it will be :const:`None`."
msgstr ""

msgid "Test that *first* and *second* are equal.  If the values do not compare equal, the test will fail with the explanation given by *msg*, or :const:`None`.  Note that using :meth:`assertEqual` improves upon doing the comparison as the first parameter to :meth:`assertTrue`: the default value for *msg* include representations of both *first* and *second*."
msgstr ""

msgid "In addition, if *first* and *second* are the exact same type and one of list, tuple, dict, set, frozenset or str or any type that a subclass registers with :meth:`addTypeEqualityFunc` the type specific equality function will be called in order to generate a more useful default error message."
msgstr ""

msgid "Test that *first* and *second* are not equal.  If the values do compare equal, the test will fail with the explanation given by *msg*, or :const:`None`.  Note that using :meth:`assertNotEqual` improves upon doing the comparison as the first parameter to :meth:`assertTrue` is that the default value for *msg* can be computed to include representations of both *first* and *second*."
msgstr ""

msgid "Test that *first* and *second* are approximately equal by computing the difference, rounding to the given number of decimal *places* (default 7), and comparing to zero."
msgstr ""

msgid "Note that comparing a given number of decimal places is not the same as comparing a given number of significant digits. If the values do not compare equal, the test will fail with the explanation given by *msg*, or :const:`None`."
msgstr ""

msgid "If *delta* is supplied instead of *places* then the difference between *first* and *second* must be less than *delta*."
msgstr ""

msgid "Supplying both *delta* and *places* raises a ``TypeError``."
msgstr ""

msgid "Test that *first* and *second* are not approximately equal by computing the difference, rounding to the given number of decimal *places* (default 7), and comparing to zero."
msgstr ""

msgid "If *delta* is supplied instead of *places* then the difference between *first* and *second* must be more than *delta*."
msgstr ""

msgid "Test that *first* is respectively >, >=, < or <= than *second* depending on the method name.  If not, the test will fail with an explanation or with the explanation given by *msg*::"
msgstr ""

msgid ">>> self.assertGreaterEqual(3, 4) AssertionError: \"3\" unexpectedly not greater than or equal to \"4\""
msgstr ""

msgid "Test that the multiline string *first* is equal to the string *second*. When not equal a diff of the two strings highlighting the differences will be included in the error message. This method is used by default when comparing strings with :meth:`assertEqual`."
msgstr ""

msgid "If specified, *msg* will be used as the error message on failure."
msgstr ""

msgid "Verifies that a *regexp* search matches *text*.  Fails with an error message including the pattern and the *text*.  *regexp* may be a regular expression object or a string containing a regular expression suitable for use by :func:`re.search`."
msgstr ""

msgid "Verifies that a *regexp* search does not match *text*.  Fails with an error message including the pattern and the part of *text* that matches.  *regexp* may be a regular expression object or a string containing a regular expression suitable for use by :func:`re.search`."
msgstr ""

msgid "Tests that *first* is or is not in *second* with an explanatory error message as appropriate."
msgstr ""

msgid "Test that sequence *expected* contains the same elements as *actual*, regardless of their order. When they don't, an error message listing the differences between the sequences will be generated."
msgstr ""

msgid "Duplicate elements are ignored when comparing *actual* and *expected*. It is the equivalent of ``assertEqual(set(expected), set(actual))`` but it works with sequences of unhashable objects as well. Because duplicates are ignored, this method has been deprecated in favour of :meth:`assertItemsEqual`."
msgstr ""

msgid "Duplicate elements are *not* ignored when comparing *actual* and *expected*. It verifies if each element has the same count in both sequences. It is the equivalent of ``assertEqual(sorted(expected), sorted(actual))`` but it works with sequences of unhashable objects as well."
msgstr ""

msgid "Tests that two sets are equal.  If not, an error message is constructed that lists the differences between the sets.  This method is used by default when comparing sets or frozensets with :meth:`assertEqual`."
msgstr ""

msgid "Fails if either of *set1* or *set2* does not have a :meth:`set.difference` method."
msgstr ""

msgid "Test that two dictionaries are equal.  If not, an error message is constructed that shows the differences in the dictionaries. This method will be used by default to compare dictionaries in calls to :meth:`assertEqual`."
msgstr ""

msgid "Tests whether the key/value pairs in dictionary *actual* are a superset of those in *expected*.  If not, an error message listing the missing keys and mismatched values is generated."
msgstr ""

msgid "Tests that two lists or tuples are equal.  If not an error message is constructed that shows only the differences between the two.  An error is also raised if either of the parameters are of the wrong type. These methods are used by default when comparing lists or tuples with :meth:`assertEqual`."
msgstr ""

msgid "Tests that two sequences are equal.  If a *seq_type* is supplied, both *seq1* and *seq2* must be instances of *seq_type* or a failure will be raised.  If the sequences are different an error message is constructed that shows the difference between the two."
msgstr ""

msgid "This method is used to implement :meth:`assertListEqual` and :meth:`assertTupleEqual`."
msgstr ""

msgid "Test that an exception is raised when *callable* is called with any positional or keyword arguments that are also passed to :meth:`assertRaises`.  The test passes if *exception* is raised, is an error if another exception is raised, or fails if no exception is raised. To catch any of a group of exceptions, a tuple containing the exception classes may be passed as *exception*."
msgstr ""

msgid "If only the *exception* argument is given, returns a context manager so that the code under test can be written inline rather than as a function::"
msgstr ""

msgid "with self.assertRaises(SomeException):     do_something()"
msgstr ""

msgid "The context manager will store the caught exception object in its :attr:`exception` attribute.  This can be useful if the intention is to perform additional checks on the exception raised::"
msgstr ""

msgid "with self.assertRaises(SomeException) as cm:     do_something()  the_exception = cm.exception self.assertEqual(the_exception.error_code, 3)"
msgstr ""

msgid "Like :meth:`assertRaises` but also tests that *regexp* matches on the string representation of the raised exception.  *regexp* may be a regular expression object or a string containing a regular expression suitable for use by :func:`re.search`.  Examples::"
msgstr ""

msgid "self.assertRaisesRegexp(ValueError, 'invalid literal for.*XYZ$',                         int, 'XYZ')"
msgstr ""

msgid "or::"
msgstr ""

msgid "with self.assertRaisesRegexp(ValueError, 'literal'):    int('XYZ')"
msgstr ""

msgid "This signals a test failure if *expr* is not None."
msgstr ""

msgid "The inverse of the :meth:`assertIsNone` method. This signals a test failure if *expr* is None."
msgstr ""

msgid "This signals a test failure if *expr1* and *expr2* don't evaluate to the same object."
msgstr ""

msgid "The inverse of the :meth:`assertIs` method. This signals a test failure if *expr1* and *expr2* evaluate to the same object."
msgstr ""

msgid "This signals a test failure if *obj* is not an instance of *cls* (which can be a class or a tuple of classes, as supported by :func:`isinstance`)."
msgstr ""

msgid "The inverse of the :meth:`assertIsInstance` method.  This signals a test failure if *obj* is an instance of *cls*."
msgstr ""

msgid "The inverse of the :meth:`assertTrue` method is the :meth:`assertFalse` method. This signals a test failure if *expr* is true, with *msg* or :const:`None` for the error message."
msgstr ""

msgid "Signals a test failure unconditionally, with *msg* or :const:`None` for the error message."
msgstr ""

msgid "This class attribute gives the exception raised by the test method.  If a test framework needs to use a specialized exception, possibly to carry additional information, it must subclass this exception in order to \"play fair\" with the framework.  The initial value of this attribute is :exc:`AssertionError`."
msgstr ""

msgid "If set to True then any explicit failure message you pass in to the assert methods will be appended to the end of the normal failure message. The normal messages contain useful information about the objects involved, for example the message from assertEqual shows you the repr of the two unequal objects. Setting this attribute to True allows you to have a custom error message in addition to the normal one."
msgstr ""

msgid "This attribute defaults to False, meaning that a custom message passed to an assert method will silence the normal message."
msgstr ""

msgid "The class setting can be overridden in individual tests by assigning an instance attribute to True or False before calling the assert methods."
msgstr ""

msgid "This attribute controls the maximum length of diffs output by assert methods that report diffs on failure. It defaults to 80*8 characters. Assert methods affected by this attribute are :meth:`assertSequenceEqual` (including all the sequence comparison methods that delegate to it), :meth:`assertDictEqual` and :meth:`assertMultiLineEqual`."
msgstr ""

msgid "Setting ``maxDiff`` to None means that there is no maximum length of diffs."
msgstr ""

msgid "Testing frameworks can use the following methods to collect information on the test:"
msgstr ""

msgid "Return the number of tests represented by this test object.  For :class:`TestCase` instances, this will always be ``1``."
msgstr ""

msgid "Return an instance of the test result class that should be used for this test case class (if no other result instance is provided to the :meth:`run` method)."
msgstr ""

msgid "For :class:`TestCase` instances, this will always be an instance of :class:`TestResult`; subclasses of :class:`TestCase` should override this as necessary."
msgstr ""

msgid "Return a string identifying the specific test case.  This is usually the full name of the test method, including the module and class name."
msgstr ""

msgid "Returns a description of the test, or :const:`None` if no description has been provided.  The default implementation of this method returns the first line of the test method's docstring, if available, or :const:`None`."
msgstr ""

msgid "Registers a type specific :meth:`assertEqual` equality checking function to be called by :meth:`assertEqual` when both objects it has been asked to compare are exactly *typeobj* (not subclasses). *function* must take two positional arguments and a third msg=None keyword argument just as :meth:`assertEqual` does.  It must raise ``self.failureException`` when inequality between the first two parameters is detected."
msgstr ""

msgid "One good use of custom equality checking functions for a type is to raise ``self.failureException`` with an error message useful for debugging the problem by explaining the inequalities in detail."
msgstr ""

msgid "Add a function to be called after :meth:`tearDown` to cleanup resources used during the test. Functions will be called in reverse order to the order they are added (LIFO). They are called with any arguments and keyword arguments passed into :meth:`addCleanup` when they are added."
msgstr ""

msgid "If :meth:`setUp` fails, meaning that :meth:`tearDown` is not called, then any cleanup functions added will still be called."
msgstr ""

msgid "This method is called unconditionally after :meth:`tearDown`, or after :meth:`setUp` if :meth:`setUp` raises an exception."
msgstr ""

msgid "It is responsible for calling all the cleanup functions added by :meth:`addCleanup`. If you need cleanup functions to be called *prior* to :meth:`tearDown` then you can call :meth:`doCleanups` yourself."
msgstr ""

msgid ":meth:`doCleanups` pops methods off the stack of cleanup functions one at a time, so it can be called at any time."
msgstr ""

msgid "This class implements the portion of the :class:`TestCase` interface which allows the test runner to drive the test, but does not provide the methods which test code can use to check and report errors.  This is used to create test cases using legacy test code, allowing it to be integrated into a :mod:`unittest`-based test framework."
msgstr ""

msgid "Grouping tests"
msgstr ""

msgid "This class represents an aggregation of individual tests cases and test suites. The class presents the interface needed by the test runner to allow it to be run as any other test case.  Running a :class:`TestSuite` instance is the same as iterating over the suite, running each test individually."
msgstr ""

msgid "If *tests* is given, it must be an iterable of individual test cases or other test suites that will be used to build the suite initially. Additional methods are provided to add test cases and suites to the collection later on."
msgstr ""

msgid ":class:`TestSuite` objects behave much like :class:`TestCase` objects, except they do not actually implement a test.  Instead, they are used to aggregate tests into groups of tests that should be run together. Some additional methods are available to add tests to :class:`TestSuite` instances:"
msgstr ""

msgid "Add a :class:`TestCase` or :class:`TestSuite` to the suite."
msgstr ""

msgid "Add all the tests from an iterable of :class:`TestCase` and :class:`TestSuite` instances to this test suite."
msgstr ""

msgid "This is equivalent to iterating over *tests*, calling :meth:`addTest` for each element."
msgstr ""

msgid ":class:`TestSuite` shares the following methods with :class:`TestCase`:"
msgstr ""

msgid "Run the tests associated with this suite, collecting the result into the test result object passed as *result*.  Note that unlike :meth:`TestCase.run`, :meth:`TestSuite.run` requires the result object to be passed in."
msgstr ""

msgid "Run the tests associated with this suite without collecting the result. This allows exceptions raised by the test to be propagated to the caller and can be used to support running tests under a debugger."
msgstr ""

msgid "Return the number of tests represented by this test object, including all individual tests and sub-suites."
msgstr ""

msgid "Tests grouped by a :class:`TestSuite` are always accessed by iteration. Subclasses can lazily provide tests by overriding :meth:`__iter__`. Note that this method maybe called several times on a single suite (for example when counting tests or comparing for equality) so the tests returned must be the same for repeated iterations."
msgstr ""

msgid "In the typical usage of a :class:`TestSuite` object, the :meth:`run` method is invoked by a :class:`TestRunner` rather than by the end-user test harness."
msgstr ""

msgid "Loading and running tests"
msgstr ""

msgid "The :class:`TestLoader` class is used to create test suites from classes and modules.  Normally, there is no need to create an instance of this class; the :mod:`unittest` module provides an instance that can be shared as ``unittest.defaultTestLoader``. Using a subclass or instance, however, allows customization of some configurable properties."
msgstr ""

msgid ":class:`TestLoader` objects have the following methods:"
msgstr ""

msgid "Return a suite of all tests cases contained in the :class:`TestCase`\\ -derived :class:`testCaseClass`."
msgstr ""

msgid "Return a suite of all tests cases contained in the given module. This method searches *module* for classes derived from :class:`TestCase` and creates an instance of the class for each test method defined for the class."
msgstr ""

msgid "While using a hierarchy of :class:`TestCase`\\ -derived classes can be convenient in sharing fixtures and helper functions, defining test methods on base classes that are not intended to be instantiated directly does not play well with this method.  Doing so, however, can be useful when the fixtures are different and defined in subclasses."
msgstr ""

msgid "If a module provides a ``load_tests`` function it will be called to load the tests. This allows modules to customize test loading. This is the `load_tests protocol`_."
msgstr ""

msgid "Return a suite of all tests cases given a string specifier."
msgstr ""

msgid "The specifier *name* is a \"dotted name\" that may resolve either to a module, a test case class, a test method within a test case class, a :class:`TestSuite` instance, or a callable object which returns a :class:`TestCase` or :class:`TestSuite` instance.  These checks are applied in the order listed here; that is, a method on a possible test case class will be picked up as \"a test method within a test case class\", rather than \"a callable object\"."
msgstr ""

msgid "For example, if you have a module :mod:`SampleTests` containing a :class:`TestCase`\\ -derived class :class:`SampleTestCase` with three test methods (:meth:`test_one`, :meth:`test_two`, and :meth:`test_three`), the specifier ``'SampleTests.SampleTestCase'`` would cause this method to return a suite which will run all three test methods. Using the specifier ``'SampleTests.SampleTestCase.test_two'`` would cause it to return a test suite which will run only the :meth:`test_two` test method. The specifier can refer to modules and packages which have not been imported; they will be imported as a side-effect."
msgstr ""

msgid "The method optionally resolves *name* relative to the given *module*."
msgstr ""

msgid "Similar to :meth:`loadTestsFromName`, but takes a sequence of names rather than a single name.  The return value is a test suite which supports all the tests defined for each name."
msgstr ""

msgid "Return a sorted sequence of method names found within *testCaseClass*; this should be a subclass of :class:`TestCase`."
msgstr ""

msgid "Find and return all test modules from the specified start directory, recursing into subdirectories to find them. Only test files that match *pattern* will be loaded. (Using shell style pattern matching.) Only module names that are importable (i.e. are valid Python identifiers) will be loaded."
msgstr ""

msgid "All test modules must be importable from the top level of the project. If the start directory is not the top level directory then the top level directory must be specified separately."
msgstr ""

msgid "If importing a module fails, for example due to a syntax error, then this will be recorded as a single error and discovery will continue."
msgstr ""

msgid "If a test package name (directory with :file:`__init__.py`) matches the pattern then the package will be checked for a ``load_tests`` function. If this exists then it will be called with *loader*, *tests*, *pattern*."
msgstr ""

msgid "If load_tests exists then discovery does *not* recurse into the package, ``load_tests`` is responsible for loading all tests in the package."
msgstr ""

msgid "The pattern is deliberately not stored as a loader attribute so that packages can continue discovery themselves. *top_level_dir* is stored so ``load_tests`` does not need to pass this argument in to ``loader.discover()``."
msgstr ""

msgid "*start_dir* can be a dotted module name as well as a directory."
msgstr ""

msgid "The following attributes of a :class:`TestLoader` can be configured either by subclassing or assignment on an instance:"
msgstr ""

msgid "String giving the prefix of method names which will be interpreted as test methods.  The default value is ``'test'``."
msgstr ""

msgid "This affects :meth:`getTestCaseNames` and all the :meth:`loadTestsFrom\\*` methods."
msgstr ""

msgid "Function to be used to compare method names when sorting them in :meth:`getTestCaseNames` and all the :meth:`loadTestsFrom\\*` methods."
msgstr ""

msgid "Callable object that constructs a test suite from a list of tests. No methods on the resulting object are needed.  The default value is the :class:`TestSuite` class."
msgstr ""

msgid "This affects all the :meth:`loadTestsFrom\\*` methods."
msgstr ""

msgid "This class is used to compile information about which tests have succeeded and which have failed."
msgstr ""

msgid "A :class:`TestResult` object stores the results of a set of tests.  The :class:`TestCase` and :class:`TestSuite` classes ensure that results are properly recorded; test authors do not need to worry about recording the outcome of tests."
msgstr ""

msgid "Testing frameworks built on top of :mod:`unittest` may want access to the :class:`TestResult` object generated by running a set of tests for reporting purposes; a :class:`TestResult` instance is returned by the :meth:`TestRunner.run` method for this purpose."
msgstr ""

msgid ":class:`TestResult` instances have the following attributes that will be of interest when inspecting the results of running a set of tests:"
msgstr ""

msgid "A list containing 2-tuples of :class:`TestCase` instances and strings holding formatted tracebacks. Each tuple represents a test which raised an unexpected exception."
msgstr ""

msgid "A list containing 2-tuples of :class:`TestCase` instances and strings holding formatted tracebacks. Each tuple represents a test where a failure was explicitly signalled using the :meth:`TestCase.fail\\*` or :meth:`TestCase.assert\\*` methods."
msgstr ""

msgid "A list containing 2-tuples of :class:`TestCase` instances and strings holding the reason for skipping the test."
msgstr ""

msgid "A list contaning 2-tuples of :class:`TestCase` instances and strings holding formatted tracebacks.  Each tuple represents a expected failures of the test case."
msgstr ""

msgid "A list containing :class:`TestCase` instances that were marked as expected failures, but succeeded."
msgstr ""

msgid "Set to ``True`` when the execution of tests should stop by :meth:`stop`."
msgstr ""

msgid "The total number of tests run so far."
msgstr ""

msgid "If set to true, ``sys.stdout`` and ``sys.stderr`` will be buffered in between :meth:`startTest` and :meth:`stopTest` being called. Collected output will only be echoed onto the real ``sys.stdout`` and ``sys.stderr`` if the test fails or errors. Any output is also attached to the failure / error message."
msgstr ""

msgid "If set to true :meth:`stop` will be called on the first failure or error, halting the test run."
msgstr ""

msgid "Return :const:`True` if all tests run so far have passed, otherwise returns :const:`False`."
msgstr ""

msgid "This method can be called to signal that the set of tests being run should be aborted by setting the :attr:`shouldStop` attribute to :const:`True`. :class:`TestRunner` objects should respect this flag and return without running any additional tests."
msgstr ""

msgid "For example, this feature is used by the :class:`TextTestRunner` class to stop the test framework when the user signals an interrupt from the keyboard.  Interactive tools which provide :class:`TestRunner` implementations can use this in a similar manner."
msgstr ""

msgid "The following methods of the :class:`TestResult` class are used to maintain the internal data structures, and may be extended in subclasses to support additional reporting requirements.  This is particularly useful in building tools which support interactive reporting while tests are being run."
msgstr ""

msgid "Called when the test case *test* is about to be run."
msgstr ""

msgid "Called after the test case *test* has been executed, regardless of the outcome."
msgstr ""

msgid "Called once before any tests are executed."
msgstr ""

msgid "Called once after all tests are executed."
msgstr ""

msgid "Called when the test case *test* raises an unexpected exception *err* is a tuple of the form returned by :func:`sys.exc_info`: ``(type, value, traceback)``."
msgstr ""

msgid "The default implementation appends a tuple ``(test, formatted_err)`` to the instance's :attr:`errors` attribute, where *formatted_err* is a formatted traceback derived from *err*."
msgstr ""

msgid "Called when the test case *test* signals a failure. *err* is a tuple of the form returned by :func:`sys.exc_info`: ``(type, value, traceback)``."
msgstr ""

msgid "The default implementation appends a tuple ``(test, formatted_err)`` to the instance's :attr:`failures` attribute, where *formatted_err* is a formatted traceback derived from *err*."
msgstr ""

msgid "Called when the test case *test* succeeds."
msgstr ""

msgid "The default implementation does nothing."
msgstr ""

msgid "Called when the test case *test* is skipped.  *reason* is the reason the test gave for skipping."
msgstr ""

msgid "The default implementation appends a tuple ``(test, reason)`` to the instance's :attr:`skipped` attribute."
msgstr ""

msgid "Called when the test case *test* fails, but was marked with the :func:`expectedFailure` decorator."
msgstr ""

msgid "The default implementation appends a tuple ``(test, formatted_err)`` to the instance's :attr:`expectedFailures` attribute, where *formatted_err* is a formatted traceback derived from *err*."
msgstr ""

msgid "Called when the test case *test* was marked with the :func:`expectedFailure` decorator, but succeeded."
msgstr ""

msgid "The default implementation appends the test to the instance's :attr:`unexpectedSuccesses` attribute."
msgstr ""

msgid "A concrete implementation of :class:`TestResult` used by the :class:`TextTestRunner`."
msgstr ""

msgid "Instance of the :class:`TestLoader` class intended to be shared.  If no customization of the :class:`TestLoader` is needed, this instance can be used instead of repeatedly creating new instances."
msgstr ""

msgid "A basic test runner implementation which prints results on standard error.  It has a few configurable parameters, but is essentially very simple.  Graphical applications which run test suites should provide alternate implementations."
msgstr ""

msgid "This method returns the instance of ``TestResult`` used by :meth:`run`. It is not intended to be called directly, but can be overridden in subclasses to provide a custom ``TestResult``."
msgstr ""

msgid "``_makeResult()`` instantiates the class or callable passed in the ``TextTestRunner`` constructor as the ``resultclass`` argument. It defaults to :class:`TextTestResult` if no ``resultclass`` is provided. The result class is instantiated with the following arguments::"
msgstr ""

msgid "stream, descriptions, verbosity"
msgstr ""

msgid "A command-line program that runs a set of tests; this is primarily for making test modules conveniently executable.  The simplest use for this function is to include the following line at the end of a test script::"
msgstr ""

msgid "if __name__ == '__main__':     unittest.main()"
msgstr ""

msgid "You can run tests with more detailed information by passing in the verbosity argument::"
msgstr ""

msgid "if __name__ == '__main__':     unittest.main(verbosity=2)"
msgstr ""

msgid "The *testRunner* argument can either be a test runner class or an already created instance of it. By default ``main`` calls :func:`sys.exit` with an exit code indicating success or failure of the tests run."
msgstr ""

msgid "``main`` supports being used from the interactive interpreter by passing in the argument ``exit=False``. This displays the result on standard output without calling :func:`sys.exit`::"
msgstr ""

msgid ">>> from unittest import main >>> main(module='test_module', exit=False)"
msgstr ""

msgid "The ``failfast``, ``catchbreak`` and ``buffer`` parameters have the same effect as the `failfast, catch and buffer command line options`_."
msgstr ""

msgid "Calling ``main`` actually returns an instance of the ``TestProgram`` class. This stores the result of the tests run as the ``result`` attribute."
msgstr ""

msgid "load_tests Protocol"
msgstr ""

msgid "Modules or packages can customize how tests are loaded from them during normal test runs or test discovery by implementing a function called ``load_tests``."
msgstr ""

msgid "If a test module defines ``load_tests`` it will be called by :meth:`TestLoader.loadTestsFromModule` with the following arguments::"
msgstr ""

msgid "load_tests(loader, standard_tests, None)"
msgstr ""

msgid "It should return a :class:`TestSuite`."
msgstr ""

msgid "*loader* is the instance of :class:`TestLoader` doing the loading. *standard_tests* are the tests that would be loaded by default from the module. It is common for test modules to only want to add or remove tests from the standard set of tests. The third argument is used when loading packages as part of test discovery."
msgstr ""

msgid "A typical ``load_tests`` function that loads tests from a specific set of :class:`TestCase` classes may look like::"
msgstr ""

msgid "test_cases = (TestCase1, TestCase2, TestCase3)  def load_tests(loader, tests, pattern):     suite = TestSuite()     for test_class in test_cases:         tests = loader.loadTestsFromTestCase(test_class)         suite.addTests(tests)     return suite"
msgstr ""

msgid "If discovery is started, either from the command line or by calling :meth:`TestLoader.discover`, with a pattern that matches a package name then the package :file:`__init__.py` will be checked for ``load_tests``."
msgstr ""

msgid "The default pattern is 'test*.py'. This matches all Python files that start with 'test' but *won't* match any test directories."
msgstr ""

msgid "A pattern like 'test*' will match test packages as well as modules."
msgstr ""

msgid "If the package :file:`__init__.py` defines ``load_tests`` then it will be called and discovery not continued into the package. ``load_tests`` is called with the following arguments::"
msgstr ""

msgid "load_tests(loader, standard_tests, pattern)"
msgstr ""

msgid "This should return a :class:`TestSuite` representing all the tests from the package. (``standard_tests`` will only contain tests collected from :file:`__init__.py`.)"
msgstr ""

msgid "Because the pattern is passed into ``load_tests`` the package is free to continue (and potentially modify) test discovery. A 'do nothing' ``load_tests`` function for a test package would look like::"
msgstr ""

msgid "def load_tests(loader, standard_tests, pattern):     # top level directory cached on loader instance     this_dir = os.path.dirname(__file__)     package_tests = loader.discover(start_dir=this_dir, pattern=pattern)     standard_tests.addTests(package_tests)     return standard_tests"
msgstr ""

msgid "Class and Module Fixtures"
msgstr ""

msgid "Class and module level fixtures are implemented in :class:`TestSuite`. When the test suite encounters a test from a new class then :meth:`tearDownClass` from the previous class (if there is one) is called, followed by :meth:`setUpClass` from the new class."
msgstr ""

msgid "Similarly if a test is from a different module from the previous test then ``tearDownModule`` from the previous module is run, followed by ``setUpModule`` from the new module."
msgstr ""

msgid "After all the tests have run the final ``tearDownClass`` and ``tearDownModule`` are run."
msgstr ""

msgid "Note that shared fixtures do not play well with [potential] features like test parallelization and they break test isolation. They should be used with care."
msgstr ""

msgid "The default ordering of tests created by the unittest test loaders is to group all tests from the same modules and classes together. This will lead to ``setUpClass`` / ``setUpModule`` (etc) being called exactly once per class and module. If you randomize the order, so that tests from different modules and classes are adjacent to each other, then these shared fixture functions may be called multiple times in a single test run."
msgstr ""

msgid "Shared fixtures are not intended to work with suites with non-standard ordering. A ``BaseTestSuite`` still exists for frameworks that don't want to support shared fixtures."
msgstr ""

msgid "If there are any exceptions raised during one of the shared fixture functions the test is reported as an error. Because there is no corresponding test instance an ``_ErrorHolder`` object (that has the same interface as a :class:`TestCase`) is created to represent the error. If you are just using the standard unittest test runner then this detail doesn't matter, but if you are a framework author it may be relevant."
msgstr ""

msgid "setUpClass and tearDownClass"
msgstr ""

msgid "These must be implemented as class methods::"
msgstr ""

msgid "import unittest  class Test(unittest.TestCase):     @classmethod     def setUpClass(cls):         cls._connection = createExpensiveConnectionObject()      @classmethod     def tearDownClass(cls):         cls._connection.destroy()"
msgstr ""

msgid "If you want the ``setUpClass`` and ``tearDownClass`` on base classes called then you must call up to them yourself. The implementations in :class:`TestCase` are empty."
msgstr ""

msgid "If an exception is raised during a ``setUpClass`` then the tests in the class are not run and the ``tearDownClass`` is not run. Skipped classes will not have ``setUpClass`` or ``tearDownClass`` run. If the exception is a ``SkipTest`` exception then the class will be reported as having been skipped instead of as an error."
msgstr ""

msgid "setUpModule and tearDownModule"
msgstr ""

msgid "These should be implemented as functions::"
msgstr ""

msgid "def setUpModule():     createConnection()  def tearDownModule():     closeConnection()"
msgstr ""

msgid "If an exception is raised in a ``setUpModule`` then none of the tests in the module will be run and the ``tearDownModule`` will not be run. If the exception is a ``SkipTest`` exception then the module will be reported as having been skipped instead of as an error."
msgstr ""

msgid "Signal Handling"
msgstr ""

msgid "The :option:`-c`/:option:`--catch` command line option to unittest, along with the ``catchbreak`` parameter to :func:`unittest.main()`, provide more friendly handling of control-C during a test run. With catch break behavior enabled control-C will allow the currently running test to complete, and the test run will then end and report all the results so far. A second control-c will raise a :exc:`KeyboardInterrupt` in the usual way."
msgstr ""

msgid "The control-c handling signal handler attempts to remain compatible with code or tests that install their own :const:`signal.SIGINT` handler. If the ``unittest`` handler is called but *isn't* the installed :const:`signal.SIGINT` handler, i.e. it has been replaced by the system under test and delegated to, then it calls the default handler. This will normally be the expected behavior by code that replaces an installed handler and delegates to it. For individual tests that need ``unittest`` control-c handling disabled the :func:`removeHandler` decorator can be used."
msgstr ""

msgid "There are a few utility functions for framework authors to enable control-c handling functionality within test frameworks."
msgstr ""

msgid "Install the control-c handler. When a :const:`signal.SIGINT` is received (usually in response to the user pressing control-c) all registered results have :meth:`~TestResult.stop` called."
msgstr ""

msgid "Register a :class:`TestResult` object for control-c handling. Registering a result stores a weak reference to it, so it doesn't prevent the result from being garbage collected."
msgstr ""

msgid "Registering a :class:`TestResult` object has no side-effects if control-c handling is not enabled, so test frameworks can unconditionally register all results they create independently of whether or not handling is enabled."
msgstr ""

msgid "Remove a registered result. Once a result has been removed then :meth:`~TestResult.stop` will no longer be called on that result object in response to a control-c."
msgstr ""

msgid "When called without arguments this function removes the control-c handler if it has been installed. This function can also be used as a test decorator to temporarily remove the handler whilst the test is being executed::"
msgstr ""

msgid "@unittest.removeHandler def test_signal_handling(self):     ..."
msgstr ""

msgid "Unix Specific Services"
msgstr ""

msgid "The modules described in this chapter provide interfaces to features that are unique to the Unix operating system, or in some cases to some or many variants of it.  Here's an overview:"
msgstr ""

msgid ":mod:`urllib.error` --- Exception classes raised by urllib.request"
msgstr ""

msgid "The :mod:`urllib.error` module defines the exception classes for exceptions raised by :mod:`urllib.request`.  The base exception class is :exc:`URLError`, which inherits from :exc:`IOError`."
msgstr ""

msgid "The following exceptions are raised by :mod:`urllib.error` as appropriate:"
msgstr ""

msgid "The handlers raise this exception (or derived exceptions) when they run into a problem.  It is a subclass of :exc:`IOError`."
msgstr ""

msgid "The reason for this error.  It can be a message string or another exception instance (:exc:`socket.error` for remote URLs, :exc:`OSError` for local URLs)."
msgstr ""

msgid "Though being an exception (a subclass of :exc:`URLError`), an :exc:`HTTPError` can also function as a non-exceptional file-like return value (the same thing that :func:`urlopen` returns).  This is useful when handling exotic HTTP errors, such as requests for authentication."
msgstr ""

msgid "An HTTP status code as defined in `RFC 2616 <http://www.faqs.org/rfcs/rfc2616.html>`_.  This numeric value corresponds to a value found in the dictionary of codes as found in :attr:`http.server.BaseHTTPRequestHandler.responses`."
msgstr ""

msgid "This exception is raised when the :func:`urlretrieve` function detects that the amount of the downloaded data is less than the expected amount (given by the *Content-Length* header).  The :attr:`content` attribute stores the downloaded (and supposedly truncated) data."
msgstr ""

msgid ":mod:`urllib.parse` --- Parse URLs into components"
msgstr ""

msgid "This module defines a standard interface to break Uniform Resource Locator (URL) strings up in components (addressing scheme, network location, path etc.), to combine the components back into a URL string, and to convert a \"relative URL\" to an absolute URL given a \"base URL.\""
msgstr ""

msgid "The module has been designed to match the Internet RFC on Relative Uniform Resource Locators (and discovered a bug in an earlier draft!). It supports the following URL schemes: ``file``, ``ftp``, ``gopher``, ``hdl``, ``http``, ``https``, ``imap``, ``mailto``, ``mms``, ``news``, ``nntp``, ``prospero``, ``rsync``, ``rtsp``, ``rtspu``, ``sftp``, ``shttp``, ``sip``, ``sips``, ``snews``, ``svn``, ``svn+ssh``, ``telnet``, ``wais``."
msgstr ""

msgid "The :mod:`urllib.parse` module defines the following functions:"
msgstr ""

msgid "Parse a URL into six components, returning a 6-tuple.  This corresponds to the general structure of a URL: ``scheme://netloc/path;parameters?query#fragment``. Each tuple item is a string, possibly empty. The components are not broken up in smaller parts (for example, the network location is a single string), and % escapes are not expanded. The delimiters as shown above are not part of the result, except for a leading slash in the *path* component, which is retained if present.  For example:"
msgstr ""

msgid ">>> from urllib.parse import urlparse >>> o = urlparse('http://www.cwi.nl:80/%7Eguido/Python.html') >>> o   # doctest: +NORMALIZE_WHITESPACE ParseResult(scheme='http', netloc='www.cwi.nl:80', path='/%7Eguido/Python.html',             params='', query='', fragment='') >>> o.scheme 'http' >>> o.port 80 >>> o.geturl() 'http://www.cwi.nl:80/%7Eguido/Python.html'"
msgstr ""

msgid "If the *scheme* argument is specified, it gives the default addressing scheme, to be used only if the URL does not specify one.  The default value for this argument is the empty string."
msgstr ""

msgid "If the *allow_fragments* argument is false, fragment identifiers are not allowed, even if the URL's addressing scheme normally does support them.  The default value for this argument is :const:`True`."
msgstr ""

msgid "The return value is actually an instance of a subclass of :class:`tuple`.  This class has the following additional read-only convenience attributes:"
msgstr ""

msgid "Value if not present"
msgstr ""

msgid ":attr:`scheme`"
msgstr ""

msgid "URL scheme specifier"
msgstr ""

msgid "empty string"
msgstr ""

msgid ":attr:`netloc`"
msgstr ""

msgid "Network location part"
msgstr ""

msgid ":attr:`path`"
msgstr ""

msgid "Hierarchical path"
msgstr ""

msgid ":attr:`params`"
msgstr ""

msgid "Parameters for last path element"
msgstr ""

msgid ":attr:`query`"
msgstr ""

msgid "Query component"
msgstr ""

msgid ":attr:`fragment`"
msgstr ""

msgid "Fragment identifier"
msgstr ""

msgid ":attr:`username`"
msgstr ""

msgid "User name"
msgstr ""

msgid ":attr:`password`"
msgstr ""

msgid "Password"
msgstr ""

msgid ":attr:`hostname`"
msgstr ""

msgid "Host name (lower case)"
msgstr ""

msgid ":attr:`port`"
msgstr ""

msgid "Port number as integer, if present"
msgstr ""

msgid "See section :ref:`urlparse-result-object` for more information on the result object."
msgstr ""

msgid "Parse a query string given as a string argument (data of type :mimetype:`application/x-www-form-urlencoded`).  Data are returned as a dictionary.  The dictionary keys are the unique query variable names and the values are lists of values for each name."
msgstr ""

msgid "The optional argument *keep_blank_values* is a flag indicating whether blank values in URL encoded queries should be treated as blank strings.   A true value indicates that blanks should be retained as  blank strings.  The default false value indicates that blank values are to be ignored and treated as if they were not included."
msgstr ""

msgid "The optional argument *strict_parsing* is a flag indicating what to do with parsing errors.  If false (the default), errors are silently ignored.  If true, errors raise a :exc:`ValueError` exception."
msgstr ""

msgid "Use the :func:`urllib.parse.urlencode` function to convert such dictionaries into query strings."
msgstr ""

msgid "Parse a query string given as a string argument (data of type :mimetype:`application/x-www-form-urlencoded`).  Data are returned as a list of name, value pairs."
msgstr ""

msgid "Use the :func:`urllib.parse.urlencode` function to convert such lists of pairs into query strings."
msgstr ""

msgid "Construct a URL from a tuple as returned by ``urlparse()``. The *parts* argument can be any six-item iterable. This may result in a slightly different, but equivalent URL, if the URL that was parsed originally had unnecessary delimiters (for example, a ``?`` with an empty query; the RFC states that these are equivalent)."
msgstr ""

msgid "This is similar to :func:`urlparse`, but does not split the params from the URL. This should generally be used instead of :func:`urlparse` if the more recent URL syntax allowing parameters to be applied to each segment of the *path* portion of the URL (see :rfc:`2396`) is wanted.  A separate function is needed to separate the path segments and parameters.  This function returns a 5-tuple: (addressing scheme, network location, path, query, fragment identifier)."
msgstr ""

msgid "Combine the elements of a tuple as returned by :func:`urlsplit` into a complete URL as a string. The *parts* argument can be any five-item iterable. This may result in a slightly different, but equivalent URL, if the URL that was parsed originally had unnecessary delimiters (for example, a ? with an empty query; the RFC states that these are equivalent)."
msgstr ""

msgid "Construct a full (\"absolute\") URL by combining a \"base URL\" (*base*) with another URL (*url*).  Informally, this uses components of the base URL, in particular the addressing scheme, the network location and (part of) the path, to provide missing components in the relative URL.  For example:"
msgstr ""

msgid ">>> from urllib.parse import urljoin >>> urljoin('http://www.cwi.nl/%7Eguido/Python.html', 'FAQ.html') 'http://www.cwi.nl/%7Eguido/FAQ.html'"
msgstr ""

msgid "The *allow_fragments* argument has the same meaning and default as for :func:`urlparse`."
msgstr ""

msgid "If *url* is an absolute URL (that is, starting with ``//`` or ``scheme://``), the *url*'s host name and/or scheme will be present in the result.  For example:"
msgstr ""

msgid ">>> urljoin('http://www.cwi.nl/%7Eguido/Python.html', ...         '//www.python.org/%7Eguido') 'http://www.python.org/%7Eguido'"
msgstr ""

msgid "If you do not want that behavior, preprocess the *url* with :func:`urlsplit` and :func:`urlunsplit`, removing possible *scheme* and *netloc* parts."
msgstr ""

msgid "If *url* contains a fragment identifier, return a modified version of *url* with no fragment identifier, and the fragment identifier as a separate string.  If there is no fragment identifier in *url*, return *url* unmodified and an empty string."
msgstr ""

msgid "Replace special characters in *string* using the ``%xx`` escape. Letters, digits, and the characters ``'_.-'`` are never quoted. By default, this function is intended for quoting the path section of URL. The optional *safe* parameter specifies additional ASCII characters that should not be quoted --- its default value is ``'/'``."
msgstr ""

msgid "*string* may be either a :class:`str` or a :class:`bytes`."
msgstr ""

msgid "The optional *encoding* and *errors* parameters specify how to deal with non-ASCII characters, as accepted by the :meth:`str.encode` method. *encoding* defaults to ``'utf-8'``. *errors* defaults to ``'strict'``, meaning unsupported characters raise a :class:`UnicodeEncodeError`. *encoding* and *errors* must not be supplied if *string* is a :class:`bytes`, or a :class:`TypeError` is raised."
msgstr ""

msgid "Note that ``quote(string, safe, encoding, errors)`` is equivalent to ``quote_from_bytes(string.encode(encoding, errors), safe)``."
msgstr ""

msgid "Example: ``quote('/El Niño/')`` yields ``'/El%20Ni%C3%B1o/'``."
msgstr ""

msgid "Like :func:`quote`, but also replace spaces by plus signs, as required for quoting HTML form values when building up a query string to go into a URL. Plus signs in the original string are escaped unless they are included in *safe*.  It also does not have *safe* default to ``'/'``."
msgstr ""

msgid "Example: ``quote_plus('/El Niño/')`` yields ``'%2FEl+Ni%C3%B1o%2F'``."
msgstr ""

msgid "Like :func:`quote`, but accepts a :class:`bytes` object rather than a :class:`str`, and does not perform string-to-bytes encoding."
msgstr ""

msgid "Example: ``quote_from_bytes(b'a&\\xef')`` yields ``'a%26%EF'``."
msgstr ""

msgid "Replace ``%xx`` escapes by their single-character equivalent. The optional *encoding* and *errors* parameters specify how to decode percent-encoded sequences into Unicode characters, as accepted by the :meth:`bytes.decode` method."
msgstr ""

msgid "*string* must be a :class:`str`."
msgstr ""

msgid "*encoding* defaults to ``'utf-8'``. *errors* defaults to ``'replace'``, meaning invalid sequences are replaced by a placeholder character."
msgstr ""

msgid "Example: ``unquote('/El%20Ni%C3%B1o/')`` yields ``'/El Niño/'``."
msgstr ""

msgid "Like :func:`unquote`, but also replace plus signs by spaces, as required for unquoting HTML form values."
msgstr ""

msgid "Example: ``unquote_plus('/El+Ni%C3%B1o/')`` yields ``'/El Niño/'``."
msgstr ""

msgid "Replace ``%xx`` escapes by their single-octet equivalent, and return a :class:`bytes` object."
msgstr ""

msgid "If it is a :class:`str`, unescaped non-ASCII characters in *string* are encoded into UTF-8 bytes."
msgstr ""

msgid "Example: ``unquote_to_bytes('a%26%EF')`` yields ``b'a&\\xef'``."
msgstr ""

msgid "Convert a mapping object or a sequence of two-element tuples to a \"url-encoded\" string, suitable to pass to :func:`urlopen` above as the optional *data* argument.  This is useful to pass a dictionary of form fields to a ``POST`` request.  The resulting string is a series of ``key=value`` pairs separated by ``'&'`` characters, where both *key* and *value* are quoted using :func:`quote_plus` above. When a sequence of two-element tuples is used as the *query* argument, the first element of each tuple is a key and the second is a value. The value element in itself can be a sequence and in that case, if the optional parameter *doseq* is evaluates to *True*, individual ``key=value`` pairs separated by ``'&'`` are generated for each element of the value sequence for the key.  The order of parameters in the encoded string will match the order of parameter tuples in the sequence. This module provides the functions :func:`parse_qs` and :func:`parse_qsl` which are used to parse query strings into Python data structures."
msgstr ""

msgid "This is the current standard (STD66). Any changes to urlparse module should conform to this. Certain deviations could be observed, which are mostly due backward compatiblity purposes and for certain de-facto parsing requirements as commonly observed in major browsers."
msgstr ""

msgid "This specifies the parsing requirements of IPv6 URLs."
msgstr ""

msgid "Document describing the generic syntactic requirements for both Uniform Resource Names (URNs) and Uniform Resource Locators (URLs)."
msgstr ""

msgid "Parsing requirements for mailto url schemes."
msgstr ""

msgid "This Request For Comments includes the rules for joining an absolute and a relative URL, including a fair number of \"Abnormal Examples\" which govern the treatment of border cases."
msgstr ""

msgid "This specifies the formal syntax and semantics of absolute URLs."
msgstr ""

msgid "Results of :func:`urlparse` and :func:`urlsplit`"
msgstr ""

msgid "The result objects from the :func:`urlparse` and :func:`urlsplit` functions are subclasses of the :class:`tuple` type.  These subclasses add the attributes described in those functions, as well as provide an additional method:"
msgstr ""

msgid "Return the re-combined version of the original URL as a string. This may differ from the original URL in that the scheme will always be normalized to lower case and empty components may be dropped. Specifically, empty parameters, queries, and fragment identifiers will be removed."
msgstr ""

msgid "The result of this method is a fixpoint if passed back through the original parsing function:"
msgstr ""

msgid ">>> import urllib.parse >>> url = 'HTTP://www.Python.org/doc/#'"
msgstr ""

msgid ">>> r1 = urllib.parse.urlsplit(url) >>> r1.geturl() 'http://www.Python.org/doc/'"
msgstr ""

msgid ">>> r2 = urllib.parse.urlsplit(r1.geturl()) >>> r2.geturl() 'http://www.Python.org/doc/'"
msgstr ""

msgid "The following classes provide the implementations of the parse results:"
msgstr ""

msgid "Base class for the concrete result classes.  This provides most of the attribute definitions.  It does not provide a :meth:`geturl` method.  It is derived from :class:`tuple`, but does not override the :meth:`__init__` or :meth:`__new__` methods."
msgstr ""

msgid "Concrete class for :func:`urlparse` results.  The :meth:`__new__` method is overridden to support checking that the right number of arguments are passed."
msgstr ""

msgid "Concrete class for :func:`urlsplit` results.  The :meth:`__new__` method is overridden to support checking that the right number of arguments are passed."
msgstr ""

msgid ":mod:`urllib.request` --- extensible library for opening URLs"
msgstr ""

msgid "The :mod:`urllib.request` module defines functions and classes which help in opening URLs (mostly HTTP) in a complex world --- basic and digest authentication, redirections, cookies and more."
msgstr ""

msgid "The :mod:`urllib.request` module defines the following functions:"
msgstr ""

msgid "Open the URL *url*, which can be either a string or a :class:`Request` object."
msgstr ""

msgid "*data* may be a string specifying additional data to send to the server, or ``None`` if no such data is needed.  Currently HTTP requests are the only ones that use *data*; the HTTP request will be a POST instead of a GET when the *data* parameter is provided. *data* should be a buffer in the standard :mimetype:`application/x-www-form-urlencoded` format.  The :func:`urllib.parse.urlencode` function takes a mapping or sequence of 2-tuples and returns a string in this format."
msgstr ""

msgid "The optional *timeout* parameter specifies a timeout in seconds for blocking operations like the connection attempt (if not specified, the global default timeout setting will be used).  This actually only works for HTTP, HTTPS, FTP and FTPS connections."
msgstr ""

msgid "This function returns a file-like object with two additional methods from the :mod:`urllib.response` module"
msgstr ""

msgid ":meth:`geturl` --- return the URL of the resource retrieved, commonly used to determine if a redirect was followed"
msgstr ""

msgid ":meth:`info` --- return the meta-information of the page, such as headers, in the form of an :func:`email.message_from_string` instance (see `Quick Reference to HTTP Headers <http://www.cs.tut.fi/~jkorpela/http.html>`_)"
msgstr ""

msgid "Raises :exc:`URLError` on errors."
msgstr ""

msgid "Note that ``None`` may be returned if no handler handles the request (though the default installed global :class:`OpenerDirector` uses :class:`UnknownHandler` to ensure this never happens)."
msgstr ""

msgid "In addition, default installed :class:`ProxyHandler` makes sure the requests are handled through the proxy when they are set."
msgstr ""

msgid "The legacy ``urllib.urlopen`` function from Python 2.6 and earlier has been discontinued; :func:`urlopen` corresponds to the old ``urllib2.urlopen``. Proxy handling, which was done by passing a dictionary parameter to ``urllib.urlopen``, can be obtained by using :class:`ProxyHandler` objects."
msgstr ""

msgid "Install an :class:`OpenerDirector` instance as the default global opener. Installing an opener is only necessary if you want urlopen to use that opener; otherwise, simply call :meth:`OpenerDirector.open` instead of :func:`urlopen`. The code does not check for a real :class:`OpenerDirector`, and any class with the appropriate interface will work."
msgstr ""

msgid "Return an :class:`OpenerDirector` instance, which chains the handlers in the order given. *handler*\\s can be either instances of :class:`BaseHandler`, or subclasses of :class:`BaseHandler` (in which case it must be possible to call the constructor without any parameters).  Instances of the following classes will be in front of the *handler*\\s, unless the *handler*\\s contain them, instances of them or subclasses of them: :class:`ProxyHandler`, :class:`UnknownHandler`, :class:`HTTPHandler`, :class:`HTTPDefaultErrorHandler`, :class:`HTTPRedirectHandler`, :class:`FTPHandler`, :class:`FileHandler`, :class:`HTTPErrorProcessor`."
msgstr ""

msgid "If the Python installation has SSL support (i.e., if the :mod:`ssl` module can be imported), :class:`HTTPSHandler` will also be added."
msgstr ""

msgid "A :class:`BaseHandler` subclass may also change its :attr:`handler_order` member variable to modify its position in the handlers list."
msgstr ""

msgid "Copy a network object denoted by a URL to a local file, if necessary. If the URL points to a local file, or a valid cached copy of the object exists, the object is not copied.  Return a tuple ``(filename, headers)`` where *filename* is the local file name under which the object can be found, and *headers* is whatever the :meth:`info` method of the object returned by :func:`urlopen` returned (for a remote object, possibly cached). Exceptions are the same as for :func:`urlopen`."
msgstr ""

msgid "The second argument, if present, specifies the file location to copy to (if absent, the location will be a tempfile with a generated name). The third argument, if present, is a hook function that will be called once on establishment of the network connection and once after each block read thereafter.  The hook will be passed three arguments; a count of blocks transferred so far, a block size in bytes, and the total size of the file.  The third argument may be ``-1`` on older FTP servers which do not return a file size in response to a retrieval request."
msgstr ""

msgid "If the *url* uses the :file:`http:` scheme identifier, the optional *data* argument may be given to specify a ``POST`` request (normally the request type is ``GET``).  The *data* argument must in standard :mimetype:`application/x-www-form-urlencoded` format; see the :func:`urlencode` function below."
msgstr ""

msgid ":func:`urlretrieve` will raise :exc:`ContentTooShortError` when it detects that the amount of data available  was less than the expected amount (which is the size reported by a  *Content-Length* header). This can occur, for example, when the  download is interrupted."
msgstr ""

msgid "The *Content-Length* is treated as a lower bound: if there's more data  to read, urlretrieve reads more data, but if less data is available,  it raises the exception."
msgstr ""

msgid "You can still retrieve the downloaded data in this case, it is stored  in the :attr:`content` attribute of the exception instance."
msgstr ""

msgid "If no *Content-Length* header was supplied, urlretrieve can not check the size of the data it has downloaded, and just returns it.  In this case you just have to assume that the download was successful."
msgstr ""

msgid "Clear the cache that may have been built up by previous calls to :func:`urlretrieve`."
msgstr ""

msgid "Convert the pathname *path* from the local syntax for a path to the form used in the path component of a URL.  This does not produce a complete URL.  The return value will already be quoted using the :func:`quote` function."
msgstr ""

msgid "Convert the path component *path* from an encoded URL to the local syntax for a path.  This does not accept a complete URL.  This function uses :func:`unquote` to decode *path*."
msgstr ""

msgid "This helper function returns a dictionary of scheme to proxy server URL mappings. It scans the environment for variables named ``<scheme>_proxy`` for all operating systems first, and when it cannot find it, looks for proxy information from Mac OSX System Configuration for Mac OS X and Windows Systems Registry for Windows."
msgstr ""

msgid "This class is an abstraction of a URL request."
msgstr ""

msgid "*url* should be a string containing a valid URL."
msgstr ""

msgid "*headers* should be a dictionary, and will be treated as if :meth:`add_header` was called with each key and value as arguments. This is often used to \"spoof\" the ``User-Agent`` header, which is used by a browser to identify itself -- some HTTP servers only allow requests coming from common browsers as opposed to scripts. For example, Mozilla Firefox may identify itself as ``\"Mozilla/5.0 (X11; U; Linux i686) Gecko/20071127 Firefox/2.0.0.11\"``, while :mod:`urllib`'s default user agent string is ``\"Python-urllib/2.6\"`` (on Python 2.6)."
msgstr ""

msgid "The final two arguments are only of interest for correct handling of third-party HTTP cookies:"
msgstr ""

msgid "*origin_req_host* should be the request-host of the origin transaction, as defined by :rfc:`2965`.  It defaults to ``http.cookiejar.request_host(self)``.  This is the host name or IP address of the original request that was initiated by the user. For example, if the request is for an image in an HTML document, this should be the request-host of the request for the page containing the image."
msgstr ""

msgid "*unverifiable* should indicate whether the request is unverifiable, as defined by RFC 2965.  It defaults to False.  An unverifiable request is one whose URL the user did not have the option to approve.  For example, if the request is for an image in an HTML document, and the user had no option to approve the automatic fetching of the image, this should be true."
msgstr ""

msgid "Base class for opening and reading URLs.  Unless you need to support opening objects using schemes other than :file:`http:`, :file:`ftp:`, or :file:`file:`, you probably want to use :class:`FancyURLopener`."
msgstr ""

msgid "By default, the :class:`URLopener` class sends a :mailheader:`User-Agent` header of ``urllib/VVV``, where *VVV* is the :mod:`urllib` version number. Applications can define their own :mailheader:`User-Agent` header by subclassing :class:`URLopener` or :class:`FancyURLopener` and setting the class attribute :attr:`version` to an appropriate string value in the subclass definition."
msgstr ""

msgid "The optional *proxies* parameter should be a dictionary mapping scheme names to proxy URLs, where an empty dictionary turns proxies off completely.  Its default value is ``None``, in which case environmental proxy settings will be used if present, as discussed in the definition of :func:`urlopen`, above."
msgstr ""

msgid "Additional keyword parameters, collected in *x509*, may be used for authentication of the client when using the :file:`https:` scheme.  The keywords *key_file* and *cert_file* are supported to provide an  SSL key and certificate; both are needed to support client authentication."
msgstr ""

msgid ":class:`URLopener` objects will raise an :exc:`IOError` exception if the server returns an error code."
msgstr ""

msgid "Open *fullurl* using the appropriate protocol.  This method sets up cache and proxy information, then calls the appropriate open method with its input arguments.  If the scheme is not recognized, :meth:`open_unknown` is called. The *data* argument has the same meaning as the *data* argument of :func:`urlopen`."
msgstr ""

msgid "Overridable interface to open unknown URL types."
msgstr ""

msgid "Retrieves the contents of *url* and places it in *filename*.  The return value is a tuple consisting of a local filename and either a :class:`email.message.Message` object containing the response headers (for remote URLs) or ``None`` (for local URLs).  The caller must then open and read the contents of *filename*.  If *filename* is not given and the URL refers to a local file, the input filename is returned.  If the URL is non-local and *filename* is not given, the filename is the output of :func:`tempfile.mktemp` with a suffix that matches the suffix of the last path component of the input URL.  If *reporthook* is given, it must be a function accepting three numeric parameters.  It will be called after each chunk of data is read from the network.  *reporthook* is ignored for local URLs."
msgstr ""

msgid "Variable that specifies the user agent of the opener object.  To get :mod:`urllib` to tell servers that it is a particular user agent, set this in a subclass as a class variable or in the constructor before calling the base constructor."
msgstr ""

msgid ":class:`FancyURLopener` subclasses :class:`URLopener` providing default handling for the following HTTP response codes: 301, 302, 303, 307 and 401.  For the 30x response codes listed above, the :mailheader:`Location` header is used to fetch the actual URL.  For 401 response codes (authentication required), basic HTTP authentication is performed.  For the 30x response codes, recursion is bounded by the value of the *maxtries* attribute, which defaults to 10."
msgstr ""

msgid "For all other response codes, the method :meth:`http_error_default` is called which you can override in subclasses to handle the error appropriately."
msgstr ""

msgid "According to the letter of :rfc:`2616`, 301 and 302 responses to POST requests must not be automatically redirected without confirmation by the user.  In reality, browsers do allow automatic redirection of these responses, changing the POST to a GET, and :mod:`urllib` reproduces this behaviour."
msgstr ""

msgid "The parameters to the constructor are the same as those for :class:`URLopener`."
msgstr ""

msgid "When performing basic authentication, a :class:`FancyURLopener` instance calls its :meth:`prompt_user_passwd` method.  The default implementation asks the users for the required information on the controlling terminal.  A subclass may override this method to support more appropriate behavior if needed."
msgstr ""

msgid "The :class:`FancyURLopener` class offers one additional method that should be overloaded to provide the appropriate behavior:"
msgstr ""

msgid "Return information needed to authenticate the user at the given host in the specified security realm.  The return value should be a tuple, ``(user, password)``, which can be used for basic authentication."
msgstr ""

msgid "The implementation prompts for this information on the terminal; an application should override this method to use an appropriate interaction model in the local environment."
msgstr ""

msgid "The :class:`OpenerDirector` class opens URLs via :class:`BaseHandler`\\ s chained together. It manages the chaining of handlers, and recovery from errors."
msgstr ""

msgid "This is the base class for all registered handlers --- and handles only the simple mechanics of registration."
msgstr ""

msgid "A class which defines a default handler for HTTP error responses; all responses are turned into :exc:`HTTPError` exceptions."
msgstr ""

msgid "A class to handle redirections."
msgstr ""

msgid "A class to handle HTTP Cookies."
msgstr ""

msgid "Cause requests to go through a proxy. If *proxies* is given, it must be a dictionary mapping protocol names to URLs of proxies. The default is to read the list of proxies from the environment variables :envvar:`<protocol>_proxy`. If no proxy environment variables are set, in a Windows environment, proxy settings are obtained from the registry's Internet Settings section and in a Mac OS X environment, proxy information is retrieved from the OS X System Configuration Framework."
msgstr ""

msgid "To disable autodetected proxy pass an empty dictionary."
msgstr ""

msgid "Keep a database of  ``(realm, uri) -> (user, password)`` mappings."
msgstr ""

msgid "Keep a database of  ``(realm, uri) -> (user, password)`` mappings. A realm of ``None`` is considered a catch-all realm, which is searched if no other realm fits."
msgstr ""

msgid "This is a mixin class that helps with HTTP authentication, both to the remote host and to a proxy. *password_mgr*, if given, should be something that is compatible with :class:`HTTPPasswordMgr`; refer to section :ref:`http-password-mgr` for information on the interface that must be supported."
msgstr ""

msgid "Handle authentication with the remote host. *password_mgr*, if given, should be something that is compatible with :class:`HTTPPasswordMgr`; refer to section :ref:`http-password-mgr` for information on the interface that must be supported."
msgstr ""

msgid "Handle authentication with the proxy. *password_mgr*, if given, should be something that is compatible with :class:`HTTPPasswordMgr`; refer to section :ref:`http-password-mgr` for information on the interface that must be supported."
msgstr ""

msgid "A class to handle opening of HTTP URLs."
msgstr ""

msgid "A class to handle opening of HTTPS URLs."
msgstr ""

msgid "Open local files."
msgstr ""

msgid "Open FTP URLs."
msgstr ""

msgid "Open FTP URLs, keeping a cache of open FTP connections to minimize delays."
msgstr ""

msgid "A catch-all class to handle unknown URLs."
msgstr ""

msgid "Request Objects"
msgstr ""

msgid "The following methods describe :class:`Request`'s public interface, and so all may be overridden in subclasses.  It also defines several public attributes that can be used by clients to inspect the parsed request."
msgstr ""

msgid "The original URL passed to the constructor."
msgstr ""

msgid "The URI scheme."
msgstr ""

msgid "The URI authority, typically a host, but may also contain a port separated by a colon."
msgstr ""

msgid "The original host for the request, without port."
msgstr ""

msgid "The URI path.  If the :class:`Request` uses a proxy, then selector will be the full url that is passed to the proxy."
msgstr ""

msgid "The entity body for the request, or None if not specified."
msgstr ""

msgid "boolean, indicates whether the request is unverifiable as defined by RFC 2965."
msgstr ""

msgid "Set the :class:`Request` data to *data*.  This is ignored by all handlers except HTTP handlers --- and there it should be a byte string, and will change the request to be ``POST`` rather than ``GET``."
msgstr ""

msgid "Return a string indicating the HTTP request method.  This is only meaningful for HTTP requests, and currently always returns ``'GET'`` or ``'POST'``."
msgstr ""

msgid "Return whether the instance has a non-\\ ``None`` data."
msgstr ""

msgid "Return the instance's data."
msgstr ""

msgid "Add another header to the request.  Headers are currently ignored by all handlers except HTTP handlers, where they are added to the list of headers sent to the server.  Note that there cannot be more than one header with the same name, and later calls will overwrite previous calls in case the *key* collides. Currently, this is no loss of HTTP functionality, since all headers which have meaning when used more than once have a (header-specific) way of gaining the same functionality using only one header."
msgstr ""

msgid "Add a header that will not be added to a redirected request."
msgstr ""

msgid "Return whether the instance has the named header (checks both regular and unredirected)."
msgstr ""

msgid "Return the URL given in the constructor."
msgstr ""

msgid "Return the type of the URL --- also known as the scheme."
msgstr ""

msgid "Return the host to which a connection will be made."
msgstr ""

msgid "Return the selector --- the part of the URL that is sent to the server."
msgstr ""

msgid "Prepare the request by connecting to a proxy server. The *host* and *type* will replace those of the instance, and the instance's selector will be the original URL given in the constructor."
msgstr ""

msgid "Return the request-host of the origin transaction, as defined by :rfc:`2965`. See the documentation for the :class:`Request` constructor."
msgstr ""

msgid "Return whether the request is unverifiable, as defined by RFC 2965. See the documentation for the :class:`Request` constructor."
msgstr ""

msgid "OpenerDirector Objects"
msgstr ""

msgid ":class:`OpenerDirector` instances have the following methods:"
msgstr ""

msgid "*handler* should be an instance of :class:`BaseHandler`.  The following methods are searched, and added to the possible chains (note that HTTP errors are a special case)."
msgstr ""

msgid ":meth:`protocol_open` --- signal that the handler knows how to open *protocol* URLs."
msgstr ""

msgid ":meth:`http_error_type` --- signal that the handler knows how to handle HTTP errors with HTTP error code *type*."
msgstr ""

msgid ":meth:`protocol_error` --- signal that the handler knows how to handle errors from (non-\\ ``http``) *protocol*."
msgstr ""

msgid ":meth:`protocol_request` --- signal that the handler knows how to pre-process *protocol* requests."
msgstr ""

msgid ":meth:`protocol_response` --- signal that the handler knows how to post-process *protocol* responses."
msgstr ""

msgid "Open the given *url* (which can be a request object or a string), optionally passing the given *data*. Arguments, return values and exceptions raised are the same as those of :func:`urlopen` (which simply calls the :meth:`open` method on the currently installed global :class:`OpenerDirector`).  The optional *timeout* parameter specifies a timeout in seconds for blocking operations like the connection attempt (if not specified, the global default timeout setting will be used). The timeout feature actually works only for HTTP, HTTPS, FTP and FTPS connections)."
msgstr ""

msgid "Handle an error of the given protocol.  This will call the registered error handlers for the given protocol with the given arguments (which are protocol specific).  The HTTP protocol is a special case which uses the HTTP response code to determine the specific error handler; refer to the :meth:`http_error_\\*` methods of the handler classes."
msgstr ""

msgid "Return values and exceptions raised are the same as those of :func:`urlopen`."
msgstr ""

msgid "OpenerDirector objects open URLs in three stages:"
msgstr ""

msgid "The order in which these methods are called within each stage is determined by sorting the handler instances."
msgstr ""

msgid "Every handler with a method named like :meth:`protocol_request` has that method called to pre-process the request."
msgstr ""

msgid "Handlers with a method named like :meth:`protocol_open` are called to handle the request. This stage ends when a handler either returns a non-\\ :const:`None` value (ie. a response), or raises an exception (usually :exc:`URLError`). Exceptions are allowed to propagate."
msgstr ""

msgid "In fact, the above algorithm is first tried for methods named :meth:`default_open`.  If all such methods return :const:`None`, the algorithm is repeated for methods named like :meth:`protocol_open`.  If all such methods return :const:`None`, the algorithm is repeated for methods named :meth:`unknown_open`."
msgstr ""

msgid "Note that the implementation of these methods may involve calls of the parent :class:`OpenerDirector` instance's :meth:`.open` and :meth:`.error` methods."
msgstr ""

msgid "Every handler with a method named like :meth:`protocol_response` has that method called to post-process the response."
msgstr ""

msgid "BaseHandler Objects"
msgstr ""

msgid ":class:`BaseHandler` objects provide a couple of methods that are directly useful, and others that are meant to be used by derived classes.  These are intended for direct use:"
msgstr ""

msgid "Add a director as parent."
msgstr ""

msgid "Remove any parents."
msgstr ""

msgid "The following members and methods should only be used by classes derived from :class:`BaseHandler`."
msgstr ""

msgid "The convention has been adopted that subclasses defining :meth:`protocol_request` or :meth:`protocol_response` methods are named :class:`\\*Processor`; all others are named :class:`\\*Handler`."
msgstr ""

msgid "A valid :class:`OpenerDirector`, which can be used to open using a different protocol, or handle errors."
msgstr ""

msgid "This method is *not* defined in :class:`BaseHandler`, but subclasses should define it if they want to catch all URLs."
msgstr ""

msgid "This method, if implemented, will be called by the parent :class:`OpenerDirector`.  It should return a file-like object as described in the return value of the :meth:`open` of :class:`OpenerDirector`, or ``None``. It should raise :exc:`URLError`, unless a truly exceptional thing happens (for example, :exc:`MemoryError` should not be mapped to :exc:`URLError`)."
msgstr ""

msgid "This method will be called before any protocol-specific open method."
msgstr ""

msgid "This method is *not* defined in :class:`BaseHandler`, but subclasses should define it if they want to handle URLs with the given protocol."
msgstr ""

msgid "This method, if defined, will be called by the parent :class:`OpenerDirector`. Return values should be the same as for  :meth:`default_open`."
msgstr ""

msgid "This method is *not* defined in :class:`BaseHandler`, but subclasses should define it if they want to catch all URLs with no specific registered handler to open it."
msgstr ""

msgid "This method, if implemented, will be called by the :attr:`parent` :class:`OpenerDirector`.  Return values should be the same as for :meth:`default_open`."
msgstr ""

msgid "This method is *not* defined in :class:`BaseHandler`, but subclasses should override it if they intend to provide a catch-all for otherwise unhandled HTTP errors.  It will be called automatically by the  :class:`OpenerDirector` getting the error, and should not normally be called in other circumstances."
msgstr ""

msgid "*req* will be a :class:`Request` object, *fp* will be a file-like object with the HTTP error body, *code* will be the three-digit code of the error, *msg* will be the user-visible explanation of the code and *hdrs* will be a mapping object with the headers of the error."
msgstr ""

msgid "Return values and exceptions raised should be the same as those of :func:`urlopen`."
msgstr ""

msgid "*nnn* should be a three-digit HTTP error code.  This method is also not defined in :class:`BaseHandler`, but will be called, if it exists, on an instance of a subclass, when an HTTP error with code *nnn* occurs."
msgstr ""

msgid "Subclasses should override this method to handle specific HTTP errors."
msgstr ""

msgid "Arguments, return values and exceptions raised should be the same as for :meth:`http_error_default`."
msgstr ""

msgid "This method is *not* defined in :class:`BaseHandler`, but subclasses should define it if they want to pre-process requests of the given protocol."
msgstr ""

msgid "This method, if defined, will be called by the parent :class:`OpenerDirector`. *req* will be a :class:`Request` object. The return value should be a :class:`Request` object."
msgstr ""

msgid "This method is *not* defined in :class:`BaseHandler`, but subclasses should define it if they want to post-process responses of the given protocol."
msgstr ""

msgid "This method, if defined, will be called by the parent :class:`OpenerDirector`. *req* will be a :class:`Request` object. *response* will be an object implementing the same interface as the return value of :func:`urlopen`.  The return value should implement the same interface as the return value of :func:`urlopen`."
msgstr ""

msgid "HTTPRedirectHandler Objects"
msgstr ""

msgid "Some HTTP redirections require action from this module's client code.  If this is the case, :exc:`HTTPError` is raised.  See :rfc:`2616` for details of the precise meanings of the various redirection codes."
msgstr ""

msgid "Return a :class:`Request` or ``None`` in response to a redirect. This is called by the default implementations of the :meth:`http_error_30\\*` methods when a redirection is received from the server.  If a redirection should take place, return a new :class:`Request` to allow :meth:`http_error_30\\*` to perform the redirect to *newurl*.  Otherwise, raise :exc:`HTTPError` if no other handler should try to handle this URL, or return ``None`` if you can't but another handler might."
msgstr ""

msgid "The default implementation of this method does not strictly follow :rfc:`2616`, which says that 301 and 302 responses to ``POST`` requests must not be automatically redirected without confirmation by the user.  In reality, browsers do allow automatic redirection of these responses, changing the POST to a ``GET``, and the default implementation reproduces this behavior."
msgstr ""

msgid "Redirect to the ``Location:`` or ``URI:`` URL.  This method is called by the parent :class:`OpenerDirector` when getting an HTTP 'moved permanently' response."
msgstr ""

msgid "The same as :meth:`http_error_301`, but called for the 'found' response."
msgstr ""

msgid "The same as :meth:`http_error_301`, but called for the 'see other' response."
msgstr ""

msgid "The same as :meth:`http_error_301`, but called for the 'temporary redirect' response."
msgstr ""

msgid "HTTPCookieProcessor Objects"
msgstr ""

msgid ":class:`HTTPCookieProcessor` instances have one attribute:"
msgstr ""

msgid "The :class:`http.cookiejar.CookieJar` in which cookies are stored."
msgstr ""

msgid "ProxyHandler Objects"
msgstr ""

msgid "The :class:`ProxyHandler` will have a method :meth:`protocol_open` for every *protocol* which has a proxy in the *proxies* dictionary given in the constructor.  The method will modify requests to go through the proxy, by calling ``request.set_proxy()``, and call the next handler in the chain to actually execute the protocol."
msgstr ""

msgid "HTTPPasswordMgr Objects"
msgstr ""

msgid "These methods are available on :class:`HTTPPasswordMgr` and :class:`HTTPPasswordMgrWithDefaultRealm` objects."
msgstr ""

msgid "*uri* can be either a single URI, or a sequence of URIs. *realm*, *user* and *passwd* must be strings. This causes ``(user, passwd)`` to be used as authentication tokens when authentication for *realm* and a super-URI of any of the given URIs is given."
msgstr ""

msgid "Get user/password for given realm and URI, if any.  This method will return ``(None, None)`` if there is no matching user/password."
msgstr ""

msgid "For :class:`HTTPPasswordMgrWithDefaultRealm` objects, the realm ``None`` will be searched if the given *realm* has no matching user/password."
msgstr ""

msgid "AbstractBasicAuthHandler Objects"
msgstr ""

msgid "Handle an authentication request by getting a user/password pair, and re-trying the request.  *authreq* should be the name of the header where the information about the realm is included in the request, *host* specifies the URL and path to authenticate for, *req* should be the (failed) :class:`Request` object, and *headers* should be the error headers."
msgstr ""

msgid "*host* is either an authority (e.g. ``\"python.org\"``) or a URL containing an authority component (e.g. ``\"http://python.org/\"``). In either case, the authority must not contain a userinfo component (so, ``\"python.org\"`` and ``\"python.org:80\"`` are fine, ``\"joe:password@python.org\"`` is not)."
msgstr ""

msgid "HTTPBasicAuthHandler Objects"
msgstr ""

msgid "Retry the request with authentication information, if available."
msgstr ""

msgid "ProxyBasicAuthHandler Objects"
msgstr ""

msgid "AbstractDigestAuthHandler Objects"
msgstr ""

msgid "*authreq* should be the name of the header where the information about the realm is included in the request, *host* should be the host to authenticate to, *req* should be the (failed) :class:`Request` object, and *headers* should be the error headers."
msgstr ""

msgid "HTTPDigestAuthHandler Objects"
msgstr ""

msgid "ProxyDigestAuthHandler Objects"
msgstr ""

msgid "HTTPHandler Objects"
msgstr ""

msgid "Send an HTTP request, which can be either GET or POST, depending on ``req.has_data()``."
msgstr ""

msgid "HTTPSHandler Objects"
msgstr ""

msgid "Send an HTTPS request, which can be either GET or POST, depending on ``req.has_data()``."
msgstr ""

msgid "FileHandler Objects"
msgstr ""

msgid "Open the file locally, if there is no host name, or the host name is ``'localhost'``. Change the protocol to ``ftp`` otherwise, and retry opening it using :attr:`parent`."
msgstr ""

msgid "FTPHandler Objects"
msgstr ""

msgid "Open the FTP file indicated by *req*. The login is always done with empty username and password."
msgstr ""

msgid "CacheFTPHandler Objects"
msgstr ""

msgid ":class:`CacheFTPHandler` objects are :class:`FTPHandler` objects with the following additional methods:"
msgstr ""

msgid "Set timeout of connections to *t* seconds."
msgstr ""

msgid "Set maximum number of cached connections to *m*."
msgstr ""

msgid "UnknownHandler Objects"
msgstr ""

msgid "Raise a :exc:`URLError` exception."
msgstr ""

msgid "HTTPErrorProcessor Objects"
msgstr ""

msgid "Process HTTP error responses."
msgstr ""

msgid "For 200 error codes, the response object is returned immediately."
msgstr ""

msgid "For non-200 error codes, this simply passes the job on to the :meth:`protocol_error_code` handler methods, via :meth:`OpenerDirector.error`. Eventually, :class:`HTTPDefaultErrorHandler` will raise an :exc:`HTTPError` if no other handler handles the error."
msgstr ""

msgid "This example gets the python.org main page and displays the first 300 bytes of it. ::"
msgstr ""

msgid ">>> import urllib.request >>> f = urllib.request.urlopen('http://www.python.org/') >>> print(f.read(300)) b'<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\\n\\n\\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\\n\\n<head>\\n <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\\n <title>Python Programming '"
msgstr ""

msgid "Note that urlopen returns a bytes object.  This is because there is no way for urlopen to automatically determine the encoding of the byte stream it receives from the http server. In general, a program will decode the returned bytes object to string once it determines or guesses the appropriate encoding."
msgstr ""

msgid "The following W3C document, http://www.w3.org/International/O-charset  , lists the various ways in which a (X)HTML or a XML document could have specified its encoding information."
msgstr ""

msgid "As python.org website uses *utf-8* encoding as specified in it's meta tag, we will use same for decoding the bytes object. ::"
msgstr ""

msgid ">>> import urllib.request >>> f = urllib.request.urlopen('http://www.python.org/') >>> print(f.read(100).decode('utf-8')) <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtm"
msgstr ""

msgid "In the following example, we are sending a data-stream to the stdin of a CGI and reading the data it returns to us. Note that this example will only work when the Python installation supports SSL. ::"
msgstr ""

msgid ">>> import urllib.request >>> req = urllib.request.Request(url='https://localhost/cgi-bin/test.cgi', ...                       data='This data is passed to stdin of the CGI') >>> f = urllib.request.urlopen(req) >>> print(f.read().decode('utf-8')) Got Data: \"This data is passed to stdin of the CGI\""
msgstr ""

msgid "The code for the sample CGI used in the above example is::"
msgstr ""

msgid "#!/usr/bin/env python import sys data = sys.stdin.read() print('Content-type: text-plain\\n\\nGot Data: \"%s\"' % data)"
msgstr ""

msgid "Use of Basic HTTP Authentication::"
msgstr ""

msgid "import urllib.request # Create an OpenerDirector with support for Basic HTTP Authentication... auth_handler = urllib.request.HTTPBasicAuthHandler() auth_handler.add_password(realm='PDQ Application',                           uri='https://mahler:8092/site-updates.py',                           user='klem',                           passwd='kadidd!ehopper') opener = urllib.request.build_opener(auth_handler) # ...and install it globally so it can be used with urlopen. urllib.request.install_opener(opener) urllib.request.urlopen('http://www.example.com/login.html')"
msgstr ""

msgid ":func:`build_opener` provides many handlers by default, including a :class:`ProxyHandler`.  By default, :class:`ProxyHandler` uses the environment variables named ``<scheme>_proxy``, where ``<scheme>`` is the URL scheme involved.  For example, the :envvar:`http_proxy` environment variable is read to obtain the HTTP proxy's URL."
msgstr ""

msgid "This example replaces the default :class:`ProxyHandler` with one that uses programmatically-supplied proxy URLs, and adds proxy authorization support with :class:`ProxyBasicAuthHandler`. ::"
msgstr ""

msgid "proxy_handler = urllib.request.ProxyHandler({'http': 'http://www.example.com:3128/'}) proxy_auth_handler = urllib.request.ProxyBasicAuthHandler() proxy_auth_handler.add_password('realm', 'host', 'username', 'password')  opener = urllib.request.build_opener(proxy_handler, proxy_auth_handler) # This time, rather than install the OpenerDirector, we use it directly: opener.open('http://www.example.com/login.html')"
msgstr ""

msgid "Adding HTTP headers:"
msgstr ""

msgid "Use the *headers* argument to the :class:`Request` constructor, or::"
msgstr ""

msgid "import urllib.request req = urllib.request.Request('http://www.example.com/') req.add_header('Referer', 'http://www.python.org/') r = urllib.request.urlopen(req)"
msgstr ""

msgid ":class:`OpenerDirector` automatically adds a :mailheader:`User-Agent` header to every :class:`Request`.  To change this::"
msgstr ""

msgid "import urllib.request opener = urllib.request.build_opener() opener.addheaders = [('User-agent', 'Mozilla/5.0')] opener.open('http://www.example.com/')"
msgstr ""

msgid "Also, remember that a few standard headers (:mailheader:`Content-Length`, :mailheader:`Content-Type` and :mailheader:`Host`) are added when the :class:`Request` is passed to :func:`urlopen` (or :meth:`OpenerDirector.open`)."
msgstr ""

msgid "Here is an example session that uses the ``GET`` method to retrieve a URL containing parameters::"
msgstr ""

msgid ">>> import urllib.request >>> import urllib.parse >>> params = urllib.parse.urlencode({'spam': 1, 'eggs': 2, 'bacon': 0}) >>> f = urllib.request.urlopen(\"http://www.musi-cal.com/cgi-bin/query?%s\" % params) >>> print(f.read().decode('utf-8'))"
msgstr ""

msgid "The following example uses the ``POST`` method instead::"
msgstr ""

msgid ">>> import urllib.request >>> import urllib.parse >>> params = urllib.parse.urlencode({'spam': 1, 'eggs': 2, 'bacon': 0}) >>> f = urllib.request.urlopen(\"http://www.musi-cal.com/cgi-bin/query\", params) >>> print(f.read().decode('utf-8'))"
msgstr ""

msgid "The following example uses an explicitly specified HTTP proxy, overriding environment settings::"
msgstr ""

msgid ">>> import urllib.request >>> proxies = {'http': 'http://proxy.example.com:8080/'} >>> opener = urllib.request.FancyURLopener(proxies) >>> f = opener.open(\"http://www.python.org\") >>> f.read().decode('utf-8')"
msgstr ""

msgid "The following example uses no proxies at all, overriding environment settings::"
msgstr ""

msgid ">>> import urllib.request >>> opener = urllib.request.FancyURLopener({}) >>> f = opener.open(\"http://www.python.org/\") >>> f.read().decode('utf-8')"
msgstr ""

msgid ":mod:`urllib.request` Restrictions"
msgstr ""

msgid "Currently, only the following protocols are supported: HTTP, (versions 0.9 and 1.0),  FTP, and local files."
msgstr ""

msgid "The caching feature of :func:`urlretrieve` has been disabled until I find the time to hack proper processing of Expiration time headers."
msgstr ""

msgid "There should be a function to query whether a particular URL is in the cache."
msgstr ""

msgid "For backward compatibility, if a URL appears to point to a local file but the file can't be opened, the URL is re-interpreted using the FTP protocol.  This can sometimes cause confusing error messages."
msgstr ""

msgid "The :func:`urlopen` and :func:`urlretrieve` functions can cause arbitrarily long delays while waiting for a network connection to be set up.  This means that it is difficult to build an interactive Web client using these functions without using threads."
msgstr ""

msgid "The data returned by :func:`urlopen` or :func:`urlretrieve` is the raw data returned by the server.  This may be binary data (such as an image), plain text or (for example) HTML.  The HTTP protocol provides type information in the reply header, which can be inspected by looking at the :mailheader:`Content-Type` header.  If the returned data is HTML, you can use the module :mod:`html.parser` to parse it."
msgstr ""

msgid "The code handling the FTP protocol cannot differentiate between a file and a directory.  This can lead to unexpected behavior when attempting to read a URL that points to a file that is not accessible.  If the URL ends in a ``/``, it is assumed to refer to a directory and will be handled accordingly.  But if an attempt to read a file leads to a 550 error (meaning the URL cannot be found or is not accessible, often for permission reasons), then the path is treated as a directory in order to handle the case when a directory is specified by a URL but the trailing ``/`` has been left off.  This can cause misleading results when you try to fetch a file whose read permissions make it inaccessible; the FTP code will try to read it, fail with a 550 error, and then perform a directory listing for the unreadable file. If fine-grained control is needed, consider using the :mod:`ftplib` module, subclassing :class:`FancyURLOpener`, or changing *_urlopener* to meet your needs."
msgstr ""

msgid ":mod:`urllib.response` --- Response classes used by urllib."
msgstr ""

msgid "The :mod:`urllib.response` module defines functions and classes which define a minimal file like interface, including ``read()`` and ``readline()``. The typical response object is an addinfourl instance, which defines and ``info()`` method and that returns headers and a ``geturl()`` method that returns the url. Functions defined by this module are used internally by the :mod:`urllib.request` module."
msgstr ""

msgid ":mod:`urllib.robotparser` ---  Parser for robots.txt"
msgstr ""

msgid "This module provides a single class, :class:`RobotFileParser`, which answers questions about whether or not a particular user agent can fetch a URL on the Web site that published the :file:`robots.txt` file.  For more details on the structure of :file:`robots.txt` files, see http://www.robotstxt.org/orig.html."
msgstr ""

msgid "This class provides a set of methods to read, parse and answer questions about a single :file:`robots.txt` file."
msgstr ""

msgid "Sets the URL referring to a :file:`robots.txt` file."
msgstr ""

msgid "Reads the :file:`robots.txt` URL and feeds it to the parser."
msgstr ""

msgid "Parses the lines argument."
msgstr ""

msgid "Returns ``True`` if the *useragent* is allowed to fetch the *url* according to the rules contained in the parsed :file:`robots.txt` file."
msgstr ""

msgid "Returns the time the ``robots.txt`` file was last fetched.  This is useful for long-running web spiders that need to check for new ``robots.txt`` files periodically."
msgstr ""

msgid "Sets the time the ``robots.txt`` file was last fetched to the current time."
msgstr ""

msgid "The following example demonstrates basic use of the RobotFileParser class."
msgstr ""

msgid ">>> import urllib.robotparser >>> rp = urllib.robotparser.RobotFileParser() >>> rp.set_url(\"http://www.musi-cal.com/robots.txt\") >>> rp.read() >>> rp.can_fetch(\"*\", \"http://www.musi-cal.com/cgi-bin/search?city=San+Francisco\") False >>> rp.can_fetch(\"*\", \"http://www.musi-cal.com/\") True"
msgstr ""

msgid ":mod:`uu` --- Encode and decode uuencode files"
msgstr ""

msgid "This module encodes and decodes files in uuencode format, allowing arbitrary binary data to be transferred over ASCII-only connections. Wherever a file argument is expected, the methods accept a file-like object.  For backwards compatibility, a string containing a pathname is also accepted, and the corresponding file will be opened for reading and writing; the pathname ``'-'`` is understood to mean the standard input or output.  However, this interface is deprecated; it's better for the caller to open the file itself, and be sure that, when required, the mode is ``'rb'`` or ``'wb'`` on Windows."
msgstr ""

msgid "This code was contributed by Lance Ellinghouse, and modified by Jack Jansen."
msgstr ""

msgid "The :mod:`uu` module defines the following functions:"
msgstr ""

msgid "Uuencode file *in_file* into file *out_file*.  The uuencoded file will have the header specifying *name* and *mode* as the defaults for the results of decoding the file. The default defaults are taken from *in_file*, or ``'-'`` and ``0o666`` respectively."
msgstr ""

msgid "This call decodes uuencoded file *in_file* placing the result on file *out_file*. If *out_file* is a pathname, *mode* is used to set the permission bits if the file must be created. Defaults for *out_file* and *mode* are taken from the uuencode header.  However, if the file specified in the header already exists, a :exc:`uu.Error` is raised."
msgstr ""

msgid ":func:`decode` may print a warning to standard error if the input was produced by an incorrect uuencoder and Python could recover from that error.  Setting *quiet* to a true value silences this warning."
msgstr ""

msgid "Subclass of :exc:`Exception`, this can be raised by :func:`uu.decode` under various situations, such as described above, but also including a badly formatted header, or truncated input file."
msgstr ""

msgid ":mod:`uuid` --- UUID objects according to RFC 4122"
msgstr ""

msgid "This module provides immutable :class:`UUID` objects (the :class:`UUID` class) and the functions :func:`uuid1`, :func:`uuid3`, :func:`uuid4`, :func:`uuid5` for generating version 1, 3, 4, and 5 UUIDs as specified in :rfc:`4122`."
msgstr ""

msgid "If all you want is a unique ID, you should probably call :func:`uuid1` or :func:`uuid4`.  Note that :func:`uuid1` may compromise privacy since it creates a UUID containing the computer's network address.  :func:`uuid4` creates a random UUID."
msgstr ""

msgid "Create a UUID from either a string of 32 hexadecimal digits, a string of 16 bytes as the *bytes* argument, a string of 16 bytes in little-endian order as the *bytes_le* argument, a tuple of six integers (32-bit *time_low*, 16-bit *time_mid*, 16-bit *time_hi_version*, 8-bit *clock_seq_hi_variant*, 8-bit *clock_seq_low*, 48-bit *node*) as the *fields* argument, or a single 128-bit integer as the *int* argument.  When a string of hex digits is given, curly braces, hyphens, and a URN prefix are all optional.  For example, these expressions all yield the same UUID::"
msgstr ""

msgid "UUID('{12345678-1234-5678-1234-567812345678}') UUID('12345678123456781234567812345678') UUID('urn:uuid:12345678-1234-5678-1234-567812345678') UUID(bytes=b'\\x12\\x34\\x56\\x78'*4) UUID(bytes_le=b'\\x78\\x56\\x34\\x12\\x34\\x12\\x78\\x56' +               b'\\x12\\x34\\x56\\x78\\x12\\x34\\x56\\x78') UUID(fields=(0x12345678, 0x1234, 0x5678, 0x12, 0x34, 0x567812345678)) UUID(int=0x12345678123456781234567812345678)"
msgstr ""

msgid "Exactly one of *hex*, *bytes*, *bytes_le*, *fields*, or *int* must be given. The *version* argument is optional; if given, the resulting UUID will have its variant and version number set according to RFC 4122, overriding bits in the given *hex*, *bytes*, *bytes_le*, *fields*, or *int*."
msgstr ""

msgid ":class:`UUID` instances have these read-only attributes:"
msgstr ""

msgid "The UUID as a 16-byte string (containing the six integer fields in big-endian byte order)."
msgstr ""

msgid "The UUID as a 16-byte string (with *time_low*, *time_mid*, and *time_hi_version* in little-endian byte order)."
msgstr ""

msgid "A tuple of the six integer fields of the UUID, which are also available as six individual attributes and two derived attributes:"
msgstr ""

msgid ":attr:`time_low`"
msgstr ""

msgid "the first 32 bits of the UUID"
msgstr ""

msgid ":attr:`time_mid`"
msgstr ""

msgid "the next 16 bits of the UUID"
msgstr ""

msgid ":attr:`time_hi_version`"
msgstr ""

msgid ":attr:`clock_seq_hi_variant`"
msgstr ""

msgid "the next 8 bits of the UUID"
msgstr ""

msgid ":attr:`clock_seq_low`"
msgstr ""

msgid ":attr:`node`"
msgstr ""

msgid "the last 48 bits of the UUID"
msgstr ""

msgid ":attr:`time`"
msgstr ""

msgid "the 60-bit timestamp"
msgstr ""

msgid ":attr:`clock_seq`"
msgstr ""

msgid "the 14-bit sequence number"
msgstr ""

msgid "The UUID as a 32-character hexadecimal string."
msgstr ""

msgid "The UUID as a 128-bit integer."
msgstr ""

msgid "The UUID as a URN as specified in RFC 4122."
msgstr ""

msgid "The UUID variant, which determines the internal layout of the UUID. This will be one of the integer constants :const:`RESERVED_NCS`, :const:`RFC_4122`, :const:`RESERVED_MICROSOFT`, or :const:`RESERVED_FUTURE`."
msgstr ""

msgid "The UUID version number (1 through 5, meaningful only when the variant is :const:`RFC_4122`)."
msgstr ""

msgid "The :mod:`uuid` module defines the following functions:"
msgstr ""

msgid "Get the hardware address as a 48-bit positive integer.  The first time this runs, it may launch a separate program, which could be quite slow.  If all attempts to obtain the hardware address fail, we choose a random 48-bit number with its eighth bit set to 1 as recommended in RFC 4122.  \"Hardware address\" means the MAC address of a network interface, and on a machine with multiple network interfaces the MAC address of any one of them may be returned."
msgstr ""

msgid "Generate a UUID from a host ID, sequence number, and the current time. If *node* is not given, :func:`getnode` is used to obtain the hardware address. If *clock_seq* is given, it is used as the sequence number; otherwise a random 14-bit sequence number is chosen."
msgstr ""

msgid "Generate a UUID based on the MD5 hash of a namespace identifier (which is a UUID) and a name (which is a string)."
msgstr ""

msgid "Generate a random UUID."
msgstr ""

msgid "Generate a UUID based on the SHA-1 hash of a namespace identifier (which is a UUID) and a name (which is a string)."
msgstr ""

msgid "The :mod:`uuid` module defines the following namespace identifiers for use with :func:`uuid3` or :func:`uuid5`."
msgstr ""

msgid "When this namespace is specified, the *name* string is a fully-qualified domain name."
msgstr ""

msgid "When this namespace is specified, the *name* string is a URL."
msgstr ""

msgid "When this namespace is specified, the *name* string is an ISO OID."
msgstr ""

msgid "When this namespace is specified, the *name* string is an X.500 DN in DER or a text output format."
msgstr ""

msgid "The :mod:`uuid` module defines the following constants for the possible values of the :attr:`variant` attribute:"
msgstr ""

msgid "Reserved for NCS compatibility."
msgstr ""

msgid "Specifies the UUID layout given in :rfc:`4122`."
msgstr ""

msgid "Reserved for Microsoft compatibility."
msgstr ""

msgid "Reserved for future definition."
msgstr ""

msgid "This specification defines a Uniform Resource Name namespace for UUIDs, the internal format of UUIDs, and methods of generating UUIDs."
msgstr ""

msgid "Here are some examples of typical usage of the :mod:`uuid` module::"
msgstr ""

msgid ">>> import uuid  # make a UUID based on the host ID and current time >>> uuid.uuid1() UUID('a8098c1a-f86e-11da-bd1a-00112444be1e')  # make a UUID using an MD5 hash of a namespace UUID and a name >>> uuid.uuid3(uuid.NAMESPACE_DNS, 'python.org') UUID('6fa459ea-ee8a-3ca4-894e-db77e160355e')  # make a random UUID >>> uuid.uuid4() UUID('16fd2706-8baf-433b-82eb-8c7fada847da')  # make a UUID using a SHA-1 hash of a namespace UUID and a name >>> uuid.uuid5(uuid.NAMESPACE_DNS, 'python.org') UUID('886313e1-3b8a-5372-9b90-0c9aee199e5d')  # make a UUID from a string of hex digits (braces and hyphens ignored) >>> x = uuid.UUID('{00010203-0405-0607-0809-0a0b0c0d0e0f}')  # convert a UUID to a string of hex digits in standard form >>> str(x) '00010203-0405-0607-0809-0a0b0c0d0e0f'  # get the raw 16 bytes of the UUID >>> x.bytes b'\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\\x0b\\x0c\\r\\x0e\\x0f'  # make a UUID from a 16-byte string >>> uuid.UUID(bytes=x.bytes) UUID('00010203-0405-0607-0809-0a0b0c0d0e0f')"
msgstr ""

msgid ":mod:`warnings` --- Warning control"
msgstr ""

msgid "Warning messages are typically issued in situations where it is useful to alert the user of some condition in a program, where that condition (normally) doesn't warrant raising an exception and terminating the program.  For example, one might want to issue a warning when a program uses an obsolete module."
msgstr ""

msgid "Python programmers issue warnings by calling the :func:`warn` function defined in this module.  (C programmers use :cfunc:`PyErr_WarnEx`; see :ref:`exceptionhandling` for details)."
msgstr ""

msgid "Warning messages are normally written to ``sys.stderr``, but their disposition can be changed flexibly, from ignoring all warnings to turning them into exceptions.  The disposition of warnings can vary based on the warning category (see below), the text of the warning message, and the source location where it is issued.  Repetitions of a particular warning for the same source location are typically suppressed."
msgstr ""

msgid "There are two stages in warning control: first, each time a warning is issued, a determination is made whether a message should be issued or not; next, if a message is to be issued, it is formatted and printed using a user-settable hook."
msgstr ""

msgid "The determination whether to issue a warning message is controlled by the warning filter, which is a sequence of matching rules and actions. Rules can be added to the filter by calling :func:`filterwarnings` and reset to its default state by calling :func:`resetwarnings`."
msgstr ""

msgid "The printing of warning messages is done by calling :func:`showwarning`, which may be overridden; the default implementation of this function formats the message by calling :func:`formatwarning`, which is also available for use by custom implementations."
msgstr ""

msgid "Warning Categories"
msgstr ""

msgid "There are a number of built-in exceptions that represent warning categories. This categorization is useful to be able to filter out groups of warnings.  The following warnings category classes are currently defined:"
msgstr ""

msgid "Class"
msgstr ""

msgid ":exc:`Warning`"
msgstr ""

msgid "This is the base class of all warning category classes.  It is a subclass of :exc:`Exception`."
msgstr ""

msgid ":exc:`UserWarning`"
msgstr ""

msgid "The default category for :func:`warn`."
msgstr ""

msgid ":exc:`DeprecationWarning`"
msgstr ""

msgid "Base category for warnings about deprecated features (ignored by default)."
msgstr ""

msgid ":exc:`SyntaxWarning`"
msgstr ""

msgid "Base category for warnings about dubious syntactic features."
msgstr ""

msgid ":exc:`RuntimeWarning`"
msgstr ""

msgid "Base category for warnings about dubious runtime features."
msgstr ""

msgid ":exc:`FutureWarning`"
msgstr ""

msgid "Base category for warnings about constructs that will change semantically in the future."
msgstr ""

msgid ":exc:`PendingDeprecationWarning`"
msgstr ""

msgid "Base category for warnings about features that will be deprecated in the future (ignored by default)."
msgstr ""

msgid ":exc:`ImportWarning`"
msgstr ""

msgid "Base category for warnings triggered during the process of importing a module (ignored by default)."
msgstr ""

msgid ":exc:`UnicodeWarning`"
msgstr ""

msgid "Base category for warnings related to Unicode."
msgstr ""

msgid ":exc:`BytesWarning`"
msgstr ""

msgid "Base category for warnings related to :class:`bytes` and :class:`buffer`."
msgstr ""

msgid "While these are technically built-in exceptions, they are documented here, because conceptually they belong to the warnings mechanism."
msgstr ""

msgid "User code can define additional warning categories by subclassing one of the standard warning categories.  A warning category must always be a subclass of the :exc:`Warning` class."
msgstr ""

msgid "The Warnings Filter"
msgstr ""

msgid "The warnings filter controls whether warnings are ignored, displayed, or turned into errors (raising an exception)."
msgstr ""

msgid "Conceptually, the warnings filter maintains an ordered list of filter specifications; any specific warning is matched against each filter specification in the list in turn until a match is found; the match determines the disposition of the match.  Each entry is a tuple of the form (*action*, *message*, *category*, *module*, *lineno*), where:"
msgstr ""

msgid "*action* is one of the following strings:"
msgstr ""

msgid "Disposition"
msgstr ""

msgid "``\"error\"``"
msgstr ""

msgid "turn matching warnings into exceptions"
msgstr ""

msgid "``\"ignore\"``"
msgstr ""

msgid "never print matching warnings"
msgstr ""

msgid "``\"always\"``"
msgstr ""

msgid "always print matching warnings"
msgstr ""

msgid "``\"default\"``"
msgstr ""

msgid "print the first occurrence of matching warnings for each location where the warning is issued"
msgstr ""

msgid "``\"module\"``"
msgstr ""

msgid "print the first occurrence of matching warnings for each module where the warning is issued"
msgstr ""

msgid "``\"once\"``"
msgstr ""

msgid "print only the first occurrence of matching warnings, regardless of location"
msgstr ""

msgid "*message* is a string containing a regular expression that the warning message must match (the match is compiled to always be case-insensitive)."
msgstr ""

msgid "*category* is a class (a subclass of :exc:`Warning`) of which the warning category must be a subclass in order to match."
msgstr ""

msgid "*module* is a string containing a regular expression that the module name must match (the match is compiled to be case-sensitive)."
msgstr ""

msgid "*lineno* is an integer that the line number where the warning occurred must match, or ``0`` to match all line numbers."
msgstr ""

msgid "Since the :exc:`Warning` class is derived from the built-in :exc:`Exception` class, to turn a warning into an error we simply raise ``category(message)``."
msgstr ""

msgid "The warnings filter is initialized by :option:`-W` options passed to the Python interpreter command line.  The interpreter saves the arguments for all :option:`-W` options without interpretation in ``sys.warnoptions``; the :mod:`warnings` module parses these when it is first imported (invalid options are ignored, after printing a message to ``sys.stderr``)."
msgstr ""

msgid "Temporarily Suppressing Warnings"
msgstr ""

msgid "If you are using code that you know will raise a warning, such as a deprecated function, but do not want to see the warning, then it is possible to suppress the warning using the :class:`catch_warnings` context manager::"
msgstr ""

msgid "import warnings  def fxn():     warnings.warn(\"deprecated\", DeprecationWarning)  with warnings.catch_warnings():     warnings.simplefilter(\"ignore\")     fxn()"
msgstr ""

msgid "While within the context manager all warnings will simply be ignored. This allows you to use known-deprecated code without having to see the warning while not suppressing the warning for other code that might not be aware of its use of deprecated code.  Note: this can only be guaranteed in a single-threaded application. If two or more threads use the :class:`catch_warnings` context manager at the same time, the behavior is undefined."
msgstr ""

msgid "Testing Warnings"
msgstr ""

msgid "To test warnings raised by code, use the :class:`catch_warnings` context manager. With it you can temporarily mutate the warnings filter to facilitate your testing. For instance, do the following to capture all raised warnings to check::"
msgstr ""

msgid "import warnings  def fxn():     warnings.warn(\"deprecated\", DeprecationWarning)  with warnings.catch_warnings(record=True) as w:     # Cause all warnings to always be triggered.     warnings.simplefilter(\"always\")     # Trigger a warning.     fxn()     # Verify some things     assert len(w) == 1     assert issubclass(w[-1].category, DeprecationWarning)     assert \"deprecated\" in str(w[-1].message)"
msgstr ""

msgid "One can also cause all warnings to be exceptions by using ``error`` instead of ``always``. One thing to be aware of is that if a warning has already been raised because of a ``once``/``default`` rule, then no matter what filters are set the warning will not be seen again unless the warnings registry related to the warning has been cleared."
msgstr ""

msgid "Once the context manager exits, the warnings filter is restored to its state when the context was entered. This prevents tests from changing the warnings filter in unexpected ways between tests and leading to indeterminate test results. The :func:`showwarning` function in the module is also restored to its original value.  Note: this can only be guaranteed in a single-threaded application. If two or more threads use the :class:`catch_warnings` context manager at the same time, the behavior is undefined."
msgstr ""

msgid "When testing multiple operations that raise the same kind of warning, it is important to test them in a manner that confirms each operation is raising a new warning (e.g. set warnings to be raised as exceptions and check the operations raise exceptions, check that the length of the warning list continues to increase after each operation, or else delete the previous entries from the warnings list before each new operation)."
msgstr ""

msgid "Updating Code For New Versions of Python"
msgstr ""

msgid "Warnings that are only of interest to the developer are ignored by default. As such you should make sure to test your code with typically ignored warnings made visible. You can do this from the command-line by passing :option:`-Wd` to the interpreter (this is shorthand for :option:`-W default`).  This enables default handling for all warnings, including those that are ignored by default. To change what action is taken for encountered warnings you simply change what argument is passed to :option:`-W`, e.g. :option:`-W error`. See the :option:`-W` flag for more details on what is possible."
msgstr ""

msgid "To programmatically do the same as :option:`-Wd`, use::"
msgstr ""

msgid "warnings.simplefilter('default')"
msgstr ""

msgid "Make sure to execute this code as soon as possible. This prevents the registering of what warnings have been raised from unexpectedly influencing how future warnings are treated."
msgstr ""

msgid "Having certain warnings ignored by default is done to prevent a user from seeing warnings that are only of interest to the developer. As you do not necessarily have control over what interpreter a user uses to run their code, it is possible that a new version of Python will be released between your release cycles.  The new interpreter release could trigger new warnings in your code that were not there in an older interpreter, e.g. :exc:`DeprecationWarning` for a module that you are using. While you as a developer want to be notified that your code is using a deprecated module, to a user this information is essentially noise and provides no benefit to them."
msgstr ""

msgid "Available Functions"
msgstr ""

msgid "Issue a warning, or maybe ignore it or raise an exception.  The *category* argument, if given, must be a warning category class (see above); it defaults to :exc:`UserWarning`.  Alternatively *message* can be a :exc:`Warning` instance, in which case *category* will be ignored and ``message.__class__`` will be used. In this case the message text will be ``str(message)``. This function raises an exception if the particular warning issued is changed into an error by the warnings filter see above.  The *stacklevel* argument can be used by wrapper functions written in Python, like this::"
msgstr ""

msgid "def deprecation(message):     warnings.warn(message, DeprecationWarning, stacklevel=2)"
msgstr ""

msgid "This makes the warning refer to :func:`deprecation`'s caller, rather than to the source of :func:`deprecation` itself (since the latter would defeat the purpose of the warning message)."
msgstr ""

msgid "This is a low-level interface to the functionality of :func:`warn`, passing in explicitly the message, category, filename and line number, and optionally the module name and the registry (which should be the ``__warningregistry__`` dictionary of the module).  The module name defaults to the filename with ``.py`` stripped; if no registry is passed, the warning is never suppressed. *message* must be a string and *category* a subclass of :exc:`Warning` or *message* may be a :exc:`Warning` instance, in which case *category* will be ignored."
msgstr ""

msgid "*module_globals*, if supplied, should be the global namespace in use by the code for which the warning is issued.  (This argument is used to support displaying source for modules found in zipfiles or other non-filesystem import sources)."
msgstr ""

msgid "Write a warning to a file.  The default implementation calls ``formatwarning(message, category, filename, lineno, line)`` and writes the resulting string to *file*, which defaults to ``sys.stderr``.  You may replace this function with an alternative implementation by assigning to ``warnings.showwarning``. *line* is a line of source code to be included in the warning message; if *line* is not supplied, :func:`showwarning` will try to read the line specified by *filename* and *lineno*."
msgstr ""

msgid "Format a warning the standard way.  This returns a string which may contain embedded newlines and ends in a newline.  *line* is a line of source code to be included in the warning message; if *line* is not supplied, :func:`formatwarning` will try to read the line specified by *filename* and *lineno*."
msgstr ""

msgid "Insert an entry into the list of :ref:`warnings filter specifications <warning-filter>`.  The entry is inserted at the front by default; if *append* is true, it is inserted at the end.  This checks the types of the arguments, compiles the *message* and *module* regular expressions, and inserts them as a tuple in the list of warnings filters.  Entries closer to the front of the list override entries later in the list, if both match a particular warning.  Omitted arguments default to a value that matches everything."
msgstr ""

msgid "Insert a simple entry into the list of :ref:`warnings filter specifications <warning-filter>`.  The meaning of the function parameters is as for :func:`filterwarnings`, but regular expressions are not needed as the filter inserted always matches any message in any module as long as the category and line number match."
msgstr ""

msgid "Reset the warnings filter.  This discards the effect of all previous calls to :func:`filterwarnings`, including that of the :option:`-W` command line options and calls to :func:`simplefilter`."
msgstr ""

msgid "Available Context Managers"
msgstr ""

msgid "A context manager that copies and, upon exit, restores the warnings filter and the :func:`showwarning` function. If the *record* argument is :const:`False` (the default) the context manager returns :class:`None` on entry. If *record* is :const:`True`, a list is returned that is progressively populated with objects as seen by a custom :func:`showwarning` function (which also suppresses output to ``sys.stdout``). Each object in the list has attributes with the same names as the arguments to :func:`showwarning`."
msgstr ""

msgid "The *module* argument takes a module that will be used instead of the module returned when you import :mod:`warnings` whose filter will be protected. This argument exists primarily for testing the :mod:`warnings` module itself."
msgstr ""

msgid "The :class:`catch_warnings` manager works by replacing and then later restoring the module's :func:`showwarning` function and internal list of filter specifications.  This means the context manager is modifying global state and therefore is not thread-safe."
msgstr ""

msgid ":mod:`wave` --- Read and write WAV files"
msgstr ""

msgid "The :mod:`wave` module provides a convenient interface to the WAV sound format. It does not support compression/decompression, but it does support mono/stereo."
msgstr ""

msgid "The :mod:`wave` module defines the following function and exception:"
msgstr ""

msgid "If *file* is a string, open the file by that name, other treat it as a seekable file-like object. *mode* can be any of"
msgstr ""

msgid "Note that it does not allow read/write WAV files."
msgstr ""

msgid "A *mode* of ``'r'`` or ``'rb'`` returns a :class:`Wave_read` object, while a *mode* of ``'w'`` or ``'wb'`` returns a :class:`Wave_write` object.  If *mode* is omitted and a file-like  object is passed as *file*, ``file.mode`` is used as the default value for *mode* (the ``'b'`` flag is still added if  necessary)."
msgstr ""

msgid "An error raised when something is impossible because it violates the WAV specification or hits an implementation deficiency."
msgstr ""

msgid "Wave_read Objects"
msgstr ""

msgid "Wave_read objects, as returned by :func:`.open`, have the following methods:"
msgstr ""

msgid "Close the stream, and make the instance unusable. This is called automatically on object collection."
msgstr ""

msgid "Returns number of audio channels (``1`` for mono, ``2`` for stereo)."
msgstr ""

msgid "Returns compression type (``'NONE'`` is the only supported type)."
msgstr ""

msgid "Human-readable version of :meth:`getcomptype`. Usually ``'not compressed'`` parallels ``'NONE'``."
msgstr ""

msgid "Reads and returns at most *n* frames of audio, as a string of bytes."
msgstr ""

msgid "The following two methods are defined for compatibility with the :mod:`aifc` module, and don't do anything interesting."
msgstr ""

msgid "Set the file pointer to the specified position."
msgstr ""

msgid "Return current file pointer position."
msgstr ""

msgid "Wave_write Objects"
msgstr ""

msgid "Wave_write objects, as returned by :func:`.open`, have the following methods:"
msgstr ""

msgid "Make sure *nframes* is correct, and close the file. This method is called upon deletion."
msgstr ""

msgid "Set the sample width to *n* bytes."
msgstr ""

msgid "Set the frame rate to *n*."
msgstr ""

msgid "Set the number of frames to *n*. This will be changed later if more frames are written."
msgstr ""

msgid "Set the compression type and description. At the moment, only compression type ``NONE`` is supported, meaning no compression."
msgstr ""

msgid "The *tuple* should be ``(nchannels, sampwidth, framerate, nframes, comptype, compname)``, with values valid for the :meth:`set\\*` methods.  Sets all parameters."
msgstr ""

msgid "Return current position in the file, with the same disclaimer for the :meth:`Wave_read.tell` and :meth:`Wave_read.setpos` methods."
msgstr ""

msgid "Note that it is invalid to set any parameters after calling :meth:`writeframes` or :meth:`writeframesraw`, and any attempt to do so will raise :exc:`wave.Error`."
msgstr ""

msgid ":mod:`weakref` --- Weak references"
msgstr ""

msgid "The :mod:`weakref` module allows the Python programmer to create :dfn:`weak references` to objects."
msgstr ""

msgid "In the following, the term :dfn:`referent` means the object which is referred to by a weak reference."
msgstr ""

msgid "A weak reference to an object is not enough to keep the object alive: when the only remaining references to a referent are weak references, :term:`garbage collection` is free to destroy the referent and reuse its memory for something else.  A primary use for weak references is to implement caches or mappings holding large objects, where it's desired that a large object not be kept alive solely because it appears in a cache or mapping."
msgstr ""

msgid "For example, if you have a number of large binary image objects, you may wish to associate a name with each.  If you used a Python dictionary to map names to images, or images to names, the image objects would remain alive just because they appeared as values or keys in the dictionaries.  The :class:`WeakKeyDictionary` and :class:`WeakValueDictionary` classes supplied by the :mod:`weakref` module are an alternative, using weak references to construct mappings that don't keep objects alive solely because they appear in the mapping objects.  If, for example, an image object is a value in a :class:`WeakValueDictionary`, then when the last remaining references to that image object are the weak references held by weak mappings, garbage collection can reclaim the object, and its corresponding entries in weak mappings are simply deleted."
msgstr ""

msgid ":class:`WeakKeyDictionary` and :class:`WeakValueDictionary` use weak references in their implementation, setting up callback functions on the weak references that notify the weak dictionaries when a key or value has been reclaimed by garbage collection.  :class:`WeakSet` implements the :class:`set` interface, but keeps weak references to its elements, just like a :class:`WeakKeyDictionary` does."
msgstr ""

msgid "Most programs should find that using one of these weak container types is all they need -- it's not usually necessary to create your own weak references directly.  The low-level machinery used by the weak dictionary implementations is exposed by the :mod:`weakref` module for the benefit of advanced uses."
msgstr ""

msgid "Weak references to an object are cleared before the object's :meth:`__del__` is called, to ensure that the weak reference callback (if any) finds the object still alive."
msgstr ""

msgid "Not all objects can be weakly referenced; those objects which can include class instances, functions written in Python (but not in C), instance methods, sets, frozensets, file objects, :term:`generator`\\s, type objects, sockets, arrays, deques, regular expression pattern objects, and code objects."
msgstr ""

msgid "Several built-in types such as :class:`list` and :class:`dict` do not directly support weak references but can add support through subclassing::"
msgstr ""

msgid "class Dict(dict):     pass  obj = Dict(red=1, green=2, blue=3)   # this object is weak referenceable"
msgstr ""

msgid "Other built-in types such as :class:`tuple` and :class:`int` do not support weak references even when subclassed (This is an implementation detail and may be different across various Python implementations.)."
msgstr ""

msgid "Extension types can easily be made to support weak references; see :ref:`weakref-support`."
msgstr ""

msgid "Return a weak reference to *object*.  The original object can be retrieved by calling the reference object if the referent is still alive; if the referent is no longer alive, calling the reference object will cause :const:`None` to be returned.  If *callback* is provided and not :const:`None`, and the returned weakref object is still alive, the callback will be called when the object is about to be finalized; the weak reference object will be passed as the only parameter to the callback; the referent will no longer be available."
msgstr ""

msgid "It is allowable for many weak references to be constructed for the same object. Callbacks registered for each weak reference will be called from the most recently registered callback to the oldest registered callback."
msgstr ""

msgid "Exceptions raised by the callback will be noted on the standard error output, but cannot be propagated; they are handled in exactly the same way as exceptions raised from an object's :meth:`__del__` method."
msgstr ""

msgid "Weak references are :term:`hashable` if the *object* is hashable.  They will maintain their hash value even after the *object* was deleted.  If :func:`hash` is called the first time only after the *object* was deleted, the call will raise :exc:`TypeError`."
msgstr ""

msgid "Weak references support tests for equality, but not ordering.  If the referents are still alive, two references have the same equality relationship as their referents (regardless of the *callback*).  If either referent has been deleted, the references are equal only if the reference objects are the same object."
msgstr ""

msgid "This is a subclassable type rather than a factory function."
msgstr ""

msgid "Return a proxy to *object* which uses a weak reference.  This supports use of the proxy in most contexts instead of requiring the explicit dereferencing used with weak reference objects.  The returned object will have a type of either ``ProxyType`` or ``CallableProxyType``, depending on whether *object* is callable.  Proxy objects are not :term:`hashable` regardless of the referent; this avoids a number of problems related to their fundamentally mutable nature, and prevent their use as dictionary keys.  *callback* is the same as the parameter of the same name to the :func:`ref` function."
msgstr ""

msgid "Return the number of weak references and proxies which refer to *object*."
msgstr ""

msgid "Return a list of all weak reference and proxy objects which refer to *object*."
msgstr ""

msgid "Mapping class that references keys weakly.  Entries in the dictionary will be discarded when there is no longer a strong reference to the key.  This can be used to associate additional data with an object owned by other parts of an application without adding attributes to those objects.  This can be especially useful with objects that override attribute accesses."
msgstr ""

msgid "Caution: Because a :class:`WeakKeyDictionary` is built on top of a Python dictionary, it must not change size when iterating over it.  This can be difficult to ensure for a :class:`WeakKeyDictionary` because actions performed by the program during iteration may cause items in the dictionary to vanish \"by magic\" (as a side effect of garbage collection)."
msgstr ""

msgid ":class:`WeakKeyDictionary` objects have the following additional methods.  These expose the internal references directly.  The references are not guaranteed to be \"live\" at the time they are used, so the result of calling the references needs to be checked before being used.  This can be used to avoid creating references that will cause the garbage collector to keep the keys around longer than needed."
msgstr ""

msgid "Return an iterable of the weak references to the keys."
msgstr ""

msgid "Mapping class that references values weakly.  Entries in the dictionary will be discarded when no strong reference to the value exists any more."
msgstr ""

msgid "Caution:  Because a :class:`WeakValueDictionary` is built on top of a Python dictionary, it must not change size when iterating over it.  This can be difficult to ensure for a :class:`WeakValueDictionary` because actions performed by the program during iteration may cause items in the dictionary to vanish \"by magic\" (as a side effect of garbage collection)."
msgstr ""

msgid ":class:`WeakValueDictionary` objects have the following additional methods. These method have the same issues as the and :meth:`keyrefs` method of :class:`WeakKeyDictionary` objects."
msgstr ""

msgid "Return an iterable of the weak references to the values."
msgstr ""

msgid "Set class that keeps weak references to its elements.  An element will be discarded when no strong reference to it exists any more."
msgstr ""

msgid "The type object for weak references objects."
msgstr ""

msgid "The type object for proxies of objects which are not callable."
msgstr ""

msgid "The type object for proxies of callable objects."
msgstr ""

msgid "Sequence containing all the type objects for proxies.  This can make it simpler to test if an object is a proxy without being dependent on naming both proxy types."
msgstr ""

msgid "Exception raised when a proxy object is used but the underlying object has been collected.  This is the same as the standard :exc:`ReferenceError` exception."
msgstr ""

msgid "The proposal and rationale for this feature, including links to earlier implementations and information about similar features in other languages."
msgstr ""

msgid "Weak Reference Objects"
msgstr ""

msgid "Weak reference objects have no attributes or methods, but do allow the referent to be obtained, if it still exists, by calling it:"
msgstr ""

msgid ">>> import weakref >>> class Object: ...     pass ... >>> o = Object() >>> r = weakref.ref(o) >>> o2 = r() >>> o is o2 True"
msgstr ""

msgid "If the referent no longer exists, calling the reference object returns :const:`None`:"
msgstr ""

msgid ">>> del o, o2 >>> print(r()) None"
msgstr ""

msgid "Testing that a weak reference object is still live should be done using the expression ``ref() is not None``.  Normally, application code that needs to use a reference object should follow this pattern::"
msgstr ""

msgid "# r is a weak reference object o = r() if o is None:     # referent has been garbage collected     print(\"Object has been deallocated; can't frobnicate.\") else:     print(\"Object is still live!\")     o.do_something_useful()"
msgstr ""

msgid "Using a separate test for \"liveness\" creates race conditions in threaded applications; another thread can cause a weak reference to become invalidated before the weak reference is called; the idiom shown above is safe in threaded applications as well as single-threaded applications."
msgstr ""

msgid "Specialized versions of :class:`ref` objects can be created through subclassing. This is used in the implementation of the :class:`WeakValueDictionary` to reduce the memory overhead for each entry in the mapping.  This may be most useful to associate additional information with a reference, but could also be used to insert additional processing on calls to retrieve the referent."
msgstr ""

msgid "This example shows how a subclass of :class:`ref` can be used to store additional information about an object and affect the value that's returned when the referent is accessed::"
msgstr ""

msgid "import weakref  class ExtendedRef(weakref.ref):     def __init__(self, ob, callback=None, **annotations):         super(ExtendedRef, self).__init__(ob, callback)         self.__counter = 0         for k, v in annotations.items():             setattr(self, k, v)      def __call__(self):         \"\"\"Return a pair containing the referent and the number of         times the reference has been called.         \"\"\"         ob = super(ExtendedRef, self).__call__()         if ob is not None:             self.__counter += 1             ob = (ob, self.__counter)         return ob"
msgstr ""

msgid "This simple example shows how an application can use objects IDs to retrieve objects that it has seen before.  The IDs of the objects can then be used in other data structures without forcing the objects to remain alive, but the objects can still be retrieved by ID if they do."
msgstr ""

msgid "import weakref  _id2obj_dict = weakref.WeakValueDictionary()  def remember(obj):     oid = id(obj)     _id2obj_dict[oid] = obj     return oid  def id2obj(oid):     return _id2obj_dict[oid]"
msgstr ""

msgid ":mod:`webbrowser` --- Convenient Web-browser controller"
msgstr ""

msgid "The :mod:`webbrowser` module provides a high-level interface to allow displaying Web-based documents to users. Under most circumstances, simply calling the :func:`.open` function from this module will do the right thing."
msgstr ""

msgid "Under Unix, graphical browsers are preferred under X11, but text-mode browsers will be used if graphical browsers are not available or an X11 display isn't available.  If text-mode browsers are used, the calling process will block until the user exits the browser."
msgstr ""

msgid "If the environment variable :envvar:`BROWSER` exists, it is interpreted to override the platform default list of browsers, as a :data:`os.pathsep`-separated list of browsers to try in order.  When the value of a list part contains the string ``%s``, then it is  interpreted as a literal browser command line to be used with the argument URL substituted for ``%s``; if the part does not contain ``%s``, it is simply interpreted as the name of the browser to launch. [1]_"
msgstr ""

msgid "For non-Unix platforms, or when a remote browser is available on Unix, the controlling process will not wait for the user to finish with the browser, but allow the remote browser to maintain its own windows on the display.  If remote browsers are not available on Unix, the controlling process will launch a new browser and wait."
msgstr ""

msgid "The script :program:`webbrowser` can be used as a command-line interface for the module. It accepts an URL as the argument. It accepts the following optional parameters: :option:`-n` opens the URL in a new browser window, if possible; :option:`-t` opens the URL in a new browser page (\"tab\"). The options are, naturally, mutually exclusive."
msgstr ""

msgid "Exception raised when a browser control error occurs."
msgstr ""

msgid "Display *url* using the default browser. If *new* is 0, the *url* is opened in the same browser window if possible.  If *new* is 1, a new browser window is opened if possible.  If *new* is 2, a new browser page (\"tab\") is opened if possible.  If *autoraise* is ``True``, the window is raised if possible (note that under many window managers this will occur regardless of the setting of this variable)."
msgstr ""

msgid "Note that on some platforms, trying to open a filename using this function, may work and start the operating system's associated program.  However, this is neither supported nor portable."
msgstr ""

msgid "Open *url* in a new window of the default browser, if possible, otherwise, open *url* in the only browser window."
msgstr ""

msgid "Open *url* in a new page (\"tab\") of the default browser, if possible, otherwise equivalent to :func:`open_new`."
msgstr ""

msgid "Return a controller object for the browser type *using*.  If *using* is ``None``, return a controller for a default browser appropriate to the caller's environment."
msgstr ""

msgid "Register the browser type *name*.  Once a browser type is registered, the :func:`get` function can return a controller for that browser type.  If *instance* is not provided, or is ``None``, *constructor* will be called without parameters to create an instance when needed.  If *instance* is provided, *constructor* will never be called, and may be ``None``."
msgstr ""

msgid "This entry point is only useful if you plan to either set the :envvar:`BROWSER` variable or call :func:`get` with a nonempty argument matching the name of a handler you declare."
msgstr ""

msgid "A number of browser types are predefined.  This table gives the type names that may be passed to the :func:`get` function and the corresponding instantiations for the controller classes, all defined in this module."
msgstr ""

msgid "Type Name"
msgstr ""

msgid "Class Name"
msgstr ""

msgid "``'mozilla'``"
msgstr ""

msgid ":class:`Mozilla('mozilla')`"
msgstr ""

msgid "``'firefox'``"
msgstr ""

msgid "``'netscape'``"
msgstr ""

msgid ":class:`Mozilla('netscape')`"
msgstr ""

msgid "``'galeon'``"
msgstr ""

msgid ":class:`Galeon('galeon')`"
msgstr ""

msgid "``'epiphany'``"
msgstr ""

msgid ":class:`Galeon('epiphany')`"
msgstr ""

msgid "``'skipstone'``"
msgstr ""

msgid ":class:`BackgroundBrowser('skipstone')`"
msgstr ""

msgid "``'kfmclient'``"
msgstr ""

msgid ":class:`Konqueror()`"
msgstr ""

msgid "``'konqueror'``"
msgstr ""

msgid "``'kfm'``"
msgstr ""

msgid "``'mosaic'``"
msgstr ""

msgid ":class:`BackgroundBrowser('mosaic')`"
msgstr ""

msgid "``'opera'``"
msgstr ""

msgid ":class:`Opera()`"
msgstr ""

msgid "``'grail'``"
msgstr ""

msgid ":class:`Grail()`"
msgstr ""

msgid "``'links'``"
msgstr ""

msgid ":class:`GenericBrowser('links')`"
msgstr ""

msgid "``'elinks'``"
msgstr ""

msgid ":class:`Elinks('elinks')`"
msgstr ""

msgid "``'lynx'``"
msgstr ""

msgid ":class:`GenericBrowser('lynx')`"
msgstr ""

msgid "``'w3m'``"
msgstr ""

msgid ":class:`GenericBrowser('w3m')`"
msgstr ""

msgid "``'windows-default'``"
msgstr ""

msgid ":class:`WindowsDefault`"
msgstr ""

msgid "``'internet-config'``"
msgstr ""

msgid ":class:`InternetConfig`"
msgstr ""

msgid "``'macosx'``"
msgstr ""

msgid ":class:`MacOSX('default')`"
msgstr ""

msgid "\"Konqueror\" is the file manager for the KDE desktop environment for Unix, and only makes sense to use if KDE is running.  Some way of reliably detecting KDE would be nice; the :envvar:`KDEDIR` variable is not sufficient.  Note also that the name \"kfm\" is used even when using the :program:`konqueror` command with KDE 2 --- the implementation selects the best strategy for running Konqueror."
msgstr ""

msgid "Only on Windows platforms."
msgstr ""

msgid "Only on Mac OS platforms; requires the standard MacPython :mod:`ic` module."
msgstr ""

msgid "Only on Mac OS X platform."
msgstr ""

msgid "Here are some simple examples::"
msgstr ""

msgid "url = 'http://www.python.org/'  # Open URL in a new tab, if a browser window is already open. webbrowser.open_new_tab(url + 'doc/')  # Open URL in new window, raising the window if possible. webbrowser.open_new(url)"
msgstr ""

msgid "Browser Controller Objects"
msgstr ""

msgid "Browser controllers provide these methods which parallel three of the module-level convenience functions:"
msgstr ""

msgid "Display *url* using the browser handled by this controller. If *new* is 1, a new browser window is opened if possible. If *new* is 2, a new browser page (\"tab\") is opened if possible."
msgstr ""

msgid "Open *url* in a new window of the browser handled by this controller, if possible, otherwise, open *url* in the only browser window.  Alias :func:`open_new`."
msgstr ""

msgid "Open *url* in a new page (\"tab\") of the browser handled by this controller, if possible, otherwise equivalent to :func:`open_new`."
msgstr ""

msgid "Executables named here without a full path will be searched in the directories given in the :envvar:`PATH` environment variable."
msgstr ""

msgid "MS Windows Specific Services"
msgstr ""

msgid "This chapter describes modules that are only available on MS Windows platforms."
msgstr ""

msgid ":mod:`winreg` -- Windows registry access"
msgstr ""

msgid "These functions expose the Windows registry API to Python.  Instead of using an integer as the registry handle, a :ref:`handle object <handle-object>` is used to ensure that the handles are closed correctly, even if the programmer neglects to explicitly close them."
msgstr ""

msgid "This module offers the following functions:"
msgstr ""

msgid "Closes a previously opened registry key.  The *hkey* argument specifies a previously opened key."
msgstr ""

msgid "If *hkey* is not closed using this method (or via :meth:`hkey.Close() <PyHKEY.Close>`), it is closed when the *hkey* object is destroyed by Python."
msgstr ""

msgid "Establishes a connection to a predefined registry handle on another computer, and returns a :ref:`handle object <handle-object>`."
msgstr ""

msgid "*computer_name* is the name of the remote computer, of the form ``r\"\\\\computername\"``.  If ``None``, the local computer is used."
msgstr ""

msgid "*key* is the predefined handle to connect to."
msgstr ""

msgid "The return value is the handle of the opened key. If the function fails, a :exc:`WindowsError` exception is raised."
msgstr ""

msgid "Creates or opens the specified key, returning a :ref:`handle object <handle-object>`."
msgstr ""

msgid "*key* is an already open key, or one of the predefined :ref:`HKEY_* constants <hkey-constants>`."
msgstr ""

msgid "*sub_key* is a string that names the key this method opens or creates."
msgstr ""

msgid "If *key* is one of the predefined keys, *sub_key* may be ``None``. In that case, the handle returned is the same key handle passed in to the function."
msgstr ""

msgid "If the key already exists, this function opens the existing key."
msgstr ""

msgid "*res* is a reserved integer, and must be zero. The default is zero."
msgstr ""

msgid "*sam* is an integer that specifies an access mask that describes the desired security access for the key.  Default is :const:`KEY_ALL_ACCESS`.  See :ref:`Access Rights <access-rights>` for other allowed values."
msgstr ""

msgid "Deletes the specified key."
msgstr ""

msgid "*sub_key* is a string that must be a subkey of the key identified by the *key* parameter.  This value must not be ``None``, and the key may not have subkeys."
msgstr ""

msgid "*This method can not delete keys with subkeys.*"
msgstr ""

msgid "If the method succeeds, the entire key, including all of its values, is removed. If the method fails, a :exc:`WindowsError` exception is raised."
msgstr ""

msgid "The :func:`DeleteKeyEx` function is implemented with the RegDeleteKeyEx Windows API function, which is specific to 64-bit versions of Windows. See the `RegDeleteKeyEx documentation <http://msdn.microsoft.com/en-us/library/ms724847%28VS.85%29.aspx>`__."
msgstr ""

msgid "*sub_key* is a string that must be a subkey of the key identified by the *key* parameter. This value must not be ``None``, and the key may not have subkeys."
msgstr ""

msgid "On unsupported Windows versions, :exc:`NotImplementedError` is raised."
msgstr ""

msgid "Removes a named value from a registry key."
msgstr ""

msgid "*value* is a string that identifies the value to remove."
msgstr ""

msgid "Enumerates subkeys of an open registry key, returning a string."
msgstr ""

msgid "*index* is an integer that identifies the index of the key to retrieve."
msgstr ""

msgid "The function retrieves the name of one subkey each time it is called.  It is typically called repeatedly until a :exc:`WindowsError` exception is raised, indicating, no more values are available."
msgstr ""

msgid "Enumerates values of an open registry key, returning a tuple."
msgstr ""

msgid "*index* is an integer that identifies the index of the value to retrieve."
msgstr ""

msgid "The function retrieves the name of one subkey each time it is called. It is typically called repeatedly, until a :exc:`WindowsError` exception is raised, indicating no more values."
msgstr ""

msgid "The result is a tuple of 3 items:"
msgstr ""

msgid "A string that identifies the value name"
msgstr ""

msgid "An object that holds the value data, and whose type depends on the underlying registry type"
msgstr ""

msgid "An integer that identifies the type of the value data (see table in docs for :meth:`SetValueEx`)"
msgstr ""

msgid "Expands environment variable placeholders ``%NAME%`` in strings like :const:`REG_EXPAND_SZ`::"
msgstr ""

msgid ">>> ExpandEnvironmentStrings('%windir%') 'C:\\\\Windows'"
msgstr ""

msgid "Writes all the attributes of a key to the registry."
msgstr ""

msgid "It is not necessary to call :func:`FlushKey` to change a key. Registry changes are flushed to disk by the registry using its lazy flusher.  Registry changes are also flushed to disk at system shutdown.  Unlike :func:`CloseKey`, the :func:`FlushKey` method returns only when all the data has been written to the registry. An application should only call :func:`FlushKey` if it requires absolute certainty that registry changes are on disk."
msgstr ""

msgid "If you don't know whether a :func:`FlushKey` call is required, it probably isn't."
msgstr ""

msgid "Creates a subkey under the specified key and stores registration information from a specified file into that subkey."
msgstr ""

msgid "*key* is a handle returned by :func:`ConnectRegistry` or one of the constants :const:`HKEY_USERS` or :const:`HKEY_LOCAL_MACHINE`."
msgstr ""

msgid "*sub_key* is a string that identifies the subkey to load."
msgstr ""

msgid "*file_name* is the name of the file to load registry data from. This file must have been created with the :func:`SaveKey` function. Under the file allocation table (FAT) file system, the filename may not have an extension."
msgstr ""

msgid "A call to :func:`LoadKey` fails if the calling process does not have the :const:`SE_RESTORE_PRIVILEGE` privilege.  Note that privileges are different from permissions -- see the `RegLoadKey documentation <http://msdn.microsoft.com/en-us/library/ms724889%28v=VS.85%29.aspx>`__ for more details."
msgstr ""

msgid "If *key* is a handle returned by :func:`ConnectRegistry`, then the path specified in *file_name* is relative to the remote computer."
msgstr ""

msgid "Opens the specified key, returning a :ref:`handle object <handle-object>`."
msgstr ""

msgid "*sub_key* is a string that identifies the sub_key to open."
msgstr ""

msgid "*res* is a reserved integer, and must be zero.  The default is zero."
msgstr ""

msgid "*sam* is an integer that specifies an access mask that describes the desired security access for the key.  Default is :const:`KEY_READ`.  See :ref:`Access Rights <access-rights>` for other allowed values."
msgstr ""

msgid "The result is a new handle to the specified key."
msgstr ""

msgid "If the function fails, :exc:`WindowsError` is raised."
msgstr ""

msgid "The functionality of :func:`OpenKeyEx` is provided via :func:`OpenKey`, by the use of default arguments."
msgstr ""

msgid "Returns information about a key, as a tuple."
msgstr ""

msgid "An integer giving the number of sub keys this key has."
msgstr ""

msgid "An integer giving the number of values this key has."
msgstr ""

msgid "An integer giving when the key was last modified (if available) as 100's of nanoseconds since Jan 1, 1600."
msgstr ""

msgid "Retrieves the unnamed value for a key, as a string."
msgstr ""

msgid "*sub_key* is a string that holds the name of the subkey with which the value is associated.  If this parameter is ``None`` or empty, the function retrieves the value set by the :func:`SetValue` method for the key identified by *key*."
msgstr ""

msgid "Values in the registry have name, type, and data components. This method retrieves the data for a key's first value that has a NULL name. But the underlying API call doesn't return the type, so always use :func:`QueryValueEx` if possible."
msgstr ""

msgid "Retrieves the type and data for a specified value name associated with an open registry key."
msgstr ""

msgid "*value_name* is a string indicating the value to query."
msgstr ""

msgid "The result is a tuple of 2 items:"
msgstr ""

msgid "The value of the registry item."
msgstr ""

msgid "An integer giving the registry type for this value (see table in docs for :meth:`SetValueEx`)"
msgstr ""

msgid "Saves the specified key, and all its subkeys to the specified file."
msgstr ""

msgid "*file_name* is the name of the file to save registry data to.  This file cannot already exist. If this filename includes an extension, it cannot be used on file allocation table (FAT) file systems by the :meth:`LoadKey` method."
msgstr ""

msgid "If *key* represents a key on a remote computer, the path described by *file_name* is relative to the remote computer. The caller of this method must possess the :const:`SeBackupPrivilege` security privilege.  Note that privileges are different than permissions -- see the `Conflicts Between User Rights and Permissions documentation <http://msdn.microsoft.com/en-us/library/ms724878%28v=VS.85%29.aspx>`__ for more details."
msgstr ""

msgid "This function passes NULL for *security_attributes* to the API."
msgstr ""

msgid "Associates a value with a specified key."
msgstr ""

msgid "*sub_key* is a string that names the subkey with which the value is associated."
msgstr ""

msgid "*type* is an integer that specifies the type of the data. Currently this must be :const:`REG_SZ`, meaning only strings are supported.  Use the :func:`SetValueEx` function for support for other data types."
msgstr ""

msgid "*value* is a string that specifies the new value."
msgstr ""

msgid "If the key specified by the *sub_key* parameter does not exist, the SetValue function creates it."
msgstr ""

msgid "Value lengths are limited by available memory. Long values (more than 2048 bytes) should be stored as files with the filenames stored in the configuration registry.  This helps the registry perform efficiently."
msgstr ""

msgid "The key identified by the *key* parameter must have been opened with :const:`KEY_SET_VALUE` access."
msgstr ""

msgid "Stores data in the value field of an open registry key."
msgstr ""

msgid "*value_name* is a string that names the subkey with which the value is associated."
msgstr ""

msgid "*type* is an integer that specifies the type of the data. See :ref:`Value Types <value-types>` for the available types."
msgstr ""

msgid "*reserved* can be anything -- zero is always passed to the API."
msgstr ""

msgid "This method can also set additional value and type information for the specified key.  The key identified by the key parameter must have been opened with :const:`KEY_SET_VALUE` access."
msgstr ""

msgid "To open the key, use the :func:`CreateKey` or :func:`OpenKey` methods."
msgstr ""

msgid "Disables registry reflection for 32-bit processes running on a 64-bit operating system."
msgstr ""

msgid "Will generally raise :exc:`NotImplemented` if executed on a 32-bit operating system."
msgstr ""

msgid "If the key is not on the reflection list, the function succeeds but has no effect.  Disabling reflection for a key does not affect reflection of any subkeys."
msgstr ""

msgid "Restores registry reflection for the specified disabled key."
msgstr ""

msgid "Restoring reflection for a key does not affect reflection of any subkeys."
msgstr ""

msgid "Determines the reflection state for the specified key."
msgstr ""

msgid "Returns ``True`` if reflection is disabled."
msgstr ""

msgid "The following constants are defined for use in many :mod:`_winreg` functions."
msgstr ""

msgid "HKEY_* Constants"
msgstr ""

msgid "Registry entries subordinate to this key define types (or classes) of documents and the properties associated with those types. Shell and COM applications use the information stored under this key."
msgstr ""

msgid "Registry entries subordinate to this key define the preferences of the current user. These preferences include the settings of environment variables, data about program groups, colors, printers, network connections, and application preferences."
msgstr ""

msgid "Registry entries subordinate to this key define the physical state of the computer, including data about the bus type, system memory, and installed hardware and software."
msgstr ""

msgid "Registry entries subordinate to this key define the default user configuration for new users on the local computer and the user configuration for the current user."
msgstr ""

msgid "Registry entries subordinate to this key allow you to access performance data. The data is not actually stored in the registry; the registry functions cause the system to collect the data from its source."
msgstr ""

msgid "Contains information about the current hardware profile of the local computer system."
msgstr ""

msgid "This key is not used in versions of Windows after 98."
msgstr ""

msgid "Access Rights"
msgstr ""

msgid "For more information, see `Registry Key Security and Access <http://msdn.microsoft.com/en-us/library/ms724878%28v=VS.85%29.aspx>`__."
msgstr ""

msgid "Combines the STANDARD_RIGHTS_REQUIRED, :const:`KEY_QUERY_VALUE`, :const:`KEY_SET_VALUE`, :const:`KEY_CREATE_SUB_KEY`, :const:`KEY_ENUMERATE_SUB_KEYS`, :const:`KEY_NOTIFY`, and :const:`KEY_CREATE_LINK` access rights."
msgstr ""

msgid "Combines the STANDARD_RIGHTS_WRITE, :const:`KEY_SET_VALUE`, and :const:`KEY_CREATE_SUB_KEY` access rights."
msgstr ""

msgid "Combines the STANDARD_RIGHTS_READ, :const:`KEY_QUERY_VALUE`, :const:`KEY_ENUMERATE_SUB_KEYS`, and :const:`KEY_NOTIFY` values."
msgstr ""

msgid "Equivalent to :const:`KEY_READ`."
msgstr ""

msgid "Required to query the values of a registry key."
msgstr ""

msgid "Required to create, delete, or set a registry value."
msgstr ""

msgid "Required to create a subkey of a registry key."
msgstr ""

msgid "Required to enumerate the subkeys of a registry key."
msgstr ""

msgid "Required to request change notifications for a registry key or for subkeys of a registry key."
msgstr ""

msgid "Reserved for system use."
msgstr ""

msgid "64-bit Specific"
msgstr ""

msgid "For more information, see `Accesing an Alternate Registry View <http://msdn.microsoft.com/en-us/library/aa384129(v=VS.85).aspx>`__."
msgstr ""

msgid "Indicates that an application on 64-bit Windows should operate on the 64-bit registry view."
msgstr ""

msgid "Indicates that an application on 64-bit Windows should operate on the 32-bit registry view."
msgstr ""

msgid "Value Types"
msgstr ""

msgid "For more information, see `Registry Value Types <http://msdn.microsoft.com/en-us/library/ms724884%28v=VS.85%29.aspx>`__."
msgstr ""

msgid "Binary data in any form."
msgstr ""

msgid "32-bit number."
msgstr ""

msgid "A 32-bit number in little-endian format."
msgstr ""

msgid "A 32-bit number in big-endian format."
msgstr ""

msgid "Null-terminated string containing references to environment variables (``%PATH%``)."
msgstr ""

msgid "A Unicode symbolic link."
msgstr ""

msgid "A sequence of null-terminated strings, terminated by two null characters. (Python handles this termination automatically.)"
msgstr ""

msgid "No defined value type."
msgstr ""

msgid "A device-driver resource list."
msgstr ""

msgid "A hardware setting."
msgstr ""

msgid "A hardware resource list."
msgstr ""

msgid "A null-terminated string."
msgstr ""

msgid "Registry Handle Objects"
msgstr ""

msgid "This object wraps a Windows HKEY object, automatically closing it when the object is destroyed.  To guarantee cleanup, you can call either the :meth:`~PyHKEY.Close` method on the object, or the :func:`CloseKey` function."
msgstr ""

msgid "All registry functions in this module return one of these objects."
msgstr ""

msgid "All registry functions in this module which accept a handle object also accept an integer, however, use of the handle object is encouraged."
msgstr ""

msgid "Handle objects provide semantics for :meth:`__bool__` -- thus ::"
msgstr ""

msgid "if handle:     print(\"Yes\")"
msgstr ""

msgid "will print ``Yes`` if the handle is currently valid (has not been closed or detached)."
msgstr ""

msgid "The object also support comparison semantics, so handle objects will compare true if they both reference the same underlying Windows handle value."
msgstr ""

msgid "Handle objects can be converted to an integer (e.g., using the built-in :func:`int` function), in which case the underlying Windows handle value is returned.  You can also use the :meth:`~PyHKEY.Detach` method to return the integer handle, and also disconnect the Windows handle from the handle object."
msgstr ""

msgid "Closes the underlying Windows handle."
msgstr ""

msgid "If the handle is already closed, no error is raised."
msgstr ""

msgid "Detaches the Windows handle from the handle object."
msgstr ""

msgid "The result is an integer that holds the value of the handle before it is detached.  If the handle is already detached or closed, this will return zero."
msgstr ""

msgid "After calling this function, the handle is effectively invalidated, but the handle is not closed.  You would call this function when you need the underlying Win32 handle to exist beyond the lifetime of the handle object."
msgstr ""

msgid "The HKEY object implements :meth:`~object.__enter__` and :meth:`~object.__exit__` and thus supports the context protocol for the :keyword:`with` statement::"
msgstr ""

msgid "with OpenKey(HKEY_LOCAL_MACHINE, \"foo\") as key:     ...  # work with key"
msgstr ""

msgid "will automatically close *key* when control leaves the :keyword:`with` block."
msgstr ""

msgid ":mod:`winsound` --- Sound-playing interface for Windows"
msgstr ""

msgid "The :mod:`winsound` module provides access to the basic sound-playing machinery provided by Windows platforms.  It includes functions and several constants."
msgstr ""

msgid "Beep the PC's speaker. The *frequency* parameter specifies frequency, in hertz, of the sound, and must be in the range 37 through 32,767. The *duration* parameter specifies the number of milliseconds the sound should last.  If the system is not able to beep the speaker, :exc:`RuntimeError` is raised."
msgstr ""

msgid "Call the underlying :cfunc:`PlaySound` function from the Platform API.  The *sound* parameter may be a filename, audio data as a string, or ``None``.  Its interpretation depends on the value of *flags*, which can be a bitwise ORed combination of the constants described below. If the *sound* parameter is ``None``, any currently playing waveform sound is stopped. If the system indicates an error, :exc:`RuntimeError` is raised."
msgstr ""

msgid "Call the underlying :cfunc:`MessageBeep` function from the Platform API.  This plays a sound as specified in the registry.  The *type* argument specifies which sound to play; possible values are ``-1``, ``MB_ICONASTERISK``, ``MB_ICONEXCLAMATION``, ``MB_ICONHAND``, ``MB_ICONQUESTION``, and ``MB_OK``, all described below.  The value ``-1`` produces a \"simple beep\"; this is the final fallback if a sound cannot be played otherwise."
msgstr ""

msgid "The *sound* parameter is the name of a WAV file. Do not use with :const:`SND_ALIAS`."
msgstr ""

msgid "The *sound* parameter is a sound association name from the registry.  If the registry contains no such name, play the system default sound unless :const:`SND_NODEFAULT` is also specified. If no default sound is registered, raise :exc:`RuntimeError`. Do not use with :const:`SND_FILENAME`."
msgstr ""

msgid "All Win32 systems support at least the following; most systems support many more:"
msgstr ""

msgid ":func:`PlaySound` *name*"
msgstr ""

msgid "Corresponding Control Panel Sound name"
msgstr ""

msgid "``'SystemAsterisk'``"
msgstr ""

msgid "Asterisk"
msgstr ""

msgid "``'SystemExclamation'``"
msgstr ""

msgid "Exclamation"
msgstr ""

msgid "``'SystemExit'``"
msgstr ""

msgid "Exit Windows"
msgstr ""

msgid "``'SystemHand'``"
msgstr ""

msgid "Critical Stop"
msgstr ""

msgid "``'SystemQuestion'``"
msgstr ""

msgid "Question"
msgstr ""

msgid "import winsound # Play Windows exit sound. winsound.PlaySound(\"SystemExit\", winsound.SND_ALIAS)  # Probably play Windows default sound, if any is registered (because # \"*\" probably isn't the registered name of any sound). winsound.PlaySound(\"*\", winsound.SND_ALIAS)"
msgstr ""

msgid "Play the sound repeatedly.  The :const:`SND_ASYNC` flag must also be used to avoid blocking.  Cannot be used with :const:`SND_MEMORY`."
msgstr ""

msgid "The *sound* parameter to :func:`PlaySound` is a memory image of a WAV file, as a string."
msgstr ""

msgid "This module does not support playing from a memory image asynchronously, so a combination of this flag and :const:`SND_ASYNC` will raise :exc:`RuntimeError`."
msgstr ""

msgid "Stop playing all instances of the specified sound."
msgstr ""

msgid "This flag is not supported on modern Windows platforms."
msgstr ""

msgid "Return immediately, allowing sounds to play asynchronously."
msgstr ""

msgid "If the specified sound cannot be found, do not play the system default sound."
msgstr ""

msgid "Do not interrupt sounds currently playing."
msgstr ""

msgid "Return immediately if the sound driver is busy."
msgstr ""

msgid "Play the ``SystemDefault`` sound."
msgstr ""

msgid "Play the ``SystemExclamation`` sound."
msgstr ""

msgid "Play the ``SystemHand`` sound."
msgstr ""

msgid "Play the ``SystemQuestion`` sound."
msgstr ""

msgid ":mod:`wsgiref` --- WSGI Utilities and Reference Implementation"
msgstr ""

msgid "The Web Server Gateway Interface (WSGI) is a standard interface between web server software and web applications written in Python. Having a standard interface makes it easy to use an application that supports WSGI with a number of different web servers."
msgstr ""

msgid "Only authors of web servers and programming frameworks need to know every detail and corner case of the WSGI design.  You don't need to understand every detail of WSGI just to install a WSGI application or to write a web application using an existing framework."
msgstr ""

msgid ":mod:`wsgiref` is a reference implementation of the WSGI specification that can be used to add WSGI support to a web server or framework.  It provides utilities for manipulating WSGI environment variables and response headers, base classes for implementing WSGI servers, a demo HTTP server that serves WSGI applications, and a validation tool that checks WSGI servers and applications for conformance to the WSGI specification (:pep:`333`)."
msgstr ""

msgid "See http://www.wsgi.org for more information about WSGI, and links to tutorials and other resources."
msgstr ""

msgid ":mod:`wsgiref.util` -- WSGI environment utilities"
msgstr ""

msgid "This module provides a variety of utility functions for working with WSGI environments.  A WSGI environment is a dictionary containing HTTP request variables as described in :pep:`333`.  All of the functions taking an *environ* parameter expect a WSGI-compliant dictionary to be supplied; please see :pep:`333` for a detailed specification."
msgstr ""

msgid "Return a guess for whether ``wsgi.url_scheme`` should be \"http\" or \"https\", by checking for a ``HTTPS`` environment variable in the *environ* dictionary.  The return value is a string."
msgstr ""

msgid "This function is useful when creating a gateway that wraps CGI or a CGI-like protocol such as FastCGI.  Typically, servers providing such protocols will include a ``HTTPS`` variable with a value of \"1\" \"yes\", or \"on\" when a request is received via SSL.  So, this function returns \"https\" if such a value is found, and \"http\" otherwise."
msgstr ""

msgid "Return the full request URI, optionally including the query string, using the algorithm found in the \"URL Reconstruction\" section of :pep:`333`.  If *include_query* is false, the query string is not included in the resulting URI."
msgstr ""

msgid "Similar to :func:`request_uri`, except that the ``PATH_INFO`` and ``QUERY_STRING`` variables are ignored.  The result is the base URI of the application object addressed by the request."
msgstr ""

msgid "Shift a single name from ``PATH_INFO`` to ``SCRIPT_NAME`` and return the name. The *environ* dictionary is *modified* in-place; use a copy if you need to keep the original ``PATH_INFO`` or ``SCRIPT_NAME`` intact."
msgstr ""

msgid "If there are no remaining path segments in ``PATH_INFO``, ``None`` is returned."
msgstr ""

msgid "Typically, this routine is used to process each portion of a request URI path, for example to treat the path as a series of dictionary keys. This routine modifies the passed-in environment to make it suitable for invoking another WSGI application that is located at the target URI. For example, if there is a WSGI application at ``/foo``, and the request URI path is ``/foo/bar/baz``, and the WSGI application at ``/foo`` calls :func:`shift_path_info`, it will receive the string \"bar\", and the environment will be updated to be suitable for passing to a WSGI application at ``/foo/bar``.  That is, ``SCRIPT_NAME`` will change from ``/foo`` to ``/foo/bar``, and ``PATH_INFO`` will change from ``/bar/baz`` to ``/baz``."
msgstr ""

msgid "When ``PATH_INFO`` is just a \"/\", this routine returns an empty string and appends a trailing slash to ``SCRIPT_NAME``, even though empty path segments are normally ignored, and ``SCRIPT_NAME`` doesn't normally end in a slash.  This is intentional behavior, to ensure that an application can tell the difference between URIs ending in ``/x`` from ones ending in ``/x/`` when using this routine to do object traversal."
msgstr ""

msgid "Update *environ* with trivial defaults for testing purposes."
msgstr ""

msgid "This routine adds various parameters required for WSGI, including ``HTTP_HOST``, ``SERVER_NAME``, ``SERVER_PORT``, ``REQUEST_METHOD``, ``SCRIPT_NAME``, ``PATH_INFO``, and all of the :pep:`333`\\ -defined ``wsgi.*`` variables.  It only supplies default values, and does not replace any existing settings for these variables."
msgstr ""

msgid "This routine is intended to make it easier for unit tests of WSGI servers and applications to set up dummy environments.  It should NOT be used by actual WSGI servers or applications, since the data is fake!"
msgstr ""

msgid "from wsgiref.util import setup_testing_defaults from wsgiref.simple_server import make_server  # A relatively simple WSGI application. It's going to print out the # environment dictionary after being updated by setup_testing_defaults def simple_app(environ, start_response):     setup_testing_defaults(environ)      status = b'200 OK'     headers = [(b'Content-type', b'text/plain; charset=utf-8')]      start_response(status, headers)      ret = [(\"%s: %s\\n\" % (key, value)).encode(\"utf-8\")            for key, value in environ.items()]     return ret  httpd = make_server('', 8000, simple_app) print(\"Serving on port 8000...\") httpd.serve_forever()"
msgstr ""

msgid "In addition to the environment functions above, the :mod:`wsgiref.util` module also provides these miscellaneous utilities:"
msgstr ""

msgid "Return true if 'header_name' is an HTTP/1.1 \"Hop-by-Hop\" header, as defined by :rfc:`2616`."
msgstr ""

msgid "A wrapper to convert a file-like object to an :term:`iterator`.  The resulting objects support both :meth:`__getitem__` and :meth:`__iter__` iteration styles, for compatibility with Python 2.1 and Jython. As the object is iterated over, the optional *blksize* parameter will be repeatedly passed to the *filelike* object's :meth:`read` method to obtain strings to yield.  When :meth:`read` returns an empty string, iteration is ended and is not resumable."
msgstr ""

msgid "If *filelike* has a :meth:`close` method, the returned object will also have a :meth:`close` method, and it will invoke the *filelike* object's :meth:`close` method when called."
msgstr ""

msgid "from io import StringIO from wsgiref.util import FileWrapper  # We're using a StringIO-buffer for as the file-like object filelike = StringIO(\"This is an example file-like object\"*10) wrapper = FileWrapper(filelike, blksize=5)  for chunk in wrapper:     print(chunk)"
msgstr ""

msgid ":mod:`wsgiref.headers` -- WSGI response header tools"
msgstr ""

msgid "This module provides a single class, :class:`Headers`, for convenient manipulation of WSGI response headers using a mapping-like interface."
msgstr ""

msgid "Create a mapping-like object wrapping *headers*, which must be a list of header name/value tuples as described in :pep:`333`.  Any changes made to the new :class:`Headers` object will directly update the *headers* list it was created with."
msgstr ""

msgid ":class:`Headers` objects support typical mapping operations including :meth:`__getitem__`, :meth:`get`, :meth:`__setitem__`, :meth:`setdefault`, :meth:`__delitem__` and :meth:`__contains__`.  For each of these methods, the key is the header name (treated case-insensitively), and the value is the first value associated with that header name.  Setting a header deletes any existing values for that header, then adds a new value at the end of the wrapped header list.  Headers' existing order is generally maintained, with new headers added to the end of the wrapped list."
msgstr ""

msgid "Unlike a dictionary, :class:`Headers` objects do not raise an error when you try to get or delete a key that isn't in the wrapped header list. Getting a nonexistent header just returns ``None``, and deleting a nonexistent header does nothing."
msgstr ""

msgid ":class:`Headers` objects also support :meth:`keys`, :meth:`values`, and :meth:`items` methods.  The lists returned by :meth:`keys` and :meth:`items` can include the same key more than once if there is a multi-valued header.  The ``len()`` of a :class:`Headers` object is the same as the length of its :meth:`items`, which is the same as the length of the wrapped header list.  In fact, the :meth:`items` method just returns a copy of the wrapped header list."
msgstr ""

msgid "Calling ``str()`` on a :class:`Headers` object returns a formatted string suitable for transmission as HTTP response headers.  Each header is placed on a line with its value, separated by a colon and a space. Each line is terminated by a carriage return and line feed, and the string is terminated with a blank line."
msgstr ""

msgid "In addition to their mapping interface and formatting features, :class:`Headers` objects also have the following methods for querying and adding multi-valued headers, and for adding headers with MIME parameters:"
msgstr ""

msgid "Return a list of all the values for the named header."
msgstr ""

msgid "The returned list will be sorted in the order they appeared in the original header list or were added to this instance, and may contain duplicates.  Any fields deleted and re-inserted are always appended to the header list.  If no fields exist with the given name, returns an empty list."
msgstr ""

msgid "Add a (possibly multi-valued) header, with optional MIME parameters specified via keyword arguments."
msgstr ""

msgid "*name* is the header field to add.  Keyword arguments can be used to set MIME parameters for the header field.  Each parameter must be a string or ``None``. Underscores in parameter names are converted to dashes, since dashes are illegal in Python identifiers, but many MIME parameter names include dashes.  If the parameter value is a string, it is added to the header value parameters in the form ``name=\"value\"``. If it is ``None``, only the parameter name is added. (This is used for MIME parameters without a value.)  Example usage::"
msgstr ""

msgid "h.add_header('content-disposition', 'attachment', filename='bud.gif')"
msgstr ""

msgid "The above will add a header that looks like this::"
msgstr ""

msgid ":mod:`wsgiref.simple_server` -- a simple WSGI HTTP server"
msgstr ""

msgid "This module implements a simple HTTP server (based on :mod:`http.server`) that serves WSGI applications.  Each server instance serves a single WSGI application on a given host and port.  If you want to serve multiple applications on a single host and port, you should create a WSGI application that parses ``PATH_INFO`` to select which application to invoke for each request.  (E.g., using the :func:`shift_path_info` function from :mod:`wsgiref.util`.)"
msgstr ""

msgid "Create a new WSGI server listening on *host* and *port*, accepting connections for *app*.  The return value is an instance of the supplied *server_class*, and will process requests using the specified *handler_class*.  *app* must be a WSGI application object, as defined by :pep:`333`."
msgstr ""

msgid "from wsgiref.simple_server import make_server, demo_app  httpd = make_server('', 8000, demo_app) print(\"Serving HTTP on port 8000...\")  # Respond to requests until process is killed httpd.serve_forever()  # Alternative: serve one request, then exit httpd.handle_request()"
msgstr ""

msgid "This function is a small but complete WSGI application that returns a text page containing the message \"Hello world!\" and a list of the key/value pairs provided in the *environ* parameter.  It's useful for verifying that a WSGI server (such as :mod:`wsgiref.simple_server`) is able to run a simple WSGI application correctly."
msgstr ""

msgid "Create a :class:`WSGIServer` instance.  *server_address* should be a ``(host,port)`` tuple, and *RequestHandlerClass* should be the subclass of :class:`http.server.BaseHTTPRequestHandler` that will be used to process requests."
msgstr ""

msgid "You do not normally need to call this constructor, as the :func:`make_server` function can handle all the details for you."
msgstr ""

msgid ":class:`WSGIServer` is a subclass of :class:`http.server.HTTPServer`, so all of its methods (such as :meth:`serve_forever` and :meth:`handle_request`) are available. :class:`WSGIServer` also provides these WSGI-specific methods:"
msgstr ""

msgid "Sets the callable *application* as the WSGI application that will receive requests."
msgstr ""

msgid "Returns the currently-set application callable."
msgstr ""

msgid "Normally, however, you do not need to use these additional methods, as :meth:`set_app` is normally called by :func:`make_server`, and the :meth:`get_app` exists mainly for the benefit of request handler instances."
msgstr ""

msgid "Create an HTTP handler for the given *request* (i.e. a socket), *client_address* (a ``(host,port)`` tuple), and *server* (:class:`WSGIServer` instance)."
msgstr ""

msgid "You do not need to create instances of this class directly; they are automatically created as needed by :class:`WSGIServer` objects.  You can, however, subclass this class and supply it as a *handler_class* to the :func:`make_server` function.  Some possibly relevant methods for overriding in subclasses:"
msgstr ""

msgid "Returns a dictionary containing the WSGI environment for a request.  The default implementation copies the contents of the :class:`WSGIServer` object's :attr:`base_environ` dictionary attribute and then adds various headers derived from the HTTP request.  Each call to this method should return a new dictionary containing all of the relevant CGI environment variables as specified in :pep:`333`."
msgstr ""

msgid "Return the object that should be used as the ``wsgi.errors`` stream. The default implementation just returns ``sys.stderr``."
msgstr ""

msgid "Process the HTTP request.  The default implementation creates a handler instance using a :mod:`wsgiref.handlers` class to implement the actual WSGI application interface."
msgstr ""

msgid ":mod:`wsgiref.validate` --- WSGI conformance checker"
msgstr ""

msgid "When creating new WSGI application objects, frameworks, servers, or middleware, it can be useful to validate the new code's conformance using :mod:`wsgiref.validate`.  This module provides a function that creates WSGI application objects that validate communications between a WSGI server or gateway and a WSGI application object, to check both sides for protocol conformance."
msgstr ""

msgid "Note that this utility does not guarantee complete :pep:`333` compliance; an absence of errors from this module does not necessarily mean that errors do not exist.  However, if this module does produce an error, then it is virtually certain that either the server or application is not 100% compliant."
msgstr ""

msgid "This module is based on the :mod:`paste.lint` module from Ian Bicking's \"Python Paste\" library."
msgstr ""

msgid "Wrap *application* and return a new WSGI application object.  The returned application will forward all requests to the original *application*, and will check that both the *application* and the server invoking it are conforming to the WSGI specification and to RFC 2616."
msgstr ""

msgid "Any detected nonconformance results in an :exc:`AssertionError` being raised; note, however, that how these errors are handled is server-dependent.  For example, :mod:`wsgiref.simple_server` and other servers based on :mod:`wsgiref.handlers` (that don't override the error handling methods to do something else) will simply output a message that an error has occurred, and dump the traceback to ``sys.stderr`` or some other error stream."
msgstr ""

msgid "This wrapper may also generate output using the :mod:`warnings` module to indicate behaviors that are questionable but which may not actually be prohibited by :pep:`333`.  Unless they are suppressed using Python command-line options or the :mod:`warnings` API, any such warnings will be written to ``sys.stderr`` (*not* ``wsgi.errors``, unless they happen to be the same object)."
msgstr ""

msgid "from wsgiref.validate import validator from wsgiref.simple_server import make_server  # Our callable object which is intentionally not compliant to the # standard, so the validator is going to break def simple_app(environ, start_response):     status = b'200 OK' # HTTP Status     headers = [(b'Content-type', b'text/plain')] # HTTP Headers     start_response(status, headers)      # This is going to break because we need to return a list, and     # the validator is going to inform us     return b\"Hello World\"  # This is the application wrapped in a validator validator_app = validator(simple_app)  httpd = make_server('', 8000, validator_app) print(\"Listening on port 8000....\") httpd.serve_forever()"
msgstr ""

msgid ":mod:`wsgiref.handlers` -- server/gateway base classes"
msgstr ""

msgid "This module provides base handler classes for implementing WSGI servers and gateways.  These base classes handle most of the work of communicating with a WSGI application, as long as they are given a CGI-like environment, along with input, output, and error streams."
msgstr ""

msgid "CGI-based invocation via ``sys.stdin``, ``sys.stdout``, ``sys.stderr`` and ``os.environ``.  This is useful when you have a WSGI application and want to run it as a CGI script.  Simply invoke ``CGIHandler().run(app)``, where ``app`` is the WSGI application object you wish to invoke."
msgstr ""

msgid "This class is a subclass of :class:`BaseCGIHandler` that sets ``wsgi.run_once`` to true, ``wsgi.multithread`` to false, and ``wsgi.multiprocess`` to true, and always uses :mod:`sys` and :mod:`os` to obtain the necessary CGI streams and environment."
msgstr ""

msgid "Similar to :class:`CGIHandler`, but instead of using the :mod:`sys` and :mod:`os` modules, the CGI environment and I/O streams are specified explicitly. The *multithread* and *multiprocess* values are used to set the ``wsgi.multithread`` and ``wsgi.multiprocess`` flags for any applications run by the handler instance."
msgstr ""

msgid "This class is a subclass of :class:`SimpleHandler` intended for use with software other than HTTP \"origin servers\".  If you are writing a gateway protocol implementation (such as CGI, FastCGI, SCGI, etc.) that uses a ``Status:`` header to send an HTTP status, you probably want to subclass this instead of :class:`SimpleHandler`."
msgstr ""

msgid "Similar to :class:`BaseCGIHandler`, but designed for use with HTTP origin servers.  If you are writing an HTTP server implementation, you will probably want to subclass this instead of :class:`BaseCGIHandler`"
msgstr ""

msgid "This class is a subclass of :class:`BaseHandler`.  It overrides the :meth:`__init__`, :meth:`get_stdin`, :meth:`get_stderr`, :meth:`add_cgi_vars`, :meth:`_write`, and :meth:`_flush` methods to support explicitly setting the environment and streams via the constructor.  The supplied environment and streams are stored in the :attr:`stdin`, :attr:`stdout`, :attr:`stderr`, and :attr:`environ` attributes."
msgstr ""

msgid "This is an abstract base class for running WSGI applications.  Each instance will handle a single HTTP request, although in principle you could create a subclass that was reusable for multiple requests."
msgstr ""

msgid ":class:`BaseHandler` instances have only one method intended for external use:"
msgstr ""

msgid "Run the specified WSGI application, *app*."
msgstr ""

msgid "All of the other :class:`BaseHandler` methods are invoked by this method in the process of running the application, and thus exist primarily to allow customizing the process."
msgstr ""

msgid "The following methods MUST be overridden in a subclass:"
msgstr ""

msgid "Buffer the bytes *data* for transmission to the client.  It's okay if this method actually transmits the data; :class:`BaseHandler` just separates write and flush operations for greater efficiency when the underlying system actually has such a distinction."
msgstr ""

msgid "Force buffered data to be transmitted to the client.  It's okay if this method is a no-op (i.e., if :meth:`_write` actually sends the data)."
msgstr ""

msgid "Return an input stream object suitable for use as the ``wsgi.input`` of the request currently being processed."
msgstr ""

msgid "Return an output stream object suitable for use as the ``wsgi.errors`` of the request currently being processed."
msgstr ""

msgid "Insert CGI variables for the current request into the :attr:`environ` attribute."
msgstr ""

msgid "Here are some other methods and attributes you may wish to override. This list is only a summary, however, and does not include every method that can be overridden.  You should consult the docstrings and source code for additional information before attempting to create a customized :class:`BaseHandler` subclass."
msgstr ""

msgid "Attributes and methods for customizing the WSGI environment:"
msgstr ""

msgid "The value to be used for the ``wsgi.multithread`` environment variable.  It defaults to true in :class:`BaseHandler`, but may have a different default (or be set by the constructor) in the other subclasses."
msgstr ""

msgid "The value to be used for the ``wsgi.multiprocess`` environment variable.  It defaults to true in :class:`BaseHandler`, but may have a different default (or be set by the constructor) in the other subclasses."
msgstr ""

msgid "The value to be used for the ``wsgi.run_once`` environment variable.  It defaults to false in :class:`BaseHandler`, but :class:`CGIHandler` sets it to true by default."
msgstr ""

msgid "The default environment variables to be included in every request's WSGI environment.  By default, this is a copy of ``os.environ`` at the time that :mod:`wsgiref.handlers` was imported, but subclasses can either create their own at the class or instance level.  Note that the dictionary should be considered read-only, since the default value is shared between multiple classes and instances."
msgstr ""

msgid "If the :attr:`origin_server` attribute is set, this attribute's value is used to set the default ``SERVER_SOFTWARE`` WSGI environment variable, and also to set a default ``Server:`` header in HTTP responses.  It is ignored for handlers (such as :class:`BaseCGIHandler` and :class:`CGIHandler`) that are not HTTP origin servers."
msgstr ""

msgid "Return the URL scheme being used for the current request.  The default implementation uses the :func:`guess_scheme` function from :mod:`wsgiref.util` to guess whether the scheme should be \"http\" or \"https\", based on the current request's :attr:`environ` variables."
msgstr ""

msgid "Set the :attr:`environ` attribute to a fully-populated WSGI environment.  The default implementation uses all of the above methods and attributes, plus the :meth:`get_stdin`, :meth:`get_stderr`, and :meth:`add_cgi_vars` methods and the :attr:`wsgi_file_wrapper` attribute.  It also inserts a ``SERVER_SOFTWARE`` key if not present, as long as the :attr:`origin_server` attribute is a true value and the :attr:`server_software` attribute is set."
msgstr ""

msgid "Methods and attributes for customizing exception handling:"
msgstr ""

msgid "Log the *exc_info* tuple in the server log.  *exc_info* is a ``(type, value, traceback)`` tuple.  The default implementation simply writes the traceback to the request's ``wsgi.errors`` stream and flushes it.  Subclasses can override this method to change the format or retarget the output, mail the traceback to an administrator, or whatever other action may be deemed suitable."
msgstr ""

msgid "The maximum number of frames to include in tracebacks output by the default :meth:`log_exception` method.  If ``None``, all frames are included."
msgstr ""

msgid "This method is a WSGI application to generate an error page for the user.  It is only invoked if an error occurs before headers are sent to the client."
msgstr ""

msgid "This method can access the current error information using ``sys.exc_info()``, and should pass that information to *start_response* when calling it (as described in the \"Error Handling\" section of :pep:`333`)."
msgstr ""

msgid "The default implementation just uses the :attr:`error_status`, :attr:`error_headers`, and :attr:`error_body` attributes to generate an output page.  Subclasses can override this to produce more dynamic error output."
msgstr ""

msgid "Note, however, that it's not recommended from a security perspective to spit out diagnostics to any old user; ideally, you should have to do something special to enable diagnostic output, which is why the default implementation doesn't include any."
msgstr ""

msgid "The HTTP status used for error responses.  This should be a status string as defined in :pep:`333`; it defaults to a 500 code and message."
msgstr ""

msgid "The HTTP headers used for error responses.  This should be a list of WSGI response headers (``(name, value)`` tuples), as described in :pep:`333`.  The default list just sets the content type to ``text/plain``."
msgstr ""

msgid "The error response body.  This should be an HTTP response body string. It defaults to the plain text, \"A server error occurred.  Please contact the administrator.\""
msgstr ""

msgid "Methods and attributes for :pep:`333`'s \"Optional Platform-Specific File Handling\" feature:"
msgstr ""

msgid "A ``wsgi.file_wrapper`` factory, or ``None``.  The default value of this attribute is the :class:`FileWrapper` class from :mod:`wsgiref.util`."
msgstr ""

msgid "Override to implement platform-specific file transmission.  This method is called only if the application's return value is an instance of the class specified by the :attr:`wsgi_file_wrapper` attribute.  It should return a true value if it was able to successfully transmit the file, so that the default transmission code will not be executed. The default implementation of this method just returns a false value."
msgstr ""

msgid "Miscellaneous methods and attributes:"
msgstr ""

msgid "This attribute should be set to a true value if the handler's :meth:`_write` and :meth:`_flush` are being used to communicate directly to the client, rather than via a CGI-like gateway protocol that wants the HTTP status in a special ``Status:`` header."
msgstr ""

msgid "This attribute's default value is true in :class:`BaseHandler`, but false in :class:`BaseCGIHandler` and :class:`CGIHandler`."
msgstr ""

msgid "If :attr:`origin_server` is true, this string attribute is used to set the HTTP version of the response set to the client.  It defaults to ``\"1.0\"``."
msgstr ""

msgid "This is a working \"Hello World\" WSGI application::"
msgstr ""

msgid "from wsgiref.simple_server import make_server  # Every WSGI application must have an application object - a callable # object that accepts two arguments. For that purpose, we're going to # use a function (note that you're not limited to a function, you can # use a class for example). The first argument passed to the function # is a dictionary containing CGI-style envrironment variables and the # second variable is the callable object (see :pep:`333`) def hello_world_app(environ, start_response):     status = b'200 OK' # HTTP Status     headers = [(b'Content-type', b'text/plain; charset=utf-8')] # HTTP Headers     start_response(status, headers)      # The returned object is going to be printed     return [b\"Hello World\"]  httpd = make_server('', 8000, hello_world_app) print(\"Serving on port 8000...\")  # Serve until process is killed httpd.serve_forever()"
msgstr ""

msgid ":mod:`xdrlib` --- Encode and decode XDR data"
msgstr ""

msgid "The :mod:`xdrlib` module supports the External Data Representation Standard as described in :rfc:`1014`, written by Sun Microsystems, Inc. June 1987.  It supports most of the data types described in the RFC."
msgstr ""

msgid "The :mod:`xdrlib` module defines two classes, one for packing variables into XDR representation, and another for unpacking from XDR representation.  There are also two exception classes."
msgstr ""

msgid ":class:`Packer` is the class for packing data into XDR representation. The :class:`Packer` class is instantiated with no arguments."
msgstr ""

msgid "``Unpacker`` is the complementary class which unpacks XDR data values from a string buffer.  The input buffer is given as *data*."
msgstr ""

msgid "This RFC defined the encoding of data which was XDR at the time this module was originally written.  It has apparently been obsoleted by :rfc:`1832`."
msgstr ""

msgid "Newer RFC that provides a revised definition of XDR."
msgstr ""

msgid "Packer Objects"
msgstr ""

msgid ":class:`Packer` instances have the following methods:"
msgstr ""

msgid "Returns the current pack buffer as a string."
msgstr ""

msgid "Resets the pack buffer to the empty string."
msgstr ""

msgid "In general, you can pack any of the most common XDR data types by calling the appropriate ``pack_type()`` method.  Each method takes a single argument, the value to pack.  The following simple data type packing methods are supported: :meth:`pack_uint`, :meth:`pack_int`, :meth:`pack_enum`, :meth:`pack_bool`, :meth:`pack_uhyper`, and :meth:`pack_hyper`."
msgstr ""

msgid "Packs the single-precision floating point number *value*."
msgstr ""

msgid "Packs the double-precision floating point number *value*."
msgstr ""

msgid "The following methods support packing strings, bytes, and opaque data:"
msgstr ""

msgid "Packs a fixed length string, *s*.  *n* is the length of the string but it is *not* packed into the data buffer.  The string is padded with null bytes if necessary to guaranteed 4 byte alignment."
msgstr ""

msgid "Packs a fixed length opaque data stream, similarly to :meth:`pack_fstring`."
msgstr ""

msgid "Packs a variable length string, *s*.  The length of the string is first packed as an unsigned integer, then the string data is packed with :meth:`pack_fstring`."
msgstr ""

msgid "Packs a variable length opaque data string, similarly to :meth:`pack_string`."
msgstr ""

msgid "Packs a variable length byte stream, similarly to :meth:`pack_string`."
msgstr ""

msgid "The following methods support packing arrays and lists:"
msgstr ""

msgid "Packs a *list* of homogeneous items.  This method is useful for lists with an indeterminate size; i.e. the size is not available until the entire list has been walked.  For each item in the list, an unsigned integer ``1`` is packed first, followed by the data value from the list.  *pack_item* is the function that is called to pack the individual item.  At the end of the list, an unsigned integer ``0`` is packed."
msgstr ""

msgid "For example, to pack a list of integers, the code might appear like this::"
msgstr ""

msgid "import xdrlib p = xdrlib.Packer() p.pack_list([1, 2, 3], p.pack_int)"
msgstr ""

msgid "Packs a fixed length list (*array*) of homogeneous items.  *n* is the length of the list; it is *not* packed into the buffer, but a :exc:`ValueError` exception is raised if ``len(array)`` is not equal to *n*.  As above, *pack_item* is the function used to pack each element."
msgstr ""

msgid "Packs a variable length *list* of homogeneous items.  First, the length of the list is packed as an unsigned integer, then each element is packed as in :meth:`pack_farray` above."
msgstr ""

msgid "Unpacker Objects"
msgstr ""

msgid "The :class:`Unpacker` class offers the following methods:"
msgstr ""

msgid "Resets the string buffer with the given *data*."
msgstr ""

msgid "Returns the current unpack position in the data buffer."
msgstr ""

msgid "Sets the data buffer unpack position to *position*.  You should be careful about using :meth:`get_position` and :meth:`set_position`."
msgstr ""

msgid "Returns the current unpack data buffer as a string."
msgstr ""

msgid "Indicates unpack completion.  Raises an :exc:`Error` exception if all of the data has not been unpacked."
msgstr ""

msgid "In addition, every data type that can be packed with a :class:`Packer`, can be unpacked with an :class:`Unpacker`.  Unpacking methods are of the form ``unpack_type()``, and take no arguments.  They return the unpacked object."
msgstr ""

msgid "Unpacks a single-precision floating point number."
msgstr ""

msgid "Unpacks a double-precision floating point number, similarly to :meth:`unpack_float`."
msgstr ""

msgid "In addition, the following methods unpack strings, bytes, and opaque data:"
msgstr ""

msgid "Unpacks and returns a fixed length string.  *n* is the number of characters expected.  Padding with null bytes to guaranteed 4 byte alignment is assumed."
msgstr ""

msgid "Unpacks and returns a fixed length opaque data stream, similarly to :meth:`unpack_fstring`."
msgstr ""

msgid "Unpacks and returns a variable length string.  The length of the string is first unpacked as an unsigned integer, then the string data is unpacked with :meth:`unpack_fstring`."
msgstr ""

msgid "Unpacks and returns a variable length opaque data string, similarly to :meth:`unpack_string`."
msgstr ""

msgid "Unpacks and returns a variable length byte stream, similarly to :meth:`unpack_string`."
msgstr ""

msgid "The following methods support unpacking arrays and lists:"
msgstr ""

msgid "Unpacks and returns a list of homogeneous items.  The list is unpacked one element at a time by first unpacking an unsigned integer flag.  If the flag is ``1``, then the item is unpacked and appended to the list.  A flag of ``0`` indicates the end of the list.  *unpack_item* is the function that is called to unpack the items."
msgstr ""

msgid "Unpacks and returns (as a list) a fixed length array of homogeneous items.  *n* is number of list elements to expect in the buffer. As above, *unpack_item* is the function used to unpack each element."
msgstr ""

msgid "Unpacks and returns a variable length *list* of homogeneous items. First, the length of the list is unpacked as an unsigned integer, then each element is unpacked as in :meth:`unpack_farray` above."
msgstr ""

msgid "Exceptions in this module are coded as class instances:"
msgstr ""

msgid "The base exception class.  :exc:`Error` has a single public data member :attr:`msg` containing the description of the error."
msgstr ""

msgid "Class derived from :exc:`Error`.  Contains no additional instance variables."
msgstr ""

msgid "Here is an example of how you would catch one of these exceptions::"
msgstr ""

msgid "import xdrlib p = xdrlib.Packer() try:     p.pack_double(8.01) except xdrlib.ConversionError as instance:     print('packing the double failed:', instance.msg)"
msgstr ""

msgid ":mod:`xml.dom` --- The Document Object Model API"
msgstr ""

msgid "The Document Object Model, or \"DOM,\" is a cross-language API from the World Wide Web Consortium (W3C) for accessing and modifying XML documents.  A DOM implementation presents an XML document as a tree structure, or allows client code to build such a structure from scratch.  It then gives access to the structure through a set of objects which provided well-known interfaces."
msgstr ""

msgid "The DOM is extremely useful for random-access applications.  SAX only allows you a view of one bit of the document at a time.  If you are looking at one SAX element, you have no access to another.  If you are looking at a text node, you have no access to a containing element. When you write a SAX application, you need to keep track of your program's position in the document somewhere in your own code.  SAX does not do it for you.  Also, if you need to look ahead in the XML document, you are just out of luck."
msgstr ""

msgid "Some applications are simply impossible in an event driven model with no access to a tree.  Of course you could build some sort of tree yourself in SAX events, but the DOM allows you to avoid writing that code.  The DOM is a standard tree representation for XML data."
msgstr ""

msgid "The Document Object Model is being defined by the W3C in stages, or \"levels\" in their terminology.  The Python mapping of the API is substantially based on the DOM Level 2 recommendation."
msgstr ""

msgid "DOM applications typically start by parsing some XML into a DOM.  How this is accomplished is not covered at all by DOM Level 1, and Level 2 provides only limited improvements: There is a :class:`DOMImplementation` object class which provides access to :class:`Document` creation methods, but no way to access an XML reader/parser/Document builder in an implementation-independent way. There is also no well-defined way to access these methods without an existing :class:`Document` object.  In Python, each DOM implementation will provide a function :func:`getDOMImplementation`. DOM Level 3 adds a Load/Store specification, which defines an interface to the reader, but this is not yet available in the Python standard library."
msgstr ""

msgid "Once you have a DOM document object, you can access the parts of your XML document through its properties and methods.  These properties are defined in the DOM specification; this portion of the reference manual describes the interpretation of the specification in Python."
msgstr ""

msgid "The specification provided by the W3C defines the DOM API for Java, ECMAScript, and OMG IDL.  The Python mapping defined here is based in large part on the IDL version of the specification, but strict compliance is not required (though implementations are free to support the strict mapping from IDL).  See section :ref:`dom-conformance` for a detailed discussion of mapping requirements."
msgstr ""

msgid "The W3C recommendation upon which the Python DOM API is based."
msgstr ""

msgid "The W3C recommendation for the DOM supported by :mod:`xml.dom.minidom`."
msgstr ""

msgid "This specifies the mapping from OMG IDL to Python."
msgstr ""

msgid "The :mod:`xml.dom` contains the following functions:"
msgstr ""

msgid "Register the *factory* function with the name *name*.  The factory function should return an object which implements the :class:`DOMImplementation` interface.  The factory function can return the same object every time, or a new one for each call, as appropriate for the specific implementation (e.g. if that implementation supports some customization)."
msgstr ""

msgid "Return a suitable DOM implementation. The *name* is either well-known, the module name of a DOM implementation, or ``None``. If it is not ``None``, imports the corresponding module and returns a :class:`DOMImplementation` object if the import succeeds.  If no name is given, and if the environment variable :envvar:`PYTHON_DOM` is set, this variable is used to find the implementation."
msgstr ""

msgid "If name is not given, this examines the available implementations to find one with the required feature set.  If no implementation can be found, raise an :exc:`ImportError`.  The features list must be a sequence of ``(feature, version)`` pairs which are passed to the :meth:`hasFeature` method on available :class:`DOMImplementation` objects."
msgstr ""

msgid "Some convenience constants are also provided:"
msgstr ""

msgid "The value used to indicate that no namespace is associated with a node in the DOM.  This is typically found as the :attr:`namespaceURI` of a node, or used as the *namespaceURI* parameter to a namespaces-specific method."
msgstr ""

msgid "The namespace URI associated with the reserved prefix ``xml``, as defined by `Namespaces in XML <http://www.w3.org/TR/REC-xml-names/>`_ (section 4)."
msgstr ""

msgid "The namespace URI for namespace declarations, as defined by `Document Object Model (DOM) Level 2 Core Specification <http://www.w3.org/TR/DOM-Level-2-Core/core.html>`_ (section 1.1.8)."
msgstr ""

msgid "The URI of the XHTML namespace as defined by `XHTML 1.0: The Extensible HyperText Markup Language <http://www.w3.org/TR/xhtml1/>`_ (section 3.1.1)."
msgstr ""

msgid "In addition, :mod:`xml.dom` contains a base :class:`Node` class and the DOM exception classes.  The :class:`Node` class provided by this module does not implement any of the methods or attributes defined by the DOM specification; concrete DOM implementations must provide those.  The :class:`Node` class provided as part of this module does provide the constants used for the :attr:`nodeType` attribute on concrete :class:`Node` objects; they are located within the class rather than at the module level to conform with the DOM specifications."
msgstr ""

msgid "Objects in the DOM"
msgstr ""

msgid "The definitive documentation for the DOM is the DOM specification from the W3C."
msgstr ""

msgid "Note that DOM attributes may also be manipulated as nodes instead of as simple strings.  It is fairly rare that you must do this, however, so this usage is not yet documented."
msgstr ""

msgid "Interface"
msgstr ""

msgid "Section"
msgstr ""

msgid ":class:`DOMImplementation`"
msgstr ""

msgid ":ref:`dom-implementation-objects`"
msgstr ""

msgid "Interface to the underlying implementation."
msgstr ""

msgid ":class:`Node`"
msgstr ""

msgid ":ref:`dom-node-objects`"
msgstr ""

msgid "Base interface for most objects in a document."
msgstr ""

msgid ":class:`NodeList`"
msgstr ""

msgid ":ref:`dom-nodelist-objects`"
msgstr ""

msgid "Interface for a sequence of nodes."
msgstr ""

msgid ":class:`DocumentType`"
msgstr ""

msgid ":ref:`dom-documenttype-objects`"
msgstr ""

msgid "Information about the declarations needed to process a document."
msgstr ""

msgid ":class:`Document`"
msgstr ""

msgid ":ref:`dom-document-objects`"
msgstr ""

msgid "Object which represents an entire document."
msgstr ""

msgid ":class:`Element`"
msgstr ""

msgid ":ref:`dom-element-objects`"
msgstr ""

msgid "Element nodes in the document hierarchy."
msgstr ""

msgid ":class:`Attr`"
msgstr ""

msgid ":ref:`dom-attr-objects`"
msgstr ""

msgid "Attribute value nodes on element nodes."
msgstr ""

msgid ":class:`Comment`"
msgstr ""

msgid ":ref:`dom-comment-objects`"
msgstr ""

msgid "Representation of comments in the source document."
msgstr ""

msgid ":class:`Text`"
msgstr ""

msgid ":ref:`dom-text-objects`"
msgstr ""

msgid "Nodes containing textual content from the document."
msgstr ""

msgid ":class:`ProcessingInstruction`"
msgstr ""

msgid ":ref:`dom-pi-objects`"
msgstr ""

msgid "Processing instruction representation."
msgstr ""

msgid "An additional section describes the exceptions defined for working with the DOM in Python."
msgstr ""

msgid "DOMImplementation Objects"
msgstr ""

msgid "The :class:`DOMImplementation` interface provides a way for applications to determine the availability of particular features in the DOM they are using. DOM Level 2 added the ability to create new :class:`Document` and :class:`DocumentType` objects using the :class:`DOMImplementation` as well."
msgstr ""

msgid "Return true if the feature identified by the pair of strings *feature* and *version* is implemented."
msgstr ""

msgid "Return a new :class:`Document` object (the root of the DOM), with a child :class:`Element` object having the given *namespaceUri* and *qualifiedName*. The *doctype* must be a :class:`DocumentType` object created by :meth:`createDocumentType`, or ``None``. In the Python DOM API, the first two arguments can also be ``None`` in order to indicate that no :class:`Element` child is to be created."
msgstr ""

msgid "Return a new :class:`DocumentType` object that encapsulates the given *qualifiedName*, *publicId*, and *systemId* strings, representing the information contained in an XML document type declaration."
msgstr ""

msgid "Node Objects"
msgstr ""

msgid "All of the components of an XML document are subclasses of :class:`Node`."
msgstr ""

msgid "An integer representing the node type.  Symbolic constants for the types are on the :class:`Node` object: :const:`ELEMENT_NODE`, :const:`ATTRIBUTE_NODE`, :const:`TEXT_NODE`, :const:`CDATA_SECTION_NODE`, :const:`ENTITY_NODE`, :const:`PROCESSING_INSTRUCTION_NODE`, :const:`COMMENT_NODE`, :const:`DOCUMENT_NODE`, :const:`DOCUMENT_TYPE_NODE`, :const:`NOTATION_NODE`. This is a read-only attribute."
msgstr ""

msgid "The parent of the current node, or ``None`` for the document node. The value is always a :class:`Node` object or ``None``.  For :class:`Element` nodes, this will be the parent element, except for the root element, in which case it will be the :class:`Document` object. For :class:`Attr` nodes, this is always ``None``. This is a read-only attribute."
msgstr ""

msgid "A :class:`NamedNodeMap` of attribute objects.  Only elements have actual values for this; others provide ``None`` for this attribute. This is a read-only attribute."
msgstr ""

msgid "The node that immediately precedes this one with the same parent.  For instance the element with an end-tag that comes just before the *self* element's start-tag.  Of course, XML documents are made up of more than just elements so the previous sibling could be text, a comment, or something else. If this node is the first child of the parent, this attribute will be ``None``. This is a read-only attribute."
msgstr ""

msgid "The node that immediately follows this one with the same parent.  See also :attr:`previousSibling`.  If this is the last child of the parent, this attribute will be ``None``. This is a read-only attribute."
msgstr ""

msgid "A list of nodes contained within this node. This is a read-only attribute."
msgstr ""

msgid "The first child of the node, if there are any, or ``None``. This is a read-only attribute."
msgstr ""

msgid "The last child of the node, if there are any, or ``None``. This is a read-only attribute."
msgstr ""

msgid "The part of the :attr:`tagName` following the colon if there is one, else the entire :attr:`tagName`.  The value is a string."
msgstr ""

msgid "The part of the :attr:`tagName` preceding the colon if there is one, else the empty string.  The value is a string, or ``None``"
msgstr ""

msgid "The namespace associated with the element name.  This will be a string or ``None``.  This is a read-only attribute."
msgstr ""

msgid "This has a different meaning for each node type; see the DOM specification for details.  You can always get the information you would get here from another property such as the :attr:`tagName` property for elements or the :attr:`name` property for attributes. For all node types, the value of this attribute will be either a string or ``None``.  This is a read-only attribute."
msgstr ""

msgid "This has a different meaning for each node type; see the DOM specification for details.  The situation is similar to that with :attr:`nodeName`.  The value is a string or ``None``."
msgstr ""

msgid "Returns true if the node has any attributes."
msgstr ""

msgid "Returns true if the node has any child nodes."
msgstr ""

msgid "Returns true if *other* refers to the same node as this node. This is especially useful for DOM implementations which use any sort of proxy architecture (because more than one object can refer to the same node)."
msgstr ""

msgid "This is based on a proposed DOM Level 3 API which is still in the \"working draft\" stage, but this particular interface appears uncontroversial.  Changes from the W3C will not necessarily affect this method in the Python DOM interface (though any new W3C API for this would also be supported)."
msgstr ""

msgid "Add a new child node to this node at the end of the list of children, returning *newChild*. If the node was already in in the tree, it is removed first."
msgstr ""

msgid "Insert a new child node before an existing child.  It must be the case that *refChild* is a child of this node; if not, :exc:`ValueError` is raised. *newChild* is returned. If *refChild* is ``None``, it inserts *newChild* at the end of the children's list."
msgstr ""

msgid "Remove a child node.  *oldChild* must be a child of this node; if not, :exc:`ValueError` is raised.  *oldChild* is returned on success.  If *oldChild* will not be used further, its :meth:`unlink` method should be called."
msgstr ""

msgid "Replace an existing node with a new node. It must be the case that  *oldChild* is a child of this node; if not, :exc:`ValueError` is raised."
msgstr ""

msgid "Join adjacent text nodes so that all stretches of text are stored as single :class:`Text` instances.  This simplifies processing text from a DOM tree for many applications."
msgstr ""

msgid "Clone this node.  Setting *deep* means to clone all child nodes as well.  This returns the clone."
msgstr ""

msgid "NodeList Objects"
msgstr ""

msgid "A :class:`NodeList` represents a sequence of nodes.  These objects are used in two ways in the DOM Core recommendation:  the :class:`Element` objects provides one as its list of child nodes, and the :meth:`getElementsByTagName` and :meth:`getElementsByTagNameNS` methods of :class:`Node` return objects with this interface to represent query results."
msgstr ""

msgid "The DOM Level 2 recommendation defines one method and one attribute for these objects:"
msgstr ""

msgid "Return the *i*'th item from the sequence, if there is one, or ``None``.  The index *i* is not allowed to be less then zero or greater than or equal to the length of the sequence."
msgstr ""

msgid "The number of nodes in the sequence."
msgstr ""

msgid "In addition, the Python DOM interface requires that some additional support is provided to allow :class:`NodeList` objects to be used as Python sequences.  All :class:`NodeList` implementations must include support for :meth:`__len__` and :meth:`__getitem__`; this allows iteration over the :class:`NodeList` in :keyword:`for` statements and proper support for the :func:`len` built-in function."
msgstr ""

msgid "If a DOM implementation supports modification of the document, the :class:`NodeList` implementation must also support the :meth:`__setitem__` and :meth:`__delitem__` methods."
msgstr ""

msgid "DocumentType Objects"
msgstr ""

msgid "Information about the notations and entities declared by a document (including the external subset if the parser uses it and can provide the information) is available from a :class:`DocumentType` object.  The :class:`DocumentType` for a document is available from the :class:`Document` object's :attr:`doctype` attribute; if there is no ``DOCTYPE`` declaration for the document, the document's :attr:`doctype` attribute will be set to ``None`` instead of an instance of this interface."
msgstr ""

msgid ":class:`DocumentType` is a specialization of :class:`Node`, and adds the following attributes:"
msgstr ""

msgid "The public identifier for the external subset of the document type definition. This will be a string or ``None``."
msgstr ""

msgid "The system identifier for the external subset of the document type definition. This will be a URI as a string, or ``None``."
msgstr ""

msgid "A string giving the complete internal subset from the document. This does not include the brackets which enclose the subset.  If the document has no internal subset, this should be ``None``."
msgstr ""

msgid "The name of the root element as given in the ``DOCTYPE`` declaration, if present."
msgstr ""

msgid "This is a :class:`NamedNodeMap` giving the definitions of external entities. For entity names defined more than once, only the first definition is provided (others are ignored as required by the XML recommendation).  This may be ``None`` if the information is not provided by the parser, or if no entities are defined."
msgstr ""

msgid "This is a :class:`NamedNodeMap` giving the definitions of notations. For notation names defined more than once, only the first definition is provided (others are ignored as required by the XML recommendation).  This may be ``None`` if the information is not provided by the parser, or if no notations are defined."
msgstr ""

msgid "Document Objects"
msgstr ""

msgid "A :class:`Document` represents an entire XML document, including its constituent elements, attributes, processing instructions, comments etc.  Remember that it inherits properties from :class:`Node`."
msgstr ""

msgid "The one and only root element of the document."
msgstr ""

msgid "Create and return a new element node.  The element is not inserted into the document when it is created.  You need to explicitly insert it with one of the other methods such as :meth:`insertBefore` or :meth:`appendChild`."
msgstr ""

msgid "Create and return a new element with a namespace.  The *tagName* may have a prefix.  The element is not inserted into the document when it is created.  You need to explicitly insert it with one of the other methods such as :meth:`insertBefore` or :meth:`appendChild`."
msgstr ""

msgid "Create and return a text node containing the data passed as a parameter.  As with the other creation methods, this one does not insert the node into the tree."
msgstr ""

msgid "Create and return a comment node containing the data passed as a parameter.  As with the other creation methods, this one does not insert the node into the tree."
msgstr ""

msgid "Create and return a processing instruction node containing the *target* and *data* passed as parameters.  As with the other creation methods, this one does not insert the node into the tree."
msgstr ""

msgid "Create and return an attribute node.  This method does not associate the attribute node with any particular element.  You must use :meth:`setAttributeNode` on the appropriate :class:`Element` object to use the newly created attribute instance."
msgstr ""

msgid "Create and return an attribute node with a namespace.  The *tagName* may have a prefix.  This method does not associate the attribute node with any particular element.  You must use :meth:`setAttributeNode` on the appropriate :class:`Element` object to use the newly created attribute instance."
msgstr ""

msgid "Search for all descendants (direct children, children's children, etc.) with a particular element type name."
msgstr ""

msgid "Search for all descendants (direct children, children's children, etc.) with a particular namespace URI and localname.  The localname is the part of the namespace after the prefix."
msgstr ""

msgid "Element Objects"
msgstr ""

msgid ":class:`Element` is a subclass of :class:`Node`, so inherits all the attributes of that class."
msgstr ""

msgid "The element type name.  In a namespace-using document it may have colons in it. The value is a string."
msgstr ""

msgid "Same as equivalent method in the :class:`Document` class."
msgstr ""

msgid "Returns true if the element has an attribute named by *name*."
msgstr ""

msgid "Returns true if the element has an attribute named by *namespaceURI* and *localName*."
msgstr ""

msgid "Return the value of the attribute named by *name* as a string. If no such attribute exists, an empty string is returned, as if the attribute had no value."
msgstr ""

msgid "Return the :class:`Attr` node for the attribute named by *attrname*."
msgstr ""

msgid "Return the value of the attribute named by *namespaceURI* and *localName* as a string. If no such attribute exists, an empty string is returned, as if the attribute had no value."
msgstr ""

msgid "Return an attribute value as a node, given a *namespaceURI* and *localName*."
msgstr ""

msgid "Remove an attribute by name.  If there is no matching attribute, a :exc:`NotFoundErr` is raised."
msgstr ""

msgid "Remove and return *oldAttr* from the attribute list, if present. If *oldAttr* is not present, :exc:`NotFoundErr` is raised."
msgstr ""

msgid "Remove an attribute by name.  Note that it uses a localName, not a qname.  No exception is raised if there is no matching attribute."
msgstr ""

msgid "Set an attribute value from a string."
msgstr ""

msgid "Add a new attribute node to the element, replacing an existing attribute if necessary if the :attr:`name` attribute matches.  If a replacement occurs, the old attribute node will be returned.  If *newAttr* is already in use, :exc:`InuseAttributeErr` will be raised."
msgstr ""

msgid "Add a new attribute node to the element, replacing an existing attribute if necessary if the :attr:`namespaceURI` and :attr:`localName` attributes match. If a replacement occurs, the old attribute node will be returned.  If *newAttr* is already in use, :exc:`InuseAttributeErr` will be raised."
msgstr ""

msgid "Set an attribute value from a string, given a *namespaceURI* and a *qname*. Note that a qname is the whole attribute name.  This is different than above."
msgstr ""

msgid "Attr Objects"
msgstr ""

msgid ":class:`Attr` inherits from :class:`Node`, so inherits all its attributes."
msgstr ""

msgid "The attribute name. In a namespace-using document it may include a colon."
msgstr ""

msgid "The part of the name following the colon if there is one, else the entire name. This is a read-only attribute."
msgstr ""

msgid "The part of the name preceding the colon if there is one, else the empty string."
msgstr ""

msgid "The text value of the attribute.  This is a synonym for the :attr:`nodeValue` attribute."
msgstr ""

msgid "NamedNodeMap Objects"
msgstr ""

msgid ":class:`NamedNodeMap` does *not* inherit from :class:`Node`."
msgstr ""

msgid "The length of the attribute list."
msgstr ""

msgid "Return an attribute with a particular index.  The order you get the attributes in is arbitrary but will be consistent for the life of a DOM.  Each item is an attribute node.  Get its value with the :attr:`value` attribute."
msgstr ""

msgid "There are also experimental methods that give this class more mapping behavior. You can use them or you can use the standardized :meth:`getAttribute\\*` family of methods on the :class:`Element` objects."
msgstr ""

msgid "Comment Objects"
msgstr ""

msgid ":class:`Comment` represents a comment in the XML document.  It is a subclass of :class:`Node`, but cannot have child nodes."
msgstr ""

msgid "The content of the comment as a string.  The attribute contains all characters between the leading ``<!-``\\ ``-`` and trailing ``-``\\ ``->``, but does not include them."
msgstr ""

msgid "Text and CDATASection Objects"
msgstr ""

msgid "The :class:`Text` interface represents text in the XML document.  If the parser and DOM implementation support the DOM's XML extension, portions of the text enclosed in CDATA marked sections are stored in :class:`CDATASection` objects. These two interfaces are identical, but provide different values for the :attr:`nodeType` attribute."
msgstr ""

msgid "These interfaces extend the :class:`Node` interface.  They cannot have child nodes."
msgstr ""

msgid "The content of the text node as a string."
msgstr ""

msgid "The use of a :class:`CDATASection` node does not indicate that the node represents a complete CDATA marked section, only that the content of the node was part of a CDATA section.  A single CDATA section may be represented by more than one node in the document tree.  There is no way to determine whether two adjacent :class:`CDATASection` nodes represent different CDATA marked sections."
msgstr ""

msgid "ProcessingInstruction Objects"
msgstr ""

msgid "Represents a processing instruction in the XML document; this inherits from the :class:`Node` interface and cannot have child nodes."
msgstr ""

msgid "The content of the processing instruction up to the first whitespace character. This is a read-only attribute."
msgstr ""

msgid "The content of the processing instruction following the first whitespace character."
msgstr ""

msgid "The DOM Level 2 recommendation defines a single exception, :exc:`DOMException`, and a number of constants that allow applications to determine what sort of error occurred. :exc:`DOMException` instances carry a :attr:`code` attribute that provides the appropriate value for the specific exception."
msgstr ""

msgid "The Python DOM interface provides the constants, but also expands the set of exceptions so that a specific exception exists for each of the exception codes defined by the DOM.  The implementations must raise the appropriate specific exception, each of which carries the appropriate value for the :attr:`code` attribute."
msgstr ""

msgid "Base exception class used for all specific DOM exceptions.  This exception class cannot be directly instantiated."
msgstr ""

msgid "Raised when a specified range of text does not fit into a string. This is not known to be used in the Python DOM implementations, but may be received from DOM implementations not written in Python."
msgstr ""

msgid "Raised when an attempt is made to insert a node where the node type is not allowed."
msgstr ""

msgid "Raised when an index or size parameter to a method is negative or exceeds the allowed values."
msgstr ""

msgid "Raised when an attempt is made to insert an :class:`Attr` node that is already present elsewhere in the document."
msgstr ""

msgid "Raised if a parameter or an operation is not supported on the underlying object."
msgstr ""

msgid "This exception is raised when a string parameter contains a character that is not permitted in the context it's being used in by the XML 1.0 recommendation. For example, attempting to create an :class:`Element` node with a space in the element type name will cause this error to be raised."
msgstr ""

msgid "Raised when an attempt is made to modify the type of a node."
msgstr ""

msgid "Raised when an attempt is made to use an object that is not defined or is no longer usable."
msgstr ""

msgid "If an attempt is made to change any object in a way that is not permitted with regard to the `Namespaces in XML <http://www.w3.org/TR/REC-xml-names/>`_ recommendation, this exception is raised."
msgstr ""

msgid "Exception when a node does not exist in the referenced context.  For example, :meth:`NamedNodeMap.removeNamedItem` will raise this if the node passed in does not exist in the map."
msgstr ""

msgid "Raised when the implementation does not support the requested type of object or operation."
msgstr ""

msgid "This is raised if data is specified for a node which does not support data."
msgstr ""

msgid "Raised on attempts to modify an object where modifications are not allowed (such as for read-only nodes)."
msgstr ""

msgid "Raised when an invalid or illegal string is specified."
msgstr ""

msgid "Raised when a node is inserted in a different document than it currently belongs to, and the implementation does not support migrating the node from one document to the other."
msgstr ""

msgid "The exception codes defined in the DOM recommendation map to the exceptions described above according to this table:"
msgstr ""

msgid "Exception"
msgstr ""

msgid ":const:`DOMSTRING_SIZE_ERR`"
msgstr ""

msgid ":exc:`DomstringSizeErr`"
msgstr ""

msgid ":const:`HIERARCHY_REQUEST_ERR`"
msgstr ""

msgid ":exc:`HierarchyRequestErr`"
msgstr ""

msgid ":const:`INDEX_SIZE_ERR`"
msgstr ""

msgid ":exc:`IndexSizeErr`"
msgstr ""

msgid ":const:`INUSE_ATTRIBUTE_ERR`"
msgstr ""

msgid ":exc:`InuseAttributeErr`"
msgstr ""

msgid ":const:`INVALID_ACCESS_ERR`"
msgstr ""

msgid ":exc:`InvalidAccessErr`"
msgstr ""

msgid ":const:`INVALID_CHARACTER_ERR`"
msgstr ""

msgid ":exc:`InvalidCharacterErr`"
msgstr ""

msgid ":const:`INVALID_MODIFICATION_ERR`"
msgstr ""

msgid ":exc:`InvalidModificationErr`"
msgstr ""

msgid ":const:`INVALID_STATE_ERR`"
msgstr ""

msgid ":exc:`InvalidStateErr`"
msgstr ""

msgid ":const:`NAMESPACE_ERR`"
msgstr ""

msgid ":exc:`NamespaceErr`"
msgstr ""

msgid ":const:`NOT_FOUND_ERR`"
msgstr ""

msgid ":exc:`NotFoundErr`"
msgstr ""

msgid ":const:`NOT_SUPPORTED_ERR`"
msgstr ""

msgid ":exc:`NotSupportedErr`"
msgstr ""

msgid ":const:`NO_DATA_ALLOWED_ERR`"
msgstr ""

msgid ":exc:`NoDataAllowedErr`"
msgstr ""

msgid ":const:`NO_MODIFICATION_ALLOWED_ERR`"
msgstr ""

msgid ":exc:`NoModificationAllowedErr`"
msgstr ""

msgid ":const:`SYNTAX_ERR`"
msgstr ""

msgid ":exc:`SyntaxErr`"
msgstr ""

msgid ":const:`WRONG_DOCUMENT_ERR`"
msgstr ""

msgid ":exc:`WrongDocumentErr`"
msgstr ""

msgid "Conformance"
msgstr ""

msgid "This section describes the conformance requirements and relationships between the Python DOM API, the W3C DOM recommendations, and the OMG IDL mapping for Python."
msgstr ""

msgid "Type Mapping"
msgstr ""

msgid "The primitive IDL types used in the DOM specification are mapped to Python types according to the following table."
msgstr ""

msgid "IDL Type"
msgstr ""

msgid "``boolean``"
msgstr ""

msgid "``IntegerType`` (with a value of ``0`` or ``1``)"
msgstr ""

msgid "``int``"
msgstr ""

msgid "``IntegerType``"
msgstr ""

msgid "``long int``"
msgstr ""

msgid "``unsigned int``"
msgstr ""

msgid "Additionally, the :class:`DOMString` defined in the recommendation is mapped to a bytes or string object.  Applications should be able to handle Unicode whenever a string is returned from the DOM."
msgstr ""

msgid "The IDL ``null`` value is mapped to ``None``, which may be accepted or provided by the implementation whenever ``null`` is allowed by the API."
msgstr ""

msgid "Accessor Methods"
msgstr ""

msgid "The mapping from OMG IDL to Python defines accessor functions for IDL ``attribute`` declarations in much the way the Java mapping does. Mapping the IDL declarations ::"
msgstr ""

msgid "readonly attribute string someValue;          attribute string anotherValue;"
msgstr ""

msgid "yields three accessor functions:  a \"get\" method for :attr:`someValue` (:meth:`_get_someValue`), and \"get\" and \"set\" methods for :attr:`anotherValue` (:meth:`_get_anotherValue` and :meth:`_set_anotherValue`).  The mapping, in particular, does not require that the IDL attributes are accessible as normal Python attributes:  ``object.someValue`` is *not* required to work, and may raise an :exc:`AttributeError`."
msgstr ""

msgid "The Python DOM API, however, *does* require that normal attribute access work. This means that the typical surrogates generated by Python IDL compilers are not likely to work, and wrapper objects may be needed on the client if the DOM objects are accessed via CORBA. While this does require some additional consideration for CORBA DOM clients, the implementers with experience using DOM over CORBA from Python do not consider this a problem.  Attributes that are declared ``readonly`` may not restrict write access in all DOM implementations."
msgstr ""

msgid "In the Python DOM API, accessor functions are not required.  If provided, they should take the form defined by the Python IDL mapping, but these methods are considered unnecessary since the attributes are accessible directly from Python. \"Set\" accessors should never be provided for ``readonly`` attributes."
msgstr ""

msgid "The IDL definitions do not fully embody the requirements of the W3C DOM API, such as the notion of certain objects, such as the return value of :meth:`getElementsByTagName`, being \"live\".  The Python DOM API does not require implementations to enforce such requirements."
msgstr ""

msgid ":mod:`xml.dom.minidom` --- Lightweight DOM implementation"
msgstr ""

msgid ":mod:`xml.dom.minidom` is a light-weight implementation of the Document Object Model interface.  It is intended to be simpler than the full DOM and also significantly smaller."
msgstr ""

msgid "DOM applications typically start by parsing some XML into a DOM.  With :mod:`xml.dom.minidom`, this is done through the parse functions::"
msgstr ""

msgid "from xml.dom.minidom import parse, parseString  dom1 = parse('c:\\\\temp\\\\mydata.xml') # parse an XML file by name  datasource = open('c:\\\\temp\\\\mydata.xml') dom2 = parse(datasource)   # parse an open file  dom3 = parseString('<myxml>Some data<empty/> some more data</myxml>')"
msgstr ""

msgid "The :func:`parse` function can take either a filename or an open file object."
msgstr ""

msgid "Return a :class:`Document` from the given input. *filename_or_file* may be either a file name, or a file-like object. *parser*, if given, must be a SAX2 parser object. This function will change the document handler of the parser and activate namespace support; other parser configuration (like setting an entity resolver) must have been done in advance."
msgstr ""

msgid "If you have XML in a string, you can use the :func:`parseString` function instead:"
msgstr ""

msgid "Return a :class:`Document` that represents the *string*. This method creates a :class:`StringIO` object for the string and passes that on to :func:`parse`."
msgstr ""

msgid "Both functions return a :class:`Document` object representing the content of the document."
msgstr ""

msgid "What the :func:`parse` and :func:`parseString` functions do is connect an XML parser with a \"DOM builder\" that can accept parse events from any SAX parser and convert them into a DOM tree.  The name of the functions are perhaps misleading, but are easy to grasp when learning the interfaces.  The parsing of the document will be completed before these functions return; it's simply that these functions do not provide a parser implementation themselves."
msgstr ""

msgid "You can also create a :class:`Document` by calling a method on a \"DOM Implementation\" object.  You can get this object either by calling the :func:`getDOMImplementation` function in the :mod:`xml.dom` package or the :mod:`xml.dom.minidom` module. Using the implementation from the :mod:`xml.dom.minidom` module will always return a :class:`Document` instance from the minidom implementation, while the version from :mod:`xml.dom` may provide an alternate implementation (this is likely if you have the `PyXML package <http://pyxml.sourceforge.net/>`_ installed).  Once you have a :class:`Document`, you can add child nodes to it to populate the DOM::"
msgstr ""

msgid "from xml.dom.minidom import getDOMImplementation  impl = getDOMImplementation()  newdoc = impl.createDocument(None, \"some_tag\", None) top_element = newdoc.documentElement text = newdoc.createTextNode('Some textual content.') top_element.appendChild(text)"
msgstr ""

msgid "Once you have a DOM document object, you can access the parts of your XML document through its properties and methods.  These properties are defined in the DOM specification.  The main property of the document object is the :attr:`documentElement` property.  It gives you the main element in the XML document: the one that holds all others.  Here is an example program::"
msgstr ""

msgid "dom3 = parseString(\"<myxml>Some data</myxml>\") assert dom3.documentElement.tagName == \"myxml\""
msgstr ""

msgid "When you are finished with a DOM tree, you may optionally call the :meth:`unlink` method to encourage early cleanup of the now-unneeded objects.  :meth:`unlink` is a :mod:`xml.dom.minidom`\\ -specific extension to the DOM API that renders the node and its descendants are essentially useless.  Otherwise, Python's garbage collector will eventually take care of the objects in the tree."
msgstr ""

msgid "DOM Objects"
msgstr ""

msgid "The definition of the DOM API for Python is given as part of the :mod:`xml.dom` module documentation.  This section lists the differences between the API and :mod:`xml.dom.minidom`."
msgstr ""

msgid "Break internal references within the DOM so that it will be garbage collected on versions of Python without cyclic GC.  Even when cyclic GC is available, using this can make large amounts of memory available sooner, so calling this on DOM objects as soon as they are no longer needed is good practice.  This only needs to be called on the :class:`Document` object, but may be called on child nodes to discard children of that node."
msgstr ""

msgid "You can avoid calling this method explicitly by using the :keyword:`with` statement. The following code will automatically unlink *dom* when the :keyword:`with` block is exited::"
msgstr ""

msgid "with xml.dom.minidom.parse(datasource) as dom:     ... # Work with dom."
msgstr ""

msgid "Write XML to the writer object.  The writer should have a :meth:`write` method which matches that of the file object interface.  The *indent* parameter is the indentation of the current node.  The *addindent* parameter is the incremental indentation to use for subnodes of the current one.  The *newl* parameter specifies the string to use to terminate newlines."
msgstr ""

msgid "For the :class:`Document` node, an additional keyword argument *encoding* can be used to specify the encoding field of the XML header."
msgstr ""

msgid "Return the XML that the DOM represents as a string."
msgstr ""

msgid "With no argument, the XML header does not specify an encoding, and the result is Unicode string if the default encoding cannot represent all characters in the document. Encoding this string in an encoding other than UTF-8 is likely incorrect, since UTF-8 is the default encoding of XML."
msgstr ""

msgid "With an explicit *encoding* [1]_ argument, the result is a byte string in the specified encoding. It is recommended that this argument is always specified. To avoid :exc:`UnicodeError` exceptions in case of unrepresentable text data, the encoding argument should be specified as \"utf-8\"."
msgstr ""

msgid "Return a pretty-printed version of the document. *indent* specifies the indentation string and defaults to a tabulator; *newl* specifies the string emitted at the end of each line and defaults to ``\\n``."
msgstr ""

msgid "There's also an *encoding* argument; see :meth:`toxml`."
msgstr ""

msgid "DOM Example"
msgstr ""

msgid "This example program is a fairly realistic example of a simple program. In this particular case, we do not take much advantage of the flexibility of the DOM."
msgstr ""

msgid "import xml.dom.minidom  document = \"\"\"\\ <slideshow> <title>Demo slideshow</title> <slide><title>Slide title</title> <point>This is a demo</point> <point>Of a program for processing slides</point> </slide>  <slide><title>Another demo slide</title> <point>It is important</point> <point>To have more than</point> <point>one slide</point> </slide> </slideshow> \"\"\"  dom = xml.dom.minidom.parseString(document)  def getText(nodelist):     rc = []     for node in nodelist:         if node.nodeType == node.TEXT_NODE:             rc.append(node.data)     return ''.join(rc)  def handleSlideshow(slideshow):     print(\"<html>\")     handleSlideshowTitle(slideshow.getElementsByTagName(\"title\")[0])     slides = slideshow.getElementsByTagName(\"slide\")     handleToc(slides)     handleSlides(slides)     print(\"</html>\")  def handleSlides(slides):     for slide in slides:         handleSlide(slide)  def handleSlide(slide):     handleSlideTitle(slide.getElementsByTagName(\"title\")[0])     handlePoints(slide.getElementsByTagName(\"point\"))  def handleSlideshowTitle(title):     print(\"<title>%s</title>\" % getText(title.childNodes))  def handleSlideTitle(title):     print(\"<h2>%s</h2>\" % getText(title.childNodes))  def handlePoints(points):     print(\"<ul>\")     for point in points:         handlePoint(point)     print(\"</ul>\")  def handlePoint(point):     print(\"<li>%s</li>\" % getText(point.childNodes))  def handleToc(slides):     for slide in slides:         title = slide.getElementsByTagName(\"title\")[0]         print(\"<p>%s</p>\" % getText(title.childNodes))  handleSlideshow(dom)"
msgstr ""

msgid "minidom and the DOM standard"
msgstr ""

msgid "The :mod:`xml.dom.minidom` module is essentially a DOM 1.0-compatible DOM with some DOM 2 features (primarily namespace features)."
msgstr ""

msgid "Usage of the DOM interface in Python is straight-forward.  The following mapping rules apply:"
msgstr ""

msgid "Interfaces are accessed through instance objects. Applications should not instantiate the classes themselves; they should use the creator functions available on the :class:`Document` object. Derived interfaces support all operations (and attributes) from the base interfaces, plus any new operations."
msgstr ""

msgid "Operations are used as methods. Since the DOM uses only :keyword:`in` parameters, the arguments are passed in normal order (from left to right). There are no optional arguments. ``void`` operations return ``None``."
msgstr ""

msgid "IDL attributes map to instance attributes. For compatibility with the OMG IDL language mapping for Python, an attribute ``foo`` can also be accessed through accessor methods :meth:`_get_foo` and :meth:`_set_foo`.  ``readonly`` attributes must not be changed; this is not enforced at runtime."
msgstr ""

msgid "The types ``short int``, ``unsigned int``, ``unsigned long long``, and ``boolean`` all map to Python integer objects."
msgstr ""

msgid "The type ``DOMString`` maps to Python strings. :mod:`xml.dom.minidom` supports either bytes or strings, but will normally produce strings. Values of type ``DOMString`` may also be ``None`` where allowed to have the IDL ``null`` value by the DOM specification from the W3C."
msgstr ""

msgid "``const`` declarations map to variables in their respective scope (e.g. ``xml.dom.minidom.Node.PROCESSING_INSTRUCTION_NODE``); they must not be changed."
msgstr ""

msgid "``DOMException`` is currently not supported in :mod:`xml.dom.minidom`. Instead, :mod:`xml.dom.minidom` uses standard Python exceptions such as :exc:`TypeError` and :exc:`AttributeError`."
msgstr ""

msgid ":class:`NodeList` objects are implemented using Python's built-in list type. These objects provide the interface defined in the DOM specification, but with earlier versions of Python they do not support the official API.  They are, however, much more \"Pythonic\" than the interface defined in the W3C recommendations."
msgstr ""

msgid "The following interfaces have no implementation in :mod:`xml.dom.minidom`:"
msgstr ""

msgid ":class:`DOMTimeStamp`"
msgstr ""

msgid ":class:`CharacterData`"
msgstr ""

msgid ":class:`CDATASection`"
msgstr ""

msgid ":class:`Notation`"
msgstr ""

msgid ":class:`Entity`"
msgstr ""

msgid ":class:`EntityReference`"
msgstr ""

msgid ":class:`DocumentFragment`"
msgstr ""

msgid "Most of these reflect information in the XML document that is not of general utility to most DOM users."
msgstr ""

msgid ":mod:`xml.dom.pulldom` --- Support for building partial DOM trees"
msgstr ""

msgid ":mod:`xml.dom.pulldom` allows building only selected portions of a Document Object Model representation of a document from SAX events."
msgstr ""

msgid ":class:`xml.sax.handler.ContentHandler` implementation that ..."
msgstr ""

msgid "..."
msgstr ""

msgid "Default value for the *bufsize* parameter to :func:`parse`."
msgstr ""

msgid "The value of this variable can be changed before calling :func:`parse` and the new value will take effect."
msgstr ""

msgid "DOMEventStream Objects"
msgstr ""

msgid ":mod:`xml.etree.ElementTree` --- The ElementTree XML API"
msgstr ""

msgid "The :class:`Element` type is a flexible container object, designed to store hierarchical data structures in memory.  The type can be described as a cross between a list and a dictionary."
msgstr ""

msgid "Each element has a number of properties associated with it:"
msgstr ""

msgid "a tag which is a string identifying what kind of data this element represents (the element type, in other words)."
msgstr ""

msgid "a number of attributes, stored in a Python dictionary."
msgstr ""

msgid "a text string."
msgstr ""

msgid "an optional tail string."
msgstr ""

msgid "a number of child elements, stored in a Python sequence"
msgstr ""

msgid "To create an element instance, use the :class:`Element` constructor or the :func:`SubElement` factory function."
msgstr ""

msgid "The :class:`ElementTree` class can be used to wrap an element structure, and convert it from and to XML."
msgstr ""

msgid "A C implementation of this API is available as :mod:`xml.etree.cElementTree`."
msgstr ""

msgid "See http://effbot.org/zone/element-index.htm for tutorials and links to other docs.  Fredrik Lundh's page is also the location of the development version of the xml.etree.ElementTree."
msgstr ""

msgid "Comment element factory.  This factory function creates a special element that will be serialized as an XML comment by the standard serializer.  The comment string can be either a bytestring or a Unicode string.  *text* is a string containing the comment string.  Returns an element instance representing a comment."
msgstr ""

msgid "Writes an element tree or element structure to sys.stdout.  This function should be used for debugging only."
msgstr ""

msgid "The exact output format is implementation dependent.  In this version, it's written as an ordinary XML file."
msgstr ""

msgid "*elem* is an element tree or an individual element."
msgstr ""

msgid "Parses an XML section from a string constant.  Same as :func:`XML`.  *text* is a string containing XML data.  Returns an :class:`Element` instance."
msgstr ""

msgid "Parses an XML document from a sequence of string fragments.  *sequence* is a list or other sequence containing XML data fragments.  *parser* is an optional parser instance.  If not given, the standard :class:`XMLParser` parser is used.  Returns an :class:`Element` instance."
msgstr ""

msgid "Checks if an object appears to be a valid element object.  *element* is an element instance.  Returns a true value if this is an element object."
msgstr ""

msgid "Parses an XML section into an element tree incrementally, and reports what's going on to the user.  *source* is a filename or file object containing XML data.  *events* is a list of events to report back.  If omitted, only \"end\" events are reported.  *parser* is an optional parser instance.  If not given, the standard :class:`XMLParser` parser is used.  Returns an :term:`iterator` providing ``(event, elem)`` pairs."
msgstr ""

msgid ":func:`iterparse` only guarantees that it has seen the \">\" character of a starting tag when it emits a \"start\" event, so the attributes are defined, but the contents of the text and tail attributes are undefined at that point.  The same applies to the element children; they may or may not be present."
msgstr ""

msgid "If you need a fully populated element, look for \"end\" events instead."
msgstr ""

msgid "Parses an XML section into an element tree.  *source* is a filename or file object containing XML data.  *parser* is an optional parser instance.  If not given, the standard :class:`XMLParser` parser is used.  Returns an :class:`ElementTree` instance."
msgstr ""

msgid "PI element factory.  This factory function creates a special element that will be serialized as an XML processing instruction.  *target* is a string containing the PI target.  *text* is a string containing the PI contents, if given.  Returns an element instance, representing a processing instruction."
msgstr ""

msgid "Registers a namespace prefix.  The registry is global, and any existing mapping for either the given prefix or the namespace URI will be removed. *prefix* is a namespace prefix.  *uri* is a namespace uri.  Tags and attributes in this namespace will be serialized with the given prefix, if at all possible."
msgstr ""

msgid "Subelement factory.  This function creates an element instance, and appends it to an existing element."
msgstr ""

msgid "The element name, attribute names, and attribute values can be either bytestrings or Unicode strings.  *parent* is the parent element.  *tag* is the subelement name.  *attrib* is an optional dictionary, containing element attributes.  *extra* contains additional attributes, given as keyword arguments.  Returns an element instance."
msgstr ""

msgid "Generates a string representation of an XML element, including all subelements.  *element* is an :class:`Element` instance.  *encoding* [1]_ is the output encoding (default is None).  *method* is either ``\"xml\"``, ``\"html\"`` or ``\"text\"`` (default is ``\"xml\"``).  Returns an (optionally) encoded string containing the XML data."
msgstr ""

msgid "Generates a string representation of an XML element, including all subelements.  *element* is an :class:`Element` instance.  *encoding* [1]_ is the output encoding (default is None).   *method* is either ``\"xml\"``, ``\"html\"`` or ``\"text\"`` (default is ``\"xml\"``).  Returns a list of (optionally) encoded strings containing the XML data.  It does not guarantee any specific sequence, except that ``\"\".join(tostringlist(element)) == tostring(element)``."
msgstr ""

msgid "Parses an XML section from a string constant.  This function can be used to embed \"XML literals\" in Python code.  *text* is a string containing XML data.  *parser* is an optional parser instance.  If not given, the standard :class:`XMLParser` parser is used.  Returns an :class:`Element` instance."
msgstr ""

msgid "Parses an XML section from a string constant, and also returns a dictionary which maps from element id:s to elements.  *text* is a string containing XML data.  *parser* is an optional parser instance.  If not given, the standard :class:`XMLParser` parser is used.  Returns a tuple containing an :class:`Element` instance and a dictionary."
msgstr ""

msgid "Element class.  This class defines the Element interface, and provides a reference implementation of this interface."
msgstr ""

msgid "The element name, attribute names, and attribute values can be either bytestrings or Unicode strings.  *tag* is the element name.  *attrib* is an optional dictionary, containing element attributes.  *extra* contains additional attributes, given as keyword arguments."
msgstr ""

msgid "A string identifying what kind of data this element represents (the element type, in other words)."
msgstr ""

msgid "The *text* attribute can be used to hold additional data associated with the element.  As the name implies this attribute is usually a string but may be any application-specific object.  If the element is created from an XML file the attribute will contain any text found between the element tags."
msgstr ""

msgid "The *tail* attribute can be used to hold additional data associated with the element.  This attribute is usually a string but may be any application-specific object.  If the element is created from an XML file the attribute will contain any text found after the element's end tag and before the next tag."
msgstr ""

msgid "A dictionary containing the element's attributes.  Note that while the *attrib* value is always a real mutable Python dictionary, an ElementTree implementation may choose to use another internal representation, and create the dictionary only if someone asks for it.  To take advantage of such implementations, use the dictionary methods below whenever possible."
msgstr ""

msgid "The following dictionary-like methods work on the element attributes."
msgstr ""

msgid "Resets an element.  This function removes all subelements, clears all attributes, and sets the text and tail attributes to None."
msgstr ""

msgid "Gets the element attribute named *key*."
msgstr ""

msgid "Returns the attribute value, or *default* if the attribute was not found."
msgstr ""

msgid "Returns the element attributes as a sequence of (name, value) pairs.  The attributes are returned in an arbitrary order."
msgstr ""

msgid "Returns the elements attribute names as a list.  The names are returned in an arbitrary order."
msgstr ""

msgid "Set the attribute *key* on the element to *value*."
msgstr ""

msgid "The following methods work on the element's children (subelements)."
msgstr ""

msgid "Adds the element *subelement* to the end of this elements internal list of subelements."
msgstr ""

msgid "Appends *subelements* from a sequence object with zero or more elements. Raises :exc:`AssertionError` if a subelement is not a valid object."
msgstr ""

msgid "Finds the first subelement matching *match*.  *match* may be a tag name or path.  Returns an element instance or ``None``."
msgstr ""

msgid "Finds all matching subelements, by tag name or path.  Returns a list containing all matching elements in document order."
msgstr ""

msgid "Finds text for the first subelement matching *match*.  *match* may be a tag name or path.  Returns the text content of the first matching element, or *default* if no element was found.  Note that if the matching element has no text content an empty string is returned."
msgstr ""

msgid "Inserts a subelement at the given position in this element."
msgstr ""

msgid "Creates a tree :term:`iterator` with the current element as the root. The iterator iterates over this element and all elements below it, in document (depth first) order.  If *tag* is not ``None`` or ``'*'``, only elements whose tag equals *tag* are returned from the iterator.  If the tree structure is modified during iteration, the result is undefined."
msgstr ""

msgid "Finds all matching subelements, by tag name or path.  Returns an iterable yielding all matching elements in document order."
msgstr ""

msgid "Creates a text iterator.  The iterator loops over this element and all subelements, in document order, and returns all inner text."
msgstr ""

msgid "Creates a new element object of the same type as this element.  Do not call this method, use the :func:`SubElement` factory function instead."
msgstr ""

msgid "Removes *subelement* from the element.  Unlike the find\\* methods this method compares elements based on the instance identity, not on tag value or contents."
msgstr ""

msgid ":class:`Element` objects also support the following sequence type methods for working with subelements: :meth:`__delitem__`, :meth:`__getitem__`, :meth:`__setitem__`, :meth:`__len__`."
msgstr ""

msgid "Caution: Elements with no subelements will test as ``False``.  This behavior will change in future versions.  Use specific ``len(elem)`` or ``elem is None`` test instead. ::"
msgstr ""

msgid "element = root.find('foo')  if not element:  # careful!     print(\"element not found, or element has no subelements\")  if element is None:     print(\"element not found\")"
msgstr ""

msgid "ElementTree Objects"
msgstr ""

msgid "ElementTree wrapper class.  This class represents an entire element hierarchy, and adds some extra support for serialization to and from standard XML."
msgstr ""

msgid "*element* is the root element.  The tree is initialized with the contents of the XML *file* if given."
msgstr ""

msgid "Replaces the root element for this tree.  This discards the current contents of the tree, and replaces it with the given element.  Use with care.  *element* is an element instance."
msgstr ""

msgid "Finds the first toplevel element matching *match*.  *match* may be a tag name or path.  Same as getroot().find(match).  Returns the first matching element, or ``None`` if no element was found."
msgstr ""

msgid "Finds all matching subelements, by tag name or path.  Same as getroot().findall(match).  *match* may be a tag name or path.  Returns a list containing all matching elements, in document order."
msgstr ""

msgid "Finds the element text for the first toplevel element with given tag. Same as getroot().findtext(match).  *match* may be a tag name or path. *default* is the value to return if the element was not found.  Returns the text content of the first matching element, or the default value no element was found.  Note that if the element is found, but has no text content, this method returns an empty string."
msgstr ""

msgid "Creates and returns a tree iterator for the root element.  The iterator loops over all elements in this tree, in section order.  *tag* is the tag to look for (default is to return all elements)"
msgstr ""

msgid "Finds all matching subelements, by tag name or path.  Same as getroot().iterfind(match). Returns an iterable yielding all matching elements in document order."
msgstr ""

msgid "Loads an external XML section into this element tree.  *source* is a file name or file object.  *parser* is an optional parser instance.  If not given, the standard XMLParser parser is used.  Returns the section root element."
msgstr ""

msgid "Writes the element tree to a file, as XML.  *file* is a file name, or a file object opened for writing.  *encoding* [1]_ is the output encoding (default is None).  *xml_declaration* controls if an XML declaration should be added to the file.  Use False for never, True for always, None for only if not US-ASCII or UTF-8 (default is None).  *method* is either ``\"xml\"``, ``\"html\"`` or ``\"text\"`` (default is ``\"xml\"``).  Returns an (optionally) encoded string."
msgstr ""

msgid "This is the XML file that is going to be manipulated::"
msgstr ""

msgid "<html>     <head>         <title>Example page</title>     </head>     <body>         <p>Moved to <a href=\"http://example.org/\">example.org</a>         or <a href=\"http://example.com/\">example.com</a>.</p>     </body> </html>"
msgstr ""

msgid "Example of changing the attribute \"target\" of every link in first paragraph::"
msgstr ""

msgid ">>> from xml.etree.ElementTree import ElementTree >>> tree = ElementTree() >>> tree.parse(\"index.xhtml\") <Element 'html' at 0xb77e6fac> >>> p = tree.find(\"body/p\")     # Finds first occurrence of tag p in body >>> p <Element 'p' at 0xb77ec26c> >>> links = list(p.iter(\"a\"))   # Returns list of all links >>> links [<Element 'a' at 0xb77ec2ac>, <Element 'a' at 0xb77ec1cc>] >>> for i in links:             # Iterates through all found links ...     i.attrib[\"target\"] = \"blank\" >>> tree.write(\"output.xhtml\")"
msgstr ""

msgid "QName Objects"
msgstr ""

msgid "QName wrapper.  This can be used to wrap a QName attribute value, in order to get proper namespace handling on output.  *text_or_uri* is a string containing the QName value, in the form {uri}local, or, if the tag argument is given, the URI part of a QName.  If *tag* is given, the first argument is interpreted as an URI, and this argument is interpreted as a local name. :class:`QName` instances are opaque."
msgstr ""

msgid "TreeBuilder Objects"
msgstr ""

msgid "Generic element structure builder.  This builder converts a sequence of start, data, and end method calls to a well-formed element structure.  You can use this class to build an element structure using a custom XML parser, or a parser for some other XML-like format.  The *element_factory* is called to create new :class:`Element` instances when given."
msgstr ""

msgid "Flushes the builder buffers, and returns the toplevel document element.  Returns an :class:`Element` instance."
msgstr ""

msgid "Adds text to the current element.  *data* is a string.  This should be either a bytestring, or a Unicode string."
msgstr ""

msgid "Closes the current element.  *tag* is the element name.  Returns the closed element."
msgstr ""

msgid "Opens a new element.  *tag* is the element name.  *attrs* is a dictionary containing element attributes.  Returns the opened element."
msgstr ""

msgid "In addition, a custom :class:`TreeBuilder` object can provide the following method:"
msgstr ""

msgid "Handles a doctype declaration.  *name* is the doctype name.  *pubid* is the public identifier.  *system* is the system identifier.  This method does not exist on the default :class:`TreeBuilder` class."
msgstr ""

msgid ":class:`Element` structure builder for XML source data, based on the expat parser.  *html* are predefined HTML entities.  This flag is not supported by the current implementation.  *target* is the target object.  If omitted, the builder uses an instance of the standard TreeBuilder class.  *encoding* [1]_ is optional.  If given, the value overrides the encoding specified in the XML file."
msgstr ""

msgid "Finishes feeding data to the parser.  Returns an element structure."
msgstr ""

msgid "Feeds data to the parser.  *data* is encoded data."
msgstr ""

msgid ":meth:`XMLParser.feed` calls *target*\\'s :meth:`start` method for each opening tag, its :meth:`end` method for each closing tag, and data is processed by method :meth:`data`.  :meth:`XMLParser.close` calls *target*\\'s method :meth:`close`. :class:`XMLParser` can be used not only for building a tree structure. This is an example of counting the maximum depth of an XML file::"
msgstr ""

msgid ">>> from xml.etree.ElementTree import XMLParser >>> class MaxDepth:                     # The target object of the parser ...     maxDepth = 0 ...     depth = 0 ...     def start(self, tag, attrib):   # Called for each opening tag. ...         self.depth += 1 ...         if self.depth > self.maxDepth: ...             self.maxDepth = self.depth ...     def end(self, tag):             # Called for each closing tag. ...         self.depth -= 1 ...     def data(self, data): ...         pass            # We do not need to do anything with data. ...     def close(self):    # Called when all data has been parsed. ...         return self.maxDepth ... >>> target = MaxDepth() >>> parser = XMLParser(target=target) >>> exampleXml = \"\"\" ... <a> ...   <b> ...   </b> ...   <b> ...     <c> ...       <d> ...       </d> ...     </c> ...   </b> ... </a>\"\"\" >>> parser.feed(exampleXml) >>> parser.close() 4"
msgstr ""

msgid "The encoding string included in XML output should conform to the appropriate standards.  For example, \"UTF-8\" is valid, but \"UTF8\" is not.  See http://www.w3.org/TR/2006/REC-xml11-20060816/#NT-EncodingDecl and http://www.iana.org/assignments/character-sets."
msgstr ""

msgid ":mod:`xml.sax` --- Support for SAX2 parsers"
msgstr ""

msgid "The :mod:`xml.sax` package provides a number of modules which implement the Simple API for XML (SAX) interface for Python.  The package itself provides the SAX exceptions and the convenience functions which will be most used by users of the SAX API."
msgstr ""

msgid "The convenience functions are:"
msgstr ""

msgid "Create and return a SAX :class:`XMLReader` object.  The first parser found will be used.  If *parser_list* is provided, it must be a sequence of strings which name modules that have a function named :func:`create_parser`.  Modules listed in *parser_list* will be used before modules in the default list of parsers."
msgstr ""

msgid "Create a SAX parser and use it to parse a document.  The document, passed in as *filename_or_stream*, can be a filename or a file object.  The *handler* parameter needs to be a SAX :class:`ContentHandler` instance.  If *error_handler* is given, it must be a SAX :class:`ErrorHandler` instance; if omitted,  :exc:`SAXParseException` will be raised on all errors.  There is no return value; all work must be done by the *handler* passed in."
msgstr ""

msgid "Similar to :func:`parse`, but parses from a buffer *string* received as a parameter."
msgstr ""

msgid "A typical SAX application uses three kinds of objects: readers, handlers and input sources.  \"Reader\" in this context is another term for parser, i.e. some piece of code that reads the bytes or characters from the input source, and produces a sequence of events. The events then get distributed to the handler objects, i.e. the reader invokes a method on the handler.  A SAX application must therefore obtain a reader object, create or open the input sources, create the handlers, and connect these objects all together.  As the final step of preparation, the reader is called to parse the input. During parsing, methods on the handler objects are called based on structural and syntactic events from the input data."
msgstr ""

msgid "For these objects, only the interfaces are relevant; they are normally not instantiated by the application itself.  Since Python does not have an explicit notion of interface, they are formally introduced as classes, but applications may use implementations which do not inherit from the provided classes.  The :class:`InputSource`, :class:`Locator`, :class:`Attributes`, :class:`AttributesNS`, and :class:`XMLReader` interfaces are defined in the module :mod:`xml.sax.xmlreader`.  The handler interfaces are defined in :mod:`xml.sax.handler`.  For convenience, :class:`InputSource` (which is often instantiated directly) and the handler classes are also available from :mod:`xml.sax`.  These interfaces are described below."
msgstr ""

msgid "In addition to these classes, :mod:`xml.sax` provides the following exception classes."
msgstr ""

msgid "Encapsulate an XML error or warning.  This class can contain basic error or warning information from either the XML parser or the application: it can be subclassed to provide additional functionality or to add localization.  Note that although the handlers defined in the :class:`ErrorHandler` interface receive instances of this exception, it is not required to actually raise the exception --- it is also useful as a container for information."
msgstr ""

msgid "When instantiated, *msg* should be a human-readable description of the error. The optional *exception* parameter, if given, should be ``None`` or an exception that was caught by the parsing code and is being passed along as information."
msgstr ""

msgid "This is the base class for the other SAX exception classes."
msgstr ""

msgid "Subclass of :exc:`SAXException` raised on parse errors. Instances of this class are passed to the methods of the SAX :class:`ErrorHandler` interface to provide information about the parse error.  This class supports the SAX :class:`Locator` interface as well as the :class:`SAXException` interface."
msgstr ""

msgid "Subclass of :exc:`SAXException` raised when a SAX :class:`XMLReader` is confronted with an unrecognized feature or property.  SAX applications and extensions may use this class for similar purposes."
msgstr ""

msgid "Subclass of :exc:`SAXException` raised when a SAX :class:`XMLReader` is asked to enable a feature that is not supported, or to set a property to a value that the implementation does not support.  SAX applications and extensions may use this class for similar purposes."
msgstr ""

msgid "This site is the focal point for the definition of the SAX API.  It provides a Java implementation and online documentation.  Links to implementations and historical information are also available."
msgstr ""

msgid "Definitions of the interfaces for application-provided objects."
msgstr ""

msgid "Convenience functions for use in SAX applications."
msgstr ""

msgid "Definitions of the interfaces for parser-provided objects."
msgstr ""

msgid "SAXException Objects"
msgstr ""

msgid "The :class:`SAXException` exception class supports the following methods:"
msgstr ""

msgid "Return a human-readable message describing the error condition."
msgstr ""

msgid "Return an encapsulated exception object, or ``None``."
msgstr ""

msgid ":mod:`xml.sax.handler` --- Base classes for SAX handlers"
msgstr ""

msgid "The SAX API defines four kinds of handlers: content handlers, DTD handlers, error handlers, and entity resolvers. Applications normally only need to implement those interfaces whose events they are interested in; they can implement the interfaces in a single object or in multiple objects. Handler implementations should inherit from the base classes provided in the module :mod:`xml.sax.handler`, so that all methods get default implementations."
msgstr ""

msgid "This is the main callback interface in SAX, and the one most important to applications. The order of events in this interface mirrors the order of the information in the document."
msgstr ""

msgid "Handle DTD events."
msgstr ""

msgid "This interface specifies only those DTD events required for basic parsing (unparsed entities and attributes)."
msgstr ""

msgid "Basic interface for resolving entities. If you create an object implementing this interface, then register the object with your Parser, the parser will call the method in your object to resolve all external entities."
msgstr ""

msgid "Interface used by the parser to present error and warning messages to the application.  The methods of this object control whether errors are immediately converted to exceptions or are handled in some other way."
msgstr ""

msgid "In addition to these classes, :mod:`xml.sax.handler` provides symbolic constants for the feature and property names."
msgstr ""

msgid "Value: ``\"http://xml.org/sax/features/namespaces\"`` ---  true: Perform Namespace processing. ---  false: Optionally do not perform Namespace processing (implies namespace-prefixes; default). ---  access: (parsing) read-only; (not parsing) read/write"
msgstr ""

msgid "Value: ``\"http://xml.org/sax/features/namespace-prefixes\"`` --- true: Report the original prefixed names and attributes used for Namespace declarations. --- false: Do not report attributes used for Namespace declarations, and optionally do not report original prefixed names (default). --- access: (parsing) read-only; (not parsing) read/write"
msgstr ""

msgid "Value: ``\"http://xml.org/sax/features/string-interning\"`` ---  true: All element names, prefixes, attribute names, Namespace URIs, and local names are interned using the built-in intern function. ---  false: Names are not necessarily interned, although they may be (default). ---  access: (parsing) read-only; (not parsing) read/write"
msgstr ""

msgid "Value: ``\"http://xml.org/sax/features/validation\"`` --- true: Report all validation errors (implies external-general-entities and external-parameter-entities). --- false: Do not report validation errors. --- access: (parsing) read-only; (not parsing) read/write"
msgstr ""

msgid "Value: ``\"http://xml.org/sax/features/external-general-entities\"`` ---  true: Include all external general (text) entities. ---  false: Do not include external general entities. ---  access: (parsing) read-only; (not parsing) read/write"
msgstr ""

msgid "Value: ``\"http://xml.org/sax/features/external-parameter-entities\"`` ---  true: Include all external parameter entities, including the external DTD subset. --- false: Do not include any external parameter entities, even the external DTD subset. ---  access: (parsing) read-only; (not parsing) read/write"
msgstr ""

msgid "List of all features."
msgstr ""

msgid "Value: ``\"http://xml.org/sax/properties/lexical-handler\"`` ---  data type: xml.sax.sax2lib.LexicalHandler (not supported in Python 2) ---  description: An optional extension handler for lexical events like comments. ---  access: read/write"
msgstr ""

msgid "Value: ``\"http://xml.org/sax/properties/declaration-handler\"`` ---  data type: xml.sax.sax2lib.DeclHandler (not supported in Python 2) ---  description: An optional extension handler for DTD-related events other than notations and unparsed entities. ---  access: read/write"
msgstr ""

msgid "Value: ``\"http://xml.org/sax/properties/dom-node\"`` ---  data type: org.w3c.dom.Node (not supported in Python 2)  ---  description: When parsing, the current DOM node being visited if this is a DOM iterator; when not parsing, the root DOM node for iteration. ---  access: (parsing) read-only; (not parsing) read/write"
msgstr ""

msgid "Value: ``\"http://xml.org/sax/properties/xml-string\"`` ---  data type: String --- description: The literal string of characters that was the source for the current event. ---  access: read-only"
msgstr ""

msgid "List of all known property names."
msgstr ""

msgid "ContentHandler Objects"
msgstr ""

msgid "Users are expected to subclass :class:`ContentHandler` to support their application.  The following methods are called by the parser on the appropriate events in the input document:"
msgstr ""

msgid "Called by the parser to give the application a locator for locating the origin of document events."
msgstr ""

msgid "SAX parsers are strongly encouraged (though not absolutely required) to supply a locator: if it does so, it must supply the locator to the application by invoking this method before invoking any of the other methods in the DocumentHandler interface."
msgstr ""

msgid "The locator allows the application to determine the end position of any document-related event, even if the parser is not reporting an error. Typically, the application will use this information for reporting its own errors (such as character content that does not match an application's business rules). The information returned by the locator is probably not sufficient for use with a search engine."
msgstr ""

msgid "Note that the locator will return correct information only during the invocation of the events in this interface. The application should not attempt to use it at any other time."
msgstr ""

msgid "Receive notification of the beginning of a document."
msgstr ""

msgid "The SAX parser will invoke this method only once, before any other methods in this interface or in DTDHandler (except for :meth:`setDocumentLocator`)."
msgstr ""

msgid "Receive notification of the end of a document."
msgstr ""

msgid "The SAX parser will invoke this method only once, and it will be the last method invoked during the parse. The parser shall not invoke this method until it has either abandoned parsing (because of an unrecoverable error) or reached the end of input."
msgstr ""

msgid "Begin the scope of a prefix-URI Namespace mapping."
msgstr ""

msgid "The information from this event is not necessary for normal Namespace processing: the SAX XML reader will automatically replace prefixes for element and attribute names when the ``feature_namespaces`` feature is enabled (the default)."
msgstr ""

msgid "There are cases, however, when applications need to use prefixes in character data or in attribute values, where they cannot safely be expanded automatically; the :meth:`startPrefixMapping` and :meth:`endPrefixMapping` events supply the information to the application to expand prefixes in those contexts itself, if necessary."
msgstr ""

msgid "Note that :meth:`startPrefixMapping` and :meth:`endPrefixMapping` events are not guaranteed to be properly nested relative to each-other: all :meth:`startPrefixMapping` events will occur before the corresponding :meth:`startElement` event, and all :meth:`endPrefixMapping` events will occur after the corresponding :meth:`endElement` event, but their order is not guaranteed."
msgstr ""

msgid "End the scope of a prefix-URI mapping."
msgstr ""

msgid "See :meth:`startPrefixMapping` for details. This event will always occur after the corresponding :meth:`endElement` event, but the order of :meth:`endPrefixMapping` events is not otherwise guaranteed."
msgstr ""

msgid "Signals the start of an element in non-namespace mode."
msgstr ""

msgid "The *name* parameter contains the raw XML 1.0 name of the element type as a string and the *attrs* parameter holds an object of the :class:`Attributes` interface (see :ref:`attributes-objects`) containing the attributes of the element.  The object passed as *attrs* may be re-used by the parser; holding on to a reference to it is not a reliable way to keep a copy of the attributes. To keep a copy of the attributes, use the :meth:`copy` method of the *attrs* object."
msgstr ""

msgid "Signals the end of an element in non-namespace mode."
msgstr ""

msgid "The *name* parameter contains the name of the element type, just as with the :meth:`startElement` event."
msgstr ""

msgid "Signals the start of an element in namespace mode."
msgstr ""

msgid "The *name* parameter contains the name of the element type as a ``(uri, localname)`` tuple, the *qname* parameter contains the raw XML 1.0 name used in the source document, and the *attrs* parameter holds an instance of the :class:`AttributesNS` interface (see :ref:`attributes-ns-objects`) containing the attributes of the element.  If no namespace is associated with the element, the *uri* component of *name* will be ``None``.  The object passed as *attrs* may be re-used by the parser; holding on to a reference to it is not a reliable way to keep a copy of the attributes.  To keep a copy of the attributes, use the :meth:`copy` method of the *attrs* object."
msgstr ""

msgid "Parsers may set the *qname* parameter to ``None``, unless the ``feature_namespace_prefixes`` feature is activated."
msgstr ""

msgid "Signals the end of an element in namespace mode."
msgstr ""

msgid "The *name* parameter contains the name of the element type, just as with the :meth:`startElementNS` method, likewise the *qname* parameter."
msgstr ""

msgid "Receive notification of character data."
msgstr ""

msgid "The Parser will call this method to report each chunk of character data. SAX parsers may return all contiguous character data in a single chunk, or they may split it into several chunks; however, all of the characters in any single event must come from the same external entity so that the Locator provides useful information."
msgstr ""

msgid "*content* may be a string or bytes instance; the ``expat`` reader module always produces strings."
msgstr ""

msgid "The earlier SAX 1 interface provided by the Python XML Special Interest Group used a more Java-like interface for this method.  Since most parsers used from Python did not take advantage of the older interface, the simpler signature was chosen to replace it.  To convert old code to the new interface, use *content* instead of slicing content with the old *offset* and *length* parameters."
msgstr ""

msgid "Receive notification of ignorable whitespace in element content."
msgstr ""

msgid "Validating Parsers must use this method to report each chunk of ignorable whitespace (see the W3C XML 1.0 recommendation, section 2.10): non-validating parsers may also use this method if they are capable of parsing and using content models."
msgstr ""

msgid "SAX parsers may return all contiguous whitespace in a single chunk, or they may split it into several chunks; however, all of the characters in any single event must come from the same external entity, so that the Locator provides useful information."
msgstr ""

msgid "Receive notification of a processing instruction."
msgstr ""

msgid "The Parser will invoke this method once for each processing instruction found: note that processing instructions may occur before or after the main document element."
msgstr ""

msgid "A SAX parser should never report an XML declaration (XML 1.0, section 2.8) or a text declaration (XML 1.0, section 4.3.1) using this method."
msgstr ""

msgid "Receive notification of a skipped entity."
msgstr ""

msgid "The Parser will invoke this method once for each entity skipped. Non-validating processors may skip entities if they have not seen the declarations (because, for example, the entity was declared in an external DTD subset). All processors may skip external entities, depending on the values of the ``feature_external_ges`` and the ``feature_external_pes`` properties."
msgstr ""

msgid "DTDHandler Objects"
msgstr ""

msgid ":class:`DTDHandler` instances provide the following methods:"
msgstr ""

msgid "Handle a notation declaration event."
msgstr ""

msgid "Handle an unparsed entity declaration event."
msgstr ""

msgid "EntityResolver Objects"
msgstr ""

msgid "Resolve the system identifier of an entity and return either the system identifier to read from as a string, or an InputSource to read from. The default implementation returns *systemId*."
msgstr ""

msgid "ErrorHandler Objects"
msgstr ""

msgid "Objects with this interface are used to receive error and warning information from the :class:`XMLReader`.  If you create an object that implements this interface, then register the object with your :class:`XMLReader`, the parser will call the methods in your object to report all warnings and errors. There are three levels of errors available: warnings, (possibly) recoverable errors, and unrecoverable errors.  All methods take a :exc:`SAXParseException` as the only parameter.  Errors and warnings may be converted to an exception by raising the passed-in exception object."
msgstr ""

msgid "Called when the parser encounters a recoverable error.  If this method does not raise an exception, parsing may continue, but further document information should not be expected by the application.  Allowing the parser to continue may allow additional errors to be discovered in the input document."
msgstr ""

msgid "Called when the parser encounters an error it cannot recover from; parsing is expected to terminate when this method returns."
msgstr ""

msgid "Called when the parser presents minor warning information to the application. Parsing is expected to continue when this method returns, and document information will continue to be passed to the application. Raising an exception in this method will cause parsing to end."
msgstr ""

msgid ":mod:`xml.sax.xmlreader` --- Interface for XML parsers"
msgstr ""

msgid "SAX parsers implement the :class:`XMLReader` interface. They are implemented in a Python module, which must provide a function :func:`create_parser`. This function is invoked by  :func:`xml.sax.make_parser` with no arguments to create a new  parser object."
msgstr ""

msgid "Base class which can be inherited by SAX parsers."
msgstr ""

msgid "In some cases, it is desirable not to parse an input source at once, but to feed chunks of the document as they get available. Note that the reader will normally not read the entire file, but read it in chunks as well; still :meth:`parse` won't return until the entire document is processed. So these interfaces should be used if the blocking behaviour of :meth:`parse` is not desirable."
msgstr ""

msgid "When the parser is instantiated it is ready to begin accepting data from the feed method immediately. After parsing has been finished with a call to close the reset method must be called to make the parser ready to accept new data, either from feed or using the parse method."
msgstr ""

msgid "Note that these methods must *not* be called during parsing, that is, after parse has been called and before it returns."
msgstr ""

msgid "By default, the class also implements the parse method of the XMLReader interface using the feed, close and reset methods of the IncrementalParser interface as a convenience to SAX 2.0 driver writers."
msgstr ""

msgid "Interface for associating a SAX event with a document location. A locator object will return valid results only during calls to DocumentHandler methods; at any other time, the results are unpredictable. If information is not available, methods may return ``None``."
msgstr ""

msgid "Encapsulation of the information needed by the :class:`XMLReader` to read entities."
msgstr ""

msgid "This class may include information about the public identifier, system identifier, byte stream (possibly with character encoding information) and/or the character stream of an entity."
msgstr ""

msgid "Applications will create objects of this class for use in the :meth:`XMLReader.parse` method and for returning from EntityResolver.resolveEntity."
msgstr ""

msgid "An :class:`InputSource` belongs to the application, the :class:`XMLReader` is not allowed to modify :class:`InputSource` objects passed to it from the application, although it may make copies and modify those."
msgstr ""

msgid "This is an implementation of the :class:`Attributes` interface (see section :ref:`attributes-objects`).  This is a dictionary-like object which represents the element attributes in a :meth:`startElement` call. In addition to the most useful dictionary operations, it supports a number of other methods as described by the interface. Objects of this class should be instantiated by readers; *attrs* must be a dictionary-like object containing a mapping from attribute names to attribute values."
msgstr ""

msgid "Namespace-aware variant of :class:`AttributesImpl`, which will be passed to :meth:`startElementNS`. It is derived from :class:`AttributesImpl`, but understands attribute names as two-tuples of *namespaceURI* and *localname*. In addition, it provides a number of methods expecting qualified names as they appear in the original document.  This class implements the :class:`AttributesNS` interface (see section :ref:`attributes-ns-objects`)."
msgstr ""

msgid "XMLReader Objects"
msgstr ""

msgid "The :class:`XMLReader` interface supports the following methods:"
msgstr ""

msgid "Process an input source, producing SAX events. The *source* object can be a system identifier (a string identifying the input source -- typically a file name or an URL), a file-like object, or an :class:`InputSource` object. When :meth:`parse` returns, the input is completely processed, and the parser object can be discarded or reset. As a limitation, the current implementation only accepts byte streams; processing of character streams is for further study."
msgstr ""

msgid "Return the current :class:`ContentHandler`."
msgstr ""

msgid "Set the current :class:`ContentHandler`.  If no :class:`ContentHandler` is set, content events will be discarded."
msgstr ""

msgid "Return the current :class:`DTDHandler`."
msgstr ""

msgid "Set the current :class:`DTDHandler`.  If no :class:`DTDHandler` is set, DTD events will be discarded."
msgstr ""

msgid "Return the current :class:`EntityResolver`."
msgstr ""

msgid "Set the current :class:`EntityResolver`.  If no :class:`EntityResolver` is set, attempts to resolve an external entity will result in opening the system identifier for the entity, and fail if it is not available."
msgstr ""

msgid "Return the current :class:`ErrorHandler`."
msgstr ""

msgid "Set the current error handler.  If no :class:`ErrorHandler` is set, errors will be raised as exceptions, and warnings will be printed."
msgstr ""

msgid "Allow an application to set the locale for errors and warnings."
msgstr ""

msgid "SAX parsers are not required to provide localization for errors and warnings; if they cannot support the requested locale, however, they must throw a SAX exception.  Applications may request a locale change in the middle of a parse."
msgstr ""

msgid "Return the current setting for feature *featurename*.  If the feature is not recognized, :exc:`SAXNotRecognizedException` is raised. The well-known featurenames are listed in the module :mod:`xml.sax.handler`."
msgstr ""

msgid "Set the *featurename* to *value*. If the feature is not recognized, :exc:`SAXNotRecognizedException` is raised. If the feature or its setting is not supported by the parser, *SAXNotSupportedException* is raised."
msgstr ""

msgid "Return the current setting for property *propertyname*. If the property is not recognized, a :exc:`SAXNotRecognizedException` is raised. The well-known propertynames are listed in the module :mod:`xml.sax.handler`."
msgstr ""

msgid "Set the *propertyname* to *value*. If the property is not recognized, :exc:`SAXNotRecognizedException` is raised. If the property or its setting is not supported by the parser, *SAXNotSupportedException* is raised."
msgstr ""

msgid "IncrementalParser Objects"
msgstr ""

msgid "Instances of :class:`IncrementalParser` offer the following additional methods:"
msgstr ""

msgid "Process a chunk of *data*."
msgstr ""

msgid "Assume the end of the document. That will check well-formedness conditions that can be checked only at the end, invoke handlers, and may clean up resources allocated during parsing."
msgstr ""

msgid "This method is called after close has been called to reset the parser so that it is ready to parse new documents. The results of calling parse or feed after close without calling reset are undefined."
msgstr ""

msgid "Locator Objects"
msgstr ""

msgid "Instances of :class:`Locator` provide these methods:"
msgstr ""

msgid "Return the column number where the current event ends."
msgstr ""

msgid "Return the line number where the current event ends."
msgstr ""

msgid "Return the public identifier for the current event."
msgstr ""

msgid "Return the system identifier for the current event."
msgstr ""

msgid "InputSource Objects"
msgstr ""

msgid "Sets the public identifier of this :class:`InputSource`."
msgstr ""

msgid "Returns the public identifier of this :class:`InputSource`."
msgstr ""

msgid "Sets the system identifier of this :class:`InputSource`."
msgstr ""

msgid "Returns the system identifier of this :class:`InputSource`."
msgstr ""

msgid "Sets the character encoding of this :class:`InputSource`."
msgstr ""

msgid "The encoding must be a string acceptable for an XML encoding declaration (see section 4.3.3 of the XML recommendation)."
msgstr ""

msgid "The encoding attribute of the :class:`InputSource` is ignored if the :class:`InputSource` also contains a character stream."
msgstr ""

msgid "Get the character encoding of this InputSource."
msgstr ""

msgid "Set the byte stream (a Python file-like object which does not perform byte-to-character conversion) for this input source."
msgstr ""

msgid "The SAX parser will ignore this if there is also a character stream specified, but it will use a byte stream in preference to opening a URI connection itself."
msgstr ""

msgid "If the application knows the character encoding of the byte stream, it should set it with the setEncoding method."
msgstr ""

msgid "Get the byte stream for this input source."
msgstr ""

msgid "The getEncoding method will return the character encoding for this byte stream, or None if unknown."
msgstr ""

msgid "Set the character stream for this input source. (The stream must be a Python 1.6 Unicode-wrapped file-like that performs conversion to strings.)"
msgstr ""

msgid "If there is a character stream specified, the SAX parser will ignore any byte stream and will not attempt to open a URI connection to the system identifier."
msgstr ""

msgid "Get the character stream for this input source."
msgstr ""

msgid "The :class:`Attributes` Interface"
msgstr ""

msgid ":class:`Attributes` objects implement a portion of the mapping protocol, including the methods :meth:`copy`, :meth:`get`, :meth:`__contains__`, :meth:`items`, :meth:`keys`, and :meth:`values`.  The following methods are also provided:"
msgstr ""

msgid "Return the number of attributes."
msgstr ""

msgid "Return the names of the attributes."
msgstr ""

msgid "Returns the type of the attribute *name*, which is normally ``'CDATA'``."
msgstr ""

msgid "Return the value of attribute *name*."
msgstr ""

msgid "The :class:`AttributesNS` Interface"
msgstr ""

msgid "This interface is a subtype of the :class:`Attributes` interface (see section :ref:`attributes-objects`).  All methods supported by that interface are also available on :class:`AttributesNS` objects."
msgstr ""

msgid "The following methods are also available:"
msgstr ""

msgid "Return the value for a qualified name."
msgstr ""

msgid "Return the ``(namespace, localname)`` pair for a qualified *name*."
msgstr ""

msgid "Return the qualified name for a ``(namespace, localname)`` pair."
msgstr ""

msgid "Return the qualified names of all attributes."
msgstr ""

msgid ":mod:`xml.sax.saxutils` --- SAX Utilities"
msgstr ""

msgid "The module :mod:`xml.sax.saxutils` contains a number of classes and functions that are commonly useful when creating SAX applications, either in direct use, or as base classes."
msgstr ""

msgid "Escape ``'&'``, ``'<'``, and ``'>'`` in a string of data."
msgstr ""

msgid "You can escape other strings of data by passing a dictionary as the optional *entities* parameter.  The keys and values must all be strings; each key will be replaced with its corresponding value.  The characters ``'&'``, ``'<'`` and ``'>'`` are always escaped, even if *entities* is provided."
msgstr ""

msgid "Unescape ``'&amp;'``, ``'&lt;'``, and ``'&gt;'`` in a string of data."
msgstr ""

msgid "You can unescape other strings of data by passing a dictionary as the optional *entities* parameter.  The keys and values must all be strings; each key will be replaced with its corresponding value.  ``'&amp'``, ``'&lt;'``, and ``'&gt;'`` are always unescaped, even if *entities* is provided."
msgstr ""

msgid "Similar to :func:`escape`, but also prepares *data* to be used as an attribute value.  The return value is a quoted version of *data* with any additional required replacements. :func:`quoteattr` will select a quote character based on the content of *data*, attempting to avoid encoding any quote characters in the string.  If both single- and double-quote characters are already in *data*, the double-quote characters will be encoded and *data* will be wrapped in double-quotes.  The resulting string can be used directly as an attribute value::"
msgstr ""

msgid ">>> print(\"<element attr=%s>\" % quoteattr(\"ab ' cd \\\" ef\")) <element attr=\"ab ' cd &quot; ef\">"
msgstr ""

msgid "This function is useful when generating attribute values for HTML or any SGML using the reference concrete syntax."
msgstr ""

msgid "This class implements the :class:`ContentHandler` interface by writing SAX events back into an XML document. In other words, using an :class:`XMLGenerator` as the content handler will reproduce the original document being parsed. *out* should be a file-like object which will default to *sys.stdout*. *encoding* is the encoding of the output stream which defaults to ``'iso-8859-1'``."
msgstr ""

msgid "This class is designed to sit between an :class:`XMLReader` and the client application's event handlers.  By default, it does nothing but pass requests up to the reader and events on to the handlers unmodified, but subclasses can override specific methods to modify the event stream or the configuration requests as they pass through."
msgstr ""

msgid "This function takes an input source and an optional base URL and returns a fully resolved :class:`InputSource` object ready for reading.  The input source can be given as a string, a file-like object, or an :class:`InputSource` object; parsers will use this function to implement the polymorphic *source* argument to their :meth:`parse` method."
msgstr ""

msgid ":mod:`xmlrpc.client` --- XML-RPC client access"
msgstr ""

msgid "XML-RPC is a Remote Procedure Call method that uses XML passed via HTTP as a transport.  With it, a client can call methods with parameters on a remote server (the server is named by a URI) and get back structured data.  This module supports writing XML-RPC client code; it handles all the details of translating between conformable Python objects and XML on the wire."
msgstr ""

msgid "A :class:`ServerProxy` instance is an object that manages communication with a remote XML-RPC server.  The required first argument is a URI (Uniform Resource Indicator), and will normally be the URL of the server.  The optional second argument is a transport factory instance; by default it is an internal :class:`SafeTransport` instance for https: URLs and an internal HTTP :class:`Transport` instance otherwise.  The optional third argument is an encoding, by default UTF-8. The optional fourth argument is a debugging flag. If *allow_none* is true,  the Python constant ``None`` will be translated into XML; the default behaviour is for ``None`` to raise a :exc:`TypeError`. This is a commonly-used extension to the XML-RPC specification, but isn't supported by all clients and servers; see http://ontosys.com/xml-rpc/extensions.php for a description.  The *use_datetime* flag can be used to cause date/time values to be presented as :class:`datetime.datetime` objects; this is false by default. :class:`datetime.datetime` objects may be passed to calls."
msgstr ""

msgid "Both the HTTP and HTTPS transports support the URL syntax extension for HTTP Basic Authentication: ``http://user:pass@host:port/path``.  The  ``user:pass`` portion will be base64-encoded as an HTTP 'Authorization' header, and sent to the remote server as part of the connection process when invoking an XML-RPC method.  You only need to use this if the remote server requires a Basic Authentication user and password."
msgstr ""

msgid "The returned instance is a proxy object with methods that can be used to invoke corresponding RPC calls on the remote server.  If the remote server supports the introspection API, the proxy can also be used to query the remote server for the methods it supports (service discovery) and fetch other server-associated metadata."
msgstr ""

msgid ":class:`ServerProxy` instance methods take Python basic types and objects as arguments and return Python basic types and classes.  Types that are conformable (e.g. that can be marshalled through XML), include the following (and except where noted, they are unmarshalled as the same Python type):"
msgstr ""

msgid ":const:`boolean`"
msgstr ""

msgid "The :const:`True` and :const:`False` constants"
msgstr ""

msgid ":const:`integers`"
msgstr ""

msgid "Pass in directly"
msgstr ""

msgid ":const:`floating-point numbers`"
msgstr ""

msgid ":const:`strings`"
msgstr ""

msgid ":const:`arrays`"
msgstr ""

msgid "Any Python sequence type containing conformable elements. Arrays are returned as lists"
msgstr ""

msgid ":const:`structures`"
msgstr ""

msgid "A Python dictionary. Keys must be strings, values may be any conformable type. Objects of user-defined classes can be passed in; only their *__dict__* attribute is transmitted."
msgstr ""

msgid ":const:`dates`"
msgstr ""

msgid "in seconds since the epoch (pass in an instance of the :class:`DateTime` class) or a :class:`datetime.datetime` instance."
msgstr ""

msgid ":const:`binary data`"
msgstr ""

msgid "pass in an instance of the :class:`Binary` wrapper class"
msgstr ""

msgid "This is the full set of data types supported by XML-RPC.  Method calls may also raise a special :exc:`Fault` instance, used to signal XML-RPC server errors, or :exc:`ProtocolError` used to signal an error in the HTTP/HTTPS transport layer. Both :exc:`Fault` and :exc:`ProtocolError` derive from a base class called :exc:`Error`.  Note that the xmlrpc client module currently does not marshal instances of subclasses of built-in types."
msgstr ""

msgid "When passing strings, characters special to XML such as ``<``, ``>``, and ``&`` will be automatically escaped.  However, it's the caller's responsibility to ensure that the string is free of characters that aren't allowed in XML, such as the control characters with ASCII values between 0 and 31 (except, of course, tab, newline and carriage return); failing to do this will result in an XML-RPC request that isn't well-formed XML.  If you have to pass arbitrary strings via XML-RPC, use the :class:`Binary` wrapper class described below."
msgstr ""

msgid ":class:`Server` is retained as an alias for :class:`ServerProxy` for backwards compatibility.  New code should use :class:`ServerProxy`."
msgstr ""

msgid "A good description of XML-RPC operation and client software in several languages. Contains pretty much everything an XML-RPC client developer needs to know."
msgstr ""

msgid "Describes the XML-RPC protocol extension for introspection."
msgstr ""

msgid "The official specification."
msgstr ""

msgid "Fredrik Lundh's \"unofficial errata, intended to clarify certain details in the XML-RPC specification, as well as hint at 'best practices' to use when designing your own XML-RPC implementations.\""
msgstr ""

msgid "ServerProxy Objects"
msgstr ""

msgid "A :class:`ServerProxy` instance has a method corresponding to each remote procedure call accepted by the XML-RPC server.  Calling the method performs an RPC, dispatched by both name and argument signature (e.g. the same method name can be overloaded with multiple argument signatures).  The RPC finishes by returning a value, which may be either returned data in a conformant type or a :class:`Fault` or :class:`ProtocolError` object indicating an error."
msgstr ""

msgid "Servers that support the XML introspection API support some common methods grouped under the reserved :attr:`system` member:"
msgstr ""

msgid "This method returns a list of strings, one for each (non-system) method supported by the XML-RPC server."
msgstr ""

msgid "This method takes one parameter, the name of a method implemented by the XML-RPC server. It returns an array of possible signatures for this method. A signature is an array of types. The first of these types is the return type of the method, the rest are parameters."
msgstr ""

msgid "Because multiple signatures (ie. overloading) is permitted, this method returns a list of signatures rather than a singleton."
msgstr ""

msgid "Signatures themselves are restricted to the top level parameters expected by a method. For instance if a method expects one array of structs as a parameter, and it returns a string, its signature is simply \"string, array\". If it expects three integers and returns a string, its signature is \"string, int, int, int\"."
msgstr ""

msgid "If no signature is defined for the method, a non-array value is returned. In Python this means that the type of the returned  value will be something other than list."
msgstr ""

msgid "This method takes one parameter, the name of a method implemented by the XML-RPC server.  It returns a documentation string describing the use of that method. If no such string is available, an empty string is returned. The documentation string may contain HTML markup."
msgstr ""

msgid "A working example follows. The server code::"
msgstr ""

msgid "from xmlrpc.server import SimpleXMLRPCServer  def is_even(n):     return n%2 == 0  server = SimpleXMLRPCServer((\"localhost\", 8000)) print(\"Listening on port 8000...\") server.register_function(is_even, \"is_even\") server.serve_forever()"
msgstr ""

msgid "The client code for the preceding server::"
msgstr ""

msgid "import xmlrpc.client  proxy = xmlrpc.client.ServerProxy(\"http://localhost:8000/\") print(\"3 is even: %s\" % str(proxy.is_even(3))) print(\"100 is even: %s\" % str(proxy.is_even(100)))"
msgstr ""

msgid "DateTime Objects"
msgstr ""

msgid "This class may be initialized with seconds since the epoch, a time tuple, an ISO 8601 time/date string, or a :class:`datetime.datetime` instance.  It has the following methods, supported mainly for internal use by the marshalling/unmarshalling code:"
msgstr ""

msgid "Accept a string as the instance's new time value."
msgstr ""

msgid "Write the XML-RPC encoding of this :class:`DateTime` item to the *out* stream object."
msgstr ""

msgid "It also supports certain of Python's built-in operators through rich comparison and :meth:`__repr__` methods."
msgstr ""

msgid "import datetime from xmlrpc.server import SimpleXMLRPCServer import xmlrpc.client  def today():     today = datetime.datetime.today()     return xmlrpc.client.DateTime(today)  server = SimpleXMLRPCServer((\"localhost\", 8000)) print(\"Listening on port 8000...\") server.register_function(today, \"today\") server.serve_forever()"
msgstr ""

msgid "import xmlrpc.client import datetime  proxy = xmlrpc.client.ServerProxy(\"http://localhost:8000/\")  today = proxy.today() # convert the ISO8601 string to a datetime object converted = datetime.datetime.strptime(today.value, \"%Y%m%dT%H:%M:%S\") print(\"Today: %s\" % converted.strftime(\"%d.%m.%Y, %H:%M\"))"
msgstr ""

msgid "Binary Objects"
msgstr ""

msgid "This class may be initialized from string data (which may include NULs). The primary access to the content of a :class:`Binary` object is provided by an attribute:"
msgstr ""

msgid "The binary data encapsulated by the :class:`Binary` instance.  The data is provided as an 8-bit string."
msgstr ""

msgid ":class:`Binary` objects have the following methods, supported mainly for internal use by the marshalling/unmarshalling code:"
msgstr ""

msgid "Accept a base64 string and decode it as the instance's new data."
msgstr ""

msgid "Write the XML-RPC base 64 encoding of this binary item to the out stream object."
msgstr ""

msgid "The encoded data will have newlines every 76 characters as per `RFC 2045 section 6.8 <http://tools.ietf.org/html/rfc2045#section-6.8>`_, which was the de facto standard base64 specification when the XML-RPC spec was written."
msgstr ""

msgid "It also supports certain of Python's built-in operators through :meth:`__eq__` and :meth:`__ne__` methods."
msgstr ""

msgid "Example usage of the binary objects.  We're going to transfer an image over XMLRPC::"
msgstr ""

msgid "from xmlrpc.server import SimpleXMLRPCServer import xmlrpc.client  def python_logo():     with open(\"python_logo.jpg\", \"rb\") as handle:         return xmlrpc.client.Binary(handle.read())  server = SimpleXMLRPCServer((\"localhost\", 8000)) print(\"Listening on port 8000...\") server.register_function(python_logo, 'python_logo')  server.serve_forever()"
msgstr ""

msgid "The client gets the image and saves it to a file::"
msgstr ""

msgid "import xmlrpc.client  proxy = xmlrpc.client.ServerProxy(\"http://localhost:8000/\") with open(\"fetched_python_logo.jpg\", \"wb\") as handle:     handle.write(proxy.python_logo().data)"
msgstr ""

msgid "Fault Objects"
msgstr ""

msgid "A :class:`Fault` object encapsulates the content of an XML-RPC fault tag. Fault objects have the following members:"
msgstr ""

msgid "A string indicating the fault type."
msgstr ""

msgid "A string containing a diagnostic message associated with the fault."
msgstr ""

msgid "In the following example we're going to intentionally cause a :exc:`Fault` by returning a complex type object.  The server code::"
msgstr ""

msgid "from xmlrpc.server import SimpleXMLRPCServer  # A marshalling error is going to occur because we're returning a # complex number def add(x,y):     return x+y+0j  server = SimpleXMLRPCServer((\"localhost\", 8000)) print(\"Listening on port 8000...\") server.register_function(add, 'add')  server.serve_forever()"
msgstr ""

msgid "import xmlrpc.client  proxy = xmlrpc.client.ServerProxy(\"http://localhost:8000/\") try:     proxy.add(2, 5) except xmlrpc.client.Fault as err:     print(\"A fault occurred\")     print(\"Fault code: %d\" % err.faultCode)     print(\"Fault string: %s\" % err.faultString)"
msgstr ""

msgid "ProtocolError Objects"
msgstr ""

msgid "A :class:`ProtocolError` object describes a protocol error in the underlying transport layer (such as a 404 'not found' error if the server named by the URI does not exist).  It has the following members:"
msgstr ""

msgid "The URI or URL that triggered the error."
msgstr ""

msgid "The error code."
msgstr ""

msgid "The error message or diagnostic string."
msgstr ""

msgid "A dict containing the headers of the HTTP/HTTPS request that triggered the error."
msgstr ""

msgid "In the following example we're going to intentionally cause a :exc:`ProtocolError` by providing an invalid URI::"
msgstr ""

msgid "import xmlrpc.client  # create a ServerProxy with an URI that doesn't respond to XMLRPC requests proxy = xmlrpc.client.ServerProxy(\"http://google.com/\")  try:     proxy.some_method() except xmlrpc.client.ProtocolError as err:     print(\"A protocol error occurred\")     print(\"URL: %s\" % err.url)     print(\"HTTP/HTTPS headers: %s\" % err.headers)     print(\"Error code: %d\" % err.errcode)     print(\"Error message: %s\" % err.errmsg)"
msgstr ""

msgid "MultiCall Objects"
msgstr ""

msgid "In http://www.xmlrpc.com/discuss/msgReader%241208, an approach is presented to encapsulate multiple calls to a remote server into a single request."
msgstr ""

msgid "Create an object used to boxcar method calls. *server* is the eventual target of the call. Calls can be made to the result object, but they will immediately return ``None``, and only store the call name and parameters in the :class:`MultiCall` object. Calling the object itself causes all stored calls to be transmitted as a single ``system.multicall`` request. The result of this call is a :term:`generator`; iterating over this generator yields the individual results."
msgstr ""

msgid "A usage example of this class follows.  The server code ::"
msgstr ""

msgid "from xmlrpc.server import SimpleXMLRPCServer  def add(x,y):     return x+y  def subtract(x, y):     return x-y  def multiply(x, y):     return x*y  def divide(x, y):     return x/y  # A simple server with simple arithmetic functions server = SimpleXMLRPCServer((\"localhost\", 8000)) print(\"Listening on port 8000...\") server.register_multicall_functions() server.register_function(add, 'add') server.register_function(subtract, 'subtract') server.register_function(multiply, 'multiply') server.register_function(divide, 'divide') server.serve_forever()"
msgstr ""

msgid "import xmlrpc.client  proxy = xmlrpc.client.ServerProxy(\"http://localhost:8000/\") multicall = xmlrpc.client.MultiCall(proxy) multicall.add(7,3) multicall.subtract(7,3) multicall.multiply(7,3) multicall.divide(7,3) result = multicall()  print(\"7+3=%d, 7-3=%d, 7*3=%d, 7/3=%d\" % tuple(result))"
msgstr ""

msgid "Convert *params* into an XML-RPC request. or into a response if *methodresponse* is true. *params* can be either a tuple of arguments or an instance of the :exc:`Fault` exception class.  If *methodresponse* is true, only a single value can be returned, meaning that *params* must be of length 1. *encoding*, if supplied, is the encoding to use in the generated XML; the default is UTF-8. Python's :const:`None` value cannot be used in standard XML-RPC; to allow using it via an extension,  provide a true value for *allow_none*."
msgstr ""

msgid "Convert an XML-RPC request or response into Python objects, a ``(params, methodname)``.  *params* is a tuple of argument; *methodname* is a string, or ``None`` if no method name is present in the packet. If the XML-RPC packet represents a fault condition, this function will raise a :exc:`Fault` exception. The *use_datetime* flag can be used to cause date/time values to be presented as :class:`datetime.datetime` objects; this is false by default."
msgstr ""

msgid "Example of Client Usage"
msgstr ""

msgid "# simple test program (from the XML-RPC specification) from xmlrpc.client import ServerProxy, Error  # server = ServerProxy(\"http://localhost:8000\") # local server server = ServerProxy(\"http://betty.userland.com\")  print(server)  try:     print(server.examples.getStateName(41)) except Error as v:     print(\"ERROR\", v)"
msgstr ""

msgid "To access an XML-RPC server through a proxy, you need to define  a custom transport.  The following example shows how:"
msgstr ""

msgid "import xmlrpc.client, http.client  class ProxiedTransport(xmlrpc.client.Transport):     def set_proxy(self, proxy):         self.proxy = proxy     def make_connection(self, host):         self.realhost = host         h = http.client.HTTP(self.proxy)         return h     def send_request(self, connection, handler, request_body):         connection.putrequest(\"POST\", 'http://%s%s' % (self.realhost, handler))     def send_host(self, connection, host):         connection.putheader('Host', self.realhost)  p = ProxiedTransport() p.set_proxy('proxy-server:8080') server = xmlrpc.client.Server('http://time.xmlrpc.com/RPC2', transport=p) print(server.currentTime.getCurrentTime())"
msgstr ""

msgid "Example of Client and Server Usage"
msgstr ""

msgid "See :ref:`simplexmlrpcserver-example`."
msgstr ""

msgid ":mod:`xmlrpc.server` --- Basic XML-RPC servers"
msgstr ""

msgid "The :mod:`xmlrpc.server` module provides a basic server framework for XML-RPC servers written in Python.  Servers can either be free standing, using :class:`SimpleXMLRPCServer`, or embedded in a CGI environment, using :class:`CGIXMLRPCRequestHandler`."
msgstr ""

msgid "Create a new server instance.  This class provides methods for registration of functions that can be called by the XML-RPC protocol.  The *requestHandler* parameter should be a factory for request handler instances; it defaults to :class:`SimpleXMLRPCRequestHandler`.  The *addr* and *requestHandler* parameters are passed to the :class:`socketserver.TCPServer` constructor.  If *logRequests* is true (the default), requests will be logged; setting this parameter to false will turn off logging.   The *allow_none* and *encoding* parameters are passed on to  :mod:`xmlrpc.client` and control the XML-RPC responses that will be returned from the server. The *bind_and_activate* parameter controls whether :meth:`server_bind` and :meth:`server_activate` are called immediately by the constructor; it defaults to true. Setting it to false allows code to manipulate the *allow_reuse_address* class variable before the address is bound."
msgstr ""

msgid "Create a new instance to handle XML-RPC requests in a CGI environment.  The *allow_none* and *encoding* parameters are passed on to :mod:`xmlrpc.client` and control the XML-RPC responses that will be returned from the server."
msgstr ""

msgid "Create a new request handler instance.  This request handler supports ``POST`` requests and modifies logging so that the *logRequests* parameter to the :class:`SimpleXMLRPCServer` constructor parameter is honored."
msgstr ""

msgid "SimpleXMLRPCServer Objects"
msgstr ""

msgid "The :class:`SimpleXMLRPCServer` class is based on :class:`socketserver.TCPServer` and provides a means of creating simple, stand alone XML-RPC servers."
msgstr ""

msgid "Register a function that can respond to XML-RPC requests.  If *name* is given, it will be the method name associated with *function*, otherwise ``function.__name__`` will be used.  *name* can be either a normal or Unicode string, and may contain characters not legal in Python identifiers, including the period character."
msgstr ""

msgid "Register an object which is used to expose method names which have not been registered using :meth:`register_function`.  If *instance* contains a :meth:`_dispatch` method, it is called with the requested method name and the parameters from the request.  Its API is ``def _dispatch(self, method, params)`` (note that *params* does not represent a variable argument list).  If it calls an underlying function to perform its task, that function is called as ``func(*params)``, expanding the parameter list. The return value from :meth:`_dispatch` is returned to the client as the result.  If *instance* does not have a :meth:`_dispatch` method, it is searched for an attribute matching the name of the requested method."
msgstr ""

msgid "If the optional *allow_dotted_names* argument is true and the instance does not have a :meth:`_dispatch` method, then if the requested method name contains periods, each component of the method name is searched for individually, with the effect that a simple hierarchical search is performed.  The value found from this search is then called with the parameters from the request, and the return value is passed back to the client."
msgstr ""

msgid "Enabling the *allow_dotted_names* option allows intruders to access your module's global variables and may allow intruders to execute arbitrary code on your machine.  Only use this option on a secure, closed network."
msgstr ""

msgid "Registers the XML-RPC introspection functions ``system.listMethods``, ``system.methodHelp`` and ``system.methodSignature``."
msgstr ""

msgid "Registers the XML-RPC multicall function system.multicall."
msgstr ""

msgid "An attribute value that must be a tuple listing valid path portions of the URL for receiving XML-RPC requests.  Requests posted to other paths will result in a 404 \"no such page\" HTTP error.  If this tuple is empty, all paths will be considered valid. The default value is ``('/', '/RPC2')``."
msgstr ""

msgid "SimpleXMLRPCServer Example"
msgstr ""

msgid "Server code::"
msgstr ""

msgid "from xmlrpc.server import SimpleXMLRPCServer from xmlrpc.server import SimpleXMLRPCRequestHandler  # Restrict to a particular path. class RequestHandler(SimpleXMLRPCRequestHandler):     rpc_paths = ('/RPC2',)  # Create server server = SimpleXMLRPCServer((\"localhost\", 8000),                             requestHandler=RequestHandler) server.register_introspection_functions()  # Register pow() function; this will use the value of # pow.__name__ as the name, which is just 'pow'. server.register_function(pow)  # Register a function under a different name def adder_function(x,y):     return x + y server.register_function(adder_function, 'add')  # Register an instance; all the methods of the instance are # published as XML-RPC methods (in this case, just 'mul'). class MyFuncs:     def mul(self, x, y):         return x * y  server.register_instance(MyFuncs())  # Run the server's main loop server.serve_forever()"
msgstr ""

msgid "The following client code will call the methods made available by the preceding server::"
msgstr ""

msgid "import xmlrpc.client  s = xmlrpc.client.ServerProxy('http://localhost:8000') print(s.pow(2,3))  # Returns 2**3 = 8 print(s.add(2,3))  # Returns 5 print(s.mul(5,2))  # Returns 5*2 = 10  # Print list of available methods print(s.system.listMethods())"
msgstr ""

msgid "CGIXMLRPCRequestHandler"
msgstr ""

msgid "The :class:`CGIXMLRPCRequestHandler` class can be used to  handle XML-RPC requests sent to Python CGI scripts."
msgstr ""

msgid "Register a function that can respond to XML-RPC requests. If  *name* is given, it will be the method name associated with  function, otherwise *function.__name__* will be used. *name* can be either a normal or Unicode string, and may contain  characters not legal in Python identifiers, including the period character."
msgstr ""

msgid "Register an object which is used to expose method names  which have not been registered using :meth:`register_function`. If  instance contains a :meth:`_dispatch` method, it is called with the  requested method name and the parameters from the  request; the return value is returned to the client as the result. If instance does not have a :meth:`_dispatch` method, it is searched for an attribute matching the name of the requested method; if  the requested method name contains periods, each  component of the method name is searched for individually,  with the effect that a simple hierarchical search is performed. The value found from this search is then called with the  parameters from the request, and the return value is passed  back to the client."
msgstr ""

msgid "Register the XML-RPC introspection functions  ``system.listMethods``, ``system.methodHelp`` and  ``system.methodSignature``."
msgstr ""

msgid "Register the XML-RPC multicall function ``system.multicall``."
msgstr ""

msgid "Handle a XML-RPC request. If *request_text* is given, it  should be the POST data provided by the HTTP server,  otherwise the contents of stdin will be used."
msgstr ""

msgid "class MyFuncs:     def mul(self, x, y):         return x * y   handler = CGIXMLRPCRequestHandler() handler.register_function(pow) handler.register_function(lambda x,y: x+y, 'add') handler.register_introspection_functions() handler.register_instance(MyFuncs()) handler.handle_request()"
msgstr ""

msgid "Documenting XMLRPC server"
msgstr ""

msgid "These classes extend the above classes to serve HTML documentation in response to HTTP GET requests.  Servers can either be free standing, using :class:`DocXMLRPCServer`, or embedded in a CGI environment, using :class:`DocCGIXMLRPCRequestHandler`."
msgstr ""

msgid "Create a new server instance. All parameters have the same meaning as for :class:`SimpleXMLRPCServer`; *requestHandler* defaults to :class:`DocXMLRPCRequestHandler`."
msgstr ""

msgid "Create a new instance to handle XML-RPC requests in a CGI environment."
msgstr ""

msgid "Create a new request handler instance. This request handler supports XML-RPC POST requests, documentation GET requests, and modifies logging so that the *logRequests* parameter to the :class:`DocXMLRPCServer` constructor parameter is honored."
msgstr ""

msgid "DocXMLRPCServer Objects"
msgstr ""

msgid "The :class:`DocXMLRPCServer` class is derived from :class:`SimpleXMLRPCServer` and provides a means of creating self-documenting, stand alone XML-RPC servers. HTTP POST requests are handled as XML-RPC method calls. HTTP GET requests are handled by generating pydoc-style HTML documentation. This allows a server to provide its own web-based documentation."
msgstr ""

msgid "Set the title used in the generated HTML documentation. This title will be used inside the HTML \"title\" element."
msgstr ""

msgid "Set the name used in the generated HTML documentation. This name will appear at the top of the generated documentation inside a \"h1\" element."
msgstr ""

msgid "Set the description used in the generated HTML documentation. This description will appear as a paragraph, below the server name, in the documentation."
msgstr ""

msgid "DocCGIXMLRPCRequestHandler"
msgstr ""

msgid "The :class:`DocCGIXMLRPCRequestHandler` class is derived from :class:`CGIXMLRPCRequestHandler` and provides a means of creating self-documenting, XML-RPC CGI scripts. HTTP POST requests are handled as XML-RPC method calls. HTTP GET requests are handled by generating pydoc-style HTML documentation. This allows a server to provide its own web-based documentation."
msgstr ""

msgid ":mod:`zipfile` --- Work with ZIP archives"
msgstr ""

msgid "The ZIP file format is a common archive and compression standard. This module provides tools to create, read, write, append, and list a ZIP file.  Any advanced use of this module will require an understanding of the format, as defined in `PKZIP Application Note <http://www.pkware.com/documents/casestudies/APPNOTE.TXT>`_."
msgstr ""

msgid "This module does not currently handle multi-disk ZIP files, or ZIP files which have appended comments (although it correctly handles comments added to individual archive members---for which see the :ref:`zipinfo-objects` documentation). It can handle ZIP files that use the ZIP64 extensions (that is ZIP files that are more than 4 GByte in size).  It supports decryption of encrypted files in ZIP archives, but it currently cannot create an encrypted file.  Decryption is extremely slow as it is implemented in native Python rather than C."
msgstr ""

msgid "For other archive formats, see the :mod:`bz2`, :mod:`gzip`, and :mod:`tarfile` modules."
msgstr ""

msgid "The error raised for bad ZIP files (old name: ``zipfile.error``)."
msgstr ""

msgid "The error raised when a ZIP file would require ZIP64 functionality but that has not been enabled."
msgstr ""

msgid "The class for reading and writing ZIP files.  See section :ref:`zipfile-objects` for constructor details."
msgstr ""

msgid "Class for creating ZIP archives containing Python libraries."
msgstr ""

msgid "Class used to represent information about a member of an archive. Instances of this class are returned by the :meth:`getinfo` and :meth:`infolist` methods of :class:`ZipFile` objects.  Most users of the :mod:`zipfile` module will not need to create these, but only use those created by this module. *filename* should be the full name of the archive member, and *date_time* should be a tuple containing six fields which describe the time of the last modification to the file; the fields are described in section :ref:`zipinfo-objects`."
msgstr ""

msgid "Returns ``True`` if *filename* is a valid ZIP file based on its magic number, otherwise returns ``False``.  *filename* may be a file or file-like object too. This module does not currently handle ZIP files which have appended comments."
msgstr ""

msgid "The numeric constant for an uncompressed archive member."
msgstr ""

msgid "The numeric constant for the usual ZIP compression method.  This requires the zlib module.  No other compression methods are currently supported."
msgstr ""

msgid "Documentation on the ZIP file format by Phil Katz, the creator of the format and algorithms used."
msgstr ""

msgid "Information about the Info-ZIP project's ZIP archive programs and development libraries."
msgstr ""

msgid "ZipFile Objects"
msgstr ""

msgid "Open a ZIP file, where *file* can be either a path to a file (a string) or a file-like object.  The *mode* parameter should be ``'r'`` to read an existing file, ``'w'`` to truncate and write a new file, or ``'a'`` to append to an existing file.  If *mode* is ``'a'`` and *file* refers to an existing ZIP file, then additional files are added to it.  If *file* does not refer to a ZIP file, then a new ZIP archive is appended to the file.  This is meant for adding a ZIP archive to another file (such as :file:`python.exe`).  If *mode* is ``a`` and the file does not exist at all, it is created. *compression* is the ZIP compression method to use when writing the archive, and should be :const:`ZIP_STORED` or :const:`ZIP_DEFLATED`; unrecognized values will cause :exc:`RuntimeError` to be raised.  If :const:`ZIP_DEFLATED` is specified but the :mod:`zlib` module is not available, :exc:`RuntimeError` is also raised. The default is :const:`ZIP_STORED`.  If *allowZip64* is ``True`` zipfile will create ZIP files that use the ZIP64 extensions when the zipfile is larger than 2 GB. If it is  false (the default) :mod:`zipfile` will raise an exception when the ZIP file would require ZIP64 extensions. ZIP64 extensions are disabled by default because the default :program:`zip` and :program:`unzip` commands on Unix (the InfoZIP utilities) don't support these extensions."
msgstr ""

msgid "ZipFile is also a context manager and therefore supports the :keyword:`with` statement.  In the example, *myzip* is closed after the :keyword:`with` statement's suite is finished---even if an exception occurs::"
msgstr ""

msgid "with ZipFile('spam.zip', 'w') as myzip:     myzip.write('eggs.txt')"
msgstr ""

msgid "Close the archive file.  You must call :meth:`close` before exiting your program or essential records will not be written."
msgstr ""

msgid "Return a :class:`ZipInfo` object with information about the archive member *name*.  Calling :meth:`getinfo` for a name not currently contained in the archive will raise a :exc:`KeyError`."
msgstr ""

msgid "Return a list containing a :class:`ZipInfo` object for each member of the archive.  The objects are in the same order as their entries in the actual ZIP file on disk if an existing archive was opened."
msgstr ""

msgid "Return a list of archive members by name."
msgstr ""

msgid "Extract a member from the archive as a file-like object (ZipExtFile). *name* is the name of the file in the archive, or a :class:`ZipInfo` object. The *mode* parameter, if included, must be one of the following: ``'r'`` (the  default), ``'U'``, or ``'rU'``. Choosing ``'U'`` or  ``'rU'`` will enable universal newline support in the read-only object. *pwd* is the password used for encrypted files. Calling  :meth:`open` on a closed ZipFile will raise a  :exc:`RuntimeError`."
msgstr ""

msgid "The file-like object is read-only and provides the following methods: :meth:`read`, :meth:`readline`, :meth:`readlines`, :meth:`__iter__`, :meth:`__next__`."
msgstr ""

msgid "If the ZipFile was created by passing in a file-like object as the  first argument to the constructor, then the object returned by :meth:`.open` shares the ZipFile's file pointer.  Under these  circumstances, the object returned by :meth:`.open` should not  be used after any additional operations are performed on the  ZipFile object.  If the ZipFile was created by passing in a string (the filename) as the first argument to the constructor, then  :meth:`.open` will create a new file object that will be held by the ZipExtFile, allowing it to operate independently of the  ZipFile."
msgstr ""

msgid "The :meth:`open`, :meth:`read` and :meth:`extract` methods can take a filename or a :class:`ZipInfo` object.  You will appreciate this when trying to read a ZIP file that contains members with duplicate names."
msgstr ""

msgid "Extract a member from the archive to the current working directory; *member* must be its full name or a :class:`ZipInfo` object).  Its file information is extracted as accurately as possible.  *path* specifies a different directory to extract to.  *member* can be a filename or a :class:`ZipInfo` object. *pwd* is the password used for encrypted files."
msgstr ""

msgid "Extract all members from the archive to the current working directory.  *path* specifies a different directory to extract to.  *members* is optional and must be a subset of the list returned by :meth:`namelist`.  *pwd* is the password used for encrypted files."
msgstr ""

msgid "Print a table of contents for the archive to ``sys.stdout``."
msgstr ""

msgid "Set *pwd* as default password to extract encrypted files."
msgstr ""

msgid "Return the bytes of the file *name* in the archive.  *name* is the name of the file in the archive, or a :class:`ZipInfo` object.  The archive must be open for read or append. *pwd* is the password used for encrypted  files and, if specified, it will override the default password set with :meth:`setpassword`.  Calling :meth:`read` on a closed ZipFile  will raise a :exc:`RuntimeError`."
msgstr ""

msgid "Read all the files in the archive and check their CRC's and file headers. Return the name of the first bad file, or else return ``None``. Calling :meth:`testzip` on a closed ZipFile will raise a :exc:`RuntimeError`."
msgstr ""

msgid "Write the file named *filename* to the archive, giving it the archive name *arcname* (by default, this will be the same as *filename*, but without a drive letter and with leading path separators removed).  If given, *compress_type* overrides the value given for the *compression* parameter to the constructor for the new entry.  The archive must be open with mode ``'w'`` or ``'a'`` -- calling :meth:`write` on a ZipFile created with mode ``'r'`` will raise a :exc:`RuntimeError`.  Calling  :meth:`write` on a closed ZipFile will raise a :exc:`RuntimeError`."
msgstr ""

msgid "There is no official file name encoding for ZIP files. If you have unicode file names, you must convert them to byte strings in your desired encoding before passing them to :meth:`write`. WinZip interprets all file names as encoded in CP437, also known as DOS Latin."
msgstr ""

msgid "Archive names should be relative to the archive root, that is, they should not start with a path separator."
msgstr ""

msgid "If ``arcname`` (or ``filename``, if ``arcname`` is  not given) contains a null byte, the name of the file in the archive will be truncated at the null byte."
msgstr ""

msgid "Write the string *bytes* to the archive; *zinfo_or_arcname* is either the file name it will be given in the archive, or a :class:`ZipInfo` instance.  If it's an instance, at least the filename, date, and time must be given.  If it's a name, the date and time is set to the current date and time. The archive must be opened with mode ``'w'`` or ``'a'`` -- calling  :meth:`writestr` on a ZipFile created with mode ``'r'``  will raise a :exc:`RuntimeError`.  Calling :meth:`writestr` on a closed ZipFile will raise a :exc:`RuntimeError`."
msgstr ""

msgid "If given, *compress_type* overrides the value given for the *compression* parameter to the constructor for the new entry, or in the *zinfo_or_arcname* (if that is a :class:`ZipInfo` instance)."
msgstr ""

msgid "When passing a :class:`ZipInfo` instance as the *zinfo_or_acrname* parameter, the compression method used will be that specified in the *compress_type* member of the given :class:`ZipInfo` instance.  By default, the :class:`ZipInfo` constructor sets this member to :const:`ZIP_STORED`."
msgstr ""

msgid "The following data attributes are also available:"
msgstr ""

msgid "The level of debug output to use.  This may be set from ``0`` (the default, no output) to ``3`` (the most output).  Debugging information is written to ``sys.stdout``."
msgstr ""

msgid "The comment text associated with the ZIP file.  If assigning a comment to a :class:`ZipFile` instance created with mode 'a' or 'w', this should be a string no longer than 65535 bytes.  Comments longer than this will be truncated in the written archive when :meth:`ZipFile.close` is called."
msgstr ""

msgid "PyZipFile Objects"
msgstr ""

msgid "The :class:`PyZipFile` constructor takes the same parameters as the :class:`ZipFile` constructor.  Instances have one method in addition to those of :class:`ZipFile` objects."
msgstr ""

msgid "Search for files :file:`\\*.py` and add the corresponding file to the archive. The corresponding file is a :file:`\\*.pyo` file if available, else a :file:`\\*.pyc` file, compiling if necessary.  If the pathname is a file, the filename must end with :file:`.py`, and just the (corresponding :file:`\\*.py[co]`) file is added at the top level (no path information).  If the pathname is a file that does not end with :file:`.py`, a :exc:`RuntimeError` will be raised.  If it is a directory, and the directory is not a package directory, then all the files :file:`\\*.py[co]` are added at the top level.  If the directory is a package directory, then all :file:`\\*.py[co]` are added under the package name as a file path, and if any subdirectories are package directories, all of these are added recursively.  *basename* is intended for internal use only.  The :meth:`writepy` method makes archives with file names like this::"
msgstr ""

msgid "string.pyc                                # Top level name test/__init__.pyc                         # Package directory test/testall.pyc                          # Module test.testall test/bogus/__init__.pyc                   # Subpackage directory test/bogus/myfile.pyc                     # Submodule test.bogus.myfile"
msgstr ""

msgid "ZipInfo Objects"
msgstr ""

msgid "Instances of the :class:`ZipInfo` class are returned by the :meth:`getinfo` and :meth:`infolist` methods of :class:`ZipFile` objects.  Each object stores information about a single member of the ZIP archive."
msgstr ""

msgid "Instances have the following attributes:"
msgstr ""

msgid "Name of the file in the archive."
msgstr ""

msgid "The time and date of the last modification to the archive member.  This is a tuple of six values:"
msgstr ""

msgid "Year"
msgstr ""

msgid "Month (one-based)"
msgstr ""

msgid "Day of month (one-based)"
msgstr ""

msgid "Hours (zero-based)"
msgstr ""

msgid "Minutes (zero-based)"
msgstr ""

msgid "Seconds (zero-based)"
msgstr ""

msgid "Type of compression for the archive member."
msgstr ""

msgid "Comment for the individual archive member."
msgstr ""

msgid "Expansion field data.  The `PKZIP Application Note <http://www.pkware.com/documents/casestudies/APPNOTE.TXT>`_ contains some comments on the internal structure of the data contained in this string."
msgstr ""

msgid "System which created ZIP archive."
msgstr ""

msgid "PKZIP version which created ZIP archive."
msgstr ""

msgid "PKZIP version needed to extract archive."
msgstr ""

msgid "Must be zero."
msgstr ""

msgid "ZIP flag bits."
msgstr ""

msgid "Volume number of file header."
msgstr ""

msgid "Internal attributes."
msgstr ""

msgid "External file attributes."
msgstr ""

msgid "Byte offset to the file header."
msgstr ""

msgid "CRC-32 of the uncompressed file."
msgstr ""

msgid "Size of the compressed data."
msgstr ""

msgid "Size of the uncompressed file."
msgstr ""

msgid ":mod:`zipimport` --- Import modules from Zip archives"
msgstr ""

msgid "This module adds the ability to import Python modules (:file:`\\*.py`, :file:`\\*.py[co]`) and packages from ZIP-format archives. It is usually not needed to use the :mod:`zipimport` module explicitly; it is automatically used by the built-in :keyword:`import` mechanism for ``sys.path`` items that are paths to ZIP archives."
msgstr ""

msgid "Typically, ``sys.path`` is a list of directory names as strings.  This module also allows an item of ``sys.path`` to be a string naming a ZIP file archive. The ZIP archive can contain a subdirectory structure to support package imports, and a path within the archive can be specified to only import from a subdirectory.  For example, the path :file:`/tmp/example.zip/lib/` would only import from the :file:`lib/` subdirectory within the archive."
msgstr ""

msgid "Any files may be present in the ZIP archive, but only files :file:`.py` and :file:`.py[co]` are available for import.  ZIP import of dynamic modules (:file:`.pyd`, :file:`.so`) is disallowed. Note that if an archive only contains :file:`.py` files, Python will not attempt to modify the archive by adding the corresponding :file:`.pyc` or :file:`.pyo` file, meaning that if a ZIP archive doesn't contain :file:`.pyc` files, importing may be rather slow."
msgstr ""

msgid "ZIP archives with an archive comment are currently not supported."
msgstr ""

msgid "Written by James C. Ahlstrom, who also provided an implementation. Python 2.3 follows the specification in PEP 273, but uses an implementation written by Just van Rossum that uses the import hooks described in PEP 302."
msgstr ""

msgid "The PEP to add the import hooks that help this module work."
msgstr ""

msgid "This module defines an exception:"
msgstr ""

msgid "Exception raised by zipimporter objects. It's a subclass of :exc:`ImportError`, so it can be caught as :exc:`ImportError`, too."
msgstr ""

msgid "zipimporter Objects"
msgstr ""

msgid ":class:`zipimporter` is the class for importing ZIP files."
msgstr ""

msgid "Create a new zipimporter instance. *archivepath* must be a path to a ZIP file, or to a specific path within a ZIP file.  For example, an *archivepath* of :file:`foo/bar.zip/lib` will look for modules in the :file:`lib` directory inside the ZIP file :file:`foo/bar.zip` (provided that it exists)."
msgstr ""

msgid ":exc:`ZipImportError` is raised if *archivepath* doesn't point to a valid ZIP archive."
msgstr ""

msgid "Search for a module specified by *fullname*. *fullname* must be the fully qualified (dotted) module name. It returns the zipimporter instance itself if the module was found, or :const:`None` if it wasn't. The optional *path* argument is ignored---it's there for compatibility with the importer protocol."
msgstr ""

msgid "Return the code object for the specified module. Raise :exc:`ZipImportError` if the module couldn't be found."
msgstr ""

msgid "Return the data associated with *pathname*. Raise :exc:`IOError` if the file wasn't found."
msgstr ""

msgid "Return the value ``__file__`` would be set to if the specified module was imported. Raise :exc:`ZipImportError` if the module couldn't be found."
msgstr ""

msgid "Return the source code for the specified module. Raise :exc:`ZipImportError` if the module couldn't be found, return :const:`None` if the archive does contain the module, but has no source for it."
msgstr ""

msgid "Return True if the module specified by *fullname* is a package. Raise :exc:`ZipImportError` if the module couldn't be found."
msgstr ""

msgid "Load the module specified by *fullname*. *fullname* must be the fully qualified (dotted) module name. It returns the imported module, or raises :exc:`ZipImportError` if it wasn't found."
msgstr ""

msgid "The file name of the importer's associated ZIP file, without a possible subpath."
msgstr ""

msgid "The subpath within the ZIP file where modules are searched.  This is the empty string for zipimporter objects which point to the root of the ZIP file."
msgstr ""

msgid "The :attr:`archive` and :attr:`prefix` attributes, when combined with a slash, equal the original *archivepath* argument given to the :class:`zipimporter` constructor."
msgstr ""

msgid "Here is an example that imports a module from a ZIP archive - note that the :mod:`zipimport` module is not explicitly used. ::"
msgstr ""

msgid "$ unzip -l /tmp/example.zip Archive:  /tmp/example.zip   Length     Date   Time    Name  --------    ----   ----    ----      8467  11-26-02 22:30   jwzthreading.py  --------                   -------      8467                   1 file $ ./python Python 2.3 (#1, Aug 1 2003, 19:54:32) >>> import sys >>> sys.path.insert(0, '/tmp/example.zip')  # Add .zip file to front of path >>> import jwzthreading >>> jwzthreading.__file__ '/tmp/example.zip/jwzthreading.py'"
msgstr ""

msgid ":mod:`zlib` --- Compression compatible with :program:`gzip`"
msgstr ""

msgid "For applications that require data compression, the functions in this module allow compression and decompression, using the zlib library. The zlib library has its own home page at http://www.zlib.net.   There are known incompatibilities between the Python module and versions of the zlib library earlier than 1.1.3; 1.1.3 has a security vulnerability, so we recommend using 1.1.4 or later."
msgstr ""

msgid "zlib's functions have many options and often need to be used in a particular order.  This documentation doesn't attempt to cover all of the permutations; consult the zlib manual at http://www.zlib.net/manual.html for authoritative information."
msgstr ""

msgid "For reading and writing ``.gz`` files see the :mod:`gzip` module. For other archive formats, see the :mod:`bz2`, :mod:`zipfile`, and :mod:`tarfile` modules."
msgstr ""

msgid "The available exception and functions in this module are:"
msgstr ""

msgid "Exception raised on compression and decompression errors."
msgstr ""

msgid "Computes a Adler-32 checksum of *data*.  (An Adler-32 checksum is almost as reliable as a CRC32 but can be computed much more quickly.)  If *value* is present, it is used as the starting value of the checksum; otherwise, a fixed default value is used.  This allows computing a running checksum over the concatenation of several inputs.  The algorithm is not cryptographically strong, and should not be used for authentication or digital signatures.  Since the algorithm is designed for use as a checksum algorithm, it is not suitable for use as a general hash algorithm."
msgstr ""

msgid "Always returns an unsigned 32-bit integer."
msgstr ""

msgid "To generate the same numeric value across all Python versions and platforms use adler32(data) & 0xffffffff.  If you are only using the checksum in packed binary format this is not necessary as the return value is the correct 32bit binary representation regardless of sign."
msgstr ""

msgid "Compresses the data in *string*, returning a string contained compressed data. *level* is an integer from ``1`` to ``9`` controlling the level of compression; ``1`` is fastest and produces the least compression, ``9`` is slowest and produces the most.  The default value is ``6``.  Raises the :exc:`error` exception if any error occurs."
msgstr ""

msgid "Returns a compression object, to be used for compressing data streams that won't fit into memory at once.  *level* is an integer from ``1`` to ``9`` controlling the level of compression; ``1`` is fastest and produces the least compression, ``9`` is slowest and produces the most.  The default value is ``6``."
msgstr ""

msgid "Computes a CRC (Cyclic Redundancy Check)  checksum of *data*. If *value* is present, it is used as the starting value of the checksum; otherwise, a fixed default value is used.  This allows computing a running checksum over the concatenation of several inputs.  The algorithm is not cryptographically strong, and should not be used for authentication or digital signatures.  Since the algorithm is designed for use as a checksum algorithm, it is not suitable for use as a general hash algorithm."
msgstr ""

msgid "Decompresses the data in *string*, returning a string containing the uncompressed data.  The *wbits* parameter controls the size of the window buffer, and is discussed further below. If *bufsize* is given, it is used as the initial size of the output buffer.  Raises the :exc:`error` exception if any error occurs."
msgstr ""

msgid "The absolute value of *wbits* is the base two logarithm of the size of the history buffer (the \"window size\") used when compressing data.  Its absolute value should be between 8 and 15 for the most recent versions of the zlib library, larger values resulting in better compression at the expense of greater memory usage.  When decompressing a stream, *wbits* must not be smaller than the size originally used to compress the stream; using a too-small value will result in an exception. The default value is therefore the highest value, 15.  When *wbits* is negative, the standard :program:`gzip` header is suppressed."
msgstr ""

msgid "*bufsize* is the initial size of the buffer used to hold decompressed data.  If more space is required, the buffer size will be increased as needed, so you don't have to get this value exactly right; tuning it will only save a few calls to :cfunc:`malloc`.  The default size is 16384."
msgstr ""

msgid "Returns a decompression object, to be used for decompressing data streams that won't fit into memory at once.  The *wbits* parameter controls the size of the window buffer."
msgstr ""

msgid "Compression objects support the following methods:"
msgstr ""

msgid "Compress *string*, returning a string containing compressed data for at least part of the data in *string*.  This data should be concatenated to the output produced by any preceding calls to the :meth:`compress` method.  Some input may be kept in internal buffers for later processing."
msgstr ""

msgid "All pending input is processed, and a string containing the remaining compressed output is returned.  *mode* can be selected from the constants :const:`Z_SYNC_FLUSH`,  :const:`Z_FULL_FLUSH`,  or  :const:`Z_FINISH`, defaulting to :const:`Z_FINISH`.  :const:`Z_SYNC_FLUSH` and :const:`Z_FULL_FLUSH` allow compressing further strings of data, while :const:`Z_FINISH` finishes the compressed stream and  prevents compressing any more data.  After calling :meth:`flush` with *mode* set to :const:`Z_FINISH`, the :meth:`compress` method cannot be called again; the only realistic action is to delete the object."
msgstr ""

msgid "Returns a copy of the compression object.  This can be used to efficiently compress a set of data that share a common initial prefix."
msgstr ""

msgid "Decompression objects support the following methods, and two attributes:"
msgstr ""

msgid "A string which contains any bytes past the end of the compressed data. That is, this remains ``\"\"`` until the last byte that contains compression data is available.  If the whole string turned out to contain compressed data, this is ``\"\"``, the empty string."
msgstr ""

msgid "The only way to determine where a string of compressed data ends is by actually decompressing it.  This means that when compressed data is contained part of a larger file, you can only find the end of it by reading data and feeding it followed by some non-empty string into a decompression object's :meth:`decompress` method until the :attr:`unused_data` attribute is no longer the empty string."
msgstr ""

msgid "A string that contains any data that was not consumed by the last :meth:`decompress` call because it exceeded the limit for the uncompressed data buffer.  This data has not yet been seen by the zlib machinery, so you must feed it (possibly with further data concatenated to it) back to a subsequent :meth:`decompress` method call in order to get correct output."
msgstr ""

msgid "Decompress *string*, returning a string containing the uncompressed data corresponding to at least part of the data in *string*.  This data should be concatenated to the output produced by any preceding calls to the :meth:`decompress` method.  Some of the input data may be preserved in internal buffers for later processing."
msgstr ""

msgid "If the optional parameter *max_length* is supplied then the return value will be no longer than *max_length*. This may mean that not all of the compressed input can be processed; and unconsumed data will be stored in the attribute :attr:`unconsumed_tail`. This string must be passed to a subsequent call to :meth:`decompress` if decompression is to continue.  If *max_length* is not supplied then the whole input is decompressed, and :attr:`unconsumed_tail` is an empty string."
msgstr ""

msgid "All pending input is processed, and a string containing the remaining uncompressed output is returned.  After calling :meth:`flush`, the :meth:`decompress` method cannot be called again; the only realistic action is to delete the object."
msgstr ""

msgid "The optional parameter *length* sets the initial size of the output buffer."
msgstr ""

msgid "Returns a copy of the decompression object.  This can be used to save the state of the decompressor midway through the data stream in order to speed up random seeks into the stream at a future point."
msgstr ""

msgid "Reading and writing :program:`gzip`\\ -format files."
msgstr ""

msgid "The zlib library home page."
msgstr ""

msgid "The zlib manual explains  the semantics and usage of the library's many functions."
msgstr ""
